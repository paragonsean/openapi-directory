/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvisor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvisor::OAIAdvisor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvisor::OAIAdvisor() {
    this->initializeModel();
}

OAIAdvisor::~OAIAdvisor() {}

void OAIAdvisor::initializeModel() {

    m_about_isSet = false;
    m_about_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_adv_brochure_isSet = false;
    m_adv_brochure_isValid = false;

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_compliance_bcc_email_address_isSet = false;
    m_compliance_bcc_email_address_isValid = false;

    m_dashboard_url_isSet = false;
    m_dashboard_url_isValid = false;

    m_disclosure_isSet = false;
    m_disclosure_isValid = false;

    m_email_report_blast_isSet = false;
    m_email_report_blast_isValid = false;

    m_external_options_isSet = false;
    m_external_options_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_linkedin_isSet = false;
    m_linkedin_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_profile_picture_isSet = false;
    m_profile_picture_isValid = false;

    m_reg_number_isSet = false;
    m_reg_number_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_twitter_handle_isSet = false;
    m_twitter_handle_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIAdvisor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvisor::fromJsonObject(QJsonObject json) {

    m_about_isValid = ::OpenAPI::fromJsonValue(m_about, json[QString("about")]);
    m_about_isSet = !json[QString("about")].isNull() && m_about_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("account_type")]);
    m_account_type_isSet = !json[QString("account_type")].isNull() && m_account_type_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_adv_brochure_isValid = ::OpenAPI::fromJsonValue(m_adv_brochure, json[QString("adv_brochure")]);
    m_adv_brochure_isSet = !json[QString("adv_brochure")].isNull() && m_adv_brochure_isValid;

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("api_key")]);
    m_api_key_isSet = !json[QString("api_key")].isNull() && m_api_key_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_compliance_bcc_email_address_isValid = ::OpenAPI::fromJsonValue(m_compliance_bcc_email_address, json[QString("compliance_bcc_email_address")]);
    m_compliance_bcc_email_address_isSet = !json[QString("compliance_bcc_email_address")].isNull() && m_compliance_bcc_email_address_isValid;

    m_dashboard_url_isValid = ::OpenAPI::fromJsonValue(m_dashboard_url, json[QString("dashboard_url")]);
    m_dashboard_url_isSet = !json[QString("dashboard_url")].isNull() && m_dashboard_url_isValid;

    m_disclosure_isValid = ::OpenAPI::fromJsonValue(m_disclosure, json[QString("disclosure")]);
    m_disclosure_isSet = !json[QString("disclosure")].isNull() && m_disclosure_isValid;

    m_email_report_blast_isValid = ::OpenAPI::fromJsonValue(m_email_report_blast, json[QString("email_report_blast")]);
    m_email_report_blast_isSet = !json[QString("email_report_blast")].isNull() && m_email_report_blast_isValid;

    m_external_options_isValid = ::OpenAPI::fromJsonValue(m_external_options, json[QString("external_options")]);
    m_external_options_isSet = !json[QString("external_options")].isNull() && m_external_options_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_linkedin_isValid = ::OpenAPI::fromJsonValue(m_linkedin, json[QString("linkedin")]);
    m_linkedin_isSet = !json[QString("linkedin")].isNull() && m_linkedin_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_profile_picture_isValid = ::OpenAPI::fromJsonValue(m_profile_picture, json[QString("profile_picture")]);
    m_profile_picture_isSet = !json[QString("profile_picture")].isNull() && m_profile_picture_isValid;

    m_reg_number_isValid = ::OpenAPI::fromJsonValue(m_reg_number, json[QString("reg_number")]);
    m_reg_number_isSet = !json[QString("reg_number")].isNull() && m_reg_number_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_twitter_handle_isValid = ::OpenAPI::fromJsonValue(m_twitter_handle, json[QString("twitter_handle")]);
    m_twitter_handle_isSet = !json[QString("twitter_handle")].isNull() && m_twitter_handle_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIAdvisor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvisor::asJsonObject() const {
    QJsonObject obj;
    if (m_about_isSet) {
        obj.insert(QString("about"), ::OpenAPI::toJsonValue(m_about));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("account_type"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_adv_brochure_isSet) {
        obj.insert(QString("adv_brochure"), ::OpenAPI::toJsonValue(m_adv_brochure));
    }
    if (m_api_key_isSet) {
        obj.insert(QString("api_key"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_compliance_bcc_email_address_isSet) {
        obj.insert(QString("compliance_bcc_email_address"), ::OpenAPI::toJsonValue(m_compliance_bcc_email_address));
    }
    if (m_dashboard_url_isSet) {
        obj.insert(QString("dashboard_url"), ::OpenAPI::toJsonValue(m_dashboard_url));
    }
    if (m_disclosure_isSet) {
        obj.insert(QString("disclosure"), ::OpenAPI::toJsonValue(m_disclosure));
    }
    if (m_email_report_blast_isSet) {
        obj.insert(QString("email_report_blast"), ::OpenAPI::toJsonValue(m_email_report_blast));
    }
    if (m_external_options_isSet) {
        obj.insert(QString("external_options"), ::OpenAPI::toJsonValue(m_external_options));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_linkedin_isSet) {
        obj.insert(QString("linkedin"), ::OpenAPI::toJsonValue(m_linkedin));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_profile_picture_isSet) {
        obj.insert(QString("profile_picture"), ::OpenAPI::toJsonValue(m_profile_picture));
    }
    if (m_reg_number_isSet) {
        obj.insert(QString("reg_number"), ::OpenAPI::toJsonValue(m_reg_number));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_twitter_handle_isSet) {
        obj.insert(QString("twitter_handle"), ::OpenAPI::toJsonValue(m_twitter_handle));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAIAdvisor::getAbout() const {
    return m_about;
}
void OAIAdvisor::setAbout(const QString &about) {
    m_about = about;
    m_about_isSet = true;
}

bool OAIAdvisor::is_about_Set() const{
    return m_about_isSet;
}

bool OAIAdvisor::is_about_Valid() const{
    return m_about_isValid;
}

QString OAIAdvisor::getAccountType() const {
    return m_account_type;
}
void OAIAdvisor::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIAdvisor::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIAdvisor::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QString OAIAdvisor::getAddress() const {
    return m_address;
}
void OAIAdvisor::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAdvisor::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAdvisor::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIAdvisor::getAdvBrochure() const {
    return m_adv_brochure;
}
void OAIAdvisor::setAdvBrochure(const QString &adv_brochure) {
    m_adv_brochure = adv_brochure;
    m_adv_brochure_isSet = true;
}

bool OAIAdvisor::is_adv_brochure_Set() const{
    return m_adv_brochure_isSet;
}

bool OAIAdvisor::is_adv_brochure_Valid() const{
    return m_adv_brochure_isValid;
}

QString OAIAdvisor::getApiKey() const {
    return m_api_key;
}
void OAIAdvisor::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIAdvisor::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIAdvisor::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIAdvisor::getCity() const {
    return m_city;
}
void OAIAdvisor::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAdvisor::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAdvisor::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIAdvisor::getCompany() const {
    return m_company;
}
void OAIAdvisor::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIAdvisor::is_company_Set() const{
    return m_company_isSet;
}

bool OAIAdvisor::is_company_Valid() const{
    return m_company_isValid;
}

QString OAIAdvisor::getComplianceBccEmailAddress() const {
    return m_compliance_bcc_email_address;
}
void OAIAdvisor::setComplianceBccEmailAddress(const QString &compliance_bcc_email_address) {
    m_compliance_bcc_email_address = compliance_bcc_email_address;
    m_compliance_bcc_email_address_isSet = true;
}

bool OAIAdvisor::is_compliance_bcc_email_address_Set() const{
    return m_compliance_bcc_email_address_isSet;
}

bool OAIAdvisor::is_compliance_bcc_email_address_Valid() const{
    return m_compliance_bcc_email_address_isValid;
}

QString OAIAdvisor::getDashboardUrl() const {
    return m_dashboard_url;
}
void OAIAdvisor::setDashboardUrl(const QString &dashboard_url) {
    m_dashboard_url = dashboard_url;
    m_dashboard_url_isSet = true;
}

bool OAIAdvisor::is_dashboard_url_Set() const{
    return m_dashboard_url_isSet;
}

bool OAIAdvisor::is_dashboard_url_Valid() const{
    return m_dashboard_url_isValid;
}

QString OAIAdvisor::getDisclosure() const {
    return m_disclosure;
}
void OAIAdvisor::setDisclosure(const QString &disclosure) {
    m_disclosure = disclosure;
    m_disclosure_isSet = true;
}

bool OAIAdvisor::is_disclosure_Set() const{
    return m_disclosure_isSet;
}

bool OAIAdvisor::is_disclosure_Valid() const{
    return m_disclosure_isValid;
}

QString OAIAdvisor::getEmailReportBlast() const {
    return m_email_report_blast;
}
void OAIAdvisor::setEmailReportBlast(const QString &email_report_blast) {
    m_email_report_blast = email_report_blast;
    m_email_report_blast_isSet = true;
}

bool OAIAdvisor::is_email_report_blast_Set() const{
    return m_email_report_blast_isSet;
}

bool OAIAdvisor::is_email_report_blast_Valid() const{
    return m_email_report_blast_isValid;
}

QString OAIAdvisor::getExternalOptions() const {
    return m_external_options;
}
void OAIAdvisor::setExternalOptions(const QString &external_options) {
    m_external_options = external_options;
    m_external_options_isSet = true;
}

bool OAIAdvisor::is_external_options_Set() const{
    return m_external_options_isSet;
}

bool OAIAdvisor::is_external_options_Valid() const{
    return m_external_options_isValid;
}

QString OAIAdvisor::getFirstName() const {
    return m_first_name;
}
void OAIAdvisor::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIAdvisor::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIAdvisor::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIAdvisor::getId() const {
    return m_id;
}
void OAIAdvisor::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAdvisor::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdvisor::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAdvisor::getLastName() const {
    return m_last_name;
}
void OAIAdvisor::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIAdvisor::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIAdvisor::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIAdvisor::getLinkedin() const {
    return m_linkedin;
}
void OAIAdvisor::setLinkedin(const QString &linkedin) {
    m_linkedin = linkedin;
    m_linkedin_isSet = true;
}

bool OAIAdvisor::is_linkedin_Set() const{
    return m_linkedin_isSet;
}

bool OAIAdvisor::is_linkedin_Valid() const{
    return m_linkedin_isValid;
}

QString OAIAdvisor::getLogo() const {
    return m_logo;
}
void OAIAdvisor::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIAdvisor::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIAdvisor::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIAdvisor::getName() const {
    return m_name;
}
void OAIAdvisor::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdvisor::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdvisor::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAdvisor::getPlan() const {
    return m_plan;
}
void OAIAdvisor::setPlan(const QString &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIAdvisor::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIAdvisor::is_plan_Valid() const{
    return m_plan_isValid;
}

QString OAIAdvisor::getProfilePicture() const {
    return m_profile_picture;
}
void OAIAdvisor::setProfilePicture(const QString &profile_picture) {
    m_profile_picture = profile_picture;
    m_profile_picture_isSet = true;
}

bool OAIAdvisor::is_profile_picture_Set() const{
    return m_profile_picture_isSet;
}

bool OAIAdvisor::is_profile_picture_Valid() const{
    return m_profile_picture_isValid;
}

QString OAIAdvisor::getRegNumber() const {
    return m_reg_number;
}
void OAIAdvisor::setRegNumber(const QString &reg_number) {
    m_reg_number = reg_number;
    m_reg_number_isSet = true;
}

bool OAIAdvisor::is_reg_number_Set() const{
    return m_reg_number_isSet;
}

bool OAIAdvisor::is_reg_number_Valid() const{
    return m_reg_number_isValid;
}

QString OAIAdvisor::getState() const {
    return m_state;
}
void OAIAdvisor::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAdvisor::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAdvisor::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAdvisor::getTag() const {
    return m_tag;
}
void OAIAdvisor::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIAdvisor::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIAdvisor::is_tag_Valid() const{
    return m_tag_isValid;
}

QString OAIAdvisor::getTwitterHandle() const {
    return m_twitter_handle;
}
void OAIAdvisor::setTwitterHandle(const QString &twitter_handle) {
    m_twitter_handle = twitter_handle;
    m_twitter_handle_isSet = true;
}

bool OAIAdvisor::is_twitter_handle_Set() const{
    return m_twitter_handle_isSet;
}

bool OAIAdvisor::is_twitter_handle_Valid() const{
    return m_twitter_handle_isValid;
}

QString OAIAdvisor::getWebsite() const {
    return m_website;
}
void OAIAdvisor::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIAdvisor::is_website_Set() const{
    return m_website_isSet;
}

bool OAIAdvisor::is_website_Valid() const{
    return m_website_isValid;
}

QString OAIAdvisor::getZip() const {
    return m_zip;
}
void OAIAdvisor::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIAdvisor::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIAdvisor::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIAdvisor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_about_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adv_brochure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance_bcc_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disclosure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_report_blast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linkedin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_picture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reg_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvisor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
