/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomFeed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomFeed::OAICustomFeed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomFeed::OAICustomFeed() {
    this->initializeModel();
}

OAICustomFeed::~OAICustomFeed() {}

void OAICustomFeed::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_custom_feed_filter_id_isSet = false;
    m_custom_feed_filter_id_isValid = false;

    m_custom_feed_permission_id_isSet = false;
    m_custom_feed_permission_id_isValid = false;

    m_custom_feed_template_id_isSet = false;
    m_custom_feed_template_id_isValid = false;

    m_custom_feed_visibility_isSet = false;
    m_custom_feed_visibility_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_display_label_isSet = false;
    m_display_label_isValid = false;

    m_is_auto_curated_newsletter_custom_feed_isSet = false;
    m_is_auto_curated_newsletter_custom_feed_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_popularity_isSet = false;
    m_popularity_isValid = false;

    m_premium_content_isSet = false;
    m_premium_content_isValid = false;

    m_seed_custom_feed_id_isSet = false;
    m_seed_custom_feed_id_isValid = false;

    m_third_party_articles_custom_feed_id_isSet = false;
    m_third_party_articles_custom_feed_id_isValid = false;
}

void OAICustomFeed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomFeed::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_custom_feed_filter_id_isValid = ::OpenAPI::fromJsonValue(m_custom_feed_filter_id, json[QString("custom_feed_filter_id")]);
    m_custom_feed_filter_id_isSet = !json[QString("custom_feed_filter_id")].isNull() && m_custom_feed_filter_id_isValid;

    m_custom_feed_permission_id_isValid = ::OpenAPI::fromJsonValue(m_custom_feed_permission_id, json[QString("custom_feed_permission_id")]);
    m_custom_feed_permission_id_isSet = !json[QString("custom_feed_permission_id")].isNull() && m_custom_feed_permission_id_isValid;

    m_custom_feed_template_id_isValid = ::OpenAPI::fromJsonValue(m_custom_feed_template_id, json[QString("custom_feed_template_id")]);
    m_custom_feed_template_id_isSet = !json[QString("custom_feed_template_id")].isNull() && m_custom_feed_template_id_isValid;

    m_custom_feed_visibility_isValid = ::OpenAPI::fromJsonValue(m_custom_feed_visibility, json[QString("custom_feed_visibility")]);
    m_custom_feed_visibility_isSet = !json[QString("custom_feed_visibility")].isNull() && m_custom_feed_visibility_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_display_label_isValid = ::OpenAPI::fromJsonValue(m_display_label, json[QString("display_label")]);
    m_display_label_isSet = !json[QString("display_label")].isNull() && m_display_label_isValid;

    m_is_auto_curated_newsletter_custom_feed_isValid = ::OpenAPI::fromJsonValue(m_is_auto_curated_newsletter_custom_feed, json[QString("is_auto_curated_newsletter_custom_feed")]);
    m_is_auto_curated_newsletter_custom_feed_isSet = !json[QString("is_auto_curated_newsletter_custom_feed")].isNull() && m_is_auto_curated_newsletter_custom_feed_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_popularity_isValid = ::OpenAPI::fromJsonValue(m_popularity, json[QString("popularity")]);
    m_popularity_isSet = !json[QString("popularity")].isNull() && m_popularity_isValid;

    m_premium_content_isValid = ::OpenAPI::fromJsonValue(m_premium_content, json[QString("premium_content")]);
    m_premium_content_isSet = !json[QString("premium_content")].isNull() && m_premium_content_isValid;

    m_seed_custom_feed_id_isValid = ::OpenAPI::fromJsonValue(m_seed_custom_feed_id, json[QString("seed_custom_feed_id")]);
    m_seed_custom_feed_id_isSet = !json[QString("seed_custom_feed_id")].isNull() && m_seed_custom_feed_id_isValid;

    m_third_party_articles_custom_feed_id_isValid = ::OpenAPI::fromJsonValue(m_third_party_articles_custom_feed_id, json[QString("third_party_articles_custom_feed_id")]);
    m_third_party_articles_custom_feed_id_isSet = !json[QString("third_party_articles_custom_feed_id")].isNull() && m_third_party_articles_custom_feed_id_isValid;
}

QString OAICustomFeed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomFeed::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_custom_feed_filter_id_isSet) {
        obj.insert(QString("custom_feed_filter_id"), ::OpenAPI::toJsonValue(m_custom_feed_filter_id));
    }
    if (m_custom_feed_permission_id_isSet) {
        obj.insert(QString("custom_feed_permission_id"), ::OpenAPI::toJsonValue(m_custom_feed_permission_id));
    }
    if (m_custom_feed_template_id_isSet) {
        obj.insert(QString("custom_feed_template_id"), ::OpenAPI::toJsonValue(m_custom_feed_template_id));
    }
    if (m_custom_feed_visibility_isSet) {
        obj.insert(QString("custom_feed_visibility"), ::OpenAPI::toJsonValue(m_custom_feed_visibility));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_display_label_isSet) {
        obj.insert(QString("display_label"), ::OpenAPI::toJsonValue(m_display_label));
    }
    if (m_is_auto_curated_newsletter_custom_feed_isSet) {
        obj.insert(QString("is_auto_curated_newsletter_custom_feed"), ::OpenAPI::toJsonValue(m_is_auto_curated_newsletter_custom_feed));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_popularity_isSet) {
        obj.insert(QString("popularity"), ::OpenAPI::toJsonValue(m_popularity));
    }
    if (m_premium_content_isSet) {
        obj.insert(QString("premium_content"), ::OpenAPI::toJsonValue(m_premium_content));
    }
    if (m_seed_custom_feed_id_isSet) {
        obj.insert(QString("seed_custom_feed_id"), ::OpenAPI::toJsonValue(m_seed_custom_feed_id));
    }
    if (m_third_party_articles_custom_feed_id_isSet) {
        obj.insert(QString("third_party_articles_custom_feed_id"), ::OpenAPI::toJsonValue(m_third_party_articles_custom_feed_id));
    }
    return obj;
}

QString OAICustomFeed::getId() const {
    return m__id;
}
void OAICustomFeed::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAICustomFeed::is__id_Set() const{
    return m__id_isSet;
}

bool OAICustomFeed::is__id_Valid() const{
    return m__id_isValid;
}

QString OAICustomFeed::getCustomFeedFilterId() const {
    return m_custom_feed_filter_id;
}
void OAICustomFeed::setCustomFeedFilterId(const QString &custom_feed_filter_id) {
    m_custom_feed_filter_id = custom_feed_filter_id;
    m_custom_feed_filter_id_isSet = true;
}

bool OAICustomFeed::is_custom_feed_filter_id_Set() const{
    return m_custom_feed_filter_id_isSet;
}

bool OAICustomFeed::is_custom_feed_filter_id_Valid() const{
    return m_custom_feed_filter_id_isValid;
}

QString OAICustomFeed::getCustomFeedPermissionId() const {
    return m_custom_feed_permission_id;
}
void OAICustomFeed::setCustomFeedPermissionId(const QString &custom_feed_permission_id) {
    m_custom_feed_permission_id = custom_feed_permission_id;
    m_custom_feed_permission_id_isSet = true;
}

bool OAICustomFeed::is_custom_feed_permission_id_Set() const{
    return m_custom_feed_permission_id_isSet;
}

bool OAICustomFeed::is_custom_feed_permission_id_Valid() const{
    return m_custom_feed_permission_id_isValid;
}

QString OAICustomFeed::getCustomFeedTemplateId() const {
    return m_custom_feed_template_id;
}
void OAICustomFeed::setCustomFeedTemplateId(const QString &custom_feed_template_id) {
    m_custom_feed_template_id = custom_feed_template_id;
    m_custom_feed_template_id_isSet = true;
}

bool OAICustomFeed::is_custom_feed_template_id_Set() const{
    return m_custom_feed_template_id_isSet;
}

bool OAICustomFeed::is_custom_feed_template_id_Valid() const{
    return m_custom_feed_template_id_isValid;
}

qint32 OAICustomFeed::getCustomFeedVisibility() const {
    return m_custom_feed_visibility;
}
void OAICustomFeed::setCustomFeedVisibility(const qint32 &custom_feed_visibility) {
    m_custom_feed_visibility = custom_feed_visibility;
    m_custom_feed_visibility_isSet = true;
}

bool OAICustomFeed::is_custom_feed_visibility_Set() const{
    return m_custom_feed_visibility_isSet;
}

bool OAICustomFeed::is_custom_feed_visibility_Valid() const{
    return m_custom_feed_visibility_isValid;
}

bool OAICustomFeed::isRDefault() const {
    return m_r_default;
}
void OAICustomFeed::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAICustomFeed::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAICustomFeed::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAICustomFeed::getDisplayLabel() const {
    return m_display_label;
}
void OAICustomFeed::setDisplayLabel(const QString &display_label) {
    m_display_label = display_label;
    m_display_label_isSet = true;
}

bool OAICustomFeed::is_display_label_Set() const{
    return m_display_label_isSet;
}

bool OAICustomFeed::is_display_label_Valid() const{
    return m_display_label_isValid;
}

bool OAICustomFeed::isIsAutoCuratedNewsletterCustomFeed() const {
    return m_is_auto_curated_newsletter_custom_feed;
}
void OAICustomFeed::setIsAutoCuratedNewsletterCustomFeed(const bool &is_auto_curated_newsletter_custom_feed) {
    m_is_auto_curated_newsletter_custom_feed = is_auto_curated_newsletter_custom_feed;
    m_is_auto_curated_newsletter_custom_feed_isSet = true;
}

bool OAICustomFeed::is_is_auto_curated_newsletter_custom_feed_Set() const{
    return m_is_auto_curated_newsletter_custom_feed_isSet;
}

bool OAICustomFeed::is_is_auto_curated_newsletter_custom_feed_Valid() const{
    return m_is_auto_curated_newsletter_custom_feed_isValid;
}

QString OAICustomFeed::getLabel() const {
    return m_label;
}
void OAICustomFeed::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAICustomFeed::is_label_Set() const{
    return m_label_isSet;
}

bool OAICustomFeed::is_label_Valid() const{
    return m_label_isValid;
}

QString OAICustomFeed::getLinks() const {
    return m_links;
}
void OAICustomFeed::setLinks(const QString &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAICustomFeed::is_links_Set() const{
    return m_links_isSet;
}

bool OAICustomFeed::is_links_Valid() const{
    return m_links_isValid;
}

float OAICustomFeed::getPopularity() const {
    return m_popularity;
}
void OAICustomFeed::setPopularity(const float &popularity) {
    m_popularity = popularity;
    m_popularity_isSet = true;
}

bool OAICustomFeed::is_popularity_Set() const{
    return m_popularity_isSet;
}

bool OAICustomFeed::is_popularity_Valid() const{
    return m_popularity_isValid;
}

bool OAICustomFeed::isPremiumContent() const {
    return m_premium_content;
}
void OAICustomFeed::setPremiumContent(const bool &premium_content) {
    m_premium_content = premium_content;
    m_premium_content_isSet = true;
}

bool OAICustomFeed::is_premium_content_Set() const{
    return m_premium_content_isSet;
}

bool OAICustomFeed::is_premium_content_Valid() const{
    return m_premium_content_isValid;
}

QString OAICustomFeed::getSeedCustomFeedId() const {
    return m_seed_custom_feed_id;
}
void OAICustomFeed::setSeedCustomFeedId(const QString &seed_custom_feed_id) {
    m_seed_custom_feed_id = seed_custom_feed_id;
    m_seed_custom_feed_id_isSet = true;
}

bool OAICustomFeed::is_seed_custom_feed_id_Set() const{
    return m_seed_custom_feed_id_isSet;
}

bool OAICustomFeed::is_seed_custom_feed_id_Valid() const{
    return m_seed_custom_feed_id_isValid;
}

QString OAICustomFeed::getThirdPartyArticlesCustomFeedId() const {
    return m_third_party_articles_custom_feed_id;
}
void OAICustomFeed::setThirdPartyArticlesCustomFeedId(const QString &third_party_articles_custom_feed_id) {
    m_third_party_articles_custom_feed_id = third_party_articles_custom_feed_id;
    m_third_party_articles_custom_feed_id_isSet = true;
}

bool OAICustomFeed::is_third_party_articles_custom_feed_id_Set() const{
    return m_third_party_articles_custom_feed_id_isSet;
}

bool OAICustomFeed::is_third_party_articles_custom_feed_id_Valid() const{
    return m_third_party_articles_custom_feed_id_isValid;
}

bool OAICustomFeed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_feed_filter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_feed_permission_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_feed_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_feed_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_auto_curated_newsletter_custom_feed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_popularity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_premium_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seed_custom_feed_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_articles_custom_feed_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomFeed::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__id_isValid && m_label_isValid && true;
}

} // namespace OpenAPI
