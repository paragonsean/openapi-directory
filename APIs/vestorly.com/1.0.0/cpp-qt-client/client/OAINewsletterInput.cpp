/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewsletterInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewsletterInput::OAINewsletterInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewsletterInput::OAINewsletterInput() {
    this->initializeModel();
}

OAINewsletterInput::~OAINewsletterInput() {}

void OAINewsletterInput::initializeModel() {

    m_click_count_isSet = false;
    m_click_count_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_is_sent_isSet = false;
    m_is_sent_isValid = false;

    m_total_click_count_isSet = false;
    m_total_click_count_isValid = false;

    m_unique_click_count_isSet = false;
    m_unique_click_count_isValid = false;
}

void OAINewsletterInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewsletterInput::fromJsonObject(QJsonObject json) {

    m_click_count_isValid = ::OpenAPI::fromJsonValue(m_click_count, json[QString("click_count")]);
    m_click_count_isSet = !json[QString("click_count")].isNull() && m_click_count_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("is_default")]);
    m_is_default_isSet = !json[QString("is_default")].isNull() && m_is_default_isValid;

    m_is_sent_isValid = ::OpenAPI::fromJsonValue(m_is_sent, json[QString("is_sent")]);
    m_is_sent_isSet = !json[QString("is_sent")].isNull() && m_is_sent_isValid;

    m_total_click_count_isValid = ::OpenAPI::fromJsonValue(m_total_click_count, json[QString("total_click_count")]);
    m_total_click_count_isSet = !json[QString("total_click_count")].isNull() && m_total_click_count_isValid;

    m_unique_click_count_isValid = ::OpenAPI::fromJsonValue(m_unique_click_count, json[QString("unique_click_count")]);
    m_unique_click_count_isSet = !json[QString("unique_click_count")].isNull() && m_unique_click_count_isValid;
}

QString OAINewsletterInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewsletterInput::asJsonObject() const {
    QJsonObject obj;
    if (m_click_count_isSet) {
        obj.insert(QString("click_count"), ::OpenAPI::toJsonValue(m_click_count));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("is_default"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_is_sent_isSet) {
        obj.insert(QString("is_sent"), ::OpenAPI::toJsonValue(m_is_sent));
    }
    if (m_total_click_count_isSet) {
        obj.insert(QString("total_click_count"), ::OpenAPI::toJsonValue(m_total_click_count));
    }
    if (m_unique_click_count_isSet) {
        obj.insert(QString("unique_click_count"), ::OpenAPI::toJsonValue(m_unique_click_count));
    }
    return obj;
}

qint64 OAINewsletterInput::getClickCount() const {
    return m_click_count;
}
void OAINewsletterInput::setClickCount(const qint64 &click_count) {
    m_click_count = click_count;
    m_click_count_isSet = true;
}

bool OAINewsletterInput::is_click_count_Set() const{
    return m_click_count_isSet;
}

bool OAINewsletterInput::is_click_count_Valid() const{
    return m_click_count_isValid;
}

bool OAINewsletterInput::isIsDefault() const {
    return m_is_default;
}
void OAINewsletterInput::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAINewsletterInput::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAINewsletterInput::is_is_default_Valid() const{
    return m_is_default_isValid;
}

bool OAINewsletterInput::isIsSent() const {
    return m_is_sent;
}
void OAINewsletterInput::setIsSent(const bool &is_sent) {
    m_is_sent = is_sent;
    m_is_sent_isSet = true;
}

bool OAINewsletterInput::is_is_sent_Set() const{
    return m_is_sent_isSet;
}

bool OAINewsletterInput::is_is_sent_Valid() const{
    return m_is_sent_isValid;
}

qint64 OAINewsletterInput::getTotalClickCount() const {
    return m_total_click_count;
}
void OAINewsletterInput::setTotalClickCount(const qint64 &total_click_count) {
    m_total_click_count = total_click_count;
    m_total_click_count_isSet = true;
}

bool OAINewsletterInput::is_total_click_count_Set() const{
    return m_total_click_count_isSet;
}

bool OAINewsletterInput::is_total_click_count_Valid() const{
    return m_total_click_count_isValid;
}

qint64 OAINewsletterInput::getUniqueClickCount() const {
    return m_unique_click_count;
}
void OAINewsletterInput::setUniqueClickCount(const qint64 &unique_click_count) {
    m_unique_click_count = unique_click_count;
    m_unique_click_count_isSet = true;
}

bool OAINewsletterInput::is_unique_click_count_Set() const{
    return m_unique_click_count_isSet;
}

bool OAINewsletterInput::is_unique_click_count_Valid() const{
    return m_unique_click_count_isValid;
}

bool OAINewsletterInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_click_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_click_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_click_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewsletterInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
