/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup::OAIGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup::OAIGroup() {
    this->initializeModel();
}

OAIGroup::~OAIGroup() {}

void OAIGroup::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_autopublish_isSet = false;
    m_autopublish_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_is_hidden_isSet = false;
    m_is_hidden_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_new_weekly_mailer_content_isSet = false;
    m_new_weekly_mailer_content_isValid = false;

    m_newsletter_subject_isSet = false;
    m_newsletter_subject_isValid = false;

    m_number_articles_per_group_isSet = false;
    m_number_articles_per_group_isValid = false;

    m_number_articles_per_newsletter_isSet = false;
    m_number_articles_per_newsletter_isValid = false;
}

void OAIGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_autopublish_isValid = ::OpenAPI::fromJsonValue(m_autopublish, json[QString("autopublish")]);
    m_autopublish_isSet = !json[QString("autopublish")].isNull() && m_autopublish_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("is_default")]);
    m_is_default_isSet = !json[QString("is_default")].isNull() && m_is_default_isValid;

    m_is_hidden_isValid = ::OpenAPI::fromJsonValue(m_is_hidden, json[QString("is_hidden")]);
    m_is_hidden_isSet = !json[QString("is_hidden")].isNull() && m_is_hidden_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_new_weekly_mailer_content_isValid = ::OpenAPI::fromJsonValue(m_new_weekly_mailer_content, json[QString("new_weekly_mailer_content")]);
    m_new_weekly_mailer_content_isSet = !json[QString("new_weekly_mailer_content")].isNull() && m_new_weekly_mailer_content_isValid;

    m_newsletter_subject_isValid = ::OpenAPI::fromJsonValue(m_newsletter_subject, json[QString("newsletter_subject")]);
    m_newsletter_subject_isSet = !json[QString("newsletter_subject")].isNull() && m_newsletter_subject_isValid;

    m_number_articles_per_group_isValid = ::OpenAPI::fromJsonValue(m_number_articles_per_group, json[QString("number_articles_per_group")]);
    m_number_articles_per_group_isSet = !json[QString("number_articles_per_group")].isNull() && m_number_articles_per_group_isValid;

    m_number_articles_per_newsletter_isValid = ::OpenAPI::fromJsonValue(m_number_articles_per_newsletter, json[QString("number_articles_per_newsletter")]);
    m_number_articles_per_newsletter_isSet = !json[QString("number_articles_per_newsletter")].isNull() && m_number_articles_per_newsletter_isValid;
}

QString OAIGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_autopublish_isSet) {
        obj.insert(QString("autopublish"), ::OpenAPI::toJsonValue(m_autopublish));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("is_default"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_is_hidden_isSet) {
        obj.insert(QString("is_hidden"), ::OpenAPI::toJsonValue(m_is_hidden));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_new_weekly_mailer_content_isSet) {
        obj.insert(QString("new_weekly_mailer_content"), ::OpenAPI::toJsonValue(m_new_weekly_mailer_content));
    }
    if (m_newsletter_subject_isSet) {
        obj.insert(QString("newsletter_subject"), ::OpenAPI::toJsonValue(m_newsletter_subject));
    }
    if (m_number_articles_per_group_isSet) {
        obj.insert(QString("number_articles_per_group"), ::OpenAPI::toJsonValue(m_number_articles_per_group));
    }
    if (m_number_articles_per_newsletter_isSet) {
        obj.insert(QString("number_articles_per_newsletter"), ::OpenAPI::toJsonValue(m_number_articles_per_newsletter));
    }
    return obj;
}

QString OAIGroup::getId() const {
    return m__id;
}
void OAIGroup::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAIGroup::is__id_Set() const{
    return m__id_isSet;
}

bool OAIGroup::is__id_Valid() const{
    return m__id_isValid;
}

bool OAIGroup::isAutopublish() const {
    return m_autopublish;
}
void OAIGroup::setAutopublish(const bool &autopublish) {
    m_autopublish = autopublish;
    m_autopublish_isSet = true;
}

bool OAIGroup::is_autopublish_Set() const{
    return m_autopublish_isSet;
}

bool OAIGroup::is_autopublish_Valid() const{
    return m_autopublish_isValid;
}

bool OAIGroup::isIsDefault() const {
    return m_is_default;
}
void OAIGroup::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIGroup::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIGroup::is_is_default_Valid() const{
    return m_is_default_isValid;
}

bool OAIGroup::isIsHidden() const {
    return m_is_hidden;
}
void OAIGroup::setIsHidden(const bool &is_hidden) {
    m_is_hidden = is_hidden;
    m_is_hidden_isSet = true;
}

bool OAIGroup::is_is_hidden_Set() const{
    return m_is_hidden_isSet;
}

bool OAIGroup::is_is_hidden_Valid() const{
    return m_is_hidden_isValid;
}

QString OAIGroup::getName() const {
    return m_name;
}
void OAIGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGroup::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGroup::getNewWeeklyMailerContent() const {
    return m_new_weekly_mailer_content;
}
void OAIGroup::setNewWeeklyMailerContent(const QString &new_weekly_mailer_content) {
    m_new_weekly_mailer_content = new_weekly_mailer_content;
    m_new_weekly_mailer_content_isSet = true;
}

bool OAIGroup::is_new_weekly_mailer_content_Set() const{
    return m_new_weekly_mailer_content_isSet;
}

bool OAIGroup::is_new_weekly_mailer_content_Valid() const{
    return m_new_weekly_mailer_content_isValid;
}

QString OAIGroup::getNewsletterSubject() const {
    return m_newsletter_subject;
}
void OAIGroup::setNewsletterSubject(const QString &newsletter_subject) {
    m_newsletter_subject = newsletter_subject;
    m_newsletter_subject_isSet = true;
}

bool OAIGroup::is_newsletter_subject_Set() const{
    return m_newsletter_subject_isSet;
}

bool OAIGroup::is_newsletter_subject_Valid() const{
    return m_newsletter_subject_isValid;
}

qint32 OAIGroup::getNumberArticlesPerGroup() const {
    return m_number_articles_per_group;
}
void OAIGroup::setNumberArticlesPerGroup(const qint32 &number_articles_per_group) {
    m_number_articles_per_group = number_articles_per_group;
    m_number_articles_per_group_isSet = true;
}

bool OAIGroup::is_number_articles_per_group_Set() const{
    return m_number_articles_per_group_isSet;
}

bool OAIGroup::is_number_articles_per_group_Valid() const{
    return m_number_articles_per_group_isValid;
}

qint32 OAIGroup::getNumberArticlesPerNewsletter() const {
    return m_number_articles_per_newsletter;
}
void OAIGroup::setNumberArticlesPerNewsletter(const qint32 &number_articles_per_newsletter) {
    m_number_articles_per_newsletter = number_articles_per_newsletter;
    m_number_articles_per_newsletter_isSet = true;
}

bool OAIGroup::is_number_articles_per_newsletter_Set() const{
    return m_number_articles_per_newsletter_isSet;
}

bool OAIGroup::is_number_articles_per_newsletter_Valid() const{
    return m_number_articles_per_newsletter_isValid;
}

bool OAIGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_autopublish_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_weekly_mailer_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_newsletter_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_articles_per_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_articles_per_newsletter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__id_isValid && true;
}

} // namespace OpenAPI
