/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberReport::OAIMemberReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberReport::OAIMemberReport() {
    this->initializeModel();
}

OAIMemberReport::~OAIMemberReport() {}

void OAIMemberReport::initializeModel() {

    m_day_isSet = false;
    m_day_isValid = false;

    m_event_count_isSet = false;
    m_event_count_isValid = false;

    m_originator_group_id_isSet = false;
    m_originator_group_id_isValid = false;

    m_parent_originator_id_isSet = false;
    m_parent_originator_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIMemberReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberReport::fromJsonObject(QJsonObject json) {

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("day")]);
    m_day_isSet = !json[QString("day")].isNull() && m_day_isValid;

    m_event_count_isValid = ::OpenAPI::fromJsonValue(m_event_count, json[QString("event_count")]);
    m_event_count_isSet = !json[QString("event_count")].isNull() && m_event_count_isValid;

    m_originator_group_id_isValid = ::OpenAPI::fromJsonValue(m_originator_group_id, json[QString("originator_group_id")]);
    m_originator_group_id_isSet = !json[QString("originator_group_id")].isNull() && m_originator_group_id_isValid;

    m_parent_originator_id_isValid = ::OpenAPI::fromJsonValue(m_parent_originator_id, json[QString("parent_originator_id")]);
    m_parent_originator_id_isSet = !json[QString("parent_originator_id")].isNull() && m_parent_originator_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIMemberReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberReport::asJsonObject() const {
    QJsonObject obj;
    if (m_day_isSet) {
        obj.insert(QString("day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_event_count_isSet) {
        obj.insert(QString("event_count"), ::OpenAPI::toJsonValue(m_event_count));
    }
    if (m_originator_group_id_isSet) {
        obj.insert(QString("originator_group_id"), ::OpenAPI::toJsonValue(m_originator_group_id));
    }
    if (m_parent_originator_id_isSet) {
        obj.insert(QString("parent_originator_id"), ::OpenAPI::toJsonValue(m_parent_originator_id));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

qint32 OAIMemberReport::getDay() const {
    return m_day;
}
void OAIMemberReport::setDay(const qint32 &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIMemberReport::is_day_Set() const{
    return m_day_isSet;
}

bool OAIMemberReport::is_day_Valid() const{
    return m_day_isValid;
}

qint32 OAIMemberReport::getEventCount() const {
    return m_event_count;
}
void OAIMemberReport::setEventCount(const qint32 &event_count) {
    m_event_count = event_count;
    m_event_count_isSet = true;
}

bool OAIMemberReport::is_event_count_Set() const{
    return m_event_count_isSet;
}

bool OAIMemberReport::is_event_count_Valid() const{
    return m_event_count_isValid;
}

QString OAIMemberReport::getOriginatorGroupId() const {
    return m_originator_group_id;
}
void OAIMemberReport::setOriginatorGroupId(const QString &originator_group_id) {
    m_originator_group_id = originator_group_id;
    m_originator_group_id_isSet = true;
}

bool OAIMemberReport::is_originator_group_id_Set() const{
    return m_originator_group_id_isSet;
}

bool OAIMemberReport::is_originator_group_id_Valid() const{
    return m_originator_group_id_isValid;
}

QString OAIMemberReport::getParentOriginatorId() const {
    return m_parent_originator_id;
}
void OAIMemberReport::setParentOriginatorId(const QString &parent_originator_id) {
    m_parent_originator_id = parent_originator_id;
    m_parent_originator_id_isSet = true;
}

bool OAIMemberReport::is_parent_originator_id_Set() const{
    return m_parent_originator_id_isSet;
}

bool OAIMemberReport::is_parent_originator_id_Valid() const{
    return m_parent_originator_id_isValid;
}

QString OAIMemberReport::getSource() const {
    return m_source;
}
void OAIMemberReport::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIMemberReport::is_source_Set() const{
    return m_source_isSet;
}

bool OAIMemberReport::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIMemberReport::getType() const {
    return m_type;
}
void OAIMemberReport::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMemberReport::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMemberReport::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIMemberReport::getYear() const {
    return m_year;
}
void OAIMemberReport::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIMemberReport::is_year_Set() const{
    return m_year_isSet;
}

bool OAIMemberReport::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIMemberReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_originator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
