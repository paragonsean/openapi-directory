/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_new_user_isSet = false;
    m_new_user_isValid = false;

    m_picture_url_isSet = false;
    m_picture_url_isValid = false;

    m_plan_expired_isSet = false;
    m_plan_expired_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_plan_setup_isSet = false;
    m_plan_setup_isValid = false;

    m_plan_status_isSet = false;
    m_plan_status_isValid = false;

    m_plan_stripe_isSet = false;
    m_plan_stripe_isValid = false;

    m_show_tour_isSet = false;
    m_show_tour_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_user_type_isSet = false;
    m_user_type_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_new_user_isValid = ::OpenAPI::fromJsonValue(m_new_user, json[QString("new_user")]);
    m_new_user_isSet = !json[QString("new_user")].isNull() && m_new_user_isValid;

    m_picture_url_isValid = ::OpenAPI::fromJsonValue(m_picture_url, json[QString("picture_url")]);
    m_picture_url_isSet = !json[QString("picture_url")].isNull() && m_picture_url_isValid;

    m_plan_expired_isValid = ::OpenAPI::fromJsonValue(m_plan_expired, json[QString("plan_expired")]);
    m_plan_expired_isSet = !json[QString("plan_expired")].isNull() && m_plan_expired_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("plan_id")]);
    m_plan_id_isSet = !json[QString("plan_id")].isNull() && m_plan_id_isValid;

    m_plan_setup_isValid = ::OpenAPI::fromJsonValue(m_plan_setup, json[QString("plan_setup")]);
    m_plan_setup_isSet = !json[QString("plan_setup")].isNull() && m_plan_setup_isValid;

    m_plan_status_isValid = ::OpenAPI::fromJsonValue(m_plan_status, json[QString("plan_status")]);
    m_plan_status_isSet = !json[QString("plan_status")].isNull() && m_plan_status_isValid;

    m_plan_stripe_isValid = ::OpenAPI::fromJsonValue(m_plan_stripe, json[QString("plan_stripe")]);
    m_plan_stripe_isSet = !json[QString("plan_stripe")].isNull() && m_plan_stripe_isValid;

    m_show_tour_isValid = ::OpenAPI::fromJsonValue(m_show_tour, json[QString("show_tour")]);
    m_show_tour_isSet = !json[QString("show_tour")].isNull() && m_show_tour_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_user_type_isValid = ::OpenAPI::fromJsonValue(m_user_type, json[QString("user_type")]);
    m_user_type_isSet = !json[QString("user_type")].isNull() && m_user_type_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_new_user_isSet) {
        obj.insert(QString("new_user"), ::OpenAPI::toJsonValue(m_new_user));
    }
    if (m_picture_url_isSet) {
        obj.insert(QString("picture_url"), ::OpenAPI::toJsonValue(m_picture_url));
    }
    if (m_plan_expired_isSet) {
        obj.insert(QString("plan_expired"), ::OpenAPI::toJsonValue(m_plan_expired));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("plan_id"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_plan_setup_isSet) {
        obj.insert(QString("plan_setup"), ::OpenAPI::toJsonValue(m_plan_setup));
    }
    if (m_plan_status_isSet) {
        obj.insert(QString("plan_status"), ::OpenAPI::toJsonValue(m_plan_status));
    }
    if (m_plan_stripe_isSet) {
        obj.insert(QString("plan_stripe"), ::OpenAPI::toJsonValue(m_plan_stripe));
    }
    if (m_show_tour_isSet) {
        obj.insert(QString("show_tour"), ::OpenAPI::toJsonValue(m_show_tour));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_user_type_isSet) {
        obj.insert(QString("user_type"), ::OpenAPI::toJsonValue(m_user_type));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAIUser::getId() const {
    return m__id;
}
void OAIUser::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAIUser::is__id_Set() const{
    return m__id_isSet;
}

bool OAIUser::is__id_Valid() const{
    return m__id_isValid;
}

QString OAIUser::getCompany() const {
    return m_company;
}
void OAIUser::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIUser::is_company_Set() const{
    return m_company_isSet;
}

bool OAIUser::is_company_Valid() const{
    return m_company_isValid;
}

QString OAIUser::getFirstName() const {
    return m_first_name;
}
void OAIUser::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUser::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUser::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUser::getLastName() const {
    return m_last_name;
}
void OAIUser::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUser::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUser::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIUser::isNewUser() const {
    return m_new_user;
}
void OAIUser::setNewUser(const bool &new_user) {
    m_new_user = new_user;
    m_new_user_isSet = true;
}

bool OAIUser::is_new_user_Set() const{
    return m_new_user_isSet;
}

bool OAIUser::is_new_user_Valid() const{
    return m_new_user_isValid;
}

QString OAIUser::getPictureUrl() const {
    return m_picture_url;
}
void OAIUser::setPictureUrl(const QString &picture_url) {
    m_picture_url = picture_url;
    m_picture_url_isSet = true;
}

bool OAIUser::is_picture_url_Set() const{
    return m_picture_url_isSet;
}

bool OAIUser::is_picture_url_Valid() const{
    return m_picture_url_isValid;
}

bool OAIUser::isPlanExpired() const {
    return m_plan_expired;
}
void OAIUser::setPlanExpired(const bool &plan_expired) {
    m_plan_expired = plan_expired;
    m_plan_expired_isSet = true;
}

bool OAIUser::is_plan_expired_Set() const{
    return m_plan_expired_isSet;
}

bool OAIUser::is_plan_expired_Valid() const{
    return m_plan_expired_isValid;
}

QString OAIUser::getPlanId() const {
    return m_plan_id;
}
void OAIUser::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAIUser::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAIUser::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

bool OAIUser::isPlanSetup() const {
    return m_plan_setup;
}
void OAIUser::setPlanSetup(const bool &plan_setup) {
    m_plan_setup = plan_setup;
    m_plan_setup_isSet = true;
}

bool OAIUser::is_plan_setup_Set() const{
    return m_plan_setup_isSet;
}

bool OAIUser::is_plan_setup_Valid() const{
    return m_plan_setup_isValid;
}

QString OAIUser::getPlanStatus() const {
    return m_plan_status;
}
void OAIUser::setPlanStatus(const QString &plan_status) {
    m_plan_status = plan_status;
    m_plan_status_isSet = true;
}

bool OAIUser::is_plan_status_Set() const{
    return m_plan_status_isSet;
}

bool OAIUser::is_plan_status_Valid() const{
    return m_plan_status_isValid;
}

bool OAIUser::isPlanStripe() const {
    return m_plan_stripe;
}
void OAIUser::setPlanStripe(const bool &plan_stripe) {
    m_plan_stripe = plan_stripe;
    m_plan_stripe_isSet = true;
}

bool OAIUser::is_plan_stripe_Set() const{
    return m_plan_stripe_isSet;
}

bool OAIUser::is_plan_stripe_Valid() const{
    return m_plan_stripe_isValid;
}

bool OAIUser::isShowTour() const {
    return m_show_tour;
}
void OAIUser::setShowTour(const bool &show_tour) {
    m_show_tour = show_tour;
    m_show_tour_isSet = true;
}

bool OAIUser::is_show_tour_Set() const{
    return m_show_tour_isSet;
}

bool OAIUser::is_show_tour_Valid() const{
    return m_show_tour_isValid;
}

QString OAIUser::getSlug() const {
    return m_slug;
}
void OAIUser::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIUser::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIUser::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAIUser::getUserType() const {
    return m_user_type;
}
void OAIUser::setUserType(const QString &user_type) {
    m_user_type = user_type;
    m_user_type_isSet = true;
}

bool OAIUser::is_user_type_Set() const{
    return m_user_type_isSet;
}

bool OAIUser::is_user_type_Valid() const{
    return m_user_type_isValid;
}

QString OAIUser::getUsername() const {
    return m_username;
}
void OAIUser::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUser::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUser::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIUser::getWebsite() const {
    return m_website;
}
void OAIUser::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIUser::is_website_Set() const{
    return m_website_isSet;
}

bool OAIUser::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_picture_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_setup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_stripe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_tour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__id_isValid && true;
}

} // namespace OpenAPI
