/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventContent::OAIEventContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventContent::OAIEventContent() {
    this->initializeModel();
}

OAIEventContent::~OAIEventContent() {}

void OAIEventContent::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_content_field_isSet = false;
    m_content_field_isValid = false;

    m_content_id_isSet = false;
    m_content_id_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIEventContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventContent::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_content_field_isValid = ::OpenAPI::fromJsonValue(m_content_field, json[QString("content_field")]);
    m_content_field_isSet = !json[QString("content_field")].isNull() && m_content_field_isValid;

    m_content_id_isValid = ::OpenAPI::fromJsonValue(m_content_id, json[QString("content_id")]);
    m_content_id_isSet = !json[QString("content_id")].isNull() && m_content_id_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIEventContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventContent::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_content_field_isSet) {
        obj.insert(QString("content_field"), ::OpenAPI::toJsonValue(m_content_field));
    }
    if (m_content_id_isSet) {
        obj.insert(QString("content_id"), ::OpenAPI::toJsonValue(m_content_id));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIEventContent::getId() const {
    return m__id;
}
void OAIEventContent::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAIEventContent::is__id_Set() const{
    return m__id_isSet;
}

bool OAIEventContent::is__id_Valid() const{
    return m__id_isValid;
}

QString OAIEventContent::getContentField() const {
    return m_content_field;
}
void OAIEventContent::setContentField(const QString &content_field) {
    m_content_field = content_field;
    m_content_field_isSet = true;
}

bool OAIEventContent::is_content_field_Set() const{
    return m_content_field_isSet;
}

bool OAIEventContent::is_content_field_Valid() const{
    return m_content_field_isValid;
}

QString OAIEventContent::getContentId() const {
    return m_content_id;
}
void OAIEventContent::setContentId(const QString &content_id) {
    m_content_id = content_id;
    m_content_id_isSet = true;
}

bool OAIEventContent::is_content_id_Set() const{
    return m_content_id_isSet;
}

bool OAIEventContent::is_content_id_Valid() const{
    return m_content_id_isValid;
}

QString OAIEventContent::getContentType() const {
    return m_content_type;
}
void OAIEventContent::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIEventContent::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIEventContent::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIEventContent::getCreatedAt() const {
    return m_created_at;
}
void OAIEventContent::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIEventContent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIEventContent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIEventContent::getSlug() const {
    return m_slug;
}
void OAIEventContent::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIEventContent::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIEventContent::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAIEventContent::getUpdatedAt() const {
    return m_updated_at;
}
void OAIEventContent::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIEventContent::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIEventContent::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIEventContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
