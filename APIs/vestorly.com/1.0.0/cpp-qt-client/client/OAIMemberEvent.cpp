/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberEvent::OAIMemberEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberEvent::OAIMemberEvent() {
    this->initializeModel();
}

OAIMemberEvent::~OAIMemberEvent() {}

void OAIMemberEvent::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_content_url_isSet = false;
    m_content_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_event_date_isSet = false;
    m_event_date_isValid = false;

    m_event_source_isSet = false;
    m_event_source_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_original_url_isSet = false;
    m_original_url_isValid = false;

    m_originator_email_isSet = false;
    m_originator_email_isValid = false;

    m_originator_group_id_isSet = false;
    m_originator_group_id_isValid = false;

    m_originator_id_isSet = false;
    m_originator_id_isValid = false;

    m_originator_name_isSet = false;
    m_originator_name_isValid = false;

    m_originator_type_isSet = false;
    m_originator_type_isValid = false;

    m_parent_event_id_isSet = false;
    m_parent_event_id_isValid = false;

    m_parent_originator_id_isSet = false;
    m_parent_originator_id_isValid = false;

    m_referer_isSet = false;
    m_referer_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_subject_id_isSet = false;
    m_subject_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIMemberEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberEvent::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_content_url_isValid = ::OpenAPI::fromJsonValue(m_content_url, json[QString("content_url")]);
    m_content_url_isSet = !json[QString("content_url")].isNull() && m_content_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_event_date_isValid = ::OpenAPI::fromJsonValue(m_event_date, json[QString("event_date")]);
    m_event_date_isSet = !json[QString("event_date")].isNull() && m_event_date_isValid;

    m_event_source_isValid = ::OpenAPI::fromJsonValue(m_event_source, json[QString("event_source")]);
    m_event_source_isSet = !json[QString("event_source")].isNull() && m_event_source_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("event_type")]);
    m_event_type_isSet = !json[QString("event_type")].isNull() && m_event_type_isValid;

    m_member_id_isValid = ::OpenAPI::fromJsonValue(m_member_id, json[QString("member_id")]);
    m_member_id_isSet = !json[QString("member_id")].isNull() && m_member_id_isValid;

    m_original_url_isValid = ::OpenAPI::fromJsonValue(m_original_url, json[QString("original_url")]);
    m_original_url_isSet = !json[QString("original_url")].isNull() && m_original_url_isValid;

    m_originator_email_isValid = ::OpenAPI::fromJsonValue(m_originator_email, json[QString("originator_email")]);
    m_originator_email_isSet = !json[QString("originator_email")].isNull() && m_originator_email_isValid;

    m_originator_group_id_isValid = ::OpenAPI::fromJsonValue(m_originator_group_id, json[QString("originator_group_id")]);
    m_originator_group_id_isSet = !json[QString("originator_group_id")].isNull() && m_originator_group_id_isValid;

    m_originator_id_isValid = ::OpenAPI::fromJsonValue(m_originator_id, json[QString("originator_id")]);
    m_originator_id_isSet = !json[QString("originator_id")].isNull() && m_originator_id_isValid;

    m_originator_name_isValid = ::OpenAPI::fromJsonValue(m_originator_name, json[QString("originator_name")]);
    m_originator_name_isSet = !json[QString("originator_name")].isNull() && m_originator_name_isValid;

    m_originator_type_isValid = ::OpenAPI::fromJsonValue(m_originator_type, json[QString("originator_type")]);
    m_originator_type_isSet = !json[QString("originator_type")].isNull() && m_originator_type_isValid;

    m_parent_event_id_isValid = ::OpenAPI::fromJsonValue(m_parent_event_id, json[QString("parent_event_id")]);
    m_parent_event_id_isSet = !json[QString("parent_event_id")].isNull() && m_parent_event_id_isValid;

    m_parent_originator_id_isValid = ::OpenAPI::fromJsonValue(m_parent_originator_id, json[QString("parent_originator_id")]);
    m_parent_originator_id_isSet = !json[QString("parent_originator_id")].isNull() && m_parent_originator_id_isValid;

    m_referer_isValid = ::OpenAPI::fromJsonValue(m_referer, json[QString("referer")]);
    m_referer_isSet = !json[QString("referer")].isNull() && m_referer_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_subject_id_isValid = ::OpenAPI::fromJsonValue(m_subject_id, json[QString("subject_id")]);
    m_subject_id_isSet = !json[QString("subject_id")].isNull() && m_subject_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIMemberEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberEvent::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_content_url_isSet) {
        obj.insert(QString("content_url"), ::OpenAPI::toJsonValue(m_content_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_event_date_isSet) {
        obj.insert(QString("event_date"), ::OpenAPI::toJsonValue(m_event_date));
    }
    if (m_event_source_isSet) {
        obj.insert(QString("event_source"), ::OpenAPI::toJsonValue(m_event_source));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("event_type"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_member_id_isSet) {
        obj.insert(QString("member_id"), ::OpenAPI::toJsonValue(m_member_id));
    }
    if (m_original_url_isSet) {
        obj.insert(QString("original_url"), ::OpenAPI::toJsonValue(m_original_url));
    }
    if (m_originator_email_isSet) {
        obj.insert(QString("originator_email"), ::OpenAPI::toJsonValue(m_originator_email));
    }
    if (m_originator_group_id_isSet) {
        obj.insert(QString("originator_group_id"), ::OpenAPI::toJsonValue(m_originator_group_id));
    }
    if (m_originator_id_isSet) {
        obj.insert(QString("originator_id"), ::OpenAPI::toJsonValue(m_originator_id));
    }
    if (m_originator_name_isSet) {
        obj.insert(QString("originator_name"), ::OpenAPI::toJsonValue(m_originator_name));
    }
    if (m_originator_type_isSet) {
        obj.insert(QString("originator_type"), ::OpenAPI::toJsonValue(m_originator_type));
    }
    if (m_parent_event_id_isSet) {
        obj.insert(QString("parent_event_id"), ::OpenAPI::toJsonValue(m_parent_event_id));
    }
    if (m_parent_originator_id_isSet) {
        obj.insert(QString("parent_originator_id"), ::OpenAPI::toJsonValue(m_parent_originator_id));
    }
    if (m_referer_isSet) {
        obj.insert(QString("referer"), ::OpenAPI::toJsonValue(m_referer));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_subject_id_isSet) {
        obj.insert(QString("subject_id"), ::OpenAPI::toJsonValue(m_subject_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIMemberEvent::getId() const {
    return m__id;
}
void OAIMemberEvent::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAIMemberEvent::is__id_Set() const{
    return m__id_isSet;
}

bool OAIMemberEvent::is__id_Valid() const{
    return m__id_isValid;
}

QString OAIMemberEvent::getContentUrl() const {
    return m_content_url;
}
void OAIMemberEvent::setContentUrl(const QString &content_url) {
    m_content_url = content_url;
    m_content_url_isSet = true;
}

bool OAIMemberEvent::is_content_url_Set() const{
    return m_content_url_isSet;
}

bool OAIMemberEvent::is_content_url_Valid() const{
    return m_content_url_isValid;
}

QString OAIMemberEvent::getCreatedAt() const {
    return m_created_at;
}
void OAIMemberEvent::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMemberEvent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMemberEvent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIMemberEvent::getEventDate() const {
    return m_event_date;
}
void OAIMemberEvent::setEventDate(const QString &event_date) {
    m_event_date = event_date;
    m_event_date_isSet = true;
}

bool OAIMemberEvent::is_event_date_Set() const{
    return m_event_date_isSet;
}

bool OAIMemberEvent::is_event_date_Valid() const{
    return m_event_date_isValid;
}

QString OAIMemberEvent::getEventSource() const {
    return m_event_source;
}
void OAIMemberEvent::setEventSource(const QString &event_source) {
    m_event_source = event_source;
    m_event_source_isSet = true;
}

bool OAIMemberEvent::is_event_source_Set() const{
    return m_event_source_isSet;
}

bool OAIMemberEvent::is_event_source_Valid() const{
    return m_event_source_isValid;
}

QString OAIMemberEvent::getEventType() const {
    return m_event_type;
}
void OAIMemberEvent::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIMemberEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIMemberEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIMemberEvent::getMemberId() const {
    return m_member_id;
}
void OAIMemberEvent::setMemberId(const QString &member_id) {
    m_member_id = member_id;
    m_member_id_isSet = true;
}

bool OAIMemberEvent::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAIMemberEvent::is_member_id_Valid() const{
    return m_member_id_isValid;
}

QString OAIMemberEvent::getOriginalUrl() const {
    return m_original_url;
}
void OAIMemberEvent::setOriginalUrl(const QString &original_url) {
    m_original_url = original_url;
    m_original_url_isSet = true;
}

bool OAIMemberEvent::is_original_url_Set() const{
    return m_original_url_isSet;
}

bool OAIMemberEvent::is_original_url_Valid() const{
    return m_original_url_isValid;
}

QString OAIMemberEvent::getOriginatorEmail() const {
    return m_originator_email;
}
void OAIMemberEvent::setOriginatorEmail(const QString &originator_email) {
    m_originator_email = originator_email;
    m_originator_email_isSet = true;
}

bool OAIMemberEvent::is_originator_email_Set() const{
    return m_originator_email_isSet;
}

bool OAIMemberEvent::is_originator_email_Valid() const{
    return m_originator_email_isValid;
}

QString OAIMemberEvent::getOriginatorGroupId() const {
    return m_originator_group_id;
}
void OAIMemberEvent::setOriginatorGroupId(const QString &originator_group_id) {
    m_originator_group_id = originator_group_id;
    m_originator_group_id_isSet = true;
}

bool OAIMemberEvent::is_originator_group_id_Set() const{
    return m_originator_group_id_isSet;
}

bool OAIMemberEvent::is_originator_group_id_Valid() const{
    return m_originator_group_id_isValid;
}

QString OAIMemberEvent::getOriginatorId() const {
    return m_originator_id;
}
void OAIMemberEvent::setOriginatorId(const QString &originator_id) {
    m_originator_id = originator_id;
    m_originator_id_isSet = true;
}

bool OAIMemberEvent::is_originator_id_Set() const{
    return m_originator_id_isSet;
}

bool OAIMemberEvent::is_originator_id_Valid() const{
    return m_originator_id_isValid;
}

QString OAIMemberEvent::getOriginatorName() const {
    return m_originator_name;
}
void OAIMemberEvent::setOriginatorName(const QString &originator_name) {
    m_originator_name = originator_name;
    m_originator_name_isSet = true;
}

bool OAIMemberEvent::is_originator_name_Set() const{
    return m_originator_name_isSet;
}

bool OAIMemberEvent::is_originator_name_Valid() const{
    return m_originator_name_isValid;
}

QString OAIMemberEvent::getOriginatorType() const {
    return m_originator_type;
}
void OAIMemberEvent::setOriginatorType(const QString &originator_type) {
    m_originator_type = originator_type;
    m_originator_type_isSet = true;
}

bool OAIMemberEvent::is_originator_type_Set() const{
    return m_originator_type_isSet;
}

bool OAIMemberEvent::is_originator_type_Valid() const{
    return m_originator_type_isValid;
}

QString OAIMemberEvent::getParentEventId() const {
    return m_parent_event_id;
}
void OAIMemberEvent::setParentEventId(const QString &parent_event_id) {
    m_parent_event_id = parent_event_id;
    m_parent_event_id_isSet = true;
}

bool OAIMemberEvent::is_parent_event_id_Set() const{
    return m_parent_event_id_isSet;
}

bool OAIMemberEvent::is_parent_event_id_Valid() const{
    return m_parent_event_id_isValid;
}

QString OAIMemberEvent::getParentOriginatorId() const {
    return m_parent_originator_id;
}
void OAIMemberEvent::setParentOriginatorId(const QString &parent_originator_id) {
    m_parent_originator_id = parent_originator_id;
    m_parent_originator_id_isSet = true;
}

bool OAIMemberEvent::is_parent_originator_id_Set() const{
    return m_parent_originator_id_isSet;
}

bool OAIMemberEvent::is_parent_originator_id_Valid() const{
    return m_parent_originator_id_isValid;
}

QString OAIMemberEvent::getReferer() const {
    return m_referer;
}
void OAIMemberEvent::setReferer(const QString &referer) {
    m_referer = referer;
    m_referer_isSet = true;
}

bool OAIMemberEvent::is_referer_Set() const{
    return m_referer_isSet;
}

bool OAIMemberEvent::is_referer_Valid() const{
    return m_referer_isValid;
}

QString OAIMemberEvent::getSource() const {
    return m_source;
}
void OAIMemberEvent::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIMemberEvent::is_source_Set() const{
    return m_source_isSet;
}

bool OAIMemberEvent::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIMemberEvent::getSubjectId() const {
    return m_subject_id;
}
void OAIMemberEvent::setSubjectId(const QString &subject_id) {
    m_subject_id = subject_id;
    m_subject_id_isSet = true;
}

bool OAIMemberEvent::is_subject_id_Set() const{
    return m_subject_id_isSet;
}

bool OAIMemberEvent::is_subject_id_Valid() const{
    return m_subject_id_isValid;
}

QString OAIMemberEvent::getType() const {
    return m_type;
}
void OAIMemberEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMemberEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMemberEvent::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIMemberEvent::getUsername() const {
    return m_username;
}
void OAIMemberEvent::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIMemberEvent::is_username_Set() const{
    return m_username_isSet;
}

bool OAIMemberEvent::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIMemberEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_originator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
