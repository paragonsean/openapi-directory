/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISource::OAISource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISource::OAISource() {
    this->initializeModel();
}

OAISource::~OAISource() {}

void OAISource::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_custom_rss_feed_isSet = false;
    m_custom_rss_feed_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rss_publisher_isSet = false;
    m_rss_publisher_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAISource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISource::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_custom_rss_feed_isValid = ::OpenAPI::fromJsonValue(m_custom_rss_feed, json[QString("custom_rss_feed")]);
    m_custom_rss_feed_isSet = !json[QString("custom_rss_feed")].isNull() && m_custom_rss_feed_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logo_url")]);
    m_logo_url_isSet = !json[QString("logo_url")].isNull() && m_logo_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rss_publisher_isValid = ::OpenAPI::fromJsonValue(m_rss_publisher, json[QString("rss_publisher")]);
    m_rss_publisher_isSet = !json[QString("rss_publisher")].isNull() && m_rss_publisher_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAISource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISource::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_custom_rss_feed_isSet) {
        obj.insert(QString("custom_rss_feed"), ::OpenAPI::toJsonValue(m_custom_rss_feed));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logo_url"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rss_publisher_isSet) {
        obj.insert(QString("rss_publisher"), ::OpenAPI::toJsonValue(m_rss_publisher));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAISource::getId() const {
    return m__id;
}
void OAISource::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAISource::is__id_Set() const{
    return m__id_isSet;
}

bool OAISource::is__id_Valid() const{
    return m__id_isValid;
}

bool OAISource::isCustomRssFeed() const {
    return m_custom_rss_feed;
}
void OAISource::setCustomRssFeed(const bool &custom_rss_feed) {
    m_custom_rss_feed = custom_rss_feed;
    m_custom_rss_feed_isSet = true;
}

bool OAISource::is_custom_rss_feed_Set() const{
    return m_custom_rss_feed_isSet;
}

bool OAISource::is_custom_rss_feed_Valid() const{
    return m_custom_rss_feed_isValid;
}

bool OAISource::isEnabled() const {
    return m_enabled;
}
void OAISource::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAISource::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAISource::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAISource::getLogoUrl() const {
    return m_logo_url;
}
void OAISource::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAISource::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAISource::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAISource::getName() const {
    return m_name;
}
void OAISource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISource::is_name_Set() const{
    return m_name_isSet;
}

bool OAISource::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISource::getRssPublisher() const {
    return m_rss_publisher;
}
void OAISource::setRssPublisher(const QString &rss_publisher) {
    m_rss_publisher = rss_publisher;
    m_rss_publisher_isSet = true;
}

bool OAISource::is_rss_publisher_Set() const{
    return m_rss_publisher_isSet;
}

bool OAISource::is_rss_publisher_Valid() const{
    return m_rss_publisher_isValid;
}

QString OAISource::getUrl() const {
    return m_url;
}
void OAISource::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISource::is_url_Set() const{
    return m_url_isSet;
}

bool OAISource::is_url_Valid() const{
    return m_url_isValid;
}

bool OAISource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_rss_feed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rss_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__id_isValid && m_name_isValid && m_rss_publisher_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
