/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPost::OAIPost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPost::OAIPost() {
    this->initializeModel();
}

OAIPost::~OAIPost() {}

void OAIPost::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_advisor_id_isSet = false;
    m_advisor_id_isValid = false;

    m_approval_status_isSet = false;
    m_approval_status_isValid = false;

    m_approval_transactions_isSet = false;
    m_approval_transactions_isValid = false;

    m_article_id_isSet = false;
    m_article_id_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_display_date_isSet = false;
    m_display_date_isValid = false;

    m_display_summary_isSet = false;
    m_display_summary_isValid = false;

    m_display_tag_isSet = false;
    m_display_tag_isValid = false;

    m_external_url_isSet = false;
    m_external_url_isValid = false;

    m_external_url_source_isSet = false;
    m_external_url_source_isValid = false;

    m_external_url_type_isSet = false;
    m_external_url_type_isValid = false;

    m_group_ids_isSet = false;
    m_group_ids_isValid = false;

    m_image_height_isSet = false;
    m_image_height_isValid = false;

    m_image_path_isSet = false;
    m_image_path_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_image_width_isSet = false;
    m_image_width_isValid = false;

    m_is_featured_isSet = false;
    m_is_featured_isValid = false;

    m_is_mobile_proxy_needed_isSet = false;
    m_is_mobile_proxy_needed_isValid = false;

    m_is_proxy_needed_isSet = false;
    m_is_proxy_needed_isValid = false;

    m_is_published_isSet = false;
    m_is_published_isValid = false;

    m_is_responsive_isSet = false;
    m_is_responsive_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_needs_sanitize_isSet = false;
    m_needs_sanitize_isValid = false;

    m_newsletter_ids_isSet = false;
    m_newsletter_ids_isValid = false;

    m_post_date_isSet = false;
    m_post_date_isValid = false;

    m_proxy_url_isSet = false;
    m_proxy_url_isValid = false;

    m_redirector_link_isSet = false;
    m_redirector_link_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_square_logo_url_isSet = false;
    m_square_logo_url_isValid = false;

    m_suitability_score_isSet = false;
    m_suitability_score_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_vestorly_url_isSet = false;
    m_vestorly_url_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;

    m_video_id_isSet = false;
    m_video_id_isValid = false;
}

void OAIPost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPost::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_advisor_id_isValid = ::OpenAPI::fromJsonValue(m_advisor_id, json[QString("advisor_id")]);
    m_advisor_id_isSet = !json[QString("advisor_id")].isNull() && m_advisor_id_isValid;

    m_approval_status_isValid = ::OpenAPI::fromJsonValue(m_approval_status, json[QString("approval_status")]);
    m_approval_status_isSet = !json[QString("approval_status")].isNull() && m_approval_status_isValid;

    m_approval_transactions_isValid = ::OpenAPI::fromJsonValue(m_approval_transactions, json[QString("approval_transactions")]);
    m_approval_transactions_isSet = !json[QString("approval_transactions")].isNull() && m_approval_transactions_isValid;

    m_article_id_isValid = ::OpenAPI::fromJsonValue(m_article_id, json[QString("article_id")]);
    m_article_id_isSet = !json[QString("article_id")].isNull() && m_article_id_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_display_date_isValid = ::OpenAPI::fromJsonValue(m_display_date, json[QString("display_date")]);
    m_display_date_isSet = !json[QString("display_date")].isNull() && m_display_date_isValid;

    m_display_summary_isValid = ::OpenAPI::fromJsonValue(m_display_summary, json[QString("display_summary")]);
    m_display_summary_isSet = !json[QString("display_summary")].isNull() && m_display_summary_isValid;

    m_display_tag_isValid = ::OpenAPI::fromJsonValue(m_display_tag, json[QString("display_tag")]);
    m_display_tag_isSet = !json[QString("display_tag")].isNull() && m_display_tag_isValid;

    m_external_url_isValid = ::OpenAPI::fromJsonValue(m_external_url, json[QString("external_url")]);
    m_external_url_isSet = !json[QString("external_url")].isNull() && m_external_url_isValid;

    m_external_url_source_isValid = ::OpenAPI::fromJsonValue(m_external_url_source, json[QString("external_url_source")]);
    m_external_url_source_isSet = !json[QString("external_url_source")].isNull() && m_external_url_source_isValid;

    m_external_url_type_isValid = ::OpenAPI::fromJsonValue(m_external_url_type, json[QString("external_url_type")]);
    m_external_url_type_isSet = !json[QString("external_url_type")].isNull() && m_external_url_type_isValid;

    m_group_ids_isValid = ::OpenAPI::fromJsonValue(m_group_ids, json[QString("group_ids")]);
    m_group_ids_isSet = !json[QString("group_ids")].isNull() && m_group_ids_isValid;

    m_image_height_isValid = ::OpenAPI::fromJsonValue(m_image_height, json[QString("image_height")]);
    m_image_height_isSet = !json[QString("image_height")].isNull() && m_image_height_isValid;

    m_image_path_isValid = ::OpenAPI::fromJsonValue(m_image_path, json[QString("image_path")]);
    m_image_path_isSet = !json[QString("image_path")].isNull() && m_image_path_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_image_width_isValid = ::OpenAPI::fromJsonValue(m_image_width, json[QString("image_width")]);
    m_image_width_isSet = !json[QString("image_width")].isNull() && m_image_width_isValid;

    m_is_featured_isValid = ::OpenAPI::fromJsonValue(m_is_featured, json[QString("is_featured")]);
    m_is_featured_isSet = !json[QString("is_featured")].isNull() && m_is_featured_isValid;

    m_is_mobile_proxy_needed_isValid = ::OpenAPI::fromJsonValue(m_is_mobile_proxy_needed, json[QString("is_mobile_proxy_needed")]);
    m_is_mobile_proxy_needed_isSet = !json[QString("is_mobile_proxy_needed")].isNull() && m_is_mobile_proxy_needed_isValid;

    m_is_proxy_needed_isValid = ::OpenAPI::fromJsonValue(m_is_proxy_needed, json[QString("is_proxy_needed")]);
    m_is_proxy_needed_isSet = !json[QString("is_proxy_needed")].isNull() && m_is_proxy_needed_isValid;

    m_is_published_isValid = ::OpenAPI::fromJsonValue(m_is_published, json[QString("is_published")]);
    m_is_published_isSet = !json[QString("is_published")].isNull() && m_is_published_isValid;

    m_is_responsive_isValid = ::OpenAPI::fromJsonValue(m_is_responsive, json[QString("is_responsive")]);
    m_is_responsive_isSet = !json[QString("is_responsive")].isNull() && m_is_responsive_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logo_url")]);
    m_logo_url_isSet = !json[QString("logo_url")].isNull() && m_logo_url_isValid;

    m_needs_sanitize_isValid = ::OpenAPI::fromJsonValue(m_needs_sanitize, json[QString("needs_sanitize")]);
    m_needs_sanitize_isSet = !json[QString("needs_sanitize")].isNull() && m_needs_sanitize_isValid;

    m_newsletter_ids_isValid = ::OpenAPI::fromJsonValue(m_newsletter_ids, json[QString("newsletter_ids")]);
    m_newsletter_ids_isSet = !json[QString("newsletter_ids")].isNull() && m_newsletter_ids_isValid;

    m_post_date_isValid = ::OpenAPI::fromJsonValue(m_post_date, json[QString("post_date")]);
    m_post_date_isSet = !json[QString("post_date")].isNull() && m_post_date_isValid;

    m_proxy_url_isValid = ::OpenAPI::fromJsonValue(m_proxy_url, json[QString("proxy_url")]);
    m_proxy_url_isSet = !json[QString("proxy_url")].isNull() && m_proxy_url_isValid;

    m_redirector_link_isValid = ::OpenAPI::fromJsonValue(m_redirector_link, json[QString("redirector_link")]);
    m_redirector_link_isSet = !json[QString("redirector_link")].isNull() && m_redirector_link_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_square_logo_url_isValid = ::OpenAPI::fromJsonValue(m_square_logo_url, json[QString("square_logo_url")]);
    m_square_logo_url_isSet = !json[QString("square_logo_url")].isNull() && m_square_logo_url_isValid;

    m_suitability_score_isValid = ::OpenAPI::fromJsonValue(m_suitability_score, json[QString("suitability_score")]);
    m_suitability_score_isSet = !json[QString("suitability_score")].isNull() && m_suitability_score_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_vestorly_url_isValid = ::OpenAPI::fromJsonValue(m_vestorly_url, json[QString("vestorly_url")]);
    m_vestorly_url_isSet = !json[QString("vestorly_url")].isNull() && m_vestorly_url_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;

    m_video_id_isValid = ::OpenAPI::fromJsonValue(m_video_id, json[QString("video_id")]);
    m_video_id_isSet = !json[QString("video_id")].isNull() && m_video_id_isValid;
}

QString OAIPost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPost::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_advisor_id_isSet) {
        obj.insert(QString("advisor_id"), ::OpenAPI::toJsonValue(m_advisor_id));
    }
    if (m_approval_status_isSet) {
        obj.insert(QString("approval_status"), ::OpenAPI::toJsonValue(m_approval_status));
    }
    if (m_approval_transactions.size() > 0) {
        obj.insert(QString("approval_transactions"), ::OpenAPI::toJsonValue(m_approval_transactions));
    }
    if (m_article_id_isSet) {
        obj.insert(QString("article_id"), ::OpenAPI::toJsonValue(m_article_id));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_display_date_isSet) {
        obj.insert(QString("display_date"), ::OpenAPI::toJsonValue(m_display_date));
    }
    if (m_display_summary_isSet) {
        obj.insert(QString("display_summary"), ::OpenAPI::toJsonValue(m_display_summary));
    }
    if (m_display_tag_isSet) {
        obj.insert(QString("display_tag"), ::OpenAPI::toJsonValue(m_display_tag));
    }
    if (m_external_url_isSet) {
        obj.insert(QString("external_url"), ::OpenAPI::toJsonValue(m_external_url));
    }
    if (m_external_url_source_isSet) {
        obj.insert(QString("external_url_source"), ::OpenAPI::toJsonValue(m_external_url_source));
    }
    if (m_external_url_type_isSet) {
        obj.insert(QString("external_url_type"), ::OpenAPI::toJsonValue(m_external_url_type));
    }
    if (m_group_ids.size() > 0) {
        obj.insert(QString("group_ids"), ::OpenAPI::toJsonValue(m_group_ids));
    }
    if (m_image_height_isSet) {
        obj.insert(QString("image_height"), ::OpenAPI::toJsonValue(m_image_height));
    }
    if (m_image_path_isSet) {
        obj.insert(QString("image_path"), ::OpenAPI::toJsonValue(m_image_path));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_image_width_isSet) {
        obj.insert(QString("image_width"), ::OpenAPI::toJsonValue(m_image_width));
    }
    if (m_is_featured_isSet) {
        obj.insert(QString("is_featured"), ::OpenAPI::toJsonValue(m_is_featured));
    }
    if (m_is_mobile_proxy_needed_isSet) {
        obj.insert(QString("is_mobile_proxy_needed"), ::OpenAPI::toJsonValue(m_is_mobile_proxy_needed));
    }
    if (m_is_proxy_needed_isSet) {
        obj.insert(QString("is_proxy_needed"), ::OpenAPI::toJsonValue(m_is_proxy_needed));
    }
    if (m_is_published_isSet) {
        obj.insert(QString("is_published"), ::OpenAPI::toJsonValue(m_is_published));
    }
    if (m_is_responsive_isSet) {
        obj.insert(QString("is_responsive"), ::OpenAPI::toJsonValue(m_is_responsive));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logo_url"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_needs_sanitize_isSet) {
        obj.insert(QString("needs_sanitize"), ::OpenAPI::toJsonValue(m_needs_sanitize));
    }
    if (m_newsletter_ids.size() > 0) {
        obj.insert(QString("newsletter_ids"), ::OpenAPI::toJsonValue(m_newsletter_ids));
    }
    if (m_post_date_isSet) {
        obj.insert(QString("post_date"), ::OpenAPI::toJsonValue(m_post_date));
    }
    if (m_proxy_url_isSet) {
        obj.insert(QString("proxy_url"), ::OpenAPI::toJsonValue(m_proxy_url));
    }
    if (m_redirector_link_isSet) {
        obj.insert(QString("redirector_link"), ::OpenAPI::toJsonValue(m_redirector_link));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_square_logo_url_isSet) {
        obj.insert(QString("square_logo_url"), ::OpenAPI::toJsonValue(m_square_logo_url));
    }
    if (m_suitability_score_isSet) {
        obj.insert(QString("suitability_score"), ::OpenAPI::toJsonValue(m_suitability_score));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_vestorly_url_isSet) {
        obj.insert(QString("vestorly_url"), ::OpenAPI::toJsonValue(m_vestorly_url));
    }
    if (m_video_isSet) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    if (m_video_id_isSet) {
        obj.insert(QString("video_id"), ::OpenAPI::toJsonValue(m_video_id));
    }
    return obj;
}

QString OAIPost::getId() const {
    return m__id;
}
void OAIPost::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAIPost::is__id_Set() const{
    return m__id_isSet;
}

bool OAIPost::is__id_Valid() const{
    return m__id_isValid;
}

QString OAIPost::getAdvisorId() const {
    return m_advisor_id;
}
void OAIPost::setAdvisorId(const QString &advisor_id) {
    m_advisor_id = advisor_id;
    m_advisor_id_isSet = true;
}

bool OAIPost::is_advisor_id_Set() const{
    return m_advisor_id_isSet;
}

bool OAIPost::is_advisor_id_Valid() const{
    return m_advisor_id_isValid;
}

QString OAIPost::getApprovalStatus() const {
    return m_approval_status;
}
void OAIPost::setApprovalStatus(const QString &approval_status) {
    m_approval_status = approval_status;
    m_approval_status_isSet = true;
}

bool OAIPost::is_approval_status_Set() const{
    return m_approval_status_isSet;
}

bool OAIPost::is_approval_status_Valid() const{
    return m_approval_status_isValid;
}

QList<QString> OAIPost::getApprovalTransactions() const {
    return m_approval_transactions;
}
void OAIPost::setApprovalTransactions(const QList<QString> &approval_transactions) {
    m_approval_transactions = approval_transactions;
    m_approval_transactions_isSet = true;
}

bool OAIPost::is_approval_transactions_Set() const{
    return m_approval_transactions_isSet;
}

bool OAIPost::is_approval_transactions_Valid() const{
    return m_approval_transactions_isValid;
}

QString OAIPost::getArticleId() const {
    return m_article_id;
}
void OAIPost::setArticleId(const QString &article_id) {
    m_article_id = article_id;
    m_article_id_isSet = true;
}

bool OAIPost::is_article_id_Set() const{
    return m_article_id_isSet;
}

bool OAIPost::is_article_id_Valid() const{
    return m_article_id_isValid;
}

QString OAIPost::getComment() const {
    return m_comment;
}
void OAIPost::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIPost::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIPost::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIPost::getCreatedAt() const {
    return m_created_at;
}
void OAIPost::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPost::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPost::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPost::getDisplayDate() const {
    return m_display_date;
}
void OAIPost::setDisplayDate(const QString &display_date) {
    m_display_date = display_date;
    m_display_date_isSet = true;
}

bool OAIPost::is_display_date_Set() const{
    return m_display_date_isSet;
}

bool OAIPost::is_display_date_Valid() const{
    return m_display_date_isValid;
}

QString OAIPost::getDisplaySummary() const {
    return m_display_summary;
}
void OAIPost::setDisplaySummary(const QString &display_summary) {
    m_display_summary = display_summary;
    m_display_summary_isSet = true;
}

bool OAIPost::is_display_summary_Set() const{
    return m_display_summary_isSet;
}

bool OAIPost::is_display_summary_Valid() const{
    return m_display_summary_isValid;
}

QString OAIPost::getDisplayTag() const {
    return m_display_tag;
}
void OAIPost::setDisplayTag(const QString &display_tag) {
    m_display_tag = display_tag;
    m_display_tag_isSet = true;
}

bool OAIPost::is_display_tag_Set() const{
    return m_display_tag_isSet;
}

bool OAIPost::is_display_tag_Valid() const{
    return m_display_tag_isValid;
}

QString OAIPost::getExternalUrl() const {
    return m_external_url;
}
void OAIPost::setExternalUrl(const QString &external_url) {
    m_external_url = external_url;
    m_external_url_isSet = true;
}

bool OAIPost::is_external_url_Set() const{
    return m_external_url_isSet;
}

bool OAIPost::is_external_url_Valid() const{
    return m_external_url_isValid;
}

QString OAIPost::getExternalUrlSource() const {
    return m_external_url_source;
}
void OAIPost::setExternalUrlSource(const QString &external_url_source) {
    m_external_url_source = external_url_source;
    m_external_url_source_isSet = true;
}

bool OAIPost::is_external_url_source_Set() const{
    return m_external_url_source_isSet;
}

bool OAIPost::is_external_url_source_Valid() const{
    return m_external_url_source_isValid;
}

QString OAIPost::getExternalUrlType() const {
    return m_external_url_type;
}
void OAIPost::setExternalUrlType(const QString &external_url_type) {
    m_external_url_type = external_url_type;
    m_external_url_type_isSet = true;
}

bool OAIPost::is_external_url_type_Set() const{
    return m_external_url_type_isSet;
}

bool OAIPost::is_external_url_type_Valid() const{
    return m_external_url_type_isValid;
}

QList<QString> OAIPost::getGroupIds() const {
    return m_group_ids;
}
void OAIPost::setGroupIds(const QList<QString> &group_ids) {
    m_group_ids = group_ids;
    m_group_ids_isSet = true;
}

bool OAIPost::is_group_ids_Set() const{
    return m_group_ids_isSet;
}

bool OAIPost::is_group_ids_Valid() const{
    return m_group_ids_isValid;
}

QString OAIPost::getImageHeight() const {
    return m_image_height;
}
void OAIPost::setImageHeight(const QString &image_height) {
    m_image_height = image_height;
    m_image_height_isSet = true;
}

bool OAIPost::is_image_height_Set() const{
    return m_image_height_isSet;
}

bool OAIPost::is_image_height_Valid() const{
    return m_image_height_isValid;
}

QString OAIPost::getImagePath() const {
    return m_image_path;
}
void OAIPost::setImagePath(const QString &image_path) {
    m_image_path = image_path;
    m_image_path_isSet = true;
}

bool OAIPost::is_image_path_Set() const{
    return m_image_path_isSet;
}

bool OAIPost::is_image_path_Valid() const{
    return m_image_path_isValid;
}

QString OAIPost::getImageUrl() const {
    return m_image_url;
}
void OAIPost::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIPost::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIPost::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIPost::getImageWidth() const {
    return m_image_width;
}
void OAIPost::setImageWidth(const QString &image_width) {
    m_image_width = image_width;
    m_image_width_isSet = true;
}

bool OAIPost::is_image_width_Set() const{
    return m_image_width_isSet;
}

bool OAIPost::is_image_width_Valid() const{
    return m_image_width_isValid;
}

bool OAIPost::isIsFeatured() const {
    return m_is_featured;
}
void OAIPost::setIsFeatured(const bool &is_featured) {
    m_is_featured = is_featured;
    m_is_featured_isSet = true;
}

bool OAIPost::is_is_featured_Set() const{
    return m_is_featured_isSet;
}

bool OAIPost::is_is_featured_Valid() const{
    return m_is_featured_isValid;
}

bool OAIPost::isIsMobileProxyNeeded() const {
    return m_is_mobile_proxy_needed;
}
void OAIPost::setIsMobileProxyNeeded(const bool &is_mobile_proxy_needed) {
    m_is_mobile_proxy_needed = is_mobile_proxy_needed;
    m_is_mobile_proxy_needed_isSet = true;
}

bool OAIPost::is_is_mobile_proxy_needed_Set() const{
    return m_is_mobile_proxy_needed_isSet;
}

bool OAIPost::is_is_mobile_proxy_needed_Valid() const{
    return m_is_mobile_proxy_needed_isValid;
}

bool OAIPost::isIsProxyNeeded() const {
    return m_is_proxy_needed;
}
void OAIPost::setIsProxyNeeded(const bool &is_proxy_needed) {
    m_is_proxy_needed = is_proxy_needed;
    m_is_proxy_needed_isSet = true;
}

bool OAIPost::is_is_proxy_needed_Set() const{
    return m_is_proxy_needed_isSet;
}

bool OAIPost::is_is_proxy_needed_Valid() const{
    return m_is_proxy_needed_isValid;
}

bool OAIPost::isIsPublished() const {
    return m_is_published;
}
void OAIPost::setIsPublished(const bool &is_published) {
    m_is_published = is_published;
    m_is_published_isSet = true;
}

bool OAIPost::is_is_published_Set() const{
    return m_is_published_isSet;
}

bool OAIPost::is_is_published_Valid() const{
    return m_is_published_isValid;
}

bool OAIPost::isIsResponsive() const {
    return m_is_responsive;
}
void OAIPost::setIsResponsive(const bool &is_responsive) {
    m_is_responsive = is_responsive;
    m_is_responsive_isSet = true;
}

bool OAIPost::is_is_responsive_Set() const{
    return m_is_responsive_isSet;
}

bool OAIPost::is_is_responsive_Valid() const{
    return m_is_responsive_isValid;
}

QString OAIPost::getLogoUrl() const {
    return m_logo_url;
}
void OAIPost::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAIPost::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAIPost::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAIPost::getNeedsSanitize() const {
    return m_needs_sanitize;
}
void OAIPost::setNeedsSanitize(const QString &needs_sanitize) {
    m_needs_sanitize = needs_sanitize;
    m_needs_sanitize_isSet = true;
}

bool OAIPost::is_needs_sanitize_Set() const{
    return m_needs_sanitize_isSet;
}

bool OAIPost::is_needs_sanitize_Valid() const{
    return m_needs_sanitize_isValid;
}

QList<QString> OAIPost::getNewsletterIds() const {
    return m_newsletter_ids;
}
void OAIPost::setNewsletterIds(const QList<QString> &newsletter_ids) {
    m_newsletter_ids = newsletter_ids;
    m_newsletter_ids_isSet = true;
}

bool OAIPost::is_newsletter_ids_Set() const{
    return m_newsletter_ids_isSet;
}

bool OAIPost::is_newsletter_ids_Valid() const{
    return m_newsletter_ids_isValid;
}

QString OAIPost::getPostDate() const {
    return m_post_date;
}
void OAIPost::setPostDate(const QString &post_date) {
    m_post_date = post_date;
    m_post_date_isSet = true;
}

bool OAIPost::is_post_date_Set() const{
    return m_post_date_isSet;
}

bool OAIPost::is_post_date_Valid() const{
    return m_post_date_isValid;
}

QString OAIPost::getProxyUrl() const {
    return m_proxy_url;
}
void OAIPost::setProxyUrl(const QString &proxy_url) {
    m_proxy_url = proxy_url;
    m_proxy_url_isSet = true;
}

bool OAIPost::is_proxy_url_Set() const{
    return m_proxy_url_isSet;
}

bool OAIPost::is_proxy_url_Valid() const{
    return m_proxy_url_isValid;
}

QString OAIPost::getRedirectorLink() const {
    return m_redirector_link;
}
void OAIPost::setRedirectorLink(const QString &redirector_link) {
    m_redirector_link = redirector_link;
    m_redirector_link_isSet = true;
}

bool OAIPost::is_redirector_link_Set() const{
    return m_redirector_link_isSet;
}

bool OAIPost::is_redirector_link_Valid() const{
    return m_redirector_link_isValid;
}

QString OAIPost::getSlug() const {
    return m_slug;
}
void OAIPost::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIPost::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIPost::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAIPost::getSquareLogoUrl() const {
    return m_square_logo_url;
}
void OAIPost::setSquareLogoUrl(const QString &square_logo_url) {
    m_square_logo_url = square_logo_url;
    m_square_logo_url_isSet = true;
}

bool OAIPost::is_square_logo_url_Set() const{
    return m_square_logo_url_isSet;
}

bool OAIPost::is_square_logo_url_Valid() const{
    return m_square_logo_url_isValid;
}

QString OAIPost::getSuitabilityScore() const {
    return m_suitability_score;
}
void OAIPost::setSuitabilityScore(const QString &suitability_score) {
    m_suitability_score = suitability_score;
    m_suitability_score_isSet = true;
}

bool OAIPost::is_suitability_score_Set() const{
    return m_suitability_score_isSet;
}

bool OAIPost::is_suitability_score_Valid() const{
    return m_suitability_score_isValid;
}

QString OAIPost::getSummary() const {
    return m_summary;
}
void OAIPost::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIPost::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIPost::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIPost::getTitle() const {
    return m_title;
}
void OAIPost::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPost::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPost::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPost::getTopic() const {
    return m_topic;
}
void OAIPost::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIPost::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIPost::is_topic_Valid() const{
    return m_topic_isValid;
}

QString OAIPost::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPost::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPost::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPost::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIPost::getVestorlyUrl() const {
    return m_vestorly_url;
}
void OAIPost::setVestorlyUrl(const QString &vestorly_url) {
    m_vestorly_url = vestorly_url;
    m_vestorly_url_isSet = true;
}

bool OAIPost::is_vestorly_url_Set() const{
    return m_vestorly_url_isSet;
}

bool OAIPost::is_vestorly_url_Valid() const{
    return m_vestorly_url_isValid;
}

QString OAIPost::getVideo() const {
    return m_video;
}
void OAIPost::setVideo(const QString &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAIPost::is_video_Set() const{
    return m_video_isSet;
}

bool OAIPost::is_video_Valid() const{
    return m_video_isValid;
}

QString OAIPost::getVideoId() const {
    return m_video_id;
}
void OAIPost::setVideoId(const QString &video_id) {
    m_video_id = video_id;
    m_video_id_isSet = true;
}

bool OAIPost::is_video_id_Set() const{
    return m_video_id_isSet;
}

bool OAIPost::is_video_id_Valid() const{
    return m_video_id_isValid;
}

bool OAIPost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advisor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_transactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_article_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_url_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_url_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_featured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_mobile_proxy_needed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_proxy_needed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_responsive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_needs_sanitize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_newsletter_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirector_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_square_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suitability_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vestorly_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
