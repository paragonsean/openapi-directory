# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrgSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, company_address: str=None, company_contact_email: str=None, company_homepage_url: str=None, is_default: bool=None, name: str=None, privacy_policy_url: str=None, site_url: str=None, terms_and_conditions_url: str=None):
        """OrgSetting - a model defined in OpenAPI

        :param id: The id of this OrgSetting.
        :param company_address: The company_address of this OrgSetting.
        :param company_contact_email: The company_contact_email of this OrgSetting.
        :param company_homepage_url: The company_homepage_url of this OrgSetting.
        :param is_default: The is_default of this OrgSetting.
        :param name: The name of this OrgSetting.
        :param privacy_policy_url: The privacy_policy_url of this OrgSetting.
        :param site_url: The site_url of this OrgSetting.
        :param terms_and_conditions_url: The terms_and_conditions_url of this OrgSetting.
        """
        self.openapi_types = {
            'id': str,
            'company_address': str,
            'company_contact_email': str,
            'company_homepage_url': str,
            'is_default': bool,
            'name': str,
            'privacy_policy_url': str,
            'site_url': str,
            'terms_and_conditions_url': str
        }

        self.attribute_map = {
            'id': '_id',
            'company_address': 'company_address',
            'company_contact_email': 'company_contact_email',
            'company_homepage_url': 'company_homepage_url',
            'is_default': 'is_default',
            'name': 'name',
            'privacy_policy_url': 'privacy_policy_url',
            'site_url': 'site_url',
            'terms_and_conditions_url': 'terms_and_conditions_url'
        }

        self._id = id
        self._company_address = company_address
        self._company_contact_email = company_contact_email
        self._company_homepage_url = company_homepage_url
        self._is_default = is_default
        self._name = name
        self._privacy_policy_url = privacy_policy_url
        self._site_url = site_url
        self._terms_and_conditions_url = terms_and_conditions_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrgSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrgSetting of this OrgSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OrgSetting.


        :return: The id of this OrgSetting.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrgSetting.


        :param id: The id of this OrgSetting.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def company_address(self):
        """Gets the company_address of this OrgSetting.


        :return: The company_address of this OrgSetting.
        :rtype: str
        """
        return self._company_address

    @company_address.setter
    def company_address(self, company_address):
        """Sets the company_address of this OrgSetting.


        :param company_address: The company_address of this OrgSetting.
        :type company_address: str
        """

        self._company_address = company_address

    @property
    def company_contact_email(self):
        """Gets the company_contact_email of this OrgSetting.


        :return: The company_contact_email of this OrgSetting.
        :rtype: str
        """
        return self._company_contact_email

    @company_contact_email.setter
    def company_contact_email(self, company_contact_email):
        """Sets the company_contact_email of this OrgSetting.


        :param company_contact_email: The company_contact_email of this OrgSetting.
        :type company_contact_email: str
        """

        self._company_contact_email = company_contact_email

    @property
    def company_homepage_url(self):
        """Gets the company_homepage_url of this OrgSetting.


        :return: The company_homepage_url of this OrgSetting.
        :rtype: str
        """
        return self._company_homepage_url

    @company_homepage_url.setter
    def company_homepage_url(self, company_homepage_url):
        """Sets the company_homepage_url of this OrgSetting.


        :param company_homepage_url: The company_homepage_url of this OrgSetting.
        :type company_homepage_url: str
        """

        self._company_homepage_url = company_homepage_url

    @property
    def is_default(self):
        """Gets the is_default of this OrgSetting.


        :return: The is_default of this OrgSetting.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this OrgSetting.


        :param is_default: The is_default of this OrgSetting.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def name(self):
        """Gets the name of this OrgSetting.


        :return: The name of this OrgSetting.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrgSetting.


        :param name: The name of this OrgSetting.
        :type name: str
        """

        self._name = name

    @property
    def privacy_policy_url(self):
        """Gets the privacy_policy_url of this OrgSetting.


        :return: The privacy_policy_url of this OrgSetting.
        :rtype: str
        """
        return self._privacy_policy_url

    @privacy_policy_url.setter
    def privacy_policy_url(self, privacy_policy_url):
        """Sets the privacy_policy_url of this OrgSetting.


        :param privacy_policy_url: The privacy_policy_url of this OrgSetting.
        :type privacy_policy_url: str
        """

        self._privacy_policy_url = privacy_policy_url

    @property
    def site_url(self):
        """Gets the site_url of this OrgSetting.


        :return: The site_url of this OrgSetting.
        :rtype: str
        """
        return self._site_url

    @site_url.setter
    def site_url(self, site_url):
        """Sets the site_url of this OrgSetting.


        :param site_url: The site_url of this OrgSetting.
        :type site_url: str
        """

        self._site_url = site_url

    @property
    def terms_and_conditions_url(self):
        """Gets the terms_and_conditions_url of this OrgSetting.


        :return: The terms_and_conditions_url of this OrgSetting.
        :rtype: str
        """
        return self._terms_and_conditions_url

    @terms_and_conditions_url.setter
    def terms_and_conditions_url(self, terms_and_conditions_url):
        """Sets the terms_and_conditions_url of this OrgSetting.


        :param terms_and_conditions_url: The terms_and_conditions_url of this OrgSetting.
        :type terms_and_conditions_url: str
        """

        self._terms_and_conditions_url = terms_and_conditions_url
