# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SourceInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_rss_feed: bool=None, enabled: bool=None, logo_url: str=None, name: str=None, rss_publisher: str=None, url: str=None):
        """SourceInput - a model defined in OpenAPI

        :param custom_rss_feed: The custom_rss_feed of this SourceInput.
        :param enabled: The enabled of this SourceInput.
        :param logo_url: The logo_url of this SourceInput.
        :param name: The name of this SourceInput.
        :param rss_publisher: The rss_publisher of this SourceInput.
        :param url: The url of this SourceInput.
        """
        self.openapi_types = {
            'custom_rss_feed': bool,
            'enabled': bool,
            'logo_url': str,
            'name': str,
            'rss_publisher': str,
            'url': str
        }

        self.attribute_map = {
            'custom_rss_feed': 'custom_rss_feed',
            'enabled': 'enabled',
            'logo_url': 'logo_url',
            'name': 'name',
            'rss_publisher': 'rss_publisher',
            'url': 'url'
        }

        self._custom_rss_feed = custom_rss_feed
        self._enabled = enabled
        self._logo_url = logo_url
        self._name = name
        self._rss_publisher = rss_publisher
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceInput of this SourceInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_rss_feed(self):
        """Gets the custom_rss_feed of this SourceInput.


        :return: The custom_rss_feed of this SourceInput.
        :rtype: bool
        """
        return self._custom_rss_feed

    @custom_rss_feed.setter
    def custom_rss_feed(self, custom_rss_feed):
        """Sets the custom_rss_feed of this SourceInput.


        :param custom_rss_feed: The custom_rss_feed of this SourceInput.
        :type custom_rss_feed: bool
        """

        self._custom_rss_feed = custom_rss_feed

    @property
    def enabled(self):
        """Gets the enabled of this SourceInput.


        :return: The enabled of this SourceInput.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SourceInput.


        :param enabled: The enabled of this SourceInput.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def logo_url(self):
        """Gets the logo_url of this SourceInput.


        :return: The logo_url of this SourceInput.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this SourceInput.


        :param logo_url: The logo_url of this SourceInput.
        :type logo_url: str
        """

        self._logo_url = logo_url

    @property
    def name(self):
        """Gets the name of this SourceInput.


        :return: The name of this SourceInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SourceInput.


        :param name: The name of this SourceInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def rss_publisher(self):
        """Gets the rss_publisher of this SourceInput.


        :return: The rss_publisher of this SourceInput.
        :rtype: str
        """
        return self._rss_publisher

    @rss_publisher.setter
    def rss_publisher(self, rss_publisher):
        """Sets the rss_publisher of this SourceInput.


        :param rss_publisher: The rss_publisher of this SourceInput.
        :type rss_publisher: str
        """
        if rss_publisher is None:
            raise ValueError("Invalid value for `rss_publisher`, must not be `None`")

        self._rss_publisher = rss_publisher

    @property
    def url(self):
        """Gets the url of this SourceInput.


        :return: The url of this SourceInput.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SourceInput.


        :param url: The url of this SourceInput.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
