# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Advisor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, about: str=None, account_type: str=None, address: str=None, adv_brochure: str=None, api_key: str=None, city: str=None, company: str=None, compliance_bcc_email_address: str=None, dashboard_url: str=None, disclosure: str=None, email_report_blast: str=None, external_options: str=None, first_name: str=None, id: str=None, last_name: str=None, linkedin: str=None, logo: str=None, name: str=None, plan: str=None, profile_picture: str=None, reg_number: str=None, state: str=None, tag: str=None, twitter_handle: str=None, website: str=None, zip: str=None):
        """Advisor - a model defined in OpenAPI

        :param about: The about of this Advisor.
        :param account_type: The account_type of this Advisor.
        :param address: The address of this Advisor.
        :param adv_brochure: The adv_brochure of this Advisor.
        :param api_key: The api_key of this Advisor.
        :param city: The city of this Advisor.
        :param company: The company of this Advisor.
        :param compliance_bcc_email_address: The compliance_bcc_email_address of this Advisor.
        :param dashboard_url: The dashboard_url of this Advisor.
        :param disclosure: The disclosure of this Advisor.
        :param email_report_blast: The email_report_blast of this Advisor.
        :param external_options: The external_options of this Advisor.
        :param first_name: The first_name of this Advisor.
        :param id: The id of this Advisor.
        :param last_name: The last_name of this Advisor.
        :param linkedin: The linkedin of this Advisor.
        :param logo: The logo of this Advisor.
        :param name: The name of this Advisor.
        :param plan: The plan of this Advisor.
        :param profile_picture: The profile_picture of this Advisor.
        :param reg_number: The reg_number of this Advisor.
        :param state: The state of this Advisor.
        :param tag: The tag of this Advisor.
        :param twitter_handle: The twitter_handle of this Advisor.
        :param website: The website of this Advisor.
        :param zip: The zip of this Advisor.
        """
        self.openapi_types = {
            'about': str,
            'account_type': str,
            'address': str,
            'adv_brochure': str,
            'api_key': str,
            'city': str,
            'company': str,
            'compliance_bcc_email_address': str,
            'dashboard_url': str,
            'disclosure': str,
            'email_report_blast': str,
            'external_options': str,
            'first_name': str,
            'id': str,
            'last_name': str,
            'linkedin': str,
            'logo': str,
            'name': str,
            'plan': str,
            'profile_picture': str,
            'reg_number': str,
            'state': str,
            'tag': str,
            'twitter_handle': str,
            'website': str,
            'zip': str
        }

        self.attribute_map = {
            'about': 'about',
            'account_type': 'account_type',
            'address': 'address',
            'adv_brochure': 'adv_brochure',
            'api_key': 'api_key',
            'city': 'city',
            'company': 'company',
            'compliance_bcc_email_address': 'compliance_bcc_email_address',
            'dashboard_url': 'dashboard_url',
            'disclosure': 'disclosure',
            'email_report_blast': 'email_report_blast',
            'external_options': 'external_options',
            'first_name': 'first_name',
            'id': 'id',
            'last_name': 'last_name',
            'linkedin': 'linkedin',
            'logo': 'logo',
            'name': 'name',
            'plan': 'plan',
            'profile_picture': 'profile_picture',
            'reg_number': 'reg_number',
            'state': 'state',
            'tag': 'tag',
            'twitter_handle': 'twitter_handle',
            'website': 'website',
            'zip': 'zip'
        }

        self._about = about
        self._account_type = account_type
        self._address = address
        self._adv_brochure = adv_brochure
        self._api_key = api_key
        self._city = city
        self._company = company
        self._compliance_bcc_email_address = compliance_bcc_email_address
        self._dashboard_url = dashboard_url
        self._disclosure = disclosure
        self._email_report_blast = email_report_blast
        self._external_options = external_options
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._linkedin = linkedin
        self._logo = logo
        self._name = name
        self._plan = plan
        self._profile_picture = profile_picture
        self._reg_number = reg_number
        self._state = state
        self._tag = tag
        self._twitter_handle = twitter_handle
        self._website = website
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Advisor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Advisor of this Advisor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def about(self):
        """Gets the about of this Advisor.


        :return: The about of this Advisor.
        :rtype: str
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this Advisor.


        :param about: The about of this Advisor.
        :type about: str
        """

        self._about = about

    @property
    def account_type(self):
        """Gets the account_type of this Advisor.


        :return: The account_type of this Advisor.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this Advisor.


        :param account_type: The account_type of this Advisor.
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def address(self):
        """Gets the address of this Advisor.


        :return: The address of this Advisor.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Advisor.


        :param address: The address of this Advisor.
        :type address: str
        """

        self._address = address

    @property
    def adv_brochure(self):
        """Gets the adv_brochure of this Advisor.


        :return: The adv_brochure of this Advisor.
        :rtype: str
        """
        return self._adv_brochure

    @adv_brochure.setter
    def adv_brochure(self, adv_brochure):
        """Sets the adv_brochure of this Advisor.


        :param adv_brochure: The adv_brochure of this Advisor.
        :type adv_brochure: str
        """

        self._adv_brochure = adv_brochure

    @property
    def api_key(self):
        """Gets the api_key of this Advisor.


        :return: The api_key of this Advisor.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this Advisor.


        :param api_key: The api_key of this Advisor.
        :type api_key: str
        """

        self._api_key = api_key

    @property
    def city(self):
        """Gets the city of this Advisor.


        :return: The city of this Advisor.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Advisor.


        :param city: The city of this Advisor.
        :type city: str
        """

        self._city = city

    @property
    def company(self):
        """Gets the company of this Advisor.


        :return: The company of this Advisor.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Advisor.


        :param company: The company of this Advisor.
        :type company: str
        """

        self._company = company

    @property
    def compliance_bcc_email_address(self):
        """Gets the compliance_bcc_email_address of this Advisor.


        :return: The compliance_bcc_email_address of this Advisor.
        :rtype: str
        """
        return self._compliance_bcc_email_address

    @compliance_bcc_email_address.setter
    def compliance_bcc_email_address(self, compliance_bcc_email_address):
        """Sets the compliance_bcc_email_address of this Advisor.


        :param compliance_bcc_email_address: The compliance_bcc_email_address of this Advisor.
        :type compliance_bcc_email_address: str
        """

        self._compliance_bcc_email_address = compliance_bcc_email_address

    @property
    def dashboard_url(self):
        """Gets the dashboard_url of this Advisor.


        :return: The dashboard_url of this Advisor.
        :rtype: str
        """
        return self._dashboard_url

    @dashboard_url.setter
    def dashboard_url(self, dashboard_url):
        """Sets the dashboard_url of this Advisor.


        :param dashboard_url: The dashboard_url of this Advisor.
        :type dashboard_url: str
        """

        self._dashboard_url = dashboard_url

    @property
    def disclosure(self):
        """Gets the disclosure of this Advisor.


        :return: The disclosure of this Advisor.
        :rtype: str
        """
        return self._disclosure

    @disclosure.setter
    def disclosure(self, disclosure):
        """Sets the disclosure of this Advisor.


        :param disclosure: The disclosure of this Advisor.
        :type disclosure: str
        """

        self._disclosure = disclosure

    @property
    def email_report_blast(self):
        """Gets the email_report_blast of this Advisor.


        :return: The email_report_blast of this Advisor.
        :rtype: str
        """
        return self._email_report_blast

    @email_report_blast.setter
    def email_report_blast(self, email_report_blast):
        """Sets the email_report_blast of this Advisor.


        :param email_report_blast: The email_report_blast of this Advisor.
        :type email_report_blast: str
        """

        self._email_report_blast = email_report_blast

    @property
    def external_options(self):
        """Gets the external_options of this Advisor.


        :return: The external_options of this Advisor.
        :rtype: str
        """
        return self._external_options

    @external_options.setter
    def external_options(self, external_options):
        """Sets the external_options of this Advisor.


        :param external_options: The external_options of this Advisor.
        :type external_options: str
        """

        self._external_options = external_options

    @property
    def first_name(self):
        """Gets the first_name of this Advisor.


        :return: The first_name of this Advisor.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Advisor.


        :param first_name: The first_name of this Advisor.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Advisor.


        :return: The id of this Advisor.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Advisor.


        :param id: The id of this Advisor.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this Advisor.


        :return: The last_name of this Advisor.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Advisor.


        :param last_name: The last_name of this Advisor.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def linkedin(self):
        """Gets the linkedin of this Advisor.


        :return: The linkedin of this Advisor.
        :rtype: str
        """
        return self._linkedin

    @linkedin.setter
    def linkedin(self, linkedin):
        """Sets the linkedin of this Advisor.


        :param linkedin: The linkedin of this Advisor.
        :type linkedin: str
        """

        self._linkedin = linkedin

    @property
    def logo(self):
        """Gets the logo of this Advisor.


        :return: The logo of this Advisor.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Advisor.


        :param logo: The logo of this Advisor.
        :type logo: str
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this Advisor.


        :return: The name of this Advisor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Advisor.


        :param name: The name of this Advisor.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def plan(self):
        """Gets the plan of this Advisor.


        :return: The plan of this Advisor.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Advisor.


        :param plan: The plan of this Advisor.
        :type plan: str
        """

        self._plan = plan

    @property
    def profile_picture(self):
        """Gets the profile_picture of this Advisor.


        :return: The profile_picture of this Advisor.
        :rtype: str
        """
        return self._profile_picture

    @profile_picture.setter
    def profile_picture(self, profile_picture):
        """Sets the profile_picture of this Advisor.


        :param profile_picture: The profile_picture of this Advisor.
        :type profile_picture: str
        """

        self._profile_picture = profile_picture

    @property
    def reg_number(self):
        """Gets the reg_number of this Advisor.


        :return: The reg_number of this Advisor.
        :rtype: str
        """
        return self._reg_number

    @reg_number.setter
    def reg_number(self, reg_number):
        """Sets the reg_number of this Advisor.


        :param reg_number: The reg_number of this Advisor.
        :type reg_number: str
        """

        self._reg_number = reg_number

    @property
    def state(self):
        """Gets the state of this Advisor.


        :return: The state of this Advisor.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Advisor.


        :param state: The state of this Advisor.
        :type state: str
        """

        self._state = state

    @property
    def tag(self):
        """Gets the tag of this Advisor.


        :return: The tag of this Advisor.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Advisor.


        :param tag: The tag of this Advisor.
        :type tag: str
        """

        self._tag = tag

    @property
    def twitter_handle(self):
        """Gets the twitter_handle of this Advisor.


        :return: The twitter_handle of this Advisor.
        :rtype: str
        """
        return self._twitter_handle

    @twitter_handle.setter
    def twitter_handle(self, twitter_handle):
        """Sets the twitter_handle of this Advisor.


        :param twitter_handle: The twitter_handle of this Advisor.
        :type twitter_handle: str
        """

        self._twitter_handle = twitter_handle

    @property
    def website(self):
        """Gets the website of this Advisor.


        :return: The website of this Advisor.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Advisor.


        :param website: The website of this Advisor.
        :type website: str
        """

        self._website = website

    @property
    def zip(self):
        """Gets the zip of this Advisor.


        :return: The zip of this Advisor.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Advisor.


        :param zip: The zip of this Advisor.
        :type zip: str
        """

        self._zip = zip
