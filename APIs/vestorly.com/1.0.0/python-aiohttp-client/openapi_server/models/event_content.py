# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, content_field: str=None, content_id: str=None, content_type: str=None, created_at: str=None, slug: str=None, updated_at: str=None):
        """EventContent - a model defined in OpenAPI

        :param id: The id of this EventContent.
        :param content_field: The content_field of this EventContent.
        :param content_id: The content_id of this EventContent.
        :param content_type: The content_type of this EventContent.
        :param created_at: The created_at of this EventContent.
        :param slug: The slug of this EventContent.
        :param updated_at: The updated_at of this EventContent.
        """
        self.openapi_types = {
            'id': str,
            'content_field': str,
            'content_id': str,
            'content_type': str,
            'created_at': str,
            'slug': str,
            'updated_at': str
        }

        self.attribute_map = {
            'id': '_id',
            'content_field': 'content_field',
            'content_id': 'content_id',
            'content_type': 'content_type',
            'created_at': 'created_at',
            'slug': 'slug',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._content_field = content_field
        self._content_id = content_id
        self._content_type = content_type
        self._created_at = created_at
        self._slug = slug
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventContent of this EventContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EventContent.

        Mongo id of event

        :return: The id of this EventContent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventContent.

        Mongo id of event

        :param id: The id of this EventContent.
        :type id: str
        """

        self._id = id

    @property
    def content_field(self):
        """Gets the content_field of this EventContent.


        :return: The content_field of this EventContent.
        :rtype: str
        """
        return self._content_field

    @content_field.setter
    def content_field(self, content_field):
        """Sets the content_field of this EventContent.


        :param content_field: The content_field of this EventContent.
        :type content_field: str
        """

        self._content_field = content_field

    @property
    def content_id(self):
        """Gets the content_id of this EventContent.


        :return: The content_id of this EventContent.
        :rtype: str
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """Sets the content_id of this EventContent.


        :param content_id: The content_id of this EventContent.
        :type content_id: str
        """

        self._content_id = content_id

    @property
    def content_type(self):
        """Gets the content_type of this EventContent.


        :return: The content_type of this EventContent.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this EventContent.


        :param content_type: The content_type of this EventContent.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def created_at(self):
        """Gets the created_at of this EventContent.


        :return: The created_at of this EventContent.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EventContent.


        :param created_at: The created_at of this EventContent.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def slug(self):
        """Gets the slug of this EventContent.


        :return: The slug of this EventContent.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this EventContent.


        :param slug: The slug of this EventContent.
        :type slug: str
        """

        self._slug = slug

    @property
    def updated_at(self):
        """Gets the updated_at of this EventContent.


        :return: The updated_at of this EventContent.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EventContent.


        :param updated_at: The updated_at of this EventContent.
        :type updated_at: str
        """

        self._updated_at = updated_at
