# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Newsletter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, click_count: int=None, is_default: bool=None, is_sent: bool=None, total_click_count: int=None, unique_click_count: int=None):
        """Newsletter - a model defined in OpenAPI

        :param id: The id of this Newsletter.
        :param click_count: The click_count of this Newsletter.
        :param is_default: The is_default of this Newsletter.
        :param is_sent: The is_sent of this Newsletter.
        :param total_click_count: The total_click_count of this Newsletter.
        :param unique_click_count: The unique_click_count of this Newsletter.
        """
        self.openapi_types = {
            'id': str,
            'click_count': int,
            'is_default': bool,
            'is_sent': bool,
            'total_click_count': int,
            'unique_click_count': int
        }

        self.attribute_map = {
            'id': '_id',
            'click_count': 'click_count',
            'is_default': 'is_default',
            'is_sent': 'is_sent',
            'total_click_count': 'total_click_count',
            'unique_click_count': 'unique_click_count'
        }

        self._id = id
        self._click_count = click_count
        self._is_default = is_default
        self._is_sent = is_sent
        self._total_click_count = total_click_count
        self._unique_click_count = unique_click_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Newsletter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Newsletter of this Newsletter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Newsletter.


        :return: The id of this Newsletter.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Newsletter.


        :param id: The id of this Newsletter.
        :type id: str
        """

        self._id = id

    @property
    def click_count(self):
        """Gets the click_count of this Newsletter.


        :return: The click_count of this Newsletter.
        :rtype: int
        """
        return self._click_count

    @click_count.setter
    def click_count(self, click_count):
        """Sets the click_count of this Newsletter.


        :param click_count: The click_count of this Newsletter.
        :type click_count: int
        """

        self._click_count = click_count

    @property
    def is_default(self):
        """Gets the is_default of this Newsletter.


        :return: The is_default of this Newsletter.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Newsletter.


        :param is_default: The is_default of this Newsletter.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def is_sent(self):
        """Gets the is_sent of this Newsletter.


        :return: The is_sent of this Newsletter.
        :rtype: bool
        """
        return self._is_sent

    @is_sent.setter
    def is_sent(self, is_sent):
        """Sets the is_sent of this Newsletter.


        :param is_sent: The is_sent of this Newsletter.
        :type is_sent: bool
        """

        self._is_sent = is_sent

    @property
    def total_click_count(self):
        """Gets the total_click_count of this Newsletter.


        :return: The total_click_count of this Newsletter.
        :rtype: int
        """
        return self._total_click_count

    @total_click_count.setter
    def total_click_count(self, total_click_count):
        """Sets the total_click_count of this Newsletter.


        :param total_click_count: The total_click_count of this Newsletter.
        :type total_click_count: int
        """

        self._total_click_count = total_click_count

    @property
    def unique_click_count(self):
        """Gets the unique_click_count of this Newsletter.


        :return: The unique_click_count of this Newsletter.
        :rtype: int
        """
        return self._unique_click_count

    @unique_click_count.setter
    def unique_click_count(self, unique_click_count):
        """Sets the unique_click_count of this Newsletter.


        :param unique_click_count: The unique_click_count of this Newsletter.
        :type unique_click_count: int
        """

        self._unique_click_count = unique_click_count
