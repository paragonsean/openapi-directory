# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, autopublish: bool=None, is_default: bool=None, is_hidden: bool=None, name: str=None, new_weekly_mailer_content: str=None, newsletter_subject: str=None, number_articles_per_group: int=None, number_articles_per_newsletter: int=None):
        """Group - a model defined in OpenAPI

        :param id: The id of this Group.
        :param autopublish: The autopublish of this Group.
        :param is_default: The is_default of this Group.
        :param is_hidden: The is_hidden of this Group.
        :param name: The name of this Group.
        :param new_weekly_mailer_content: The new_weekly_mailer_content of this Group.
        :param newsletter_subject: The newsletter_subject of this Group.
        :param number_articles_per_group: The number_articles_per_group of this Group.
        :param number_articles_per_newsletter: The number_articles_per_newsletter of this Group.
        """
        self.openapi_types = {
            'id': str,
            'autopublish': bool,
            'is_default': bool,
            'is_hidden': bool,
            'name': str,
            'new_weekly_mailer_content': str,
            'newsletter_subject': str,
            'number_articles_per_group': int,
            'number_articles_per_newsletter': int
        }

        self.attribute_map = {
            'id': '_id',
            'autopublish': 'autopublish',
            'is_default': 'is_default',
            'is_hidden': 'is_hidden',
            'name': 'name',
            'new_weekly_mailer_content': 'new_weekly_mailer_content',
            'newsletter_subject': 'newsletter_subject',
            'number_articles_per_group': 'number_articles_per_group',
            'number_articles_per_newsletter': 'number_articles_per_newsletter'
        }

        self._id = id
        self._autopublish = autopublish
        self._is_default = is_default
        self._is_hidden = is_hidden
        self._name = name
        self._new_weekly_mailer_content = new_weekly_mailer_content
        self._newsletter_subject = newsletter_subject
        self._number_articles_per_group = number_articles_per_group
        self._number_articles_per_newsletter = number_articles_per_newsletter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Group.


        :return: The id of this Group.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.


        :param id: The id of this Group.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def autopublish(self):
        """Gets the autopublish of this Group.


        :return: The autopublish of this Group.
        :rtype: bool
        """
        return self._autopublish

    @autopublish.setter
    def autopublish(self, autopublish):
        """Sets the autopublish of this Group.


        :param autopublish: The autopublish of this Group.
        :type autopublish: bool
        """

        self._autopublish = autopublish

    @property
    def is_default(self):
        """Gets the is_default of this Group.


        :return: The is_default of this Group.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Group.


        :param is_default: The is_default of this Group.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def is_hidden(self):
        """Gets the is_hidden of this Group.


        :return: The is_hidden of this Group.
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this Group.


        :param is_hidden: The is_hidden of this Group.
        :type is_hidden: bool
        """

        self._is_hidden = is_hidden

    @property
    def name(self):
        """Gets the name of this Group.


        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.


        :param name: The name of this Group.
        :type name: str
        """

        self._name = name

    @property
    def new_weekly_mailer_content(self):
        """Gets the new_weekly_mailer_content of this Group.


        :return: The new_weekly_mailer_content of this Group.
        :rtype: str
        """
        return self._new_weekly_mailer_content

    @new_weekly_mailer_content.setter
    def new_weekly_mailer_content(self, new_weekly_mailer_content):
        """Sets the new_weekly_mailer_content of this Group.


        :param new_weekly_mailer_content: The new_weekly_mailer_content of this Group.
        :type new_weekly_mailer_content: str
        """

        self._new_weekly_mailer_content = new_weekly_mailer_content

    @property
    def newsletter_subject(self):
        """Gets the newsletter_subject of this Group.


        :return: The newsletter_subject of this Group.
        :rtype: str
        """
        return self._newsletter_subject

    @newsletter_subject.setter
    def newsletter_subject(self, newsletter_subject):
        """Sets the newsletter_subject of this Group.


        :param newsletter_subject: The newsletter_subject of this Group.
        :type newsletter_subject: str
        """

        self._newsletter_subject = newsletter_subject

    @property
    def number_articles_per_group(self):
        """Gets the number_articles_per_group of this Group.


        :return: The number_articles_per_group of this Group.
        :rtype: int
        """
        return self._number_articles_per_group

    @number_articles_per_group.setter
    def number_articles_per_group(self, number_articles_per_group):
        """Sets the number_articles_per_group of this Group.


        :param number_articles_per_group: The number_articles_per_group of this Group.
        :type number_articles_per_group: int
        """

        self._number_articles_per_group = number_articles_per_group

    @property
    def number_articles_per_newsletter(self):
        """Gets the number_articles_per_newsletter of this Group.


        :return: The number_articles_per_newsletter of this Group.
        :rtype: int
        """
        return self._number_articles_per_newsletter

    @number_articles_per_newsletter.setter
    def number_articles_per_newsletter(self, number_articles_per_newsletter):
        """Sets the number_articles_per_newsletter of this Group.


        :param number_articles_per_newsletter: The number_articles_per_newsletter of this Group.
        :type number_articles_per_newsletter: int
        """

        self._number_articles_per_newsletter = number_articles_per_newsletter
