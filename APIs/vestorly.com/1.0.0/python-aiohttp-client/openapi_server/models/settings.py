# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.features import Features
from openapi_server.models.org_setting import OrgSetting
from openapi_server.models.personal_settings import PersonalSettings
from openapi_server import util


class Settings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, adv_brochure: str=None, company: str=None, disclosure: str=None, feature: Features=None, name: str=None, orgsetting: OrgSetting=None, personalsetting: PersonalSettings=None, picture_url: str=None, slug: str=None, website: str=None):
        """Settings - a model defined in OpenAPI

        :param id: The id of this Settings.
        :param adv_brochure: The adv_brochure of this Settings.
        :param company: The company of this Settings.
        :param disclosure: The disclosure of this Settings.
        :param feature: The feature of this Settings.
        :param name: The name of this Settings.
        :param orgsetting: The orgsetting of this Settings.
        :param personalsetting: The personalsetting of this Settings.
        :param picture_url: The picture_url of this Settings.
        :param slug: The slug of this Settings.
        :param website: The website of this Settings.
        """
        self.openapi_types = {
            'id': str,
            'adv_brochure': str,
            'company': str,
            'disclosure': str,
            'feature': Features,
            'name': str,
            'orgsetting': OrgSetting,
            'personalsetting': PersonalSettings,
            'picture_url': str,
            'slug': str,
            'website': str
        }

        self.attribute_map = {
            'id': '_id',
            'adv_brochure': 'adv_brochure',
            'company': 'company',
            'disclosure': 'disclosure',
            'feature': 'feature',
            'name': 'name',
            'orgsetting': 'orgsetting',
            'personalsetting': 'personalsetting',
            'picture_url': 'picture_url',
            'slug': 'slug',
            'website': 'website'
        }

        self._id = id
        self._adv_brochure = adv_brochure
        self._company = company
        self._disclosure = disclosure
        self._feature = feature
        self._name = name
        self._orgsetting = orgsetting
        self._personalsetting = personalsetting
        self._picture_url = picture_url
        self._slug = slug
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Settings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Settings of this Settings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Settings.


        :return: The id of this Settings.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Settings.


        :param id: The id of this Settings.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def adv_brochure(self):
        """Gets the adv_brochure of this Settings.


        :return: The adv_brochure of this Settings.
        :rtype: str
        """
        return self._adv_brochure

    @adv_brochure.setter
    def adv_brochure(self, adv_brochure):
        """Sets the adv_brochure of this Settings.


        :param adv_brochure: The adv_brochure of this Settings.
        :type adv_brochure: str
        """

        self._adv_brochure = adv_brochure

    @property
    def company(self):
        """Gets the company of this Settings.


        :return: The company of this Settings.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Settings.


        :param company: The company of this Settings.
        :type company: str
        """

        self._company = company

    @property
    def disclosure(self):
        """Gets the disclosure of this Settings.


        :return: The disclosure of this Settings.
        :rtype: str
        """
        return self._disclosure

    @disclosure.setter
    def disclosure(self, disclosure):
        """Sets the disclosure of this Settings.


        :param disclosure: The disclosure of this Settings.
        :type disclosure: str
        """

        self._disclosure = disclosure

    @property
    def feature(self):
        """Gets the feature of this Settings.


        :return: The feature of this Settings.
        :rtype: Features
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """Sets the feature of this Settings.


        :param feature: The feature of this Settings.
        :type feature: Features
        """

        self._feature = feature

    @property
    def name(self):
        """Gets the name of this Settings.


        :return: The name of this Settings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Settings.


        :param name: The name of this Settings.
        :type name: str
        """

        self._name = name

    @property
    def orgsetting(self):
        """Gets the orgsetting of this Settings.


        :return: The orgsetting of this Settings.
        :rtype: OrgSetting
        """
        return self._orgsetting

    @orgsetting.setter
    def orgsetting(self, orgsetting):
        """Sets the orgsetting of this Settings.


        :param orgsetting: The orgsetting of this Settings.
        :type orgsetting: OrgSetting
        """

        self._orgsetting = orgsetting

    @property
    def personalsetting(self):
        """Gets the personalsetting of this Settings.


        :return: The personalsetting of this Settings.
        :rtype: PersonalSettings
        """
        return self._personalsetting

    @personalsetting.setter
    def personalsetting(self, personalsetting):
        """Sets the personalsetting of this Settings.


        :param personalsetting: The personalsetting of this Settings.
        :type personalsetting: PersonalSettings
        """

        self._personalsetting = personalsetting

    @property
    def picture_url(self):
        """Gets the picture_url of this Settings.


        :return: The picture_url of this Settings.
        :rtype: str
        """
        return self._picture_url

    @picture_url.setter
    def picture_url(self, picture_url):
        """Sets the picture_url of this Settings.


        :param picture_url: The picture_url of this Settings.
        :type picture_url: str
        """

        self._picture_url = picture_url

    @property
    def slug(self):
        """Gets the slug of this Settings.


        :return: The slug of this Settings.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Settings.


        :param slug: The slug of this Settings.
        :type slug: str
        """

        self._slug = slug

    @property
    def website(self):
        """Gets the website of this Settings.


        :return: The website of this Settings.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Settings.


        :param website: The website of this Settings.
        :type website: str
        """

        self._website = website
