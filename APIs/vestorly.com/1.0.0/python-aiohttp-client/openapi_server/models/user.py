# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, company: str=None, first_name: str=None, last_name: str=None, name: str=None, new_user: bool=None, picture_url: str=None, plan_expired: bool=None, plan_id: str=None, plan_setup: bool=None, plan_status: str=None, plan_stripe: bool=None, show_tour: bool=None, slug: str=None, user_type: str=None, username: str=None, website: str=None):
        """User - a model defined in OpenAPI

        :param id: The id of this User.
        :param company: The company of this User.
        :param first_name: The first_name of this User.
        :param last_name: The last_name of this User.
        :param name: The name of this User.
        :param new_user: The new_user of this User.
        :param picture_url: The picture_url of this User.
        :param plan_expired: The plan_expired of this User.
        :param plan_id: The plan_id of this User.
        :param plan_setup: The plan_setup of this User.
        :param plan_status: The plan_status of this User.
        :param plan_stripe: The plan_stripe of this User.
        :param show_tour: The show_tour of this User.
        :param slug: The slug of this User.
        :param user_type: The user_type of this User.
        :param username: The username of this User.
        :param website: The website of this User.
        """
        self.openapi_types = {
            'id': str,
            'company': str,
            'first_name': str,
            'last_name': str,
            'name': str,
            'new_user': bool,
            'picture_url': str,
            'plan_expired': bool,
            'plan_id': str,
            'plan_setup': bool,
            'plan_status': str,
            'plan_stripe': bool,
            'show_tour': bool,
            'slug': str,
            'user_type': str,
            'username': str,
            'website': str
        }

        self.attribute_map = {
            'id': '_id',
            'company': 'company',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'name': 'name',
            'new_user': 'new_user',
            'picture_url': 'picture_url',
            'plan_expired': 'plan_expired',
            'plan_id': 'plan_id',
            'plan_setup': 'plan_setup',
            'plan_status': 'plan_status',
            'plan_stripe': 'plan_stripe',
            'show_tour': 'show_tour',
            'slug': 'slug',
            'user_type': 'user_type',
            'username': 'username',
            'website': 'website'
        }

        self._id = id
        self._company = company
        self._first_name = first_name
        self._last_name = last_name
        self._name = name
        self._new_user = new_user
        self._picture_url = picture_url
        self._plan_expired = plan_expired
        self._plan_id = plan_id
        self._plan_setup = plan_setup
        self._plan_status = plan_status
        self._plan_stripe = plan_stripe
        self._show_tour = show_tour
        self._slug = slug
        self._user_type = user_type
        self._username = username
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def company(self):
        """Gets the company of this User.


        :return: The company of this User.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this User.


        :param company: The company of this User.
        :type company: str
        """

        self._company = company

    @property
    def first_name(self):
        """Gets the first_name of this User.


        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.


        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def name(self):
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def new_user(self):
        """Gets the new_user of this User.


        :return: The new_user of this User.
        :rtype: bool
        """
        return self._new_user

    @new_user.setter
    def new_user(self, new_user):
        """Sets the new_user of this User.


        :param new_user: The new_user of this User.
        :type new_user: bool
        """

        self._new_user = new_user

    @property
    def picture_url(self):
        """Gets the picture_url of this User.


        :return: The picture_url of this User.
        :rtype: str
        """
        return self._picture_url

    @picture_url.setter
    def picture_url(self, picture_url):
        """Sets the picture_url of this User.


        :param picture_url: The picture_url of this User.
        :type picture_url: str
        """

        self._picture_url = picture_url

    @property
    def plan_expired(self):
        """Gets the plan_expired of this User.


        :return: The plan_expired of this User.
        :rtype: bool
        """
        return self._plan_expired

    @plan_expired.setter
    def plan_expired(self, plan_expired):
        """Sets the plan_expired of this User.


        :param plan_expired: The plan_expired of this User.
        :type plan_expired: bool
        """

        self._plan_expired = plan_expired

    @property
    def plan_id(self):
        """Gets the plan_id of this User.


        :return: The plan_id of this User.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this User.


        :param plan_id: The plan_id of this User.
        :type plan_id: str
        """

        self._plan_id = plan_id

    @property
    def plan_setup(self):
        """Gets the plan_setup of this User.


        :return: The plan_setup of this User.
        :rtype: bool
        """
        return self._plan_setup

    @plan_setup.setter
    def plan_setup(self, plan_setup):
        """Sets the plan_setup of this User.


        :param plan_setup: The plan_setup of this User.
        :type plan_setup: bool
        """

        self._plan_setup = plan_setup

    @property
    def plan_status(self):
        """Gets the plan_status of this User.


        :return: The plan_status of this User.
        :rtype: str
        """
        return self._plan_status

    @plan_status.setter
    def plan_status(self, plan_status):
        """Sets the plan_status of this User.


        :param plan_status: The plan_status of this User.
        :type plan_status: str
        """

        self._plan_status = plan_status

    @property
    def plan_stripe(self):
        """Gets the plan_stripe of this User.


        :return: The plan_stripe of this User.
        :rtype: bool
        """
        return self._plan_stripe

    @plan_stripe.setter
    def plan_stripe(self, plan_stripe):
        """Sets the plan_stripe of this User.


        :param plan_stripe: The plan_stripe of this User.
        :type plan_stripe: bool
        """

        self._plan_stripe = plan_stripe

    @property
    def show_tour(self):
        """Gets the show_tour of this User.


        :return: The show_tour of this User.
        :rtype: bool
        """
        return self._show_tour

    @show_tour.setter
    def show_tour(self, show_tour):
        """Sets the show_tour of this User.


        :param show_tour: The show_tour of this User.
        :type show_tour: bool
        """

        self._show_tour = show_tour

    @property
    def slug(self):
        """Gets the slug of this User.


        :return: The slug of this User.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this User.


        :param slug: The slug of this User.
        :type slug: str
        """

        self._slug = slug

    @property
    def user_type(self):
        """Gets the user_type of this User.


        :return: The user_type of this User.
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this User.


        :param user_type: The user_type of this User.
        :type user_type: str
        """

        self._user_type = user_type

    @property
    def username(self):
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """

        self._username = username

    @property
    def website(self):
        """Gets the website of this User.


        :return: The website of this User.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this User.


        :param website: The website of this User.
        :type website: str
        """

        self._website = website
