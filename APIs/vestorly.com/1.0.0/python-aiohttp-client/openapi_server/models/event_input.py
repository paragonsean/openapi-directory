# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_content import EventContent
from openapi_server import util


class EventInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advisor_id: str=None, created_at: str=None, event_content: EventContent=None, original_url: str=None, originator_email: str=None, originator_id: str=None, parent_event_id: str=None, referer: str=None, subject_email: str=None, subject_id: str=None, type: str=None):
        """EventInput - a model defined in OpenAPI

        :param advisor_id: The advisor_id of this EventInput.
        :param created_at: The created_at of this EventInput.
        :param event_content: The event_content of this EventInput.
        :param original_url: The original_url of this EventInput.
        :param originator_email: The originator_email of this EventInput.
        :param originator_id: The originator_id of this EventInput.
        :param parent_event_id: The parent_event_id of this EventInput.
        :param referer: The referer of this EventInput.
        :param subject_email: The subject_email of this EventInput.
        :param subject_id: The subject_id of this EventInput.
        :param type: The type of this EventInput.
        """
        self.openapi_types = {
            'advisor_id': str,
            'created_at': str,
            'event_content': EventContent,
            'original_url': str,
            'originator_email': str,
            'originator_id': str,
            'parent_event_id': str,
            'referer': str,
            'subject_email': str,
            'subject_id': str,
            'type': str
        }

        self.attribute_map = {
            'advisor_id': 'advisor_id',
            'created_at': 'created_at',
            'event_content': 'event_content',
            'original_url': 'original_url',
            'originator_email': 'originator_email',
            'originator_id': 'originator_id',
            'parent_event_id': 'parent_event_id',
            'referer': 'referer',
            'subject_email': 'subject_email',
            'subject_id': 'subject_id',
            'type': 'type'
        }

        self._advisor_id = advisor_id
        self._created_at = created_at
        self._event_content = event_content
        self._original_url = original_url
        self._originator_email = originator_email
        self._originator_id = originator_id
        self._parent_event_id = parent_event_id
        self._referer = referer
        self._subject_email = subject_email
        self._subject_id = subject_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventInput of this EventInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advisor_id(self):
        """Gets the advisor_id of this EventInput.


        :return: The advisor_id of this EventInput.
        :rtype: str
        """
        return self._advisor_id

    @advisor_id.setter
    def advisor_id(self, advisor_id):
        """Sets the advisor_id of this EventInput.


        :param advisor_id: The advisor_id of this EventInput.
        :type advisor_id: str
        """

        self._advisor_id = advisor_id

    @property
    def created_at(self):
        """Gets the created_at of this EventInput.


        :return: The created_at of this EventInput.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EventInput.


        :param created_at: The created_at of this EventInput.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def event_content(self):
        """Gets the event_content of this EventInput.


        :return: The event_content of this EventInput.
        :rtype: EventContent
        """
        return self._event_content

    @event_content.setter
    def event_content(self, event_content):
        """Sets the event_content of this EventInput.


        :param event_content: The event_content of this EventInput.
        :type event_content: EventContent
        """

        self._event_content = event_content

    @property
    def original_url(self):
        """Gets the original_url of this EventInput.


        :return: The original_url of this EventInput.
        :rtype: str
        """
        return self._original_url

    @original_url.setter
    def original_url(self, original_url):
        """Sets the original_url of this EventInput.


        :param original_url: The original_url of this EventInput.
        :type original_url: str
        """
        if original_url is None:
            raise ValueError("Invalid value for `original_url`, must not be `None`")

        self._original_url = original_url

    @property
    def originator_email(self):
        """Gets the originator_email of this EventInput.


        :return: The originator_email of this EventInput.
        :rtype: str
        """
        return self._originator_email

    @originator_email.setter
    def originator_email(self, originator_email):
        """Sets the originator_email of this EventInput.


        :param originator_email: The originator_email of this EventInput.
        :type originator_email: str
        """

        self._originator_email = originator_email

    @property
    def originator_id(self):
        """Gets the originator_id of this EventInput.


        :return: The originator_id of this EventInput.
        :rtype: str
        """
        return self._originator_id

    @originator_id.setter
    def originator_id(self, originator_id):
        """Sets the originator_id of this EventInput.


        :param originator_id: The originator_id of this EventInput.
        :type originator_id: str
        """

        self._originator_id = originator_id

    @property
    def parent_event_id(self):
        """Gets the parent_event_id of this EventInput.


        :return: The parent_event_id of this EventInput.
        :rtype: str
        """
        return self._parent_event_id

    @parent_event_id.setter
    def parent_event_id(self, parent_event_id):
        """Sets the parent_event_id of this EventInput.


        :param parent_event_id: The parent_event_id of this EventInput.
        :type parent_event_id: str
        """

        self._parent_event_id = parent_event_id

    @property
    def referer(self):
        """Gets the referer of this EventInput.


        :return: The referer of this EventInput.
        :rtype: str
        """
        return self._referer

    @referer.setter
    def referer(self, referer):
        """Sets the referer of this EventInput.


        :param referer: The referer of this EventInput.
        :type referer: str
        """

        self._referer = referer

    @property
    def subject_email(self):
        """Gets the subject_email of this EventInput.


        :return: The subject_email of this EventInput.
        :rtype: str
        """
        return self._subject_email

    @subject_email.setter
    def subject_email(self, subject_email):
        """Sets the subject_email of this EventInput.


        :param subject_email: The subject_email of this EventInput.
        :type subject_email: str
        """
        if subject_email is None:
            raise ValueError("Invalid value for `subject_email`, must not be `None`")

        self._subject_email = subject_email

    @property
    def subject_id(self):
        """Gets the subject_id of this EventInput.


        :return: The subject_id of this EventInput.
        :rtype: str
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this EventInput.


        :param subject_id: The subject_id of this EventInput.
        :type subject_id: str
        """

        self._subject_id = subject_id

    @property
    def type(self):
        """Gets the type of this EventInput.


        :return: The type of this EventInput.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventInput.


        :param type: The type of this EventInput.
        :type type: str
        """
        allowed_values = ["page_view", "sign_up", "sign_in", "content_posted", "create_post", "publish_post", "update_post", "delete_post", "unpublish_post", "invite", "publish_newsletter", "publish_social", "click", "delivered", "open", "dropped", "bounce"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
