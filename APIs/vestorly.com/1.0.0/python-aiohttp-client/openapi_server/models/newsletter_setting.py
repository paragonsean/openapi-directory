# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewsletterSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, banner_color: str=None, body_html: str=None, email_accent_color: str=None, email_day_of_week: int=None, email_hour: int=None, email_status: str=None, facebook_active_wall: str=None, footer_email_font: str=None, footer_html: str=None, footer_image_url: str=None, group_id: str=None, header_background_color: str=None, header_image_url: str=None, intro_text: str=None, linkedin_active_wall: str=None, montage_enabled: bool=None, montage_facebook_image_url: str=None, montage_linkedin_image_url: str=None, montage_title: str=None, montage_twitter_image_url: str=None, newsletter_ids: List[str]=None, newsletter_type: str=None, primary_email_font: str=None, salutation_text: str=None, social_day_of_week: int=None, social_description: str=None, social_posting_text: str=None, social_title: str=None, subject: str=None, title_color: str=None):
        """NewsletterSetting - a model defined in OpenAPI

        :param id: The id of this NewsletterSetting.
        :param banner_color: The banner_color of this NewsletterSetting.
        :param body_html: The body_html of this NewsletterSetting.
        :param email_accent_color: The email_accent_color of this NewsletterSetting.
        :param email_day_of_week: The email_day_of_week of this NewsletterSetting.
        :param email_hour: The email_hour of this NewsletterSetting.
        :param email_status: The email_status of this NewsletterSetting.
        :param facebook_active_wall: The facebook_active_wall of this NewsletterSetting.
        :param footer_email_font: The footer_email_font of this NewsletterSetting.
        :param footer_html: The footer_html of this NewsletterSetting.
        :param footer_image_url: The footer_image_url of this NewsletterSetting.
        :param group_id: The group_id of this NewsletterSetting.
        :param header_background_color: The header_background_color of this NewsletterSetting.
        :param header_image_url: The header_image_url of this NewsletterSetting.
        :param intro_text: The intro_text of this NewsletterSetting.
        :param linkedin_active_wall: The linkedin_active_wall of this NewsletterSetting.
        :param montage_enabled: The montage_enabled of this NewsletterSetting.
        :param montage_facebook_image_url: The montage_facebook_image_url of this NewsletterSetting.
        :param montage_linkedin_image_url: The montage_linkedin_image_url of this NewsletterSetting.
        :param montage_title: The montage_title of this NewsletterSetting.
        :param montage_twitter_image_url: The montage_twitter_image_url of this NewsletterSetting.
        :param newsletter_ids: The newsletter_ids of this NewsletterSetting.
        :param newsletter_type: The newsletter_type of this NewsletterSetting.
        :param primary_email_font: The primary_email_font of this NewsletterSetting.
        :param salutation_text: The salutation_text of this NewsletterSetting.
        :param social_day_of_week: The social_day_of_week of this NewsletterSetting.
        :param social_description: The social_description of this NewsletterSetting.
        :param social_posting_text: The social_posting_text of this NewsletterSetting.
        :param social_title: The social_title of this NewsletterSetting.
        :param subject: The subject of this NewsletterSetting.
        :param title_color: The title_color of this NewsletterSetting.
        """
        self.openapi_types = {
            'id': str,
            'banner_color': str,
            'body_html': str,
            'email_accent_color': str,
            'email_day_of_week': int,
            'email_hour': int,
            'email_status': str,
            'facebook_active_wall': str,
            'footer_email_font': str,
            'footer_html': str,
            'footer_image_url': str,
            'group_id': str,
            'header_background_color': str,
            'header_image_url': str,
            'intro_text': str,
            'linkedin_active_wall': str,
            'montage_enabled': bool,
            'montage_facebook_image_url': str,
            'montage_linkedin_image_url': str,
            'montage_title': str,
            'montage_twitter_image_url': str,
            'newsletter_ids': List[str],
            'newsletter_type': str,
            'primary_email_font': str,
            'salutation_text': str,
            'social_day_of_week': int,
            'social_description': str,
            'social_posting_text': str,
            'social_title': str,
            'subject': str,
            'title_color': str
        }

        self.attribute_map = {
            'id': '_id',
            'banner_color': 'banner_color',
            'body_html': 'body_html',
            'email_accent_color': 'email_accent_color',
            'email_day_of_week': 'email_day_of_week',
            'email_hour': 'email_hour',
            'email_status': 'email_status',
            'facebook_active_wall': 'facebook_active_wall',
            'footer_email_font': 'footer_email_font',
            'footer_html': 'footer_html',
            'footer_image_url': 'footer_image_url',
            'group_id': 'group_id',
            'header_background_color': 'header_background_color',
            'header_image_url': 'header_image_url',
            'intro_text': 'intro_text',
            'linkedin_active_wall': 'linkedin_active_wall',
            'montage_enabled': 'montage_enabled',
            'montage_facebook_image_url': 'montage_facebook_image_url',
            'montage_linkedin_image_url': 'montage_linkedin_image_url',
            'montage_title': 'montage_title',
            'montage_twitter_image_url': 'montage_twitter_image_url',
            'newsletter_ids': 'newsletter_ids',
            'newsletter_type': 'newsletter_type',
            'primary_email_font': 'primary_email_font',
            'salutation_text': 'salutation_text',
            'social_day_of_week': 'social_day_of_week',
            'social_description': 'social_description',
            'social_posting_text': 'social_posting_text',
            'social_title': 'social_title',
            'subject': 'subject',
            'title_color': 'title_color'
        }

        self._id = id
        self._banner_color = banner_color
        self._body_html = body_html
        self._email_accent_color = email_accent_color
        self._email_day_of_week = email_day_of_week
        self._email_hour = email_hour
        self._email_status = email_status
        self._facebook_active_wall = facebook_active_wall
        self._footer_email_font = footer_email_font
        self._footer_html = footer_html
        self._footer_image_url = footer_image_url
        self._group_id = group_id
        self._header_background_color = header_background_color
        self._header_image_url = header_image_url
        self._intro_text = intro_text
        self._linkedin_active_wall = linkedin_active_wall
        self._montage_enabled = montage_enabled
        self._montage_facebook_image_url = montage_facebook_image_url
        self._montage_linkedin_image_url = montage_linkedin_image_url
        self._montage_title = montage_title
        self._montage_twitter_image_url = montage_twitter_image_url
        self._newsletter_ids = newsletter_ids
        self._newsletter_type = newsletter_type
        self._primary_email_font = primary_email_font
        self._salutation_text = salutation_text
        self._social_day_of_week = social_day_of_week
        self._social_description = social_description
        self._social_posting_text = social_posting_text
        self._social_title = social_title
        self._subject = subject
        self._title_color = title_color

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewsletterSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewsletterSetting of this NewsletterSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NewsletterSetting.


        :return: The id of this NewsletterSetting.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NewsletterSetting.


        :param id: The id of this NewsletterSetting.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def banner_color(self):
        """Gets the banner_color of this NewsletterSetting.


        :return: The banner_color of this NewsletterSetting.
        :rtype: str
        """
        return self._banner_color

    @banner_color.setter
    def banner_color(self, banner_color):
        """Sets the banner_color of this NewsletterSetting.


        :param banner_color: The banner_color of this NewsletterSetting.
        :type banner_color: str
        """

        self._banner_color = banner_color

    @property
    def body_html(self):
        """Gets the body_html of this NewsletterSetting.


        :return: The body_html of this NewsletterSetting.
        :rtype: str
        """
        return self._body_html

    @body_html.setter
    def body_html(self, body_html):
        """Sets the body_html of this NewsletterSetting.


        :param body_html: The body_html of this NewsletterSetting.
        :type body_html: str
        """

        self._body_html = body_html

    @property
    def email_accent_color(self):
        """Gets the email_accent_color of this NewsletterSetting.


        :return: The email_accent_color of this NewsletterSetting.
        :rtype: str
        """
        return self._email_accent_color

    @email_accent_color.setter
    def email_accent_color(self, email_accent_color):
        """Sets the email_accent_color of this NewsletterSetting.


        :param email_accent_color: The email_accent_color of this NewsletterSetting.
        :type email_accent_color: str
        """

        self._email_accent_color = email_accent_color

    @property
    def email_day_of_week(self):
        """Gets the email_day_of_week of this NewsletterSetting.


        :return: The email_day_of_week of this NewsletterSetting.
        :rtype: int
        """
        return self._email_day_of_week

    @email_day_of_week.setter
    def email_day_of_week(self, email_day_of_week):
        """Sets the email_day_of_week of this NewsletterSetting.


        :param email_day_of_week: The email_day_of_week of this NewsletterSetting.
        :type email_day_of_week: int
        """

        self._email_day_of_week = email_day_of_week

    @property
    def email_hour(self):
        """Gets the email_hour of this NewsletterSetting.


        :return: The email_hour of this NewsletterSetting.
        :rtype: int
        """
        return self._email_hour

    @email_hour.setter
    def email_hour(self, email_hour):
        """Sets the email_hour of this NewsletterSetting.


        :param email_hour: The email_hour of this NewsletterSetting.
        :type email_hour: int
        """

        self._email_hour = email_hour

    @property
    def email_status(self):
        """Gets the email_status of this NewsletterSetting.


        :return: The email_status of this NewsletterSetting.
        :rtype: str
        """
        return self._email_status

    @email_status.setter
    def email_status(self, email_status):
        """Sets the email_status of this NewsletterSetting.


        :param email_status: The email_status of this NewsletterSetting.
        :type email_status: str
        """

        self._email_status = email_status

    @property
    def facebook_active_wall(self):
        """Gets the facebook_active_wall of this NewsletterSetting.


        :return: The facebook_active_wall of this NewsletterSetting.
        :rtype: str
        """
        return self._facebook_active_wall

    @facebook_active_wall.setter
    def facebook_active_wall(self, facebook_active_wall):
        """Sets the facebook_active_wall of this NewsletterSetting.


        :param facebook_active_wall: The facebook_active_wall of this NewsletterSetting.
        :type facebook_active_wall: str
        """

        self._facebook_active_wall = facebook_active_wall

    @property
    def footer_email_font(self):
        """Gets the footer_email_font of this NewsletterSetting.


        :return: The footer_email_font of this NewsletterSetting.
        :rtype: str
        """
        return self._footer_email_font

    @footer_email_font.setter
    def footer_email_font(self, footer_email_font):
        """Sets the footer_email_font of this NewsletterSetting.


        :param footer_email_font: The footer_email_font of this NewsletterSetting.
        :type footer_email_font: str
        """

        self._footer_email_font = footer_email_font

    @property
    def footer_html(self):
        """Gets the footer_html of this NewsletterSetting.


        :return: The footer_html of this NewsletterSetting.
        :rtype: str
        """
        return self._footer_html

    @footer_html.setter
    def footer_html(self, footer_html):
        """Sets the footer_html of this NewsletterSetting.


        :param footer_html: The footer_html of this NewsletterSetting.
        :type footer_html: str
        """

        self._footer_html = footer_html

    @property
    def footer_image_url(self):
        """Gets the footer_image_url of this NewsletterSetting.


        :return: The footer_image_url of this NewsletterSetting.
        :rtype: str
        """
        return self._footer_image_url

    @footer_image_url.setter
    def footer_image_url(self, footer_image_url):
        """Sets the footer_image_url of this NewsletterSetting.


        :param footer_image_url: The footer_image_url of this NewsletterSetting.
        :type footer_image_url: str
        """

        self._footer_image_url = footer_image_url

    @property
    def group_id(self):
        """Gets the group_id of this NewsletterSetting.


        :return: The group_id of this NewsletterSetting.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this NewsletterSetting.


        :param group_id: The group_id of this NewsletterSetting.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def header_background_color(self):
        """Gets the header_background_color of this NewsletterSetting.


        :return: The header_background_color of this NewsletterSetting.
        :rtype: str
        """
        return self._header_background_color

    @header_background_color.setter
    def header_background_color(self, header_background_color):
        """Sets the header_background_color of this NewsletterSetting.


        :param header_background_color: The header_background_color of this NewsletterSetting.
        :type header_background_color: str
        """

        self._header_background_color = header_background_color

    @property
    def header_image_url(self):
        """Gets the header_image_url of this NewsletterSetting.


        :return: The header_image_url of this NewsletterSetting.
        :rtype: str
        """
        return self._header_image_url

    @header_image_url.setter
    def header_image_url(self, header_image_url):
        """Sets the header_image_url of this NewsletterSetting.


        :param header_image_url: The header_image_url of this NewsletterSetting.
        :type header_image_url: str
        """

        self._header_image_url = header_image_url

    @property
    def intro_text(self):
        """Gets the intro_text of this NewsletterSetting.


        :return: The intro_text of this NewsletterSetting.
        :rtype: str
        """
        return self._intro_text

    @intro_text.setter
    def intro_text(self, intro_text):
        """Sets the intro_text of this NewsletterSetting.


        :param intro_text: The intro_text of this NewsletterSetting.
        :type intro_text: str
        """

        self._intro_text = intro_text

    @property
    def linkedin_active_wall(self):
        """Gets the linkedin_active_wall of this NewsletterSetting.


        :return: The linkedin_active_wall of this NewsletterSetting.
        :rtype: str
        """
        return self._linkedin_active_wall

    @linkedin_active_wall.setter
    def linkedin_active_wall(self, linkedin_active_wall):
        """Sets the linkedin_active_wall of this NewsletterSetting.


        :param linkedin_active_wall: The linkedin_active_wall of this NewsletterSetting.
        :type linkedin_active_wall: str
        """

        self._linkedin_active_wall = linkedin_active_wall

    @property
    def montage_enabled(self):
        """Gets the montage_enabled of this NewsletterSetting.


        :return: The montage_enabled of this NewsletterSetting.
        :rtype: bool
        """
        return self._montage_enabled

    @montage_enabled.setter
    def montage_enabled(self, montage_enabled):
        """Sets the montage_enabled of this NewsletterSetting.


        :param montage_enabled: The montage_enabled of this NewsletterSetting.
        :type montage_enabled: bool
        """

        self._montage_enabled = montage_enabled

    @property
    def montage_facebook_image_url(self):
        """Gets the montage_facebook_image_url of this NewsletterSetting.


        :return: The montage_facebook_image_url of this NewsletterSetting.
        :rtype: str
        """
        return self._montage_facebook_image_url

    @montage_facebook_image_url.setter
    def montage_facebook_image_url(self, montage_facebook_image_url):
        """Sets the montage_facebook_image_url of this NewsletterSetting.


        :param montage_facebook_image_url: The montage_facebook_image_url of this NewsletterSetting.
        :type montage_facebook_image_url: str
        """

        self._montage_facebook_image_url = montage_facebook_image_url

    @property
    def montage_linkedin_image_url(self):
        """Gets the montage_linkedin_image_url of this NewsletterSetting.


        :return: The montage_linkedin_image_url of this NewsletterSetting.
        :rtype: str
        """
        return self._montage_linkedin_image_url

    @montage_linkedin_image_url.setter
    def montage_linkedin_image_url(self, montage_linkedin_image_url):
        """Sets the montage_linkedin_image_url of this NewsletterSetting.


        :param montage_linkedin_image_url: The montage_linkedin_image_url of this NewsletterSetting.
        :type montage_linkedin_image_url: str
        """

        self._montage_linkedin_image_url = montage_linkedin_image_url

    @property
    def montage_title(self):
        """Gets the montage_title of this NewsletterSetting.


        :return: The montage_title of this NewsletterSetting.
        :rtype: str
        """
        return self._montage_title

    @montage_title.setter
    def montage_title(self, montage_title):
        """Sets the montage_title of this NewsletterSetting.


        :param montage_title: The montage_title of this NewsletterSetting.
        :type montage_title: str
        """

        self._montage_title = montage_title

    @property
    def montage_twitter_image_url(self):
        """Gets the montage_twitter_image_url of this NewsletterSetting.


        :return: The montage_twitter_image_url of this NewsletterSetting.
        :rtype: str
        """
        return self._montage_twitter_image_url

    @montage_twitter_image_url.setter
    def montage_twitter_image_url(self, montage_twitter_image_url):
        """Sets the montage_twitter_image_url of this NewsletterSetting.


        :param montage_twitter_image_url: The montage_twitter_image_url of this NewsletterSetting.
        :type montage_twitter_image_url: str
        """

        self._montage_twitter_image_url = montage_twitter_image_url

    @property
    def newsletter_ids(self):
        """Gets the newsletter_ids of this NewsletterSetting.


        :return: The newsletter_ids of this NewsletterSetting.
        :rtype: List[str]
        """
        return self._newsletter_ids

    @newsletter_ids.setter
    def newsletter_ids(self, newsletter_ids):
        """Sets the newsletter_ids of this NewsletterSetting.


        :param newsletter_ids: The newsletter_ids of this NewsletterSetting.
        :type newsletter_ids: List[str]
        """

        self._newsletter_ids = newsletter_ids

    @property
    def newsletter_type(self):
        """Gets the newsletter_type of this NewsletterSetting.


        :return: The newsletter_type of this NewsletterSetting.
        :rtype: str
        """
        return self._newsletter_type

    @newsletter_type.setter
    def newsletter_type(self, newsletter_type):
        """Sets the newsletter_type of this NewsletterSetting.


        :param newsletter_type: The newsletter_type of this NewsletterSetting.
        :type newsletter_type: str
        """

        self._newsletter_type = newsletter_type

    @property
    def primary_email_font(self):
        """Gets the primary_email_font of this NewsletterSetting.


        :return: The primary_email_font of this NewsletterSetting.
        :rtype: str
        """
        return self._primary_email_font

    @primary_email_font.setter
    def primary_email_font(self, primary_email_font):
        """Sets the primary_email_font of this NewsletterSetting.


        :param primary_email_font: The primary_email_font of this NewsletterSetting.
        :type primary_email_font: str
        """

        self._primary_email_font = primary_email_font

    @property
    def salutation_text(self):
        """Gets the salutation_text of this NewsletterSetting.


        :return: The salutation_text of this NewsletterSetting.
        :rtype: str
        """
        return self._salutation_text

    @salutation_text.setter
    def salutation_text(self, salutation_text):
        """Sets the salutation_text of this NewsletterSetting.


        :param salutation_text: The salutation_text of this NewsletterSetting.
        :type salutation_text: str
        """

        self._salutation_text = salutation_text

    @property
    def social_day_of_week(self):
        """Gets the social_day_of_week of this NewsletterSetting.


        :return: The social_day_of_week of this NewsletterSetting.
        :rtype: int
        """
        return self._social_day_of_week

    @social_day_of_week.setter
    def social_day_of_week(self, social_day_of_week):
        """Sets the social_day_of_week of this NewsletterSetting.


        :param social_day_of_week: The social_day_of_week of this NewsletterSetting.
        :type social_day_of_week: int
        """

        self._social_day_of_week = social_day_of_week

    @property
    def social_description(self):
        """Gets the social_description of this NewsletterSetting.


        :return: The social_description of this NewsletterSetting.
        :rtype: str
        """
        return self._social_description

    @social_description.setter
    def social_description(self, social_description):
        """Sets the social_description of this NewsletterSetting.


        :param social_description: The social_description of this NewsletterSetting.
        :type social_description: str
        """

        self._social_description = social_description

    @property
    def social_posting_text(self):
        """Gets the social_posting_text of this NewsletterSetting.


        :return: The social_posting_text of this NewsletterSetting.
        :rtype: str
        """
        return self._social_posting_text

    @social_posting_text.setter
    def social_posting_text(self, social_posting_text):
        """Sets the social_posting_text of this NewsletterSetting.


        :param social_posting_text: The social_posting_text of this NewsletterSetting.
        :type social_posting_text: str
        """

        self._social_posting_text = social_posting_text

    @property
    def social_title(self):
        """Gets the social_title of this NewsletterSetting.


        :return: The social_title of this NewsletterSetting.
        :rtype: str
        """
        return self._social_title

    @social_title.setter
    def social_title(self, social_title):
        """Sets the social_title of this NewsletterSetting.


        :param social_title: The social_title of this NewsletterSetting.
        :type social_title: str
        """

        self._social_title = social_title

    @property
    def subject(self):
        """Gets the subject of this NewsletterSetting.


        :return: The subject of this NewsletterSetting.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this NewsletterSetting.


        :param subject: The subject of this NewsletterSetting.
        :type subject: str
        """

        self._subject = subject

    @property
    def title_color(self):
        """Gets the title_color of this NewsletterSetting.


        :return: The title_color of this NewsletterSetting.
        :rtype: str
        """
        return self._title_color

    @title_color.setter
    def title_color(self, title_color):
        """Sets the title_color of this NewsletterSetting.


        :param title_color: The title_color of this NewsletterSetting.
        :type title_color: str
        """

        self._title_color = title_color
