/*
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Article
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:17.652103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Article {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_EXTERNAL_URL = "external_url";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_URL)
  private String externalUrl;

  public static final String SERIALIZED_NAME_EXTERNAL_URL_SOURCE = "external_url_source";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_URL_SOURCE)
  private String externalUrlSource;

  public static final String SERIALIZED_NAME_EXTERNAL_URL_TYPE = "external_url_type";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_URL_TYPE)
  private String externalUrlType;

  public static final String SERIALIZED_NAME_IMAGE_HEIGHT = "image_height";
  @SerializedName(SERIALIZED_NAME_IMAGE_HEIGHT)
  private Integer imageHeight;

  public static final String SERIALIZED_NAME_IMAGE_PATH = "image_path";
  @SerializedName(SERIALIZED_NAME_IMAGE_PATH)
  private String imagePath;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_IMAGE_WIDTH = "image_width";
  @SerializedName(SERIALIZED_NAME_IMAGE_WIDTH)
  private Integer imageWidth;

  public static final String SERIALIZED_NAME_IS_MOBILE_PROXY_NEEDED = "is_mobile_proxy_needed";
  @SerializedName(SERIALIZED_NAME_IS_MOBILE_PROXY_NEEDED)
  private Boolean isMobileProxyNeeded;

  public static final String SERIALIZED_NAME_IS_PROXY_NEEDED = "is_proxy_needed";
  @SerializedName(SERIALIZED_NAME_IS_PROXY_NEEDED)
  private Boolean isProxyNeeded;

  public static final String SERIALIZED_NAME_IS_RESPONSIVE = "is_responsive";
  @SerializedName(SERIALIZED_NAME_IS_RESPONSIVE)
  private Boolean isResponsive;

  public static final String SERIALIZED_NAME_LOGO_URL = "logo_url";
  @SerializedName(SERIALIZED_NAME_LOGO_URL)
  private String logoUrl;

  public static final String SERIALIZED_NAME_NEEDS_SANITIZE = "needs_sanitize";
  @SerializedName(SERIALIZED_NAME_NEEDS_SANITIZE)
  private Boolean needsSanitize;

  public static final String SERIALIZED_NAME_PROXY_URL = "proxy_url";
  @SerializedName(SERIALIZED_NAME_PROXY_URL)
  private String proxyUrl;

  public static final String SERIALIZED_NAME_REDIRECTOR_LINK = "redirector_link";
  @SerializedName(SERIALIZED_NAME_REDIRECTOR_LINK)
  private String redirectorLink;

  public static final String SERIALIZED_NAME_SQUARE_LOGO_URL = "square_logo_url";
  @SerializedName(SERIALIZED_NAME_SQUARE_LOGO_URL)
  private String squareLogoUrl;

  public static final String SERIALIZED_NAME_SUITABILITY_SCORE = "suitability_score";
  @SerializedName(SERIALIZED_NAME_SUITABILITY_SCORE)
  private String suitabilityScore;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Article() {
  }

  public Article id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Article body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public Article createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Article externalUrl(String externalUrl) {
    this.externalUrl = externalUrl;
    return this;
  }

  /**
   * Get externalUrl
   * @return externalUrl
   */
  @javax.annotation.Nullable
  public String getExternalUrl() {
    return externalUrl;
  }

  public void setExternalUrl(String externalUrl) {
    this.externalUrl = externalUrl;
  }


  public Article externalUrlSource(String externalUrlSource) {
    this.externalUrlSource = externalUrlSource;
    return this;
  }

  /**
   * Get externalUrlSource
   * @return externalUrlSource
   */
  @javax.annotation.Nullable
  public String getExternalUrlSource() {
    return externalUrlSource;
  }

  public void setExternalUrlSource(String externalUrlSource) {
    this.externalUrlSource = externalUrlSource;
  }


  public Article externalUrlType(String externalUrlType) {
    this.externalUrlType = externalUrlType;
    return this;
  }

  /**
   * Get externalUrlType
   * @return externalUrlType
   */
  @javax.annotation.Nullable
  public String getExternalUrlType() {
    return externalUrlType;
  }

  public void setExternalUrlType(String externalUrlType) {
    this.externalUrlType = externalUrlType;
  }


  public Article imageHeight(Integer imageHeight) {
    this.imageHeight = imageHeight;
    return this;
  }

  /**
   * Get imageHeight
   * @return imageHeight
   */
  @javax.annotation.Nullable
  public Integer getImageHeight() {
    return imageHeight;
  }

  public void setImageHeight(Integer imageHeight) {
    this.imageHeight = imageHeight;
  }


  public Article imagePath(String imagePath) {
    this.imagePath = imagePath;
    return this;
  }

  /**
   * Get imagePath
   * @return imagePath
   */
  @javax.annotation.Nullable
  public String getImagePath() {
    return imagePath;
  }

  public void setImagePath(String imagePath) {
    this.imagePath = imagePath;
  }


  public Article imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public Article imageWidth(Integer imageWidth) {
    this.imageWidth = imageWidth;
    return this;
  }

  /**
   * Get imageWidth
   * @return imageWidth
   */
  @javax.annotation.Nullable
  public Integer getImageWidth() {
    return imageWidth;
  }

  public void setImageWidth(Integer imageWidth) {
    this.imageWidth = imageWidth;
  }


  public Article isMobileProxyNeeded(Boolean isMobileProxyNeeded) {
    this.isMobileProxyNeeded = isMobileProxyNeeded;
    return this;
  }

  /**
   * Get isMobileProxyNeeded
   * @return isMobileProxyNeeded
   */
  @javax.annotation.Nullable
  public Boolean getIsMobileProxyNeeded() {
    return isMobileProxyNeeded;
  }

  public void setIsMobileProxyNeeded(Boolean isMobileProxyNeeded) {
    this.isMobileProxyNeeded = isMobileProxyNeeded;
  }


  public Article isProxyNeeded(Boolean isProxyNeeded) {
    this.isProxyNeeded = isProxyNeeded;
    return this;
  }

  /**
   * Get isProxyNeeded
   * @return isProxyNeeded
   */
  @javax.annotation.Nullable
  public Boolean getIsProxyNeeded() {
    return isProxyNeeded;
  }

  public void setIsProxyNeeded(Boolean isProxyNeeded) {
    this.isProxyNeeded = isProxyNeeded;
  }


  public Article isResponsive(Boolean isResponsive) {
    this.isResponsive = isResponsive;
    return this;
  }

  /**
   * Get isResponsive
   * @return isResponsive
   */
  @javax.annotation.Nullable
  public Boolean getIsResponsive() {
    return isResponsive;
  }

  public void setIsResponsive(Boolean isResponsive) {
    this.isResponsive = isResponsive;
  }


  public Article logoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

  /**
   * Get logoUrl
   * @return logoUrl
   */
  @javax.annotation.Nullable
  public String getLogoUrl() {
    return logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }


  public Article needsSanitize(Boolean needsSanitize) {
    this.needsSanitize = needsSanitize;
    return this;
  }

  /**
   * Get needsSanitize
   * @return needsSanitize
   */
  @javax.annotation.Nullable
  public Boolean getNeedsSanitize() {
    return needsSanitize;
  }

  public void setNeedsSanitize(Boolean needsSanitize) {
    this.needsSanitize = needsSanitize;
  }


  public Article proxyUrl(String proxyUrl) {
    this.proxyUrl = proxyUrl;
    return this;
  }

  /**
   * Get proxyUrl
   * @return proxyUrl
   */
  @javax.annotation.Nullable
  public String getProxyUrl() {
    return proxyUrl;
  }

  public void setProxyUrl(String proxyUrl) {
    this.proxyUrl = proxyUrl;
  }


  public Article redirectorLink(String redirectorLink) {
    this.redirectorLink = redirectorLink;
    return this;
  }

  /**
   * Get redirectorLink
   * @return redirectorLink
   */
  @javax.annotation.Nullable
  public String getRedirectorLink() {
    return redirectorLink;
  }

  public void setRedirectorLink(String redirectorLink) {
    this.redirectorLink = redirectorLink;
  }


  public Article squareLogoUrl(String squareLogoUrl) {
    this.squareLogoUrl = squareLogoUrl;
    return this;
  }

  /**
   * Get squareLogoUrl
   * @return squareLogoUrl
   */
  @javax.annotation.Nullable
  public String getSquareLogoUrl() {
    return squareLogoUrl;
  }

  public void setSquareLogoUrl(String squareLogoUrl) {
    this.squareLogoUrl = squareLogoUrl;
  }


  public Article suitabilityScore(String suitabilityScore) {
    this.suitabilityScore = suitabilityScore;
    return this;
  }

  /**
   * Get suitabilityScore
   * @return suitabilityScore
   */
  @javax.annotation.Nullable
  public String getSuitabilityScore() {
    return suitabilityScore;
  }

  public void setSuitabilityScore(String suitabilityScore) {
    this.suitabilityScore = suitabilityScore;
  }


  public Article summary(String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Get summary
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  public Article title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Article topic(String topic) {
    this.topic = topic;
    return this;
  }

  /**
   * Get topic
   * @return topic
   */
  @javax.annotation.Nullable
  public String getTopic() {
    return topic;
  }

  public void setTopic(String topic) {
    this.topic = topic;
  }


  public Article url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Article article = (Article) o;
    return Objects.equals(this.id, article.id) &&
        Objects.equals(this.body, article.body) &&
        Objects.equals(this.createdAt, article.createdAt) &&
        Objects.equals(this.externalUrl, article.externalUrl) &&
        Objects.equals(this.externalUrlSource, article.externalUrlSource) &&
        Objects.equals(this.externalUrlType, article.externalUrlType) &&
        Objects.equals(this.imageHeight, article.imageHeight) &&
        Objects.equals(this.imagePath, article.imagePath) &&
        Objects.equals(this.imageUrl, article.imageUrl) &&
        Objects.equals(this.imageWidth, article.imageWidth) &&
        Objects.equals(this.isMobileProxyNeeded, article.isMobileProxyNeeded) &&
        Objects.equals(this.isProxyNeeded, article.isProxyNeeded) &&
        Objects.equals(this.isResponsive, article.isResponsive) &&
        Objects.equals(this.logoUrl, article.logoUrl) &&
        Objects.equals(this.needsSanitize, article.needsSanitize) &&
        Objects.equals(this.proxyUrl, article.proxyUrl) &&
        Objects.equals(this.redirectorLink, article.redirectorLink) &&
        Objects.equals(this.squareLogoUrl, article.squareLogoUrl) &&
        Objects.equals(this.suitabilityScore, article.suitabilityScore) &&
        Objects.equals(this.summary, article.summary) &&
        Objects.equals(this.title, article.title) &&
        Objects.equals(this.topic, article.topic) &&
        Objects.equals(this.url, article.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, body, createdAt, externalUrl, externalUrlSource, externalUrlType, imageHeight, imagePath, imageUrl, imageWidth, isMobileProxyNeeded, isProxyNeeded, isResponsive, logoUrl, needsSanitize, proxyUrl, redirectorLink, squareLogoUrl, suitabilityScore, summary, title, topic, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Article {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    externalUrl: ").append(toIndentedString(externalUrl)).append("\n");
    sb.append("    externalUrlSource: ").append(toIndentedString(externalUrlSource)).append("\n");
    sb.append("    externalUrlType: ").append(toIndentedString(externalUrlType)).append("\n");
    sb.append("    imageHeight: ").append(toIndentedString(imageHeight)).append("\n");
    sb.append("    imagePath: ").append(toIndentedString(imagePath)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    imageWidth: ").append(toIndentedString(imageWidth)).append("\n");
    sb.append("    isMobileProxyNeeded: ").append(toIndentedString(isMobileProxyNeeded)).append("\n");
    sb.append("    isProxyNeeded: ").append(toIndentedString(isProxyNeeded)).append("\n");
    sb.append("    isResponsive: ").append(toIndentedString(isResponsive)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    needsSanitize: ").append(toIndentedString(needsSanitize)).append("\n");
    sb.append("    proxyUrl: ").append(toIndentedString(proxyUrl)).append("\n");
    sb.append("    redirectorLink: ").append(toIndentedString(redirectorLink)).append("\n");
    sb.append("    squareLogoUrl: ").append(toIndentedString(squareLogoUrl)).append("\n");
    sb.append("    suitabilityScore: ").append(toIndentedString(suitabilityScore)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("body");
    openapiFields.add("created_at");
    openapiFields.add("external_url");
    openapiFields.add("external_url_source");
    openapiFields.add("external_url_type");
    openapiFields.add("image_height");
    openapiFields.add("image_path");
    openapiFields.add("image_url");
    openapiFields.add("image_width");
    openapiFields.add("is_mobile_proxy_needed");
    openapiFields.add("is_proxy_needed");
    openapiFields.add("is_responsive");
    openapiFields.add("logo_url");
    openapiFields.add("needs_sanitize");
    openapiFields.add("proxy_url");
    openapiFields.add("redirector_link");
    openapiFields.add("square_logo_url");
    openapiFields.add("suitability_score");
    openapiFields.add("summary");
    openapiFields.add("title");
    openapiFields.add("topic");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_id");
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Article
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Article.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Article is not found in the empty JSON string", Article.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Article.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Article` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Article.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("external_url") != null && !jsonObj.get("external_url").isJsonNull()) && !jsonObj.get("external_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_url").toString()));
      }
      if ((jsonObj.get("external_url_source") != null && !jsonObj.get("external_url_source").isJsonNull()) && !jsonObj.get("external_url_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_url_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_url_source").toString()));
      }
      if ((jsonObj.get("external_url_type") != null && !jsonObj.get("external_url_type").isJsonNull()) && !jsonObj.get("external_url_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_url_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_url_type").toString()));
      }
      if ((jsonObj.get("image_path") != null && !jsonObj.get("image_path").isJsonNull()) && !jsonObj.get("image_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_path").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if ((jsonObj.get("logo_url") != null && !jsonObj.get("logo_url").isJsonNull()) && !jsonObj.get("logo_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo_url").toString()));
      }
      if ((jsonObj.get("proxy_url") != null && !jsonObj.get("proxy_url").isJsonNull()) && !jsonObj.get("proxy_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxy_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxy_url").toString()));
      }
      if ((jsonObj.get("redirector_link") != null && !jsonObj.get("redirector_link").isJsonNull()) && !jsonObj.get("redirector_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirector_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirector_link").toString()));
      }
      if ((jsonObj.get("square_logo_url") != null && !jsonObj.get("square_logo_url").isJsonNull()) && !jsonObj.get("square_logo_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `square_logo_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("square_logo_url").toString()));
      }
      if ((jsonObj.get("suitability_score") != null && !jsonObj.get("suitability_score").isJsonNull()) && !jsonObj.get("suitability_score").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suitability_score` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suitability_score").toString()));
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Article.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Article' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Article> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Article.class));

       return (TypeAdapter<T>) new TypeAdapter<Article>() {
           @Override
           public void write(JsonWriter out, Article value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Article read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Article given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Article
   * @throws IOException if the JSON string is invalid with respect to Article
   */
  public static Article fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Article.class);
  }

  /**
   * Convert an instance of Article to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

