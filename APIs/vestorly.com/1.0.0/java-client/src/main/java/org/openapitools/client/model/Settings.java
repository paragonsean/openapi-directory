/*
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Features;
import org.openapitools.client.model.OrgSetting;
import org.openapitools.client.model.PersonalSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:17.652103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Settings {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ADV_BROCHURE = "adv_brochure";
  @SerializedName(SERIALIZED_NAME_ADV_BROCHURE)
  private String advBrochure;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_DISCLOSURE = "disclosure";
  @SerializedName(SERIALIZED_NAME_DISCLOSURE)
  private String disclosure;

  public static final String SERIALIZED_NAME_FEATURE = "feature";
  @SerializedName(SERIALIZED_NAME_FEATURE)
  private Features feature;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGSETTING = "orgsetting";
  @SerializedName(SERIALIZED_NAME_ORGSETTING)
  private OrgSetting orgsetting;

  public static final String SERIALIZED_NAME_PERSONALSETTING = "personalsetting";
  @SerializedName(SERIALIZED_NAME_PERSONALSETTING)
  private PersonalSettings personalsetting;

  public static final String SERIALIZED_NAME_PICTURE_URL = "picture_url";
  @SerializedName(SERIALIZED_NAME_PICTURE_URL)
  private String pictureUrl;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public Settings() {
  }

  public Settings id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Settings advBrochure(String advBrochure) {
    this.advBrochure = advBrochure;
    return this;
  }

  /**
   * Get advBrochure
   * @return advBrochure
   */
  @javax.annotation.Nullable
  public String getAdvBrochure() {
    return advBrochure;
  }

  public void setAdvBrochure(String advBrochure) {
    this.advBrochure = advBrochure;
  }


  public Settings company(String company) {
    this.company = company;
    return this;
  }

  /**
   * Get company
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  public Settings disclosure(String disclosure) {
    this.disclosure = disclosure;
    return this;
  }

  /**
   * Get disclosure
   * @return disclosure
   */
  @javax.annotation.Nullable
  public String getDisclosure() {
    return disclosure;
  }

  public void setDisclosure(String disclosure) {
    this.disclosure = disclosure;
  }


  public Settings feature(Features feature) {
    this.feature = feature;
    return this;
  }

  /**
   * Get feature
   * @return feature
   */
  @javax.annotation.Nullable
  public Features getFeature() {
    return feature;
  }

  public void setFeature(Features feature) {
    this.feature = feature;
  }


  public Settings name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Settings orgsetting(OrgSetting orgsetting) {
    this.orgsetting = orgsetting;
    return this;
  }

  /**
   * Get orgsetting
   * @return orgsetting
   */
  @javax.annotation.Nullable
  public OrgSetting getOrgsetting() {
    return orgsetting;
  }

  public void setOrgsetting(OrgSetting orgsetting) {
    this.orgsetting = orgsetting;
  }


  public Settings personalsetting(PersonalSettings personalsetting) {
    this.personalsetting = personalsetting;
    return this;
  }

  /**
   * Get personalsetting
   * @return personalsetting
   */
  @javax.annotation.Nullable
  public PersonalSettings getPersonalsetting() {
    return personalsetting;
  }

  public void setPersonalsetting(PersonalSettings personalsetting) {
    this.personalsetting = personalsetting;
  }


  public Settings pictureUrl(String pictureUrl) {
    this.pictureUrl = pictureUrl;
    return this;
  }

  /**
   * Get pictureUrl
   * @return pictureUrl
   */
  @javax.annotation.Nullable
  public String getPictureUrl() {
    return pictureUrl;
  }

  public void setPictureUrl(String pictureUrl) {
    this.pictureUrl = pictureUrl;
  }


  public Settings slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public Settings website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Settings settings = (Settings) o;
    return Objects.equals(this.id, settings.id) &&
        Objects.equals(this.advBrochure, settings.advBrochure) &&
        Objects.equals(this.company, settings.company) &&
        Objects.equals(this.disclosure, settings.disclosure) &&
        Objects.equals(this.feature, settings.feature) &&
        Objects.equals(this.name, settings.name) &&
        Objects.equals(this.orgsetting, settings.orgsetting) &&
        Objects.equals(this.personalsetting, settings.personalsetting) &&
        Objects.equals(this.pictureUrl, settings.pictureUrl) &&
        Objects.equals(this.slug, settings.slug) &&
        Objects.equals(this.website, settings.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, advBrochure, company, disclosure, feature, name, orgsetting, personalsetting, pictureUrl, slug, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Settings {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    advBrochure: ").append(toIndentedString(advBrochure)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    disclosure: ").append(toIndentedString(disclosure)).append("\n");
    sb.append("    feature: ").append(toIndentedString(feature)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orgsetting: ").append(toIndentedString(orgsetting)).append("\n");
    sb.append("    personalsetting: ").append(toIndentedString(personalsetting)).append("\n");
    sb.append("    pictureUrl: ").append(toIndentedString(pictureUrl)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("adv_brochure");
    openapiFields.add("company");
    openapiFields.add("disclosure");
    openapiFields.add("feature");
    openapiFields.add("name");
    openapiFields.add("orgsetting");
    openapiFields.add("personalsetting");
    openapiFields.add("picture_url");
    openapiFields.add("slug");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Settings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Settings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Settings is not found in the empty JSON string", Settings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Settings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Settings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Settings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if ((jsonObj.get("adv_brochure") != null && !jsonObj.get("adv_brochure").isJsonNull()) && !jsonObj.get("adv_brochure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adv_brochure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adv_brochure").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("disclosure") != null && !jsonObj.get("disclosure").isJsonNull()) && !jsonObj.get("disclosure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disclosure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disclosure").toString()));
      }
      // validate the optional field `feature`
      if (jsonObj.get("feature") != null && !jsonObj.get("feature").isJsonNull()) {
        Features.validateJsonElement(jsonObj.get("feature"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `orgsetting`
      if (jsonObj.get("orgsetting") != null && !jsonObj.get("orgsetting").isJsonNull()) {
        OrgSetting.validateJsonElement(jsonObj.get("orgsetting"));
      }
      // validate the optional field `personalsetting`
      if (jsonObj.get("personalsetting") != null && !jsonObj.get("personalsetting").isJsonNull()) {
        PersonalSettings.validateJsonElement(jsonObj.get("personalsetting"));
      }
      if ((jsonObj.get("picture_url") != null && !jsonObj.get("picture_url").isJsonNull()) && !jsonObj.get("picture_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `picture_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("picture_url").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Settings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Settings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Settings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Settings.class));

       return (TypeAdapter<T>) new TypeAdapter<Settings>() {
           @Override
           public void write(JsonWriter out, Settings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Settings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Settings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Settings
   * @throws IOException if the JSON string is invalid with respect to Settings
   */
  public static Settings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Settings.class);
  }

  /**
   * Convert an instance of Settings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

