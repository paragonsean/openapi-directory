/*
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MemberEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:17.652103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MemberEvent {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CONTENT_URL = "content_url";
  @SerializedName(SERIALIZED_NAME_CONTENT_URL)
  private String contentUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_EVENT_DATE = "event_date";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private String eventDate;

  public static final String SERIALIZED_NAME_EVENT_SOURCE = "event_source";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE)
  private String eventSource;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_MEMBER_ID = "member_id";
  @SerializedName(SERIALIZED_NAME_MEMBER_ID)
  private String memberId;

  public static final String SERIALIZED_NAME_ORIGINAL_URL = "original_url";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_URL)
  private String originalUrl;

  public static final String SERIALIZED_NAME_ORIGINATOR_EMAIL = "originator_email";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_EMAIL)
  private String originatorEmail;

  public static final String SERIALIZED_NAME_ORIGINATOR_GROUP_ID = "originator_group_id";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_GROUP_ID)
  private String originatorGroupId;

  public static final String SERIALIZED_NAME_ORIGINATOR_ID = "originator_id";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_ID)
  private String originatorId;

  public static final String SERIALIZED_NAME_ORIGINATOR_NAME = "originator_name";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_NAME)
  private String originatorName;

  public static final String SERIALIZED_NAME_ORIGINATOR_TYPE = "originator_type";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_TYPE)
  private String originatorType;

  public static final String SERIALIZED_NAME_PARENT_EVENT_ID = "parent_event_id";
  @SerializedName(SERIALIZED_NAME_PARENT_EVENT_ID)
  private String parentEventId;

  public static final String SERIALIZED_NAME_PARENT_ORIGINATOR_ID = "parent_originator_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ORIGINATOR_ID)
  private String parentOriginatorId;

  public static final String SERIALIZED_NAME_REFERER = "referer";
  @SerializedName(SERIALIZED_NAME_REFERER)
  private String referer;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SUBJECT_ID = "subject_id";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ID)
  private String subjectId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public MemberEvent() {
  }

  public MemberEvent id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MemberEvent contentUrl(String contentUrl) {
    this.contentUrl = contentUrl;
    return this;
  }

  /**
   * Get contentUrl
   * @return contentUrl
   */
  @javax.annotation.Nullable
  public String getContentUrl() {
    return contentUrl;
  }

  public void setContentUrl(String contentUrl) {
    this.contentUrl = contentUrl;
  }


  public MemberEvent createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public MemberEvent eventDate(String eventDate) {
    this.eventDate = eventDate;
    return this;
  }

  /**
   * Get eventDate
   * @return eventDate
   */
  @javax.annotation.Nullable
  public String getEventDate() {
    return eventDate;
  }

  public void setEventDate(String eventDate) {
    this.eventDate = eventDate;
  }


  public MemberEvent eventSource(String eventSource) {
    this.eventSource = eventSource;
    return this;
  }

  /**
   * Get eventSource
   * @return eventSource
   */
  @javax.annotation.Nullable
  public String getEventSource() {
    return eventSource;
  }

  public void setEventSource(String eventSource) {
    this.eventSource = eventSource;
  }


  public MemberEvent eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public MemberEvent memberId(String memberId) {
    this.memberId = memberId;
    return this;
  }

  /**
   * Get memberId
   * @return memberId
   */
  @javax.annotation.Nullable
  public String getMemberId() {
    return memberId;
  }

  public void setMemberId(String memberId) {
    this.memberId = memberId;
  }


  public MemberEvent originalUrl(String originalUrl) {
    this.originalUrl = originalUrl;
    return this;
  }

  /**
   * Get originalUrl
   * @return originalUrl
   */
  @javax.annotation.Nullable
  public String getOriginalUrl() {
    return originalUrl;
  }

  public void setOriginalUrl(String originalUrl) {
    this.originalUrl = originalUrl;
  }


  public MemberEvent originatorEmail(String originatorEmail) {
    this.originatorEmail = originatorEmail;
    return this;
  }

  /**
   * Get originatorEmail
   * @return originatorEmail
   */
  @javax.annotation.Nullable
  public String getOriginatorEmail() {
    return originatorEmail;
  }

  public void setOriginatorEmail(String originatorEmail) {
    this.originatorEmail = originatorEmail;
  }


  public MemberEvent originatorGroupId(String originatorGroupId) {
    this.originatorGroupId = originatorGroupId;
    return this;
  }

  /**
   * Get originatorGroupId
   * @return originatorGroupId
   */
  @javax.annotation.Nullable
  public String getOriginatorGroupId() {
    return originatorGroupId;
  }

  public void setOriginatorGroupId(String originatorGroupId) {
    this.originatorGroupId = originatorGroupId;
  }


  public MemberEvent originatorId(String originatorId) {
    this.originatorId = originatorId;
    return this;
  }

  /**
   * Get originatorId
   * @return originatorId
   */
  @javax.annotation.Nullable
  public String getOriginatorId() {
    return originatorId;
  }

  public void setOriginatorId(String originatorId) {
    this.originatorId = originatorId;
  }


  public MemberEvent originatorName(String originatorName) {
    this.originatorName = originatorName;
    return this;
  }

  /**
   * Get originatorName
   * @return originatorName
   */
  @javax.annotation.Nullable
  public String getOriginatorName() {
    return originatorName;
  }

  public void setOriginatorName(String originatorName) {
    this.originatorName = originatorName;
  }


  public MemberEvent originatorType(String originatorType) {
    this.originatorType = originatorType;
    return this;
  }

  /**
   * Get originatorType
   * @return originatorType
   */
  @javax.annotation.Nullable
  public String getOriginatorType() {
    return originatorType;
  }

  public void setOriginatorType(String originatorType) {
    this.originatorType = originatorType;
  }


  public MemberEvent parentEventId(String parentEventId) {
    this.parentEventId = parentEventId;
    return this;
  }

  /**
   * Get parentEventId
   * @return parentEventId
   */
  @javax.annotation.Nullable
  public String getParentEventId() {
    return parentEventId;
  }

  public void setParentEventId(String parentEventId) {
    this.parentEventId = parentEventId;
  }


  public MemberEvent parentOriginatorId(String parentOriginatorId) {
    this.parentOriginatorId = parentOriginatorId;
    return this;
  }

  /**
   * Get parentOriginatorId
   * @return parentOriginatorId
   */
  @javax.annotation.Nullable
  public String getParentOriginatorId() {
    return parentOriginatorId;
  }

  public void setParentOriginatorId(String parentOriginatorId) {
    this.parentOriginatorId = parentOriginatorId;
  }


  public MemberEvent referer(String referer) {
    this.referer = referer;
    return this;
  }

  /**
   * Get referer
   * @return referer
   */
  @javax.annotation.Nullable
  public String getReferer() {
    return referer;
  }

  public void setReferer(String referer) {
    this.referer = referer;
  }


  public MemberEvent source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public MemberEvent subjectId(String subjectId) {
    this.subjectId = subjectId;
    return this;
  }

  /**
   * Get subjectId
   * @return subjectId
   */
  @javax.annotation.Nullable
  public String getSubjectId() {
    return subjectId;
  }

  public void setSubjectId(String subjectId) {
    this.subjectId = subjectId;
  }


  public MemberEvent type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public MemberEvent username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MemberEvent memberEvent = (MemberEvent) o;
    return Objects.equals(this.id, memberEvent.id) &&
        Objects.equals(this.contentUrl, memberEvent.contentUrl) &&
        Objects.equals(this.createdAt, memberEvent.createdAt) &&
        Objects.equals(this.eventDate, memberEvent.eventDate) &&
        Objects.equals(this.eventSource, memberEvent.eventSource) &&
        Objects.equals(this.eventType, memberEvent.eventType) &&
        Objects.equals(this.memberId, memberEvent.memberId) &&
        Objects.equals(this.originalUrl, memberEvent.originalUrl) &&
        Objects.equals(this.originatorEmail, memberEvent.originatorEmail) &&
        Objects.equals(this.originatorGroupId, memberEvent.originatorGroupId) &&
        Objects.equals(this.originatorId, memberEvent.originatorId) &&
        Objects.equals(this.originatorName, memberEvent.originatorName) &&
        Objects.equals(this.originatorType, memberEvent.originatorType) &&
        Objects.equals(this.parentEventId, memberEvent.parentEventId) &&
        Objects.equals(this.parentOriginatorId, memberEvent.parentOriginatorId) &&
        Objects.equals(this.referer, memberEvent.referer) &&
        Objects.equals(this.source, memberEvent.source) &&
        Objects.equals(this.subjectId, memberEvent.subjectId) &&
        Objects.equals(this.type, memberEvent.type) &&
        Objects.equals(this.username, memberEvent.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, contentUrl, createdAt, eventDate, eventSource, eventType, memberId, originalUrl, originatorEmail, originatorGroupId, originatorId, originatorName, originatorType, parentEventId, parentOriginatorId, referer, source, subjectId, type, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MemberEvent {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    contentUrl: ").append(toIndentedString(contentUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    eventSource: ").append(toIndentedString(eventSource)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    memberId: ").append(toIndentedString(memberId)).append("\n");
    sb.append("    originalUrl: ").append(toIndentedString(originalUrl)).append("\n");
    sb.append("    originatorEmail: ").append(toIndentedString(originatorEmail)).append("\n");
    sb.append("    originatorGroupId: ").append(toIndentedString(originatorGroupId)).append("\n");
    sb.append("    originatorId: ").append(toIndentedString(originatorId)).append("\n");
    sb.append("    originatorName: ").append(toIndentedString(originatorName)).append("\n");
    sb.append("    originatorType: ").append(toIndentedString(originatorType)).append("\n");
    sb.append("    parentEventId: ").append(toIndentedString(parentEventId)).append("\n");
    sb.append("    parentOriginatorId: ").append(toIndentedString(parentOriginatorId)).append("\n");
    sb.append("    referer: ").append(toIndentedString(referer)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    subjectId: ").append(toIndentedString(subjectId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("content_url");
    openapiFields.add("created_at");
    openapiFields.add("event_date");
    openapiFields.add("event_source");
    openapiFields.add("event_type");
    openapiFields.add("member_id");
    openapiFields.add("original_url");
    openapiFields.add("originator_email");
    openapiFields.add("originator_group_id");
    openapiFields.add("originator_id");
    openapiFields.add("originator_name");
    openapiFields.add("originator_type");
    openapiFields.add("parent_event_id");
    openapiFields.add("parent_originator_id");
    openapiFields.add("referer");
    openapiFields.add("source");
    openapiFields.add("subject_id");
    openapiFields.add("type");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MemberEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MemberEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MemberEvent is not found in the empty JSON string", MemberEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MemberEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MemberEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if ((jsonObj.get("content_url") != null && !jsonObj.get("content_url").isJsonNull()) && !jsonObj.get("content_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_url").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("event_date") != null && !jsonObj.get("event_date").isJsonNull()) && !jsonObj.get("event_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_date").toString()));
      }
      if ((jsonObj.get("event_source") != null && !jsonObj.get("event_source").isJsonNull()) && !jsonObj.get("event_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_source").toString()));
      }
      if ((jsonObj.get("event_type") != null && !jsonObj.get("event_type").isJsonNull()) && !jsonObj.get("event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type").toString()));
      }
      if ((jsonObj.get("member_id") != null && !jsonObj.get("member_id").isJsonNull()) && !jsonObj.get("member_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `member_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("member_id").toString()));
      }
      if ((jsonObj.get("original_url") != null && !jsonObj.get("original_url").isJsonNull()) && !jsonObj.get("original_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_url").toString()));
      }
      if ((jsonObj.get("originator_email") != null && !jsonObj.get("originator_email").isJsonNull()) && !jsonObj.get("originator_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator_email").toString()));
      }
      if ((jsonObj.get("originator_group_id") != null && !jsonObj.get("originator_group_id").isJsonNull()) && !jsonObj.get("originator_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator_group_id").toString()));
      }
      if ((jsonObj.get("originator_id") != null && !jsonObj.get("originator_id").isJsonNull()) && !jsonObj.get("originator_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator_id").toString()));
      }
      if ((jsonObj.get("originator_name") != null && !jsonObj.get("originator_name").isJsonNull()) && !jsonObj.get("originator_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator_name").toString()));
      }
      if ((jsonObj.get("originator_type") != null && !jsonObj.get("originator_type").isJsonNull()) && !jsonObj.get("originator_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator_type").toString()));
      }
      if ((jsonObj.get("parent_event_id") != null && !jsonObj.get("parent_event_id").isJsonNull()) && !jsonObj.get("parent_event_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_event_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_event_id").toString()));
      }
      if ((jsonObj.get("parent_originator_id") != null && !jsonObj.get("parent_originator_id").isJsonNull()) && !jsonObj.get("parent_originator_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_originator_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_originator_id").toString()));
      }
      if ((jsonObj.get("referer") != null && !jsonObj.get("referer").isJsonNull()) && !jsonObj.get("referer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referer").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("subject_id") != null && !jsonObj.get("subject_id").isJsonNull()) && !jsonObj.get("subject_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject_id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MemberEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MemberEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MemberEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MemberEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<MemberEvent>() {
           @Override
           public void write(JsonWriter out, MemberEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MemberEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MemberEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MemberEvent
   * @throws IOException if the JSON string is invalid with respect to MemberEvent
   */
  public static MemberEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MemberEvent.class);
  }

  /**
   * Convert an instance of MemberEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

