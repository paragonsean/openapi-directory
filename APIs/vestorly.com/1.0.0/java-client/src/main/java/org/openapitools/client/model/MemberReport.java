/*
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MemberReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:17.652103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MemberReport {
  public static final String SERIALIZED_NAME_DAY = "day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private Integer day;

  public static final String SERIALIZED_NAME_EVENT_COUNT = "event_count";
  @SerializedName(SERIALIZED_NAME_EVENT_COUNT)
  private Integer eventCount;

  public static final String SERIALIZED_NAME_ORIGINATOR_GROUP_ID = "originator_group_id";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_GROUP_ID)
  private String originatorGroupId;

  public static final String SERIALIZED_NAME_PARENT_ORIGINATOR_ID = "parent_originator_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ORIGINATOR_ID)
  private String parentOriginatorId;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public MemberReport() {
  }

  public MemberReport day(Integer day) {
    this.day = day;
    return this;
  }

  /**
   * Get day
   * @return day
   */
  @javax.annotation.Nullable
  public Integer getDay() {
    return day;
  }

  public void setDay(Integer day) {
    this.day = day;
  }


  public MemberReport eventCount(Integer eventCount) {
    this.eventCount = eventCount;
    return this;
  }

  /**
   * Get eventCount
   * @return eventCount
   */
  @javax.annotation.Nullable
  public Integer getEventCount() {
    return eventCount;
  }

  public void setEventCount(Integer eventCount) {
    this.eventCount = eventCount;
  }


  public MemberReport originatorGroupId(String originatorGroupId) {
    this.originatorGroupId = originatorGroupId;
    return this;
  }

  /**
   * Get originatorGroupId
   * @return originatorGroupId
   */
  @javax.annotation.Nullable
  public String getOriginatorGroupId() {
    return originatorGroupId;
  }

  public void setOriginatorGroupId(String originatorGroupId) {
    this.originatorGroupId = originatorGroupId;
  }


  public MemberReport parentOriginatorId(String parentOriginatorId) {
    this.parentOriginatorId = parentOriginatorId;
    return this;
  }

  /**
   * Get parentOriginatorId
   * @return parentOriginatorId
   */
  @javax.annotation.Nullable
  public String getParentOriginatorId() {
    return parentOriginatorId;
  }

  public void setParentOriginatorId(String parentOriginatorId) {
    this.parentOriginatorId = parentOriginatorId;
  }


  public MemberReport source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public MemberReport type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public MemberReport year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MemberReport memberReport = (MemberReport) o;
    return Objects.equals(this.day, memberReport.day) &&
        Objects.equals(this.eventCount, memberReport.eventCount) &&
        Objects.equals(this.originatorGroupId, memberReport.originatorGroupId) &&
        Objects.equals(this.parentOriginatorId, memberReport.parentOriginatorId) &&
        Objects.equals(this.source, memberReport.source) &&
        Objects.equals(this.type, memberReport.type) &&
        Objects.equals(this.year, memberReport.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(day, eventCount, originatorGroupId, parentOriginatorId, source, type, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MemberReport {\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    eventCount: ").append(toIndentedString(eventCount)).append("\n");
    sb.append("    originatorGroupId: ").append(toIndentedString(originatorGroupId)).append("\n");
    sb.append("    parentOriginatorId: ").append(toIndentedString(parentOriginatorId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("day");
    openapiFields.add("event_count");
    openapiFields.add("originator_group_id");
    openapiFields.add("parent_originator_id");
    openapiFields.add("source");
    openapiFields.add("type");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MemberReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MemberReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MemberReport is not found in the empty JSON string", MemberReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MemberReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MemberReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("originator_group_id") != null && !jsonObj.get("originator_group_id").isJsonNull()) && !jsonObj.get("originator_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator_group_id").toString()));
      }
      if ((jsonObj.get("parent_originator_id") != null && !jsonObj.get("parent_originator_id").isJsonNull()) && !jsonObj.get("parent_originator_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_originator_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_originator_id").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MemberReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MemberReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MemberReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MemberReport.class));

       return (TypeAdapter<T>) new TypeAdapter<MemberReport>() {
           @Override
           public void write(JsonWriter out, MemberReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MemberReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MemberReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MemberReport
   * @throws IOException if the JSON string is invalid with respect to MemberReport
   */
  public static MemberReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MemberReport.class);
  }

  /**
   * Convert an instance of MemberReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

