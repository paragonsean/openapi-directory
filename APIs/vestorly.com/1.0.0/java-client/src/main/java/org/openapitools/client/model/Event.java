/*
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EventContent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Event
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:17.652103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Event {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ADVISOR_ID = "advisor_id";
  @SerializedName(SERIALIZED_NAME_ADVISOR_ID)
  private String advisorId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_EVENT_CONTENT = "event_content";
  @SerializedName(SERIALIZED_NAME_EVENT_CONTENT)
  private EventContent eventContent;

  public static final String SERIALIZED_NAME_ORIGINAL_URL = "original_url";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_URL)
  private String originalUrl;

  public static final String SERIALIZED_NAME_ORIGINATOR_EMAIL = "originator_email";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_EMAIL)
  private String originatorEmail;

  public static final String SERIALIZED_NAME_ORIGINATOR_ID = "originator_id";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_ID)
  private String originatorId;

  public static final String SERIALIZED_NAME_PARENT_EVENT_ID = "parent_event_id";
  @SerializedName(SERIALIZED_NAME_PARENT_EVENT_ID)
  private String parentEventId;

  public static final String SERIALIZED_NAME_REFERER = "referer";
  @SerializedName(SERIALIZED_NAME_REFERER)
  private String referer;

  public static final String SERIALIZED_NAME_SUBJECT_EMAIL = "subject_email";
  @SerializedName(SERIALIZED_NAME_SUBJECT_EMAIL)
  private String subjectEmail;

  public static final String SERIALIZED_NAME_SUBJECT_ID = "subject_id";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ID)
  private String subjectId;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PAGE_VIEW("page_view"),
    
    SIGN_UP("sign_up"),
    
    SIGN_IN("sign_in"),
    
    CONTENT_POSTED("content_posted"),
    
    CREATE_POST("create_post"),
    
    PUBLISH_POST("publish_post"),
    
    UPDATE_POST("update_post"),
    
    DELETE_POST("delete_post"),
    
    UNPUBLISH_POST("unpublish_post"),
    
    INVITE("invite"),
    
    PUBLISH_NEWSLETTER("publish_newsletter"),
    
    PUBLISH_SOCIAL("publish_social"),
    
    CLICK("click"),
    
    DELIVERED("delivered"),
    
    OPEN("open"),
    
    DROPPED("dropped"),
    
    BOUNCE("bounce");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Event() {
  }

  public Event id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Event advisorId(String advisorId) {
    this.advisorId = advisorId;
    return this;
  }

  /**
   * Get advisorId
   * @return advisorId
   */
  @javax.annotation.Nullable
  public String getAdvisorId() {
    return advisorId;
  }

  public void setAdvisorId(String advisorId) {
    this.advisorId = advisorId;
  }


  public Event createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Event eventContent(EventContent eventContent) {
    this.eventContent = eventContent;
    return this;
  }

  /**
   * Get eventContent
   * @return eventContent
   */
  @javax.annotation.Nullable
  public EventContent getEventContent() {
    return eventContent;
  }

  public void setEventContent(EventContent eventContent) {
    this.eventContent = eventContent;
  }


  public Event originalUrl(String originalUrl) {
    this.originalUrl = originalUrl;
    return this;
  }

  /**
   * Get originalUrl
   * @return originalUrl
   */
  @javax.annotation.Nonnull
  public String getOriginalUrl() {
    return originalUrl;
  }

  public void setOriginalUrl(String originalUrl) {
    this.originalUrl = originalUrl;
  }


  public Event originatorEmail(String originatorEmail) {
    this.originatorEmail = originatorEmail;
    return this;
  }

  /**
   * Get originatorEmail
   * @return originatorEmail
   */
  @javax.annotation.Nullable
  public String getOriginatorEmail() {
    return originatorEmail;
  }

  public void setOriginatorEmail(String originatorEmail) {
    this.originatorEmail = originatorEmail;
  }


  public Event originatorId(String originatorId) {
    this.originatorId = originatorId;
    return this;
  }

  /**
   * Get originatorId
   * @return originatorId
   */
  @javax.annotation.Nullable
  public String getOriginatorId() {
    return originatorId;
  }

  public void setOriginatorId(String originatorId) {
    this.originatorId = originatorId;
  }


  public Event parentEventId(String parentEventId) {
    this.parentEventId = parentEventId;
    return this;
  }

  /**
   * Get parentEventId
   * @return parentEventId
   */
  @javax.annotation.Nullable
  public String getParentEventId() {
    return parentEventId;
  }

  public void setParentEventId(String parentEventId) {
    this.parentEventId = parentEventId;
  }


  public Event referer(String referer) {
    this.referer = referer;
    return this;
  }

  /**
   * Get referer
   * @return referer
   */
  @javax.annotation.Nullable
  public String getReferer() {
    return referer;
  }

  public void setReferer(String referer) {
    this.referer = referer;
  }


  public Event subjectEmail(String subjectEmail) {
    this.subjectEmail = subjectEmail;
    return this;
  }

  /**
   * Get subjectEmail
   * @return subjectEmail
   */
  @javax.annotation.Nonnull
  public String getSubjectEmail() {
    return subjectEmail;
  }

  public void setSubjectEmail(String subjectEmail) {
    this.subjectEmail = subjectEmail;
  }


  public Event subjectId(String subjectId) {
    this.subjectId = subjectId;
    return this;
  }

  /**
   * Get subjectId
   * @return subjectId
   */
  @javax.annotation.Nullable
  public String getSubjectId() {
    return subjectId;
  }

  public void setSubjectId(String subjectId) {
    this.subjectId = subjectId;
  }


  public Event type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.id, event.id) &&
        Objects.equals(this.advisorId, event.advisorId) &&
        Objects.equals(this.createdAt, event.createdAt) &&
        Objects.equals(this.eventContent, event.eventContent) &&
        Objects.equals(this.originalUrl, event.originalUrl) &&
        Objects.equals(this.originatorEmail, event.originatorEmail) &&
        Objects.equals(this.originatorId, event.originatorId) &&
        Objects.equals(this.parentEventId, event.parentEventId) &&
        Objects.equals(this.referer, event.referer) &&
        Objects.equals(this.subjectEmail, event.subjectEmail) &&
        Objects.equals(this.subjectId, event.subjectId) &&
        Objects.equals(this.type, event.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, advisorId, createdAt, eventContent, originalUrl, originatorEmail, originatorId, parentEventId, referer, subjectEmail, subjectId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    advisorId: ").append(toIndentedString(advisorId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    eventContent: ").append(toIndentedString(eventContent)).append("\n");
    sb.append("    originalUrl: ").append(toIndentedString(originalUrl)).append("\n");
    sb.append("    originatorEmail: ").append(toIndentedString(originatorEmail)).append("\n");
    sb.append("    originatorId: ").append(toIndentedString(originatorId)).append("\n");
    sb.append("    parentEventId: ").append(toIndentedString(parentEventId)).append("\n");
    sb.append("    referer: ").append(toIndentedString(referer)).append("\n");
    sb.append("    subjectEmail: ").append(toIndentedString(subjectEmail)).append("\n");
    sb.append("    subjectId: ").append(toIndentedString(subjectId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("advisor_id");
    openapiFields.add("created_at");
    openapiFields.add("event_content");
    openapiFields.add("original_url");
    openapiFields.add("originator_email");
    openapiFields.add("originator_id");
    openapiFields.add("parent_event_id");
    openapiFields.add("referer");
    openapiFields.add("subject_email");
    openapiFields.add("subject_id");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_id");
    openapiRequiredFields.add("original_url");
    openapiRequiredFields.add("subject_email");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Event.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if ((jsonObj.get("advisor_id") != null && !jsonObj.get("advisor_id").isJsonNull()) && !jsonObj.get("advisor_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advisor_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advisor_id").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      // validate the optional field `event_content`
      if (jsonObj.get("event_content") != null && !jsonObj.get("event_content").isJsonNull()) {
        EventContent.validateJsonElement(jsonObj.get("event_content"));
      }
      if (!jsonObj.get("original_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_url").toString()));
      }
      if ((jsonObj.get("originator_email") != null && !jsonObj.get("originator_email").isJsonNull()) && !jsonObj.get("originator_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator_email").toString()));
      }
      if ((jsonObj.get("originator_id") != null && !jsonObj.get("originator_id").isJsonNull()) && !jsonObj.get("originator_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator_id").toString()));
      }
      if ((jsonObj.get("parent_event_id") != null && !jsonObj.get("parent_event_id").isJsonNull()) && !jsonObj.get("parent_event_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_event_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_event_id").toString()));
      }
      if ((jsonObj.get("referer") != null && !jsonObj.get("referer").isJsonNull()) && !jsonObj.get("referer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referer").toString()));
      }
      if (!jsonObj.get("subject_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject_email").toString()));
      }
      if ((jsonObj.get("subject_id") != null && !jsonObj.get("subject_id").isJsonNull()) && !jsonObj.get("subject_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject_id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Event
   * @throws IOException if the JSON string is invalid with respect to Event
   */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

  /**
   * Convert an instance of Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

