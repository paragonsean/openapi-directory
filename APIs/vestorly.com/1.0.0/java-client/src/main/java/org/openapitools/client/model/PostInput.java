/*
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:17.652103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostInput {
  public static final String SERIALIZED_NAME_ADVISOR_ID = "advisor_id";
  @SerializedName(SERIALIZED_NAME_ADVISOR_ID)
  private String advisorId;

  public static final String SERIALIZED_NAME_APPROVAL_STATUS = "approval_status";
  @SerializedName(SERIALIZED_NAME_APPROVAL_STATUS)
  private String approvalStatus;

  public static final String SERIALIZED_NAME_APPROVAL_TRANSACTIONS = "approval_transactions";
  @SerializedName(SERIALIZED_NAME_APPROVAL_TRANSACTIONS)
  private List<String> approvalTransactions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARTICLE_ID = "article_id";
  @SerializedName(SERIALIZED_NAME_ARTICLE_ID)
  private String articleId;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DISPLAY_DATE = "display_date";
  @SerializedName(SERIALIZED_NAME_DISPLAY_DATE)
  private String displayDate;

  public static final String SERIALIZED_NAME_DISPLAY_SUMMARY = "display_summary";
  @SerializedName(SERIALIZED_NAME_DISPLAY_SUMMARY)
  private String displaySummary;

  public static final String SERIALIZED_NAME_DISPLAY_TAG = "display_tag";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TAG)
  private String displayTag;

  public static final String SERIALIZED_NAME_EXTERNAL_URL = "external_url";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_URL)
  private String externalUrl;

  public static final String SERIALIZED_NAME_EXTERNAL_URL_SOURCE = "external_url_source";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_URL_SOURCE)
  private String externalUrlSource;

  public static final String SERIALIZED_NAME_EXTERNAL_URL_TYPE = "external_url_type";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_URL_TYPE)
  private String externalUrlType;

  public static final String SERIALIZED_NAME_GROUP_IDS = "group_ids";
  @SerializedName(SERIALIZED_NAME_GROUP_IDS)
  private List<String> groupIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_HEIGHT = "image_height";
  @SerializedName(SERIALIZED_NAME_IMAGE_HEIGHT)
  private String imageHeight;

  public static final String SERIALIZED_NAME_IMAGE_PATH = "image_path";
  @SerializedName(SERIALIZED_NAME_IMAGE_PATH)
  private String imagePath;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_IMAGE_WIDTH = "image_width";
  @SerializedName(SERIALIZED_NAME_IMAGE_WIDTH)
  private String imageWidth;

  public static final String SERIALIZED_NAME_IS_FEATURED = "is_featured";
  @SerializedName(SERIALIZED_NAME_IS_FEATURED)
  private Boolean isFeatured;

  public static final String SERIALIZED_NAME_IS_MOBILE_PROXY_NEEDED = "is_mobile_proxy_needed";
  @SerializedName(SERIALIZED_NAME_IS_MOBILE_PROXY_NEEDED)
  private Boolean isMobileProxyNeeded;

  public static final String SERIALIZED_NAME_IS_PROXY_NEEDED = "is_proxy_needed";
  @SerializedName(SERIALIZED_NAME_IS_PROXY_NEEDED)
  private Boolean isProxyNeeded;

  public static final String SERIALIZED_NAME_IS_PUBLISHED = "is_published";
  @SerializedName(SERIALIZED_NAME_IS_PUBLISHED)
  private Boolean isPublished;

  public static final String SERIALIZED_NAME_IS_RESPONSIVE = "is_responsive";
  @SerializedName(SERIALIZED_NAME_IS_RESPONSIVE)
  private Boolean isResponsive;

  public static final String SERIALIZED_NAME_LOGO_URL = "logo_url";
  @SerializedName(SERIALIZED_NAME_LOGO_URL)
  private String logoUrl;

  public static final String SERIALIZED_NAME_NEEDS_SANITIZE = "needs_sanitize";
  @SerializedName(SERIALIZED_NAME_NEEDS_SANITIZE)
  private String needsSanitize;

  public static final String SERIALIZED_NAME_NEWSLETTER_IDS = "newsletter_ids";
  @SerializedName(SERIALIZED_NAME_NEWSLETTER_IDS)
  private List<String> newsletterIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_POST_DATE = "post_date";
  @SerializedName(SERIALIZED_NAME_POST_DATE)
  private String postDate;

  public static final String SERIALIZED_NAME_PROXY_URL = "proxy_url";
  @SerializedName(SERIALIZED_NAME_PROXY_URL)
  private String proxyUrl;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_SQUARE_LOGO_URL = "square_logo_url";
  @SerializedName(SERIALIZED_NAME_SQUARE_LOGO_URL)
  private String squareLogoUrl;

  public static final String SERIALIZED_NAME_SUITABILITY_SCORE = "suitability_score";
  @SerializedName(SERIALIZED_NAME_SUITABILITY_SCORE)
  private String suitabilityScore;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_VESTORLY_URL = "vestorly_url";
  @SerializedName(SERIALIZED_NAME_VESTORLY_URL)
  private String vestorlyUrl;

  public static final String SERIALIZED_NAME_VIDEO = "video";
  @SerializedName(SERIALIZED_NAME_VIDEO)
  private String video;

  public static final String SERIALIZED_NAME_VIDEO_ID = "video_id";
  @SerializedName(SERIALIZED_NAME_VIDEO_ID)
  private String videoId;

  public PostInput() {
  }

  public PostInput advisorId(String advisorId) {
    this.advisorId = advisorId;
    return this;
  }

  /**
   * Get advisorId
   * @return advisorId
   */
  @javax.annotation.Nullable
  public String getAdvisorId() {
    return advisorId;
  }

  public void setAdvisorId(String advisorId) {
    this.advisorId = advisorId;
  }


  public PostInput approvalStatus(String approvalStatus) {
    this.approvalStatus = approvalStatus;
    return this;
  }

  /**
   * Get approvalStatus
   * @return approvalStatus
   */
  @javax.annotation.Nullable
  public String getApprovalStatus() {
    return approvalStatus;
  }

  public void setApprovalStatus(String approvalStatus) {
    this.approvalStatus = approvalStatus;
  }


  public PostInput approvalTransactions(List<String> approvalTransactions) {
    this.approvalTransactions = approvalTransactions;
    return this;
  }

  public PostInput addApprovalTransactionsItem(String approvalTransactionsItem) {
    if (this.approvalTransactions == null) {
      this.approvalTransactions = new ArrayList<>();
    }
    this.approvalTransactions.add(approvalTransactionsItem);
    return this;
  }

  /**
   * Get approvalTransactions
   * @return approvalTransactions
   */
  @javax.annotation.Nullable
  public List<String> getApprovalTransactions() {
    return approvalTransactions;
  }

  public void setApprovalTransactions(List<String> approvalTransactions) {
    this.approvalTransactions = approvalTransactions;
  }


  public PostInput articleId(String articleId) {
    this.articleId = articleId;
    return this;
  }

  /**
   * Get articleId
   * @return articleId
   */
  @javax.annotation.Nullable
  public String getArticleId() {
    return articleId;
  }

  public void setArticleId(String articleId) {
    this.articleId = articleId;
  }


  public PostInput comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public PostInput createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public PostInput displayDate(String displayDate) {
    this.displayDate = displayDate;
    return this;
  }

  /**
   * Get displayDate
   * @return displayDate
   */
  @javax.annotation.Nullable
  public String getDisplayDate() {
    return displayDate;
  }

  public void setDisplayDate(String displayDate) {
    this.displayDate = displayDate;
  }


  public PostInput displaySummary(String displaySummary) {
    this.displaySummary = displaySummary;
    return this;
  }

  /**
   * Get displaySummary
   * @return displaySummary
   */
  @javax.annotation.Nullable
  public String getDisplaySummary() {
    return displaySummary;
  }

  public void setDisplaySummary(String displaySummary) {
    this.displaySummary = displaySummary;
  }


  public PostInput displayTag(String displayTag) {
    this.displayTag = displayTag;
    return this;
  }

  /**
   * Get displayTag
   * @return displayTag
   */
  @javax.annotation.Nullable
  public String getDisplayTag() {
    return displayTag;
  }

  public void setDisplayTag(String displayTag) {
    this.displayTag = displayTag;
  }


  public PostInput externalUrl(String externalUrl) {
    this.externalUrl = externalUrl;
    return this;
  }

  /**
   * Get externalUrl
   * @return externalUrl
   */
  @javax.annotation.Nullable
  public String getExternalUrl() {
    return externalUrl;
  }

  public void setExternalUrl(String externalUrl) {
    this.externalUrl = externalUrl;
  }


  public PostInput externalUrlSource(String externalUrlSource) {
    this.externalUrlSource = externalUrlSource;
    return this;
  }

  /**
   * Get externalUrlSource
   * @return externalUrlSource
   */
  @javax.annotation.Nullable
  public String getExternalUrlSource() {
    return externalUrlSource;
  }

  public void setExternalUrlSource(String externalUrlSource) {
    this.externalUrlSource = externalUrlSource;
  }


  public PostInput externalUrlType(String externalUrlType) {
    this.externalUrlType = externalUrlType;
    return this;
  }

  /**
   * Get externalUrlType
   * @return externalUrlType
   */
  @javax.annotation.Nullable
  public String getExternalUrlType() {
    return externalUrlType;
  }

  public void setExternalUrlType(String externalUrlType) {
    this.externalUrlType = externalUrlType;
  }


  public PostInput groupIds(List<String> groupIds) {
    this.groupIds = groupIds;
    return this;
  }

  public PostInput addGroupIdsItem(String groupIdsItem) {
    if (this.groupIds == null) {
      this.groupIds = new ArrayList<>();
    }
    this.groupIds.add(groupIdsItem);
    return this;
  }

  /**
   * Get groupIds
   * @return groupIds
   */
  @javax.annotation.Nullable
  public List<String> getGroupIds() {
    return groupIds;
  }

  public void setGroupIds(List<String> groupIds) {
    this.groupIds = groupIds;
  }


  public PostInput imageHeight(String imageHeight) {
    this.imageHeight = imageHeight;
    return this;
  }

  /**
   * Get imageHeight
   * @return imageHeight
   */
  @javax.annotation.Nullable
  public String getImageHeight() {
    return imageHeight;
  }

  public void setImageHeight(String imageHeight) {
    this.imageHeight = imageHeight;
  }


  public PostInput imagePath(String imagePath) {
    this.imagePath = imagePath;
    return this;
  }

  /**
   * Get imagePath
   * @return imagePath
   */
  @javax.annotation.Nullable
  public String getImagePath() {
    return imagePath;
  }

  public void setImagePath(String imagePath) {
    this.imagePath = imagePath;
  }


  public PostInput imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public PostInput imageWidth(String imageWidth) {
    this.imageWidth = imageWidth;
    return this;
  }

  /**
   * Get imageWidth
   * @return imageWidth
   */
  @javax.annotation.Nullable
  public String getImageWidth() {
    return imageWidth;
  }

  public void setImageWidth(String imageWidth) {
    this.imageWidth = imageWidth;
  }


  public PostInput isFeatured(Boolean isFeatured) {
    this.isFeatured = isFeatured;
    return this;
  }

  /**
   * Get isFeatured
   * @return isFeatured
   */
  @javax.annotation.Nullable
  public Boolean getIsFeatured() {
    return isFeatured;
  }

  public void setIsFeatured(Boolean isFeatured) {
    this.isFeatured = isFeatured;
  }


  public PostInput isMobileProxyNeeded(Boolean isMobileProxyNeeded) {
    this.isMobileProxyNeeded = isMobileProxyNeeded;
    return this;
  }

  /**
   * Get isMobileProxyNeeded
   * @return isMobileProxyNeeded
   */
  @javax.annotation.Nullable
  public Boolean getIsMobileProxyNeeded() {
    return isMobileProxyNeeded;
  }

  public void setIsMobileProxyNeeded(Boolean isMobileProxyNeeded) {
    this.isMobileProxyNeeded = isMobileProxyNeeded;
  }


  public PostInput isProxyNeeded(Boolean isProxyNeeded) {
    this.isProxyNeeded = isProxyNeeded;
    return this;
  }

  /**
   * Get isProxyNeeded
   * @return isProxyNeeded
   */
  @javax.annotation.Nullable
  public Boolean getIsProxyNeeded() {
    return isProxyNeeded;
  }

  public void setIsProxyNeeded(Boolean isProxyNeeded) {
    this.isProxyNeeded = isProxyNeeded;
  }


  public PostInput isPublished(Boolean isPublished) {
    this.isPublished = isPublished;
    return this;
  }

  /**
   * Get isPublished
   * @return isPublished
   */
  @javax.annotation.Nullable
  public Boolean getIsPublished() {
    return isPublished;
  }

  public void setIsPublished(Boolean isPublished) {
    this.isPublished = isPublished;
  }


  public PostInput isResponsive(Boolean isResponsive) {
    this.isResponsive = isResponsive;
    return this;
  }

  /**
   * Get isResponsive
   * @return isResponsive
   */
  @javax.annotation.Nullable
  public Boolean getIsResponsive() {
    return isResponsive;
  }

  public void setIsResponsive(Boolean isResponsive) {
    this.isResponsive = isResponsive;
  }


  public PostInput logoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

  /**
   * Get logoUrl
   * @return logoUrl
   */
  @javax.annotation.Nullable
  public String getLogoUrl() {
    return logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }


  public PostInput needsSanitize(String needsSanitize) {
    this.needsSanitize = needsSanitize;
    return this;
  }

  /**
   * Get needsSanitize
   * @return needsSanitize
   */
  @javax.annotation.Nullable
  public String getNeedsSanitize() {
    return needsSanitize;
  }

  public void setNeedsSanitize(String needsSanitize) {
    this.needsSanitize = needsSanitize;
  }


  public PostInput newsletterIds(List<String> newsletterIds) {
    this.newsletterIds = newsletterIds;
    return this;
  }

  public PostInput addNewsletterIdsItem(String newsletterIdsItem) {
    if (this.newsletterIds == null) {
      this.newsletterIds = new ArrayList<>();
    }
    this.newsletterIds.add(newsletterIdsItem);
    return this;
  }

  /**
   * Get newsletterIds
   * @return newsletterIds
   */
  @javax.annotation.Nullable
  public List<String> getNewsletterIds() {
    return newsletterIds;
  }

  public void setNewsletterIds(List<String> newsletterIds) {
    this.newsletterIds = newsletterIds;
  }


  public PostInput postDate(String postDate) {
    this.postDate = postDate;
    return this;
  }

  /**
   * Get postDate
   * @return postDate
   */
  @javax.annotation.Nullable
  public String getPostDate() {
    return postDate;
  }

  public void setPostDate(String postDate) {
    this.postDate = postDate;
  }


  public PostInput proxyUrl(String proxyUrl) {
    this.proxyUrl = proxyUrl;
    return this;
  }

  /**
   * Get proxyUrl
   * @return proxyUrl
   */
  @javax.annotation.Nullable
  public String getProxyUrl() {
    return proxyUrl;
  }

  public void setProxyUrl(String proxyUrl) {
    this.proxyUrl = proxyUrl;
  }


  public PostInput slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public PostInput squareLogoUrl(String squareLogoUrl) {
    this.squareLogoUrl = squareLogoUrl;
    return this;
  }

  /**
   * Get squareLogoUrl
   * @return squareLogoUrl
   */
  @javax.annotation.Nullable
  public String getSquareLogoUrl() {
    return squareLogoUrl;
  }

  public void setSquareLogoUrl(String squareLogoUrl) {
    this.squareLogoUrl = squareLogoUrl;
  }


  public PostInput suitabilityScore(String suitabilityScore) {
    this.suitabilityScore = suitabilityScore;
    return this;
  }

  /**
   * Get suitabilityScore
   * @return suitabilityScore
   */
  @javax.annotation.Nullable
  public String getSuitabilityScore() {
    return suitabilityScore;
  }

  public void setSuitabilityScore(String suitabilityScore) {
    this.suitabilityScore = suitabilityScore;
  }


  public PostInput summary(String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Get summary
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  public PostInput title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public PostInput topic(String topic) {
    this.topic = topic;
    return this;
  }

  /**
   * Get topic
   * @return topic
   */
  @javax.annotation.Nullable
  public String getTopic() {
    return topic;
  }

  public void setTopic(String topic) {
    this.topic = topic;
  }


  public PostInput updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public PostInput vestorlyUrl(String vestorlyUrl) {
    this.vestorlyUrl = vestorlyUrl;
    return this;
  }

  /**
   * Get vestorlyUrl
   * @return vestorlyUrl
   */
  @javax.annotation.Nullable
  public String getVestorlyUrl() {
    return vestorlyUrl;
  }

  public void setVestorlyUrl(String vestorlyUrl) {
    this.vestorlyUrl = vestorlyUrl;
  }


  public PostInput video(String video) {
    this.video = video;
    return this;
  }

  /**
   * Get video
   * @return video
   */
  @javax.annotation.Nullable
  public String getVideo() {
    return video;
  }

  public void setVideo(String video) {
    this.video = video;
  }


  public PostInput videoId(String videoId) {
    this.videoId = videoId;
    return this;
  }

  /**
   * Get videoId
   * @return videoId
   */
  @javax.annotation.Nullable
  public String getVideoId() {
    return videoId;
  }

  public void setVideoId(String videoId) {
    this.videoId = videoId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostInput postInput = (PostInput) o;
    return Objects.equals(this.advisorId, postInput.advisorId) &&
        Objects.equals(this.approvalStatus, postInput.approvalStatus) &&
        Objects.equals(this.approvalTransactions, postInput.approvalTransactions) &&
        Objects.equals(this.articleId, postInput.articleId) &&
        Objects.equals(this.comment, postInput.comment) &&
        Objects.equals(this.createdAt, postInput.createdAt) &&
        Objects.equals(this.displayDate, postInput.displayDate) &&
        Objects.equals(this.displaySummary, postInput.displaySummary) &&
        Objects.equals(this.displayTag, postInput.displayTag) &&
        Objects.equals(this.externalUrl, postInput.externalUrl) &&
        Objects.equals(this.externalUrlSource, postInput.externalUrlSource) &&
        Objects.equals(this.externalUrlType, postInput.externalUrlType) &&
        Objects.equals(this.groupIds, postInput.groupIds) &&
        Objects.equals(this.imageHeight, postInput.imageHeight) &&
        Objects.equals(this.imagePath, postInput.imagePath) &&
        Objects.equals(this.imageUrl, postInput.imageUrl) &&
        Objects.equals(this.imageWidth, postInput.imageWidth) &&
        Objects.equals(this.isFeatured, postInput.isFeatured) &&
        Objects.equals(this.isMobileProxyNeeded, postInput.isMobileProxyNeeded) &&
        Objects.equals(this.isProxyNeeded, postInput.isProxyNeeded) &&
        Objects.equals(this.isPublished, postInput.isPublished) &&
        Objects.equals(this.isResponsive, postInput.isResponsive) &&
        Objects.equals(this.logoUrl, postInput.logoUrl) &&
        Objects.equals(this.needsSanitize, postInput.needsSanitize) &&
        Objects.equals(this.newsletterIds, postInput.newsletterIds) &&
        Objects.equals(this.postDate, postInput.postDate) &&
        Objects.equals(this.proxyUrl, postInput.proxyUrl) &&
        Objects.equals(this.slug, postInput.slug) &&
        Objects.equals(this.squareLogoUrl, postInput.squareLogoUrl) &&
        Objects.equals(this.suitabilityScore, postInput.suitabilityScore) &&
        Objects.equals(this.summary, postInput.summary) &&
        Objects.equals(this.title, postInput.title) &&
        Objects.equals(this.topic, postInput.topic) &&
        Objects.equals(this.updatedAt, postInput.updatedAt) &&
        Objects.equals(this.vestorlyUrl, postInput.vestorlyUrl) &&
        Objects.equals(this.video, postInput.video) &&
        Objects.equals(this.videoId, postInput.videoId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advisorId, approvalStatus, approvalTransactions, articleId, comment, createdAt, displayDate, displaySummary, displayTag, externalUrl, externalUrlSource, externalUrlType, groupIds, imageHeight, imagePath, imageUrl, imageWidth, isFeatured, isMobileProxyNeeded, isProxyNeeded, isPublished, isResponsive, logoUrl, needsSanitize, newsletterIds, postDate, proxyUrl, slug, squareLogoUrl, suitabilityScore, summary, title, topic, updatedAt, vestorlyUrl, video, videoId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostInput {\n");
    sb.append("    advisorId: ").append(toIndentedString(advisorId)).append("\n");
    sb.append("    approvalStatus: ").append(toIndentedString(approvalStatus)).append("\n");
    sb.append("    approvalTransactions: ").append(toIndentedString(approvalTransactions)).append("\n");
    sb.append("    articleId: ").append(toIndentedString(articleId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    displayDate: ").append(toIndentedString(displayDate)).append("\n");
    sb.append("    displaySummary: ").append(toIndentedString(displaySummary)).append("\n");
    sb.append("    displayTag: ").append(toIndentedString(displayTag)).append("\n");
    sb.append("    externalUrl: ").append(toIndentedString(externalUrl)).append("\n");
    sb.append("    externalUrlSource: ").append(toIndentedString(externalUrlSource)).append("\n");
    sb.append("    externalUrlType: ").append(toIndentedString(externalUrlType)).append("\n");
    sb.append("    groupIds: ").append(toIndentedString(groupIds)).append("\n");
    sb.append("    imageHeight: ").append(toIndentedString(imageHeight)).append("\n");
    sb.append("    imagePath: ").append(toIndentedString(imagePath)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    imageWidth: ").append(toIndentedString(imageWidth)).append("\n");
    sb.append("    isFeatured: ").append(toIndentedString(isFeatured)).append("\n");
    sb.append("    isMobileProxyNeeded: ").append(toIndentedString(isMobileProxyNeeded)).append("\n");
    sb.append("    isProxyNeeded: ").append(toIndentedString(isProxyNeeded)).append("\n");
    sb.append("    isPublished: ").append(toIndentedString(isPublished)).append("\n");
    sb.append("    isResponsive: ").append(toIndentedString(isResponsive)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    needsSanitize: ").append(toIndentedString(needsSanitize)).append("\n");
    sb.append("    newsletterIds: ").append(toIndentedString(newsletterIds)).append("\n");
    sb.append("    postDate: ").append(toIndentedString(postDate)).append("\n");
    sb.append("    proxyUrl: ").append(toIndentedString(proxyUrl)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    squareLogoUrl: ").append(toIndentedString(squareLogoUrl)).append("\n");
    sb.append("    suitabilityScore: ").append(toIndentedString(suitabilityScore)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    vestorlyUrl: ").append(toIndentedString(vestorlyUrl)).append("\n");
    sb.append("    video: ").append(toIndentedString(video)).append("\n");
    sb.append("    videoId: ").append(toIndentedString(videoId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advisor_id");
    openapiFields.add("approval_status");
    openapiFields.add("approval_transactions");
    openapiFields.add("article_id");
    openapiFields.add("comment");
    openapiFields.add("created_at");
    openapiFields.add("display_date");
    openapiFields.add("display_summary");
    openapiFields.add("display_tag");
    openapiFields.add("external_url");
    openapiFields.add("external_url_source");
    openapiFields.add("external_url_type");
    openapiFields.add("group_ids");
    openapiFields.add("image_height");
    openapiFields.add("image_path");
    openapiFields.add("image_url");
    openapiFields.add("image_width");
    openapiFields.add("is_featured");
    openapiFields.add("is_mobile_proxy_needed");
    openapiFields.add("is_proxy_needed");
    openapiFields.add("is_published");
    openapiFields.add("is_responsive");
    openapiFields.add("logo_url");
    openapiFields.add("needs_sanitize");
    openapiFields.add("newsletter_ids");
    openapiFields.add("post_date");
    openapiFields.add("proxy_url");
    openapiFields.add("slug");
    openapiFields.add("square_logo_url");
    openapiFields.add("suitability_score");
    openapiFields.add("summary");
    openapiFields.add("title");
    openapiFields.add("topic");
    openapiFields.add("updated_at");
    openapiFields.add("vestorly_url");
    openapiFields.add("video");
    openapiFields.add("video_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostInput is not found in the empty JSON string", PostInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("advisor_id") != null && !jsonObj.get("advisor_id").isJsonNull()) && !jsonObj.get("advisor_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advisor_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advisor_id").toString()));
      }
      if ((jsonObj.get("approval_status") != null && !jsonObj.get("approval_status").isJsonNull()) && !jsonObj.get("approval_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approval_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approval_status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("approval_transactions") != null && !jsonObj.get("approval_transactions").isJsonNull() && !jsonObj.get("approval_transactions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `approval_transactions` to be an array in the JSON string but got `%s`", jsonObj.get("approval_transactions").toString()));
      }
      if ((jsonObj.get("article_id") != null && !jsonObj.get("article_id").isJsonNull()) && !jsonObj.get("article_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `article_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("article_id").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("display_date") != null && !jsonObj.get("display_date").isJsonNull()) && !jsonObj.get("display_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_date").toString()));
      }
      if ((jsonObj.get("display_summary") != null && !jsonObj.get("display_summary").isJsonNull()) && !jsonObj.get("display_summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_summary").toString()));
      }
      if ((jsonObj.get("display_tag") != null && !jsonObj.get("display_tag").isJsonNull()) && !jsonObj.get("display_tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_tag").toString()));
      }
      if ((jsonObj.get("external_url") != null && !jsonObj.get("external_url").isJsonNull()) && !jsonObj.get("external_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_url").toString()));
      }
      if ((jsonObj.get("external_url_source") != null && !jsonObj.get("external_url_source").isJsonNull()) && !jsonObj.get("external_url_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_url_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_url_source").toString()));
      }
      if ((jsonObj.get("external_url_type") != null && !jsonObj.get("external_url_type").isJsonNull()) && !jsonObj.get("external_url_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_url_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_url_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("group_ids") != null && !jsonObj.get("group_ids").isJsonNull() && !jsonObj.get("group_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_ids` to be an array in the JSON string but got `%s`", jsonObj.get("group_ids").toString()));
      }
      if ((jsonObj.get("image_height") != null && !jsonObj.get("image_height").isJsonNull()) && !jsonObj.get("image_height").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_height` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_height").toString()));
      }
      if ((jsonObj.get("image_path") != null && !jsonObj.get("image_path").isJsonNull()) && !jsonObj.get("image_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_path").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if ((jsonObj.get("image_width") != null && !jsonObj.get("image_width").isJsonNull()) && !jsonObj.get("image_width").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_width` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_width").toString()));
      }
      if ((jsonObj.get("logo_url") != null && !jsonObj.get("logo_url").isJsonNull()) && !jsonObj.get("logo_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo_url").toString()));
      }
      if ((jsonObj.get("needs_sanitize") != null && !jsonObj.get("needs_sanitize").isJsonNull()) && !jsonObj.get("needs_sanitize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `needs_sanitize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("needs_sanitize").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("newsletter_ids") != null && !jsonObj.get("newsletter_ids").isJsonNull() && !jsonObj.get("newsletter_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `newsletter_ids` to be an array in the JSON string but got `%s`", jsonObj.get("newsletter_ids").toString()));
      }
      if ((jsonObj.get("post_date") != null && !jsonObj.get("post_date").isJsonNull()) && !jsonObj.get("post_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `post_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("post_date").toString()));
      }
      if ((jsonObj.get("proxy_url") != null && !jsonObj.get("proxy_url").isJsonNull()) && !jsonObj.get("proxy_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxy_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxy_url").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("square_logo_url") != null && !jsonObj.get("square_logo_url").isJsonNull()) && !jsonObj.get("square_logo_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `square_logo_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("square_logo_url").toString()));
      }
      if ((jsonObj.get("suitability_score") != null && !jsonObj.get("suitability_score").isJsonNull()) && !jsonObj.get("suitability_score").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suitability_score` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suitability_score").toString()));
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("vestorly_url") != null && !jsonObj.get("vestorly_url").isJsonNull()) && !jsonObj.get("vestorly_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vestorly_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vestorly_url").toString()));
      }
      if ((jsonObj.get("video") != null && !jsonObj.get("video").isJsonNull()) && !jsonObj.get("video").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video").toString()));
      }
      if ((jsonObj.get("video_id") != null && !jsonObj.get("video_id").isJsonNull()) && !jsonObj.get("video_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostInput.class));

       return (TypeAdapter<T>) new TypeAdapter<PostInput>() {
           @Override
           public void write(JsonWriter out, PostInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostInput
   * @throws IOException if the JSON string is invalid with respect to PostInput
   */
  public static PostInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostInput.class);
  }

  /**
   * Convert an instance of PostInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

