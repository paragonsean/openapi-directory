/*
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Post;
import org.openapitools.client.model.PostInput;
import org.openapitools.client.model.Postresponse;
import org.openapitools.client.model.Posts;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PostsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PostsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PostsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPost
     * @param vestorlyAuth Vestorly Auth Token (required)
     * @param post Post you want to create (required)
     * @param accessToken OAuth Token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> posts response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPostCall(String vestorlyAuth, PostInput post, String accessToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = post;

        // create path and map variables
        String localVarPath = "/posts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vestorlyAuth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vestorly_auth", vestorlyAuth));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPostValidateBeforeCall(String vestorlyAuth, PostInput post, String accessToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vestorlyAuth' is set
        if (vestorlyAuth == null) {
            throw new ApiException("Missing the required parameter 'vestorlyAuth' when calling createPost(Async)");
        }

        // verify the required parameter 'post' is set
        if (post == null) {
            throw new ApiException("Missing the required parameter 'post' when calling createPost(Async)");
        }

        return createPostCall(vestorlyAuth, post, accessToken, _callback);

    }

    /**
     * 
     * Create a new post in the Vestorly Platform
     * @param vestorlyAuth Vestorly Auth Token (required)
     * @param post Post you want to create (required)
     * @param accessToken OAuth Token (optional)
     * @return Postresponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> posts response </td><td>  -  </td></tr>
     </table>
     */
    public Postresponse createPost(String vestorlyAuth, PostInput post, String accessToken) throws ApiException {
        ApiResponse<Postresponse> localVarResp = createPostWithHttpInfo(vestorlyAuth, post, accessToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new post in the Vestorly Platform
     * @param vestorlyAuth Vestorly Auth Token (required)
     * @param post Post you want to create (required)
     * @param accessToken OAuth Token (optional)
     * @return ApiResponse&lt;Postresponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> posts response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Postresponse> createPostWithHttpInfo(String vestorlyAuth, PostInput post, String accessToken) throws ApiException {
        okhttp3.Call localVarCall = createPostValidateBeforeCall(vestorlyAuth, post, accessToken, null);
        Type localVarReturnType = new TypeToken<Postresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new post in the Vestorly Platform
     * @param vestorlyAuth Vestorly Auth Token (required)
     * @param post Post you want to create (required)
     * @param accessToken OAuth Token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> posts response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPostAsync(String vestorlyAuth, PostInput post, String accessToken, final ApiCallback<Postresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPostValidateBeforeCall(vestorlyAuth, post, accessToken, _callback);
        Type localVarReturnType = new TypeToken<Postresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findPosts
     * @param vestorlyAuth Vestorly Auth Token (required)
     * @param accessToken OAuth Token (optional)
     * @param textQuery Filter post by parameters (optional)
     * @param externalUrl Filter by External URL (optional)
     * @param isPublished Filter by is_published boolean (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> posts response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPostsCall(String vestorlyAuth, String accessToken, String textQuery, String externalUrl, String isPublished, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vestorlyAuth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vestorly_auth", vestorlyAuth));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (textQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text_query", textQuery));
        }

        if (externalUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_url", externalUrl));
        }

        if (isPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_published", isPublished));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findPostsValidateBeforeCall(String vestorlyAuth, String accessToken, String textQuery, String externalUrl, String isPublished, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vestorlyAuth' is set
        if (vestorlyAuth == null) {
            throw new ApiException("Missing the required parameter 'vestorlyAuth' when calling findPosts(Async)");
        }

        return findPostsCall(vestorlyAuth, accessToken, textQuery, externalUrl, isPublished, _callback);

    }

    /**
     * 
     * Query all posts
     * @param vestorlyAuth Vestorly Auth Token (required)
     * @param accessToken OAuth Token (optional)
     * @param textQuery Filter post by parameters (optional)
     * @param externalUrl Filter by External URL (optional)
     * @param isPublished Filter by is_published boolean (optional)
     * @return Posts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> posts response </td><td>  -  </td></tr>
     </table>
     */
    public Posts findPosts(String vestorlyAuth, String accessToken, String textQuery, String externalUrl, String isPublished) throws ApiException {
        ApiResponse<Posts> localVarResp = findPostsWithHttpInfo(vestorlyAuth, accessToken, textQuery, externalUrl, isPublished);
        return localVarResp.getData();
    }

    /**
     * 
     * Query all posts
     * @param vestorlyAuth Vestorly Auth Token (required)
     * @param accessToken OAuth Token (optional)
     * @param textQuery Filter post by parameters (optional)
     * @param externalUrl Filter by External URL (optional)
     * @param isPublished Filter by is_published boolean (optional)
     * @return ApiResponse&lt;Posts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> posts response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Posts> findPostsWithHttpInfo(String vestorlyAuth, String accessToken, String textQuery, String externalUrl, String isPublished) throws ApiException {
        okhttp3.Call localVarCall = findPostsValidateBeforeCall(vestorlyAuth, accessToken, textQuery, externalUrl, isPublished, null);
        Type localVarReturnType = new TypeToken<Posts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Query all posts
     * @param vestorlyAuth Vestorly Auth Token (required)
     * @param accessToken OAuth Token (optional)
     * @param textQuery Filter post by parameters (optional)
     * @param externalUrl Filter by External URL (optional)
     * @param isPublished Filter by is_published boolean (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> posts response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPostsAsync(String vestorlyAuth, String accessToken, String textQuery, String externalUrl, String isPublished, final ApiCallback<Posts> _callback) throws ApiException {

        okhttp3.Call localVarCall = findPostsValidateBeforeCall(vestorlyAuth, accessToken, textQuery, externalUrl, isPublished, _callback);
        Type localVarReturnType = new TypeToken<Posts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPostByID
     * @param vestorlyAuth Vestorly Auth Token (required)
     * @param id ID of post to fetch (required)
     * @param accessToken OAuth Token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostByIDCall(String vestorlyAuth, String id, String accessToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vestorlyAuth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vestorly_auth", vestorlyAuth));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPostByIDValidateBeforeCall(String vestorlyAuth, String id, String accessToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vestorlyAuth' is set
        if (vestorlyAuth == null) {
            throw new ApiException("Missing the required parameter 'vestorlyAuth' when calling getPostByID(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPostByID(Async)");
        }

        return getPostByIDCall(vestorlyAuth, id, accessToken, _callback);

    }

    /**
     * 
     * Query all posts
     * @param vestorlyAuth Vestorly Auth Token (required)
     * @param id ID of post to fetch (required)
     * @param accessToken OAuth Token (optional)
     * @return Postresponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post response </td><td>  -  </td></tr>
     </table>
     */
    public Postresponse getPostByID(String vestorlyAuth, String id, String accessToken) throws ApiException {
        ApiResponse<Postresponse> localVarResp = getPostByIDWithHttpInfo(vestorlyAuth, id, accessToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Query all posts
     * @param vestorlyAuth Vestorly Auth Token (required)
     * @param id ID of post to fetch (required)
     * @param accessToken OAuth Token (optional)
     * @return ApiResponse&lt;Postresponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Postresponse> getPostByIDWithHttpInfo(String vestorlyAuth, String id, String accessToken) throws ApiException {
        okhttp3.Call localVarCall = getPostByIDValidateBeforeCall(vestorlyAuth, id, accessToken, null);
        Type localVarReturnType = new TypeToken<Postresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Query all posts
     * @param vestorlyAuth Vestorly Auth Token (required)
     * @param id ID of post to fetch (required)
     * @param accessToken OAuth Token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostByIDAsync(String vestorlyAuth, String id, String accessToken, final ApiCallback<Postresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPostByIDValidateBeforeCall(vestorlyAuth, id, accessToken, _callback);
        Type localVarReturnType = new TypeToken<Postresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePostByID
     * @param vestorlyAuth Vestorly Auth Token (required)
     * @param id id of post to update (required)
     * @param post Post you want to update (required)
     * @param accessToken OAuth Token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePostByIDCall(String vestorlyAuth, String id, Post post, String accessToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = post;

        // create path and map variables
        String localVarPath = "/posts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vestorlyAuth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vestorly_auth", vestorlyAuth));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePostByIDValidateBeforeCall(String vestorlyAuth, String id, Post post, String accessToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vestorlyAuth' is set
        if (vestorlyAuth == null) {
            throw new ApiException("Missing the required parameter 'vestorlyAuth' when calling updatePostByID(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePostByID(Async)");
        }

        // verify the required parameter 'post' is set
        if (post == null) {
            throw new ApiException("Missing the required parameter 'post' when calling updatePostByID(Async)");
        }

        return updatePostByIDCall(vestorlyAuth, id, post, accessToken, _callback);

    }

    /**
     * 
     * Update A Post
     * @param vestorlyAuth Vestorly Auth Token (required)
     * @param id id of post to update (required)
     * @param post Post you want to update (required)
     * @param accessToken OAuth Token (optional)
     * @return Postresponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post response </td><td>  -  </td></tr>
     </table>
     */
    public Postresponse updatePostByID(String vestorlyAuth, String id, Post post, String accessToken) throws ApiException {
        ApiResponse<Postresponse> localVarResp = updatePostByIDWithHttpInfo(vestorlyAuth, id, post, accessToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Update A Post
     * @param vestorlyAuth Vestorly Auth Token (required)
     * @param id id of post to update (required)
     * @param post Post you want to update (required)
     * @param accessToken OAuth Token (optional)
     * @return ApiResponse&lt;Postresponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Postresponse> updatePostByIDWithHttpInfo(String vestorlyAuth, String id, Post post, String accessToken) throws ApiException {
        okhttp3.Call localVarCall = updatePostByIDValidateBeforeCall(vestorlyAuth, id, post, accessToken, null);
        Type localVarReturnType = new TypeToken<Postresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update A Post
     * @param vestorlyAuth Vestorly Auth Token (required)
     * @param id id of post to update (required)
     * @param post Post you want to update (required)
     * @param accessToken OAuth Token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePostByIDAsync(String vestorlyAuth, String id, Post post, String accessToken, final ApiCallback<Postresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePostByIDValidateBeforeCall(vestorlyAuth, id, post, accessToken, _callback);
        Type localVarReturnType = new TypeToken<Postresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
