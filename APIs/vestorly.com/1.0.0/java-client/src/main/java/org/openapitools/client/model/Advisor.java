/*
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Advisor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:17.652103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Advisor {
  public static final String SERIALIZED_NAME_ABOUT = "about";
  @SerializedName(SERIALIZED_NAME_ABOUT)
  private String about;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "account_type";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ADV_BROCHURE = "adv_brochure";
  @SerializedName(SERIALIZED_NAME_ADV_BROCHURE)
  private String advBrochure;

  public static final String SERIALIZED_NAME_API_KEY = "api_key";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private String apiKey;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_COMPLIANCE_BCC_EMAIL_ADDRESS = "compliance_bcc_email_address";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_BCC_EMAIL_ADDRESS)
  private String complianceBccEmailAddress;

  public static final String SERIALIZED_NAME_DASHBOARD_URL = "dashboard_url";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_URL)
  private String dashboardUrl;

  public static final String SERIALIZED_NAME_DISCLOSURE = "disclosure";
  @SerializedName(SERIALIZED_NAME_DISCLOSURE)
  private String disclosure;

  public static final String SERIALIZED_NAME_EMAIL_REPORT_BLAST = "email_report_blast";
  @SerializedName(SERIALIZED_NAME_EMAIL_REPORT_BLAST)
  private String emailReportBlast;

  public static final String SERIALIZED_NAME_EXTERNAL_OPTIONS = "external_options";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_OPTIONS)
  private String externalOptions;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LINKEDIN = "linkedin";
  @SerializedName(SERIALIZED_NAME_LINKEDIN)
  private String linkedin;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private String plan;

  public static final String SERIALIZED_NAME_PROFILE_PICTURE = "profile_picture";
  @SerializedName(SERIALIZED_NAME_PROFILE_PICTURE)
  private String profilePicture;

  public static final String SERIALIZED_NAME_REG_NUMBER = "reg_number";
  @SerializedName(SERIALIZED_NAME_REG_NUMBER)
  private String regNumber;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_TWITTER_HANDLE = "twitter_handle";
  @SerializedName(SERIALIZED_NAME_TWITTER_HANDLE)
  private String twitterHandle;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public Advisor() {
  }

  public Advisor about(String about) {
    this.about = about;
    return this;
  }

  /**
   * Get about
   * @return about
   */
  @javax.annotation.Nullable
  public String getAbout() {
    return about;
  }

  public void setAbout(String about) {
    this.about = about;
  }


  public Advisor accountType(String accountType) {
    this.accountType = accountType;
    return this;
  }

  /**
   * Get accountType
   * @return accountType
   */
  @javax.annotation.Nullable
  public String getAccountType() {
    return accountType;
  }

  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }


  public Advisor address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public Advisor advBrochure(String advBrochure) {
    this.advBrochure = advBrochure;
    return this;
  }

  /**
   * Get advBrochure
   * @return advBrochure
   */
  @javax.annotation.Nullable
  public String getAdvBrochure() {
    return advBrochure;
  }

  public void setAdvBrochure(String advBrochure) {
    this.advBrochure = advBrochure;
  }


  public Advisor apiKey(String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * Get apiKey
   * @return apiKey
   */
  @javax.annotation.Nullable
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(String apiKey) {
    this.apiKey = apiKey;
  }


  public Advisor city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public Advisor company(String company) {
    this.company = company;
    return this;
  }

  /**
   * Get company
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  public Advisor complianceBccEmailAddress(String complianceBccEmailAddress) {
    this.complianceBccEmailAddress = complianceBccEmailAddress;
    return this;
  }

  /**
   * Get complianceBccEmailAddress
   * @return complianceBccEmailAddress
   */
  @javax.annotation.Nullable
  public String getComplianceBccEmailAddress() {
    return complianceBccEmailAddress;
  }

  public void setComplianceBccEmailAddress(String complianceBccEmailAddress) {
    this.complianceBccEmailAddress = complianceBccEmailAddress;
  }


  public Advisor dashboardUrl(String dashboardUrl) {
    this.dashboardUrl = dashboardUrl;
    return this;
  }

  /**
   * Get dashboardUrl
   * @return dashboardUrl
   */
  @javax.annotation.Nullable
  public String getDashboardUrl() {
    return dashboardUrl;
  }

  public void setDashboardUrl(String dashboardUrl) {
    this.dashboardUrl = dashboardUrl;
  }


  public Advisor disclosure(String disclosure) {
    this.disclosure = disclosure;
    return this;
  }

  /**
   * Get disclosure
   * @return disclosure
   */
  @javax.annotation.Nullable
  public String getDisclosure() {
    return disclosure;
  }

  public void setDisclosure(String disclosure) {
    this.disclosure = disclosure;
  }


  public Advisor emailReportBlast(String emailReportBlast) {
    this.emailReportBlast = emailReportBlast;
    return this;
  }

  /**
   * Get emailReportBlast
   * @return emailReportBlast
   */
  @javax.annotation.Nullable
  public String getEmailReportBlast() {
    return emailReportBlast;
  }

  public void setEmailReportBlast(String emailReportBlast) {
    this.emailReportBlast = emailReportBlast;
  }


  public Advisor externalOptions(String externalOptions) {
    this.externalOptions = externalOptions;
    return this;
  }

  /**
   * Get externalOptions
   * @return externalOptions
   */
  @javax.annotation.Nullable
  public String getExternalOptions() {
    return externalOptions;
  }

  public void setExternalOptions(String externalOptions) {
    this.externalOptions = externalOptions;
  }


  public Advisor firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Advisor id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Advisor lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Advisor linkedin(String linkedin) {
    this.linkedin = linkedin;
    return this;
  }

  /**
   * Get linkedin
   * @return linkedin
   */
  @javax.annotation.Nullable
  public String getLinkedin() {
    return linkedin;
  }

  public void setLinkedin(String linkedin) {
    this.linkedin = linkedin;
  }


  public Advisor logo(String logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }


  public Advisor name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Advisor plan(String plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Get plan
   * @return plan
   */
  @javax.annotation.Nullable
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }


  public Advisor profilePicture(String profilePicture) {
    this.profilePicture = profilePicture;
    return this;
  }

  /**
   * Get profilePicture
   * @return profilePicture
   */
  @javax.annotation.Nullable
  public String getProfilePicture() {
    return profilePicture;
  }

  public void setProfilePicture(String profilePicture) {
    this.profilePicture = profilePicture;
  }


  public Advisor regNumber(String regNumber) {
    this.regNumber = regNumber;
    return this;
  }

  /**
   * Get regNumber
   * @return regNumber
   */
  @javax.annotation.Nullable
  public String getRegNumber() {
    return regNumber;
  }

  public void setRegNumber(String regNumber) {
    this.regNumber = regNumber;
  }


  public Advisor state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Advisor tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  public Advisor twitterHandle(String twitterHandle) {
    this.twitterHandle = twitterHandle;
    return this;
  }

  /**
   * Get twitterHandle
   * @return twitterHandle
   */
  @javax.annotation.Nullable
  public String getTwitterHandle() {
    return twitterHandle;
  }

  public void setTwitterHandle(String twitterHandle) {
    this.twitterHandle = twitterHandle;
  }


  public Advisor website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }


  public Advisor zip(String zip) {
    this.zip = zip;
    return this;
  }

  /**
   * Get zip
   * @return zip
   */
  @javax.annotation.Nullable
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Advisor advisor = (Advisor) o;
    return Objects.equals(this.about, advisor.about) &&
        Objects.equals(this.accountType, advisor.accountType) &&
        Objects.equals(this.address, advisor.address) &&
        Objects.equals(this.advBrochure, advisor.advBrochure) &&
        Objects.equals(this.apiKey, advisor.apiKey) &&
        Objects.equals(this.city, advisor.city) &&
        Objects.equals(this.company, advisor.company) &&
        Objects.equals(this.complianceBccEmailAddress, advisor.complianceBccEmailAddress) &&
        Objects.equals(this.dashboardUrl, advisor.dashboardUrl) &&
        Objects.equals(this.disclosure, advisor.disclosure) &&
        Objects.equals(this.emailReportBlast, advisor.emailReportBlast) &&
        Objects.equals(this.externalOptions, advisor.externalOptions) &&
        Objects.equals(this.firstName, advisor.firstName) &&
        Objects.equals(this.id, advisor.id) &&
        Objects.equals(this.lastName, advisor.lastName) &&
        Objects.equals(this.linkedin, advisor.linkedin) &&
        Objects.equals(this.logo, advisor.logo) &&
        Objects.equals(this.name, advisor.name) &&
        Objects.equals(this.plan, advisor.plan) &&
        Objects.equals(this.profilePicture, advisor.profilePicture) &&
        Objects.equals(this.regNumber, advisor.regNumber) &&
        Objects.equals(this.state, advisor.state) &&
        Objects.equals(this.tag, advisor.tag) &&
        Objects.equals(this.twitterHandle, advisor.twitterHandle) &&
        Objects.equals(this.website, advisor.website) &&
        Objects.equals(this.zip, advisor.zip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(about, accountType, address, advBrochure, apiKey, city, company, complianceBccEmailAddress, dashboardUrl, disclosure, emailReportBlast, externalOptions, firstName, id, lastName, linkedin, logo, name, plan, profilePicture, regNumber, state, tag, twitterHandle, website, zip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Advisor {\n");
    sb.append("    about: ").append(toIndentedString(about)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    advBrochure: ").append(toIndentedString(advBrochure)).append("\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    complianceBccEmailAddress: ").append(toIndentedString(complianceBccEmailAddress)).append("\n");
    sb.append("    dashboardUrl: ").append(toIndentedString(dashboardUrl)).append("\n");
    sb.append("    disclosure: ").append(toIndentedString(disclosure)).append("\n");
    sb.append("    emailReportBlast: ").append(toIndentedString(emailReportBlast)).append("\n");
    sb.append("    externalOptions: ").append(toIndentedString(externalOptions)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    linkedin: ").append(toIndentedString(linkedin)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    profilePicture: ").append(toIndentedString(profilePicture)).append("\n");
    sb.append("    regNumber: ").append(toIndentedString(regNumber)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    twitterHandle: ").append(toIndentedString(twitterHandle)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("about");
    openapiFields.add("account_type");
    openapiFields.add("address");
    openapiFields.add("adv_brochure");
    openapiFields.add("api_key");
    openapiFields.add("city");
    openapiFields.add("company");
    openapiFields.add("compliance_bcc_email_address");
    openapiFields.add("dashboard_url");
    openapiFields.add("disclosure");
    openapiFields.add("email_report_blast");
    openapiFields.add("external_options");
    openapiFields.add("first_name");
    openapiFields.add("id");
    openapiFields.add("last_name");
    openapiFields.add("linkedin");
    openapiFields.add("logo");
    openapiFields.add("name");
    openapiFields.add("plan");
    openapiFields.add("profile_picture");
    openapiFields.add("reg_number");
    openapiFields.add("state");
    openapiFields.add("tag");
    openapiFields.add("twitter_handle");
    openapiFields.add("website");
    openapiFields.add("zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Advisor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Advisor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Advisor is not found in the empty JSON string", Advisor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Advisor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Advisor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Advisor.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("about") != null && !jsonObj.get("about").isJsonNull()) && !jsonObj.get("about").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `about` to be a primitive type in the JSON string but got `%s`", jsonObj.get("about").toString()));
      }
      if ((jsonObj.get("account_type") != null && !jsonObj.get("account_type").isJsonNull()) && !jsonObj.get("account_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_type").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("adv_brochure") != null && !jsonObj.get("adv_brochure").isJsonNull()) && !jsonObj.get("adv_brochure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adv_brochure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adv_brochure").toString()));
      }
      if ((jsonObj.get("api_key") != null && !jsonObj.get("api_key").isJsonNull()) && !jsonObj.get("api_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_key").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("compliance_bcc_email_address") != null && !jsonObj.get("compliance_bcc_email_address").isJsonNull()) && !jsonObj.get("compliance_bcc_email_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compliance_bcc_email_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compliance_bcc_email_address").toString()));
      }
      if ((jsonObj.get("dashboard_url") != null && !jsonObj.get("dashboard_url").isJsonNull()) && !jsonObj.get("dashboard_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashboard_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dashboard_url").toString()));
      }
      if ((jsonObj.get("disclosure") != null && !jsonObj.get("disclosure").isJsonNull()) && !jsonObj.get("disclosure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disclosure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disclosure").toString()));
      }
      if ((jsonObj.get("email_report_blast") != null && !jsonObj.get("email_report_blast").isJsonNull()) && !jsonObj.get("email_report_blast").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_report_blast` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_report_blast").toString()));
      }
      if ((jsonObj.get("external_options") != null && !jsonObj.get("external_options").isJsonNull()) && !jsonObj.get("external_options").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_options` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_options").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("linkedin") != null && !jsonObj.get("linkedin").isJsonNull()) && !jsonObj.get("linkedin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedin").toString()));
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) && !jsonObj.get("plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan").toString()));
      }
      if ((jsonObj.get("profile_picture") != null && !jsonObj.get("profile_picture").isJsonNull()) && !jsonObj.get("profile_picture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_picture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_picture").toString()));
      }
      if ((jsonObj.get("reg_number") != null && !jsonObj.get("reg_number").isJsonNull()) && !jsonObj.get("reg_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reg_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reg_number").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("twitter_handle") != null && !jsonObj.get("twitter_handle").isJsonNull()) && !jsonObj.get("twitter_handle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitter_handle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitter_handle").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Advisor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Advisor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Advisor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Advisor.class));

       return (TypeAdapter<T>) new TypeAdapter<Advisor>() {
           @Override
           public void write(JsonWriter out, Advisor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Advisor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Advisor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Advisor
   * @throws IOException if the JSON string is invalid with respect to Advisor
   */
  public static Advisor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Advisor.class);
  }

  /**
   * Convert an instance of Advisor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

