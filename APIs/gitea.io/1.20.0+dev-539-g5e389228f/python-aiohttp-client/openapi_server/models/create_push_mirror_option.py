# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreatePushMirrorOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interval: str=None, remote_address: str=None, remote_password: str=None, remote_username: str=None, sync_on_commit: bool=None):
        """CreatePushMirrorOption - a model defined in OpenAPI

        :param interval: The interval of this CreatePushMirrorOption.
        :param remote_address: The remote_address of this CreatePushMirrorOption.
        :param remote_password: The remote_password of this CreatePushMirrorOption.
        :param remote_username: The remote_username of this CreatePushMirrorOption.
        :param sync_on_commit: The sync_on_commit of this CreatePushMirrorOption.
        """
        self.openapi_types = {
            'interval': str,
            'remote_address': str,
            'remote_password': str,
            'remote_username': str,
            'sync_on_commit': bool
        }

        self.attribute_map = {
            'interval': 'interval',
            'remote_address': 'remote_address',
            'remote_password': 'remote_password',
            'remote_username': 'remote_username',
            'sync_on_commit': 'sync_on_commit'
        }

        self._interval = interval
        self._remote_address = remote_address
        self._remote_password = remote_password
        self._remote_username = remote_username
        self._sync_on_commit = sync_on_commit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePushMirrorOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePushMirrorOption of this CreatePushMirrorOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interval(self):
        """Gets the interval of this CreatePushMirrorOption.


        :return: The interval of this CreatePushMirrorOption.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this CreatePushMirrorOption.


        :param interval: The interval of this CreatePushMirrorOption.
        :type interval: str
        """

        self._interval = interval

    @property
    def remote_address(self):
        """Gets the remote_address of this CreatePushMirrorOption.


        :return: The remote_address of this CreatePushMirrorOption.
        :rtype: str
        """
        return self._remote_address

    @remote_address.setter
    def remote_address(self, remote_address):
        """Sets the remote_address of this CreatePushMirrorOption.


        :param remote_address: The remote_address of this CreatePushMirrorOption.
        :type remote_address: str
        """

        self._remote_address = remote_address

    @property
    def remote_password(self):
        """Gets the remote_password of this CreatePushMirrorOption.


        :return: The remote_password of this CreatePushMirrorOption.
        :rtype: str
        """
        return self._remote_password

    @remote_password.setter
    def remote_password(self, remote_password):
        """Sets the remote_password of this CreatePushMirrorOption.


        :param remote_password: The remote_password of this CreatePushMirrorOption.
        :type remote_password: str
        """

        self._remote_password = remote_password

    @property
    def remote_username(self):
        """Gets the remote_username of this CreatePushMirrorOption.


        :return: The remote_username of this CreatePushMirrorOption.
        :rtype: str
        """
        return self._remote_username

    @remote_username.setter
    def remote_username(self, remote_username):
        """Sets the remote_username of this CreatePushMirrorOption.


        :param remote_username: The remote_username of this CreatePushMirrorOption.
        :type remote_username: str
        """

        self._remote_username = remote_username

    @property
    def sync_on_commit(self):
        """Gets the sync_on_commit of this CreatePushMirrorOption.


        :return: The sync_on_commit of this CreatePushMirrorOption.
        :rtype: bool
        """
        return self._sync_on_commit

    @sync_on_commit.setter
    def sync_on_commit(self, sync_on_commit):
        """Sets the sync_on_commit of this CreatePushMirrorOption.


        :param sync_on_commit: The sync_on_commit of this CreatePushMirrorOption.
        :type sync_on_commit: bool
        """

        self._sync_on_commit = sync_on_commit
