# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EditOrgOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, full_name: str=None, location: str=None, repo_admin_change_team_access: bool=None, visibility: str=None, website: str=None):
        """EditOrgOption - a model defined in OpenAPI

        :param description: The description of this EditOrgOption.
        :param full_name: The full_name of this EditOrgOption.
        :param location: The location of this EditOrgOption.
        :param repo_admin_change_team_access: The repo_admin_change_team_access of this EditOrgOption.
        :param visibility: The visibility of this EditOrgOption.
        :param website: The website of this EditOrgOption.
        """
        self.openapi_types = {
            'description': str,
            'full_name': str,
            'location': str,
            'repo_admin_change_team_access': bool,
            'visibility': str,
            'website': str
        }

        self.attribute_map = {
            'description': 'description',
            'full_name': 'full_name',
            'location': 'location',
            'repo_admin_change_team_access': 'repo_admin_change_team_access',
            'visibility': 'visibility',
            'website': 'website'
        }

        self._description = description
        self._full_name = full_name
        self._location = location
        self._repo_admin_change_team_access = repo_admin_change_team_access
        self._visibility = visibility
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditOrgOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EditOrgOption of this EditOrgOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this EditOrgOption.


        :return: The description of this EditOrgOption.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EditOrgOption.


        :param description: The description of this EditOrgOption.
        :type description: str
        """

        self._description = description

    @property
    def full_name(self):
        """Gets the full_name of this EditOrgOption.


        :return: The full_name of this EditOrgOption.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this EditOrgOption.


        :param full_name: The full_name of this EditOrgOption.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def location(self):
        """Gets the location of this EditOrgOption.


        :return: The location of this EditOrgOption.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EditOrgOption.


        :param location: The location of this EditOrgOption.
        :type location: str
        """

        self._location = location

    @property
    def repo_admin_change_team_access(self):
        """Gets the repo_admin_change_team_access of this EditOrgOption.


        :return: The repo_admin_change_team_access of this EditOrgOption.
        :rtype: bool
        """
        return self._repo_admin_change_team_access

    @repo_admin_change_team_access.setter
    def repo_admin_change_team_access(self, repo_admin_change_team_access):
        """Sets the repo_admin_change_team_access of this EditOrgOption.


        :param repo_admin_change_team_access: The repo_admin_change_team_access of this EditOrgOption.
        :type repo_admin_change_team_access: bool
        """

        self._repo_admin_change_team_access = repo_admin_change_team_access

    @property
    def visibility(self):
        """Gets the visibility of this EditOrgOption.

        possible values are `public`, `limited` or `private`

        :return: The visibility of this EditOrgOption.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this EditOrgOption.

        possible values are `public`, `limited` or `private`

        :param visibility: The visibility of this EditOrgOption.
        :type visibility: str
        """
        allowed_values = ["public", "limited", "private"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility

    @property
    def website(self):
        """Gets the website of this EditOrgOption.


        :return: The website of this EditOrgOption.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this EditOrgOption.


        :param website: The website of this EditOrgOption.
        :type website: str
        """

        self._website = website
