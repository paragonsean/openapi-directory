# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MarkupOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: str=None, file_path: str=None, mode: str=None, text: str=None, wiki: bool=None):
        """MarkupOption - a model defined in OpenAPI

        :param context: The context of this MarkupOption.
        :param file_path: The file_path of this MarkupOption.
        :param mode: The mode of this MarkupOption.
        :param text: The text of this MarkupOption.
        :param wiki: The wiki of this MarkupOption.
        """
        self.openapi_types = {
            'context': str,
            'file_path': str,
            'mode': str,
            'text': str,
            'wiki': bool
        }

        self.attribute_map = {
            'context': 'Context',
            'file_path': 'FilePath',
            'mode': 'Mode',
            'text': 'Text',
            'wiki': 'Wiki'
        }

        self._context = context
        self._file_path = file_path
        self._mode = mode
        self._text = text
        self._wiki = wiki

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarkupOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MarkupOption of this MarkupOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this MarkupOption.

        Context to render  in: body

        :return: The context of this MarkupOption.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this MarkupOption.

        Context to render  in: body

        :param context: The context of this MarkupOption.
        :type context: str
        """

        self._context = context

    @property
    def file_path(self):
        """Gets the file_path of this MarkupOption.

        File path for detecting extension in file mode  in: body

        :return: The file_path of this MarkupOption.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this MarkupOption.

        File path for detecting extension in file mode  in: body

        :param file_path: The file_path of this MarkupOption.
        :type file_path: str
        """

        self._file_path = file_path

    @property
    def mode(self):
        """Gets the mode of this MarkupOption.

        Mode to render (comment, gfm, markdown, file)  in: body

        :return: The mode of this MarkupOption.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this MarkupOption.

        Mode to render (comment, gfm, markdown, file)  in: body

        :param mode: The mode of this MarkupOption.
        :type mode: str
        """

        self._mode = mode

    @property
    def text(self):
        """Gets the text of this MarkupOption.

        Text markup to render  in: body

        :return: The text of this MarkupOption.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this MarkupOption.

        Text markup to render  in: body

        :param text: The text of this MarkupOption.
        :type text: str
        """

        self._text = text

    @property
    def wiki(self):
        """Gets the wiki of this MarkupOption.

        Is it a wiki page ?  in: body

        :return: The wiki of this MarkupOption.
        :rtype: bool
        """
        return self._wiki

    @wiki.setter
    def wiki(self, wiki):
        """Sets the wiki of this MarkupOption.

        Is it a wiki page ?  in: body

        :param wiki: The wiki of this MarkupOption.
        :type wiki: bool
        """

        self._wiki = wiki
