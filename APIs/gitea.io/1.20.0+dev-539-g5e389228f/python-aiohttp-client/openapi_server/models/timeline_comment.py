# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment import Comment
from openapi_server.models.issue import Issue
from openapi_server.models.label import Label
from openapi_server.models.milestone import Milestone
from openapi_server.models.team import Team
from openapi_server.models.tracked_time import TrackedTime
from openapi_server.models.user import User
from openapi_server import util


class TimelineComment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignee: User=None, assignee_team: Team=None, body: str=None, created_at: datetime=None, dependent_issue: Issue=None, html_url: str=None, id: int=None, issue_url: str=None, label: Label=None, milestone: Milestone=None, new_ref: str=None, new_title: str=None, old_milestone: Milestone=None, old_project_id: int=None, old_ref: str=None, old_title: str=None, project_id: int=None, pull_request_url: str=None, ref_action: str=None, ref_comment: Comment=None, ref_commit_sha: str=None, ref_issue: Issue=None, removed_assignee: bool=None, resolve_doer: User=None, review_id: int=None, tracked_time: TrackedTime=None, type: str=None, updated_at: datetime=None, user: User=None):
        """TimelineComment - a model defined in OpenAPI

        :param assignee: The assignee of this TimelineComment.
        :param assignee_team: The assignee_team of this TimelineComment.
        :param body: The body of this TimelineComment.
        :param created_at: The created_at of this TimelineComment.
        :param dependent_issue: The dependent_issue of this TimelineComment.
        :param html_url: The html_url of this TimelineComment.
        :param id: The id of this TimelineComment.
        :param issue_url: The issue_url of this TimelineComment.
        :param label: The label of this TimelineComment.
        :param milestone: The milestone of this TimelineComment.
        :param new_ref: The new_ref of this TimelineComment.
        :param new_title: The new_title of this TimelineComment.
        :param old_milestone: The old_milestone of this TimelineComment.
        :param old_project_id: The old_project_id of this TimelineComment.
        :param old_ref: The old_ref of this TimelineComment.
        :param old_title: The old_title of this TimelineComment.
        :param project_id: The project_id of this TimelineComment.
        :param pull_request_url: The pull_request_url of this TimelineComment.
        :param ref_action: The ref_action of this TimelineComment.
        :param ref_comment: The ref_comment of this TimelineComment.
        :param ref_commit_sha: The ref_commit_sha of this TimelineComment.
        :param ref_issue: The ref_issue of this TimelineComment.
        :param removed_assignee: The removed_assignee of this TimelineComment.
        :param resolve_doer: The resolve_doer of this TimelineComment.
        :param review_id: The review_id of this TimelineComment.
        :param tracked_time: The tracked_time of this TimelineComment.
        :param type: The type of this TimelineComment.
        :param updated_at: The updated_at of this TimelineComment.
        :param user: The user of this TimelineComment.
        """
        self.openapi_types = {
            'assignee': User,
            'assignee_team': Team,
            'body': str,
            'created_at': datetime,
            'dependent_issue': Issue,
            'html_url': str,
            'id': int,
            'issue_url': str,
            'label': Label,
            'milestone': Milestone,
            'new_ref': str,
            'new_title': str,
            'old_milestone': Milestone,
            'old_project_id': int,
            'old_ref': str,
            'old_title': str,
            'project_id': int,
            'pull_request_url': str,
            'ref_action': str,
            'ref_comment': Comment,
            'ref_commit_sha': str,
            'ref_issue': Issue,
            'removed_assignee': bool,
            'resolve_doer': User,
            'review_id': int,
            'tracked_time': TrackedTime,
            'type': str,
            'updated_at': datetime,
            'user': User
        }

        self.attribute_map = {
            'assignee': 'assignee',
            'assignee_team': 'assignee_team',
            'body': 'body',
            'created_at': 'created_at',
            'dependent_issue': 'dependent_issue',
            'html_url': 'html_url',
            'id': 'id',
            'issue_url': 'issue_url',
            'label': 'label',
            'milestone': 'milestone',
            'new_ref': 'new_ref',
            'new_title': 'new_title',
            'old_milestone': 'old_milestone',
            'old_project_id': 'old_project_id',
            'old_ref': 'old_ref',
            'old_title': 'old_title',
            'project_id': 'project_id',
            'pull_request_url': 'pull_request_url',
            'ref_action': 'ref_action',
            'ref_comment': 'ref_comment',
            'ref_commit_sha': 'ref_commit_sha',
            'ref_issue': 'ref_issue',
            'removed_assignee': 'removed_assignee',
            'resolve_doer': 'resolve_doer',
            'review_id': 'review_id',
            'tracked_time': 'tracked_time',
            'type': 'type',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._assignee = assignee
        self._assignee_team = assignee_team
        self._body = body
        self._created_at = created_at
        self._dependent_issue = dependent_issue
        self._html_url = html_url
        self._id = id
        self._issue_url = issue_url
        self._label = label
        self._milestone = milestone
        self._new_ref = new_ref
        self._new_title = new_title
        self._old_milestone = old_milestone
        self._old_project_id = old_project_id
        self._old_ref = old_ref
        self._old_title = old_title
        self._project_id = project_id
        self._pull_request_url = pull_request_url
        self._ref_action = ref_action
        self._ref_comment = ref_comment
        self._ref_commit_sha = ref_commit_sha
        self._ref_issue = ref_issue
        self._removed_assignee = removed_assignee
        self._resolve_doer = resolve_doer
        self._review_id = review_id
        self._tracked_time = tracked_time
        self._type = type
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimelineComment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimelineComment of this TimelineComment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignee(self):
        """Gets the assignee of this TimelineComment.


        :return: The assignee of this TimelineComment.
        :rtype: User
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this TimelineComment.


        :param assignee: The assignee of this TimelineComment.
        :type assignee: User
        """

        self._assignee = assignee

    @property
    def assignee_team(self):
        """Gets the assignee_team of this TimelineComment.


        :return: The assignee_team of this TimelineComment.
        :rtype: Team
        """
        return self._assignee_team

    @assignee_team.setter
    def assignee_team(self, assignee_team):
        """Sets the assignee_team of this TimelineComment.


        :param assignee_team: The assignee_team of this TimelineComment.
        :type assignee_team: Team
        """

        self._assignee_team = assignee_team

    @property
    def body(self):
        """Gets the body of this TimelineComment.


        :return: The body of this TimelineComment.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this TimelineComment.


        :param body: The body of this TimelineComment.
        :type body: str
        """

        self._body = body

    @property
    def created_at(self):
        """Gets the created_at of this TimelineComment.


        :return: The created_at of this TimelineComment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TimelineComment.


        :param created_at: The created_at of this TimelineComment.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def dependent_issue(self):
        """Gets the dependent_issue of this TimelineComment.


        :return: The dependent_issue of this TimelineComment.
        :rtype: Issue
        """
        return self._dependent_issue

    @dependent_issue.setter
    def dependent_issue(self, dependent_issue):
        """Sets the dependent_issue of this TimelineComment.


        :param dependent_issue: The dependent_issue of this TimelineComment.
        :type dependent_issue: Issue
        """

        self._dependent_issue = dependent_issue

    @property
    def html_url(self):
        """Gets the html_url of this TimelineComment.


        :return: The html_url of this TimelineComment.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this TimelineComment.


        :param html_url: The html_url of this TimelineComment.
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this TimelineComment.


        :return: The id of this TimelineComment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimelineComment.


        :param id: The id of this TimelineComment.
        :type id: int
        """

        self._id = id

    @property
    def issue_url(self):
        """Gets the issue_url of this TimelineComment.


        :return: The issue_url of this TimelineComment.
        :rtype: str
        """
        return self._issue_url

    @issue_url.setter
    def issue_url(self, issue_url):
        """Sets the issue_url of this TimelineComment.


        :param issue_url: The issue_url of this TimelineComment.
        :type issue_url: str
        """

        self._issue_url = issue_url

    @property
    def label(self):
        """Gets the label of this TimelineComment.


        :return: The label of this TimelineComment.
        :rtype: Label
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this TimelineComment.


        :param label: The label of this TimelineComment.
        :type label: Label
        """

        self._label = label

    @property
    def milestone(self):
        """Gets the milestone of this TimelineComment.


        :return: The milestone of this TimelineComment.
        :rtype: Milestone
        """
        return self._milestone

    @milestone.setter
    def milestone(self, milestone):
        """Sets the milestone of this TimelineComment.


        :param milestone: The milestone of this TimelineComment.
        :type milestone: Milestone
        """

        self._milestone = milestone

    @property
    def new_ref(self):
        """Gets the new_ref of this TimelineComment.


        :return: The new_ref of this TimelineComment.
        :rtype: str
        """
        return self._new_ref

    @new_ref.setter
    def new_ref(self, new_ref):
        """Sets the new_ref of this TimelineComment.


        :param new_ref: The new_ref of this TimelineComment.
        :type new_ref: str
        """

        self._new_ref = new_ref

    @property
    def new_title(self):
        """Gets the new_title of this TimelineComment.


        :return: The new_title of this TimelineComment.
        :rtype: str
        """
        return self._new_title

    @new_title.setter
    def new_title(self, new_title):
        """Sets the new_title of this TimelineComment.


        :param new_title: The new_title of this TimelineComment.
        :type new_title: str
        """

        self._new_title = new_title

    @property
    def old_milestone(self):
        """Gets the old_milestone of this TimelineComment.


        :return: The old_milestone of this TimelineComment.
        :rtype: Milestone
        """
        return self._old_milestone

    @old_milestone.setter
    def old_milestone(self, old_milestone):
        """Sets the old_milestone of this TimelineComment.


        :param old_milestone: The old_milestone of this TimelineComment.
        :type old_milestone: Milestone
        """

        self._old_milestone = old_milestone

    @property
    def old_project_id(self):
        """Gets the old_project_id of this TimelineComment.


        :return: The old_project_id of this TimelineComment.
        :rtype: int
        """
        return self._old_project_id

    @old_project_id.setter
    def old_project_id(self, old_project_id):
        """Sets the old_project_id of this TimelineComment.


        :param old_project_id: The old_project_id of this TimelineComment.
        :type old_project_id: int
        """

        self._old_project_id = old_project_id

    @property
    def old_ref(self):
        """Gets the old_ref of this TimelineComment.


        :return: The old_ref of this TimelineComment.
        :rtype: str
        """
        return self._old_ref

    @old_ref.setter
    def old_ref(self, old_ref):
        """Sets the old_ref of this TimelineComment.


        :param old_ref: The old_ref of this TimelineComment.
        :type old_ref: str
        """

        self._old_ref = old_ref

    @property
    def old_title(self):
        """Gets the old_title of this TimelineComment.


        :return: The old_title of this TimelineComment.
        :rtype: str
        """
        return self._old_title

    @old_title.setter
    def old_title(self, old_title):
        """Sets the old_title of this TimelineComment.


        :param old_title: The old_title of this TimelineComment.
        :type old_title: str
        """

        self._old_title = old_title

    @property
    def project_id(self):
        """Gets the project_id of this TimelineComment.


        :return: The project_id of this TimelineComment.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this TimelineComment.


        :param project_id: The project_id of this TimelineComment.
        :type project_id: int
        """

        self._project_id = project_id

    @property
    def pull_request_url(self):
        """Gets the pull_request_url of this TimelineComment.


        :return: The pull_request_url of this TimelineComment.
        :rtype: str
        """
        return self._pull_request_url

    @pull_request_url.setter
    def pull_request_url(self, pull_request_url):
        """Sets the pull_request_url of this TimelineComment.


        :param pull_request_url: The pull_request_url of this TimelineComment.
        :type pull_request_url: str
        """

        self._pull_request_url = pull_request_url

    @property
    def ref_action(self):
        """Gets the ref_action of this TimelineComment.


        :return: The ref_action of this TimelineComment.
        :rtype: str
        """
        return self._ref_action

    @ref_action.setter
    def ref_action(self, ref_action):
        """Sets the ref_action of this TimelineComment.


        :param ref_action: The ref_action of this TimelineComment.
        :type ref_action: str
        """

        self._ref_action = ref_action

    @property
    def ref_comment(self):
        """Gets the ref_comment of this TimelineComment.


        :return: The ref_comment of this TimelineComment.
        :rtype: Comment
        """
        return self._ref_comment

    @ref_comment.setter
    def ref_comment(self, ref_comment):
        """Sets the ref_comment of this TimelineComment.


        :param ref_comment: The ref_comment of this TimelineComment.
        :type ref_comment: Comment
        """

        self._ref_comment = ref_comment

    @property
    def ref_commit_sha(self):
        """Gets the ref_commit_sha of this TimelineComment.

        commit SHA where issue/PR was referenced

        :return: The ref_commit_sha of this TimelineComment.
        :rtype: str
        """
        return self._ref_commit_sha

    @ref_commit_sha.setter
    def ref_commit_sha(self, ref_commit_sha):
        """Sets the ref_commit_sha of this TimelineComment.

        commit SHA where issue/PR was referenced

        :param ref_commit_sha: The ref_commit_sha of this TimelineComment.
        :type ref_commit_sha: str
        """

        self._ref_commit_sha = ref_commit_sha

    @property
    def ref_issue(self):
        """Gets the ref_issue of this TimelineComment.


        :return: The ref_issue of this TimelineComment.
        :rtype: Issue
        """
        return self._ref_issue

    @ref_issue.setter
    def ref_issue(self, ref_issue):
        """Sets the ref_issue of this TimelineComment.


        :param ref_issue: The ref_issue of this TimelineComment.
        :type ref_issue: Issue
        """

        self._ref_issue = ref_issue

    @property
    def removed_assignee(self):
        """Gets the removed_assignee of this TimelineComment.

        whether the assignees were removed or added

        :return: The removed_assignee of this TimelineComment.
        :rtype: bool
        """
        return self._removed_assignee

    @removed_assignee.setter
    def removed_assignee(self, removed_assignee):
        """Sets the removed_assignee of this TimelineComment.

        whether the assignees were removed or added

        :param removed_assignee: The removed_assignee of this TimelineComment.
        :type removed_assignee: bool
        """

        self._removed_assignee = removed_assignee

    @property
    def resolve_doer(self):
        """Gets the resolve_doer of this TimelineComment.


        :return: The resolve_doer of this TimelineComment.
        :rtype: User
        """
        return self._resolve_doer

    @resolve_doer.setter
    def resolve_doer(self, resolve_doer):
        """Sets the resolve_doer of this TimelineComment.


        :param resolve_doer: The resolve_doer of this TimelineComment.
        :type resolve_doer: User
        """

        self._resolve_doer = resolve_doer

    @property
    def review_id(self):
        """Gets the review_id of this TimelineComment.


        :return: The review_id of this TimelineComment.
        :rtype: int
        """
        return self._review_id

    @review_id.setter
    def review_id(self, review_id):
        """Sets the review_id of this TimelineComment.


        :param review_id: The review_id of this TimelineComment.
        :type review_id: int
        """

        self._review_id = review_id

    @property
    def tracked_time(self):
        """Gets the tracked_time of this TimelineComment.


        :return: The tracked_time of this TimelineComment.
        :rtype: TrackedTime
        """
        return self._tracked_time

    @tracked_time.setter
    def tracked_time(self, tracked_time):
        """Sets the tracked_time of this TimelineComment.


        :param tracked_time: The tracked_time of this TimelineComment.
        :type tracked_time: TrackedTime
        """

        self._tracked_time = tracked_time

    @property
    def type(self):
        """Gets the type of this TimelineComment.


        :return: The type of this TimelineComment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TimelineComment.


        :param type: The type of this TimelineComment.
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this TimelineComment.


        :return: The updated_at of this TimelineComment.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TimelineComment.


        :param updated_at: The updated_at of this TimelineComment.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this TimelineComment.


        :return: The user of this TimelineComment.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this TimelineComment.


        :param user: The user of this TimelineComment.
        :type user: User
        """

        self._user = user
