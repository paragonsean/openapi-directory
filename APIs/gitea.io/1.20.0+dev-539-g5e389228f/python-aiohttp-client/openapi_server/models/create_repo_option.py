# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateRepoOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_init: bool=None, default_branch: str=None, description: str=None, gitignores: str=None, issue_labels: str=None, license: str=None, name: str=None, private: bool=None, readme: str=None, template: bool=None, trust_model: str=None):
        """CreateRepoOption - a model defined in OpenAPI

        :param auto_init: The auto_init of this CreateRepoOption.
        :param default_branch: The default_branch of this CreateRepoOption.
        :param description: The description of this CreateRepoOption.
        :param gitignores: The gitignores of this CreateRepoOption.
        :param issue_labels: The issue_labels of this CreateRepoOption.
        :param license: The license of this CreateRepoOption.
        :param name: The name of this CreateRepoOption.
        :param private: The private of this CreateRepoOption.
        :param readme: The readme of this CreateRepoOption.
        :param template: The template of this CreateRepoOption.
        :param trust_model: The trust_model of this CreateRepoOption.
        """
        self.openapi_types = {
            'auto_init': bool,
            'default_branch': str,
            'description': str,
            'gitignores': str,
            'issue_labels': str,
            'license': str,
            'name': str,
            'private': bool,
            'readme': str,
            'template': bool,
            'trust_model': str
        }

        self.attribute_map = {
            'auto_init': 'auto_init',
            'default_branch': 'default_branch',
            'description': 'description',
            'gitignores': 'gitignores',
            'issue_labels': 'issue_labels',
            'license': 'license',
            'name': 'name',
            'private': 'private',
            'readme': 'readme',
            'template': 'template',
            'trust_model': 'trust_model'
        }

        self._auto_init = auto_init
        self._default_branch = default_branch
        self._description = description
        self._gitignores = gitignores
        self._issue_labels = issue_labels
        self._license = license
        self._name = name
        self._private = private
        self._readme = readme
        self._template = template
        self._trust_model = trust_model

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRepoOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRepoOption of this CreateRepoOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_init(self):
        """Gets the auto_init of this CreateRepoOption.

        Whether the repository should be auto-initialized?

        :return: The auto_init of this CreateRepoOption.
        :rtype: bool
        """
        return self._auto_init

    @auto_init.setter
    def auto_init(self, auto_init):
        """Sets the auto_init of this CreateRepoOption.

        Whether the repository should be auto-initialized?

        :param auto_init: The auto_init of this CreateRepoOption.
        :type auto_init: bool
        """

        self._auto_init = auto_init

    @property
    def default_branch(self):
        """Gets the default_branch of this CreateRepoOption.

        DefaultBranch of the repository (used when initializes and in template)

        :return: The default_branch of this CreateRepoOption.
        :rtype: str
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this CreateRepoOption.

        DefaultBranch of the repository (used when initializes and in template)

        :param default_branch: The default_branch of this CreateRepoOption.
        :type default_branch: str
        """

        self._default_branch = default_branch

    @property
    def description(self):
        """Gets the description of this CreateRepoOption.

        Description of the repository to create

        :return: The description of this CreateRepoOption.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateRepoOption.

        Description of the repository to create

        :param description: The description of this CreateRepoOption.
        :type description: str
        """

        self._description = description

    @property
    def gitignores(self):
        """Gets the gitignores of this CreateRepoOption.

        Gitignores to use

        :return: The gitignores of this CreateRepoOption.
        :rtype: str
        """
        return self._gitignores

    @gitignores.setter
    def gitignores(self, gitignores):
        """Sets the gitignores of this CreateRepoOption.

        Gitignores to use

        :param gitignores: The gitignores of this CreateRepoOption.
        :type gitignores: str
        """

        self._gitignores = gitignores

    @property
    def issue_labels(self):
        """Gets the issue_labels of this CreateRepoOption.

        Label-Set to use

        :return: The issue_labels of this CreateRepoOption.
        :rtype: str
        """
        return self._issue_labels

    @issue_labels.setter
    def issue_labels(self, issue_labels):
        """Sets the issue_labels of this CreateRepoOption.

        Label-Set to use

        :param issue_labels: The issue_labels of this CreateRepoOption.
        :type issue_labels: str
        """

        self._issue_labels = issue_labels

    @property
    def license(self):
        """Gets the license of this CreateRepoOption.

        License to use

        :return: The license of this CreateRepoOption.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this CreateRepoOption.

        License to use

        :param license: The license of this CreateRepoOption.
        :type license: str
        """

        self._license = license

    @property
    def name(self):
        """Gets the name of this CreateRepoOption.

        Name of the repository to create

        :return: The name of this CreateRepoOption.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRepoOption.

        Name of the repository to create

        :param name: The name of this CreateRepoOption.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def private(self):
        """Gets the private of this CreateRepoOption.

        Whether the repository is private

        :return: The private of this CreateRepoOption.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this CreateRepoOption.

        Whether the repository is private

        :param private: The private of this CreateRepoOption.
        :type private: bool
        """

        self._private = private

    @property
    def readme(self):
        """Gets the readme of this CreateRepoOption.

        Readme of the repository to create

        :return: The readme of this CreateRepoOption.
        :rtype: str
        """
        return self._readme

    @readme.setter
    def readme(self, readme):
        """Sets the readme of this CreateRepoOption.

        Readme of the repository to create

        :param readme: The readme of this CreateRepoOption.
        :type readme: str
        """

        self._readme = readme

    @property
    def template(self):
        """Gets the template of this CreateRepoOption.

        Whether the repository is template

        :return: The template of this CreateRepoOption.
        :rtype: bool
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this CreateRepoOption.

        Whether the repository is template

        :param template: The template of this CreateRepoOption.
        :type template: bool
        """

        self._template = template

    @property
    def trust_model(self):
        """Gets the trust_model of this CreateRepoOption.

        TrustModel of the repository

        :return: The trust_model of this CreateRepoOption.
        :rtype: str
        """
        return self._trust_model

    @trust_model.setter
    def trust_model(self, trust_model):
        """Sets the trust_model of this CreateRepoOption.

        TrustModel of the repository

        :param trust_model: The trust_model of this CreateRepoOption.
        :type trust_model: str
        """
        allowed_values = ["default", "collaborator", "committer", "collaboratorcommitter"]  # noqa: E501
        if trust_model not in allowed_values:
            raise ValueError(
                "Invalid value for `trust_model` ({0}), must be one of {1}"
                .format(trust_model, allowed_values)
            )

        self._trust_model = trust_model
