# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gpg_key_email import GPGKeyEmail
from openapi_server import util


class GPGKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_certify: bool=None, can_encrypt_comms: bool=None, can_encrypt_storage: bool=None, can_sign: bool=None, created_at: datetime=None, emails: List[GPGKeyEmail]=None, expires_at: datetime=None, id: int=None, key_id: str=None, primary_key_id: str=None, public_key: str=None, subkeys: List[GPGKey]=None, verified: bool=None):
        """GPGKey - a model defined in OpenAPI

        :param can_certify: The can_certify of this GPGKey.
        :param can_encrypt_comms: The can_encrypt_comms of this GPGKey.
        :param can_encrypt_storage: The can_encrypt_storage of this GPGKey.
        :param can_sign: The can_sign of this GPGKey.
        :param created_at: The created_at of this GPGKey.
        :param emails: The emails of this GPGKey.
        :param expires_at: The expires_at of this GPGKey.
        :param id: The id of this GPGKey.
        :param key_id: The key_id of this GPGKey.
        :param primary_key_id: The primary_key_id of this GPGKey.
        :param public_key: The public_key of this GPGKey.
        :param subkeys: The subkeys of this GPGKey.
        :param verified: The verified of this GPGKey.
        """
        self.openapi_types = {
            'can_certify': bool,
            'can_encrypt_comms': bool,
            'can_encrypt_storage': bool,
            'can_sign': bool,
            'created_at': datetime,
            'emails': List[GPGKeyEmail],
            'expires_at': datetime,
            'id': int,
            'key_id': str,
            'primary_key_id': str,
            'public_key': str,
            'subkeys': List[GPGKey],
            'verified': bool
        }

        self.attribute_map = {
            'can_certify': 'can_certify',
            'can_encrypt_comms': 'can_encrypt_comms',
            'can_encrypt_storage': 'can_encrypt_storage',
            'can_sign': 'can_sign',
            'created_at': 'created_at',
            'emails': 'emails',
            'expires_at': 'expires_at',
            'id': 'id',
            'key_id': 'key_id',
            'primary_key_id': 'primary_key_id',
            'public_key': 'public_key',
            'subkeys': 'subkeys',
            'verified': 'verified'
        }

        self._can_certify = can_certify
        self._can_encrypt_comms = can_encrypt_comms
        self._can_encrypt_storage = can_encrypt_storage
        self._can_sign = can_sign
        self._created_at = created_at
        self._emails = emails
        self._expires_at = expires_at
        self._id = id
        self._key_id = key_id
        self._primary_key_id = primary_key_id
        self._public_key = public_key
        self._subkeys = subkeys
        self._verified = verified

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GPGKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GPGKey of this GPGKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_certify(self):
        """Gets the can_certify of this GPGKey.


        :return: The can_certify of this GPGKey.
        :rtype: bool
        """
        return self._can_certify

    @can_certify.setter
    def can_certify(self, can_certify):
        """Sets the can_certify of this GPGKey.


        :param can_certify: The can_certify of this GPGKey.
        :type can_certify: bool
        """

        self._can_certify = can_certify

    @property
    def can_encrypt_comms(self):
        """Gets the can_encrypt_comms of this GPGKey.


        :return: The can_encrypt_comms of this GPGKey.
        :rtype: bool
        """
        return self._can_encrypt_comms

    @can_encrypt_comms.setter
    def can_encrypt_comms(self, can_encrypt_comms):
        """Sets the can_encrypt_comms of this GPGKey.


        :param can_encrypt_comms: The can_encrypt_comms of this GPGKey.
        :type can_encrypt_comms: bool
        """

        self._can_encrypt_comms = can_encrypt_comms

    @property
    def can_encrypt_storage(self):
        """Gets the can_encrypt_storage of this GPGKey.


        :return: The can_encrypt_storage of this GPGKey.
        :rtype: bool
        """
        return self._can_encrypt_storage

    @can_encrypt_storage.setter
    def can_encrypt_storage(self, can_encrypt_storage):
        """Sets the can_encrypt_storage of this GPGKey.


        :param can_encrypt_storage: The can_encrypt_storage of this GPGKey.
        :type can_encrypt_storage: bool
        """

        self._can_encrypt_storage = can_encrypt_storage

    @property
    def can_sign(self):
        """Gets the can_sign of this GPGKey.


        :return: The can_sign of this GPGKey.
        :rtype: bool
        """
        return self._can_sign

    @can_sign.setter
    def can_sign(self, can_sign):
        """Sets the can_sign of this GPGKey.


        :param can_sign: The can_sign of this GPGKey.
        :type can_sign: bool
        """

        self._can_sign = can_sign

    @property
    def created_at(self):
        """Gets the created_at of this GPGKey.


        :return: The created_at of this GPGKey.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GPGKey.


        :param created_at: The created_at of this GPGKey.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def emails(self):
        """Gets the emails of this GPGKey.


        :return: The emails of this GPGKey.
        :rtype: List[GPGKeyEmail]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this GPGKey.


        :param emails: The emails of this GPGKey.
        :type emails: List[GPGKeyEmail]
        """

        self._emails = emails

    @property
    def expires_at(self):
        """Gets the expires_at of this GPGKey.


        :return: The expires_at of this GPGKey.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this GPGKey.


        :param expires_at: The expires_at of this GPGKey.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    @property
    def id(self):
        """Gets the id of this GPGKey.


        :return: The id of this GPGKey.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GPGKey.


        :param id: The id of this GPGKey.
        :type id: int
        """

        self._id = id

    @property
    def key_id(self):
        """Gets the key_id of this GPGKey.


        :return: The key_id of this GPGKey.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this GPGKey.


        :param key_id: The key_id of this GPGKey.
        :type key_id: str
        """

        self._key_id = key_id

    @property
    def primary_key_id(self):
        """Gets the primary_key_id of this GPGKey.


        :return: The primary_key_id of this GPGKey.
        :rtype: str
        """
        return self._primary_key_id

    @primary_key_id.setter
    def primary_key_id(self, primary_key_id):
        """Sets the primary_key_id of this GPGKey.


        :param primary_key_id: The primary_key_id of this GPGKey.
        :type primary_key_id: str
        """

        self._primary_key_id = primary_key_id

    @property
    def public_key(self):
        """Gets the public_key of this GPGKey.


        :return: The public_key of this GPGKey.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this GPGKey.


        :param public_key: The public_key of this GPGKey.
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def subkeys(self):
        """Gets the subkeys of this GPGKey.


        :return: The subkeys of this GPGKey.
        :rtype: List[GPGKey]
        """
        return self._subkeys

    @subkeys.setter
    def subkeys(self, subkeys):
        """Sets the subkeys of this GPGKey.


        :param subkeys: The subkeys of this GPGKey.
        :type subkeys: List[GPGKey]
        """

        self._subkeys = subkeys

    @property
    def verified(self):
        """Gets the verified of this GPGKey.


        :return: The verified of this GPGKey.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this GPGKey.


        :param verified: The verified of this GPGKey.
        :type verified: bool
        """

        self._verified = verified
