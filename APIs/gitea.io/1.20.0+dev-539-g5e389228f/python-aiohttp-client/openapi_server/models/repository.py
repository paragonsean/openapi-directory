# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_tracker import ExternalTracker
from openapi_server.models.external_wiki import ExternalWiki
from openapi_server.models.internal_tracker import InternalTracker
from openapi_server.models.permission import Permission
from openapi_server.models.repo_transfer import RepoTransfer
from openapi_server.models.user import User
from openapi_server import util


class Repository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_merge_commits: bool=None, allow_rebase: bool=None, allow_rebase_explicit: bool=None, allow_rebase_update: bool=None, allow_squash_merge: bool=None, archived: bool=None, avatar_url: str=None, clone_url: str=None, created_at: datetime=None, default_allow_maintainer_edit: bool=None, default_branch: str=None, default_delete_branch_after_merge: bool=None, default_merge_style: str=None, description: str=None, empty: bool=None, external_tracker: ExternalTracker=None, external_wiki: ExternalWiki=None, fork: bool=None, forks_count: int=None, full_name: str=None, has_actions: bool=None, has_issues: bool=None, has_packages: bool=None, has_projects: bool=None, has_pull_requests: bool=None, has_releases: bool=None, has_wiki: bool=None, html_url: str=None, id: int=None, ignore_whitespace_conflicts: bool=None, internal: bool=None, internal_tracker: InternalTracker=None, language: str=None, languages_url: str=None, link: str=None, mirror: bool=None, mirror_interval: str=None, mirror_updated: datetime=None, name: str=None, open_issues_count: int=None, open_pr_counter: int=None, original_url: str=None, owner: User=None, parent: Repository=None, permissions: Permission=None, private: bool=None, release_counter: int=None, repo_transfer: RepoTransfer=None, size: int=None, ssh_url: str=None, stars_count: int=None, template: bool=None, updated_at: datetime=None, watchers_count: int=None, website: str=None):
        """Repository - a model defined in OpenAPI

        :param allow_merge_commits: The allow_merge_commits of this Repository.
        :param allow_rebase: The allow_rebase of this Repository.
        :param allow_rebase_explicit: The allow_rebase_explicit of this Repository.
        :param allow_rebase_update: The allow_rebase_update of this Repository.
        :param allow_squash_merge: The allow_squash_merge of this Repository.
        :param archived: The archived of this Repository.
        :param avatar_url: The avatar_url of this Repository.
        :param clone_url: The clone_url of this Repository.
        :param created_at: The created_at of this Repository.
        :param default_allow_maintainer_edit: The default_allow_maintainer_edit of this Repository.
        :param default_branch: The default_branch of this Repository.
        :param default_delete_branch_after_merge: The default_delete_branch_after_merge of this Repository.
        :param default_merge_style: The default_merge_style of this Repository.
        :param description: The description of this Repository.
        :param empty: The empty of this Repository.
        :param external_tracker: The external_tracker of this Repository.
        :param external_wiki: The external_wiki of this Repository.
        :param fork: The fork of this Repository.
        :param forks_count: The forks_count of this Repository.
        :param full_name: The full_name of this Repository.
        :param has_actions: The has_actions of this Repository.
        :param has_issues: The has_issues of this Repository.
        :param has_packages: The has_packages of this Repository.
        :param has_projects: The has_projects of this Repository.
        :param has_pull_requests: The has_pull_requests of this Repository.
        :param has_releases: The has_releases of this Repository.
        :param has_wiki: The has_wiki of this Repository.
        :param html_url: The html_url of this Repository.
        :param id: The id of this Repository.
        :param ignore_whitespace_conflicts: The ignore_whitespace_conflicts of this Repository.
        :param internal: The internal of this Repository.
        :param internal_tracker: The internal_tracker of this Repository.
        :param language: The language of this Repository.
        :param languages_url: The languages_url of this Repository.
        :param link: The link of this Repository.
        :param mirror: The mirror of this Repository.
        :param mirror_interval: The mirror_interval of this Repository.
        :param mirror_updated: The mirror_updated of this Repository.
        :param name: The name of this Repository.
        :param open_issues_count: The open_issues_count of this Repository.
        :param open_pr_counter: The open_pr_counter of this Repository.
        :param original_url: The original_url of this Repository.
        :param owner: The owner of this Repository.
        :param parent: The parent of this Repository.
        :param permissions: The permissions of this Repository.
        :param private: The private of this Repository.
        :param release_counter: The release_counter of this Repository.
        :param repo_transfer: The repo_transfer of this Repository.
        :param size: The size of this Repository.
        :param ssh_url: The ssh_url of this Repository.
        :param stars_count: The stars_count of this Repository.
        :param template: The template of this Repository.
        :param updated_at: The updated_at of this Repository.
        :param watchers_count: The watchers_count of this Repository.
        :param website: The website of this Repository.
        """
        self.openapi_types = {
            'allow_merge_commits': bool,
            'allow_rebase': bool,
            'allow_rebase_explicit': bool,
            'allow_rebase_update': bool,
            'allow_squash_merge': bool,
            'archived': bool,
            'avatar_url': str,
            'clone_url': str,
            'created_at': datetime,
            'default_allow_maintainer_edit': bool,
            'default_branch': str,
            'default_delete_branch_after_merge': bool,
            'default_merge_style': str,
            'description': str,
            'empty': bool,
            'external_tracker': ExternalTracker,
            'external_wiki': ExternalWiki,
            'fork': bool,
            'forks_count': int,
            'full_name': str,
            'has_actions': bool,
            'has_issues': bool,
            'has_packages': bool,
            'has_projects': bool,
            'has_pull_requests': bool,
            'has_releases': bool,
            'has_wiki': bool,
            'html_url': str,
            'id': int,
            'ignore_whitespace_conflicts': bool,
            'internal': bool,
            'internal_tracker': InternalTracker,
            'language': str,
            'languages_url': str,
            'link': str,
            'mirror': bool,
            'mirror_interval': str,
            'mirror_updated': datetime,
            'name': str,
            'open_issues_count': int,
            'open_pr_counter': int,
            'original_url': str,
            'owner': User,
            'parent': Repository,
            'permissions': Permission,
            'private': bool,
            'release_counter': int,
            'repo_transfer': RepoTransfer,
            'size': int,
            'ssh_url': str,
            'stars_count': int,
            'template': bool,
            'updated_at': datetime,
            'watchers_count': int,
            'website': str
        }

        self.attribute_map = {
            'allow_merge_commits': 'allow_merge_commits',
            'allow_rebase': 'allow_rebase',
            'allow_rebase_explicit': 'allow_rebase_explicit',
            'allow_rebase_update': 'allow_rebase_update',
            'allow_squash_merge': 'allow_squash_merge',
            'archived': 'archived',
            'avatar_url': 'avatar_url',
            'clone_url': 'clone_url',
            'created_at': 'created_at',
            'default_allow_maintainer_edit': 'default_allow_maintainer_edit',
            'default_branch': 'default_branch',
            'default_delete_branch_after_merge': 'default_delete_branch_after_merge',
            'default_merge_style': 'default_merge_style',
            'description': 'description',
            'empty': 'empty',
            'external_tracker': 'external_tracker',
            'external_wiki': 'external_wiki',
            'fork': 'fork',
            'forks_count': 'forks_count',
            'full_name': 'full_name',
            'has_actions': 'has_actions',
            'has_issues': 'has_issues',
            'has_packages': 'has_packages',
            'has_projects': 'has_projects',
            'has_pull_requests': 'has_pull_requests',
            'has_releases': 'has_releases',
            'has_wiki': 'has_wiki',
            'html_url': 'html_url',
            'id': 'id',
            'ignore_whitespace_conflicts': 'ignore_whitespace_conflicts',
            'internal': 'internal',
            'internal_tracker': 'internal_tracker',
            'language': 'language',
            'languages_url': 'languages_url',
            'link': 'link',
            'mirror': 'mirror',
            'mirror_interval': 'mirror_interval',
            'mirror_updated': 'mirror_updated',
            'name': 'name',
            'open_issues_count': 'open_issues_count',
            'open_pr_counter': 'open_pr_counter',
            'original_url': 'original_url',
            'owner': 'owner',
            'parent': 'parent',
            'permissions': 'permissions',
            'private': 'private',
            'release_counter': 'release_counter',
            'repo_transfer': 'repo_transfer',
            'size': 'size',
            'ssh_url': 'ssh_url',
            'stars_count': 'stars_count',
            'template': 'template',
            'updated_at': 'updated_at',
            'watchers_count': 'watchers_count',
            'website': 'website'
        }

        self._allow_merge_commits = allow_merge_commits
        self._allow_rebase = allow_rebase
        self._allow_rebase_explicit = allow_rebase_explicit
        self._allow_rebase_update = allow_rebase_update
        self._allow_squash_merge = allow_squash_merge
        self._archived = archived
        self._avatar_url = avatar_url
        self._clone_url = clone_url
        self._created_at = created_at
        self._default_allow_maintainer_edit = default_allow_maintainer_edit
        self._default_branch = default_branch
        self._default_delete_branch_after_merge = default_delete_branch_after_merge
        self._default_merge_style = default_merge_style
        self._description = description
        self._empty = empty
        self._external_tracker = external_tracker
        self._external_wiki = external_wiki
        self._fork = fork
        self._forks_count = forks_count
        self._full_name = full_name
        self._has_actions = has_actions
        self._has_issues = has_issues
        self._has_packages = has_packages
        self._has_projects = has_projects
        self._has_pull_requests = has_pull_requests
        self._has_releases = has_releases
        self._has_wiki = has_wiki
        self._html_url = html_url
        self._id = id
        self._ignore_whitespace_conflicts = ignore_whitespace_conflicts
        self._internal = internal
        self._internal_tracker = internal_tracker
        self._language = language
        self._languages_url = languages_url
        self._link = link
        self._mirror = mirror
        self._mirror_interval = mirror_interval
        self._mirror_updated = mirror_updated
        self._name = name
        self._open_issues_count = open_issues_count
        self._open_pr_counter = open_pr_counter
        self._original_url = original_url
        self._owner = owner
        self._parent = parent
        self._permissions = permissions
        self._private = private
        self._release_counter = release_counter
        self._repo_transfer = repo_transfer
        self._size = size
        self._ssh_url = ssh_url
        self._stars_count = stars_count
        self._template = template
        self._updated_at = updated_at
        self._watchers_count = watchers_count
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Repository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Repository of this Repository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_merge_commits(self):
        """Gets the allow_merge_commits of this Repository.


        :return: The allow_merge_commits of this Repository.
        :rtype: bool
        """
        return self._allow_merge_commits

    @allow_merge_commits.setter
    def allow_merge_commits(self, allow_merge_commits):
        """Sets the allow_merge_commits of this Repository.


        :param allow_merge_commits: The allow_merge_commits of this Repository.
        :type allow_merge_commits: bool
        """

        self._allow_merge_commits = allow_merge_commits

    @property
    def allow_rebase(self):
        """Gets the allow_rebase of this Repository.


        :return: The allow_rebase of this Repository.
        :rtype: bool
        """
        return self._allow_rebase

    @allow_rebase.setter
    def allow_rebase(self, allow_rebase):
        """Sets the allow_rebase of this Repository.


        :param allow_rebase: The allow_rebase of this Repository.
        :type allow_rebase: bool
        """

        self._allow_rebase = allow_rebase

    @property
    def allow_rebase_explicit(self):
        """Gets the allow_rebase_explicit of this Repository.


        :return: The allow_rebase_explicit of this Repository.
        :rtype: bool
        """
        return self._allow_rebase_explicit

    @allow_rebase_explicit.setter
    def allow_rebase_explicit(self, allow_rebase_explicit):
        """Sets the allow_rebase_explicit of this Repository.


        :param allow_rebase_explicit: The allow_rebase_explicit of this Repository.
        :type allow_rebase_explicit: bool
        """

        self._allow_rebase_explicit = allow_rebase_explicit

    @property
    def allow_rebase_update(self):
        """Gets the allow_rebase_update of this Repository.


        :return: The allow_rebase_update of this Repository.
        :rtype: bool
        """
        return self._allow_rebase_update

    @allow_rebase_update.setter
    def allow_rebase_update(self, allow_rebase_update):
        """Sets the allow_rebase_update of this Repository.


        :param allow_rebase_update: The allow_rebase_update of this Repository.
        :type allow_rebase_update: bool
        """

        self._allow_rebase_update = allow_rebase_update

    @property
    def allow_squash_merge(self):
        """Gets the allow_squash_merge of this Repository.


        :return: The allow_squash_merge of this Repository.
        :rtype: bool
        """
        return self._allow_squash_merge

    @allow_squash_merge.setter
    def allow_squash_merge(self, allow_squash_merge):
        """Sets the allow_squash_merge of this Repository.


        :param allow_squash_merge: The allow_squash_merge of this Repository.
        :type allow_squash_merge: bool
        """

        self._allow_squash_merge = allow_squash_merge

    @property
    def archived(self):
        """Gets the archived of this Repository.


        :return: The archived of this Repository.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Repository.


        :param archived: The archived of this Repository.
        :type archived: bool
        """

        self._archived = archived

    @property
    def avatar_url(self):
        """Gets the avatar_url of this Repository.


        :return: The avatar_url of this Repository.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this Repository.


        :param avatar_url: The avatar_url of this Repository.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def clone_url(self):
        """Gets the clone_url of this Repository.


        :return: The clone_url of this Repository.
        :rtype: str
        """
        return self._clone_url

    @clone_url.setter
    def clone_url(self, clone_url):
        """Sets the clone_url of this Repository.


        :param clone_url: The clone_url of this Repository.
        :type clone_url: str
        """

        self._clone_url = clone_url

    @property
    def created_at(self):
        """Gets the created_at of this Repository.


        :return: The created_at of this Repository.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Repository.


        :param created_at: The created_at of this Repository.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def default_allow_maintainer_edit(self):
        """Gets the default_allow_maintainer_edit of this Repository.


        :return: The default_allow_maintainer_edit of this Repository.
        :rtype: bool
        """
        return self._default_allow_maintainer_edit

    @default_allow_maintainer_edit.setter
    def default_allow_maintainer_edit(self, default_allow_maintainer_edit):
        """Sets the default_allow_maintainer_edit of this Repository.


        :param default_allow_maintainer_edit: The default_allow_maintainer_edit of this Repository.
        :type default_allow_maintainer_edit: bool
        """

        self._default_allow_maintainer_edit = default_allow_maintainer_edit

    @property
    def default_branch(self):
        """Gets the default_branch of this Repository.


        :return: The default_branch of this Repository.
        :rtype: str
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this Repository.


        :param default_branch: The default_branch of this Repository.
        :type default_branch: str
        """

        self._default_branch = default_branch

    @property
    def default_delete_branch_after_merge(self):
        """Gets the default_delete_branch_after_merge of this Repository.


        :return: The default_delete_branch_after_merge of this Repository.
        :rtype: bool
        """
        return self._default_delete_branch_after_merge

    @default_delete_branch_after_merge.setter
    def default_delete_branch_after_merge(self, default_delete_branch_after_merge):
        """Sets the default_delete_branch_after_merge of this Repository.


        :param default_delete_branch_after_merge: The default_delete_branch_after_merge of this Repository.
        :type default_delete_branch_after_merge: bool
        """

        self._default_delete_branch_after_merge = default_delete_branch_after_merge

    @property
    def default_merge_style(self):
        """Gets the default_merge_style of this Repository.


        :return: The default_merge_style of this Repository.
        :rtype: str
        """
        return self._default_merge_style

    @default_merge_style.setter
    def default_merge_style(self, default_merge_style):
        """Sets the default_merge_style of this Repository.


        :param default_merge_style: The default_merge_style of this Repository.
        :type default_merge_style: str
        """

        self._default_merge_style = default_merge_style

    @property
    def description(self):
        """Gets the description of this Repository.


        :return: The description of this Repository.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Repository.


        :param description: The description of this Repository.
        :type description: str
        """

        self._description = description

    @property
    def empty(self):
        """Gets the empty of this Repository.


        :return: The empty of this Repository.
        :rtype: bool
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this Repository.


        :param empty: The empty of this Repository.
        :type empty: bool
        """

        self._empty = empty

    @property
    def external_tracker(self):
        """Gets the external_tracker of this Repository.


        :return: The external_tracker of this Repository.
        :rtype: ExternalTracker
        """
        return self._external_tracker

    @external_tracker.setter
    def external_tracker(self, external_tracker):
        """Sets the external_tracker of this Repository.


        :param external_tracker: The external_tracker of this Repository.
        :type external_tracker: ExternalTracker
        """

        self._external_tracker = external_tracker

    @property
    def external_wiki(self):
        """Gets the external_wiki of this Repository.


        :return: The external_wiki of this Repository.
        :rtype: ExternalWiki
        """
        return self._external_wiki

    @external_wiki.setter
    def external_wiki(self, external_wiki):
        """Sets the external_wiki of this Repository.


        :param external_wiki: The external_wiki of this Repository.
        :type external_wiki: ExternalWiki
        """

        self._external_wiki = external_wiki

    @property
    def fork(self):
        """Gets the fork of this Repository.


        :return: The fork of this Repository.
        :rtype: bool
        """
        return self._fork

    @fork.setter
    def fork(self, fork):
        """Sets the fork of this Repository.


        :param fork: The fork of this Repository.
        :type fork: bool
        """

        self._fork = fork

    @property
    def forks_count(self):
        """Gets the forks_count of this Repository.


        :return: The forks_count of this Repository.
        :rtype: int
        """
        return self._forks_count

    @forks_count.setter
    def forks_count(self, forks_count):
        """Sets the forks_count of this Repository.


        :param forks_count: The forks_count of this Repository.
        :type forks_count: int
        """

        self._forks_count = forks_count

    @property
    def full_name(self):
        """Gets the full_name of this Repository.


        :return: The full_name of this Repository.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Repository.


        :param full_name: The full_name of this Repository.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def has_actions(self):
        """Gets the has_actions of this Repository.


        :return: The has_actions of this Repository.
        :rtype: bool
        """
        return self._has_actions

    @has_actions.setter
    def has_actions(self, has_actions):
        """Sets the has_actions of this Repository.


        :param has_actions: The has_actions of this Repository.
        :type has_actions: bool
        """

        self._has_actions = has_actions

    @property
    def has_issues(self):
        """Gets the has_issues of this Repository.


        :return: The has_issues of this Repository.
        :rtype: bool
        """
        return self._has_issues

    @has_issues.setter
    def has_issues(self, has_issues):
        """Sets the has_issues of this Repository.


        :param has_issues: The has_issues of this Repository.
        :type has_issues: bool
        """

        self._has_issues = has_issues

    @property
    def has_packages(self):
        """Gets the has_packages of this Repository.


        :return: The has_packages of this Repository.
        :rtype: bool
        """
        return self._has_packages

    @has_packages.setter
    def has_packages(self, has_packages):
        """Sets the has_packages of this Repository.


        :param has_packages: The has_packages of this Repository.
        :type has_packages: bool
        """

        self._has_packages = has_packages

    @property
    def has_projects(self):
        """Gets the has_projects of this Repository.


        :return: The has_projects of this Repository.
        :rtype: bool
        """
        return self._has_projects

    @has_projects.setter
    def has_projects(self, has_projects):
        """Sets the has_projects of this Repository.


        :param has_projects: The has_projects of this Repository.
        :type has_projects: bool
        """

        self._has_projects = has_projects

    @property
    def has_pull_requests(self):
        """Gets the has_pull_requests of this Repository.


        :return: The has_pull_requests of this Repository.
        :rtype: bool
        """
        return self._has_pull_requests

    @has_pull_requests.setter
    def has_pull_requests(self, has_pull_requests):
        """Sets the has_pull_requests of this Repository.


        :param has_pull_requests: The has_pull_requests of this Repository.
        :type has_pull_requests: bool
        """

        self._has_pull_requests = has_pull_requests

    @property
    def has_releases(self):
        """Gets the has_releases of this Repository.


        :return: The has_releases of this Repository.
        :rtype: bool
        """
        return self._has_releases

    @has_releases.setter
    def has_releases(self, has_releases):
        """Sets the has_releases of this Repository.


        :param has_releases: The has_releases of this Repository.
        :type has_releases: bool
        """

        self._has_releases = has_releases

    @property
    def has_wiki(self):
        """Gets the has_wiki of this Repository.


        :return: The has_wiki of this Repository.
        :rtype: bool
        """
        return self._has_wiki

    @has_wiki.setter
    def has_wiki(self, has_wiki):
        """Sets the has_wiki of this Repository.


        :param has_wiki: The has_wiki of this Repository.
        :type has_wiki: bool
        """

        self._has_wiki = has_wiki

    @property
    def html_url(self):
        """Gets the html_url of this Repository.


        :return: The html_url of this Repository.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Repository.


        :param html_url: The html_url of this Repository.
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this Repository.


        :return: The id of this Repository.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Repository.


        :param id: The id of this Repository.
        :type id: int
        """

        self._id = id

    @property
    def ignore_whitespace_conflicts(self):
        """Gets the ignore_whitespace_conflicts of this Repository.


        :return: The ignore_whitespace_conflicts of this Repository.
        :rtype: bool
        """
        return self._ignore_whitespace_conflicts

    @ignore_whitespace_conflicts.setter
    def ignore_whitespace_conflicts(self, ignore_whitespace_conflicts):
        """Sets the ignore_whitespace_conflicts of this Repository.


        :param ignore_whitespace_conflicts: The ignore_whitespace_conflicts of this Repository.
        :type ignore_whitespace_conflicts: bool
        """

        self._ignore_whitespace_conflicts = ignore_whitespace_conflicts

    @property
    def internal(self):
        """Gets the internal of this Repository.


        :return: The internal of this Repository.
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this Repository.


        :param internal: The internal of this Repository.
        :type internal: bool
        """

        self._internal = internal

    @property
    def internal_tracker(self):
        """Gets the internal_tracker of this Repository.


        :return: The internal_tracker of this Repository.
        :rtype: InternalTracker
        """
        return self._internal_tracker

    @internal_tracker.setter
    def internal_tracker(self, internal_tracker):
        """Sets the internal_tracker of this Repository.


        :param internal_tracker: The internal_tracker of this Repository.
        :type internal_tracker: InternalTracker
        """

        self._internal_tracker = internal_tracker

    @property
    def language(self):
        """Gets the language of this Repository.


        :return: The language of this Repository.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Repository.


        :param language: The language of this Repository.
        :type language: str
        """

        self._language = language

    @property
    def languages_url(self):
        """Gets the languages_url of this Repository.


        :return: The languages_url of this Repository.
        :rtype: str
        """
        return self._languages_url

    @languages_url.setter
    def languages_url(self, languages_url):
        """Sets the languages_url of this Repository.


        :param languages_url: The languages_url of this Repository.
        :type languages_url: str
        """

        self._languages_url = languages_url

    @property
    def link(self):
        """Gets the link of this Repository.


        :return: The link of this Repository.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Repository.


        :param link: The link of this Repository.
        :type link: str
        """

        self._link = link

    @property
    def mirror(self):
        """Gets the mirror of this Repository.


        :return: The mirror of this Repository.
        :rtype: bool
        """
        return self._mirror

    @mirror.setter
    def mirror(self, mirror):
        """Sets the mirror of this Repository.


        :param mirror: The mirror of this Repository.
        :type mirror: bool
        """

        self._mirror = mirror

    @property
    def mirror_interval(self):
        """Gets the mirror_interval of this Repository.


        :return: The mirror_interval of this Repository.
        :rtype: str
        """
        return self._mirror_interval

    @mirror_interval.setter
    def mirror_interval(self, mirror_interval):
        """Sets the mirror_interval of this Repository.


        :param mirror_interval: The mirror_interval of this Repository.
        :type mirror_interval: str
        """

        self._mirror_interval = mirror_interval

    @property
    def mirror_updated(self):
        """Gets the mirror_updated of this Repository.


        :return: The mirror_updated of this Repository.
        :rtype: datetime
        """
        return self._mirror_updated

    @mirror_updated.setter
    def mirror_updated(self, mirror_updated):
        """Sets the mirror_updated of this Repository.


        :param mirror_updated: The mirror_updated of this Repository.
        :type mirror_updated: datetime
        """

        self._mirror_updated = mirror_updated

    @property
    def name(self):
        """Gets the name of this Repository.


        :return: The name of this Repository.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Repository.


        :param name: The name of this Repository.
        :type name: str
        """

        self._name = name

    @property
    def open_issues_count(self):
        """Gets the open_issues_count of this Repository.


        :return: The open_issues_count of this Repository.
        :rtype: int
        """
        return self._open_issues_count

    @open_issues_count.setter
    def open_issues_count(self, open_issues_count):
        """Sets the open_issues_count of this Repository.


        :param open_issues_count: The open_issues_count of this Repository.
        :type open_issues_count: int
        """

        self._open_issues_count = open_issues_count

    @property
    def open_pr_counter(self):
        """Gets the open_pr_counter of this Repository.


        :return: The open_pr_counter of this Repository.
        :rtype: int
        """
        return self._open_pr_counter

    @open_pr_counter.setter
    def open_pr_counter(self, open_pr_counter):
        """Sets the open_pr_counter of this Repository.


        :param open_pr_counter: The open_pr_counter of this Repository.
        :type open_pr_counter: int
        """

        self._open_pr_counter = open_pr_counter

    @property
    def original_url(self):
        """Gets the original_url of this Repository.


        :return: The original_url of this Repository.
        :rtype: str
        """
        return self._original_url

    @original_url.setter
    def original_url(self, original_url):
        """Sets the original_url of this Repository.


        :param original_url: The original_url of this Repository.
        :type original_url: str
        """

        self._original_url = original_url

    @property
    def owner(self):
        """Gets the owner of this Repository.


        :return: The owner of this Repository.
        :rtype: User
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Repository.


        :param owner: The owner of this Repository.
        :type owner: User
        """

        self._owner = owner

    @property
    def parent(self):
        """Gets the parent of this Repository.


        :return: The parent of this Repository.
        :rtype: Repository
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Repository.


        :param parent: The parent of this Repository.
        :type parent: Repository
        """

        self._parent = parent

    @property
    def permissions(self):
        """Gets the permissions of this Repository.


        :return: The permissions of this Repository.
        :rtype: Permission
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Repository.


        :param permissions: The permissions of this Repository.
        :type permissions: Permission
        """

        self._permissions = permissions

    @property
    def private(self):
        """Gets the private of this Repository.


        :return: The private of this Repository.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this Repository.


        :param private: The private of this Repository.
        :type private: bool
        """

        self._private = private

    @property
    def release_counter(self):
        """Gets the release_counter of this Repository.


        :return: The release_counter of this Repository.
        :rtype: int
        """
        return self._release_counter

    @release_counter.setter
    def release_counter(self, release_counter):
        """Sets the release_counter of this Repository.


        :param release_counter: The release_counter of this Repository.
        :type release_counter: int
        """

        self._release_counter = release_counter

    @property
    def repo_transfer(self):
        """Gets the repo_transfer of this Repository.


        :return: The repo_transfer of this Repository.
        :rtype: RepoTransfer
        """
        return self._repo_transfer

    @repo_transfer.setter
    def repo_transfer(self, repo_transfer):
        """Sets the repo_transfer of this Repository.


        :param repo_transfer: The repo_transfer of this Repository.
        :type repo_transfer: RepoTransfer
        """

        self._repo_transfer = repo_transfer

    @property
    def size(self):
        """Gets the size of this Repository.


        :return: The size of this Repository.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Repository.


        :param size: The size of this Repository.
        :type size: int
        """

        self._size = size

    @property
    def ssh_url(self):
        """Gets the ssh_url of this Repository.


        :return: The ssh_url of this Repository.
        :rtype: str
        """
        return self._ssh_url

    @ssh_url.setter
    def ssh_url(self, ssh_url):
        """Sets the ssh_url of this Repository.


        :param ssh_url: The ssh_url of this Repository.
        :type ssh_url: str
        """

        self._ssh_url = ssh_url

    @property
    def stars_count(self):
        """Gets the stars_count of this Repository.


        :return: The stars_count of this Repository.
        :rtype: int
        """
        return self._stars_count

    @stars_count.setter
    def stars_count(self, stars_count):
        """Sets the stars_count of this Repository.


        :param stars_count: The stars_count of this Repository.
        :type stars_count: int
        """

        self._stars_count = stars_count

    @property
    def template(self):
        """Gets the template of this Repository.


        :return: The template of this Repository.
        :rtype: bool
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Repository.


        :param template: The template of this Repository.
        :type template: bool
        """

        self._template = template

    @property
    def updated_at(self):
        """Gets the updated_at of this Repository.


        :return: The updated_at of this Repository.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Repository.


        :param updated_at: The updated_at of this Repository.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def watchers_count(self):
        """Gets the watchers_count of this Repository.


        :return: The watchers_count of this Repository.
        :rtype: int
        """
        return self._watchers_count

    @watchers_count.setter
    def watchers_count(self, watchers_count):
        """Sets the watchers_count of this Repository.


        :param watchers_count: The watchers_count of this Repository.
        :type watchers_count: int
        """

        self._watchers_count = watchers_count

    @property
    def website(self):
        """Gets the website of this Repository.


        :return: The website of this Repository.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Repository.


        :param website: The website of this Repository.
        :type website: str
        """

        self._website = website
