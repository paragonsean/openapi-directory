# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Hook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, authorization_header: str=None, config: Dict[str, str]=None, created_at: datetime=None, events: List[str]=None, id: int=None, type: str=None, updated_at: datetime=None):
        """Hook - a model defined in OpenAPI

        :param active: The active of this Hook.
        :param authorization_header: The authorization_header of this Hook.
        :param config: The config of this Hook.
        :param created_at: The created_at of this Hook.
        :param events: The events of this Hook.
        :param id: The id of this Hook.
        :param type: The type of this Hook.
        :param updated_at: The updated_at of this Hook.
        """
        self.openapi_types = {
            'active': bool,
            'authorization_header': str,
            'config': Dict[str, str],
            'created_at': datetime,
            'events': List[str],
            'id': int,
            'type': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'active': 'active',
            'authorization_header': 'authorization_header',
            'config': 'config',
            'created_at': 'created_at',
            'events': 'events',
            'id': 'id',
            'type': 'type',
            'updated_at': 'updated_at'
        }

        self._active = active
        self._authorization_header = authorization_header
        self._config = config
        self._created_at = created_at
        self._events = events
        self._id = id
        self._type = type
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Hook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Hook of this Hook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Hook.


        :return: The active of this Hook.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Hook.


        :param active: The active of this Hook.
        :type active: bool
        """

        self._active = active

    @property
    def authorization_header(self):
        """Gets the authorization_header of this Hook.


        :return: The authorization_header of this Hook.
        :rtype: str
        """
        return self._authorization_header

    @authorization_header.setter
    def authorization_header(self, authorization_header):
        """Sets the authorization_header of this Hook.


        :param authorization_header: The authorization_header of this Hook.
        :type authorization_header: str
        """

        self._authorization_header = authorization_header

    @property
    def config(self):
        """Gets the config of this Hook.


        :return: The config of this Hook.
        :rtype: Dict[str, str]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Hook.


        :param config: The config of this Hook.
        :type config: Dict[str, str]
        """

        self._config = config

    @property
    def created_at(self):
        """Gets the created_at of this Hook.


        :return: The created_at of this Hook.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Hook.


        :param created_at: The created_at of this Hook.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def events(self):
        """Gets the events of this Hook.


        :return: The events of this Hook.
        :rtype: List[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Hook.


        :param events: The events of this Hook.
        :type events: List[str]
        """

        self._events = events

    @property
    def id(self):
        """Gets the id of this Hook.


        :return: The id of this Hook.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Hook.


        :param id: The id of this Hook.
        :type id: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Hook.


        :return: The type of this Hook.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Hook.


        :param type: The type of this Hook.
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Hook.


        :return: The updated_at of this Hook.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Hook.


        :param updated_at: The updated_at of this Hook.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
