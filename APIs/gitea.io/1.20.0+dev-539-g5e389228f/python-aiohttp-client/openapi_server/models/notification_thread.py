# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_subject import NotificationSubject
from openapi_server.models.repository import Repository
from openapi_server import util


class NotificationThread(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, pinned: bool=None, repository: Repository=None, subject: NotificationSubject=None, unread: bool=None, updated_at: datetime=None, url: str=None):
        """NotificationThread - a model defined in OpenAPI

        :param id: The id of this NotificationThread.
        :param pinned: The pinned of this NotificationThread.
        :param repository: The repository of this NotificationThread.
        :param subject: The subject of this NotificationThread.
        :param unread: The unread of this NotificationThread.
        :param updated_at: The updated_at of this NotificationThread.
        :param url: The url of this NotificationThread.
        """
        self.openapi_types = {
            'id': int,
            'pinned': bool,
            'repository': Repository,
            'subject': NotificationSubject,
            'unread': bool,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'id': 'id',
            'pinned': 'pinned',
            'repository': 'repository',
            'subject': 'subject',
            'unread': 'unread',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._id = id
        self._pinned = pinned
        self._repository = repository
        self._subject = subject
        self._unread = unread
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationThread':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationThread of this NotificationThread.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NotificationThread.


        :return: The id of this NotificationThread.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationThread.


        :param id: The id of this NotificationThread.
        :type id: int
        """

        self._id = id

    @property
    def pinned(self):
        """Gets the pinned of this NotificationThread.


        :return: The pinned of this NotificationThread.
        :rtype: bool
        """
        return self._pinned

    @pinned.setter
    def pinned(self, pinned):
        """Sets the pinned of this NotificationThread.


        :param pinned: The pinned of this NotificationThread.
        :type pinned: bool
        """

        self._pinned = pinned

    @property
    def repository(self):
        """Gets the repository of this NotificationThread.


        :return: The repository of this NotificationThread.
        :rtype: Repository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this NotificationThread.


        :param repository: The repository of this NotificationThread.
        :type repository: Repository
        """

        self._repository = repository

    @property
    def subject(self):
        """Gets the subject of this NotificationThread.


        :return: The subject of this NotificationThread.
        :rtype: NotificationSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this NotificationThread.


        :param subject: The subject of this NotificationThread.
        :type subject: NotificationSubject
        """

        self._subject = subject

    @property
    def unread(self):
        """Gets the unread of this NotificationThread.


        :return: The unread of this NotificationThread.
        :rtype: bool
        """
        return self._unread

    @unread.setter
    def unread(self, unread):
        """Sets the unread of this NotificationThread.


        :param unread: The unread of this NotificationThread.
        :type unread: bool
        """

        self._unread = unread

    @property
    def updated_at(self):
        """Gets the updated_at of this NotificationThread.


        :return: The updated_at of this NotificationThread.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this NotificationThread.


        :param updated_at: The updated_at of this NotificationThread.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this NotificationThread.


        :return: The url of this NotificationThread.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NotificationThread.


        :param url: The url of this NotificationThread.
        :type url: str
        """

        self._url = url
