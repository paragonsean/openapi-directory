# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateUserOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, email: str=None, full_name: str=None, login_name: str=None, must_change_password: bool=None, password: str=None, restricted: bool=None, send_notify: bool=None, source_id: int=None, username: str=None, visibility: str=None):
        """CreateUserOption - a model defined in OpenAPI

        :param created_at: The created_at of this CreateUserOption.
        :param email: The email of this CreateUserOption.
        :param full_name: The full_name of this CreateUserOption.
        :param login_name: The login_name of this CreateUserOption.
        :param must_change_password: The must_change_password of this CreateUserOption.
        :param password: The password of this CreateUserOption.
        :param restricted: The restricted of this CreateUserOption.
        :param send_notify: The send_notify of this CreateUserOption.
        :param source_id: The source_id of this CreateUserOption.
        :param username: The username of this CreateUserOption.
        :param visibility: The visibility of this CreateUserOption.
        """
        self.openapi_types = {
            'created_at': datetime,
            'email': str,
            'full_name': str,
            'login_name': str,
            'must_change_password': bool,
            'password': str,
            'restricted': bool,
            'send_notify': bool,
            'source_id': int,
            'username': str,
            'visibility': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'email': 'email',
            'full_name': 'full_name',
            'login_name': 'login_name',
            'must_change_password': 'must_change_password',
            'password': 'password',
            'restricted': 'restricted',
            'send_notify': 'send_notify',
            'source_id': 'source_id',
            'username': 'username',
            'visibility': 'visibility'
        }

        self._created_at = created_at
        self._email = email
        self._full_name = full_name
        self._login_name = login_name
        self._must_change_password = must_change_password
        self._password = password
        self._restricted = restricted
        self._send_notify = send_notify
        self._source_id = source_id
        self._username = username
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUserOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUserOption of this CreateUserOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this CreateUserOption.

        For explicitly setting the user creation timestamp. Useful when users are migrated from other systems. When omitted, the user's creation timestamp will be set to \"now\".

        :return: The created_at of this CreateUserOption.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CreateUserOption.

        For explicitly setting the user creation timestamp. Useful when users are migrated from other systems. When omitted, the user's creation timestamp will be set to \"now\".

        :param created_at: The created_at of this CreateUserOption.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def email(self):
        """Gets the email of this CreateUserOption.


        :return: The email of this CreateUserOption.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateUserOption.


        :param email: The email of this CreateUserOption.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def full_name(self):
        """Gets the full_name of this CreateUserOption.


        :return: The full_name of this CreateUserOption.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this CreateUserOption.


        :param full_name: The full_name of this CreateUserOption.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def login_name(self):
        """Gets the login_name of this CreateUserOption.


        :return: The login_name of this CreateUserOption.
        :rtype: str
        """
        return self._login_name

    @login_name.setter
    def login_name(self, login_name):
        """Sets the login_name of this CreateUserOption.


        :param login_name: The login_name of this CreateUserOption.
        :type login_name: str
        """

        self._login_name = login_name

    @property
    def must_change_password(self):
        """Gets the must_change_password of this CreateUserOption.


        :return: The must_change_password of this CreateUserOption.
        :rtype: bool
        """
        return self._must_change_password

    @must_change_password.setter
    def must_change_password(self, must_change_password):
        """Sets the must_change_password of this CreateUserOption.


        :param must_change_password: The must_change_password of this CreateUserOption.
        :type must_change_password: bool
        """

        self._must_change_password = must_change_password

    @property
    def password(self):
        """Gets the password of this CreateUserOption.


        :return: The password of this CreateUserOption.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CreateUserOption.


        :param password: The password of this CreateUserOption.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def restricted(self):
        """Gets the restricted of this CreateUserOption.


        :return: The restricted of this CreateUserOption.
        :rtype: bool
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """Sets the restricted of this CreateUserOption.


        :param restricted: The restricted of this CreateUserOption.
        :type restricted: bool
        """

        self._restricted = restricted

    @property
    def send_notify(self):
        """Gets the send_notify of this CreateUserOption.


        :return: The send_notify of this CreateUserOption.
        :rtype: bool
        """
        return self._send_notify

    @send_notify.setter
    def send_notify(self, send_notify):
        """Sets the send_notify of this CreateUserOption.


        :param send_notify: The send_notify of this CreateUserOption.
        :type send_notify: bool
        """

        self._send_notify = send_notify

    @property
    def source_id(self):
        """Gets the source_id of this CreateUserOption.


        :return: The source_id of this CreateUserOption.
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this CreateUserOption.


        :param source_id: The source_id of this CreateUserOption.
        :type source_id: int
        """

        self._source_id = source_id

    @property
    def username(self):
        """Gets the username of this CreateUserOption.


        :return: The username of this CreateUserOption.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CreateUserOption.


        :param username: The username of this CreateUserOption.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def visibility(self):
        """Gets the visibility of this CreateUserOption.


        :return: The visibility of this CreateUserOption.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this CreateUserOption.


        :param visibility: The visibility of this CreateUserOption.
        :type visibility: str
        """

        self._visibility = visibility
