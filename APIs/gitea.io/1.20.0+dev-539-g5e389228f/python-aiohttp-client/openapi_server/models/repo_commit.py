# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.commit_meta import CommitMeta
from openapi_server.models.commit_user import CommitUser
from openapi_server.models.payload_commit_verification import PayloadCommitVerification
from openapi_server import util


class RepoCommit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: CommitUser=None, committer: CommitUser=None, message: str=None, tree: CommitMeta=None, url: str=None, verification: PayloadCommitVerification=None):
        """RepoCommit - a model defined in OpenAPI

        :param author: The author of this RepoCommit.
        :param committer: The committer of this RepoCommit.
        :param message: The message of this RepoCommit.
        :param tree: The tree of this RepoCommit.
        :param url: The url of this RepoCommit.
        :param verification: The verification of this RepoCommit.
        """
        self.openapi_types = {
            'author': CommitUser,
            'committer': CommitUser,
            'message': str,
            'tree': CommitMeta,
            'url': str,
            'verification': PayloadCommitVerification
        }

        self.attribute_map = {
            'author': 'author',
            'committer': 'committer',
            'message': 'message',
            'tree': 'tree',
            'url': 'url',
            'verification': 'verification'
        }

        self._author = author
        self._committer = committer
        self._message = message
        self._tree = tree
        self._url = url
        self._verification = verification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepoCommit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepoCommit of this RepoCommit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this RepoCommit.


        :return: The author of this RepoCommit.
        :rtype: CommitUser
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this RepoCommit.


        :param author: The author of this RepoCommit.
        :type author: CommitUser
        """

        self._author = author

    @property
    def committer(self):
        """Gets the committer of this RepoCommit.


        :return: The committer of this RepoCommit.
        :rtype: CommitUser
        """
        return self._committer

    @committer.setter
    def committer(self, committer):
        """Sets the committer of this RepoCommit.


        :param committer: The committer of this RepoCommit.
        :type committer: CommitUser
        """

        self._committer = committer

    @property
    def message(self):
        """Gets the message of this RepoCommit.


        :return: The message of this RepoCommit.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this RepoCommit.


        :param message: The message of this RepoCommit.
        :type message: str
        """

        self._message = message

    @property
    def tree(self):
        """Gets the tree of this RepoCommit.


        :return: The tree of this RepoCommit.
        :rtype: CommitMeta
        """
        return self._tree

    @tree.setter
    def tree(self, tree):
        """Sets the tree of this RepoCommit.


        :param tree: The tree of this RepoCommit.
        :type tree: CommitMeta
        """

        self._tree = tree

    @property
    def url(self):
        """Gets the url of this RepoCommit.


        :return: The url of this RepoCommit.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RepoCommit.


        :param url: The url of this RepoCommit.
        :type url: str
        """

        self._url = url

    @property
    def verification(self):
        """Gets the verification of this RepoCommit.


        :return: The verification of this RepoCommit.
        :rtype: PayloadCommitVerification
        """
        return self._verification

    @verification.setter
    def verification(self, verification):
        """Sets the verification of this RepoCommit.


        :param verification: The verification of this RepoCommit.
        :type verification: PayloadCommitVerification
        """

        self._verification = verification
