# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.organization import Organization
from openapi_server import util


class Team(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_create_org_repo: bool=None, description: str=None, id: int=None, includes_all_repositories: bool=None, name: str=None, organization: Organization=None, permission: str=None, units: List[str]=None, units_map: Dict[str, str]=None):
        """Team - a model defined in OpenAPI

        :param can_create_org_repo: The can_create_org_repo of this Team.
        :param description: The description of this Team.
        :param id: The id of this Team.
        :param includes_all_repositories: The includes_all_repositories of this Team.
        :param name: The name of this Team.
        :param organization: The organization of this Team.
        :param permission: The permission of this Team.
        :param units: The units of this Team.
        :param units_map: The units_map of this Team.
        """
        self.openapi_types = {
            'can_create_org_repo': bool,
            'description': str,
            'id': int,
            'includes_all_repositories': bool,
            'name': str,
            'organization': Organization,
            'permission': str,
            'units': List[str],
            'units_map': Dict[str, str]
        }

        self.attribute_map = {
            'can_create_org_repo': 'can_create_org_repo',
            'description': 'description',
            'id': 'id',
            'includes_all_repositories': 'includes_all_repositories',
            'name': 'name',
            'organization': 'organization',
            'permission': 'permission',
            'units': 'units',
            'units_map': 'units_map'
        }

        self._can_create_org_repo = can_create_org_repo
        self._description = description
        self._id = id
        self._includes_all_repositories = includes_all_repositories
        self._name = name
        self._organization = organization
        self._permission = permission
        self._units = units
        self._units_map = units_map

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Team':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Team of this Team.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_create_org_repo(self):
        """Gets the can_create_org_repo of this Team.


        :return: The can_create_org_repo of this Team.
        :rtype: bool
        """
        return self._can_create_org_repo

    @can_create_org_repo.setter
    def can_create_org_repo(self, can_create_org_repo):
        """Sets the can_create_org_repo of this Team.


        :param can_create_org_repo: The can_create_org_repo of this Team.
        :type can_create_org_repo: bool
        """

        self._can_create_org_repo = can_create_org_repo

    @property
    def description(self):
        """Gets the description of this Team.


        :return: The description of this Team.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Team.


        :param description: The description of this Team.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Team.


        :return: The id of this Team.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Team.


        :param id: The id of this Team.
        :type id: int
        """

        self._id = id

    @property
    def includes_all_repositories(self):
        """Gets the includes_all_repositories of this Team.


        :return: The includes_all_repositories of this Team.
        :rtype: bool
        """
        return self._includes_all_repositories

    @includes_all_repositories.setter
    def includes_all_repositories(self, includes_all_repositories):
        """Sets the includes_all_repositories of this Team.


        :param includes_all_repositories: The includes_all_repositories of this Team.
        :type includes_all_repositories: bool
        """

        self._includes_all_repositories = includes_all_repositories

    @property
    def name(self):
        """Gets the name of this Team.


        :return: The name of this Team.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Team.


        :param name: The name of this Team.
        :type name: str
        """

        self._name = name

    @property
    def organization(self):
        """Gets the organization of this Team.


        :return: The organization of this Team.
        :rtype: Organization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Team.


        :param organization: The organization of this Team.
        :type organization: Organization
        """

        self._organization = organization

    @property
    def permission(self):
        """Gets the permission of this Team.


        :return: The permission of this Team.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this Team.


        :param permission: The permission of this Team.
        :type permission: str
        """
        allowed_values = ["none", "read", "write", "admin", "owner"]  # noqa: E501
        if permission not in allowed_values:
            raise ValueError(
                "Invalid value for `permission` ({0}), must be one of {1}"
                .format(permission, allowed_values)
            )

        self._permission = permission

    @property
    def units(self):
        """Gets the units of this Team.


        :return: The units of this Team.
        :rtype: List[str]
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Team.


        :param units: The units of this Team.
        :type units: List[str]
        """

        self._units = units

    @property
    def units_map(self):
        """Gets the units_map of this Team.


        :return: The units_map of this Team.
        :rtype: Dict[str, str]
        """
        return self._units_map

    @units_map.setter
    def units_map(self, units_map):
        """Sets the units_map of this Team.


        :param units_map: The units_map of this Team.
        :type units_map: Dict[str, str]
        """

        self._units_map = units_map
