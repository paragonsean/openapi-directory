# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, avatar_url: str=None, created: datetime=None, description: str=None, email: str=None, followers_count: int=None, following_count: int=None, full_name: str=None, id: int=None, is_admin: bool=None, language: str=None, last_login: datetime=None, location: str=None, login: str=None, login_name: str='empty', prohibit_login: bool=None, restricted: bool=None, starred_repos_count: int=None, visibility: str=None, website: str=None):
        """User - a model defined in OpenAPI

        :param active: The active of this User.
        :param avatar_url: The avatar_url of this User.
        :param created: The created of this User.
        :param description: The description of this User.
        :param email: The email of this User.
        :param followers_count: The followers_count of this User.
        :param following_count: The following_count of this User.
        :param full_name: The full_name of this User.
        :param id: The id of this User.
        :param is_admin: The is_admin of this User.
        :param language: The language of this User.
        :param last_login: The last_login of this User.
        :param location: The location of this User.
        :param login: The login of this User.
        :param login_name: The login_name of this User.
        :param prohibit_login: The prohibit_login of this User.
        :param restricted: The restricted of this User.
        :param starred_repos_count: The starred_repos_count of this User.
        :param visibility: The visibility of this User.
        :param website: The website of this User.
        """
        self.openapi_types = {
            'active': bool,
            'avatar_url': str,
            'created': datetime,
            'description': str,
            'email': str,
            'followers_count': int,
            'following_count': int,
            'full_name': str,
            'id': int,
            'is_admin': bool,
            'language': str,
            'last_login': datetime,
            'location': str,
            'login': str,
            'login_name': str,
            'prohibit_login': bool,
            'restricted': bool,
            'starred_repos_count': int,
            'visibility': str,
            'website': str
        }

        self.attribute_map = {
            'active': 'active',
            'avatar_url': 'avatar_url',
            'created': 'created',
            'description': 'description',
            'email': 'email',
            'followers_count': 'followers_count',
            'following_count': 'following_count',
            'full_name': 'full_name',
            'id': 'id',
            'is_admin': 'is_admin',
            'language': 'language',
            'last_login': 'last_login',
            'location': 'location',
            'login': 'login',
            'login_name': 'login_name',
            'prohibit_login': 'prohibit_login',
            'restricted': 'restricted',
            'starred_repos_count': 'starred_repos_count',
            'visibility': 'visibility',
            'website': 'website'
        }

        self._active = active
        self._avatar_url = avatar_url
        self._created = created
        self._description = description
        self._email = email
        self._followers_count = followers_count
        self._following_count = following_count
        self._full_name = full_name
        self._id = id
        self._is_admin = is_admin
        self._language = language
        self._last_login = last_login
        self._location = location
        self._login = login
        self._login_name = login_name
        self._prohibit_login = prohibit_login
        self._restricted = restricted
        self._starred_repos_count = starred_repos_count
        self._visibility = visibility
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this User.

        Is user active

        :return: The active of this User.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this User.

        Is user active

        :param active: The active of this User.
        :type active: bool
        """

        self._active = active

    @property
    def avatar_url(self):
        """Gets the avatar_url of this User.

        URL to the user's avatar

        :return: The avatar_url of this User.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this User.

        URL to the user's avatar

        :param avatar_url: The avatar_url of this User.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def created(self):
        """Gets the created of this User.


        :return: The created of this User.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this User.


        :param created: The created of this User.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this User.

        the user's description

        :return: The description of this User.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this User.

        the user's description

        :param description: The description of this User.
        :type description: str
        """

        self._description = description

    @property
    def email(self):
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def followers_count(self):
        """Gets the followers_count of this User.

        user counts

        :return: The followers_count of this User.
        :rtype: int
        """
        return self._followers_count

    @followers_count.setter
    def followers_count(self, followers_count):
        """Sets the followers_count of this User.

        user counts

        :param followers_count: The followers_count of this User.
        :type followers_count: int
        """

        self._followers_count = followers_count

    @property
    def following_count(self):
        """Gets the following_count of this User.


        :return: The following_count of this User.
        :rtype: int
        """
        return self._following_count

    @following_count.setter
    def following_count(self, following_count):
        """Sets the following_count of this User.


        :param following_count: The following_count of this User.
        :type following_count: int
        """

        self._following_count = following_count

    @property
    def full_name(self):
        """Gets the full_name of this User.

        the user's full name

        :return: The full_name of this User.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this User.

        the user's full name

        :param full_name: The full_name of this User.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this User.

        the user's id

        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        the user's id

        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def is_admin(self):
        """Gets the is_admin of this User.

        Is the user an administrator

        :return: The is_admin of this User.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this User.

        Is the user an administrator

        :param is_admin: The is_admin of this User.
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def language(self):
        """Gets the language of this User.

        User locale

        :return: The language of this User.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this User.

        User locale

        :param language: The language of this User.
        :type language: str
        """

        self._language = language

    @property
    def last_login(self):
        """Gets the last_login of this User.


        :return: The last_login of this User.
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this User.


        :param last_login: The last_login of this User.
        :type last_login: datetime
        """

        self._last_login = last_login

    @property
    def location(self):
        """Gets the location of this User.

        the user's location

        :return: The location of this User.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this User.

        the user's location

        :param location: The location of this User.
        :type location: str
        """

        self._location = location

    @property
    def login(self):
        """Gets the login of this User.

        the user's username

        :return: The login of this User.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this User.

        the user's username

        :param login: The login of this User.
        :type login: str
        """

        self._login = login

    @property
    def login_name(self):
        """Gets the login_name of this User.

        the user's authentication sign-in name.

        :return: The login_name of this User.
        :rtype: str
        """
        return self._login_name

    @login_name.setter
    def login_name(self, login_name):
        """Sets the login_name of this User.

        the user's authentication sign-in name.

        :param login_name: The login_name of this User.
        :type login_name: str
        """

        self._login_name = login_name

    @property
    def prohibit_login(self):
        """Gets the prohibit_login of this User.

        Is user login prohibited

        :return: The prohibit_login of this User.
        :rtype: bool
        """
        return self._prohibit_login

    @prohibit_login.setter
    def prohibit_login(self, prohibit_login):
        """Sets the prohibit_login of this User.

        Is user login prohibited

        :param prohibit_login: The prohibit_login of this User.
        :type prohibit_login: bool
        """

        self._prohibit_login = prohibit_login

    @property
    def restricted(self):
        """Gets the restricted of this User.

        Is user restricted

        :return: The restricted of this User.
        :rtype: bool
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """Sets the restricted of this User.

        Is user restricted

        :param restricted: The restricted of this User.
        :type restricted: bool
        """

        self._restricted = restricted

    @property
    def starred_repos_count(self):
        """Gets the starred_repos_count of this User.


        :return: The starred_repos_count of this User.
        :rtype: int
        """
        return self._starred_repos_count

    @starred_repos_count.setter
    def starred_repos_count(self, starred_repos_count):
        """Sets the starred_repos_count of this User.


        :param starred_repos_count: The starred_repos_count of this User.
        :type starred_repos_count: int
        """

        self._starred_repos_count = starred_repos_count

    @property
    def visibility(self):
        """Gets the visibility of this User.

        User visibility level option: public, limited, private

        :return: The visibility of this User.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this User.

        User visibility level option: public, limited, private

        :param visibility: The visibility of this User.
        :type visibility: str
        """

        self._visibility = visibility

    @property
    def website(self):
        """Gets the website of this User.

        the user's website

        :return: The website of this User.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this User.

        the user's website

        :param website: The website of this User.
        :type website: str
        """

        self._website = website
