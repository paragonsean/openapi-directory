# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateBranchRepoOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_branch_name: str=None, old_branch_name: str=None):
        """CreateBranchRepoOption - a model defined in OpenAPI

        :param new_branch_name: The new_branch_name of this CreateBranchRepoOption.
        :param old_branch_name: The old_branch_name of this CreateBranchRepoOption.
        """
        self.openapi_types = {
            'new_branch_name': str,
            'old_branch_name': str
        }

        self.attribute_map = {
            'new_branch_name': 'new_branch_name',
            'old_branch_name': 'old_branch_name'
        }

        self._new_branch_name = new_branch_name
        self._old_branch_name = old_branch_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBranchRepoOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBranchRepoOption of this CreateBranchRepoOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_branch_name(self):
        """Gets the new_branch_name of this CreateBranchRepoOption.

        Name of the branch to create

        :return: The new_branch_name of this CreateBranchRepoOption.
        :rtype: str
        """
        return self._new_branch_name

    @new_branch_name.setter
    def new_branch_name(self, new_branch_name):
        """Sets the new_branch_name of this CreateBranchRepoOption.

        Name of the branch to create

        :param new_branch_name: The new_branch_name of this CreateBranchRepoOption.
        :type new_branch_name: str
        """
        if new_branch_name is None:
            raise ValueError("Invalid value for `new_branch_name`, must not be `None`")

        self._new_branch_name = new_branch_name

    @property
    def old_branch_name(self):
        """Gets the old_branch_name of this CreateBranchRepoOption.

        Name of the old branch to create from

        :return: The old_branch_name of this CreateBranchRepoOption.
        :rtype: str
        """
        return self._old_branch_name

    @old_branch_name.setter
    def old_branch_name(self, old_branch_name):
        """Sets the old_branch_name of this CreateBranchRepoOption.

        Name of the old branch to create from

        :param old_branch_name: The old_branch_name of this CreateBranchRepoOption.
        :type old_branch_name: str
        """

        self._old_branch_name = old_branch_name
