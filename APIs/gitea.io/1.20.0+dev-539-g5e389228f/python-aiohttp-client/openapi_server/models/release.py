# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server.models.user import User
from openapi_server import util


class Release(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: List[Attachment]=None, author: User=None, body: str=None, created_at: datetime=None, draft: bool=None, html_url: str=None, id: int=None, name: str=None, prerelease: bool=None, published_at: datetime=None, tag_name: str=None, tarball_url: str=None, target_commitish: str=None, url: str=None, zipball_url: str=None):
        """Release - a model defined in OpenAPI

        :param assets: The assets of this Release.
        :param author: The author of this Release.
        :param body: The body of this Release.
        :param created_at: The created_at of this Release.
        :param draft: The draft of this Release.
        :param html_url: The html_url of this Release.
        :param id: The id of this Release.
        :param name: The name of this Release.
        :param prerelease: The prerelease of this Release.
        :param published_at: The published_at of this Release.
        :param tag_name: The tag_name of this Release.
        :param tarball_url: The tarball_url of this Release.
        :param target_commitish: The target_commitish of this Release.
        :param url: The url of this Release.
        :param zipball_url: The zipball_url of this Release.
        """
        self.openapi_types = {
            'assets': List[Attachment],
            'author': User,
            'body': str,
            'created_at': datetime,
            'draft': bool,
            'html_url': str,
            'id': int,
            'name': str,
            'prerelease': bool,
            'published_at': datetime,
            'tag_name': str,
            'tarball_url': str,
            'target_commitish': str,
            'url': str,
            'zipball_url': str
        }

        self.attribute_map = {
            'assets': 'assets',
            'author': 'author',
            'body': 'body',
            'created_at': 'created_at',
            'draft': 'draft',
            'html_url': 'html_url',
            'id': 'id',
            'name': 'name',
            'prerelease': 'prerelease',
            'published_at': 'published_at',
            'tag_name': 'tag_name',
            'tarball_url': 'tarball_url',
            'target_commitish': 'target_commitish',
            'url': 'url',
            'zipball_url': 'zipball_url'
        }

        self._assets = assets
        self._author = author
        self._body = body
        self._created_at = created_at
        self._draft = draft
        self._html_url = html_url
        self._id = id
        self._name = name
        self._prerelease = prerelease
        self._published_at = published_at
        self._tag_name = tag_name
        self._tarball_url = tarball_url
        self._target_commitish = target_commitish
        self._url = url
        self._zipball_url = zipball_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Release':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Release of this Release.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this Release.


        :return: The assets of this Release.
        :rtype: List[Attachment]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Release.


        :param assets: The assets of this Release.
        :type assets: List[Attachment]
        """

        self._assets = assets

    @property
    def author(self):
        """Gets the author of this Release.


        :return: The author of this Release.
        :rtype: User
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Release.


        :param author: The author of this Release.
        :type author: User
        """

        self._author = author

    @property
    def body(self):
        """Gets the body of this Release.


        :return: The body of this Release.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Release.


        :param body: The body of this Release.
        :type body: str
        """

        self._body = body

    @property
    def created_at(self):
        """Gets the created_at of this Release.


        :return: The created_at of this Release.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Release.


        :param created_at: The created_at of this Release.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def draft(self):
        """Gets the draft of this Release.


        :return: The draft of this Release.
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this Release.


        :param draft: The draft of this Release.
        :type draft: bool
        """

        self._draft = draft

    @property
    def html_url(self):
        """Gets the html_url of this Release.


        :return: The html_url of this Release.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Release.


        :param html_url: The html_url of this Release.
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this Release.


        :return: The id of this Release.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Release.


        :param id: The id of this Release.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Release.


        :return: The name of this Release.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Release.


        :param name: The name of this Release.
        :type name: str
        """

        self._name = name

    @property
    def prerelease(self):
        """Gets the prerelease of this Release.


        :return: The prerelease of this Release.
        :rtype: bool
        """
        return self._prerelease

    @prerelease.setter
    def prerelease(self, prerelease):
        """Sets the prerelease of this Release.


        :param prerelease: The prerelease of this Release.
        :type prerelease: bool
        """

        self._prerelease = prerelease

    @property
    def published_at(self):
        """Gets the published_at of this Release.


        :return: The published_at of this Release.
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this Release.


        :param published_at: The published_at of this Release.
        :type published_at: datetime
        """

        self._published_at = published_at

    @property
    def tag_name(self):
        """Gets the tag_name of this Release.


        :return: The tag_name of this Release.
        :rtype: str
        """
        return self._tag_name

    @tag_name.setter
    def tag_name(self, tag_name):
        """Sets the tag_name of this Release.


        :param tag_name: The tag_name of this Release.
        :type tag_name: str
        """

        self._tag_name = tag_name

    @property
    def tarball_url(self):
        """Gets the tarball_url of this Release.


        :return: The tarball_url of this Release.
        :rtype: str
        """
        return self._tarball_url

    @tarball_url.setter
    def tarball_url(self, tarball_url):
        """Sets the tarball_url of this Release.


        :param tarball_url: The tarball_url of this Release.
        :type tarball_url: str
        """

        self._tarball_url = tarball_url

    @property
    def target_commitish(self):
        """Gets the target_commitish of this Release.


        :return: The target_commitish of this Release.
        :rtype: str
        """
        return self._target_commitish

    @target_commitish.setter
    def target_commitish(self, target_commitish):
        """Sets the target_commitish of this Release.


        :param target_commitish: The target_commitish of this Release.
        :type target_commitish: str
        """

        self._target_commitish = target_commitish

    @property
    def url(self):
        """Gets the url of this Release.


        :return: The url of this Release.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Release.


        :param url: The url of this Release.
        :type url: str
        """

        self._url = url

    @property
    def zipball_url(self):
        """Gets the zipball_url of this Release.


        :return: The zipball_url of this Release.
        :rtype: str
        """
        return self._zipball_url

    @zipball_url.setter
    def zipball_url(self, zipball_url):
        """Sets the zipball_url of this Release.


        :param zipball_url: The zipball_url of this Release.
        :type zipball_url: str
        """

        self._zipball_url = zipball_url
