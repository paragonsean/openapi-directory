# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.commit_date_options import CommitDateOptions
from openapi_server.models.identity import Identity
from openapi_server import util


class CreateFileOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: Identity=None, branch: str=None, committer: Identity=None, content: str=None, dates: CommitDateOptions=None, message: str=None, new_branch: str=None, signoff: bool=None):
        """CreateFileOptions - a model defined in OpenAPI

        :param author: The author of this CreateFileOptions.
        :param branch: The branch of this CreateFileOptions.
        :param committer: The committer of this CreateFileOptions.
        :param content: The content of this CreateFileOptions.
        :param dates: The dates of this CreateFileOptions.
        :param message: The message of this CreateFileOptions.
        :param new_branch: The new_branch of this CreateFileOptions.
        :param signoff: The signoff of this CreateFileOptions.
        """
        self.openapi_types = {
            'author': Identity,
            'branch': str,
            'committer': Identity,
            'content': str,
            'dates': CommitDateOptions,
            'message': str,
            'new_branch': str,
            'signoff': bool
        }

        self.attribute_map = {
            'author': 'author',
            'branch': 'branch',
            'committer': 'committer',
            'content': 'content',
            'dates': 'dates',
            'message': 'message',
            'new_branch': 'new_branch',
            'signoff': 'signoff'
        }

        self._author = author
        self._branch = branch
        self._committer = committer
        self._content = content
        self._dates = dates
        self._message = message
        self._new_branch = new_branch
        self._signoff = signoff

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFileOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFileOptions of this CreateFileOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this CreateFileOptions.


        :return: The author of this CreateFileOptions.
        :rtype: Identity
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this CreateFileOptions.


        :param author: The author of this CreateFileOptions.
        :type author: Identity
        """

        self._author = author

    @property
    def branch(self):
        """Gets the branch of this CreateFileOptions.

        branch (optional) to base this file from. if not given, the default branch is used

        :return: The branch of this CreateFileOptions.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this CreateFileOptions.

        branch (optional) to base this file from. if not given, the default branch is used

        :param branch: The branch of this CreateFileOptions.
        :type branch: str
        """

        self._branch = branch

    @property
    def committer(self):
        """Gets the committer of this CreateFileOptions.


        :return: The committer of this CreateFileOptions.
        :rtype: Identity
        """
        return self._committer

    @committer.setter
    def committer(self, committer):
        """Sets the committer of this CreateFileOptions.


        :param committer: The committer of this CreateFileOptions.
        :type committer: Identity
        """

        self._committer = committer

    @property
    def content(self):
        """Gets the content of this CreateFileOptions.

        content must be base64 encoded

        :return: The content of this CreateFileOptions.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CreateFileOptions.

        content must be base64 encoded

        :param content: The content of this CreateFileOptions.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def dates(self):
        """Gets the dates of this CreateFileOptions.


        :return: The dates of this CreateFileOptions.
        :rtype: CommitDateOptions
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """Sets the dates of this CreateFileOptions.


        :param dates: The dates of this CreateFileOptions.
        :type dates: CommitDateOptions
        """

        self._dates = dates

    @property
    def message(self):
        """Gets the message of this CreateFileOptions.

        message (optional) for the commit of this file. if not supplied, a default message will be used

        :return: The message of this CreateFileOptions.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CreateFileOptions.

        message (optional) for the commit of this file. if not supplied, a default message will be used

        :param message: The message of this CreateFileOptions.
        :type message: str
        """

        self._message = message

    @property
    def new_branch(self):
        """Gets the new_branch of this CreateFileOptions.

        new_branch (optional) will make a new branch from `branch` before creating the file

        :return: The new_branch of this CreateFileOptions.
        :rtype: str
        """
        return self._new_branch

    @new_branch.setter
    def new_branch(self, new_branch):
        """Sets the new_branch of this CreateFileOptions.

        new_branch (optional) will make a new branch from `branch` before creating the file

        :param new_branch: The new_branch of this CreateFileOptions.
        :type new_branch: str
        """

        self._new_branch = new_branch

    @property
    def signoff(self):
        """Gets the signoff of this CreateFileOptions.

        Add a Signed-off-by trailer by the committer at the end of the commit log message.

        :return: The signoff of this CreateFileOptions.
        :rtype: bool
        """
        return self._signoff

    @signoff.setter
    def signoff(self, signoff):
        """Sets the signoff of this CreateFileOptions.

        Add a Signed-off-by trailer by the committer at the end of the commit log message.

        :param signoff: The signoff of this CreateFileOptions.
        :type signoff: bool
        """

        self._signoff = signoff
