# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.annotated_tag_object import AnnotatedTagObject
from openapi_server.models.commit_user import CommitUser
from openapi_server.models.payload_commit_verification import PayloadCommitVerification
from openapi_server import util


class AnnotatedTag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, object: AnnotatedTagObject=None, sha: str=None, tag: str=None, tagger: CommitUser=None, url: str=None, verification: PayloadCommitVerification=None):
        """AnnotatedTag - a model defined in OpenAPI

        :param message: The message of this AnnotatedTag.
        :param object: The object of this AnnotatedTag.
        :param sha: The sha of this AnnotatedTag.
        :param tag: The tag of this AnnotatedTag.
        :param tagger: The tagger of this AnnotatedTag.
        :param url: The url of this AnnotatedTag.
        :param verification: The verification of this AnnotatedTag.
        """
        self.openapi_types = {
            'message': str,
            'object': AnnotatedTagObject,
            'sha': str,
            'tag': str,
            'tagger': CommitUser,
            'url': str,
            'verification': PayloadCommitVerification
        }

        self.attribute_map = {
            'message': 'message',
            'object': 'object',
            'sha': 'sha',
            'tag': 'tag',
            'tagger': 'tagger',
            'url': 'url',
            'verification': 'verification'
        }

        self._message = message
        self._object = object
        self._sha = sha
        self._tag = tag
        self._tagger = tagger
        self._url = url
        self._verification = verification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnnotatedTag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnnotatedTag of this AnnotatedTag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this AnnotatedTag.


        :return: The message of this AnnotatedTag.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AnnotatedTag.


        :param message: The message of this AnnotatedTag.
        :type message: str
        """

        self._message = message

    @property
    def object(self):
        """Gets the object of this AnnotatedTag.


        :return: The object of this AnnotatedTag.
        :rtype: AnnotatedTagObject
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this AnnotatedTag.


        :param object: The object of this AnnotatedTag.
        :type object: AnnotatedTagObject
        """

        self._object = object

    @property
    def sha(self):
        """Gets the sha of this AnnotatedTag.


        :return: The sha of this AnnotatedTag.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this AnnotatedTag.


        :param sha: The sha of this AnnotatedTag.
        :type sha: str
        """

        self._sha = sha

    @property
    def tag(self):
        """Gets the tag of this AnnotatedTag.


        :return: The tag of this AnnotatedTag.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this AnnotatedTag.


        :param tag: The tag of this AnnotatedTag.
        :type tag: str
        """

        self._tag = tag

    @property
    def tagger(self):
        """Gets the tagger of this AnnotatedTag.


        :return: The tagger of this AnnotatedTag.
        :rtype: CommitUser
        """
        return self._tagger

    @tagger.setter
    def tagger(self, tagger):
        """Sets the tagger of this AnnotatedTag.


        :param tagger: The tagger of this AnnotatedTag.
        :type tagger: CommitUser
        """

        self._tagger = tagger

    @property
    def url(self):
        """Gets the url of this AnnotatedTag.


        :return: The url of this AnnotatedTag.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AnnotatedTag.


        :param url: The url of this AnnotatedTag.
        :type url: str
        """

        self._url = url

    @property
    def verification(self):
        """Gets the verification of this AnnotatedTag.


        :return: The verification of this AnnotatedTag.
        :rtype: PayloadCommitVerification
        """
        return self._verification

    @verification.setter
    def verification(self, verification):
        """Sets the verification of this AnnotatedTag.


        :param verification: The verification of this AnnotatedTag.
        :type verification: PayloadCommitVerification
        """

        self._verification = verification
