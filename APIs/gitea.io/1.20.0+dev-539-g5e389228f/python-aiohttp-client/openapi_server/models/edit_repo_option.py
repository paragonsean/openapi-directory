# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_tracker import ExternalTracker
from openapi_server.models.external_wiki import ExternalWiki
from openapi_server.models.internal_tracker import InternalTracker
from openapi_server import util


class EditRepoOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_manual_merge: bool=None, allow_merge_commits: bool=None, allow_rebase: bool=None, allow_rebase_explicit: bool=None, allow_rebase_update: bool=None, allow_squash_merge: bool=None, archived: bool=None, autodetect_manual_merge: bool=None, default_allow_maintainer_edit: bool=None, default_branch: str=None, default_delete_branch_after_merge: bool=None, default_merge_style: str=None, description: str=None, enable_prune: bool=None, external_tracker: ExternalTracker=None, external_wiki: ExternalWiki=None, has_actions: bool=None, has_issues: bool=None, has_packages: bool=None, has_projects: bool=None, has_pull_requests: bool=None, has_releases: bool=None, has_wiki: bool=None, ignore_whitespace_conflicts: bool=None, internal_tracker: InternalTracker=None, mirror_interval: str=None, name: str=None, private: bool=None, template: bool=None, website: str=None):
        """EditRepoOption - a model defined in OpenAPI

        :param allow_manual_merge: The allow_manual_merge of this EditRepoOption.
        :param allow_merge_commits: The allow_merge_commits of this EditRepoOption.
        :param allow_rebase: The allow_rebase of this EditRepoOption.
        :param allow_rebase_explicit: The allow_rebase_explicit of this EditRepoOption.
        :param allow_rebase_update: The allow_rebase_update of this EditRepoOption.
        :param allow_squash_merge: The allow_squash_merge of this EditRepoOption.
        :param archived: The archived of this EditRepoOption.
        :param autodetect_manual_merge: The autodetect_manual_merge of this EditRepoOption.
        :param default_allow_maintainer_edit: The default_allow_maintainer_edit of this EditRepoOption.
        :param default_branch: The default_branch of this EditRepoOption.
        :param default_delete_branch_after_merge: The default_delete_branch_after_merge of this EditRepoOption.
        :param default_merge_style: The default_merge_style of this EditRepoOption.
        :param description: The description of this EditRepoOption.
        :param enable_prune: The enable_prune of this EditRepoOption.
        :param external_tracker: The external_tracker of this EditRepoOption.
        :param external_wiki: The external_wiki of this EditRepoOption.
        :param has_actions: The has_actions of this EditRepoOption.
        :param has_issues: The has_issues of this EditRepoOption.
        :param has_packages: The has_packages of this EditRepoOption.
        :param has_projects: The has_projects of this EditRepoOption.
        :param has_pull_requests: The has_pull_requests of this EditRepoOption.
        :param has_releases: The has_releases of this EditRepoOption.
        :param has_wiki: The has_wiki of this EditRepoOption.
        :param ignore_whitespace_conflicts: The ignore_whitespace_conflicts of this EditRepoOption.
        :param internal_tracker: The internal_tracker of this EditRepoOption.
        :param mirror_interval: The mirror_interval of this EditRepoOption.
        :param name: The name of this EditRepoOption.
        :param private: The private of this EditRepoOption.
        :param template: The template of this EditRepoOption.
        :param website: The website of this EditRepoOption.
        """
        self.openapi_types = {
            'allow_manual_merge': bool,
            'allow_merge_commits': bool,
            'allow_rebase': bool,
            'allow_rebase_explicit': bool,
            'allow_rebase_update': bool,
            'allow_squash_merge': bool,
            'archived': bool,
            'autodetect_manual_merge': bool,
            'default_allow_maintainer_edit': bool,
            'default_branch': str,
            'default_delete_branch_after_merge': bool,
            'default_merge_style': str,
            'description': str,
            'enable_prune': bool,
            'external_tracker': ExternalTracker,
            'external_wiki': ExternalWiki,
            'has_actions': bool,
            'has_issues': bool,
            'has_packages': bool,
            'has_projects': bool,
            'has_pull_requests': bool,
            'has_releases': bool,
            'has_wiki': bool,
            'ignore_whitespace_conflicts': bool,
            'internal_tracker': InternalTracker,
            'mirror_interval': str,
            'name': str,
            'private': bool,
            'template': bool,
            'website': str
        }

        self.attribute_map = {
            'allow_manual_merge': 'allow_manual_merge',
            'allow_merge_commits': 'allow_merge_commits',
            'allow_rebase': 'allow_rebase',
            'allow_rebase_explicit': 'allow_rebase_explicit',
            'allow_rebase_update': 'allow_rebase_update',
            'allow_squash_merge': 'allow_squash_merge',
            'archived': 'archived',
            'autodetect_manual_merge': 'autodetect_manual_merge',
            'default_allow_maintainer_edit': 'default_allow_maintainer_edit',
            'default_branch': 'default_branch',
            'default_delete_branch_after_merge': 'default_delete_branch_after_merge',
            'default_merge_style': 'default_merge_style',
            'description': 'description',
            'enable_prune': 'enable_prune',
            'external_tracker': 'external_tracker',
            'external_wiki': 'external_wiki',
            'has_actions': 'has_actions',
            'has_issues': 'has_issues',
            'has_packages': 'has_packages',
            'has_projects': 'has_projects',
            'has_pull_requests': 'has_pull_requests',
            'has_releases': 'has_releases',
            'has_wiki': 'has_wiki',
            'ignore_whitespace_conflicts': 'ignore_whitespace_conflicts',
            'internal_tracker': 'internal_tracker',
            'mirror_interval': 'mirror_interval',
            'name': 'name',
            'private': 'private',
            'template': 'template',
            'website': 'website'
        }

        self._allow_manual_merge = allow_manual_merge
        self._allow_merge_commits = allow_merge_commits
        self._allow_rebase = allow_rebase
        self._allow_rebase_explicit = allow_rebase_explicit
        self._allow_rebase_update = allow_rebase_update
        self._allow_squash_merge = allow_squash_merge
        self._archived = archived
        self._autodetect_manual_merge = autodetect_manual_merge
        self._default_allow_maintainer_edit = default_allow_maintainer_edit
        self._default_branch = default_branch
        self._default_delete_branch_after_merge = default_delete_branch_after_merge
        self._default_merge_style = default_merge_style
        self._description = description
        self._enable_prune = enable_prune
        self._external_tracker = external_tracker
        self._external_wiki = external_wiki
        self._has_actions = has_actions
        self._has_issues = has_issues
        self._has_packages = has_packages
        self._has_projects = has_projects
        self._has_pull_requests = has_pull_requests
        self._has_releases = has_releases
        self._has_wiki = has_wiki
        self._ignore_whitespace_conflicts = ignore_whitespace_conflicts
        self._internal_tracker = internal_tracker
        self._mirror_interval = mirror_interval
        self._name = name
        self._private = private
        self._template = template
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditRepoOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EditRepoOption of this EditRepoOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_manual_merge(self):
        """Gets the allow_manual_merge of this EditRepoOption.

        either `true` to allow mark pr as merged manually, or `false` to prevent it.

        :return: The allow_manual_merge of this EditRepoOption.
        :rtype: bool
        """
        return self._allow_manual_merge

    @allow_manual_merge.setter
    def allow_manual_merge(self, allow_manual_merge):
        """Sets the allow_manual_merge of this EditRepoOption.

        either `true` to allow mark pr as merged manually, or `false` to prevent it.

        :param allow_manual_merge: The allow_manual_merge of this EditRepoOption.
        :type allow_manual_merge: bool
        """

        self._allow_manual_merge = allow_manual_merge

    @property
    def allow_merge_commits(self):
        """Gets the allow_merge_commits of this EditRepoOption.

        either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.

        :return: The allow_merge_commits of this EditRepoOption.
        :rtype: bool
        """
        return self._allow_merge_commits

    @allow_merge_commits.setter
    def allow_merge_commits(self, allow_merge_commits):
        """Sets the allow_merge_commits of this EditRepoOption.

        either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.

        :param allow_merge_commits: The allow_merge_commits of this EditRepoOption.
        :type allow_merge_commits: bool
        """

        self._allow_merge_commits = allow_merge_commits

    @property
    def allow_rebase(self):
        """Gets the allow_rebase of this EditRepoOption.

        either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.

        :return: The allow_rebase of this EditRepoOption.
        :rtype: bool
        """
        return self._allow_rebase

    @allow_rebase.setter
    def allow_rebase(self, allow_rebase):
        """Sets the allow_rebase of this EditRepoOption.

        either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.

        :param allow_rebase: The allow_rebase of this EditRepoOption.
        :type allow_rebase: bool
        """

        self._allow_rebase = allow_rebase

    @property
    def allow_rebase_explicit(self):
        """Gets the allow_rebase_explicit of this EditRepoOption.

        either `true` to allow rebase with explicit merge commits (--no-ff), or `false` to prevent rebase with explicit merge commits.

        :return: The allow_rebase_explicit of this EditRepoOption.
        :rtype: bool
        """
        return self._allow_rebase_explicit

    @allow_rebase_explicit.setter
    def allow_rebase_explicit(self, allow_rebase_explicit):
        """Sets the allow_rebase_explicit of this EditRepoOption.

        either `true` to allow rebase with explicit merge commits (--no-ff), or `false` to prevent rebase with explicit merge commits.

        :param allow_rebase_explicit: The allow_rebase_explicit of this EditRepoOption.
        :type allow_rebase_explicit: bool
        """

        self._allow_rebase_explicit = allow_rebase_explicit

    @property
    def allow_rebase_update(self):
        """Gets the allow_rebase_update of this EditRepoOption.

        either `true` to allow updating pull request branch by rebase, or `false` to prevent it.

        :return: The allow_rebase_update of this EditRepoOption.
        :rtype: bool
        """
        return self._allow_rebase_update

    @allow_rebase_update.setter
    def allow_rebase_update(self, allow_rebase_update):
        """Sets the allow_rebase_update of this EditRepoOption.

        either `true` to allow updating pull request branch by rebase, or `false` to prevent it.

        :param allow_rebase_update: The allow_rebase_update of this EditRepoOption.
        :type allow_rebase_update: bool
        """

        self._allow_rebase_update = allow_rebase_update

    @property
    def allow_squash_merge(self):
        """Gets the allow_squash_merge of this EditRepoOption.

        either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.

        :return: The allow_squash_merge of this EditRepoOption.
        :rtype: bool
        """
        return self._allow_squash_merge

    @allow_squash_merge.setter
    def allow_squash_merge(self, allow_squash_merge):
        """Sets the allow_squash_merge of this EditRepoOption.

        either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.

        :param allow_squash_merge: The allow_squash_merge of this EditRepoOption.
        :type allow_squash_merge: bool
        """

        self._allow_squash_merge = allow_squash_merge

    @property
    def archived(self):
        """Gets the archived of this EditRepoOption.

        set to `true` to archive this repository.

        :return: The archived of this EditRepoOption.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this EditRepoOption.

        set to `true` to archive this repository.

        :param archived: The archived of this EditRepoOption.
        :type archived: bool
        """

        self._archived = archived

    @property
    def autodetect_manual_merge(self):
        """Gets the autodetect_manual_merge of this EditRepoOption.

        either `true` to enable AutodetectManualMerge, or `false` to prevent it. Note: In some special cases, misjudgments can occur.

        :return: The autodetect_manual_merge of this EditRepoOption.
        :rtype: bool
        """
        return self._autodetect_manual_merge

    @autodetect_manual_merge.setter
    def autodetect_manual_merge(self, autodetect_manual_merge):
        """Sets the autodetect_manual_merge of this EditRepoOption.

        either `true` to enable AutodetectManualMerge, or `false` to prevent it. Note: In some special cases, misjudgments can occur.

        :param autodetect_manual_merge: The autodetect_manual_merge of this EditRepoOption.
        :type autodetect_manual_merge: bool
        """

        self._autodetect_manual_merge = autodetect_manual_merge

    @property
    def default_allow_maintainer_edit(self):
        """Gets the default_allow_maintainer_edit of this EditRepoOption.

        set to `true` to allow edits from maintainers by default

        :return: The default_allow_maintainer_edit of this EditRepoOption.
        :rtype: bool
        """
        return self._default_allow_maintainer_edit

    @default_allow_maintainer_edit.setter
    def default_allow_maintainer_edit(self, default_allow_maintainer_edit):
        """Sets the default_allow_maintainer_edit of this EditRepoOption.

        set to `true` to allow edits from maintainers by default

        :param default_allow_maintainer_edit: The default_allow_maintainer_edit of this EditRepoOption.
        :type default_allow_maintainer_edit: bool
        """

        self._default_allow_maintainer_edit = default_allow_maintainer_edit

    @property
    def default_branch(self):
        """Gets the default_branch of this EditRepoOption.

        sets the default branch for this repository.

        :return: The default_branch of this EditRepoOption.
        :rtype: str
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this EditRepoOption.

        sets the default branch for this repository.

        :param default_branch: The default_branch of this EditRepoOption.
        :type default_branch: str
        """

        self._default_branch = default_branch

    @property
    def default_delete_branch_after_merge(self):
        """Gets the default_delete_branch_after_merge of this EditRepoOption.

        set to `true` to delete pr branch after merge by default

        :return: The default_delete_branch_after_merge of this EditRepoOption.
        :rtype: bool
        """
        return self._default_delete_branch_after_merge

    @default_delete_branch_after_merge.setter
    def default_delete_branch_after_merge(self, default_delete_branch_after_merge):
        """Sets the default_delete_branch_after_merge of this EditRepoOption.

        set to `true` to delete pr branch after merge by default

        :param default_delete_branch_after_merge: The default_delete_branch_after_merge of this EditRepoOption.
        :type default_delete_branch_after_merge: bool
        """

        self._default_delete_branch_after_merge = default_delete_branch_after_merge

    @property
    def default_merge_style(self):
        """Gets the default_merge_style of this EditRepoOption.

        set to a merge style to be used by this repository: \"merge\", \"rebase\", \"rebase-merge\", or \"squash\".

        :return: The default_merge_style of this EditRepoOption.
        :rtype: str
        """
        return self._default_merge_style

    @default_merge_style.setter
    def default_merge_style(self, default_merge_style):
        """Sets the default_merge_style of this EditRepoOption.

        set to a merge style to be used by this repository: \"merge\", \"rebase\", \"rebase-merge\", or \"squash\".

        :param default_merge_style: The default_merge_style of this EditRepoOption.
        :type default_merge_style: str
        """

        self._default_merge_style = default_merge_style

    @property
    def description(self):
        """Gets the description of this EditRepoOption.

        a short description of the repository.

        :return: The description of this EditRepoOption.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EditRepoOption.

        a short description of the repository.

        :param description: The description of this EditRepoOption.
        :type description: str
        """

        self._description = description

    @property
    def enable_prune(self):
        """Gets the enable_prune of this EditRepoOption.

        enable prune - remove obsolete remote-tracking references

        :return: The enable_prune of this EditRepoOption.
        :rtype: bool
        """
        return self._enable_prune

    @enable_prune.setter
    def enable_prune(self, enable_prune):
        """Sets the enable_prune of this EditRepoOption.

        enable prune - remove obsolete remote-tracking references

        :param enable_prune: The enable_prune of this EditRepoOption.
        :type enable_prune: bool
        """

        self._enable_prune = enable_prune

    @property
    def external_tracker(self):
        """Gets the external_tracker of this EditRepoOption.


        :return: The external_tracker of this EditRepoOption.
        :rtype: ExternalTracker
        """
        return self._external_tracker

    @external_tracker.setter
    def external_tracker(self, external_tracker):
        """Sets the external_tracker of this EditRepoOption.


        :param external_tracker: The external_tracker of this EditRepoOption.
        :type external_tracker: ExternalTracker
        """

        self._external_tracker = external_tracker

    @property
    def external_wiki(self):
        """Gets the external_wiki of this EditRepoOption.


        :return: The external_wiki of this EditRepoOption.
        :rtype: ExternalWiki
        """
        return self._external_wiki

    @external_wiki.setter
    def external_wiki(self, external_wiki):
        """Sets the external_wiki of this EditRepoOption.


        :param external_wiki: The external_wiki of this EditRepoOption.
        :type external_wiki: ExternalWiki
        """

        self._external_wiki = external_wiki

    @property
    def has_actions(self):
        """Gets the has_actions of this EditRepoOption.

        either `true` to enable actions unit, or `false` to disable them.

        :return: The has_actions of this EditRepoOption.
        :rtype: bool
        """
        return self._has_actions

    @has_actions.setter
    def has_actions(self, has_actions):
        """Sets the has_actions of this EditRepoOption.

        either `true` to enable actions unit, or `false` to disable them.

        :param has_actions: The has_actions of this EditRepoOption.
        :type has_actions: bool
        """

        self._has_actions = has_actions

    @property
    def has_issues(self):
        """Gets the has_issues of this EditRepoOption.

        either `true` to enable issues for this repository or `false` to disable them.

        :return: The has_issues of this EditRepoOption.
        :rtype: bool
        """
        return self._has_issues

    @has_issues.setter
    def has_issues(self, has_issues):
        """Sets the has_issues of this EditRepoOption.

        either `true` to enable issues for this repository or `false` to disable them.

        :param has_issues: The has_issues of this EditRepoOption.
        :type has_issues: bool
        """

        self._has_issues = has_issues

    @property
    def has_packages(self):
        """Gets the has_packages of this EditRepoOption.

        either `true` to enable packages unit, or `false` to disable them.

        :return: The has_packages of this EditRepoOption.
        :rtype: bool
        """
        return self._has_packages

    @has_packages.setter
    def has_packages(self, has_packages):
        """Sets the has_packages of this EditRepoOption.

        either `true` to enable packages unit, or `false` to disable them.

        :param has_packages: The has_packages of this EditRepoOption.
        :type has_packages: bool
        """

        self._has_packages = has_packages

    @property
    def has_projects(self):
        """Gets the has_projects of this EditRepoOption.

        either `true` to enable project unit, or `false` to disable them.

        :return: The has_projects of this EditRepoOption.
        :rtype: bool
        """
        return self._has_projects

    @has_projects.setter
    def has_projects(self, has_projects):
        """Sets the has_projects of this EditRepoOption.

        either `true` to enable project unit, or `false` to disable them.

        :param has_projects: The has_projects of this EditRepoOption.
        :type has_projects: bool
        """

        self._has_projects = has_projects

    @property
    def has_pull_requests(self):
        """Gets the has_pull_requests of this EditRepoOption.

        either `true` to allow pull requests, or `false` to prevent pull request.

        :return: The has_pull_requests of this EditRepoOption.
        :rtype: bool
        """
        return self._has_pull_requests

    @has_pull_requests.setter
    def has_pull_requests(self, has_pull_requests):
        """Sets the has_pull_requests of this EditRepoOption.

        either `true` to allow pull requests, or `false` to prevent pull request.

        :param has_pull_requests: The has_pull_requests of this EditRepoOption.
        :type has_pull_requests: bool
        """

        self._has_pull_requests = has_pull_requests

    @property
    def has_releases(self):
        """Gets the has_releases of this EditRepoOption.

        either `true` to enable releases unit, or `false` to disable them.

        :return: The has_releases of this EditRepoOption.
        :rtype: bool
        """
        return self._has_releases

    @has_releases.setter
    def has_releases(self, has_releases):
        """Sets the has_releases of this EditRepoOption.

        either `true` to enable releases unit, or `false` to disable them.

        :param has_releases: The has_releases of this EditRepoOption.
        :type has_releases: bool
        """

        self._has_releases = has_releases

    @property
    def has_wiki(self):
        """Gets the has_wiki of this EditRepoOption.

        either `true` to enable the wiki for this repository or `false` to disable it.

        :return: The has_wiki of this EditRepoOption.
        :rtype: bool
        """
        return self._has_wiki

    @has_wiki.setter
    def has_wiki(self, has_wiki):
        """Sets the has_wiki of this EditRepoOption.

        either `true` to enable the wiki for this repository or `false` to disable it.

        :param has_wiki: The has_wiki of this EditRepoOption.
        :type has_wiki: bool
        """

        self._has_wiki = has_wiki

    @property
    def ignore_whitespace_conflicts(self):
        """Gets the ignore_whitespace_conflicts of this EditRepoOption.

        either `true` to ignore whitespace for conflicts, or `false` to not ignore whitespace.

        :return: The ignore_whitespace_conflicts of this EditRepoOption.
        :rtype: bool
        """
        return self._ignore_whitespace_conflicts

    @ignore_whitespace_conflicts.setter
    def ignore_whitespace_conflicts(self, ignore_whitespace_conflicts):
        """Sets the ignore_whitespace_conflicts of this EditRepoOption.

        either `true` to ignore whitespace for conflicts, or `false` to not ignore whitespace.

        :param ignore_whitespace_conflicts: The ignore_whitespace_conflicts of this EditRepoOption.
        :type ignore_whitespace_conflicts: bool
        """

        self._ignore_whitespace_conflicts = ignore_whitespace_conflicts

    @property
    def internal_tracker(self):
        """Gets the internal_tracker of this EditRepoOption.


        :return: The internal_tracker of this EditRepoOption.
        :rtype: InternalTracker
        """
        return self._internal_tracker

    @internal_tracker.setter
    def internal_tracker(self, internal_tracker):
        """Sets the internal_tracker of this EditRepoOption.


        :param internal_tracker: The internal_tracker of this EditRepoOption.
        :type internal_tracker: InternalTracker
        """

        self._internal_tracker = internal_tracker

    @property
    def mirror_interval(self):
        """Gets the mirror_interval of this EditRepoOption.

        set to a string like `8h30m0s` to set the mirror interval time

        :return: The mirror_interval of this EditRepoOption.
        :rtype: str
        """
        return self._mirror_interval

    @mirror_interval.setter
    def mirror_interval(self, mirror_interval):
        """Sets the mirror_interval of this EditRepoOption.

        set to a string like `8h30m0s` to set the mirror interval time

        :param mirror_interval: The mirror_interval of this EditRepoOption.
        :type mirror_interval: str
        """

        self._mirror_interval = mirror_interval

    @property
    def name(self):
        """Gets the name of this EditRepoOption.

        name of the repository

        :return: The name of this EditRepoOption.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EditRepoOption.

        name of the repository

        :param name: The name of this EditRepoOption.
        :type name: str
        """

        self._name = name

    @property
    def private(self):
        """Gets the private of this EditRepoOption.

        either `true` to make the repository private or `false` to make it public. Note: you will get a 422 error if the organization restricts changing repository visibility to organization owners and a non-owner tries to change the value of private.

        :return: The private of this EditRepoOption.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this EditRepoOption.

        either `true` to make the repository private or `false` to make it public. Note: you will get a 422 error if the organization restricts changing repository visibility to organization owners and a non-owner tries to change the value of private.

        :param private: The private of this EditRepoOption.
        :type private: bool
        """

        self._private = private

    @property
    def template(self):
        """Gets the template of this EditRepoOption.

        either `true` to make this repository a template or `false` to make it a normal repository

        :return: The template of this EditRepoOption.
        :rtype: bool
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this EditRepoOption.

        either `true` to make this repository a template or `false` to make it a normal repository

        :param template: The template of this EditRepoOption.
        :type template: bool
        """

        self._template = template

    @property
    def website(self):
        """Gets the website of this EditRepoOption.

        a URL with more information about the repository.

        :return: The website of this EditRepoOption.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this EditRepoOption.

        a URL with more information about the repository.

        :param website: The website of this EditRepoOption.
        :type website: str
        """

        self._website = website
