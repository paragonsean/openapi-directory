# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenerateRepoOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar: bool=None, default_branch: str=None, description: str=None, git_content: bool=None, git_hooks: bool=None, labels: bool=None, name: str=None, owner: str=None, private: bool=None, topics: bool=None, webhooks: bool=None):
        """GenerateRepoOption - a model defined in OpenAPI

        :param avatar: The avatar of this GenerateRepoOption.
        :param default_branch: The default_branch of this GenerateRepoOption.
        :param description: The description of this GenerateRepoOption.
        :param git_content: The git_content of this GenerateRepoOption.
        :param git_hooks: The git_hooks of this GenerateRepoOption.
        :param labels: The labels of this GenerateRepoOption.
        :param name: The name of this GenerateRepoOption.
        :param owner: The owner of this GenerateRepoOption.
        :param private: The private of this GenerateRepoOption.
        :param topics: The topics of this GenerateRepoOption.
        :param webhooks: The webhooks of this GenerateRepoOption.
        """
        self.openapi_types = {
            'avatar': bool,
            'default_branch': str,
            'description': str,
            'git_content': bool,
            'git_hooks': bool,
            'labels': bool,
            'name': str,
            'owner': str,
            'private': bool,
            'topics': bool,
            'webhooks': bool
        }

        self.attribute_map = {
            'avatar': 'avatar',
            'default_branch': 'default_branch',
            'description': 'description',
            'git_content': 'git_content',
            'git_hooks': 'git_hooks',
            'labels': 'labels',
            'name': 'name',
            'owner': 'owner',
            'private': 'private',
            'topics': 'topics',
            'webhooks': 'webhooks'
        }

        self._avatar = avatar
        self._default_branch = default_branch
        self._description = description
        self._git_content = git_content
        self._git_hooks = git_hooks
        self._labels = labels
        self._name = name
        self._owner = owner
        self._private = private
        self._topics = topics
        self._webhooks = webhooks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateRepoOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerateRepoOption of this GenerateRepoOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar(self):
        """Gets the avatar of this GenerateRepoOption.

        include avatar of the template repo

        :return: The avatar of this GenerateRepoOption.
        :rtype: bool
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this GenerateRepoOption.

        include avatar of the template repo

        :param avatar: The avatar of this GenerateRepoOption.
        :type avatar: bool
        """

        self._avatar = avatar

    @property
    def default_branch(self):
        """Gets the default_branch of this GenerateRepoOption.

        Default branch of the new repository

        :return: The default_branch of this GenerateRepoOption.
        :rtype: str
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this GenerateRepoOption.

        Default branch of the new repository

        :param default_branch: The default_branch of this GenerateRepoOption.
        :type default_branch: str
        """

        self._default_branch = default_branch

    @property
    def description(self):
        """Gets the description of this GenerateRepoOption.

        Description of the repository to create

        :return: The description of this GenerateRepoOption.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GenerateRepoOption.

        Description of the repository to create

        :param description: The description of this GenerateRepoOption.
        :type description: str
        """

        self._description = description

    @property
    def git_content(self):
        """Gets the git_content of this GenerateRepoOption.

        include git content of default branch in template repo

        :return: The git_content of this GenerateRepoOption.
        :rtype: bool
        """
        return self._git_content

    @git_content.setter
    def git_content(self, git_content):
        """Sets the git_content of this GenerateRepoOption.

        include git content of default branch in template repo

        :param git_content: The git_content of this GenerateRepoOption.
        :type git_content: bool
        """

        self._git_content = git_content

    @property
    def git_hooks(self):
        """Gets the git_hooks of this GenerateRepoOption.

        include git hooks in template repo

        :return: The git_hooks of this GenerateRepoOption.
        :rtype: bool
        """
        return self._git_hooks

    @git_hooks.setter
    def git_hooks(self, git_hooks):
        """Sets the git_hooks of this GenerateRepoOption.

        include git hooks in template repo

        :param git_hooks: The git_hooks of this GenerateRepoOption.
        :type git_hooks: bool
        """

        self._git_hooks = git_hooks

    @property
    def labels(self):
        """Gets the labels of this GenerateRepoOption.

        include labels in template repo

        :return: The labels of this GenerateRepoOption.
        :rtype: bool
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GenerateRepoOption.

        include labels in template repo

        :param labels: The labels of this GenerateRepoOption.
        :type labels: bool
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this GenerateRepoOption.

        Name of the repository to create

        :return: The name of this GenerateRepoOption.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GenerateRepoOption.

        Name of the repository to create

        :param name: The name of this GenerateRepoOption.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this GenerateRepoOption.

        The organization or person who will own the new repository

        :return: The owner of this GenerateRepoOption.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this GenerateRepoOption.

        The organization or person who will own the new repository

        :param owner: The owner of this GenerateRepoOption.
        :type owner: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner

    @property
    def private(self):
        """Gets the private of this GenerateRepoOption.

        Whether the repository is private

        :return: The private of this GenerateRepoOption.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this GenerateRepoOption.

        Whether the repository is private

        :param private: The private of this GenerateRepoOption.
        :type private: bool
        """

        self._private = private

    @property
    def topics(self):
        """Gets the topics of this GenerateRepoOption.

        include topics in template repo

        :return: The topics of this GenerateRepoOption.
        :rtype: bool
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this GenerateRepoOption.

        include topics in template repo

        :param topics: The topics of this GenerateRepoOption.
        :type topics: bool
        """

        self._topics = topics

    @property
    def webhooks(self):
        """Gets the webhooks of this GenerateRepoOption.

        include webhooks in template repo

        :return: The webhooks of this GenerateRepoOption.
        :rtype: bool
        """
        return self._webhooks

    @webhooks.setter
    def webhooks(self, webhooks):
        """Sets the webhooks of this GenerateRepoOption.

        include webhooks in template repo

        :param webhooks: The webhooks of this GenerateRepoOption.
        :type webhooks: bool
        """

        self._webhooks = webhooks
