# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EditUserOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, admin: bool=None, allow_create_organization: bool=None, allow_git_hook: bool=None, allow_import_local: bool=None, description: str=None, email: str=None, full_name: str=None, location: str=None, login_name: str=None, max_repo_creation: int=None, must_change_password: bool=None, password: str=None, prohibit_login: bool=None, restricted: bool=None, source_id: int=None, visibility: str=None, website: str=None):
        """EditUserOption - a model defined in OpenAPI

        :param active: The active of this EditUserOption.
        :param admin: The admin of this EditUserOption.
        :param allow_create_organization: The allow_create_organization of this EditUserOption.
        :param allow_git_hook: The allow_git_hook of this EditUserOption.
        :param allow_import_local: The allow_import_local of this EditUserOption.
        :param description: The description of this EditUserOption.
        :param email: The email of this EditUserOption.
        :param full_name: The full_name of this EditUserOption.
        :param location: The location of this EditUserOption.
        :param login_name: The login_name of this EditUserOption.
        :param max_repo_creation: The max_repo_creation of this EditUserOption.
        :param must_change_password: The must_change_password of this EditUserOption.
        :param password: The password of this EditUserOption.
        :param prohibit_login: The prohibit_login of this EditUserOption.
        :param restricted: The restricted of this EditUserOption.
        :param source_id: The source_id of this EditUserOption.
        :param visibility: The visibility of this EditUserOption.
        :param website: The website of this EditUserOption.
        """
        self.openapi_types = {
            'active': bool,
            'admin': bool,
            'allow_create_organization': bool,
            'allow_git_hook': bool,
            'allow_import_local': bool,
            'description': str,
            'email': str,
            'full_name': str,
            'location': str,
            'login_name': str,
            'max_repo_creation': int,
            'must_change_password': bool,
            'password': str,
            'prohibit_login': bool,
            'restricted': bool,
            'source_id': int,
            'visibility': str,
            'website': str
        }

        self.attribute_map = {
            'active': 'active',
            'admin': 'admin',
            'allow_create_organization': 'allow_create_organization',
            'allow_git_hook': 'allow_git_hook',
            'allow_import_local': 'allow_import_local',
            'description': 'description',
            'email': 'email',
            'full_name': 'full_name',
            'location': 'location',
            'login_name': 'login_name',
            'max_repo_creation': 'max_repo_creation',
            'must_change_password': 'must_change_password',
            'password': 'password',
            'prohibit_login': 'prohibit_login',
            'restricted': 'restricted',
            'source_id': 'source_id',
            'visibility': 'visibility',
            'website': 'website'
        }

        self._active = active
        self._admin = admin
        self._allow_create_organization = allow_create_organization
        self._allow_git_hook = allow_git_hook
        self._allow_import_local = allow_import_local
        self._description = description
        self._email = email
        self._full_name = full_name
        self._location = location
        self._login_name = login_name
        self._max_repo_creation = max_repo_creation
        self._must_change_password = must_change_password
        self._password = password
        self._prohibit_login = prohibit_login
        self._restricted = restricted
        self._source_id = source_id
        self._visibility = visibility
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditUserOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EditUserOption of this EditUserOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this EditUserOption.


        :return: The active of this EditUserOption.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this EditUserOption.


        :param active: The active of this EditUserOption.
        :type active: bool
        """

        self._active = active

    @property
    def admin(self):
        """Gets the admin of this EditUserOption.


        :return: The admin of this EditUserOption.
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this EditUserOption.


        :param admin: The admin of this EditUserOption.
        :type admin: bool
        """

        self._admin = admin

    @property
    def allow_create_organization(self):
        """Gets the allow_create_organization of this EditUserOption.


        :return: The allow_create_organization of this EditUserOption.
        :rtype: bool
        """
        return self._allow_create_organization

    @allow_create_organization.setter
    def allow_create_organization(self, allow_create_organization):
        """Sets the allow_create_organization of this EditUserOption.


        :param allow_create_organization: The allow_create_organization of this EditUserOption.
        :type allow_create_organization: bool
        """

        self._allow_create_organization = allow_create_organization

    @property
    def allow_git_hook(self):
        """Gets the allow_git_hook of this EditUserOption.


        :return: The allow_git_hook of this EditUserOption.
        :rtype: bool
        """
        return self._allow_git_hook

    @allow_git_hook.setter
    def allow_git_hook(self, allow_git_hook):
        """Sets the allow_git_hook of this EditUserOption.


        :param allow_git_hook: The allow_git_hook of this EditUserOption.
        :type allow_git_hook: bool
        """

        self._allow_git_hook = allow_git_hook

    @property
    def allow_import_local(self):
        """Gets the allow_import_local of this EditUserOption.


        :return: The allow_import_local of this EditUserOption.
        :rtype: bool
        """
        return self._allow_import_local

    @allow_import_local.setter
    def allow_import_local(self, allow_import_local):
        """Sets the allow_import_local of this EditUserOption.


        :param allow_import_local: The allow_import_local of this EditUserOption.
        :type allow_import_local: bool
        """

        self._allow_import_local = allow_import_local

    @property
    def description(self):
        """Gets the description of this EditUserOption.


        :return: The description of this EditUserOption.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EditUserOption.


        :param description: The description of this EditUserOption.
        :type description: str
        """

        self._description = description

    @property
    def email(self):
        """Gets the email of this EditUserOption.


        :return: The email of this EditUserOption.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EditUserOption.


        :param email: The email of this EditUserOption.
        :type email: str
        """

        self._email = email

    @property
    def full_name(self):
        """Gets the full_name of this EditUserOption.


        :return: The full_name of this EditUserOption.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this EditUserOption.


        :param full_name: The full_name of this EditUserOption.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def location(self):
        """Gets the location of this EditUserOption.


        :return: The location of this EditUserOption.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EditUserOption.


        :param location: The location of this EditUserOption.
        :type location: str
        """

        self._location = location

    @property
    def login_name(self):
        """Gets the login_name of this EditUserOption.


        :return: The login_name of this EditUserOption.
        :rtype: str
        """
        return self._login_name

    @login_name.setter
    def login_name(self, login_name):
        """Sets the login_name of this EditUserOption.


        :param login_name: The login_name of this EditUserOption.
        :type login_name: str
        """
        if login_name is None:
            raise ValueError("Invalid value for `login_name`, must not be `None`")

        self._login_name = login_name

    @property
    def max_repo_creation(self):
        """Gets the max_repo_creation of this EditUserOption.


        :return: The max_repo_creation of this EditUserOption.
        :rtype: int
        """
        return self._max_repo_creation

    @max_repo_creation.setter
    def max_repo_creation(self, max_repo_creation):
        """Sets the max_repo_creation of this EditUserOption.


        :param max_repo_creation: The max_repo_creation of this EditUserOption.
        :type max_repo_creation: int
        """

        self._max_repo_creation = max_repo_creation

    @property
    def must_change_password(self):
        """Gets the must_change_password of this EditUserOption.


        :return: The must_change_password of this EditUserOption.
        :rtype: bool
        """
        return self._must_change_password

    @must_change_password.setter
    def must_change_password(self, must_change_password):
        """Sets the must_change_password of this EditUserOption.


        :param must_change_password: The must_change_password of this EditUserOption.
        :type must_change_password: bool
        """

        self._must_change_password = must_change_password

    @property
    def password(self):
        """Gets the password of this EditUserOption.


        :return: The password of this EditUserOption.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this EditUserOption.


        :param password: The password of this EditUserOption.
        :type password: str
        """

        self._password = password

    @property
    def prohibit_login(self):
        """Gets the prohibit_login of this EditUserOption.


        :return: The prohibit_login of this EditUserOption.
        :rtype: bool
        """
        return self._prohibit_login

    @prohibit_login.setter
    def prohibit_login(self, prohibit_login):
        """Sets the prohibit_login of this EditUserOption.


        :param prohibit_login: The prohibit_login of this EditUserOption.
        :type prohibit_login: bool
        """

        self._prohibit_login = prohibit_login

    @property
    def restricted(self):
        """Gets the restricted of this EditUserOption.


        :return: The restricted of this EditUserOption.
        :rtype: bool
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """Sets the restricted of this EditUserOption.


        :param restricted: The restricted of this EditUserOption.
        :type restricted: bool
        """

        self._restricted = restricted

    @property
    def source_id(self):
        """Gets the source_id of this EditUserOption.


        :return: The source_id of this EditUserOption.
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this EditUserOption.


        :param source_id: The source_id of this EditUserOption.
        :type source_id: int
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def visibility(self):
        """Gets the visibility of this EditUserOption.


        :return: The visibility of this EditUserOption.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this EditUserOption.


        :param visibility: The visibility of this EditUserOption.
        :type visibility: str
        """

        self._visibility = visibility

    @property
    def website(self):
        """Gets the website of this EditUserOption.


        :return: The website of this EditUserOption.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this EditUserOption.


        :param website: The website of this EditUserOption.
        :type website: str
        """

        self._website = website
