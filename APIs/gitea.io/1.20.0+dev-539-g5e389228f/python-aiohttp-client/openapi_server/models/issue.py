# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server.models.label import Label
from openapi_server.models.milestone import Milestone
from openapi_server.models.pull_request_meta import PullRequestMeta
from openapi_server.models.repository_meta import RepositoryMeta
from openapi_server.models.user import User
from openapi_server import util


class Issue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: List[Attachment]=None, assignee: User=None, assignees: List[User]=None, body: str=None, closed_at: datetime=None, comments: int=None, created_at: datetime=None, due_date: datetime=None, html_url: str=None, id: int=None, is_locked: bool=None, labels: List[Label]=None, milestone: Milestone=None, number: int=None, original_author: str=None, original_author_id: int=None, pull_request: PullRequestMeta=None, ref: str=None, repository: RepositoryMeta=None, state: str=None, title: str=None, updated_at: datetime=None, url: str=None, user: User=None):
        """Issue - a model defined in OpenAPI

        :param assets: The assets of this Issue.
        :param assignee: The assignee of this Issue.
        :param assignees: The assignees of this Issue.
        :param body: The body of this Issue.
        :param closed_at: The closed_at of this Issue.
        :param comments: The comments of this Issue.
        :param created_at: The created_at of this Issue.
        :param due_date: The due_date of this Issue.
        :param html_url: The html_url of this Issue.
        :param id: The id of this Issue.
        :param is_locked: The is_locked of this Issue.
        :param labels: The labels of this Issue.
        :param milestone: The milestone of this Issue.
        :param number: The number of this Issue.
        :param original_author: The original_author of this Issue.
        :param original_author_id: The original_author_id of this Issue.
        :param pull_request: The pull_request of this Issue.
        :param ref: The ref of this Issue.
        :param repository: The repository of this Issue.
        :param state: The state of this Issue.
        :param title: The title of this Issue.
        :param updated_at: The updated_at of this Issue.
        :param url: The url of this Issue.
        :param user: The user of this Issue.
        """
        self.openapi_types = {
            'assets': List[Attachment],
            'assignee': User,
            'assignees': List[User],
            'body': str,
            'closed_at': datetime,
            'comments': int,
            'created_at': datetime,
            'due_date': datetime,
            'html_url': str,
            'id': int,
            'is_locked': bool,
            'labels': List[Label],
            'milestone': Milestone,
            'number': int,
            'original_author': str,
            'original_author_id': int,
            'pull_request': PullRequestMeta,
            'ref': str,
            'repository': RepositoryMeta,
            'state': str,
            'title': str,
            'updated_at': datetime,
            'url': str,
            'user': User
        }

        self.attribute_map = {
            'assets': 'assets',
            'assignee': 'assignee',
            'assignees': 'assignees',
            'body': 'body',
            'closed_at': 'closed_at',
            'comments': 'comments',
            'created_at': 'created_at',
            'due_date': 'due_date',
            'html_url': 'html_url',
            'id': 'id',
            'is_locked': 'is_locked',
            'labels': 'labels',
            'milestone': 'milestone',
            'number': 'number',
            'original_author': 'original_author',
            'original_author_id': 'original_author_id',
            'pull_request': 'pull_request',
            'ref': 'ref',
            'repository': 'repository',
            'state': 'state',
            'title': 'title',
            'updated_at': 'updated_at',
            'url': 'url',
            'user': 'user'
        }

        self._assets = assets
        self._assignee = assignee
        self._assignees = assignees
        self._body = body
        self._closed_at = closed_at
        self._comments = comments
        self._created_at = created_at
        self._due_date = due_date
        self._html_url = html_url
        self._id = id
        self._is_locked = is_locked
        self._labels = labels
        self._milestone = milestone
        self._number = number
        self._original_author = original_author
        self._original_author_id = original_author_id
        self._pull_request = pull_request
        self._ref = ref
        self._repository = repository
        self._state = state
        self._title = title
        self._updated_at = updated_at
        self._url = url
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Issue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Issue of this Issue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this Issue.


        :return: The assets of this Issue.
        :rtype: List[Attachment]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Issue.


        :param assets: The assets of this Issue.
        :type assets: List[Attachment]
        """

        self._assets = assets

    @property
    def assignee(self):
        """Gets the assignee of this Issue.


        :return: The assignee of this Issue.
        :rtype: User
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this Issue.


        :param assignee: The assignee of this Issue.
        :type assignee: User
        """

        self._assignee = assignee

    @property
    def assignees(self):
        """Gets the assignees of this Issue.


        :return: The assignees of this Issue.
        :rtype: List[User]
        """
        return self._assignees

    @assignees.setter
    def assignees(self, assignees):
        """Sets the assignees of this Issue.


        :param assignees: The assignees of this Issue.
        :type assignees: List[User]
        """

        self._assignees = assignees

    @property
    def body(self):
        """Gets the body of this Issue.


        :return: The body of this Issue.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Issue.


        :param body: The body of this Issue.
        :type body: str
        """

        self._body = body

    @property
    def closed_at(self):
        """Gets the closed_at of this Issue.


        :return: The closed_at of this Issue.
        :rtype: datetime
        """
        return self._closed_at

    @closed_at.setter
    def closed_at(self, closed_at):
        """Sets the closed_at of this Issue.


        :param closed_at: The closed_at of this Issue.
        :type closed_at: datetime
        """

        self._closed_at = closed_at

    @property
    def comments(self):
        """Gets the comments of this Issue.


        :return: The comments of this Issue.
        :rtype: int
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Issue.


        :param comments: The comments of this Issue.
        :type comments: int
        """

        self._comments = comments

    @property
    def created_at(self):
        """Gets the created_at of this Issue.


        :return: The created_at of this Issue.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Issue.


        :param created_at: The created_at of this Issue.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def due_date(self):
        """Gets the due_date of this Issue.


        :return: The due_date of this Issue.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Issue.


        :param due_date: The due_date of this Issue.
        :type due_date: datetime
        """

        self._due_date = due_date

    @property
    def html_url(self):
        """Gets the html_url of this Issue.


        :return: The html_url of this Issue.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Issue.


        :param html_url: The html_url of this Issue.
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this Issue.


        :return: The id of this Issue.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Issue.


        :param id: The id of this Issue.
        :type id: int
        """

        self._id = id

    @property
    def is_locked(self):
        """Gets the is_locked of this Issue.


        :return: The is_locked of this Issue.
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this Issue.


        :param is_locked: The is_locked of this Issue.
        :type is_locked: bool
        """

        self._is_locked = is_locked

    @property
    def labels(self):
        """Gets the labels of this Issue.


        :return: The labels of this Issue.
        :rtype: List[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Issue.


        :param labels: The labels of this Issue.
        :type labels: List[Label]
        """

        self._labels = labels

    @property
    def milestone(self):
        """Gets the milestone of this Issue.


        :return: The milestone of this Issue.
        :rtype: Milestone
        """
        return self._milestone

    @milestone.setter
    def milestone(self, milestone):
        """Sets the milestone of this Issue.


        :param milestone: The milestone of this Issue.
        :type milestone: Milestone
        """

        self._milestone = milestone

    @property
    def number(self):
        """Gets the number of this Issue.


        :return: The number of this Issue.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Issue.


        :param number: The number of this Issue.
        :type number: int
        """

        self._number = number

    @property
    def original_author(self):
        """Gets the original_author of this Issue.


        :return: The original_author of this Issue.
        :rtype: str
        """
        return self._original_author

    @original_author.setter
    def original_author(self, original_author):
        """Sets the original_author of this Issue.


        :param original_author: The original_author of this Issue.
        :type original_author: str
        """

        self._original_author = original_author

    @property
    def original_author_id(self):
        """Gets the original_author_id of this Issue.


        :return: The original_author_id of this Issue.
        :rtype: int
        """
        return self._original_author_id

    @original_author_id.setter
    def original_author_id(self, original_author_id):
        """Sets the original_author_id of this Issue.


        :param original_author_id: The original_author_id of this Issue.
        :type original_author_id: int
        """

        self._original_author_id = original_author_id

    @property
    def pull_request(self):
        """Gets the pull_request of this Issue.


        :return: The pull_request of this Issue.
        :rtype: PullRequestMeta
        """
        return self._pull_request

    @pull_request.setter
    def pull_request(self, pull_request):
        """Sets the pull_request of this Issue.


        :param pull_request: The pull_request of this Issue.
        :type pull_request: PullRequestMeta
        """

        self._pull_request = pull_request

    @property
    def ref(self):
        """Gets the ref of this Issue.


        :return: The ref of this Issue.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this Issue.


        :param ref: The ref of this Issue.
        :type ref: str
        """

        self._ref = ref

    @property
    def repository(self):
        """Gets the repository of this Issue.


        :return: The repository of this Issue.
        :rtype: RepositoryMeta
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this Issue.


        :param repository: The repository of this Issue.
        :type repository: RepositoryMeta
        """

        self._repository = repository

    @property
    def state(self):
        """Gets the state of this Issue.

        StateType issue state type

        :return: The state of this Issue.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Issue.

        StateType issue state type

        :param state: The state of this Issue.
        :type state: str
        """

        self._state = state

    @property
    def title(self):
        """Gets the title of this Issue.


        :return: The title of this Issue.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Issue.


        :param title: The title of this Issue.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this Issue.


        :return: The updated_at of this Issue.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Issue.


        :param updated_at: The updated_at of this Issue.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this Issue.


        :return: The url of this Issue.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Issue.


        :param url: The url of this Issue.
        :type url: str
        """

        self._url = url

    @property
    def user(self):
        """Gets the user of this Issue.


        :return: The user of this Issue.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Issue.


        :param user: The user of this Issue.
        :type user: User
        """

        self._user = user
