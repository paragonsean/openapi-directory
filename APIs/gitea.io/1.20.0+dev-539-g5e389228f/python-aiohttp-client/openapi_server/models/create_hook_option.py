# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateHookOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=False, authorization_header: str=None, branch_filter: str=None, config: Dict[str, str]=None, events: List[str]=None, type: str=None):
        """CreateHookOption - a model defined in OpenAPI

        :param active: The active of this CreateHookOption.
        :param authorization_header: The authorization_header of this CreateHookOption.
        :param branch_filter: The branch_filter of this CreateHookOption.
        :param config: The config of this CreateHookOption.
        :param events: The events of this CreateHookOption.
        :param type: The type of this CreateHookOption.
        """
        self.openapi_types = {
            'active': bool,
            'authorization_header': str,
            'branch_filter': str,
            'config': Dict[str, str],
            'events': List[str],
            'type': str
        }

        self.attribute_map = {
            'active': 'active',
            'authorization_header': 'authorization_header',
            'branch_filter': 'branch_filter',
            'config': 'config',
            'events': 'events',
            'type': 'type'
        }

        self._active = active
        self._authorization_header = authorization_header
        self._branch_filter = branch_filter
        self._config = config
        self._events = events
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateHookOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateHookOption of this CreateHookOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this CreateHookOption.


        :return: The active of this CreateHookOption.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CreateHookOption.


        :param active: The active of this CreateHookOption.
        :type active: bool
        """

        self._active = active

    @property
    def authorization_header(self):
        """Gets the authorization_header of this CreateHookOption.


        :return: The authorization_header of this CreateHookOption.
        :rtype: str
        """
        return self._authorization_header

    @authorization_header.setter
    def authorization_header(self, authorization_header):
        """Sets the authorization_header of this CreateHookOption.


        :param authorization_header: The authorization_header of this CreateHookOption.
        :type authorization_header: str
        """

        self._authorization_header = authorization_header

    @property
    def branch_filter(self):
        """Gets the branch_filter of this CreateHookOption.


        :return: The branch_filter of this CreateHookOption.
        :rtype: str
        """
        return self._branch_filter

    @branch_filter.setter
    def branch_filter(self, branch_filter):
        """Sets the branch_filter of this CreateHookOption.


        :param branch_filter: The branch_filter of this CreateHookOption.
        :type branch_filter: str
        """

        self._branch_filter = branch_filter

    @property
    def config(self):
        """Gets the config of this CreateHookOption.

        CreateHookOptionConfig has all config options in it required are \"content_type\" and \"url\" Required

        :return: The config of this CreateHookOption.
        :rtype: Dict[str, str]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this CreateHookOption.

        CreateHookOptionConfig has all config options in it required are \"content_type\" and \"url\" Required

        :param config: The config of this CreateHookOption.
        :type config: Dict[str, str]
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")

        self._config = config

    @property
    def events(self):
        """Gets the events of this CreateHookOption.


        :return: The events of this CreateHookOption.
        :rtype: List[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this CreateHookOption.


        :param events: The events of this CreateHookOption.
        :type events: List[str]
        """

        self._events = events

    @property
    def type(self):
        """Gets the type of this CreateHookOption.


        :return: The type of this CreateHookOption.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateHookOption.


        :param type: The type of this CreateHookOption.
        :type type: str
        """
        allowed_values = ["dingtalk", "discord", "gitea", "gogs", "msteams", "slack", "telegram", "feishu", "wechatwork", "packagist"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
