# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotificationSubject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, html_url: str=None, latest_comment_html_url: str=None, latest_comment_url: str=None, state: str=None, title: str=None, type: str=None, url: str=None):
        """NotificationSubject - a model defined in OpenAPI

        :param html_url: The html_url of this NotificationSubject.
        :param latest_comment_html_url: The latest_comment_html_url of this NotificationSubject.
        :param latest_comment_url: The latest_comment_url of this NotificationSubject.
        :param state: The state of this NotificationSubject.
        :param title: The title of this NotificationSubject.
        :param type: The type of this NotificationSubject.
        :param url: The url of this NotificationSubject.
        """
        self.openapi_types = {
            'html_url': str,
            'latest_comment_html_url': str,
            'latest_comment_url': str,
            'state': str,
            'title': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'html_url': 'html_url',
            'latest_comment_html_url': 'latest_comment_html_url',
            'latest_comment_url': 'latest_comment_url',
            'state': 'state',
            'title': 'title',
            'type': 'type',
            'url': 'url'
        }

        self._html_url = html_url
        self._latest_comment_html_url = latest_comment_html_url
        self._latest_comment_url = latest_comment_url
        self._state = state
        self._title = title
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationSubject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationSubject of this NotificationSubject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def html_url(self):
        """Gets the html_url of this NotificationSubject.


        :return: The html_url of this NotificationSubject.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this NotificationSubject.


        :param html_url: The html_url of this NotificationSubject.
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def latest_comment_html_url(self):
        """Gets the latest_comment_html_url of this NotificationSubject.


        :return: The latest_comment_html_url of this NotificationSubject.
        :rtype: str
        """
        return self._latest_comment_html_url

    @latest_comment_html_url.setter
    def latest_comment_html_url(self, latest_comment_html_url):
        """Sets the latest_comment_html_url of this NotificationSubject.


        :param latest_comment_html_url: The latest_comment_html_url of this NotificationSubject.
        :type latest_comment_html_url: str
        """

        self._latest_comment_html_url = latest_comment_html_url

    @property
    def latest_comment_url(self):
        """Gets the latest_comment_url of this NotificationSubject.


        :return: The latest_comment_url of this NotificationSubject.
        :rtype: str
        """
        return self._latest_comment_url

    @latest_comment_url.setter
    def latest_comment_url(self, latest_comment_url):
        """Sets the latest_comment_url of this NotificationSubject.


        :param latest_comment_url: The latest_comment_url of this NotificationSubject.
        :type latest_comment_url: str
        """

        self._latest_comment_url = latest_comment_url

    @property
    def state(self):
        """Gets the state of this NotificationSubject.

        StateType issue state type

        :return: The state of this NotificationSubject.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NotificationSubject.

        StateType issue state type

        :param state: The state of this NotificationSubject.
        :type state: str
        """

        self._state = state

    @property
    def title(self):
        """Gets the title of this NotificationSubject.


        :return: The title of this NotificationSubject.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NotificationSubject.


        :param title: The title of this NotificationSubject.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this NotificationSubject.

        NotifySubjectType represent type of notification subject

        :return: The type of this NotificationSubject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NotificationSubject.

        NotifySubjectType represent type of notification subject

        :param type: The type of this NotificationSubject.
        :type type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this NotificationSubject.


        :return: The url of this NotificationSubject.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NotificationSubject.


        :param url: The url of this NotificationSubject.
        :type url: str
        """

        self._url = url
