# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.issue_form_field import IssueFormField
from openapi_server import util


class IssueTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, about: str=None, body: List[IssueFormField]=None, content: str=None, file_name: str=None, labels: List[str]=None, name: str=None, ref: str=None, title: str=None):
        """IssueTemplate - a model defined in OpenAPI

        :param about: The about of this IssueTemplate.
        :param body: The body of this IssueTemplate.
        :param content: The content of this IssueTemplate.
        :param file_name: The file_name of this IssueTemplate.
        :param labels: The labels of this IssueTemplate.
        :param name: The name of this IssueTemplate.
        :param ref: The ref of this IssueTemplate.
        :param title: The title of this IssueTemplate.
        """
        self.openapi_types = {
            'about': str,
            'body': List[IssueFormField],
            'content': str,
            'file_name': str,
            'labels': List[str],
            'name': str,
            'ref': str,
            'title': str
        }

        self.attribute_map = {
            'about': 'about',
            'body': 'body',
            'content': 'content',
            'file_name': 'file_name',
            'labels': 'labels',
            'name': 'name',
            'ref': 'ref',
            'title': 'title'
        }

        self._about = about
        self._body = body
        self._content = content
        self._file_name = file_name
        self._labels = labels
        self._name = name
        self._ref = ref
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssueTemplate of this IssueTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def about(self):
        """Gets the about of this IssueTemplate.


        :return: The about of this IssueTemplate.
        :rtype: str
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this IssueTemplate.


        :param about: The about of this IssueTemplate.
        :type about: str
        """

        self._about = about

    @property
    def body(self):
        """Gets the body of this IssueTemplate.


        :return: The body of this IssueTemplate.
        :rtype: List[IssueFormField]
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this IssueTemplate.


        :param body: The body of this IssueTemplate.
        :type body: List[IssueFormField]
        """

        self._body = body

    @property
    def content(self):
        """Gets the content of this IssueTemplate.


        :return: The content of this IssueTemplate.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this IssueTemplate.


        :param content: The content of this IssueTemplate.
        :type content: str
        """

        self._content = content

    @property
    def file_name(self):
        """Gets the file_name of this IssueTemplate.


        :return: The file_name of this IssueTemplate.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this IssueTemplate.


        :param file_name: The file_name of this IssueTemplate.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def labels(self):
        """Gets the labels of this IssueTemplate.


        :return: The labels of this IssueTemplate.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this IssueTemplate.


        :param labels: The labels of this IssueTemplate.
        :type labels: List[str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this IssueTemplate.


        :return: The name of this IssueTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssueTemplate.


        :param name: The name of this IssueTemplate.
        :type name: str
        """

        self._name = name

    @property
    def ref(self):
        """Gets the ref of this IssueTemplate.


        :return: The ref of this IssueTemplate.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this IssueTemplate.


        :param ref: The ref of this IssueTemplate.
        :type ref: str
        """

        self._ref = ref

    @property
    def title(self):
        """Gets the title of this IssueTemplate.


        :return: The title of this IssueTemplate.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this IssueTemplate.


        :param title: The title of this IssueTemplate.
        :type title: str
        """

        self._title = title
