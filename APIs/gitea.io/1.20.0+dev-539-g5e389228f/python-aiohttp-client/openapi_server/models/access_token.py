# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, scopes: List[str]=None, sha1: str=None, token_last_eight: str=None):
        """AccessToken - a model defined in OpenAPI

        :param id: The id of this AccessToken.
        :param name: The name of this AccessToken.
        :param scopes: The scopes of this AccessToken.
        :param sha1: The sha1 of this AccessToken.
        :param token_last_eight: The token_last_eight of this AccessToken.
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'scopes': List[str],
            'sha1': str,
            'token_last_eight': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'scopes': 'scopes',
            'sha1': 'sha1',
            'token_last_eight': 'token_last_eight'
        }

        self._id = id
        self._name = name
        self._scopes = scopes
        self._sha1 = sha1
        self._token_last_eight = token_last_eight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessToken of this AccessToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this AccessToken.


        :return: The id of this AccessToken.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccessToken.


        :param id: The id of this AccessToken.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AccessToken.


        :return: The name of this AccessToken.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccessToken.


        :param name: The name of this AccessToken.
        :type name: str
        """

        self._name = name

    @property
    def scopes(self):
        """Gets the scopes of this AccessToken.


        :return: The scopes of this AccessToken.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this AccessToken.


        :param scopes: The scopes of this AccessToken.
        :type scopes: List[str]
        """

        self._scopes = scopes

    @property
    def sha1(self):
        """Gets the sha1 of this AccessToken.


        :return: The sha1 of this AccessToken.
        :rtype: str
        """
        return self._sha1

    @sha1.setter
    def sha1(self, sha1):
        """Sets the sha1 of this AccessToken.


        :param sha1: The sha1 of this AccessToken.
        :type sha1: str
        """

        self._sha1 = sha1

    @property
    def token_last_eight(self):
        """Gets the token_last_eight of this AccessToken.


        :return: The token_last_eight of this AccessToken.
        :rtype: str
        """
        return self._token_last_eight

    @token_last_eight.setter
    def token_last_eight(self, token_last_eight):
        """Sets the token_last_eight of this AccessToken.


        :param token_last_eight: The token_last_eight of this AccessToken.
        :type token_last_eight: str
        """

        self._token_last_eight = token_last_eight
