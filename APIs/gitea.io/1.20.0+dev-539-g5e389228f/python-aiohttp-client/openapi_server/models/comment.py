# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server.models.user import User
from openapi_server import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: List[Attachment]=None, body: str=None, created_at: datetime=None, html_url: str=None, id: int=None, issue_url: str=None, original_author: str=None, original_author_id: int=None, pull_request_url: str=None, updated_at: datetime=None, user: User=None):
        """Comment - a model defined in OpenAPI

        :param assets: The assets of this Comment.
        :param body: The body of this Comment.
        :param created_at: The created_at of this Comment.
        :param html_url: The html_url of this Comment.
        :param id: The id of this Comment.
        :param issue_url: The issue_url of this Comment.
        :param original_author: The original_author of this Comment.
        :param original_author_id: The original_author_id of this Comment.
        :param pull_request_url: The pull_request_url of this Comment.
        :param updated_at: The updated_at of this Comment.
        :param user: The user of this Comment.
        """
        self.openapi_types = {
            'assets': List[Attachment],
            'body': str,
            'created_at': datetime,
            'html_url': str,
            'id': int,
            'issue_url': str,
            'original_author': str,
            'original_author_id': int,
            'pull_request_url': str,
            'updated_at': datetime,
            'user': User
        }

        self.attribute_map = {
            'assets': 'assets',
            'body': 'body',
            'created_at': 'created_at',
            'html_url': 'html_url',
            'id': 'id',
            'issue_url': 'issue_url',
            'original_author': 'original_author',
            'original_author_id': 'original_author_id',
            'pull_request_url': 'pull_request_url',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._assets = assets
        self._body = body
        self._created_at = created_at
        self._html_url = html_url
        self._id = id
        self._issue_url = issue_url
        self._original_author = original_author
        self._original_author_id = original_author_id
        self._pull_request_url = pull_request_url
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Comment of this Comment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this Comment.


        :return: The assets of this Comment.
        :rtype: List[Attachment]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Comment.


        :param assets: The assets of this Comment.
        :type assets: List[Attachment]
        """

        self._assets = assets

    @property
    def body(self):
        """Gets the body of this Comment.


        :return: The body of this Comment.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Comment.


        :param body: The body of this Comment.
        :type body: str
        """

        self._body = body

    @property
    def created_at(self):
        """Gets the created_at of this Comment.


        :return: The created_at of this Comment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Comment.


        :param created_at: The created_at of this Comment.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def html_url(self):
        """Gets the html_url of this Comment.


        :return: The html_url of this Comment.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Comment.


        :param html_url: The html_url of this Comment.
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this Comment.


        :return: The id of this Comment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.


        :param id: The id of this Comment.
        :type id: int
        """

        self._id = id

    @property
    def issue_url(self):
        """Gets the issue_url of this Comment.


        :return: The issue_url of this Comment.
        :rtype: str
        """
        return self._issue_url

    @issue_url.setter
    def issue_url(self, issue_url):
        """Sets the issue_url of this Comment.


        :param issue_url: The issue_url of this Comment.
        :type issue_url: str
        """

        self._issue_url = issue_url

    @property
    def original_author(self):
        """Gets the original_author of this Comment.


        :return: The original_author of this Comment.
        :rtype: str
        """
        return self._original_author

    @original_author.setter
    def original_author(self, original_author):
        """Sets the original_author of this Comment.


        :param original_author: The original_author of this Comment.
        :type original_author: str
        """

        self._original_author = original_author

    @property
    def original_author_id(self):
        """Gets the original_author_id of this Comment.


        :return: The original_author_id of this Comment.
        :rtype: int
        """
        return self._original_author_id

    @original_author_id.setter
    def original_author_id(self, original_author_id):
        """Sets the original_author_id of this Comment.


        :param original_author_id: The original_author_id of this Comment.
        :type original_author_id: int
        """

        self._original_author_id = original_author_id

    @property
    def pull_request_url(self):
        """Gets the pull_request_url of this Comment.


        :return: The pull_request_url of this Comment.
        :rtype: str
        """
        return self._pull_request_url

    @pull_request_url.setter
    def pull_request_url(self, pull_request_url):
        """Sets the pull_request_url of this Comment.


        :param pull_request_url: The pull_request_url of this Comment.
        :type pull_request_url: str
        """

        self._pull_request_url = pull_request_url

    @property
    def updated_at(self):
        """Gets the updated_at of this Comment.


        :return: The updated_at of this Comment.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Comment.


        :param updated_at: The updated_at of this Comment.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this Comment.


        :return: The user of this Comment.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Comment.


        :param user: The user of this Comment.
        :type user: User
        """

        self._user = user
