# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrganizationPermissions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_create_repository: bool=None, can_read: bool=None, can_write: bool=None, is_admin: bool=None, is_owner: bool=None):
        """OrganizationPermissions - a model defined in OpenAPI

        :param can_create_repository: The can_create_repository of this OrganizationPermissions.
        :param can_read: The can_read of this OrganizationPermissions.
        :param can_write: The can_write of this OrganizationPermissions.
        :param is_admin: The is_admin of this OrganizationPermissions.
        :param is_owner: The is_owner of this OrganizationPermissions.
        """
        self.openapi_types = {
            'can_create_repository': bool,
            'can_read': bool,
            'can_write': bool,
            'is_admin': bool,
            'is_owner': bool
        }

        self.attribute_map = {
            'can_create_repository': 'can_create_repository',
            'can_read': 'can_read',
            'can_write': 'can_write',
            'is_admin': 'is_admin',
            'is_owner': 'is_owner'
        }

        self._can_create_repository = can_create_repository
        self._can_read = can_read
        self._can_write = can_write
        self._is_admin = is_admin
        self._is_owner = is_owner

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationPermissions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganizationPermissions of this OrganizationPermissions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_create_repository(self):
        """Gets the can_create_repository of this OrganizationPermissions.


        :return: The can_create_repository of this OrganizationPermissions.
        :rtype: bool
        """
        return self._can_create_repository

    @can_create_repository.setter
    def can_create_repository(self, can_create_repository):
        """Sets the can_create_repository of this OrganizationPermissions.


        :param can_create_repository: The can_create_repository of this OrganizationPermissions.
        :type can_create_repository: bool
        """

        self._can_create_repository = can_create_repository

    @property
    def can_read(self):
        """Gets the can_read of this OrganizationPermissions.


        :return: The can_read of this OrganizationPermissions.
        :rtype: bool
        """
        return self._can_read

    @can_read.setter
    def can_read(self, can_read):
        """Sets the can_read of this OrganizationPermissions.


        :param can_read: The can_read of this OrganizationPermissions.
        :type can_read: bool
        """

        self._can_read = can_read

    @property
    def can_write(self):
        """Gets the can_write of this OrganizationPermissions.


        :return: The can_write of this OrganizationPermissions.
        :rtype: bool
        """
        return self._can_write

    @can_write.setter
    def can_write(self, can_write):
        """Sets the can_write of this OrganizationPermissions.


        :param can_write: The can_write of this OrganizationPermissions.
        :type can_write: bool
        """

        self._can_write = can_write

    @property
    def is_admin(self):
        """Gets the is_admin of this OrganizationPermissions.


        :return: The is_admin of this OrganizationPermissions.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this OrganizationPermissions.


        :param is_admin: The is_admin of this OrganizationPermissions.
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def is_owner(self):
        """Gets the is_owner of this OrganizationPermissions.


        :return: The is_owner of this OrganizationPermissions.
        :rtype: bool
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this OrganizationPermissions.


        :param is_owner: The is_owner of this OrganizationPermissions.
        :type is_owner: bool
        """

        self._is_owner = is_owner
