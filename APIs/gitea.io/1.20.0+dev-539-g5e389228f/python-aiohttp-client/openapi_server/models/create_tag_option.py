# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateTagOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, tag_name: str=None, target: str=None):
        """CreateTagOption - a model defined in OpenAPI

        :param message: The message of this CreateTagOption.
        :param tag_name: The tag_name of this CreateTagOption.
        :param target: The target of this CreateTagOption.
        """
        self.openapi_types = {
            'message': str,
            'tag_name': str,
            'target': str
        }

        self.attribute_map = {
            'message': 'message',
            'tag_name': 'tag_name',
            'target': 'target'
        }

        self._message = message
        self._tag_name = tag_name
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTagOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTagOption of this CreateTagOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this CreateTagOption.


        :return: The message of this CreateTagOption.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CreateTagOption.


        :param message: The message of this CreateTagOption.
        :type message: str
        """

        self._message = message

    @property
    def tag_name(self):
        """Gets the tag_name of this CreateTagOption.


        :return: The tag_name of this CreateTagOption.
        :rtype: str
        """
        return self._tag_name

    @tag_name.setter
    def tag_name(self, tag_name):
        """Sets the tag_name of this CreateTagOption.


        :param tag_name: The tag_name of this CreateTagOption.
        :type tag_name: str
        """
        if tag_name is None:
            raise ValueError("Invalid value for `tag_name`, must not be `None`")

        self._tag_name = tag_name

    @property
    def target(self):
        """Gets the target of this CreateTagOption.


        :return: The target of this CreateTagOption.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this CreateTagOption.


        :param target: The target of this CreateTagOption.
        :type target: str
        """

        self._target = target
