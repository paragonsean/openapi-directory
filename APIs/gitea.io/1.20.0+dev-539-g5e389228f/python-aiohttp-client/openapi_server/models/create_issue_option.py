# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateIssueOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignee: str=None, assignees: List[str]=None, body: str=None, closed: bool=None, due_date: datetime=None, labels: List[int]=None, milestone: int=None, ref: str=None, title: str=None):
        """CreateIssueOption - a model defined in OpenAPI

        :param assignee: The assignee of this CreateIssueOption.
        :param assignees: The assignees of this CreateIssueOption.
        :param body: The body of this CreateIssueOption.
        :param closed: The closed of this CreateIssueOption.
        :param due_date: The due_date of this CreateIssueOption.
        :param labels: The labels of this CreateIssueOption.
        :param milestone: The milestone of this CreateIssueOption.
        :param ref: The ref of this CreateIssueOption.
        :param title: The title of this CreateIssueOption.
        """
        self.openapi_types = {
            'assignee': str,
            'assignees': List[str],
            'body': str,
            'closed': bool,
            'due_date': datetime,
            'labels': List[int],
            'milestone': int,
            'ref': str,
            'title': str
        }

        self.attribute_map = {
            'assignee': 'assignee',
            'assignees': 'assignees',
            'body': 'body',
            'closed': 'closed',
            'due_date': 'due_date',
            'labels': 'labels',
            'milestone': 'milestone',
            'ref': 'ref',
            'title': 'title'
        }

        self._assignee = assignee
        self._assignees = assignees
        self._body = body
        self._closed = closed
        self._due_date = due_date
        self._labels = labels
        self._milestone = milestone
        self._ref = ref
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateIssueOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateIssueOption of this CreateIssueOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignee(self):
        """Gets the assignee of this CreateIssueOption.

        deprecated

        :return: The assignee of this CreateIssueOption.
        :rtype: str
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this CreateIssueOption.

        deprecated

        :param assignee: The assignee of this CreateIssueOption.
        :type assignee: str
        """

        self._assignee = assignee

    @property
    def assignees(self):
        """Gets the assignees of this CreateIssueOption.


        :return: The assignees of this CreateIssueOption.
        :rtype: List[str]
        """
        return self._assignees

    @assignees.setter
    def assignees(self, assignees):
        """Sets the assignees of this CreateIssueOption.


        :param assignees: The assignees of this CreateIssueOption.
        :type assignees: List[str]
        """

        self._assignees = assignees

    @property
    def body(self):
        """Gets the body of this CreateIssueOption.


        :return: The body of this CreateIssueOption.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this CreateIssueOption.


        :param body: The body of this CreateIssueOption.
        :type body: str
        """

        self._body = body

    @property
    def closed(self):
        """Gets the closed of this CreateIssueOption.


        :return: The closed of this CreateIssueOption.
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this CreateIssueOption.


        :param closed: The closed of this CreateIssueOption.
        :type closed: bool
        """

        self._closed = closed

    @property
    def due_date(self):
        """Gets the due_date of this CreateIssueOption.


        :return: The due_date of this CreateIssueOption.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this CreateIssueOption.


        :param due_date: The due_date of this CreateIssueOption.
        :type due_date: datetime
        """

        self._due_date = due_date

    @property
    def labels(self):
        """Gets the labels of this CreateIssueOption.

        list of label ids

        :return: The labels of this CreateIssueOption.
        :rtype: List[int]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CreateIssueOption.

        list of label ids

        :param labels: The labels of this CreateIssueOption.
        :type labels: List[int]
        """

        self._labels = labels

    @property
    def milestone(self):
        """Gets the milestone of this CreateIssueOption.

        milestone id

        :return: The milestone of this CreateIssueOption.
        :rtype: int
        """
        return self._milestone

    @milestone.setter
    def milestone(self, milestone):
        """Sets the milestone of this CreateIssueOption.

        milestone id

        :param milestone: The milestone of this CreateIssueOption.
        :type milestone: int
        """

        self._milestone = milestone

    @property
    def ref(self):
        """Gets the ref of this CreateIssueOption.


        :return: The ref of this CreateIssueOption.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this CreateIssueOption.


        :param ref: The ref of this CreateIssueOption.
        :type ref: str
        """

        self._ref = ref

    @property
    def title(self):
        """Gets the title of this CreateIssueOption.


        :return: The title of this CreateIssueOption.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreateIssueOption.


        :param title: The title of this CreateIssueOption.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
