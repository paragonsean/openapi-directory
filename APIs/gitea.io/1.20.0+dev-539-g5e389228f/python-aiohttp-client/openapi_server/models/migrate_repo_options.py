# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MigrateRepoOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_password: str=None, auth_token: str=None, auth_username: str=None, clone_addr: str=None, description: str=None, issues: bool=None, labels: bool=None, lfs: bool=None, lfs_endpoint: str=None, milestones: bool=None, mirror: bool=None, mirror_interval: str=None, private: bool=None, pull_requests: bool=None, releases: bool=None, repo_name: str=None, repo_owner: str=None, service: str=None, uid: int=None, wiki: bool=None):
        """MigrateRepoOptions - a model defined in OpenAPI

        :param auth_password: The auth_password of this MigrateRepoOptions.
        :param auth_token: The auth_token of this MigrateRepoOptions.
        :param auth_username: The auth_username of this MigrateRepoOptions.
        :param clone_addr: The clone_addr of this MigrateRepoOptions.
        :param description: The description of this MigrateRepoOptions.
        :param issues: The issues of this MigrateRepoOptions.
        :param labels: The labels of this MigrateRepoOptions.
        :param lfs: The lfs of this MigrateRepoOptions.
        :param lfs_endpoint: The lfs_endpoint of this MigrateRepoOptions.
        :param milestones: The milestones of this MigrateRepoOptions.
        :param mirror: The mirror of this MigrateRepoOptions.
        :param mirror_interval: The mirror_interval of this MigrateRepoOptions.
        :param private: The private of this MigrateRepoOptions.
        :param pull_requests: The pull_requests of this MigrateRepoOptions.
        :param releases: The releases of this MigrateRepoOptions.
        :param repo_name: The repo_name of this MigrateRepoOptions.
        :param repo_owner: The repo_owner of this MigrateRepoOptions.
        :param service: The service of this MigrateRepoOptions.
        :param uid: The uid of this MigrateRepoOptions.
        :param wiki: The wiki of this MigrateRepoOptions.
        """
        self.openapi_types = {
            'auth_password': str,
            'auth_token': str,
            'auth_username': str,
            'clone_addr': str,
            'description': str,
            'issues': bool,
            'labels': bool,
            'lfs': bool,
            'lfs_endpoint': str,
            'milestones': bool,
            'mirror': bool,
            'mirror_interval': str,
            'private': bool,
            'pull_requests': bool,
            'releases': bool,
            'repo_name': str,
            'repo_owner': str,
            'service': str,
            'uid': int,
            'wiki': bool
        }

        self.attribute_map = {
            'auth_password': 'auth_password',
            'auth_token': 'auth_token',
            'auth_username': 'auth_username',
            'clone_addr': 'clone_addr',
            'description': 'description',
            'issues': 'issues',
            'labels': 'labels',
            'lfs': 'lfs',
            'lfs_endpoint': 'lfs_endpoint',
            'milestones': 'milestones',
            'mirror': 'mirror',
            'mirror_interval': 'mirror_interval',
            'private': 'private',
            'pull_requests': 'pull_requests',
            'releases': 'releases',
            'repo_name': 'repo_name',
            'repo_owner': 'repo_owner',
            'service': 'service',
            'uid': 'uid',
            'wiki': 'wiki'
        }

        self._auth_password = auth_password
        self._auth_token = auth_token
        self._auth_username = auth_username
        self._clone_addr = clone_addr
        self._description = description
        self._issues = issues
        self._labels = labels
        self._lfs = lfs
        self._lfs_endpoint = lfs_endpoint
        self._milestones = milestones
        self._mirror = mirror
        self._mirror_interval = mirror_interval
        self._private = private
        self._pull_requests = pull_requests
        self._releases = releases
        self._repo_name = repo_name
        self._repo_owner = repo_owner
        self._service = service
        self._uid = uid
        self._wiki = wiki

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MigrateRepoOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MigrateRepoOptions of this MigrateRepoOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_password(self):
        """Gets the auth_password of this MigrateRepoOptions.


        :return: The auth_password of this MigrateRepoOptions.
        :rtype: str
        """
        return self._auth_password

    @auth_password.setter
    def auth_password(self, auth_password):
        """Sets the auth_password of this MigrateRepoOptions.


        :param auth_password: The auth_password of this MigrateRepoOptions.
        :type auth_password: str
        """

        self._auth_password = auth_password

    @property
    def auth_token(self):
        """Gets the auth_token of this MigrateRepoOptions.


        :return: The auth_token of this MigrateRepoOptions.
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this MigrateRepoOptions.


        :param auth_token: The auth_token of this MigrateRepoOptions.
        :type auth_token: str
        """

        self._auth_token = auth_token

    @property
    def auth_username(self):
        """Gets the auth_username of this MigrateRepoOptions.


        :return: The auth_username of this MigrateRepoOptions.
        :rtype: str
        """
        return self._auth_username

    @auth_username.setter
    def auth_username(self, auth_username):
        """Sets the auth_username of this MigrateRepoOptions.


        :param auth_username: The auth_username of this MigrateRepoOptions.
        :type auth_username: str
        """

        self._auth_username = auth_username

    @property
    def clone_addr(self):
        """Gets the clone_addr of this MigrateRepoOptions.


        :return: The clone_addr of this MigrateRepoOptions.
        :rtype: str
        """
        return self._clone_addr

    @clone_addr.setter
    def clone_addr(self, clone_addr):
        """Sets the clone_addr of this MigrateRepoOptions.


        :param clone_addr: The clone_addr of this MigrateRepoOptions.
        :type clone_addr: str
        """
        if clone_addr is None:
            raise ValueError("Invalid value for `clone_addr`, must not be `None`")

        self._clone_addr = clone_addr

    @property
    def description(self):
        """Gets the description of this MigrateRepoOptions.


        :return: The description of this MigrateRepoOptions.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MigrateRepoOptions.


        :param description: The description of this MigrateRepoOptions.
        :type description: str
        """

        self._description = description

    @property
    def issues(self):
        """Gets the issues of this MigrateRepoOptions.


        :return: The issues of this MigrateRepoOptions.
        :rtype: bool
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this MigrateRepoOptions.


        :param issues: The issues of this MigrateRepoOptions.
        :type issues: bool
        """

        self._issues = issues

    @property
    def labels(self):
        """Gets the labels of this MigrateRepoOptions.


        :return: The labels of this MigrateRepoOptions.
        :rtype: bool
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this MigrateRepoOptions.


        :param labels: The labels of this MigrateRepoOptions.
        :type labels: bool
        """

        self._labels = labels

    @property
    def lfs(self):
        """Gets the lfs of this MigrateRepoOptions.


        :return: The lfs of this MigrateRepoOptions.
        :rtype: bool
        """
        return self._lfs

    @lfs.setter
    def lfs(self, lfs):
        """Sets the lfs of this MigrateRepoOptions.


        :param lfs: The lfs of this MigrateRepoOptions.
        :type lfs: bool
        """

        self._lfs = lfs

    @property
    def lfs_endpoint(self):
        """Gets the lfs_endpoint of this MigrateRepoOptions.


        :return: The lfs_endpoint of this MigrateRepoOptions.
        :rtype: str
        """
        return self._lfs_endpoint

    @lfs_endpoint.setter
    def lfs_endpoint(self, lfs_endpoint):
        """Sets the lfs_endpoint of this MigrateRepoOptions.


        :param lfs_endpoint: The lfs_endpoint of this MigrateRepoOptions.
        :type lfs_endpoint: str
        """

        self._lfs_endpoint = lfs_endpoint

    @property
    def milestones(self):
        """Gets the milestones of this MigrateRepoOptions.


        :return: The milestones of this MigrateRepoOptions.
        :rtype: bool
        """
        return self._milestones

    @milestones.setter
    def milestones(self, milestones):
        """Sets the milestones of this MigrateRepoOptions.


        :param milestones: The milestones of this MigrateRepoOptions.
        :type milestones: bool
        """

        self._milestones = milestones

    @property
    def mirror(self):
        """Gets the mirror of this MigrateRepoOptions.


        :return: The mirror of this MigrateRepoOptions.
        :rtype: bool
        """
        return self._mirror

    @mirror.setter
    def mirror(self, mirror):
        """Sets the mirror of this MigrateRepoOptions.


        :param mirror: The mirror of this MigrateRepoOptions.
        :type mirror: bool
        """

        self._mirror = mirror

    @property
    def mirror_interval(self):
        """Gets the mirror_interval of this MigrateRepoOptions.


        :return: The mirror_interval of this MigrateRepoOptions.
        :rtype: str
        """
        return self._mirror_interval

    @mirror_interval.setter
    def mirror_interval(self, mirror_interval):
        """Sets the mirror_interval of this MigrateRepoOptions.


        :param mirror_interval: The mirror_interval of this MigrateRepoOptions.
        :type mirror_interval: str
        """

        self._mirror_interval = mirror_interval

    @property
    def private(self):
        """Gets the private of this MigrateRepoOptions.


        :return: The private of this MigrateRepoOptions.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this MigrateRepoOptions.


        :param private: The private of this MigrateRepoOptions.
        :type private: bool
        """

        self._private = private

    @property
    def pull_requests(self):
        """Gets the pull_requests of this MigrateRepoOptions.


        :return: The pull_requests of this MigrateRepoOptions.
        :rtype: bool
        """
        return self._pull_requests

    @pull_requests.setter
    def pull_requests(self, pull_requests):
        """Sets the pull_requests of this MigrateRepoOptions.


        :param pull_requests: The pull_requests of this MigrateRepoOptions.
        :type pull_requests: bool
        """

        self._pull_requests = pull_requests

    @property
    def releases(self):
        """Gets the releases of this MigrateRepoOptions.


        :return: The releases of this MigrateRepoOptions.
        :rtype: bool
        """
        return self._releases

    @releases.setter
    def releases(self, releases):
        """Sets the releases of this MigrateRepoOptions.


        :param releases: The releases of this MigrateRepoOptions.
        :type releases: bool
        """

        self._releases = releases

    @property
    def repo_name(self):
        """Gets the repo_name of this MigrateRepoOptions.


        :return: The repo_name of this MigrateRepoOptions.
        :rtype: str
        """
        return self._repo_name

    @repo_name.setter
    def repo_name(self, repo_name):
        """Sets the repo_name of this MigrateRepoOptions.


        :param repo_name: The repo_name of this MigrateRepoOptions.
        :type repo_name: str
        """
        if repo_name is None:
            raise ValueError("Invalid value for `repo_name`, must not be `None`")

        self._repo_name = repo_name

    @property
    def repo_owner(self):
        """Gets the repo_owner of this MigrateRepoOptions.

        Name of User or Organisation who will own Repo after migration

        :return: The repo_owner of this MigrateRepoOptions.
        :rtype: str
        """
        return self._repo_owner

    @repo_owner.setter
    def repo_owner(self, repo_owner):
        """Sets the repo_owner of this MigrateRepoOptions.

        Name of User or Organisation who will own Repo after migration

        :param repo_owner: The repo_owner of this MigrateRepoOptions.
        :type repo_owner: str
        """

        self._repo_owner = repo_owner

    @property
    def service(self):
        """Gets the service of this MigrateRepoOptions.


        :return: The service of this MigrateRepoOptions.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this MigrateRepoOptions.


        :param service: The service of this MigrateRepoOptions.
        :type service: str
        """
        allowed_values = ["git", "github", "gitea", "gitlab"]  # noqa: E501
        if service not in allowed_values:
            raise ValueError(
                "Invalid value for `service` ({0}), must be one of {1}"
                .format(service, allowed_values)
            )

        self._service = service

    @property
    def uid(self):
        """Gets the uid of this MigrateRepoOptions.

        deprecated (only for backwards compatibility)

        :return: The uid of this MigrateRepoOptions.
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this MigrateRepoOptions.

        deprecated (only for backwards compatibility)

        :param uid: The uid of this MigrateRepoOptions.
        :type uid: int
        """

        self._uid = uid

    @property
    def wiki(self):
        """Gets the wiki of this MigrateRepoOptions.


        :return: The wiki of this MigrateRepoOptions.
        :rtype: bool
        """
        return self._wiki

    @wiki.setter
    def wiki(self, wiki):
        """Sets the wiki of this MigrateRepoOptions.


        :param wiki: The wiki of this MigrateRepoOptions.
        :type wiki: bool
        """

        self._wiki = wiki
