# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddTimeOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, time: int=None, user_name: str=None):
        """AddTimeOption - a model defined in OpenAPI

        :param created: The created of this AddTimeOption.
        :param time: The time of this AddTimeOption.
        :param user_name: The user_name of this AddTimeOption.
        """
        self.openapi_types = {
            'created': datetime,
            'time': int,
            'user_name': str
        }

        self.attribute_map = {
            'created': 'created',
            'time': 'time',
            'user_name': 'user_name'
        }

        self._created = created
        self._time = time
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddTimeOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddTimeOption of this AddTimeOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this AddTimeOption.


        :return: The created of this AddTimeOption.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AddTimeOption.


        :param created: The created of this AddTimeOption.
        :type created: datetime
        """

        self._created = created

    @property
    def time(self):
        """Gets the time of this AddTimeOption.

        time in seconds

        :return: The time of this AddTimeOption.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this AddTimeOption.

        time in seconds

        :param time: The time of this AddTimeOption.
        :type time: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time

    @property
    def user_name(self):
        """Gets the user_name of this AddTimeOption.

        User who spent the time (optional)

        :return: The user_name of this AddTimeOption.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AddTimeOption.

        User who spent the time (optional)

        :param user_name: The user_name of this AddTimeOption.
        :type user_name: str
        """

        self._user_name = user_name
