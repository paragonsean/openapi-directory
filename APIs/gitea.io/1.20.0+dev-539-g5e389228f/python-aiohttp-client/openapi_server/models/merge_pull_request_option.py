# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MergePullRequestOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, do: str=None, merge_commit_id: str=None, merge_message_field: str=None, merge_title_field: str=None, delete_branch_after_merge: bool=None, force_merge: bool=None, head_commit_id: str=None, merge_when_checks_succeed: bool=None):
        """MergePullRequestOption - a model defined in OpenAPI

        :param do: The do of this MergePullRequestOption.
        :param merge_commit_id: The merge_commit_id of this MergePullRequestOption.
        :param merge_message_field: The merge_message_field of this MergePullRequestOption.
        :param merge_title_field: The merge_title_field of this MergePullRequestOption.
        :param delete_branch_after_merge: The delete_branch_after_merge of this MergePullRequestOption.
        :param force_merge: The force_merge of this MergePullRequestOption.
        :param head_commit_id: The head_commit_id of this MergePullRequestOption.
        :param merge_when_checks_succeed: The merge_when_checks_succeed of this MergePullRequestOption.
        """
        self.openapi_types = {
            'do': str,
            'merge_commit_id': str,
            'merge_message_field': str,
            'merge_title_field': str,
            'delete_branch_after_merge': bool,
            'force_merge': bool,
            'head_commit_id': str,
            'merge_when_checks_succeed': bool
        }

        self.attribute_map = {
            'do': 'Do',
            'merge_commit_id': 'MergeCommitID',
            'merge_message_field': 'MergeMessageField',
            'merge_title_field': 'MergeTitleField',
            'delete_branch_after_merge': 'delete_branch_after_merge',
            'force_merge': 'force_merge',
            'head_commit_id': 'head_commit_id',
            'merge_when_checks_succeed': 'merge_when_checks_succeed'
        }

        self._do = do
        self._merge_commit_id = merge_commit_id
        self._merge_message_field = merge_message_field
        self._merge_title_field = merge_title_field
        self._delete_branch_after_merge = delete_branch_after_merge
        self._force_merge = force_merge
        self._head_commit_id = head_commit_id
        self._merge_when_checks_succeed = merge_when_checks_succeed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MergePullRequestOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MergePullRequestOption of this MergePullRequestOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def do(self):
        """Gets the do of this MergePullRequestOption.


        :return: The do of this MergePullRequestOption.
        :rtype: str
        """
        return self._do

    @do.setter
    def do(self, do):
        """Sets the do of this MergePullRequestOption.


        :param do: The do of this MergePullRequestOption.
        :type do: str
        """
        allowed_values = ["merge", "rebase", "rebase-merge", "squash", "manually-merged"]  # noqa: E501
        if do not in allowed_values:
            raise ValueError(
                "Invalid value for `do` ({0}), must be one of {1}"
                .format(do, allowed_values)
            )

        self._do = do

    @property
    def merge_commit_id(self):
        """Gets the merge_commit_id of this MergePullRequestOption.


        :return: The merge_commit_id of this MergePullRequestOption.
        :rtype: str
        """
        return self._merge_commit_id

    @merge_commit_id.setter
    def merge_commit_id(self, merge_commit_id):
        """Sets the merge_commit_id of this MergePullRequestOption.


        :param merge_commit_id: The merge_commit_id of this MergePullRequestOption.
        :type merge_commit_id: str
        """

        self._merge_commit_id = merge_commit_id

    @property
    def merge_message_field(self):
        """Gets the merge_message_field of this MergePullRequestOption.


        :return: The merge_message_field of this MergePullRequestOption.
        :rtype: str
        """
        return self._merge_message_field

    @merge_message_field.setter
    def merge_message_field(self, merge_message_field):
        """Sets the merge_message_field of this MergePullRequestOption.


        :param merge_message_field: The merge_message_field of this MergePullRequestOption.
        :type merge_message_field: str
        """

        self._merge_message_field = merge_message_field

    @property
    def merge_title_field(self):
        """Gets the merge_title_field of this MergePullRequestOption.


        :return: The merge_title_field of this MergePullRequestOption.
        :rtype: str
        """
        return self._merge_title_field

    @merge_title_field.setter
    def merge_title_field(self, merge_title_field):
        """Sets the merge_title_field of this MergePullRequestOption.


        :param merge_title_field: The merge_title_field of this MergePullRequestOption.
        :type merge_title_field: str
        """

        self._merge_title_field = merge_title_field

    @property
    def delete_branch_after_merge(self):
        """Gets the delete_branch_after_merge of this MergePullRequestOption.


        :return: The delete_branch_after_merge of this MergePullRequestOption.
        :rtype: bool
        """
        return self._delete_branch_after_merge

    @delete_branch_after_merge.setter
    def delete_branch_after_merge(self, delete_branch_after_merge):
        """Sets the delete_branch_after_merge of this MergePullRequestOption.


        :param delete_branch_after_merge: The delete_branch_after_merge of this MergePullRequestOption.
        :type delete_branch_after_merge: bool
        """

        self._delete_branch_after_merge = delete_branch_after_merge

    @property
    def force_merge(self):
        """Gets the force_merge of this MergePullRequestOption.


        :return: The force_merge of this MergePullRequestOption.
        :rtype: bool
        """
        return self._force_merge

    @force_merge.setter
    def force_merge(self, force_merge):
        """Sets the force_merge of this MergePullRequestOption.


        :param force_merge: The force_merge of this MergePullRequestOption.
        :type force_merge: bool
        """

        self._force_merge = force_merge

    @property
    def head_commit_id(self):
        """Gets the head_commit_id of this MergePullRequestOption.


        :return: The head_commit_id of this MergePullRequestOption.
        :rtype: str
        """
        return self._head_commit_id

    @head_commit_id.setter
    def head_commit_id(self, head_commit_id):
        """Sets the head_commit_id of this MergePullRequestOption.


        :param head_commit_id: The head_commit_id of this MergePullRequestOption.
        :type head_commit_id: str
        """

        self._head_commit_id = head_commit_id

    @property
    def merge_when_checks_succeed(self):
        """Gets the merge_when_checks_succeed of this MergePullRequestOption.


        :return: The merge_when_checks_succeed of this MergePullRequestOption.
        :rtype: bool
        """
        return self._merge_when_checks_succeed

    @merge_when_checks_succeed.setter
    def merge_when_checks_succeed(self, merge_when_checks_succeed):
        """Sets the merge_when_checks_succeed of this MergePullRequestOption.


        :param merge_when_checks_succeed: The merge_when_checks_succeed of this MergePullRequestOption.
        :type merge_when_checks_succeed: bool
        """

        self._merge_when_checks_succeed = merge_when_checks_succeed
