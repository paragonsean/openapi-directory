# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GitHook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, is_active: bool=None, name: str=None):
        """GitHook - a model defined in OpenAPI

        :param content: The content of this GitHook.
        :param is_active: The is_active of this GitHook.
        :param name: The name of this GitHook.
        """
        self.openapi_types = {
            'content': str,
            'is_active': bool,
            'name': str
        }

        self.attribute_map = {
            'content': 'content',
            'is_active': 'is_active',
            'name': 'name'
        }

        self._content = content
        self._is_active = is_active
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GitHook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GitHook of this GitHook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this GitHook.


        :return: The content of this GitHook.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this GitHook.


        :param content: The content of this GitHook.
        :type content: str
        """

        self._content = content

    @property
    def is_active(self):
        """Gets the is_active of this GitHook.


        :return: The is_active of this GitHook.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this GitHook.


        :param is_active: The is_active of this GitHook.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def name(self):
        """Gets the name of this GitHook.


        :return: The name of this GitHook.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GitHook.


        :param name: The name of this GitHook.
        :type name: str
        """

        self._name = name
