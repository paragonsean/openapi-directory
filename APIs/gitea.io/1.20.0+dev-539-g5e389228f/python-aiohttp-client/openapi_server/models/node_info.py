# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_info_services import NodeInfoServices
from openapi_server.models.node_info_software import NodeInfoSoftware
from openapi_server.models.node_info_usage import NodeInfoUsage
from openapi_server import util


class NodeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata: object=None, open_registrations: bool=None, protocols: List[str]=None, services: NodeInfoServices=None, software: NodeInfoSoftware=None, usage: NodeInfoUsage=None, version: str=None):
        """NodeInfo - a model defined in OpenAPI

        :param metadata: The metadata of this NodeInfo.
        :param open_registrations: The open_registrations of this NodeInfo.
        :param protocols: The protocols of this NodeInfo.
        :param services: The services of this NodeInfo.
        :param software: The software of this NodeInfo.
        :param usage: The usage of this NodeInfo.
        :param version: The version of this NodeInfo.
        """
        self.openapi_types = {
            'metadata': object,
            'open_registrations': bool,
            'protocols': List[str],
            'services': NodeInfoServices,
            'software': NodeInfoSoftware,
            'usage': NodeInfoUsage,
            'version': str
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'open_registrations': 'openRegistrations',
            'protocols': 'protocols',
            'services': 'services',
            'software': 'software',
            'usage': 'usage',
            'version': 'version'
        }

        self._metadata = metadata
        self._open_registrations = open_registrations
        self._protocols = protocols
        self._services = services
        self._software = software
        self._usage = usage
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeInfo of this NodeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self):
        """Gets the metadata of this NodeInfo.


        :return: The metadata of this NodeInfo.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this NodeInfo.


        :param metadata: The metadata of this NodeInfo.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def open_registrations(self):
        """Gets the open_registrations of this NodeInfo.


        :return: The open_registrations of this NodeInfo.
        :rtype: bool
        """
        return self._open_registrations

    @open_registrations.setter
    def open_registrations(self, open_registrations):
        """Sets the open_registrations of this NodeInfo.


        :param open_registrations: The open_registrations of this NodeInfo.
        :type open_registrations: bool
        """

        self._open_registrations = open_registrations

    @property
    def protocols(self):
        """Gets the protocols of this NodeInfo.


        :return: The protocols of this NodeInfo.
        :rtype: List[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this NodeInfo.


        :param protocols: The protocols of this NodeInfo.
        :type protocols: List[str]
        """

        self._protocols = protocols

    @property
    def services(self):
        """Gets the services of this NodeInfo.


        :return: The services of this NodeInfo.
        :rtype: NodeInfoServices
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this NodeInfo.


        :param services: The services of this NodeInfo.
        :type services: NodeInfoServices
        """

        self._services = services

    @property
    def software(self):
        """Gets the software of this NodeInfo.


        :return: The software of this NodeInfo.
        :rtype: NodeInfoSoftware
        """
        return self._software

    @software.setter
    def software(self, software):
        """Sets the software of this NodeInfo.


        :param software: The software of this NodeInfo.
        :type software: NodeInfoSoftware
        """

        self._software = software

    @property
    def usage(self):
        """Gets the usage of this NodeInfo.


        :return: The usage of this NodeInfo.
        :rtype: NodeInfoUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this NodeInfo.


        :param usage: The usage of this NodeInfo.
        :type usage: NodeInfoUsage
        """

        self._usage = usage

    @property
    def version(self):
        """Gets the version of this NodeInfo.


        :return: The version of this NodeInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NodeInfo.


        :param version: The version of this NodeInfo.
        :type version: str
        """

        self._version = version
