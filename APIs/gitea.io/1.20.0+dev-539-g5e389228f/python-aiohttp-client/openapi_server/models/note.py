# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.commit import Commit
from openapi_server import util


class Note(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit: Commit=None, message: str=None):
        """Note - a model defined in OpenAPI

        :param commit: The commit of this Note.
        :param message: The message of this Note.
        """
        self.openapi_types = {
            'commit': Commit,
            'message': str
        }

        self.attribute_map = {
            'commit': 'commit',
            'message': 'message'
        }

        self._commit = commit
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Note':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Note of this Note.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit(self):
        """Gets the commit of this Note.


        :return: The commit of this Note.
        :rtype: Commit
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this Note.


        :param commit: The commit of this Note.
        :type commit: Commit
        """

        self._commit = commit

    @property
    def message(self):
        """Gets the message of this Note.


        :return: The message of this Note.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Note.


        :param message: The message of this Note.
        :type message: str
        """

        self._message = message
