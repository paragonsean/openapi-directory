# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payload_commit import PayloadCommit
from openapi_server import util


class Branch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit: PayloadCommit=None, effective_branch_protection_name: str=None, enable_status_check: bool=None, name: str=None, protected: bool=None, required_approvals: int=None, status_check_contexts: List[str]=None, user_can_merge: bool=None, user_can_push: bool=None):
        """Branch - a model defined in OpenAPI

        :param commit: The commit of this Branch.
        :param effective_branch_protection_name: The effective_branch_protection_name of this Branch.
        :param enable_status_check: The enable_status_check of this Branch.
        :param name: The name of this Branch.
        :param protected: The protected of this Branch.
        :param required_approvals: The required_approvals of this Branch.
        :param status_check_contexts: The status_check_contexts of this Branch.
        :param user_can_merge: The user_can_merge of this Branch.
        :param user_can_push: The user_can_push of this Branch.
        """
        self.openapi_types = {
            'commit': PayloadCommit,
            'effective_branch_protection_name': str,
            'enable_status_check': bool,
            'name': str,
            'protected': bool,
            'required_approvals': int,
            'status_check_contexts': List[str],
            'user_can_merge': bool,
            'user_can_push': bool
        }

        self.attribute_map = {
            'commit': 'commit',
            'effective_branch_protection_name': 'effective_branch_protection_name',
            'enable_status_check': 'enable_status_check',
            'name': 'name',
            'protected': 'protected',
            'required_approvals': 'required_approvals',
            'status_check_contexts': 'status_check_contexts',
            'user_can_merge': 'user_can_merge',
            'user_can_push': 'user_can_push'
        }

        self._commit = commit
        self._effective_branch_protection_name = effective_branch_protection_name
        self._enable_status_check = enable_status_check
        self._name = name
        self._protected = protected
        self._required_approvals = required_approvals
        self._status_check_contexts = status_check_contexts
        self._user_can_merge = user_can_merge
        self._user_can_push = user_can_push

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Branch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Branch of this Branch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit(self):
        """Gets the commit of this Branch.


        :return: The commit of this Branch.
        :rtype: PayloadCommit
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this Branch.


        :param commit: The commit of this Branch.
        :type commit: PayloadCommit
        """

        self._commit = commit

    @property
    def effective_branch_protection_name(self):
        """Gets the effective_branch_protection_name of this Branch.


        :return: The effective_branch_protection_name of this Branch.
        :rtype: str
        """
        return self._effective_branch_protection_name

    @effective_branch_protection_name.setter
    def effective_branch_protection_name(self, effective_branch_protection_name):
        """Sets the effective_branch_protection_name of this Branch.


        :param effective_branch_protection_name: The effective_branch_protection_name of this Branch.
        :type effective_branch_protection_name: str
        """

        self._effective_branch_protection_name = effective_branch_protection_name

    @property
    def enable_status_check(self):
        """Gets the enable_status_check of this Branch.


        :return: The enable_status_check of this Branch.
        :rtype: bool
        """
        return self._enable_status_check

    @enable_status_check.setter
    def enable_status_check(self, enable_status_check):
        """Sets the enable_status_check of this Branch.


        :param enable_status_check: The enable_status_check of this Branch.
        :type enable_status_check: bool
        """

        self._enable_status_check = enable_status_check

    @property
    def name(self):
        """Gets the name of this Branch.


        :return: The name of this Branch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Branch.


        :param name: The name of this Branch.
        :type name: str
        """

        self._name = name

    @property
    def protected(self):
        """Gets the protected of this Branch.


        :return: The protected of this Branch.
        :rtype: bool
        """
        return self._protected

    @protected.setter
    def protected(self, protected):
        """Sets the protected of this Branch.


        :param protected: The protected of this Branch.
        :type protected: bool
        """

        self._protected = protected

    @property
    def required_approvals(self):
        """Gets the required_approvals of this Branch.


        :return: The required_approvals of this Branch.
        :rtype: int
        """
        return self._required_approvals

    @required_approvals.setter
    def required_approvals(self, required_approvals):
        """Sets the required_approvals of this Branch.


        :param required_approvals: The required_approvals of this Branch.
        :type required_approvals: int
        """

        self._required_approvals = required_approvals

    @property
    def status_check_contexts(self):
        """Gets the status_check_contexts of this Branch.


        :return: The status_check_contexts of this Branch.
        :rtype: List[str]
        """
        return self._status_check_contexts

    @status_check_contexts.setter
    def status_check_contexts(self, status_check_contexts):
        """Sets the status_check_contexts of this Branch.


        :param status_check_contexts: The status_check_contexts of this Branch.
        :type status_check_contexts: List[str]
        """

        self._status_check_contexts = status_check_contexts

    @property
    def user_can_merge(self):
        """Gets the user_can_merge of this Branch.


        :return: The user_can_merge of this Branch.
        :rtype: bool
        """
        return self._user_can_merge

    @user_can_merge.setter
    def user_can_merge(self, user_can_merge):
        """Sets the user_can_merge of this Branch.


        :param user_can_merge: The user_can_merge of this Branch.
        :type user_can_merge: bool
        """

        self._user_can_merge = user_can_merge

    @property
    def user_can_push(self):
        """Gets the user_can_push of this Branch.


        :return: The user_can_push of this Branch.
        :rtype: bool
        """
        return self._user_can_push

    @user_can_push.setter
    def user_can_push(self, user_can_push):
        """Sets the user_can_push of this Branch.


        :param user_can_push: The user_can_push of this Branch.
        :type user_can_push: bool
        """

        self._user_can_push = user_can_push
