/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateHookOption from '../model/CreateHookOption';
import CreateKeyOption from '../model/CreateKeyOption';
import CreateOrgOption from '../model/CreateOrgOption';
import CreateRepoOption from '../model/CreateRepoOption';
import CreateUserOption from '../model/CreateUserOption';
import Cron from '../model/Cron';
import EditHookOption from '../model/EditHookOption';
import EditUserOption from '../model/EditUserOption';
import Email from '../model/Email';
import Hook from '../model/Hook';
import Organization from '../model/Organization';
import PublicKey from '../model/PublicKey';
import RenameUserOption from '../model/RenameUserOption';
import Repository from '../model/Repository';
import User from '../model/User';

/**
* Admin service.
* @module api/AdminApi
* @version 1.20.0+dev-539-g5e389228f
*/
export default class AdminApi {

    /**
    * Constructs a new AdminApi. 
    * @alias module:api/AdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adminAdoptRepository operation.
     * @callback module:api/AdminApi~adminAdoptRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adopt unadopted files as a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/AdminApi~adminAdoptRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminAdoptRepository(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling adminAdoptRepository");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling adminAdoptRepository");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/unadopted/{owner}/{repo}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminCreateHook operation.
     * @callback module:api/AdminApi~adminCreateHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a hook
     * @param {module:model/CreateHookOption} createHookOption 
     * @param {module:api/AdminApi~adminCreateHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hook}
     */
    adminCreateHook(createHookOption, callback) {
      let postBody = createHookOption;
      // verify the required parameter 'createHookOption' is set
      if (createHookOption === undefined || createHookOption === null) {
        throw new Error("Missing the required parameter 'createHookOption' when calling adminCreateHook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Hook;
      return this.apiClient.callApi(
        '/admin/hooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminCreateOrg operation.
     * @callback module:api/AdminApi~adminCreateOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an organization
     * @param {String} username username of the user that will own the created organization
     * @param {module:model/CreateOrgOption} createOrgOption 
     * @param {module:api/AdminApi~adminCreateOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    adminCreateOrg(username, createOrgOption, callback) {
      let postBody = createOrgOption;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling adminCreateOrg");
      }
      // verify the required parameter 'createOrgOption' is set
      if (createOrgOption === undefined || createOrgOption === null) {
        throw new Error("Missing the required parameter 'createOrgOption' when calling adminCreateOrg");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/admin/users/{username}/orgs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminCreatePublicKey operation.
     * @callback module:api/AdminApi~adminCreatePublicKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a public key on behalf of a user
     * @param {String} username username of the user
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateKeyOption} [createKeyOption] 
     * @param {module:api/AdminApi~adminCreatePublicKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicKey}
     */
    adminCreatePublicKey(username, opts, callback) {
      opts = opts || {};
      let postBody = opts['createKeyOption'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling adminCreatePublicKey");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = PublicKey;
      return this.apiClient.callApi(
        '/admin/users/{username}/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminCreateRepo operation.
     * @callback module:api/AdminApi~adminCreateRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a repository on behalf of a user
     * @param {String} username username of the user. This user will own the created repository
     * @param {module:model/CreateRepoOption} createRepoOption 
     * @param {module:api/AdminApi~adminCreateRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Repository}
     */
    adminCreateRepo(username, createRepoOption, callback) {
      let postBody = createRepoOption;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling adminCreateRepo");
      }
      // verify the required parameter 'createRepoOption' is set
      if (createRepoOption === undefined || createRepoOption === null) {
        throw new Error("Missing the required parameter 'createRepoOption' when calling adminCreateRepo");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Repository;
      return this.apiClient.callApi(
        '/admin/users/{username}/repos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminCreateUser operation.
     * @callback module:api/AdminApi~adminCreateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a user
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateUserOption} [createUserOption] 
     * @param {module:api/AdminApi~adminCreateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    adminCreateUser(opts, callback) {
      opts = opts || {};
      let postBody = opts['createUserOption'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = User;
      return this.apiClient.callApi(
        '/admin/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminCronList operation.
     * @callback module:api/AdminApi~adminCronListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Cron>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List cron tasks
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/AdminApi~adminCronListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Cron>}
     */
    adminCronList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Cron];
      return this.apiClient.callApi(
        '/admin/cron', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminCronRun operation.
     * @callback module:api/AdminApi~adminCronRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run cron task
     * @param {String} task task to run
     * @param {module:api/AdminApi~adminCronRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminCronRun(task, callback) {
      let postBody = null;
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling adminCronRun");
      }

      let pathParams = {
        'task': task
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/cron/{task}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminDeleteHook operation.
     * @callback module:api/AdminApi~adminDeleteHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a hook
     * @param {Number} id id of the hook to delete
     * @param {module:api/AdminApi~adminDeleteHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminDeleteHook(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminDeleteHook");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/amdin/hooks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminDeleteUnadoptedRepository operation.
     * @callback module:api/AdminApi~adminDeleteUnadoptedRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete unadopted files
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/AdminApi~adminDeleteUnadoptedRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminDeleteUnadoptedRepository(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling adminDeleteUnadoptedRepository");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling adminDeleteUnadoptedRepository");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/unadopted/{owner}/{repo}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminDeleteUser operation.
     * @callback module:api/AdminApi~adminDeleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user
     * @param {String} username username of user to delete
     * @param {Object} opts Optional parameters
     * @param {Boolean} [purge] purge the user from the system completely
     * @param {module:api/AdminApi~adminDeleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminDeleteUser(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling adminDeleteUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'purge': opts['purge']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/users/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminDeleteUserPublicKey operation.
     * @callback module:api/AdminApi~adminDeleteUserPublicKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user's public key
     * @param {String} username username of user
     * @param {Number} id id of the key to delete
     * @param {module:api/AdminApi~adminDeleteUserPublicKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminDeleteUserPublicKey(username, id, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling adminDeleteUserPublicKey");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminDeleteUserPublicKey");
      }

      let pathParams = {
        'username': username,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/users/{username}/keys/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminEditHook operation.
     * @callback module:api/AdminApi~adminEditHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a hook
     * @param {Number} id id of the hook to update
     * @param {Object} opts Optional parameters
     * @param {module:model/EditHookOption} [editHookOption] 
     * @param {module:api/AdminApi~adminEditHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hook}
     */
    adminEditHook(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['editHookOption'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminEditHook");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Hook;
      return this.apiClient.callApi(
        '/admin/hooks/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminEditUser operation.
     * @callback module:api/AdminApi~adminEditUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an existing user
     * @param {String} username username of user to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditUserOption} [editUserOption] 
     * @param {module:api/AdminApi~adminEditUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    adminEditUser(username, opts, callback) {
      opts = opts || {};
      let postBody = opts['editUserOption'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling adminEditUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = User;
      return this.apiClient.callApi(
        '/admin/users/{username}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminGetAllEmails operation.
     * @callback module:api/AdminApi~adminGetAllEmailsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Email>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all emails
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/AdminApi~adminGetAllEmailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Email>}
     */
    adminGetAllEmails(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Email];
      return this.apiClient.callApi(
        '/admin/emails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminGetAllOrgs operation.
     * @callback module:api/AdminApi~adminGetAllOrgsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Organization>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all organizations
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/AdminApi~adminGetAllOrgsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Organization>}
     */
    adminGetAllOrgs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Organization];
      return this.apiClient.callApi(
        '/admin/orgs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminGetHook operation.
     * @callback module:api/AdminApi~adminGetHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a hook
     * @param {Number} id id of the hook to get
     * @param {module:api/AdminApi~adminGetHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hook}
     */
    adminGetHook(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminGetHook");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Hook;
      return this.apiClient.callApi(
        '/admin/hooks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminListHooks operation.
     * @callback module:api/AdminApi~adminListHooksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Hook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List system's webhooks
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/AdminApi~adminListHooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Hook>}
     */
    adminListHooks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Hook];
      return this.apiClient.callApi(
        '/admin/hooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminRenameUser operation.
     * @callback module:api/AdminApi~adminRenameUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename a user
     * @param {String} username existing username of user
     * @param {module:model/RenameUserOption} renameUserOption 
     * @param {module:api/AdminApi~adminRenameUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminRenameUser(username, renameUserOption, callback) {
      let postBody = renameUserOption;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling adminRenameUser");
      }
      // verify the required parameter 'renameUserOption' is set
      if (renameUserOption === undefined || renameUserOption === null) {
        throw new Error("Missing the required parameter 'renameUserOption' when calling adminRenameUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/users/{username}/rename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminSearchEmails operation.
     * @callback module:api/AdminApi~adminSearchEmailsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Email>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search all emails
     * @param {Object} opts Optional parameters
     * @param {String} [q] keyword
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/AdminApi~adminSearchEmailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Email>}
     */
    adminSearchEmails(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Email];
      return this.apiClient.callApi(
        '/admin/emails/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminSearchUsers operation.
     * @callback module:api/AdminApi~adminSearchUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search users according filter conditions
     * @param {Object} opts Optional parameters
     * @param {Number} [sourceId] ID of the user's login source to search for
     * @param {String} [loginName] user's login name to search for
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/AdminApi~adminSearchUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    adminSearchUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'source_id': opts['sourceId'],
        'login_name': opts['loginName'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/admin/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUnadoptedList operation.
     * @callback module:api/AdminApi~adminUnadoptedListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List unadopted repositories
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {String} [pattern] pattern of repositories to search for
     * @param {module:api/AdminApi~adminUnadoptedListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    adminUnadoptedList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'pattern': opts['pattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/admin/unadopted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
