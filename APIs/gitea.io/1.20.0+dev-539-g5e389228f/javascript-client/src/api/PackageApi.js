/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Package from '../model/Package';
import PackageFile from '../model/PackageFile';

/**
* Package service.
* @module api/PackageApi
* @version 1.20.0+dev-539-g5e389228f
*/
export default class PackageApi {

    /**
    * Constructs a new PackageApi. 
    * @alias module:api/PackageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePackage operation.
     * @callback module:api/PackageApi~deletePackageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a package
     * @param {String} owner owner of the package
     * @param {String} type type of the package
     * @param {String} name name of the package
     * @param {String} version version of the package
     * @param {module:api/PackageApi~deletePackageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePackage(owner, type, name, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deletePackage");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deletePackage");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deletePackage");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deletePackage");
      }

      let pathParams = {
        'owner': owner,
        'type': type,
        'name': name,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/packages/{owner}/{type}/{name}/{version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackage operation.
     * @callback module:api/PackageApi~getPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Package} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a package
     * @param {String} owner owner of the package
     * @param {String} type type of the package
     * @param {String} name name of the package
     * @param {String} version version of the package
     * @param {module:api/PackageApi~getPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Package}
     */
    getPackage(owner, type, name, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getPackage");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getPackage");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getPackage");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getPackage");
      }

      let pathParams = {
        'owner': owner,
        'type': type,
        'name': name,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Package;
      return this.apiClient.callApi(
        '/packages/{owner}/{type}/{name}/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPackageFiles operation.
     * @callback module:api/PackageApi~listPackageFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PackageFile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all files of a package
     * @param {String} owner owner of the package
     * @param {String} type type of the package
     * @param {String} name name of the package
     * @param {String} version version of the package
     * @param {module:api/PackageApi~listPackageFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PackageFile>}
     */
    listPackageFiles(owner, type, name, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listPackageFiles");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling listPackageFiles");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling listPackageFiles");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling listPackageFiles");
      }

      let pathParams = {
        'owner': owner,
        'type': type,
        'name': name,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [PackageFile];
      return this.apiClient.callApi(
        '/packages/{owner}/{type}/{name}/{version}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPackages operation.
     * @callback module:api/PackageApi~listPackagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Package>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all packages of an owner
     * @param {String} owner owner of the packages
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:model/String} [type] package type filter
     * @param {String} [q] name filter
     * @param {module:api/PackageApi~listPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Package>}
     */
    listPackages(owner, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listPackages");
      }

      let pathParams = {
        'owner': owner
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'type': opts['type'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Package];
      return this.apiClient.callApi(
        '/packages/{owner}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
