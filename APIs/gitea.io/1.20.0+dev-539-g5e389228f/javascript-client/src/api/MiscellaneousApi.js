/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MarkdownOption from '../model/MarkdownOption';
import MarkupOption from '../model/MarkupOption';
import NodeInfo from '../model/NodeInfo';
import ServerVersion from '../model/ServerVersion';

/**
* Miscellaneous service.
* @module api/MiscellaneousApi
* @version 1.20.0+dev-539-g5e389228f
*/
export default class MiscellaneousApi {

    /**
    * Constructs a new MiscellaneousApi. 
    * @alias module:api/MiscellaneousApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getNodeInfo operation.
     * @callback module:api/MiscellaneousApi~getNodeInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the nodeinfo of the Gitea application
     * @param {module:api/MiscellaneousApi~getNodeInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeInfo}
     */
    getNodeInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = NodeInfo;
      return this.apiClient.callApi(
        '/nodeinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSigningKey operation.
     * @callback module:api/MiscellaneousApi~getSigningKeyCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get default signing-key.gpg
     * @param {module:api/MiscellaneousApi~getSigningKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getSigningKey(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/signing-key.gpg', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVersion operation.
     * @callback module:api/MiscellaneousApi~getVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the version of the Gitea application
     * @param {module:api/MiscellaneousApi~getVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerVersion}
     */
    getVersion(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = ServerVersion;
      return this.apiClient.callApi(
        '/version', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renderMarkdown operation.
     * @callback module:api/MiscellaneousApi~renderMarkdownCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Render a markdown document as HTML
     * @param {Object} opts Optional parameters
     * @param {module:model/MarkdownOption} [markdownOption] 
     * @param {module:api/MiscellaneousApi~renderMarkdownCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    renderMarkdown(opts, callback) {
      opts = opts || {};
      let postBody = opts['markdownOption'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/markdown', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renderMarkdownRaw operation.
     * @callback module:api/MiscellaneousApi~renderMarkdownRawCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Render raw markdown as HTML
     * @param {String} body Request body to render
     * @param {module:api/MiscellaneousApi~renderMarkdownRawCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    renderMarkdownRaw(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling renderMarkdownRaw");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/markdown/raw', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renderMarkup operation.
     * @callback module:api/MiscellaneousApi~renderMarkupCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Render a markup document as HTML
     * @param {Object} opts Optional parameters
     * @param {module:model/MarkupOption} [markupOption] 
     * @param {module:api/MiscellaneousApi~renderMarkupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    renderMarkup(opts, callback) {
      opts = opts || {};
      let postBody = opts['markupOption'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/markup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
