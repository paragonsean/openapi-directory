/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessToken from '../model/AccessToken';
import Activity from '../model/Activity';
import CreateAccessTokenOption from '../model/CreateAccessTokenOption';
import CreateEmailOption from '../model/CreateEmailOption';
import CreateGPGKeyOption from '../model/CreateGPGKeyOption';
import CreateHookOption from '../model/CreateHookOption';
import CreateKeyOption from '../model/CreateKeyOption';
import CreateOAuth2ApplicationOptions from '../model/CreateOAuth2ApplicationOptions';
import CreateRepoOption from '../model/CreateRepoOption';
import DeleteEmailOption from '../model/DeleteEmailOption';
import EditHookOption from '../model/EditHookOption';
import Email from '../model/Email';
import GPGKey from '../model/GPGKey';
import Hook from '../model/Hook';
import OAuth2Application from '../model/OAuth2Application';
import PublicKey from '../model/PublicKey';
import Repository from '../model/Repository';
import StopWatch from '../model/StopWatch';
import Team from '../model/Team';
import TrackedTime from '../model/TrackedTime';
import User from '../model/User';
import UserHeatmapData from '../model/UserHeatmapData';
import UserSearch200Response from '../model/UserSearch200Response';
import UserSettings from '../model/UserSettings';
import UserSettingsOptions from '../model/UserSettingsOptions';

/**
* User service.
* @module api/UserApi
* @version 1.20.0+dev-539-g5e389228f
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCurrentUserRepo_0 operation.
     * @callback module:api/UserApi~createCurrentUserRepo_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a repository
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateRepoOption} [createRepoOption] 
     * @param {module:api/UserApi~createCurrentUserRepo_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Repository}
     */
    createCurrentUserRepo_0(opts, callback) {
      opts = opts || {};
      let postBody = opts['createRepoOption'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Repository;
      return this.apiClient.callApi(
        '/user/repos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserSettings operation.
     * @callback module:api/UserApi~getUserSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSettings>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user settings
     * @param {module:api/UserApi~getUserSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserSettings>}
     */
    getUserSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [UserSettings];
      return this.apiClient.callApi(
        '/user/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVerificationToken operation.
     * @callback module:api/UserApi~getVerificationTokenCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Token to verify
     * @param {module:api/UserApi~getVerificationTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getVerificationToken(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/user/gpg_key_token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserSettings operation.
     * @callback module:api/UserApi~updateUserSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSettings>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user settings
     * @param {Object} opts Optional parameters
     * @param {module:model/UserSettingsOptions} [userSettingsOptions] 
     * @param {module:api/UserApi~updateUserSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserSettings>}
     */
    updateUserSettings(opts, callback) {
      opts = opts || {};
      let postBody = opts['userSettingsOptions'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = [UserSettings];
      return this.apiClient.callApi(
        '/user/settings', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userAddEmail operation.
     * @callback module:api/UserApi~userAddEmailCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Email>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add email addresses
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateEmailOption} [createEmailOption] 
     * @param {module:api/UserApi~userAddEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Email>}
     */
    userAddEmail(opts, callback) {
      opts = opts || {};
      let postBody = opts['createEmailOption'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Email];
      return this.apiClient.callApi(
        '/user/emails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCheckFollowing operation.
     * @callback module:api/UserApi~userCheckFollowingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if one user is following another user
     * @param {String} username username of following user
     * @param {String} target username of followed user
     * @param {module:api/UserApi~userCheckFollowingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCheckFollowing(username, target, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userCheckFollowing");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling userCheckFollowing");
      }

      let pathParams = {
        'username': username,
        'target': target
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{username}/following/{target}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCreateHook operation.
     * @callback module:api/UserApi~userCreateHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a hook
     * @param {module:model/CreateHookOption} createHookOption 
     * @param {module:api/UserApi~userCreateHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hook}
     */
    userCreateHook(createHookOption, callback) {
      let postBody = createHookOption;
      // verify the required parameter 'createHookOption' is set
      if (createHookOption === undefined || createHookOption === null) {
        throw new Error("Missing the required parameter 'createHookOption' when calling userCreateHook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Hook;
      return this.apiClient.callApi(
        '/user/hooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCreateOAuth2Application operation.
     * @callback module:api/UserApi~userCreateOAuth2ApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OAuth2Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new OAuth2 application
     * @param {module:model/CreateOAuth2ApplicationOptions} createOAuth2ApplicationOptions 
     * @param {module:api/UserApi~userCreateOAuth2ApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OAuth2Application}
     */
    userCreateOAuth2Application(createOAuth2ApplicationOptions, callback) {
      let postBody = createOAuth2ApplicationOptions;
      // verify the required parameter 'createOAuth2ApplicationOptions' is set
      if (createOAuth2ApplicationOptions === undefined || createOAuth2ApplicationOptions === null) {
        throw new Error("Missing the required parameter 'createOAuth2ApplicationOptions' when calling userCreateOAuth2Application");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = OAuth2Application;
      return this.apiClient.callApi(
        '/user/applications/oauth2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCreateToken operation.
     * @callback module:api/UserApi~userCreateTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an access token
     * @param {String} username username of user
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAccessTokenOption} [createAccessTokenOption] 
     * @param {module:api/UserApi~userCreateTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessToken}
     */
    userCreateToken(username, opts, callback) {
      opts = opts || {};
      let postBody = opts['createAccessTokenOption'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userCreateToken");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = AccessToken;
      return this.apiClient.callApi(
        '/users/{username}/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentCheckFollowing operation.
     * @callback module:api/UserApi~userCurrentCheckFollowingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether a user is followed by the authenticated user
     * @param {String} username username of followed user
     * @param {module:api/UserApi~userCurrentCheckFollowingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCurrentCheckFollowing(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userCurrentCheckFollowing");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/following/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentCheckStarring operation.
     * @callback module:api/UserApi~userCurrentCheckStarringCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Whether the authenticated is starring the repo
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/UserApi~userCurrentCheckStarringCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCurrentCheckStarring(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling userCurrentCheckStarring");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling userCurrentCheckStarring");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/starred/{owner}/{repo}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentDeleteFollow operation.
     * @callback module:api/UserApi~userCurrentDeleteFollowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow a user
     * @param {String} username username of user to unfollow
     * @param {module:api/UserApi~userCurrentDeleteFollowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCurrentDeleteFollow(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userCurrentDeleteFollow");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/following/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentDeleteGPGKey operation.
     * @callback module:api/UserApi~userCurrentDeleteGPGKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a GPG key
     * @param {Number} id id of key to delete
     * @param {module:api/UserApi~userCurrentDeleteGPGKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCurrentDeleteGPGKey(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userCurrentDeleteGPGKey");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/gpg_keys/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentDeleteKey operation.
     * @callback module:api/UserApi~userCurrentDeleteKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a public key
     * @param {Number} id id of key to delete
     * @param {module:api/UserApi~userCurrentDeleteKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCurrentDeleteKey(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userCurrentDeleteKey");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/keys/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentDeleteStar operation.
     * @callback module:api/UserApi~userCurrentDeleteStarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unstar the given repo
     * @param {String} owner owner of the repo to unstar
     * @param {String} repo name of the repo to unstar
     * @param {module:api/UserApi~userCurrentDeleteStarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCurrentDeleteStar(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling userCurrentDeleteStar");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling userCurrentDeleteStar");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/starred/{owner}/{repo}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentGetGPGKey operation.
     * @callback module:api/UserApi~userCurrentGetGPGKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GPGKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a GPG key
     * @param {Number} id id of key to get
     * @param {module:api/UserApi~userCurrentGetGPGKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GPGKey}
     */
    userCurrentGetGPGKey(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userCurrentGetGPGKey");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = GPGKey;
      return this.apiClient.callApi(
        '/user/gpg_keys/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentGetKey operation.
     * @callback module:api/UserApi~userCurrentGetKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a public key
     * @param {Number} id id of key to get
     * @param {module:api/UserApi~userCurrentGetKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicKey}
     */
    userCurrentGetKey(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userCurrentGetKey");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = PublicKey;
      return this.apiClient.callApi(
        '/user/keys/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentListFollowers operation.
     * @callback module:api/UserApi~userCurrentListFollowersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the authenticated user's followers
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userCurrentListFollowersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    userCurrentListFollowers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/user/followers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentListFollowing operation.
     * @callback module:api/UserApi~userCurrentListFollowingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the users that the authenticated user is following
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userCurrentListFollowingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    userCurrentListFollowing(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/user/following', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentListGPGKeys operation.
     * @callback module:api/UserApi~userCurrentListGPGKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GPGKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the authenticated user's GPG keys
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userCurrentListGPGKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GPGKey>}
     */
    userCurrentListGPGKeys(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [GPGKey];
      return this.apiClient.callApi(
        '/user/gpg_keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentListKeys operation.
     * @callback module:api/UserApi~userCurrentListKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PublicKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the authenticated user's public keys
     * @param {Object} opts Optional parameters
     * @param {String} [fingerprint] fingerprint of the key
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userCurrentListKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PublicKey>}
     */
    userCurrentListKeys(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fingerprint': opts['fingerprint'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [PublicKey];
      return this.apiClient.callApi(
        '/user/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentListRepos operation.
     * @callback module:api/UserApi~userCurrentListReposCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the repos that the authenticated user owns
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userCurrentListReposCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Repository>}
     */
    userCurrentListRepos(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Repository];
      return this.apiClient.callApi(
        '/user/repos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentListStarred operation.
     * @callback module:api/UserApi~userCurrentListStarredCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The repos that the authenticated user has starred
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userCurrentListStarredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Repository>}
     */
    userCurrentListStarred(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Repository];
      return this.apiClient.callApi(
        '/user/starred', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentListSubscriptions operation.
     * @callback module:api/UserApi~userCurrentListSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repositories watched by the authenticated user
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userCurrentListSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Repository>}
     */
    userCurrentListSubscriptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Repository];
      return this.apiClient.callApi(
        '/user/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentPostGPGKey operation.
     * @callback module:api/UserApi~userCurrentPostGPGKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GPGKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a GPG key
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateGPGKeyOption} [createGPGKeyOption] 
     * @param {module:api/UserApi~userCurrentPostGPGKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GPGKey}
     */
    userCurrentPostGPGKey(opts, callback) {
      opts = opts || {};
      let postBody = opts['createGPGKeyOption'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = GPGKey;
      return this.apiClient.callApi(
        '/user/gpg_keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentPostKey operation.
     * @callback module:api/UserApi~userCurrentPostKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a public key
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateKeyOption} [createKeyOption] 
     * @param {module:api/UserApi~userCurrentPostKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicKey}
     */
    userCurrentPostKey(opts, callback) {
      opts = opts || {};
      let postBody = opts['createKeyOption'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = PublicKey;
      return this.apiClient.callApi(
        '/user/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentPutFollow operation.
     * @callback module:api/UserApi~userCurrentPutFollowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow a user
     * @param {String} username username of user to follow
     * @param {module:api/UserApi~userCurrentPutFollowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCurrentPutFollow(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userCurrentPutFollow");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/following/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentPutStar operation.
     * @callback module:api/UserApi~userCurrentPutStarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Star the given repo
     * @param {String} owner owner of the repo to star
     * @param {String} repo name of the repo to star
     * @param {module:api/UserApi~userCurrentPutStarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCurrentPutStar(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling userCurrentPutStar");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling userCurrentPutStar");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/starred/{owner}/{repo}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentTrackedTimes operation.
     * @callback module:api/UserApi~userCurrentTrackedTimesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackedTime>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the current user's tracked times
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {Date} [since] Only show times updated after the given time. This is a timestamp in RFC 3339 format
     * @param {Date} [before] Only show times updated before the given time. This is a timestamp in RFC 3339 format
     * @param {module:api/UserApi~userCurrentTrackedTimesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrackedTime>}
     */
    userCurrentTrackedTimes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'since': opts['since'],
        'before': opts['before']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [TrackedTime];
      return this.apiClient.callApi(
        '/user/times', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userDeleteAccessToken operation.
     * @callback module:api/UserApi~userDeleteAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an access token
     * @param {String} username username of user
     * @param {String} token token to be deleted, identified by ID and if not available by name
     * @param {module:api/UserApi~userDeleteAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userDeleteAccessToken(username, token, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userDeleteAccessToken");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userDeleteAccessToken");
      }

      let pathParams = {
        'username': username,
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{username}/tokens/{token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userDeleteEmail operation.
     * @callback module:api/UserApi~userDeleteEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete email addresses
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteEmailOption} [deleteEmailOption] 
     * @param {module:api/UserApi~userDeleteEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userDeleteEmail(opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteEmailOption'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/emails', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userDeleteHook operation.
     * @callback module:api/UserApi~userDeleteHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a hook
     * @param {Number} id id of the hook to delete
     * @param {module:api/UserApi~userDeleteHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userDeleteHook(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userDeleteHook");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/hooks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userDeleteOAuth2Application operation.
     * @callback module:api/UserApi~userDeleteOAuth2ApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an OAuth2 Application
     * @param {Number} id token to be deleted
     * @param {module:api/UserApi~userDeleteOAuth2ApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userDeleteOAuth2Application(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userDeleteOAuth2Application");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/applications/oauth2/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userEditHook operation.
     * @callback module:api/UserApi~userEditHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a hook
     * @param {Number} id id of the hook to update
     * @param {Object} opts Optional parameters
     * @param {module:model/EditHookOption} [editHookOption] 
     * @param {module:api/UserApi~userEditHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hook}
     */
    userEditHook(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['editHookOption'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userEditHook");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Hook;
      return this.apiClient.callApi(
        '/user/hooks/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGet operation.
     * @callback module:api/UserApi~userGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user
     * @param {String} username username of user to get
     * @param {module:api/UserApi~userGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    userGet(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userGet");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetCurrent operation.
     * @callback module:api/UserApi~userGetCurrentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the authenticated user
     * @param {module:api/UserApi~userGetCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    userGetCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetHeatmapData operation.
     * @callback module:api/UserApi~userGetHeatmapDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserHeatmapData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user's heatmap
     * @param {String} username username of user to get
     * @param {module:api/UserApi~userGetHeatmapDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserHeatmapData>}
     */
    userGetHeatmapData(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userGetHeatmapData");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [UserHeatmapData];
      return this.apiClient.callApi(
        '/users/{username}/heatmap', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetHook operation.
     * @callback module:api/UserApi~userGetHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a hook
     * @param {Number} id id of the hook to get
     * @param {module:api/UserApi~userGetHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hook}
     */
    userGetHook(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userGetHook");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Hook;
      return this.apiClient.callApi(
        '/user/hooks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetOAuth2Application operation.
     * @callback module:api/UserApi~userGetOAuth2ApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OAuth2Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get an OAuth2 Application
     * @param {Number} id Application ID to be found
     * @param {module:api/UserApi~userGetOAuth2ApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OAuth2Application}
     */
    userGetOAuth2Application(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userGetOAuth2Application");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = OAuth2Application;
      return this.apiClient.callApi(
        '/user/applications/oauth2/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetOauth2Application operation.
     * @callback module:api/UserApi~userGetOauth2ApplicationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OAuth2Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the authenticated user's oauth2 applications
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userGetOauth2ApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OAuth2Application>}
     */
    userGetOauth2Application(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [OAuth2Application];
      return this.apiClient.callApi(
        '/user/applications/oauth2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetStopWatches operation.
     * @callback module:api/UserApi~userGetStopWatchesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StopWatch>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of all existing stopwatches
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userGetStopWatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StopWatch>}
     */
    userGetStopWatches(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [StopWatch];
      return this.apiClient.callApi(
        '/user/stopwatches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetTokens operation.
     * @callback module:api/UserApi~userGetTokensCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessToken>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the authenticated user's access tokens
     * @param {String} username username of user
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userGetTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessToken>}
     */
    userGetTokens(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userGetTokens");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [AccessToken];
      return this.apiClient.callApi(
        '/users/{username}/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userListActivityFeeds operation.
     * @callback module:api/UserApi~userListActivityFeedsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Activity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a user's activity feeds
     * @param {String} username username of user
     * @param {Object} opts Optional parameters
     * @param {Boolean} [onlyPerformedBy] if true, only show actions performed by the requested user
     * @param {Date} [date] the date of the activities to be found
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userListActivityFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Activity>}
     */
    userListActivityFeeds(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userListActivityFeeds");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'only-performed-by': opts['onlyPerformedBy'],
        'date': opts['date'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Activity];
      return this.apiClient.callApi(
        '/users/{username}/activities/feeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userListEmails operation.
     * @callback module:api/UserApi~userListEmailsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Email>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the authenticated user's email addresses
     * @param {module:api/UserApi~userListEmailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Email>}
     */
    userListEmails(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Email];
      return this.apiClient.callApi(
        '/user/emails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userListFollowers operation.
     * @callback module:api/UserApi~userListFollowersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the given user's followers
     * @param {String} username username of user
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userListFollowersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    userListFollowers(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userListFollowers");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/users/{username}/followers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userListFollowing operation.
     * @callback module:api/UserApi~userListFollowingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the users that the given user is following
     * @param {String} username username of user
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userListFollowingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    userListFollowing(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userListFollowing");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/users/{username}/following', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userListGPGKeys operation.
     * @callback module:api/UserApi~userListGPGKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GPGKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the given user's GPG keys
     * @param {String} username username of user
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userListGPGKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GPGKey>}
     */
    userListGPGKeys(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userListGPGKeys");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [GPGKey];
      return this.apiClient.callApi(
        '/users/{username}/gpg_keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userListHooks operation.
     * @callback module:api/UserApi~userListHooksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Hook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the authenticated user's webhooks
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userListHooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Hook>}
     */
    userListHooks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Hook];
      return this.apiClient.callApi(
        '/user/hooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userListKeys operation.
     * @callback module:api/UserApi~userListKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PublicKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the given user's public keys
     * @param {String} username username of user
     * @param {Object} opts Optional parameters
     * @param {String} [fingerprint] fingerprint of the key
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userListKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PublicKey>}
     */
    userListKeys(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userListKeys");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'fingerprint': opts['fingerprint'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [PublicKey];
      return this.apiClient.callApi(
        '/users/{username}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userListRepos operation.
     * @callback module:api/UserApi~userListReposCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the repos owned by the given user
     * @param {String} username username of user
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userListReposCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Repository>}
     */
    userListRepos(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userListRepos");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Repository];
      return this.apiClient.callApi(
        '/users/{username}/repos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userListStarred operation.
     * @callback module:api/UserApi~userListStarredCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The repos that the given user has starred
     * @param {String} username username of user
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userListStarredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Repository>}
     */
    userListStarred(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userListStarred");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Repository];
      return this.apiClient.callApi(
        '/users/{username}/starred', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userListSubscriptions operation.
     * @callback module:api/UserApi~userListSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the repositories watched by a user
     * @param {String} username username of the user
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userListSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Repository>}
     */
    userListSubscriptions(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userListSubscriptions");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Repository];
      return this.apiClient.callApi(
        '/users/{username}/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userListTeams operation.
     * @callback module:api/UserApi~userListTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the teams a user belongs to
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userListTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    userListTeams(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/user/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userSearch operation.
     * @callback module:api/UserApi~userSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSearch200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for users
     * @param {Object} opts Optional parameters
     * @param {String} [q] keyword
     * @param {Number} [uid] ID of the user to search for
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/UserApi~userSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSearch200Response}
     */
    userSearch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'uid': opts['uid'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserSearch200Response;
      return this.apiClient.callApi(
        '/users/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userUpdateOAuth2Application operation.
     * @callback module:api/UserApi~userUpdateOAuth2ApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OAuth2Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update an OAuth2 Application, this includes regenerating the client secret
     * @param {Number} id application to be updated
     * @param {module:model/CreateOAuth2ApplicationOptions} createOAuth2ApplicationOptions 
     * @param {module:api/UserApi~userUpdateOAuth2ApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OAuth2Application}
     */
    userUpdateOAuth2Application(id, createOAuth2ApplicationOptions, callback) {
      let postBody = createOAuth2ApplicationOptions;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userUpdateOAuth2Application");
      }
      // verify the required parameter 'createOAuth2ApplicationOptions' is set
      if (createOAuth2ApplicationOptions === undefined || createOAuth2ApplicationOptions === null) {
        throw new Error("Missing the required parameter 'createOAuth2ApplicationOptions' when calling userUpdateOAuth2Application");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = OAuth2Application;
      return this.apiClient.callApi(
        '/user/applications/oauth2/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userVerifyGPGKey operation.
     * @callback module:api/UserApi~userVerifyGPGKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GPGKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify a GPG key
     * @param {module:api/UserApi~userVerifyGPGKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GPGKey}
     */
    userVerifyGPGKey(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = GPGKey;
      return this.apiClient.callApi(
        '/user/gpg_key_verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
