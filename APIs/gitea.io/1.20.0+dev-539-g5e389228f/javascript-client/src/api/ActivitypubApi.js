/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityPub from '../model/ActivityPub';

/**
* Activitypub service.
* @module api/ActivitypubApi
* @version 1.20.0+dev-539-g5e389228f
*/
export default class ActivitypubApi {

    /**
    * Constructs a new ActivitypubApi. 
    * @alias module:api/ActivitypubApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activitypubPerson operation.
     * @callback module:api/ActivitypubApi~activitypubPersonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityPub} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the Person actor for a user
     * @param {Number} userId user ID of the user
     * @param {module:api/ActivitypubApi~activitypubPersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityPub}
     */
    activitypubPerson(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling activitypubPerson");
      }

      let pathParams = {
        'user-id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = ActivityPub;
      return this.apiClient.callApi(
        '/activitypub/user-id/{user-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activitypubPersonInbox operation.
     * @callback module:api/ActivitypubApi~activitypubPersonInboxCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send to the inbox
     * @param {Number} userId user ID of the user
     * @param {module:api/ActivitypubApi~activitypubPersonInboxCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activitypubPersonInbox(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling activitypubPersonInbox");
      }

      let pathParams = {
        'user-id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/activitypub/user-id/{user-id}/inbox', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
