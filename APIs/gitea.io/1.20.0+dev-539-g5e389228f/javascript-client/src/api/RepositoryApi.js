/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import Activity from '../model/Activity';
import AddCollaboratorOption from '../model/AddCollaboratorOption';
import AnnotatedTag from '../model/AnnotatedTag';
import Attachment from '../model/Attachment';
import Branch from '../model/Branch';
import BranchProtection from '../model/BranchProtection';
import ChangedFile from '../model/ChangedFile';
import CombinedStatus from '../model/CombinedStatus';
import Commit from '../model/Commit';
import CommitStatus from '../model/CommitStatus';
import ContentsResponse from '../model/ContentsResponse';
import CreateBranchProtectionOption from '../model/CreateBranchProtectionOption';
import CreateBranchRepoOption from '../model/CreateBranchRepoOption';
import CreateFileOptions from '../model/CreateFileOptions';
import CreateForkOption from '../model/CreateForkOption';
import CreateHookOption from '../model/CreateHookOption';
import CreateKeyOption from '../model/CreateKeyOption';
import CreatePullRequestOption from '../model/CreatePullRequestOption';
import CreatePullReviewOptions from '../model/CreatePullReviewOptions';
import CreatePushMirrorOption from '../model/CreatePushMirrorOption';
import CreateReleaseOption from '../model/CreateReleaseOption';
import CreateRepoOption from '../model/CreateRepoOption';
import CreateStatusOption from '../model/CreateStatusOption';
import CreateTagOption from '../model/CreateTagOption';
import CreateWikiPageOptions from '../model/CreateWikiPageOptions';
import DeleteFileOptions from '../model/DeleteFileOptions';
import DeployKey from '../model/DeployKey';
import DismissPullReviewOptions from '../model/DismissPullReviewOptions';
import EditAttachmentOptions from '../model/EditAttachmentOptions';
import EditBranchProtectionOption from '../model/EditBranchProtectionOption';
import EditGitHookOption from '../model/EditGitHookOption';
import EditHookOption from '../model/EditHookOption';
import EditPullRequestOption from '../model/EditPullRequestOption';
import EditReleaseOption from '../model/EditReleaseOption';
import EditRepoOption from '../model/EditRepoOption';
import FileDeleteResponse from '../model/FileDeleteResponse';
import FileResponse from '../model/FileResponse';
import GenerateRepoOption from '../model/GenerateRepoOption';
import GitBlobResponse from '../model/GitBlobResponse';
import GitHook from '../model/GitHook';
import GitTreeResponse from '../model/GitTreeResponse';
import Hook from '../model/Hook';
import IssueConfig from '../model/IssueConfig';
import IssueConfigValidation from '../model/IssueConfigValidation';
import IssueTemplate from '../model/IssueTemplate';
import MergePullRequestOption from '../model/MergePullRequestOption';
import MigrateRepoOptions from '../model/MigrateRepoOptions';
import Note from '../model/Note';
import PullRequest from '../model/PullRequest';
import PullReview from '../model/PullReview';
import PullReviewComment from '../model/PullReviewComment';
import PullReviewRequestOptions from '../model/PullReviewRequestOptions';
import PushMirror from '../model/PushMirror';
import Reference from '../model/Reference';
import Release from '../model/Release';
import RepoCollaboratorPermission from '../model/RepoCollaboratorPermission';
import RepoTopicOptions from '../model/RepoTopicOptions';
import Repository from '../model/Repository';
import SearchResults from '../model/SearchResults';
import SubmitPullReviewOptions from '../model/SubmitPullReviewOptions';
import Tag from '../model/Tag';
import Team from '../model/Team';
import TopicName from '../model/TopicName';
import TopicResponse from '../model/TopicResponse';
import TrackedTime from '../model/TrackedTime';
import TransferRepoOption from '../model/TransferRepoOption';
import UpdateFileOptions from '../model/UpdateFileOptions';
import User from '../model/User';
import WatchInfo from '../model/WatchInfo';
import WikiCommitList from '../model/WikiCommitList';
import WikiPage from '../model/WikiPage';
import WikiPageMetaData from '../model/WikiPageMetaData';

/**
* Repository service.
* @module api/RepositoryApi
* @version 1.20.0+dev-539-g5e389228f
*/
export default class RepositoryApi {

    /**
    * Constructs a new RepositoryApi. 
    * @alias module:api/RepositoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptRepoTransfer operation.
     * @callback module:api/RepositoryApi~acceptRepoTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept a repo transfer
     * @param {String} owner owner of the repo to transfer
     * @param {String} repo name of the repo to transfer
     * @param {module:api/RepositoryApi~acceptRepoTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Repository}
     */
    acceptRepoTransfer(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling acceptRepoTransfer");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling acceptRepoTransfer");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Repository;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/transfer/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCurrentUserRepo operation.
     * @callback module:api/RepositoryApi~createCurrentUserRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a repository
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateRepoOption} [createRepoOption] 
     * @param {module:api/RepositoryApi~createCurrentUserRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Repository}
     */
    createCurrentUserRepo(opts, callback) {
      opts = opts || {};
      let postBody = opts['createRepoOption'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Repository;
      return this.apiClient.callApi(
        '/user/repos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFork operation.
     * @callback module:api/RepositoryApi~createForkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fork a repository
     * @param {String} owner owner of the repo to fork
     * @param {String} repo name of the repo to fork
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateForkOption} [createForkOption] 
     * @param {module:api/RepositoryApi~createForkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Repository}
     */
    createFork(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['createForkOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling createFork");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling createFork");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Repository;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/forks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateRepo operation.
     * @callback module:api/RepositoryApi~generateRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a repository using a template
     * @param {String} templateOwner name of the template repository owner
     * @param {String} templateRepo name of the template repository
     * @param {Object} opts Optional parameters
     * @param {module:model/GenerateRepoOption} [generateRepoOption] 
     * @param {module:api/RepositoryApi~generateRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Repository}
     */
    generateRepo(templateOwner, templateRepo, opts, callback) {
      opts = opts || {};
      let postBody = opts['generateRepoOption'];
      // verify the required parameter 'templateOwner' is set
      if (templateOwner === undefined || templateOwner === null) {
        throw new Error("Missing the required parameter 'templateOwner' when calling generateRepo");
      }
      // verify the required parameter 'templateRepo' is set
      if (templateRepo === undefined || templateRepo === null) {
        throw new Error("Missing the required parameter 'templateRepo' when calling generateRepo");
      }

      let pathParams = {
        'template_owner': templateOwner,
        'template_repo': templateRepo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Repository;
      return this.apiClient.callApi(
        '/repos/{template_owner}/{template_repo}/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnnotatedTag operation.
     * @callback module:api/RepositoryApi~getAnnotatedTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotatedTag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the tag object of an annotated tag (not lightweight tags)
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} sha sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags.
     * @param {module:api/RepositoryApi~getAnnotatedTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotatedTag}
     */
    getAnnotatedTag(owner, repo, sha, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getAnnotatedTag");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getAnnotatedTag");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling getAnnotatedTag");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'sha': sha
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = AnnotatedTag;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/git/tags/{sha}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlob operation.
     * @callback module:api/RepositoryApi~getBlobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GitBlobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the blob of a repository.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} sha sha of the commit
     * @param {module:api/RepositoryApi~getBlobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GitBlobResponse}
     */
    getBlob(owner, repo, sha, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getBlob");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getBlob");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling getBlob");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'sha': sha
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = GitBlobResponse;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/git/blobs/{sha}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTree operation.
     * @callback module:api/RepositoryApi~getTreeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GitTreeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the tree of a repository.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} sha sha of the commit
     * @param {Object} opts Optional parameters
     * @param {Boolean} [recursive] show all directories and files
     * @param {Number} [page] page number; the 'truncated' field in the response will be true if there are still more items after this page, false if the last page
     * @param {Number} [perPage] number of items per page
     * @param {module:api/RepositoryApi~getTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GitTreeResponse}
     */
    getTree(owner, repo, sha, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getTree");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getTree");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling getTree");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'sha': sha
      };
      let queryParams = {
        'recursive': opts['recursive'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = GitTreeResponse;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/git/trees/{sha}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listForks operation.
     * @callback module:api/RepositoryApi~listForksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a repository's forks
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~listForksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Repository>}
     */
    listForks(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listForks");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling listForks");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Repository];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/forks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectRepoTransfer operation.
     * @callback module:api/RepositoryApi~rejectRepoTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reject a repo transfer
     * @param {String} owner owner of the repo to transfer
     * @param {String} repo name of the repo to transfer
     * @param {module:api/RepositoryApi~rejectRepoTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Repository}
     */
    rejectRepoTransfer(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling rejectRepoTransfer");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling rejectRepoTransfer");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Repository;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/transfer/reject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoAddCollaborator operation.
     * @callback module:api/RepositoryApi~repoAddCollaboratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a collaborator to a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} collaborator username of the collaborator to add
     * @param {Object} opts Optional parameters
     * @param {module:model/AddCollaboratorOption} [addCollaboratorOption] 
     * @param {module:api/RepositoryApi~repoAddCollaboratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoAddCollaborator(owner, repo, collaborator, opts, callback) {
      opts = opts || {};
      let postBody = opts['addCollaboratorOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoAddCollaborator");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoAddCollaborator");
      }
      // verify the required parameter 'collaborator' is set
      if (collaborator === undefined || collaborator === null) {
        throw new Error("Missing the required parameter 'collaborator' when calling repoAddCollaborator");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'collaborator': collaborator
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/collaborators/{collaborator}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoAddPushMirror operation.
     * @callback module:api/RepositoryApi~repoAddPushMirrorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PushMirror} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a push mirror to the repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePushMirrorOption} [createPushMirrorOption] 
     * @param {module:api/RepositoryApi~repoAddPushMirrorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PushMirror}
     */
    repoAddPushMirror(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['createPushMirrorOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoAddPushMirror");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoAddPushMirror");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = PushMirror;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/push_mirrors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoAddTeam operation.
     * @callback module:api/RepositoryApi~repoAddTeamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a team to a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} team team name
     * @param {module:api/RepositoryApi~repoAddTeamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoAddTeam(owner, repo, team, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoAddTeam");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoAddTeam");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling repoAddTeam");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/teams/{team}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoAddTopic operation.
     * @callback module:api/RepositoryApi~repoAddTopicCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a topic to a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} topic name of the topic to add
     * @param {module:api/RepositoryApi~repoAddTopicCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoAddTopic(owner, repo, topic, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoAddTopic");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoAddTopic");
      }
      // verify the required parameter 'topic' is set
      if (topic === undefined || topic === null) {
        throw new Error("Missing the required parameter 'topic' when calling repoAddTopic");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'topic': topic
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/topics/{topic}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoApplyDiffPatch operation.
     * @callback module:api/RepositoryApi~repoApplyDiffPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply diff patch to repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:model/UpdateFileOptions} updateFileOptions 
     * @param {module:api/RepositoryApi~repoApplyDiffPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileResponse}
     */
    repoApplyDiffPatch(owner, repo, updateFileOptions, callback) {
      let postBody = updateFileOptions;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoApplyDiffPatch");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoApplyDiffPatch");
      }
      // verify the required parameter 'updateFileOptions' is set
      if (updateFileOptions === undefined || updateFileOptions === null) {
        throw new Error("Missing the required parameter 'updateFileOptions' when calling repoApplyDiffPatch");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = FileResponse;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/diffpatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoCancelScheduledAutoMerge operation.
     * @callback module:api/RepositoryApi~repoCancelScheduledAutoMergeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel the scheduled auto merge for the given pull request
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request to merge
     * @param {module:api/RepositoryApi~repoCancelScheduledAutoMergeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoCancelScheduledAutoMerge(owner, repo, index, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoCancelScheduledAutoMerge");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoCancelScheduledAutoMerge");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoCancelScheduledAutoMerge");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}/merge', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoCheckCollaborator operation.
     * @callback module:api/RepositoryApi~repoCheckCollaboratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a user is a collaborator of a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} collaborator username of the collaborator
     * @param {module:api/RepositoryApi~repoCheckCollaboratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoCheckCollaborator(owner, repo, collaborator, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoCheckCollaborator");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoCheckCollaborator");
      }
      // verify the required parameter 'collaborator' is set
      if (collaborator === undefined || collaborator === null) {
        throw new Error("Missing the required parameter 'collaborator' when calling repoCheckCollaborator");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'collaborator': collaborator
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/collaborators/{collaborator}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoCheckTeam operation.
     * @callback module:api/RepositoryApi~repoCheckTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Team} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a team is assigned to a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} team team name
     * @param {module:api/RepositoryApi~repoCheckTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Team}
     */
    repoCheckTeam(owner, repo, team, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoCheckTeam");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoCheckTeam");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling repoCheckTeam");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Team;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/teams/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoCreateBranch operation.
     * @callback module:api/RepositoryApi~repoCreateBranchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Branch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a branch
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateBranchRepoOption} [createBranchRepoOption] 
     * @param {module:api/RepositoryApi~repoCreateBranchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Branch}
     */
    repoCreateBranch(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['createBranchRepoOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoCreateBranch");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoCreateBranch");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Branch;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/branches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoCreateBranchProtection operation.
     * @callback module:api/RepositoryApi~repoCreateBranchProtectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BranchProtection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a branch protections for a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateBranchProtectionOption} [createBranchProtectionOption] 
     * @param {module:api/RepositoryApi~repoCreateBranchProtectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BranchProtection}
     */
    repoCreateBranchProtection(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['createBranchProtectionOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoCreateBranchProtection");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoCreateBranchProtection");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = BranchProtection;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/branch_protections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoCreateFile operation.
     * @callback module:api/RepositoryApi~repoCreateFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a file in a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} filepath path of the file to create
     * @param {module:model/CreateFileOptions} createFileOptions 
     * @param {module:api/RepositoryApi~repoCreateFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileResponse}
     */
    repoCreateFile(owner, repo, filepath, createFileOptions, callback) {
      let postBody = createFileOptions;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoCreateFile");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoCreateFile");
      }
      // verify the required parameter 'filepath' is set
      if (filepath === undefined || filepath === null) {
        throw new Error("Missing the required parameter 'filepath' when calling repoCreateFile");
      }
      // verify the required parameter 'createFileOptions' is set
      if (createFileOptions === undefined || createFileOptions === null) {
        throw new Error("Missing the required parameter 'createFileOptions' when calling repoCreateFile");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'filepath': filepath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = FileResponse;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/contents/{filepath}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoCreateHook operation.
     * @callback module:api/RepositoryApi~repoCreateHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a hook
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateHookOption} [createHookOption] 
     * @param {module:api/RepositoryApi~repoCreateHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hook}
     */
    repoCreateHook(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['createHookOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoCreateHook");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoCreateHook");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Hook;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/hooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoCreateKey operation.
     * @callback module:api/RepositoryApi~repoCreateKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeployKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a key to a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateKeyOption} [createKeyOption] 
     * @param {module:api/RepositoryApi~repoCreateKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeployKey}
     */
    repoCreateKey(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['createKeyOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoCreateKey");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoCreateKey");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = DeployKey;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoCreatePullRequest operation.
     * @callback module:api/RepositoryApi~repoCreatePullRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a pull request
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePullRequestOption} [createPullRequestOption] 
     * @param {module:api/RepositoryApi~repoCreatePullRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequest}
     */
    repoCreatePullRequest(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['createPullRequestOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoCreatePullRequest");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoCreatePullRequest");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = PullRequest;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoCreatePullReview operation.
     * @callback module:api/RepositoryApi~repoCreatePullReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a review to an pull request
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request
     * @param {module:model/CreatePullReviewOptions} createPullReviewOptions 
     * @param {module:api/RepositoryApi~repoCreatePullReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullReview}
     */
    repoCreatePullReview(owner, repo, index, createPullReviewOptions, callback) {
      let postBody = createPullReviewOptions;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoCreatePullReview");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoCreatePullReview");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoCreatePullReview");
      }
      // verify the required parameter 'createPullReviewOptions' is set
      if (createPullReviewOptions === undefined || createPullReviewOptions === null) {
        throw new Error("Missing the required parameter 'createPullReviewOptions' when calling repoCreatePullReview");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = PullReview;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}/reviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoCreatePullReviewRequests operation.
     * @callback module:api/RepositoryApi~repoCreatePullReviewRequestsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PullReview>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create review requests for a pull request
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request
     * @param {module:model/PullReviewRequestOptions} pullReviewRequestOptions 
     * @param {module:api/RepositoryApi~repoCreatePullReviewRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PullReview>}
     */
    repoCreatePullReviewRequests(owner, repo, index, pullReviewRequestOptions, callback) {
      let postBody = pullReviewRequestOptions;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoCreatePullReviewRequests");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoCreatePullReviewRequests");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoCreatePullReviewRequests");
      }
      // verify the required parameter 'pullReviewRequestOptions' is set
      if (pullReviewRequestOptions === undefined || pullReviewRequestOptions === null) {
        throw new Error("Missing the required parameter 'pullReviewRequestOptions' when calling repoCreatePullReviewRequests");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = [PullReview];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}/requested_reviewers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoCreateRelease operation.
     * @callback module:api/RepositoryApi~repoCreateReleaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Release} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a release
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateReleaseOption} [createReleaseOption] 
     * @param {module:api/RepositoryApi~repoCreateReleaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Release}
     */
    repoCreateRelease(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['createReleaseOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoCreateRelease");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoCreateRelease");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Release;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/releases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoCreateReleaseAttachment operation.
     * @callback module:api/RepositoryApi~repoCreateReleaseAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a release attachment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the release
     * @param {File} attachment attachment to upload
     * @param {Object} opts Optional parameters
     * @param {String} [name] name of the attachment
     * @param {module:api/RepositoryApi~repoCreateReleaseAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    repoCreateReleaseAttachment(owner, repo, id, attachment, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoCreateReleaseAttachment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoCreateReleaseAttachment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoCreateReleaseAttachment");
      }
      // verify the required parameter 'attachment' is set
      if (attachment === undefined || attachment === null) {
        throw new Error("Missing the required parameter 'attachment' when calling repoCreateReleaseAttachment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
        'attachment': attachment
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/releases/{id}/assets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoCreateStatus operation.
     * @callback module:api/RepositoryApi~repoCreateStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a commit status
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} sha sha of the commit
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateStatusOption} [createStatusOption] 
     * @param {module:api/RepositoryApi~repoCreateStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommitStatus}
     */
    repoCreateStatus(owner, repo, sha, opts, callback) {
      opts = opts || {};
      let postBody = opts['createStatusOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoCreateStatus");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoCreateStatus");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling repoCreateStatus");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'sha': sha
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = CommitStatus;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/statuses/{sha}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoCreateTag operation.
     * @callback module:api/RepositoryApi~repoCreateTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new git tag in a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTagOption} [createTagOption] 
     * @param {module:api/RepositoryApi~repoCreateTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    repoCreateTag(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['createTagOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoCreateTag");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoCreateTag");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoCreateWikiPage operation.
     * @callback module:api/RepositoryApi~repoCreateWikiPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WikiPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a wiki page
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateWikiPageOptions} [createWikiPageOptions] 
     * @param {module:api/RepositoryApi~repoCreateWikiPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WikiPage}
     */
    repoCreateWikiPage(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['createWikiPageOptions'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoCreateWikiPage");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoCreateWikiPage");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = WikiPage;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/wiki/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDelete operation.
     * @callback module:api/RepositoryApi~repoDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a repository
     * @param {String} owner owner of the repo to delete
     * @param {String} repo name of the repo to delete
     * @param {module:api/RepositoryApi~repoDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoDelete(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDelete");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDelete");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDeleteBranch operation.
     * @callback module:api/RepositoryApi~repoDeleteBranchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific branch from a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} branch branch to delete
     * @param {module:api/RepositoryApi~repoDeleteBranchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoDeleteBranch(owner, repo, branch, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDeleteBranch");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDeleteBranch");
      }
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling repoDeleteBranch");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'branch': branch
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/branches/{branch}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDeleteBranchProtection operation.
     * @callback module:api/RepositoryApi~repoDeleteBranchProtectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific branch protection for the repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} name name of protected branch
     * @param {module:api/RepositoryApi~repoDeleteBranchProtectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoDeleteBranchProtection(owner, repo, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDeleteBranchProtection");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDeleteBranchProtection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling repoDeleteBranchProtection");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/branch_protections/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDeleteCollaborator operation.
     * @callback module:api/RepositoryApi~repoDeleteCollaboratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a collaborator from a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} collaborator username of the collaborator to delete
     * @param {module:api/RepositoryApi~repoDeleteCollaboratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoDeleteCollaborator(owner, repo, collaborator, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDeleteCollaborator");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDeleteCollaborator");
      }
      // verify the required parameter 'collaborator' is set
      if (collaborator === undefined || collaborator === null) {
        throw new Error("Missing the required parameter 'collaborator' when calling repoDeleteCollaborator");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'collaborator': collaborator
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/collaborators/{collaborator}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDeleteFile operation.
     * @callback module:api/RepositoryApi~repoDeleteFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file in a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} filepath path of the file to delete
     * @param {module:model/DeleteFileOptions} deleteFileOptions 
     * @param {module:api/RepositoryApi~repoDeleteFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileDeleteResponse}
     */
    repoDeleteFile(owner, repo, filepath, deleteFileOptions, callback) {
      let postBody = deleteFileOptions;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDeleteFile");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDeleteFile");
      }
      // verify the required parameter 'filepath' is set
      if (filepath === undefined || filepath === null) {
        throw new Error("Missing the required parameter 'filepath' when calling repoDeleteFile");
      }
      // verify the required parameter 'deleteFileOptions' is set
      if (deleteFileOptions === undefined || deleteFileOptions === null) {
        throw new Error("Missing the required parameter 'deleteFileOptions' when calling repoDeleteFile");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'filepath': filepath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = FileDeleteResponse;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/contents/{filepath}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDeleteGitHook operation.
     * @callback module:api/RepositoryApi~repoDeleteGitHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Git hook in a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} id id of the hook to get
     * @param {module:api/RepositoryApi~repoDeleteGitHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoDeleteGitHook(owner, repo, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDeleteGitHook");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDeleteGitHook");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoDeleteGitHook");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/hooks/git/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDeleteHook operation.
     * @callback module:api/RepositoryApi~repoDeleteHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a hook in a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the hook to delete
     * @param {module:api/RepositoryApi~repoDeleteHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoDeleteHook(owner, repo, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDeleteHook");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDeleteHook");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoDeleteHook");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/hooks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDeleteKey operation.
     * @callback module:api/RepositoryApi~repoDeleteKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a key from a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the key to delete
     * @param {module:api/RepositoryApi~repoDeleteKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoDeleteKey(owner, repo, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDeleteKey");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDeleteKey");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoDeleteKey");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/keys/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDeletePullReview operation.
     * @callback module:api/RepositoryApi~repoDeletePullReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific review from a pull request
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request
     * @param {Number} id id of the review
     * @param {module:api/RepositoryApi~repoDeletePullReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoDeletePullReview(owner, repo, index, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDeletePullReview");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDeletePullReview");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoDeletePullReview");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoDeletePullReview");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDeletePullReviewRequests operation.
     * @callback module:api/RepositoryApi~repoDeletePullReviewRequestsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cancel review requests for a pull request
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request
     * @param {module:model/PullReviewRequestOptions} pullReviewRequestOptions 
     * @param {module:api/RepositoryApi~repoDeletePullReviewRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoDeletePullReviewRequests(owner, repo, index, pullReviewRequestOptions, callback) {
      let postBody = pullReviewRequestOptions;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDeletePullReviewRequests");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDeletePullReviewRequests");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoDeletePullReviewRequests");
      }
      // verify the required parameter 'pullReviewRequestOptions' is set
      if (pullReviewRequestOptions === undefined || pullReviewRequestOptions === null) {
        throw new Error("Missing the required parameter 'pullReviewRequestOptions' when calling repoDeletePullReviewRequests");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}/requested_reviewers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDeletePushMirror operation.
     * @callback module:api/RepositoryApi~repoDeletePushMirrorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a push mirror from a repository by remoteName
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} name remote name of the pushMirror
     * @param {module:api/RepositoryApi~repoDeletePushMirrorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoDeletePushMirror(owner, repo, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDeletePushMirror");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDeletePushMirror");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling repoDeletePushMirror");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/push_mirrors/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDeleteRelease operation.
     * @callback module:api/RepositoryApi~repoDeleteReleaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a release
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the release to delete
     * @param {module:api/RepositoryApi~repoDeleteReleaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoDeleteRelease(owner, repo, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDeleteRelease");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDeleteRelease");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoDeleteRelease");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/releases/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDeleteReleaseAttachment operation.
     * @callback module:api/RepositoryApi~repoDeleteReleaseAttachmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a release attachment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the release
     * @param {Number} attachmentId id of the attachment to delete
     * @param {module:api/RepositoryApi~repoDeleteReleaseAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoDeleteReleaseAttachment(owner, repo, id, attachmentId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDeleteReleaseAttachment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDeleteReleaseAttachment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoDeleteReleaseAttachment");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling repoDeleteReleaseAttachment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDeleteReleaseByTag operation.
     * @callback module:api/RepositoryApi~repoDeleteReleaseByTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a release by tag name
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} tag tag name of the release to delete
     * @param {module:api/RepositoryApi~repoDeleteReleaseByTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoDeleteReleaseByTag(owner, repo, tag, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDeleteReleaseByTag");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDeleteReleaseByTag");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling repoDeleteReleaseByTag");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/releases/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDeleteTag operation.
     * @callback module:api/RepositoryApi~repoDeleteTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a repository's tag by name
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} tag name of tag to delete
     * @param {module:api/RepositoryApi~repoDeleteTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoDeleteTag(owner, repo, tag, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDeleteTag");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDeleteTag");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling repoDeleteTag");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDeleteTeam operation.
     * @callback module:api/RepositoryApi~repoDeleteTeamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a team from a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} team team name
     * @param {module:api/RepositoryApi~repoDeleteTeamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoDeleteTeam(owner, repo, team, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDeleteTeam");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDeleteTeam");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling repoDeleteTeam");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/teams/{team}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDeleteTopic operation.
     * @callback module:api/RepositoryApi~repoDeleteTopicCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a topic from a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} topic name of the topic to delete
     * @param {module:api/RepositoryApi~repoDeleteTopicCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoDeleteTopic(owner, repo, topic, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDeleteTopic");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDeleteTopic");
      }
      // verify the required parameter 'topic' is set
      if (topic === undefined || topic === null) {
        throw new Error("Missing the required parameter 'topic' when calling repoDeleteTopic");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'topic': topic
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/topics/{topic}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDeleteWikiPage operation.
     * @callback module:api/RepositoryApi~repoDeleteWikiPageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a wiki page
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} pageName name of the page
     * @param {module:api/RepositoryApi~repoDeleteWikiPageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoDeleteWikiPage(owner, repo, pageName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDeleteWikiPage");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDeleteWikiPage");
      }
      // verify the required parameter 'pageName' is set
      if (pageName === undefined || pageName === null) {
        throw new Error("Missing the required parameter 'pageName' when calling repoDeleteWikiPage");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pageName': pageName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/wiki/page/{pageName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDismissPullReview operation.
     * @callback module:api/RepositoryApi~repoDismissPullReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dismiss a review for a pull request
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request
     * @param {Number} id id of the review
     * @param {module:model/DismissPullReviewOptions} dismissPullReviewOptions 
     * @param {module:api/RepositoryApi~repoDismissPullReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullReview}
     */
    repoDismissPullReview(owner, repo, index, id, dismissPullReviewOptions, callback) {
      let postBody = dismissPullReviewOptions;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDismissPullReview");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDismissPullReview");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoDismissPullReview");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoDismissPullReview");
      }
      // verify the required parameter 'dismissPullReviewOptions' is set
      if (dismissPullReviewOptions === undefined || dismissPullReviewOptions === null) {
        throw new Error("Missing the required parameter 'dismissPullReviewOptions' when calling repoDismissPullReview");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = PullReview;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/dismissals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDownloadCommitDiffOrPatch operation.
     * @callback module:api/RepositoryApi~repoDownloadCommitDiffOrPatchCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a commit's diff or patch
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} sha SHA of the commit to get
     * @param {module:model/String} diffType whether the output is diff or patch
     * @param {module:api/RepositoryApi~repoDownloadCommitDiffOrPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    repoDownloadCommitDiffOrPatch(owner, repo, sha, diffType, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDownloadCommitDiffOrPatch");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDownloadCommitDiffOrPatch");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling repoDownloadCommitDiffOrPatch");
      }
      // verify the required parameter 'diffType' is set
      if (diffType === undefined || diffType === null) {
        throw new Error("Missing the required parameter 'diffType' when calling repoDownloadCommitDiffOrPatch");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'sha': sha,
        'diffType': diffType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/git/commits/{sha}.{diffType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoDownloadPullDiffOrPatch operation.
     * @callback module:api/RepositoryApi~repoDownloadPullDiffOrPatchCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pull request diff or patch
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request to get
     * @param {module:model/String} diffType whether the output is diff or patch
     * @param {Object} opts Optional parameters
     * @param {Boolean} [binary] whether to include binary file changes. if true, the diff is applicable with `git apply`
     * @param {module:api/RepositoryApi~repoDownloadPullDiffOrPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    repoDownloadPullDiffOrPatch(owner, repo, index, diffType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoDownloadPullDiffOrPatch");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoDownloadPullDiffOrPatch");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoDownloadPullDiffOrPatch");
      }
      // verify the required parameter 'diffType' is set
      if (diffType === undefined || diffType === null) {
        throw new Error("Missing the required parameter 'diffType' when calling repoDownloadPullDiffOrPatch");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index,
        'diffType': diffType
      };
      let queryParams = {
        'binary': opts['binary']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}.{diffType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoEdit operation.
     * @callback module:api/RepositoryApi~repoEditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a repository's properties. Only fields that are set will be changed.
     * @param {String} owner owner of the repo to edit
     * @param {String} repo name of the repo to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditRepoOption} [editRepoOption] Properties of a repo that you can edit
     * @param {module:api/RepositoryApi~repoEditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Repository}
     */
    repoEdit(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['editRepoOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoEdit");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoEdit");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Repository;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoEditBranchProtection operation.
     * @callback module:api/RepositoryApi~repoEditBranchProtectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BranchProtection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a branch protections for a repository. Only fields that are set will be changed
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} name name of protected branch
     * @param {Object} opts Optional parameters
     * @param {module:model/EditBranchProtectionOption} [editBranchProtectionOption] 
     * @param {module:api/RepositoryApi~repoEditBranchProtectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BranchProtection}
     */
    repoEditBranchProtection(owner, repo, name, opts, callback) {
      opts = opts || {};
      let postBody = opts['editBranchProtectionOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoEditBranchProtection");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoEditBranchProtection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling repoEditBranchProtection");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = BranchProtection;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/branch_protections/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoEditGitHook operation.
     * @callback module:api/RepositoryApi~repoEditGitHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GitHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a Git hook in a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} id id of the hook to get
     * @param {Object} opts Optional parameters
     * @param {module:model/EditGitHookOption} [editGitHookOption] 
     * @param {module:api/RepositoryApi~repoEditGitHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GitHook}
     */
    repoEditGitHook(owner, repo, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['editGitHookOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoEditGitHook");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoEditGitHook");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoEditGitHook");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = GitHook;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/hooks/git/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoEditHook operation.
     * @callback module:api/RepositoryApi~repoEditHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a hook in a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id index of the hook
     * @param {Object} opts Optional parameters
     * @param {module:model/EditHookOption} [editHookOption] 
     * @param {module:api/RepositoryApi~repoEditHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hook}
     */
    repoEditHook(owner, repo, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['editHookOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoEditHook");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoEditHook");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoEditHook");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Hook;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/hooks/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoEditPullRequest operation.
     * @callback module:api/RepositoryApi~repoEditPullRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a pull request. If using deadline only the date will be taken into account, and time of day ignored.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditPullRequestOption} [editPullRequestOption] 
     * @param {module:api/RepositoryApi~repoEditPullRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequest}
     */
    repoEditPullRequest(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['editPullRequestOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoEditPullRequest");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoEditPullRequest");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoEditPullRequest");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = PullRequest;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoEditRelease operation.
     * @callback module:api/RepositoryApi~repoEditReleaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Release} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a release
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the release to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditReleaseOption} [editReleaseOption] 
     * @param {module:api/RepositoryApi~repoEditReleaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Release}
     */
    repoEditRelease(owner, repo, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['editReleaseOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoEditRelease");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoEditRelease");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoEditRelease");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Release;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/releases/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoEditReleaseAttachment operation.
     * @callback module:api/RepositoryApi~repoEditReleaseAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a release attachment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the release
     * @param {Number} attachmentId id of the attachment to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditAttachmentOptions} [editAttachmentOptions] 
     * @param {module:api/RepositoryApi~repoEditReleaseAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    repoEditReleaseAttachment(owner, repo, id, attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['editAttachmentOptions'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoEditReleaseAttachment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoEditReleaseAttachment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoEditReleaseAttachment");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling repoEditReleaseAttachment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoEditWikiPage operation.
     * @callback module:api/RepositoryApi~repoEditWikiPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WikiPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a wiki page
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} pageName name of the page
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateWikiPageOptions} [createWikiPageOptions] 
     * @param {module:api/RepositoryApi~repoEditWikiPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WikiPage}
     */
    repoEditWikiPage(owner, repo, pageName, opts, callback) {
      opts = opts || {};
      let postBody = opts['createWikiPageOptions'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoEditWikiPage");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoEditWikiPage");
      }
      // verify the required parameter 'pageName' is set
      if (pageName === undefined || pageName === null) {
        throw new Error("Missing the required parameter 'pageName' when calling repoEditWikiPage");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pageName': pageName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = WikiPage;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/wiki/page/{pageName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGet operation.
     * @callback module:api/RepositoryApi~repoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/RepositoryApi~repoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Repository}
     */
    repoGet(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGet");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGet");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Repository;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetAllCommits operation.
     * @callback module:api/RepositoryApi~repoGetAllCommitsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Commit>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all commits from a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {String} [sha] SHA or branch to start listing commits from (usually 'master')
     * @param {String} [path] filepath of a file/dir
     * @param {Boolean} [stat] include diff stats for every commit (disable for speedup, default 'true')
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results (ignored if used with 'path')
     * @param {module:api/RepositoryApi~repoGetAllCommitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Commit>}
     */
    repoGetAllCommits(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetAllCommits");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetAllCommits");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'sha': opts['sha'],
        'path': opts['path'],
        'stat': opts['stat'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Commit];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/commits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetArchive operation.
     * @callback module:api/RepositoryApi~repoGetArchiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an archive of a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} archive the git reference for download with attached archive format (e.g. master.zip)
     * @param {module:api/RepositoryApi~repoGetArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoGetArchive(owner, repo, archive, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetArchive");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetArchive");
      }
      // verify the required parameter 'archive' is set
      if (archive === undefined || archive === null) {
        throw new Error("Missing the required parameter 'archive' when calling repoGetArchive");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'archive': archive
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/archive/{archive}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetAssignees operation.
     * @callback module:api/RepositoryApi~repoGetAssigneesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all users that have write access and can be assigned to issues
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/RepositoryApi~repoGetAssigneesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    repoGetAssignees(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetAssignees");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetAssignees");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/assignees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetBranch operation.
     * @callback module:api/RepositoryApi~repoGetBranchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Branch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a specific branch from a repository, including its effective branch protection
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} branch branch to get
     * @param {module:api/RepositoryApi~repoGetBranchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Branch}
     */
    repoGetBranch(owner, repo, branch, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetBranch");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetBranch");
      }
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling repoGetBranch");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'branch': branch
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Branch;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/branches/{branch}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetBranchProtection operation.
     * @callback module:api/RepositoryApi~repoGetBranchProtectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BranchProtection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific branch protection for the repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} name name of protected branch
     * @param {module:api/RepositoryApi~repoGetBranchProtectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BranchProtection}
     */
    repoGetBranchProtection(owner, repo, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetBranchProtection");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetBranchProtection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling repoGetBranchProtection");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = BranchProtection;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/branch_protections/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetByID operation.
     * @callback module:api/RepositoryApi~repoGetByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository by id
     * @param {Number} id id of the repo to get
     * @param {module:api/RepositoryApi~repoGetByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Repository}
     */
    repoGetByID(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoGetByID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Repository;
      return this.apiClient.callApi(
        '/repositories/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetCombinedStatusByRef operation.
     * @callback module:api/RepositoryApi~repoGetCombinedStatusByRefCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CombinedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a commit's combined status, by branch/tag/commit reference
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} ref name of branch/tag/commit
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoGetCombinedStatusByRefCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CombinedStatus}
     */
    repoGetCombinedStatusByRef(owner, repo, ref, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetCombinedStatusByRef");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetCombinedStatusByRef");
      }
      // verify the required parameter 'ref' is set
      if (ref === undefined || ref === null) {
        throw new Error("Missing the required parameter 'ref' when calling repoGetCombinedStatusByRef");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'ref': ref
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = CombinedStatus;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/commits/{ref}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetContents operation.
     * @callback module:api/RepositoryApi~repoGetContentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} filepath path of the dir, file, symlink or submodule in the repo
     * @param {Object} opts Optional parameters
     * @param {String} [ref] The name of the commit/branch/tag. Default the repository’s default branch (usually master)
     * @param {module:api/RepositoryApi~repoGetContentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentsResponse}
     */
    repoGetContents(owner, repo, filepath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetContents");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetContents");
      }
      // verify the required parameter 'filepath' is set
      if (filepath === undefined || filepath === null) {
        throw new Error("Missing the required parameter 'filepath' when calling repoGetContents");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'filepath': filepath
      };
      let queryParams = {
        'ref': opts['ref']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = ContentsResponse;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/contents/{filepath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetContentsList operation.
     * @callback module:api/RepositoryApi~repoGetContentsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContentsResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the metadata of all the entries of the root dir
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {String} [ref] The name of the commit/branch/tag. Default the repository’s default branch (usually master)
     * @param {module:api/RepositoryApi~repoGetContentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContentsResponse>}
     */
    repoGetContentsList(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetContentsList");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetContentsList");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'ref': opts['ref']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [ContentsResponse];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/contents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetEditorConfig operation.
     * @callback module:api/RepositoryApi~repoGetEditorConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the EditorConfig definitions of a file in a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} filepath filepath of file to get
     * @param {Object} opts Optional parameters
     * @param {String} [ref] The name of the commit/branch/tag. Default the repository’s default branch (usually master)
     * @param {module:api/RepositoryApi~repoGetEditorConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoGetEditorConfig(owner, repo, filepath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetEditorConfig");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetEditorConfig");
      }
      // verify the required parameter 'filepath' is set
      if (filepath === undefined || filepath === null) {
        throw new Error("Missing the required parameter 'filepath' when calling repoGetEditorConfig");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'filepath': filepath
      };
      let queryParams = {
        'ref': opts['ref']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/editorconfig/{filepath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetGitHook operation.
     * @callback module:api/RepositoryApi~repoGetGitHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GitHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Git hook
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} id id of the hook to get
     * @param {module:api/RepositoryApi~repoGetGitHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GitHook}
     */
    repoGetGitHook(owner, repo, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetGitHook");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetGitHook");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoGetGitHook");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = GitHook;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/hooks/git/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetHook operation.
     * @callback module:api/RepositoryApi~repoGetHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a hook
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the hook to get
     * @param {module:api/RepositoryApi~repoGetHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hook}
     */
    repoGetHook(owner, repo, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetHook");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetHook");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoGetHook");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Hook;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/hooks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetIssueConfig operation.
     * @callback module:api/RepositoryApi~repoGetIssueConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the issue config for a repo
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/RepositoryApi~repoGetIssueConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueConfig}
     */
    repoGetIssueConfig(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetIssueConfig");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetIssueConfig");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = IssueConfig;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issue_config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetIssueTemplates operation.
     * @callback module:api/RepositoryApi~repoGetIssueTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IssueTemplate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available issue templates for a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/RepositoryApi~repoGetIssueTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IssueTemplate>}
     */
    repoGetIssueTemplates(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetIssueTemplates");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetIssueTemplates");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [IssueTemplate];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issue_templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetKey operation.
     * @callback module:api/RepositoryApi~repoGetKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeployKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository's key by id
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the key to get
     * @param {module:api/RepositoryApi~repoGetKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeployKey}
     */
    repoGetKey(owner, repo, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetKey");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetKey");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoGetKey");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = DeployKey;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/keys/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetLanguages operation.
     * @callback module:api/RepositoryApi~repoGetLanguagesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get languages and number of bytes of code written
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/RepositoryApi~repoGetLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    repoGetLanguages(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetLanguages");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetLanguages");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetLatestRelease operation.
     * @callback module:api/RepositoryApi~repoGetLatestReleaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Release} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the most recent non-prerelease, non-draft release of a repository, sorted by created_at
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/RepositoryApi~repoGetLatestReleaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Release}
     */
    repoGetLatestRelease(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetLatestRelease");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetLatestRelease");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Release;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/releases/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetNote operation.
     * @callback module:api/RepositoryApi~repoGetNoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a note corresponding to a single commit from a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} sha a git ref or commit sha
     * @param {module:api/RepositoryApi~repoGetNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    repoGetNote(owner, repo, sha, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetNote");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetNote");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling repoGetNote");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'sha': sha
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/git/notes/{sha}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetPullRequest operation.
     * @callback module:api/RepositoryApi~repoGetPullRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pull request
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request to get
     * @param {module:api/RepositoryApi~repoGetPullRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequest}
     */
    repoGetPullRequest(owner, repo, index, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetPullRequest");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetPullRequest");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoGetPullRequest");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = PullRequest;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetPullRequestCommits operation.
     * @callback module:api/RepositoryApi~repoGetPullRequestCommitsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Commit>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get commits for a pull request
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request to get
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoGetPullRequestCommitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Commit>}
     */
    repoGetPullRequestCommits(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetPullRequestCommits");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetPullRequestCommits");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoGetPullRequestCommits");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Commit];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}/commits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetPullRequestFiles operation.
     * @callback module:api/RepositoryApi~repoGetPullRequestFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChangedFile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get changed files for a pull request
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request to get
     * @param {Object} opts Optional parameters
     * @param {String} [skipTo] skip to given file
     * @param {module:model/String} [whitespace] whitespace behavior
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoGetPullRequestFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChangedFile>}
     */
    repoGetPullRequestFiles(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetPullRequestFiles");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetPullRequestFiles");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoGetPullRequestFiles");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
        'skip-to': opts['skipTo'],
        'whitespace': opts['whitespace'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [ChangedFile];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetPullReview operation.
     * @callback module:api/RepositoryApi~repoGetPullReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific review for a pull request
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request
     * @param {Number} id id of the review
     * @param {module:api/RepositoryApi~repoGetPullReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullReview}
     */
    repoGetPullReview(owner, repo, index, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetPullReview");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetPullReview");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoGetPullReview");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoGetPullReview");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = PullReview;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetPullReviewComments operation.
     * @callback module:api/RepositoryApi~repoGetPullReviewCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PullReviewComment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific review for a pull request
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request
     * @param {Number} id id of the review
     * @param {module:api/RepositoryApi~repoGetPullReviewCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PullReviewComment>}
     */
    repoGetPullReviewComments(owner, repo, index, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetPullReviewComments");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetPullReviewComments");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoGetPullReviewComments");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoGetPullReviewComments");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [PullReviewComment];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetPushMirrorByRemoteName operation.
     * @callback module:api/RepositoryApi~repoGetPushMirrorByRemoteNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PushMirror} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get push mirror of the repository by remoteName
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} name remote name of push mirror
     * @param {module:api/RepositoryApi~repoGetPushMirrorByRemoteNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PushMirror}
     */
    repoGetPushMirrorByRemoteName(owner, repo, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetPushMirrorByRemoteName");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetPushMirrorByRemoteName");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling repoGetPushMirrorByRemoteName");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = PushMirror;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/push_mirrors/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetRawFile operation.
     * @callback module:api/RepositoryApi~repoGetRawFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a file from a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} filepath filepath of the file to get
     * @param {Object} opts Optional parameters
     * @param {String} [ref] The name of the commit/branch/tag. Default the repository’s default branch (usually master)
     * @param {module:api/RepositoryApi~repoGetRawFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoGetRawFile(owner, repo, filepath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetRawFile");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetRawFile");
      }
      // verify the required parameter 'filepath' is set
      if (filepath === undefined || filepath === null) {
        throw new Error("Missing the required parameter 'filepath' when calling repoGetRawFile");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'filepath': filepath
      };
      let queryParams = {
        'ref': opts['ref']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/raw/{filepath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetRawFileOrLFS operation.
     * @callback module:api/RepositoryApi~repoGetRawFileOrLFSCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a file or it's LFS object from a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} filepath filepath of the file to get
     * @param {Object} opts Optional parameters
     * @param {String} [ref] The name of the commit/branch/tag. Default the repository’s default branch (usually master)
     * @param {module:api/RepositoryApi~repoGetRawFileOrLFSCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoGetRawFileOrLFS(owner, repo, filepath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetRawFileOrLFS");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetRawFileOrLFS");
      }
      // verify the required parameter 'filepath' is set
      if (filepath === undefined || filepath === null) {
        throw new Error("Missing the required parameter 'filepath' when calling repoGetRawFileOrLFS");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'filepath': filepath
      };
      let queryParams = {
        'ref': opts['ref']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/media/{filepath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetRelease operation.
     * @callback module:api/RepositoryApi~repoGetReleaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Release} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a release
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the release to get
     * @param {module:api/RepositoryApi~repoGetReleaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Release}
     */
    repoGetRelease(owner, repo, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetRelease");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetRelease");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoGetRelease");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Release;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/releases/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetReleaseAttachment operation.
     * @callback module:api/RepositoryApi~repoGetReleaseAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a release attachment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the release
     * @param {Number} attachmentId id of the attachment to get
     * @param {module:api/RepositoryApi~repoGetReleaseAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    repoGetReleaseAttachment(owner, repo, id, attachmentId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetReleaseAttachment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetReleaseAttachment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoGetReleaseAttachment");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling repoGetReleaseAttachment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetReleaseByTag operation.
     * @callback module:api/RepositoryApi~repoGetReleaseByTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Release} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a release by tag name
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} tag tag name of the release to get
     * @param {module:api/RepositoryApi~repoGetReleaseByTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Release}
     */
    repoGetReleaseByTag(owner, repo, tag, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetReleaseByTag");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetReleaseByTag");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling repoGetReleaseByTag");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Release;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/releases/tags/{tag}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetRepoPermissions operation.
     * @callback module:api/RepositoryApi~repoGetRepoPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoCollaboratorPermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get repository permissions for a user
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} collaborator username of the collaborator
     * @param {module:api/RepositoryApi~repoGetRepoPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoCollaboratorPermission}
     */
    repoGetRepoPermissions(owner, repo, collaborator, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetRepoPermissions");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetRepoPermissions");
      }
      // verify the required parameter 'collaborator' is set
      if (collaborator === undefined || collaborator === null) {
        throw new Error("Missing the required parameter 'collaborator' when calling repoGetRepoPermissions");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'collaborator': collaborator
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = RepoCollaboratorPermission;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/collaborators/{collaborator}/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetReviewers operation.
     * @callback module:api/RepositoryApi~repoGetReviewersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all users that can be requested to review in this repo
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/RepositoryApi~repoGetReviewersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    repoGetReviewers(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetReviewers");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetReviewers");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/reviewers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetSingleCommit operation.
     * @callback module:api/RepositoryApi~repoGetSingleCommitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Commit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single commit from a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} sha a git ref or commit sha
     * @param {module:api/RepositoryApi~repoGetSingleCommitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Commit}
     */
    repoGetSingleCommit(owner, repo, sha, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetSingleCommit");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetSingleCommit");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling repoGetSingleCommit");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'sha': sha
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Commit;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/git/commits/{sha}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetTag operation.
     * @callback module:api/RepositoryApi~repoGetTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tag of a repository by tag name
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} tag name of tag
     * @param {module:api/RepositoryApi~repoGetTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    repoGetTag(owner, repo, tag, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetTag");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetTag");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling repoGetTag");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/tags/{tag}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetWikiPage operation.
     * @callback module:api/RepositoryApi~repoGetWikiPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WikiPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a wiki page
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} pageName name of the page
     * @param {module:api/RepositoryApi~repoGetWikiPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WikiPage}
     */
    repoGetWikiPage(owner, repo, pageName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetWikiPage");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetWikiPage");
      }
      // verify the required parameter 'pageName' is set
      if (pageName === undefined || pageName === null) {
        throw new Error("Missing the required parameter 'pageName' when calling repoGetWikiPage");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pageName': pageName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = WikiPage;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/wiki/page/{pageName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetWikiPageRevisions operation.
     * @callback module:api/RepositoryApi~repoGetWikiPageRevisionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WikiCommitList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get revisions of a wiki page
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} pageName name of the page
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {module:api/RepositoryApi~repoGetWikiPageRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WikiCommitList}
     */
    repoGetWikiPageRevisions(owner, repo, pageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetWikiPageRevisions");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetWikiPageRevisions");
      }
      // verify the required parameter 'pageName' is set
      if (pageName === undefined || pageName === null) {
        throw new Error("Missing the required parameter 'pageName' when calling repoGetWikiPageRevisions");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pageName': pageName
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = WikiCommitList;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/wiki/revisions/{pageName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoGetWikiPages operation.
     * @callback module:api/RepositoryApi~repoGetWikiPagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WikiPageMetaData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all wiki pages
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoGetWikiPagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WikiPageMetaData>}
     */
    repoGetWikiPages(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoGetWikiPages");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoGetWikiPages");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [WikiPageMetaData];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/wiki/pages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListActivityFeeds operation.
     * @callback module:api/RepositoryApi~repoListActivityFeedsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Activity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a repository's activity feeds
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Date} [date] the date of the activities to be found
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoListActivityFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Activity>}
     */
    repoListActivityFeeds(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListActivityFeeds");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListActivityFeeds");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'date': opts['date'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Activity];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/activities/feeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListAllGitRefs operation.
     * @callback module:api/RepositoryApi~repoListAllGitRefsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reference>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specified ref or filtered repository's refs
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/RepositoryApi~repoListAllGitRefsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reference>}
     */
    repoListAllGitRefs(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListAllGitRefs");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListAllGitRefs");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Reference];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/git/refs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListBranchProtection operation.
     * @callback module:api/RepositoryApi~repoListBranchProtectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BranchProtection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List branch protections for a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/RepositoryApi~repoListBranchProtectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BranchProtection>}
     */
    repoListBranchProtection(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListBranchProtection");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListBranchProtection");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [BranchProtection];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/branch_protections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListBranches operation.
     * @callback module:api/RepositoryApi~repoListBranchesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Branch>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a repository's branches
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoListBranchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Branch>}
     */
    repoListBranches(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListBranches");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListBranches");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Branch];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/branches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListCollaborators operation.
     * @callback module:api/RepositoryApi~repoListCollaboratorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a repository's collaborators
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoListCollaboratorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    repoListCollaborators(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListCollaborators");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListCollaborators");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/collaborators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListGitHooks operation.
     * @callback module:api/RepositoryApi~repoListGitHooksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GitHook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the Git hooks in a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/RepositoryApi~repoListGitHooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GitHook>}
     */
    repoListGitHooks(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListGitHooks");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListGitHooks");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [GitHook];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/hooks/git', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListGitRefs operation.
     * @callback module:api/RepositoryApi~repoListGitRefsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reference>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specified ref or filtered repository's refs
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} ref part or full name of the ref
     * @param {module:api/RepositoryApi~repoListGitRefsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reference>}
     */
    repoListGitRefs(owner, repo, ref, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListGitRefs");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListGitRefs");
      }
      // verify the required parameter 'ref' is set
      if (ref === undefined || ref === null) {
        throw new Error("Missing the required parameter 'ref' when calling repoListGitRefs");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'ref': ref
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Reference];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/git/refs/{ref}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListHooks operation.
     * @callback module:api/RepositoryApi~repoListHooksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Hook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the hooks in a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoListHooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Hook>}
     */
    repoListHooks(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListHooks");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListHooks");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Hook];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/hooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListKeys operation.
     * @callback module:api/RepositoryApi~repoListKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeployKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a repository's keys
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Number} [keyId] the key_id to search for
     * @param {String} [fingerprint] fingerprint of the key
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoListKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeployKey>}
     */
    repoListKeys(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListKeys");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListKeys");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'key_id': opts['keyId'],
        'fingerprint': opts['fingerprint'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [DeployKey];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListPullRequests operation.
     * @callback module:api/RepositoryApi~repoListPullRequestsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PullRequest>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a repo's pull requests
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state] State of pull request: open or closed (optional)
     * @param {module:model/String} [sort] Type of sort
     * @param {Number} [milestone] ID of the milestone
     * @param {Array.<Number>} [labels] Label IDs
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoListPullRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PullRequest>}
     */
    repoListPullRequests(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListPullRequests");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListPullRequests");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'state': opts['state'],
        'sort': opts['sort'],
        'milestone': opts['milestone'],
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [PullRequest];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListPullReviews operation.
     * @callback module:api/RepositoryApi~repoListPullReviewsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PullReview>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all reviews for a pull request
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoListPullReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PullReview>}
     */
    repoListPullReviews(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListPullReviews");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListPullReviews");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoListPullReviews");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [PullReview];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListPushMirrors operation.
     * @callback module:api/RepositoryApi~repoListPushMirrorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PushMirror>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all push mirrors of the repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoListPushMirrorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PushMirror>}
     */
    repoListPushMirrors(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListPushMirrors");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListPushMirrors");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [PushMirror];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/push_mirrors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListReleaseAttachments operation.
     * @callback module:api/RepositoryApi~repoListReleaseAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Attachment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List release's attachments
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the release
     * @param {module:api/RepositoryApi~repoListReleaseAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Attachment>}
     */
    repoListReleaseAttachments(owner, repo, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListReleaseAttachments");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListReleaseAttachments");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoListReleaseAttachments");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Attachment];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/releases/{id}/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListReleases operation.
     * @callback module:api/RepositoryApi~repoListReleasesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Release>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a repo's releases
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Boolean} [draft] filter (exclude / include) drafts, if you dont have repo write access none will show
     * @param {Boolean} [preRelease] filter (exclude / include) pre-releases
     * @param {Number} [perPage] page size of results, deprecated - use limit
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoListReleasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Release>}
     */
    repoListReleases(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListReleases");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListReleases");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'draft': opts['draft'],
        'pre-release': opts['preRelease'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Release];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/releases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListStargazers operation.
     * @callback module:api/RepositoryApi~repoListStargazersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a repo's stargazers
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoListStargazersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    repoListStargazers(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListStargazers");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListStargazers");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/stargazers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListStatuses operation.
     * @callback module:api/RepositoryApi~repoListStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommitStatus>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a commit's statuses
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} sha sha of the commit
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort] type of sort
     * @param {module:model/String} [state] type of state
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoListStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommitStatus>}
     */
    repoListStatuses(owner, repo, sha, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListStatuses");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListStatuses");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling repoListStatuses");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'sha': sha
      };
      let queryParams = {
        'sort': opts['sort'],
        'state': opts['state'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [CommitStatus];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/statuses/{sha}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListStatusesByRef operation.
     * @callback module:api/RepositoryApi~repoListStatusesByRefCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommitStatus>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a commit's statuses, by branch/tag/commit reference
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} ref name of branch/tag/commit
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort] type of sort
     * @param {module:model/String} [state] type of state
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoListStatusesByRefCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommitStatus>}
     */
    repoListStatusesByRef(owner, repo, ref, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListStatusesByRef");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListStatusesByRef");
      }
      // verify the required parameter 'ref' is set
      if (ref === undefined || ref === null) {
        throw new Error("Missing the required parameter 'ref' when calling repoListStatusesByRef");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'ref': ref
      };
      let queryParams = {
        'sort': opts['sort'],
        'state': opts['state'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [CommitStatus];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/commits/{ref}/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListSubscribers operation.
     * @callback module:api/RepositoryApi~repoListSubscribersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a repo's watchers
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoListSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    repoListSubscribers(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListSubscribers");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListSubscribers");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/subscribers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListTags operation.
     * @callback module:api/RepositoryApi~repoListTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a repository's tags
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results, default maximum page size is 50
     * @param {module:api/RepositoryApi~repoListTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Tag>}
     */
    repoListTags(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListTags");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListTags");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Tag];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListTeams operation.
     * @callback module:api/RepositoryApi~repoListTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a repository's teams
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/RepositoryApi~repoListTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    repoListTeams(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListTeams");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListTeams");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoListTopics operation.
     * @callback module:api/RepositoryApi~repoListTopicsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicName} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of topics that a repository has
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoListTopicsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicName}
     */
    repoListTopics(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoListTopics");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoListTopics");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = TopicName;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/topics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoMergePullRequest operation.
     * @callback module:api/RepositoryApi~repoMergePullRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Merge a pull request
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request to merge
     * @param {Object} opts Optional parameters
     * @param {module:model/MergePullRequestOption} [mergePullRequestOption] 
     * @param {module:api/RepositoryApi~repoMergePullRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoMergePullRequest(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['mergePullRequestOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoMergePullRequest");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoMergePullRequest");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoMergePullRequest");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}/merge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoMigrate operation.
     * @callback module:api/RepositoryApi~repoMigrateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Migrate a remote git repository
     * @param {Object} opts Optional parameters
     * @param {module:model/MigrateRepoOptions} [migrateRepoOptions] 
     * @param {module:api/RepositoryApi~repoMigrateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Repository}
     */
    repoMigrate(opts, callback) {
      opts = opts || {};
      let postBody = opts['migrateRepoOptions'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Repository;
      return this.apiClient.callApi(
        '/repos/migrate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoMirrorSync operation.
     * @callback module:api/RepositoryApi~repoMirrorSyncCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sync a mirrored repository
     * @param {String} owner owner of the repo to sync
     * @param {String} repo name of the repo to sync
     * @param {module:api/RepositoryApi~repoMirrorSyncCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoMirrorSync(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoMirrorSync");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoMirrorSync");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/mirror-sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoPullRequestIsMerged operation.
     * @callback module:api/RepositoryApi~repoPullRequestIsMergedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a pull request has been merged
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request
     * @param {module:api/RepositoryApi~repoPullRequestIsMergedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoPullRequestIsMerged(owner, repo, index, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoPullRequestIsMerged");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoPullRequestIsMerged");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoPullRequestIsMerged");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}/merge', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoPushMirrorSync operation.
     * @callback module:api/RepositoryApi~repoPushMirrorSyncCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sync all push mirrored repository
     * @param {String} owner owner of the repo to sync
     * @param {String} repo name of the repo to sync
     * @param {module:api/RepositoryApi~repoPushMirrorSyncCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoPushMirrorSync(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoPushMirrorSync");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoPushMirrorSync");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/push_mirrors-sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoSearch operation.
     * @callback module:api/RepositoryApi~repoSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for repositories
     * @param {Object} opts Optional parameters
     * @param {String} [q] keyword
     * @param {Boolean} [topic] Limit search to repositories with keyword as topic
     * @param {Boolean} [includeDesc] include search of keyword within repository description
     * @param {Number} [uid] search only for repos that the user with the given id owns or contributes to
     * @param {Number} [priorityOwnerId] repo owner to prioritize in the results
     * @param {Number} [teamId] search only for repos that belong to the given team id
     * @param {Number} [starredBy] search only for repos that the user with the given id has starred
     * @param {Boolean} [_private] include private repositories this user has access to (defaults to true)
     * @param {Boolean} [isPrivate] show only pubic, private or all repositories (defaults to all)
     * @param {Boolean} [template] include template repositories this user has access to (defaults to true)
     * @param {Boolean} [archived] show only archived, non-archived or all repositories (defaults to all)
     * @param {String} [mode] type of repository to search for. Supported values are \"fork\", \"source\", \"mirror\" and \"collaborative\"
     * @param {Boolean} [exclusive] if `uid` is given, search only for repos that the user owns
     * @param {String} [sort] sort repos by attribute. Supported values are \"alpha\", \"created\", \"updated\", \"size\", and \"id\". Default is \"alpha\"
     * @param {String} [order] sort order, either \"asc\" (ascending) or \"desc\" (descending). Default is \"asc\", ignored if \"sort\" is not specified.
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResults}
     */
    repoSearch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'topic': opts['topic'],
        'includeDesc': opts['includeDesc'],
        'uid': opts['uid'],
        'priority_owner_id': opts['priorityOwnerId'],
        'team_id': opts['teamId'],
        'starredBy': opts['starredBy'],
        'private': opts['_private'],
        'is_private': opts['isPrivate'],
        'template': opts['template'],
        'archived': opts['archived'],
        'mode': opts['mode'],
        'exclusive': opts['exclusive'],
        'sort': opts['sort'],
        'order': opts['order'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = SearchResults;
      return this.apiClient.callApi(
        '/repos/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoSigningKey operation.
     * @callback module:api/RepositoryApi~repoSigningKeyCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get signing-key.gpg for given repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/RepositoryApi~repoSigningKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    repoSigningKey(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoSigningKey");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoSigningKey");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/signing-key.gpg', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoSubmitPullReview operation.
     * @callback module:api/RepositoryApi~repoSubmitPullReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a pending review to an pull request
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request
     * @param {Number} id id of the review
     * @param {module:model/SubmitPullReviewOptions} submitPullReviewOptions 
     * @param {module:api/RepositoryApi~repoSubmitPullReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullReview}
     */
    repoSubmitPullReview(owner, repo, index, id, submitPullReviewOptions, callback) {
      let postBody = submitPullReviewOptions;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoSubmitPullReview");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoSubmitPullReview");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoSubmitPullReview");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoSubmitPullReview");
      }
      // verify the required parameter 'submitPullReviewOptions' is set
      if (submitPullReviewOptions === undefined || submitPullReviewOptions === null) {
        throw new Error("Missing the required parameter 'submitPullReviewOptions' when calling repoSubmitPullReview");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = PullReview;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoTestHook operation.
     * @callback module:api/RepositoryApi~repoTestHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test a push webhook
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the hook to test
     * @param {Object} opts Optional parameters
     * @param {String} [ref] The name of the commit/branch/tag, indicates which commit will be loaded to the webhook payload.
     * @param {module:api/RepositoryApi~repoTestHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoTestHook(owner, repo, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoTestHook");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoTestHook");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoTestHook");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
        'ref': opts['ref']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/hooks/{id}/tests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoTrackedTimes operation.
     * @callback module:api/RepositoryApi~repoTrackedTimesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackedTime>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a repo's tracked times
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {String} [user] optional filter by user (available for issue managers)
     * @param {Date} [since] Only show times updated after the given time. This is a timestamp in RFC 3339 format
     * @param {Date} [before] Only show times updated before the given time. This is a timestamp in RFC 3339 format
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~repoTrackedTimesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrackedTime>}
     */
    repoTrackedTimes(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoTrackedTimes");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoTrackedTimes");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'user': opts['user'],
        'since': opts['since'],
        'before': opts['before'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [TrackedTime];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/times', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoTransfer operation.
     * @callback module:api/RepositoryApi~repoTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer a repo ownership
     * @param {String} owner owner of the repo to transfer
     * @param {String} repo name of the repo to transfer
     * @param {module:model/TransferRepoOption} transferRepoOption Transfer Options
     * @param {module:api/RepositoryApi~repoTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Repository}
     */
    repoTransfer(owner, repo, transferRepoOption, callback) {
      let postBody = transferRepoOption;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoTransfer");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoTransfer");
      }
      // verify the required parameter 'transferRepoOption' is set
      if (transferRepoOption === undefined || transferRepoOption === null) {
        throw new Error("Missing the required parameter 'transferRepoOption' when calling repoTransfer");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Repository;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoUnDismissPullReview operation.
     * @callback module:api/RepositoryApi~repoUnDismissPullReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel to dismiss a review for a pull request
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request
     * @param {Number} id id of the review
     * @param {module:api/RepositoryApi~repoUnDismissPullReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullReview}
     */
    repoUnDismissPullReview(owner, repo, index, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoUnDismissPullReview");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoUnDismissPullReview");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoUnDismissPullReview");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repoUnDismissPullReview");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = PullReview;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/undismissals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoUpdateFile operation.
     * @callback module:api/RepositoryApi~repoUpdateFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a file in a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} filepath path of the file to update
     * @param {module:model/UpdateFileOptions} updateFileOptions 
     * @param {module:api/RepositoryApi~repoUpdateFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileResponse}
     */
    repoUpdateFile(owner, repo, filepath, updateFileOptions, callback) {
      let postBody = updateFileOptions;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoUpdateFile");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoUpdateFile");
      }
      // verify the required parameter 'filepath' is set
      if (filepath === undefined || filepath === null) {
        throw new Error("Missing the required parameter 'filepath' when calling repoUpdateFile");
      }
      // verify the required parameter 'updateFileOptions' is set
      if (updateFileOptions === undefined || updateFileOptions === null) {
        throw new Error("Missing the required parameter 'updateFileOptions' when calling repoUpdateFile");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'filepath': filepath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = FileResponse;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/contents/{filepath}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoUpdatePullRequest operation.
     * @callback module:api/RepositoryApi~repoUpdatePullRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Merge PR's baseBranch into headBranch
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the pull request to get
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [style] how to update pull request
     * @param {module:api/RepositoryApi~repoUpdatePullRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoUpdatePullRequest(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoUpdatePullRequest");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoUpdatePullRequest");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling repoUpdatePullRequest");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
        'style': opts['style']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{index}/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoUpdateTopics operation.
     * @callback module:api/RepositoryApi~repoUpdateTopicsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace list of topics for a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/RepoTopicOptions} [repoTopicOptions] 
     * @param {module:api/RepositoryApi~repoUpdateTopicsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repoUpdateTopics(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['repoTopicOptions'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoUpdateTopics");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoUpdateTopics");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/topics', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repoValidateIssueConfig operation.
     * @callback module:api/RepositoryApi~repoValidateIssueConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueConfigValidation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the validation information for a issue config
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/RepositoryApi~repoValidateIssueConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueConfigValidation}
     */
    repoValidateIssueConfig(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling repoValidateIssueConfig");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling repoValidateIssueConfig");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = IssueConfigValidation;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issue_config/validate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topicSearch operation.
     * @callback module:api/RepositoryApi~topicSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TopicResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search topics via keyword
     * @param {String} q keywords to search
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/RepositoryApi~topicSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TopicResponse>}
     */
    topicSearch(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling topicSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [TopicResponse];
      return this.apiClient.callApi(
        '/topics/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentCheckSubscription operation.
     * @callback module:api/RepositoryApi~userCurrentCheckSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if the current user is watching a repo
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/RepositoryApi~userCurrentCheckSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchInfo}
     */
    userCurrentCheckSubscription(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling userCurrentCheckSubscription");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling userCurrentCheckSubscription");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = WatchInfo;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/subscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentDeleteSubscription operation.
     * @callback module:api/RepositoryApi~userCurrentDeleteSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unwatch a repo
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/RepositoryApi~userCurrentDeleteSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCurrentDeleteSubscription(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling userCurrentDeleteSubscription");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling userCurrentDeleteSubscription");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/subscription', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrentPutSubscription operation.
     * @callback module:api/RepositoryApi~userCurrentPutSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Watch a repo
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/RepositoryApi~userCurrentPutSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchInfo}
     */
    userCurrentPutSubscription(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling userCurrentPutSubscription");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling userCurrentPutSubscription");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = WatchInfo;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/subscription', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userTrackedTimes operation.
     * @callback module:api/RepositoryApi~userTrackedTimesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackedTime>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a user's tracked times in a repo
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} user username of user
     * @param {module:api/RepositoryApi~userTrackedTimesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrackedTime>}
     */
    userTrackedTimes(owner, repo, user, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling userTrackedTimes");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling userTrackedTimes");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling userTrackedTimes");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [TrackedTime];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/times/{user}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
