/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddTimeOption from '../model/AddTimeOption';
import Attachment from '../model/Attachment';
import Comment from '../model/Comment';
import CreateIssueCommentOption from '../model/CreateIssueCommentOption';
import CreateIssueOption from '../model/CreateIssueOption';
import CreateLabelOption from '../model/CreateLabelOption';
import CreateMilestoneOption from '../model/CreateMilestoneOption';
import EditAttachmentOptions from '../model/EditAttachmentOptions';
import EditDeadlineOption from '../model/EditDeadlineOption';
import EditIssueCommentOption from '../model/EditIssueCommentOption';
import EditIssueOption from '../model/EditIssueOption';
import EditLabelOption from '../model/EditLabelOption';
import EditMilestoneOption from '../model/EditMilestoneOption';
import EditReactionOption from '../model/EditReactionOption';
import Issue from '../model/Issue';
import IssueDeadline from '../model/IssueDeadline';
import IssueLabelsOption from '../model/IssueLabelsOption';
import IssueMeta from '../model/IssueMeta';
import Label from '../model/Label';
import Milestone from '../model/Milestone';
import Reaction from '../model/Reaction';
import TimelineComment from '../model/TimelineComment';
import TrackedTime from '../model/TrackedTime';
import User from '../model/User';
import WatchInfo from '../model/WatchInfo';

/**
* Issue service.
* @module api/IssueApi
* @version 1.20.0+dev-539-g5e389228f
*/
export default class IssueApi {

    /**
    * Constructs a new IssueApi. 
    * @alias module:api/IssueApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the issueAddLabel operation.
     * @callback module:api/IssueApi~issueAddLabelCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Label>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a label to an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {module:model/IssueLabelsOption} [issueLabelsOption] 
     * @param {module:api/IssueApi~issueAddLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Label>}
     */
    issueAddLabel(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['issueLabelsOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueAddLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueAddLabel");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueAddLabel");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Label];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueAddSubscription operation.
     * @callback module:api/IssueApi~issueAddSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe user to issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {String} user user to subscribe
     * @param {module:api/IssueApi~issueAddSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueAddSubscription(owner, repo, index, user, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueAddSubscription");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueAddSubscription");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueAddSubscription");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling issueAddSubscription");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index,
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueAddTime operation.
     * @callback module:api/IssueApi~issueAddTimeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackedTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add tracked time to a issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {module:model/AddTimeOption} [addTimeOption] 
     * @param {module:api/IssueApi~issueAddTimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackedTime}
     */
    issueAddTime(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['addTimeOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueAddTime");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueAddTime");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueAddTime");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = TrackedTime;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/times', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueCheckSubscription operation.
     * @callback module:api/IssueApi~issueCheckSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if user is subscribed to an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {module:api/IssueApi~issueCheckSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchInfo}
     */
    issueCheckSubscription(owner, repo, index, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueCheckSubscription");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueCheckSubscription");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueCheckSubscription");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = WatchInfo;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/subscriptions/check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueClearLabels operation.
     * @callback module:api/IssueApi~issueClearLabelsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove all labels from an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {module:api/IssueApi~issueClearLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueClearLabels(owner, repo, index, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueClearLabels");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueClearLabels");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueClearLabels");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/labels', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueCreateComment operation.
     * @callback module:api/IssueApi~issueCreateCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a comment to an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateIssueCommentOption} [createIssueCommentOption] 
     * @param {module:api/IssueApi~issueCreateCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    issueCreateComment(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['createIssueCommentOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueCreateComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueCreateComment");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueCreateComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueCreateIssue operation.
     * @callback module:api/IssueApi~issueCreateIssueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an issue. If using deadline only the date will be taken into account, and time of day ignored.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateIssueOption} [createIssueOption] 
     * @param {module:api/IssueApi~issueCreateIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    issueCreateIssue(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['createIssueOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueCreateIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueCreateIssue");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueCreateIssueAttachment operation.
     * @callback module:api/IssueApi~issueCreateIssueAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an issue attachment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {File} attachment attachment to upload
     * @param {Object} opts Optional parameters
     * @param {String} [name] name of the attachment
     * @param {module:api/IssueApi~issueCreateIssueAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    issueCreateIssueAttachment(owner, repo, index, attachment, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueCreateIssueAttachment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueCreateIssueAttachment");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueCreateIssueAttachment");
      }
      // verify the required parameter 'attachment' is set
      if (attachment === undefined || attachment === null) {
        throw new Error("Missing the required parameter 'attachment' when calling issueCreateIssueAttachment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
        'attachment': attachment
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/assets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueCreateIssueBlocking operation.
     * @callback module:api/IssueApi~issueCreateIssueBlockingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Block the issue given in the body by the issue in path
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {module:model/IssueMeta} [issueMeta] 
     * @param {module:api/IssueApi~issueCreateIssueBlockingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    issueCreateIssueBlocking(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['issueMeta'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueCreateIssueBlocking");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueCreateIssueBlocking");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueCreateIssueBlocking");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/blocks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueCreateIssueCommentAttachment operation.
     * @callback module:api/IssueApi~issueCreateIssueCommentAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a comment attachment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the comment
     * @param {File} attachment attachment to upload
     * @param {Object} opts Optional parameters
     * @param {String} [name] name of the attachment
     * @param {module:api/IssueApi~issueCreateIssueCommentAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    issueCreateIssueCommentAttachment(owner, repo, id, attachment, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueCreateIssueCommentAttachment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueCreateIssueCommentAttachment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueCreateIssueCommentAttachment");
      }
      // verify the required parameter 'attachment' is set
      if (attachment === undefined || attachment === null) {
        throw new Error("Missing the required parameter 'attachment' when calling issueCreateIssueCommentAttachment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
        'attachment': attachment
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{id}/assets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueCreateIssueDependencies operation.
     * @callback module:api/IssueApi~issueCreateIssueDependenciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make the issue in the url depend on the issue in the form.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {module:model/IssueMeta} [issueMeta] 
     * @param {module:api/IssueApi~issueCreateIssueDependenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    issueCreateIssueDependencies(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['issueMeta'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueCreateIssueDependencies");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueCreateIssueDependencies");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueCreateIssueDependencies");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/dependencies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueCreateLabel operation.
     * @callback module:api/IssueApi~issueCreateLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a label
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateLabelOption} [createLabelOption] 
     * @param {module:api/IssueApi~issueCreateLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    issueCreateLabel(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['createLabelOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueCreateLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueCreateLabel");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Label;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueCreateMilestone operation.
     * @callback module:api/IssueApi~issueCreateMilestoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Milestone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a milestone
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMilestoneOption} [createMilestoneOption] 
     * @param {module:api/IssueApi~issueCreateMilestoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Milestone}
     */
    issueCreateMilestone(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['createMilestoneOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueCreateMilestone");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueCreateMilestone");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Milestone;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/milestones', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueDelete operation.
     * @callback module:api/IssueApi~issueDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of issue to delete
     * @param {module:api/IssueApi~issueDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDelete(owner, repo, index, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDelete");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDelete");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueDelete");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueDeleteComment operation.
     * @callback module:api/IssueApi~issueDeleteCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a comment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of comment to delete
     * @param {module:api/IssueApi~issueDeleteCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteComment(owner, repo, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteComment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueDeleteComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueDeleteCommentDeprecated operation.
     * @callback module:api/IssueApi~issueDeleteCommentDeprecatedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a comment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index this parameter is ignored
     * @param {Number} id id of comment to delete
     * @param {module:api/IssueApi~issueDeleteCommentDeprecatedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteCommentDeprecated(owner, repo, index, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteCommentDeprecated");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteCommentDeprecated");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueDeleteCommentDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueDeleteCommentDeprecated");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/comments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueDeleteCommentReaction operation.
     * @callback module:api/IssueApi~issueDeleteCommentReactionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a reaction from a comment of an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the comment to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditReactionOption} [editReactionOption] 
     * @param {module:api/IssueApi~issueDeleteCommentReactionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteCommentReaction(owner, repo, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['editReactionOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteCommentReaction");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteCommentReaction");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueDeleteCommentReaction");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{id}/reactions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueDeleteIssueAttachment operation.
     * @callback module:api/IssueApi~issueDeleteIssueAttachmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an issue attachment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Number} attachmentId id of the attachment to delete
     * @param {module:api/IssueApi~issueDeleteIssueAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteIssueAttachment(owner, repo, index, attachmentId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteIssueAttachment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteIssueAttachment");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueDeleteIssueAttachment");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling issueDeleteIssueAttachment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueDeleteIssueCommentAttachment operation.
     * @callback module:api/IssueApi~issueDeleteIssueCommentAttachmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a comment attachment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the comment
     * @param {Number} attachmentId id of the attachment to delete
     * @param {module:api/IssueApi~issueDeleteIssueCommentAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteIssueCommentAttachment(owner, repo, id, attachmentId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteIssueCommentAttachment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteIssueCommentAttachment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueDeleteIssueCommentAttachment");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling issueDeleteIssueCommentAttachment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueDeleteIssueReaction operation.
     * @callback module:api/IssueApi~issueDeleteIssueReactionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a reaction from an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {module:model/EditReactionOption} [editReactionOption] 
     * @param {module:api/IssueApi~issueDeleteIssueReactionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteIssueReaction(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['editReactionOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteIssueReaction");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteIssueReaction");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueDeleteIssueReaction");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/reactions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueDeleteLabel operation.
     * @callback module:api/IssueApi~issueDeleteLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a label
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the label to delete
     * @param {module:api/IssueApi~issueDeleteLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteLabel(owner, repo, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteLabel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueDeleteLabel");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/labels/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueDeleteMilestone operation.
     * @callback module:api/IssueApi~issueDeleteMilestoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a milestone
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} id the milestone to delete, identified by ID and if not available by name
     * @param {module:api/IssueApi~issueDeleteMilestoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteMilestone(owner, repo, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteMilestone");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteMilestone");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueDeleteMilestone");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/milestones/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueDeleteStopWatch operation.
     * @callback module:api/IssueApi~issueDeleteStopWatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an issue's existing stopwatch.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue to stop the stopwatch on
     * @param {module:api/IssueApi~issueDeleteStopWatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteStopWatch(owner, repo, index, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteStopWatch");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteStopWatch");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueDeleteStopWatch");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/stopwatch/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueDeleteSubscription operation.
     * @callback module:api/IssueApi~issueDeleteSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribe user from issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {String} user user witch unsubscribe
     * @param {module:api/IssueApi~issueDeleteSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteSubscription(owner, repo, index, user, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteSubscription");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteSubscription");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueDeleteSubscription");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling issueDeleteSubscription");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index,
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueDeleteTime operation.
     * @callback module:api/IssueApi~issueDeleteTimeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete specific tracked time
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Number} id id of time to delete
     * @param {module:api/IssueApi~issueDeleteTimeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteTime(owner, repo, index, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteTime");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteTime");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueDeleteTime");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueDeleteTime");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/times/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueEditComment operation.
     * @callback module:api/IssueApi~issueEditCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a comment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the comment to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditIssueCommentOption} [editIssueCommentOption] 
     * @param {module:api/IssueApi~issueEditCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    issueEditComment(owner, repo, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['editIssueCommentOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueEditComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueEditComment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueEditComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueEditCommentDeprecated operation.
     * @callback module:api/IssueApi~issueEditCommentDeprecatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a comment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index this parameter is ignored
     * @param {Number} id id of the comment to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditIssueCommentOption} [editIssueCommentOption] 
     * @param {module:api/IssueApi~issueEditCommentDeprecatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    issueEditCommentDeprecated(owner, repo, index, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['editIssueCommentOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueEditCommentDeprecated");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueEditCommentDeprecated");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueEditCommentDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueEditCommentDeprecated");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/comments/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueEditIssue operation.
     * @callback module:api/IssueApi~issueEditIssueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditIssueOption} [editIssueOption] 
     * @param {module:api/IssueApi~issueEditIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    issueEditIssue(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['editIssueOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueEditIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueEditIssue");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueEditIssue");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueEditIssueAttachment operation.
     * @callback module:api/IssueApi~issueEditIssueAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an issue attachment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Number} attachmentId id of the attachment to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditAttachmentOptions} [editAttachmentOptions] 
     * @param {module:api/IssueApi~issueEditIssueAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    issueEditIssueAttachment(owner, repo, index, attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['editAttachmentOptions'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueEditIssueAttachment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueEditIssueAttachment");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueEditIssueAttachment");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling issueEditIssueAttachment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueEditIssueCommentAttachment operation.
     * @callback module:api/IssueApi~issueEditIssueCommentAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a comment attachment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the comment
     * @param {Number} attachmentId id of the attachment to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditAttachmentOptions} [editAttachmentOptions] 
     * @param {module:api/IssueApi~issueEditIssueCommentAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    issueEditIssueCommentAttachment(owner, repo, id, attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['editAttachmentOptions'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueEditIssueCommentAttachment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueEditIssueCommentAttachment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueEditIssueCommentAttachment");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling issueEditIssueCommentAttachment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueEditIssueDeadline operation.
     * @callback module:api/IssueApi~issueEditIssueDeadlineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueDeadline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue to create or update a deadline on
     * @param {Object} opts Optional parameters
     * @param {module:model/EditDeadlineOption} [editDeadlineOption] 
     * @param {module:api/IssueApi~issueEditIssueDeadlineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueDeadline}
     */
    issueEditIssueDeadline(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['editDeadlineOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueEditIssueDeadline");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueEditIssueDeadline");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueEditIssueDeadline");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = IssueDeadline;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/deadline', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueEditLabel operation.
     * @callback module:api/IssueApi~issueEditLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a label
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the label to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditLabelOption} [editLabelOption] 
     * @param {module:api/IssueApi~issueEditLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    issueEditLabel(owner, repo, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['editLabelOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueEditLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueEditLabel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueEditLabel");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Label;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/labels/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueEditMilestone operation.
     * @callback module:api/IssueApi~issueEditMilestoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Milestone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a milestone
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} id the milestone to edit, identified by ID and if not available by name
     * @param {Object} opts Optional parameters
     * @param {module:model/EditMilestoneOption} [editMilestoneOption] 
     * @param {module:api/IssueApi~issueEditMilestoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Milestone}
     */
    issueEditMilestone(owner, repo, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['editMilestoneOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueEditMilestone");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueEditMilestone");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueEditMilestone");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Milestone;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/milestones/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueGetComment operation.
     * @callback module:api/IssueApi~issueGetCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a comment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the comment
     * @param {module:api/IssueApi~issueGetCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    issueGetComment(owner, repo, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetComment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueGetComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueGetCommentReactions operation.
     * @callback module:api/IssueApi~issueGetCommentReactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of reactions from a comment of an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the comment to edit
     * @param {module:api/IssueApi~issueGetCommentReactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    issueGetCommentReactions(owner, repo, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetCommentReactions");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetCommentReactions");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueGetCommentReactions");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{id}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueGetComments operation.
     * @callback module:api/IssueApi~issueGetCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all comments on an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {Date} [since] if provided, only comments updated since the specified time are returned.
     * @param {Date} [before] if provided, only comments updated before the provided time are returned.
     * @param {module:api/IssueApi~issueGetCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Comment>}
     */
    issueGetComments(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetComments");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetComments");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueGetComments");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
        'since': opts['since'],
        'before': opts['before']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Comment];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueGetCommentsAndTimeline operation.
     * @callback module:api/IssueApi~issueGetCommentsAndTimelineCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimelineComment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all comments and events on an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {Date} [since] if provided, only comments updated since the specified time are returned.
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {Date} [before] if provided, only comments updated before the provided time are returned.
     * @param {module:api/IssueApi~issueGetCommentsAndTimelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimelineComment>}
     */
    issueGetCommentsAndTimeline(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetCommentsAndTimeline");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetCommentsAndTimeline");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueGetCommentsAndTimeline");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
        'since': opts['since'],
        'page': opts['page'],
        'limit': opts['limit'],
        'before': opts['before']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [TimelineComment];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/timeline', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueGetIssue operation.
     * @callback module:api/IssueApi~issueGetIssueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue to get
     * @param {module:api/IssueApi~issueGetIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    issueGetIssue(owner, repo, index, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetIssue");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueGetIssue");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueGetIssueAttachment operation.
     * @callback module:api/IssueApi~issueGetIssueAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an issue attachment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Number} attachmentId id of the attachment to get
     * @param {module:api/IssueApi~issueGetIssueAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    issueGetIssueAttachment(owner, repo, index, attachmentId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetIssueAttachment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetIssueAttachment");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueGetIssueAttachment");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling issueGetIssueAttachment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueGetIssueCommentAttachment operation.
     * @callback module:api/IssueApi~issueGetIssueCommentAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a comment attachment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the comment
     * @param {Number} attachmentId id of the attachment to get
     * @param {module:api/IssueApi~issueGetIssueCommentAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    issueGetIssueCommentAttachment(owner, repo, id, attachmentId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetIssueCommentAttachment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetIssueCommentAttachment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueGetIssueCommentAttachment");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling issueGetIssueCommentAttachment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueGetIssueReactions operation.
     * @callback module:api/IssueApi~issueGetIssueReactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list reactions of an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/IssueApi~issueGetIssueReactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    issueGetIssueReactions(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetIssueReactions");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetIssueReactions");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueGetIssueReactions");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueGetLabel operation.
     * @callback module:api/IssueApi~issueGetLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single label
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the label to get
     * @param {module:api/IssueApi~issueGetLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    issueGetLabel(owner, repo, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetLabel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueGetLabel");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Label;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/labels/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueGetLabels operation.
     * @callback module:api/IssueApi~issueGetLabelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Label>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an issue's labels
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {module:api/IssueApi~issueGetLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Label>}
     */
    issueGetLabels(owner, repo, index, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetLabels");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetLabels");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueGetLabels");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Label];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueGetMilestone operation.
     * @callback module:api/IssueApi~issueGetMilestoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Milestone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a milestone
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} id the milestone to get, identified by ID and if not available by name
     * @param {module:api/IssueApi~issueGetMilestoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Milestone}
     */
    issueGetMilestone(owner, repo, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetMilestone");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetMilestone");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueGetMilestone");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Milestone;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/milestones/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueGetMilestonesList operation.
     * @callback module:api/IssueApi~issueGetMilestonesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Milestone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all of a repository's opened milestones
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {String} [state] Milestone state, Recognized values are open, closed and all. Defaults to \"open\"
     * @param {String} [name] filter by milestone name
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/IssueApi~issueGetMilestonesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Milestone>}
     */
    issueGetMilestonesList(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetMilestonesList");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetMilestonesList");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'state': opts['state'],
        'name': opts['name'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Milestone];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/milestones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueGetRepoComments operation.
     * @callback module:api/IssueApi~issueGetRepoCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all comments in a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Date} [since] if provided, only comments updated since the provided time are returned.
     * @param {Date} [before] if provided, only comments updated before the provided time are returned.
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/IssueApi~issueGetRepoCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Comment>}
     */
    issueGetRepoComments(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetRepoComments");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetRepoComments");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'since': opts['since'],
        'before': opts['before'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Comment];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueListBlocks operation.
     * @callback module:api/IssueApi~issueListBlocksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Issue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List issues that are blocked by this issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/IssueApi~issueListBlocksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Issue>}
     */
    issueListBlocks(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueListBlocks");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueListBlocks");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueListBlocks");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Issue];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/blocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueListIssueAttachments operation.
     * @callback module:api/IssueApi~issueListIssueAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Attachment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List issue's attachments
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {module:api/IssueApi~issueListIssueAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Attachment>}
     */
    issueListIssueAttachments(owner, repo, index, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueListIssueAttachments");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueListIssueAttachments");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueListIssueAttachments");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Attachment];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueListIssueCommentAttachments operation.
     * @callback module:api/IssueApi~issueListIssueCommentAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Attachment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List comment's attachments
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the comment
     * @param {module:api/IssueApi~issueListIssueCommentAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Attachment>}
     */
    issueListIssueCommentAttachments(owner, repo, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueListIssueCommentAttachments");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueListIssueCommentAttachments");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueListIssueCommentAttachments");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Attachment];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{id}/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueListIssueDependencies operation.
     * @callback module:api/IssueApi~issueListIssueDependenciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Issue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List an issue's dependencies, i.e all issues that block this issue.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/IssueApi~issueListIssueDependenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Issue>}
     */
    issueListIssueDependencies(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueListIssueDependencies");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueListIssueDependencies");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueListIssueDependencies");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Issue];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/dependencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueListIssues operation.
     * @callback module:api/IssueApi~issueListIssuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Issue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a repository's issues
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state] whether issue is open or closed
     * @param {String} [labels] comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded
     * @param {String} [q] search string
     * @param {module:model/String} [type] filter by type (issues / pulls) if set
     * @param {String} [milestones] comma separated list of milestone names or ids. It uses names and fall back to ids. Fetch only issues that have any of this milestones. Non existent milestones are discarded
     * @param {Date} [since] Only show items updated after the given time. This is a timestamp in RFC 3339 format
     * @param {Date} [before] Only show items updated before the given time. This is a timestamp in RFC 3339 format
     * @param {String} [createdBy] Only show items which were created by the the given user
     * @param {String} [assignedBy] Only show items for which the given user is assigned
     * @param {String} [mentionedBy] Only show items in which the given user was mentioned
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/IssueApi~issueListIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Issue>}
     */
    issueListIssues(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueListIssues");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueListIssues");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'state': opts['state'],
        'labels': opts['labels'],
        'q': opts['q'],
        'type': opts['type'],
        'milestones': opts['milestones'],
        'since': opts['since'],
        'before': opts['before'],
        'created_by': opts['createdBy'],
        'assigned_by': opts['assignedBy'],
        'mentioned_by': opts['mentionedBy'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Issue];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueListLabels operation.
     * @callback module:api/IssueApi~issueListLabelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Label>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all of a repository's labels
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/IssueApi~issueListLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Label>}
     */
    issueListLabels(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueListLabels");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueListLabels");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Label];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuePostCommentReaction operation.
     * @callback module:api/IssueApi~issuePostCommentReactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a reaction to a comment of an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the comment to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditReactionOption} [editReactionOption] 
     * @param {module:api/IssueApi~issuePostCommentReactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    issuePostCommentReaction(owner, repo, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['editReactionOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuePostCommentReaction");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuePostCommentReaction");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issuePostCommentReaction");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{id}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuePostIssueReaction operation.
     * @callback module:api/IssueApi~issuePostIssueReactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a reaction to an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {module:model/EditReactionOption} [editReactionOption] 
     * @param {module:api/IssueApi~issuePostIssueReactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    issuePostIssueReaction(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['editReactionOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuePostIssueReaction");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuePostIssueReaction");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issuePostIssueReaction");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueRemoveIssueBlocking operation.
     * @callback module:api/IssueApi~issueRemoveIssueBlockingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unblock the issue given in the body by the issue in path
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {module:model/IssueMeta} [issueMeta] 
     * @param {module:api/IssueApi~issueRemoveIssueBlockingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    issueRemoveIssueBlocking(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['issueMeta'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueRemoveIssueBlocking");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueRemoveIssueBlocking");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueRemoveIssueBlocking");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/blocks', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueRemoveIssueDependencies operation.
     * @callback module:api/IssueApi~issueRemoveIssueDependenciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an issue dependency
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {module:model/IssueMeta} [issueMeta] 
     * @param {module:api/IssueApi~issueRemoveIssueDependenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    issueRemoveIssueDependencies(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['issueMeta'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueRemoveIssueDependencies");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueRemoveIssueDependencies");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueRemoveIssueDependencies");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/dependencies', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueRemoveLabel operation.
     * @callback module:api/IssueApi~issueRemoveLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a label from an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Number} id id of the label to remove
     * @param {module:api/IssueApi~issueRemoveLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueRemoveLabel(owner, repo, index, id, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueRemoveLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueRemoveLabel");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueRemoveLabel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueRemoveLabel");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/labels/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueReplaceLabels operation.
     * @callback module:api/IssueApi~issueReplaceLabelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Label>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace an issue's labels
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {module:model/IssueLabelsOption} [issueLabelsOption] 
     * @param {module:api/IssueApi~issueReplaceLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Label>}
     */
    issueReplaceLabels(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['issueLabelsOption'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueReplaceLabels");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueReplaceLabels");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueReplaceLabels");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Label];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/labels', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueResetTime operation.
     * @callback module:api/IssueApi~issueResetTimeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset a tracked time of an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue to add tracked time to
     * @param {module:api/IssueApi~issueResetTimeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueResetTime(owner, repo, index, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueResetTime");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueResetTime");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueResetTime");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/times', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueSearchIssues operation.
     * @callback module:api/IssueApi~issueSearchIssuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Issue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for issues across the repositories that the user has access to
     * @param {Object} opts Optional parameters
     * @param {String} [state] whether issue is open or closed
     * @param {String} [labels] comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded
     * @param {String} [milestones] comma separated list of milestone names. Fetch only issues that have any of this milestones. Non existent are discarded
     * @param {String} [q] search string
     * @param {Number} [priorityRepoId] repository to prioritize in the results
     * @param {String} [type] filter by type (issues / pulls) if set
     * @param {Date} [since] Only show notifications updated after the given time. This is a timestamp in RFC 3339 format
     * @param {Date} [before] Only show notifications updated before the given time. This is a timestamp in RFC 3339 format
     * @param {Boolean} [assigned] filter (issues / pulls) assigned to you, default is false
     * @param {Boolean} [created] filter (issues / pulls) created by you, default is false
     * @param {Boolean} [mentioned] filter (issues / pulls) mentioning you, default is false
     * @param {Boolean} [reviewRequested] filter pulls requesting your review, default is false
     * @param {Boolean} [reviewed] filter pulls reviewed by you, default is false
     * @param {String} [owner] filter by owner
     * @param {String} [team] filter by team (requires organization owner parameter to be provided)
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/IssueApi~issueSearchIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Issue>}
     */
    issueSearchIssues(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'state': opts['state'],
        'labels': opts['labels'],
        'milestones': opts['milestones'],
        'q': opts['q'],
        'priority_repo_id': opts['priorityRepoId'],
        'type': opts['type'],
        'since': opts['since'],
        'before': opts['before'],
        'assigned': opts['assigned'],
        'created': opts['created'],
        'mentioned': opts['mentioned'],
        'review_requested': opts['reviewRequested'],
        'reviewed': opts['reviewed'],
        'owner': opts['owner'],
        'team': opts['team'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Issue];
      return this.apiClient.callApi(
        '/repos/issues/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueStartStopWatch operation.
     * @callback module:api/IssueApi~issueStartStopWatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start stopwatch on an issue.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue to create the stopwatch on
     * @param {module:api/IssueApi~issueStartStopWatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueStartStopWatch(owner, repo, index, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueStartStopWatch");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueStartStopWatch");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueStartStopWatch");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/stopwatch/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueStopStopWatch operation.
     * @callback module:api/IssueApi~issueStopStopWatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop an issue's existing stopwatch.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue to stop the stopwatch on
     * @param {module:api/IssueApi~issueStopStopWatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueStopStopWatch(owner, repo, index, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueStopStopWatch");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueStopStopWatch");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueStopStopWatch");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/stopwatch/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueSubscriptions operation.
     * @callback module:api/IssueApi~issueSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users who subscribed on an issue.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/IssueApi~issueSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    issueSubscriptions(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueSubscriptions");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueSubscriptions");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueSubscriptions");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueTrackedTimes operation.
     * @callback module:api/IssueApi~issueTrackedTimesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackedTime>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List an issue's tracked times
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {String} [user] optional filter by user (available for issue managers)
     * @param {Date} [since] Only show times updated after the given time. This is a timestamp in RFC 3339 format
     * @param {Date} [before] Only show times updated before the given time. This is a timestamp in RFC 3339 format
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/IssueApi~issueTrackedTimesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrackedTime>}
     */
    issueTrackedTimes(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueTrackedTimes");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueTrackedTimes");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueTrackedTimes");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'index': index
      };
      let queryParams = {
        'user': opts['user'],
        'since': opts['since'],
        'before': opts['before'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [TrackedTime];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/times', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
