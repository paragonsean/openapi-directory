/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NotificationCount from '../model/NotificationCount';
import NotificationThread from '../model/NotificationThread';

/**
* Notification service.
* @module api/NotificationApi
* @version 1.20.0+dev-539-g5e389228f
*/
export default class NotificationApi {

    /**
    * Constructs a new NotificationApi. 
    * @alias module:api/NotificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the notifyGetList operation.
     * @callback module:api/NotificationApi~notifyGetListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationThread>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users's notification threads
     * @param {Object} opts Optional parameters
     * @param {Boolean} [all] If true, show notifications marked as read. Default value is false
     * @param {Array.<String>} [statusTypes] Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread & pinned.
     * @param {Array.<module:model/String>} [subjectType] filter notifications by subject type
     * @param {Date} [since] Only show notifications updated after the given time. This is a timestamp in RFC 3339 format
     * @param {Date} [before] Only show notifications updated before the given time. This is a timestamp in RFC 3339 format
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/NotificationApi~notifyGetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationThread>}
     */
    notifyGetList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'all': opts['all'],
        'status-types': this.apiClient.buildCollectionParam(opts['statusTypes'], 'multi'),
        'subject-type': this.apiClient.buildCollectionParam(opts['subjectType'], 'multi'),
        'since': opts['since'],
        'before': opts['before'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [NotificationThread];
      return this.apiClient.callApi(
        '/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notifyGetRepoList operation.
     * @callback module:api/NotificationApi~notifyGetRepoListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationThread>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users's notification threads on a specific repo
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Boolean} [all] If true, show notifications marked as read. Default value is false
     * @param {Array.<String>} [statusTypes] Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread & pinned
     * @param {Array.<module:model/String>} [subjectType] filter notifications by subject type
     * @param {Date} [since] Only show notifications updated after the given time. This is a timestamp in RFC 3339 format
     * @param {Date} [before] Only show notifications updated before the given time. This is a timestamp in RFC 3339 format
     * @param {Number} [page] page number of results to return (1-based)
     * @param {Number} [limit] page size of results
     * @param {module:api/NotificationApi~notifyGetRepoListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationThread>}
     */
    notifyGetRepoList(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling notifyGetRepoList");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling notifyGetRepoList");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'all': opts['all'],
        'status-types': this.apiClient.buildCollectionParam(opts['statusTypes'], 'multi'),
        'subject-type': this.apiClient.buildCollectionParam(opts['subjectType'], 'multi'),
        'since': opts['since'],
        'before': opts['before'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [NotificationThread];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notifyGetThread operation.
     * @callback module:api/NotificationApi~notifyGetThreadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationThread} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get notification thread by ID
     * @param {String} id id of notification thread
     * @param {module:api/NotificationApi~notifyGetThreadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationThread}
     */
    notifyGetThread(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling notifyGetThread");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = NotificationThread;
      return this.apiClient.callApi(
        '/notifications/threads/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notifyNewAvailable operation.
     * @callback module:api/NotificationApi~notifyNewAvailableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if unread notifications exist
     * @param {module:api/NotificationApi~notifyNewAvailableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationCount}
     */
    notifyNewAvailable(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = NotificationCount;
      return this.apiClient.callApi(
        '/notifications/new', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notifyReadList operation.
     * @callback module:api/NotificationApi~notifyReadListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationThread>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark notification threads as read, pinned or unread
     * @param {Object} opts Optional parameters
     * @param {Date} [lastReadAt] Describes the last point that notifications were checked. Anything updated since this time will not be updated.
     * @param {String} [all] If true, mark all notifications on this repo. Default value is false
     * @param {Array.<String>} [statusTypes] Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.
     * @param {String} [toStatus] Status to mark notifications as, Defaults to read.
     * @param {module:api/NotificationApi~notifyReadListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationThread>}
     */
    notifyReadList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'last_read_at': opts['lastReadAt'],
        'all': opts['all'],
        'status-types': this.apiClient.buildCollectionParam(opts['statusTypes'], 'multi'),
        'to-status': opts['toStatus']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [NotificationThread];
      return this.apiClient.callApi(
        '/notifications', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notifyReadRepoList operation.
     * @callback module:api/NotificationApi~notifyReadRepoListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationThread>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark notification threads as read, pinned or unread on a specific repo
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {String} [all] If true, mark all notifications on this repo. Default value is false
     * @param {Array.<String>} [statusTypes] Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.
     * @param {String} [toStatus] Status to mark notifications as. Defaults to read.
     * @param {Date} [lastReadAt] Describes the last point that notifications were checked. Anything updated since this time will not be updated.
     * @param {module:api/NotificationApi~notifyReadRepoListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationThread>}
     */
    notifyReadRepoList(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling notifyReadRepoList");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling notifyReadRepoList");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'all': opts['all'],
        'status-types': this.apiClient.buildCollectionParam(opts['statusTypes'], 'multi'),
        'to-status': opts['toStatus'],
        'last_read_at': opts['lastReadAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [NotificationThread];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/notifications', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notifyReadThread operation.
     * @callback module:api/NotificationApi~notifyReadThreadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationThread} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark notification thread as read by ID
     * @param {String} id id of notification thread
     * @param {Object} opts Optional parameters
     * @param {String} [toStatus = 'read')] Status to mark notifications as
     * @param {module:api/NotificationApi~notifyReadThreadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationThread}
     */
    notifyReadThread(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling notifyReadThread");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'to-status': opts['toStatus']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TOTPHeader', 'AuthorizationHeaderToken', 'SudoHeader', 'BasicAuth', 'AccessToken', 'SudoParam', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = NotificationThread;
      return this.apiClient.callApi(
        '/notifications/threads/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
