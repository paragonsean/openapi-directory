/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EditUserOption model module.
 * @module model/EditUserOption
 * @version 1.20.0+dev-539-g5e389228f
 */
class EditUserOption {
    /**
     * Constructs a new <code>EditUserOption</code>.
     * EditUserOption edit user options
     * @alias module:model/EditUserOption
     * @param loginName {String} 
     * @param sourceId {Number} 
     */
    constructor(loginName, sourceId) { 
        
        EditUserOption.initialize(this, loginName, sourceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, loginName, sourceId) { 
        obj['login_name'] = loginName;
        obj['source_id'] = sourceId;
    }

    /**
     * Constructs a <code>EditUserOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EditUserOption} obj Optional instance to populate.
     * @return {module:model/EditUserOption} The populated <code>EditUserOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EditUserOption();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('admin')) {
                obj['admin'] = ApiClient.convertToType(data['admin'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_create_organization')) {
                obj['allow_create_organization'] = ApiClient.convertToType(data['allow_create_organization'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_git_hook')) {
                obj['allow_git_hook'] = ApiClient.convertToType(data['allow_git_hook'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_import_local')) {
                obj['allow_import_local'] = ApiClient.convertToType(data['allow_import_local'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('full_name')) {
                obj['full_name'] = ApiClient.convertToType(data['full_name'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('login_name')) {
                obj['login_name'] = ApiClient.convertToType(data['login_name'], 'String');
            }
            if (data.hasOwnProperty('max_repo_creation')) {
                obj['max_repo_creation'] = ApiClient.convertToType(data['max_repo_creation'], 'Number');
            }
            if (data.hasOwnProperty('must_change_password')) {
                obj['must_change_password'] = ApiClient.convertToType(data['must_change_password'], 'Boolean');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('prohibit_login')) {
                obj['prohibit_login'] = ApiClient.convertToType(data['prohibit_login'], 'Boolean');
            }
            if (data.hasOwnProperty('restricted')) {
                obj['restricted'] = ApiClient.convertToType(data['restricted'], 'Boolean');
            }
            if (data.hasOwnProperty('source_id')) {
                obj['source_id'] = ApiClient.convertToType(data['source_id'], 'Number');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EditUserOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EditUserOption</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EditUserOption.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['full_name'] && !(typeof data['full_name'] === 'string' || data['full_name'] instanceof String)) {
            throw new Error("Expected the field `full_name` to be a primitive type in the JSON string but got " + data['full_name']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['login_name'] && !(typeof data['login_name'] === 'string' || data['login_name'] instanceof String)) {
            throw new Error("Expected the field `login_name` to be a primitive type in the JSON string but got " + data['login_name']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}

EditUserOption.RequiredProperties = ["login_name", "source_id"];

/**
 * @member {Boolean} active
 */
EditUserOption.prototype['active'] = undefined;

/**
 * @member {Boolean} admin
 */
EditUserOption.prototype['admin'] = undefined;

/**
 * @member {Boolean} allow_create_organization
 */
EditUserOption.prototype['allow_create_organization'] = undefined;

/**
 * @member {Boolean} allow_git_hook
 */
EditUserOption.prototype['allow_git_hook'] = undefined;

/**
 * @member {Boolean} allow_import_local
 */
EditUserOption.prototype['allow_import_local'] = undefined;

/**
 * @member {String} description
 */
EditUserOption.prototype['description'] = undefined;

/**
 * @member {String} email
 */
EditUserOption.prototype['email'] = undefined;

/**
 * @member {String} full_name
 */
EditUserOption.prototype['full_name'] = undefined;

/**
 * @member {String} location
 */
EditUserOption.prototype['location'] = undefined;

/**
 * @member {String} login_name
 */
EditUserOption.prototype['login_name'] = undefined;

/**
 * @member {Number} max_repo_creation
 */
EditUserOption.prototype['max_repo_creation'] = undefined;

/**
 * @member {Boolean} must_change_password
 */
EditUserOption.prototype['must_change_password'] = undefined;

/**
 * @member {String} password
 */
EditUserOption.prototype['password'] = undefined;

/**
 * @member {Boolean} prohibit_login
 */
EditUserOption.prototype['prohibit_login'] = undefined;

/**
 * @member {Boolean} restricted
 */
EditUserOption.prototype['restricted'] = undefined;

/**
 * @member {Number} source_id
 */
EditUserOption.prototype['source_id'] = undefined;

/**
 * @member {String} visibility
 */
EditUserOption.prototype['visibility'] = undefined;

/**
 * @member {String} website
 */
EditUserOption.prototype['website'] = undefined;






export default EditUserOption;

