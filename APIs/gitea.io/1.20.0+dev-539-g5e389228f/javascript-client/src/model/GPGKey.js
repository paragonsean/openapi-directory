/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GPGKeyEmail from './GPGKeyEmail';

/**
 * The GPGKey model module.
 * @module model/GPGKey
 * @version 1.20.0+dev-539-g5e389228f
 */
class GPGKey {
    /**
     * Constructs a new <code>GPGKey</code>.
     * GPGKey a user GPG key to sign commit and tag in repository
     * @alias module:model/GPGKey
     */
    constructor() { 
        
        GPGKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GPGKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GPGKey} obj Optional instance to populate.
     * @return {module:model/GPGKey} The populated <code>GPGKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GPGKey();

            if (data.hasOwnProperty('can_certify')) {
                obj['can_certify'] = ApiClient.convertToType(data['can_certify'], 'Boolean');
            }
            if (data.hasOwnProperty('can_encrypt_comms')) {
                obj['can_encrypt_comms'] = ApiClient.convertToType(data['can_encrypt_comms'], 'Boolean');
            }
            if (data.hasOwnProperty('can_encrypt_storage')) {
                obj['can_encrypt_storage'] = ApiClient.convertToType(data['can_encrypt_storage'], 'Boolean');
            }
            if (data.hasOwnProperty('can_sign')) {
                obj['can_sign'] = ApiClient.convertToType(data['can_sign'], 'Boolean');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('emails')) {
                obj['emails'] = ApiClient.convertToType(data['emails'], [GPGKeyEmail]);
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('key_id')) {
                obj['key_id'] = ApiClient.convertToType(data['key_id'], 'String');
            }
            if (data.hasOwnProperty('primary_key_id')) {
                obj['primary_key_id'] = ApiClient.convertToType(data['primary_key_id'], 'String');
            }
            if (data.hasOwnProperty('public_key')) {
                obj['public_key'] = ApiClient.convertToType(data['public_key'], 'String');
            }
            if (data.hasOwnProperty('subkeys')) {
                obj['subkeys'] = ApiClient.convertToType(data['subkeys'], [GPGKey]);
            }
            if (data.hasOwnProperty('verified')) {
                obj['verified'] = ApiClient.convertToType(data['verified'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GPGKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GPGKey</code>.
     */
    static validateJSON(data) {
        if (data['emails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['emails'])) {
                throw new Error("Expected the field `emails` to be an array in the JSON data but got " + data['emails']);
            }
            // validate the optional field `emails` (array)
            for (const item of data['emails']) {
                GPGKeyEmail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['key_id'] && !(typeof data['key_id'] === 'string' || data['key_id'] instanceof String)) {
            throw new Error("Expected the field `key_id` to be a primitive type in the JSON string but got " + data['key_id']);
        }
        // ensure the json data is a string
        if (data['primary_key_id'] && !(typeof data['primary_key_id'] === 'string' || data['primary_key_id'] instanceof String)) {
            throw new Error("Expected the field `primary_key_id` to be a primitive type in the JSON string but got " + data['primary_key_id']);
        }
        // ensure the json data is a string
        if (data['public_key'] && !(typeof data['public_key'] === 'string' || data['public_key'] instanceof String)) {
            throw new Error("Expected the field `public_key` to be a primitive type in the JSON string but got " + data['public_key']);
        }
        if (data['subkeys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subkeys'])) {
                throw new Error("Expected the field `subkeys` to be an array in the JSON data but got " + data['subkeys']);
            }
            // validate the optional field `subkeys` (array)
            for (const item of data['subkeys']) {
                GPGKey.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Boolean} can_certify
 */
GPGKey.prototype['can_certify'] = undefined;

/**
 * @member {Boolean} can_encrypt_comms
 */
GPGKey.prototype['can_encrypt_comms'] = undefined;

/**
 * @member {Boolean} can_encrypt_storage
 */
GPGKey.prototype['can_encrypt_storage'] = undefined;

/**
 * @member {Boolean} can_sign
 */
GPGKey.prototype['can_sign'] = undefined;

/**
 * @member {Date} created_at
 */
GPGKey.prototype['created_at'] = undefined;

/**
 * @member {Array.<module:model/GPGKeyEmail>} emails
 */
GPGKey.prototype['emails'] = undefined;

/**
 * @member {Date} expires_at
 */
GPGKey.prototype['expires_at'] = undefined;

/**
 * @member {Number} id
 */
GPGKey.prototype['id'] = undefined;

/**
 * @member {String} key_id
 */
GPGKey.prototype['key_id'] = undefined;

/**
 * @member {String} primary_key_id
 */
GPGKey.prototype['primary_key_id'] = undefined;

/**
 * @member {String} public_key
 */
GPGKey.prototype['public_key'] = undefined;

/**
 * @member {Array.<module:model/GPGKey>} subkeys
 */
GPGKey.prototype['subkeys'] = undefined;

/**
 * @member {Boolean} verified
 */
GPGKey.prototype['verified'] = undefined;






export default GPGKey;

