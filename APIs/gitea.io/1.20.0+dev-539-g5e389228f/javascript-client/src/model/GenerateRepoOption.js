/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GenerateRepoOption model module.
 * @module model/GenerateRepoOption
 * @version 1.20.0+dev-539-g5e389228f
 */
class GenerateRepoOption {
    /**
     * Constructs a new <code>GenerateRepoOption</code>.
     * GenerateRepoOption options when creating repository using a template
     * @alias module:model/GenerateRepoOption
     * @param name {String} Name of the repository to create
     * @param owner {String} The organization or person who will own the new repository
     */
    constructor(name, owner) { 
        
        GenerateRepoOption.initialize(this, name, owner);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, owner) { 
        obj['name'] = name;
        obj['owner'] = owner;
    }

    /**
     * Constructs a <code>GenerateRepoOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GenerateRepoOption} obj Optional instance to populate.
     * @return {module:model/GenerateRepoOption} The populated <code>GenerateRepoOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GenerateRepoOption();

            if (data.hasOwnProperty('avatar')) {
                obj['avatar'] = ApiClient.convertToType(data['avatar'], 'Boolean');
            }
            if (data.hasOwnProperty('default_branch')) {
                obj['default_branch'] = ApiClient.convertToType(data['default_branch'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('git_content')) {
                obj['git_content'] = ApiClient.convertToType(data['git_content'], 'Boolean');
            }
            if (data.hasOwnProperty('git_hooks')) {
                obj['git_hooks'] = ApiClient.convertToType(data['git_hooks'], 'Boolean');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('private')) {
                obj['private'] = ApiClient.convertToType(data['private'], 'Boolean');
            }
            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], 'Boolean');
            }
            if (data.hasOwnProperty('webhooks')) {
                obj['webhooks'] = ApiClient.convertToType(data['webhooks'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GenerateRepoOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GenerateRepoOption</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GenerateRepoOption.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['default_branch'] && !(typeof data['default_branch'] === 'string' || data['default_branch'] instanceof String)) {
            throw new Error("Expected the field `default_branch` to be a primitive type in the JSON string but got " + data['default_branch']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }

        return true;
    }


}

GenerateRepoOption.RequiredProperties = ["name", "owner"];

/**
 * include avatar of the template repo
 * @member {Boolean} avatar
 */
GenerateRepoOption.prototype['avatar'] = undefined;

/**
 * Default branch of the new repository
 * @member {String} default_branch
 */
GenerateRepoOption.prototype['default_branch'] = undefined;

/**
 * Description of the repository to create
 * @member {String} description
 */
GenerateRepoOption.prototype['description'] = undefined;

/**
 * include git content of default branch in template repo
 * @member {Boolean} git_content
 */
GenerateRepoOption.prototype['git_content'] = undefined;

/**
 * include git hooks in template repo
 * @member {Boolean} git_hooks
 */
GenerateRepoOption.prototype['git_hooks'] = undefined;

/**
 * include labels in template repo
 * @member {Boolean} labels
 */
GenerateRepoOption.prototype['labels'] = undefined;

/**
 * Name of the repository to create
 * @member {String} name
 */
GenerateRepoOption.prototype['name'] = undefined;

/**
 * The organization or person who will own the new repository
 * @member {String} owner
 */
GenerateRepoOption.prototype['owner'] = undefined;

/**
 * Whether the repository is private
 * @member {Boolean} private
 */
GenerateRepoOption.prototype['private'] = undefined;

/**
 * include topics in template repo
 * @member {Boolean} topics
 */
GenerateRepoOption.prototype['topics'] = undefined;

/**
 * include webhooks in template repo
 * @member {Boolean} webhooks
 */
GenerateRepoOption.prototype['webhooks'] = undefined;






export default GenerateRepoOption;

