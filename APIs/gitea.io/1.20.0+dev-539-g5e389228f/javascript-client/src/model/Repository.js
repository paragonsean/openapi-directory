/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExternalTracker from './ExternalTracker';
import ExternalWiki from './ExternalWiki';
import InternalTracker from './InternalTracker';
import Permission from './Permission';
import RepoTransfer from './RepoTransfer';
import User from './User';

/**
 * The Repository model module.
 * @module model/Repository
 * @version 1.20.0+dev-539-g5e389228f
 */
class Repository {
    /**
     * Constructs a new <code>Repository</code>.
     * Repository represents a repository
     * @alias module:model/Repository
     */
    constructor() { 
        
        Repository.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Repository</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Repository} obj Optional instance to populate.
     * @return {module:model/Repository} The populated <code>Repository</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Repository();

            if (data.hasOwnProperty('allow_merge_commits')) {
                obj['allow_merge_commits'] = ApiClient.convertToType(data['allow_merge_commits'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_rebase')) {
                obj['allow_rebase'] = ApiClient.convertToType(data['allow_rebase'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_rebase_explicit')) {
                obj['allow_rebase_explicit'] = ApiClient.convertToType(data['allow_rebase_explicit'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_rebase_update')) {
                obj['allow_rebase_update'] = ApiClient.convertToType(data['allow_rebase_update'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_squash_merge')) {
                obj['allow_squash_merge'] = ApiClient.convertToType(data['allow_squash_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('avatar_url')) {
                obj['avatar_url'] = ApiClient.convertToType(data['avatar_url'], 'String');
            }
            if (data.hasOwnProperty('clone_url')) {
                obj['clone_url'] = ApiClient.convertToType(data['clone_url'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('default_allow_maintainer_edit')) {
                obj['default_allow_maintainer_edit'] = ApiClient.convertToType(data['default_allow_maintainer_edit'], 'Boolean');
            }
            if (data.hasOwnProperty('default_branch')) {
                obj['default_branch'] = ApiClient.convertToType(data['default_branch'], 'String');
            }
            if (data.hasOwnProperty('default_delete_branch_after_merge')) {
                obj['default_delete_branch_after_merge'] = ApiClient.convertToType(data['default_delete_branch_after_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('default_merge_style')) {
                obj['default_merge_style'] = ApiClient.convertToType(data['default_merge_style'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('empty')) {
                obj['empty'] = ApiClient.convertToType(data['empty'], 'Boolean');
            }
            if (data.hasOwnProperty('external_tracker')) {
                obj['external_tracker'] = ExternalTracker.constructFromObject(data['external_tracker']);
            }
            if (data.hasOwnProperty('external_wiki')) {
                obj['external_wiki'] = ExternalWiki.constructFromObject(data['external_wiki']);
            }
            if (data.hasOwnProperty('fork')) {
                obj['fork'] = ApiClient.convertToType(data['fork'], 'Boolean');
            }
            if (data.hasOwnProperty('forks_count')) {
                obj['forks_count'] = ApiClient.convertToType(data['forks_count'], 'Number');
            }
            if (data.hasOwnProperty('full_name')) {
                obj['full_name'] = ApiClient.convertToType(data['full_name'], 'String');
            }
            if (data.hasOwnProperty('has_actions')) {
                obj['has_actions'] = ApiClient.convertToType(data['has_actions'], 'Boolean');
            }
            if (data.hasOwnProperty('has_issues')) {
                obj['has_issues'] = ApiClient.convertToType(data['has_issues'], 'Boolean');
            }
            if (data.hasOwnProperty('has_packages')) {
                obj['has_packages'] = ApiClient.convertToType(data['has_packages'], 'Boolean');
            }
            if (data.hasOwnProperty('has_projects')) {
                obj['has_projects'] = ApiClient.convertToType(data['has_projects'], 'Boolean');
            }
            if (data.hasOwnProperty('has_pull_requests')) {
                obj['has_pull_requests'] = ApiClient.convertToType(data['has_pull_requests'], 'Boolean');
            }
            if (data.hasOwnProperty('has_releases')) {
                obj['has_releases'] = ApiClient.convertToType(data['has_releases'], 'Boolean');
            }
            if (data.hasOwnProperty('has_wiki')) {
                obj['has_wiki'] = ApiClient.convertToType(data['has_wiki'], 'Boolean');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('ignore_whitespace_conflicts')) {
                obj['ignore_whitespace_conflicts'] = ApiClient.convertToType(data['ignore_whitespace_conflicts'], 'Boolean');
            }
            if (data.hasOwnProperty('internal')) {
                obj['internal'] = ApiClient.convertToType(data['internal'], 'Boolean');
            }
            if (data.hasOwnProperty('internal_tracker')) {
                obj['internal_tracker'] = InternalTracker.constructFromObject(data['internal_tracker']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('languages_url')) {
                obj['languages_url'] = ApiClient.convertToType(data['languages_url'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('mirror')) {
                obj['mirror'] = ApiClient.convertToType(data['mirror'], 'Boolean');
            }
            if (data.hasOwnProperty('mirror_interval')) {
                obj['mirror_interval'] = ApiClient.convertToType(data['mirror_interval'], 'String');
            }
            if (data.hasOwnProperty('mirror_updated')) {
                obj['mirror_updated'] = ApiClient.convertToType(data['mirror_updated'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('open_issues_count')) {
                obj['open_issues_count'] = ApiClient.convertToType(data['open_issues_count'], 'Number');
            }
            if (data.hasOwnProperty('open_pr_counter')) {
                obj['open_pr_counter'] = ApiClient.convertToType(data['open_pr_counter'], 'Number');
            }
            if (data.hasOwnProperty('original_url')) {
                obj['original_url'] = ApiClient.convertToType(data['original_url'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = User.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = Repository.constructFromObject(data['parent']);
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = Permission.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('private')) {
                obj['private'] = ApiClient.convertToType(data['private'], 'Boolean');
            }
            if (data.hasOwnProperty('release_counter')) {
                obj['release_counter'] = ApiClient.convertToType(data['release_counter'], 'Number');
            }
            if (data.hasOwnProperty('repo_transfer')) {
                obj['repo_transfer'] = RepoTransfer.constructFromObject(data['repo_transfer']);
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('ssh_url')) {
                obj['ssh_url'] = ApiClient.convertToType(data['ssh_url'], 'String');
            }
            if (data.hasOwnProperty('stars_count')) {
                obj['stars_count'] = ApiClient.convertToType(data['stars_count'], 'Number');
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], 'Boolean');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('watchers_count')) {
                obj['watchers_count'] = ApiClient.convertToType(data['watchers_count'], 'Number');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Repository</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Repository</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['avatar_url'] && !(typeof data['avatar_url'] === 'string' || data['avatar_url'] instanceof String)) {
            throw new Error("Expected the field `avatar_url` to be a primitive type in the JSON string but got " + data['avatar_url']);
        }
        // ensure the json data is a string
        if (data['clone_url'] && !(typeof data['clone_url'] === 'string' || data['clone_url'] instanceof String)) {
            throw new Error("Expected the field `clone_url` to be a primitive type in the JSON string but got " + data['clone_url']);
        }
        // ensure the json data is a string
        if (data['default_branch'] && !(typeof data['default_branch'] === 'string' || data['default_branch'] instanceof String)) {
            throw new Error("Expected the field `default_branch` to be a primitive type in the JSON string but got " + data['default_branch']);
        }
        // ensure the json data is a string
        if (data['default_merge_style'] && !(typeof data['default_merge_style'] === 'string' || data['default_merge_style'] instanceof String)) {
            throw new Error("Expected the field `default_merge_style` to be a primitive type in the JSON string but got " + data['default_merge_style']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `external_tracker`
        if (data['external_tracker']) { // data not null
          ExternalTracker.validateJSON(data['external_tracker']);
        }
        // validate the optional field `external_wiki`
        if (data['external_wiki']) { // data not null
          ExternalWiki.validateJSON(data['external_wiki']);
        }
        // ensure the json data is a string
        if (data['full_name'] && !(typeof data['full_name'] === 'string' || data['full_name'] instanceof String)) {
            throw new Error("Expected the field `full_name` to be a primitive type in the JSON string but got " + data['full_name']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // validate the optional field `internal_tracker`
        if (data['internal_tracker']) { // data not null
          InternalTracker.validateJSON(data['internal_tracker']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['languages_url'] && !(typeof data['languages_url'] === 'string' || data['languages_url'] instanceof String)) {
            throw new Error("Expected the field `languages_url` to be a primitive type in the JSON string but got " + data['languages_url']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['mirror_interval'] && !(typeof data['mirror_interval'] === 'string' || data['mirror_interval'] instanceof String)) {
            throw new Error("Expected the field `mirror_interval` to be a primitive type in the JSON string but got " + data['mirror_interval']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['original_url'] && !(typeof data['original_url'] === 'string' || data['original_url'] instanceof String)) {
            throw new Error("Expected the field `original_url` to be a primitive type in the JSON string but got " + data['original_url']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          User.validateJSON(data['owner']);
        }
        // validate the optional field `parent`
        if (data['parent']) { // data not null
          Repository.validateJSON(data['parent']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          Permission.validateJSON(data['permissions']);
        }
        // validate the optional field `repo_transfer`
        if (data['repo_transfer']) { // data not null
          RepoTransfer.validateJSON(data['repo_transfer']);
        }
        // ensure the json data is a string
        if (data['ssh_url'] && !(typeof data['ssh_url'] === 'string' || data['ssh_url'] instanceof String)) {
            throw new Error("Expected the field `ssh_url` to be a primitive type in the JSON string but got " + data['ssh_url']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}



/**
 * @member {Boolean} allow_merge_commits
 */
Repository.prototype['allow_merge_commits'] = undefined;

/**
 * @member {Boolean} allow_rebase
 */
Repository.prototype['allow_rebase'] = undefined;

/**
 * @member {Boolean} allow_rebase_explicit
 */
Repository.prototype['allow_rebase_explicit'] = undefined;

/**
 * @member {Boolean} allow_rebase_update
 */
Repository.prototype['allow_rebase_update'] = undefined;

/**
 * @member {Boolean} allow_squash_merge
 */
Repository.prototype['allow_squash_merge'] = undefined;

/**
 * @member {Boolean} archived
 */
Repository.prototype['archived'] = undefined;

/**
 * @member {String} avatar_url
 */
Repository.prototype['avatar_url'] = undefined;

/**
 * @member {String} clone_url
 */
Repository.prototype['clone_url'] = undefined;

/**
 * @member {Date} created_at
 */
Repository.prototype['created_at'] = undefined;

/**
 * @member {Boolean} default_allow_maintainer_edit
 */
Repository.prototype['default_allow_maintainer_edit'] = undefined;

/**
 * @member {String} default_branch
 */
Repository.prototype['default_branch'] = undefined;

/**
 * @member {Boolean} default_delete_branch_after_merge
 */
Repository.prototype['default_delete_branch_after_merge'] = undefined;

/**
 * @member {String} default_merge_style
 */
Repository.prototype['default_merge_style'] = undefined;

/**
 * @member {String} description
 */
Repository.prototype['description'] = undefined;

/**
 * @member {Boolean} empty
 */
Repository.prototype['empty'] = undefined;

/**
 * @member {module:model/ExternalTracker} external_tracker
 */
Repository.prototype['external_tracker'] = undefined;

/**
 * @member {module:model/ExternalWiki} external_wiki
 */
Repository.prototype['external_wiki'] = undefined;

/**
 * @member {Boolean} fork
 */
Repository.prototype['fork'] = undefined;

/**
 * @member {Number} forks_count
 */
Repository.prototype['forks_count'] = undefined;

/**
 * @member {String} full_name
 */
Repository.prototype['full_name'] = undefined;

/**
 * @member {Boolean} has_actions
 */
Repository.prototype['has_actions'] = undefined;

/**
 * @member {Boolean} has_issues
 */
Repository.prototype['has_issues'] = undefined;

/**
 * @member {Boolean} has_packages
 */
Repository.prototype['has_packages'] = undefined;

/**
 * @member {Boolean} has_projects
 */
Repository.prototype['has_projects'] = undefined;

/**
 * @member {Boolean} has_pull_requests
 */
Repository.prototype['has_pull_requests'] = undefined;

/**
 * @member {Boolean} has_releases
 */
Repository.prototype['has_releases'] = undefined;

/**
 * @member {Boolean} has_wiki
 */
Repository.prototype['has_wiki'] = undefined;

/**
 * @member {String} html_url
 */
Repository.prototype['html_url'] = undefined;

/**
 * @member {Number} id
 */
Repository.prototype['id'] = undefined;

/**
 * @member {Boolean} ignore_whitespace_conflicts
 */
Repository.prototype['ignore_whitespace_conflicts'] = undefined;

/**
 * @member {Boolean} internal
 */
Repository.prototype['internal'] = undefined;

/**
 * @member {module:model/InternalTracker} internal_tracker
 */
Repository.prototype['internal_tracker'] = undefined;

/**
 * @member {String} language
 */
Repository.prototype['language'] = undefined;

/**
 * @member {String} languages_url
 */
Repository.prototype['languages_url'] = undefined;

/**
 * @member {String} link
 */
Repository.prototype['link'] = undefined;

/**
 * @member {Boolean} mirror
 */
Repository.prototype['mirror'] = undefined;

/**
 * @member {String} mirror_interval
 */
Repository.prototype['mirror_interval'] = undefined;

/**
 * @member {Date} mirror_updated
 */
Repository.prototype['mirror_updated'] = undefined;

/**
 * @member {String} name
 */
Repository.prototype['name'] = undefined;

/**
 * @member {Number} open_issues_count
 */
Repository.prototype['open_issues_count'] = undefined;

/**
 * @member {Number} open_pr_counter
 */
Repository.prototype['open_pr_counter'] = undefined;

/**
 * @member {String} original_url
 */
Repository.prototype['original_url'] = undefined;

/**
 * @member {module:model/User} owner
 */
Repository.prototype['owner'] = undefined;

/**
 * @member {module:model/Repository} parent
 */
Repository.prototype['parent'] = undefined;

/**
 * @member {module:model/Permission} permissions
 */
Repository.prototype['permissions'] = undefined;

/**
 * @member {Boolean} private
 */
Repository.prototype['private'] = undefined;

/**
 * @member {Number} release_counter
 */
Repository.prototype['release_counter'] = undefined;

/**
 * @member {module:model/RepoTransfer} repo_transfer
 */
Repository.prototype['repo_transfer'] = undefined;

/**
 * @member {Number} size
 */
Repository.prototype['size'] = undefined;

/**
 * @member {String} ssh_url
 */
Repository.prototype['ssh_url'] = undefined;

/**
 * @member {Number} stars_count
 */
Repository.prototype['stars_count'] = undefined;

/**
 * @member {Boolean} template
 */
Repository.prototype['template'] = undefined;

/**
 * @member {Date} updated_at
 */
Repository.prototype['updated_at'] = undefined;

/**
 * @member {Number} watchers_count
 */
Repository.prototype['watchers_count'] = undefined;

/**
 * @member {String} website
 */
Repository.prototype['website'] = undefined;






export default Repository;

