/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Repository from './Repository';

/**
 * The PRBranchInfo model module.
 * @module model/PRBranchInfo
 * @version 1.20.0+dev-539-g5e389228f
 */
class PRBranchInfo {
    /**
     * Constructs a new <code>PRBranchInfo</code>.
     * PRBranchInfo information about a branch
     * @alias module:model/PRBranchInfo
     */
    constructor() { 
        
        PRBranchInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PRBranchInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PRBranchInfo} obj Optional instance to populate.
     * @return {module:model/PRBranchInfo} The populated <code>PRBranchInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PRBranchInfo();

            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('ref')) {
                obj['ref'] = ApiClient.convertToType(data['ref'], 'String');
            }
            if (data.hasOwnProperty('repo')) {
                obj['repo'] = Repository.constructFromObject(data['repo']);
            }
            if (data.hasOwnProperty('repo_id')) {
                obj['repo_id'] = ApiClient.convertToType(data['repo_id'], 'Number');
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PRBranchInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PRBranchInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['ref'] && !(typeof data['ref'] === 'string' || data['ref'] instanceof String)) {
            throw new Error("Expected the field `ref` to be a primitive type in the JSON string but got " + data['ref']);
        }
        // validate the optional field `repo`
        if (data['repo']) { // data not null
          Repository.validateJSON(data['repo']);
        }
        // ensure the json data is a string
        if (data['sha'] && !(typeof data['sha'] === 'string' || data['sha'] instanceof String)) {
            throw new Error("Expected the field `sha` to be a primitive type in the JSON string but got " + data['sha']);
        }

        return true;
    }


}



/**
 * @member {String} label
 */
PRBranchInfo.prototype['label'] = undefined;

/**
 * @member {String} ref
 */
PRBranchInfo.prototype['ref'] = undefined;

/**
 * @member {module:model/Repository} repo
 */
PRBranchInfo.prototype['repo'] = undefined;

/**
 * @member {Number} repo_id
 */
PRBranchInfo.prototype['repo_id'] = undefined;

/**
 * @member {String} sha
 */
PRBranchInfo.prototype['sha'] = undefined;






export default PRBranchInfo;

