/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RepoTopicOptions model module.
 * @module model/RepoTopicOptions
 * @version 1.20.0+dev-539-g5e389228f
 */
class RepoTopicOptions {
    /**
     * Constructs a new <code>RepoTopicOptions</code>.
     * RepoTopicOptions a collection of repo topic names
     * @alias module:model/RepoTopicOptions
     */
    constructor() { 
        
        RepoTopicOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RepoTopicOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepoTopicOptions} obj Optional instance to populate.
     * @return {module:model/RepoTopicOptions} The populated <code>RepoTopicOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepoTopicOptions();

            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepoTopicOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepoTopicOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['topics'])) {
            throw new Error("Expected the field `topics` to be an array in the JSON data but got " + data['topics']);
        }

        return true;
    }


}



/**
 * list of topic names
 * @member {Array.<String>} topics
 */
RepoTopicOptions.prototype['topics'] = undefined;






export default RepoTopicOptions;

