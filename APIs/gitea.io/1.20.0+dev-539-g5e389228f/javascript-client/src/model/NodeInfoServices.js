/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NodeInfoServices model module.
 * @module model/NodeInfoServices
 * @version 1.20.0+dev-539-g5e389228f
 */
class NodeInfoServices {
    /**
     * Constructs a new <code>NodeInfoServices</code>.
     * NodeInfoServices contains the third party sites this server can connect to via their application API
     * @alias module:model/NodeInfoServices
     */
    constructor() { 
        
        NodeInfoServices.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeInfoServices</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeInfoServices} obj Optional instance to populate.
     * @return {module:model/NodeInfoServices} The populated <code>NodeInfoServices</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeInfoServices();

            if (data.hasOwnProperty('inbound')) {
                obj['inbound'] = ApiClient.convertToType(data['inbound'], ['String']);
            }
            if (data.hasOwnProperty('outbound')) {
                obj['outbound'] = ApiClient.convertToType(data['outbound'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeInfoServices</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeInfoServices</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['inbound'])) {
            throw new Error("Expected the field `inbound` to be an array in the JSON data but got " + data['inbound']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['outbound'])) {
            throw new Error("Expected the field `outbound` to be an array in the JSON data but got " + data['outbound']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} inbound
 */
NodeInfoServices.prototype['inbound'] = undefined;

/**
 * @member {Array.<String>} outbound
 */
NodeInfoServices.prototype['outbound'] = undefined;






export default NodeInfoServices;

