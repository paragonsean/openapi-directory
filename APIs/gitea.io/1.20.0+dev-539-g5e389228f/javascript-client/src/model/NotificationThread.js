/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NotificationSubject from './NotificationSubject';
import Repository from './Repository';

/**
 * The NotificationThread model module.
 * @module model/NotificationThread
 * @version 1.20.0+dev-539-g5e389228f
 */
class NotificationThread {
    /**
     * Constructs a new <code>NotificationThread</code>.
     * NotificationThread expose Notification on API
     * @alias module:model/NotificationThread
     */
    constructor() { 
        
        NotificationThread.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NotificationThread</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationThread} obj Optional instance to populate.
     * @return {module:model/NotificationThread} The populated <code>NotificationThread</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationThread();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('pinned')) {
                obj['pinned'] = ApiClient.convertToType(data['pinned'], 'Boolean');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = Repository.constructFromObject(data['repository']);
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = NotificationSubject.constructFromObject(data['subject']);
            }
            if (data.hasOwnProperty('unread')) {
                obj['unread'] = ApiClient.convertToType(data['unread'], 'Boolean');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationThread</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationThread</code>.
     */
    static validateJSON(data) {
        // validate the optional field `repository`
        if (data['repository']) { // data not null
          Repository.validateJSON(data['repository']);
        }
        // validate the optional field `subject`
        if (data['subject']) { // data not null
          NotificationSubject.validateJSON(data['subject']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
NotificationThread.prototype['id'] = undefined;

/**
 * @member {Boolean} pinned
 */
NotificationThread.prototype['pinned'] = undefined;

/**
 * @member {module:model/Repository} repository
 */
NotificationThread.prototype['repository'] = undefined;

/**
 * @member {module:model/NotificationSubject} subject
 */
NotificationThread.prototype['subject'] = undefined;

/**
 * @member {Boolean} unread
 */
NotificationThread.prototype['unread'] = undefined;

/**
 * @member {Date} updated_at
 */
NotificationThread.prototype['updated_at'] = undefined;

/**
 * @member {String} url
 */
NotificationThread.prototype['url'] = undefined;






export default NotificationThread;

