/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GeneralAttachmentSettings model module.
 * @module model/GeneralAttachmentSettings
 * @version 1.20.0+dev-539-g5e389228f
 */
class GeneralAttachmentSettings {
    /**
     * Constructs a new <code>GeneralAttachmentSettings</code>.
     * GeneralAttachmentSettings contains global Attachment settings exposed by API
     * @alias module:model/GeneralAttachmentSettings
     */
    constructor() { 
        
        GeneralAttachmentSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GeneralAttachmentSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeneralAttachmentSettings} obj Optional instance to populate.
     * @return {module:model/GeneralAttachmentSettings} The populated <code>GeneralAttachmentSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeneralAttachmentSettings();

            if (data.hasOwnProperty('allowed_types')) {
                obj['allowed_types'] = ApiClient.convertToType(data['allowed_types'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('max_files')) {
                obj['max_files'] = ApiClient.convertToType(data['max_files'], 'Number');
            }
            if (data.hasOwnProperty('max_size')) {
                obj['max_size'] = ApiClient.convertToType(data['max_size'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeneralAttachmentSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeneralAttachmentSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allowed_types'] && !(typeof data['allowed_types'] === 'string' || data['allowed_types'] instanceof String)) {
            throw new Error("Expected the field `allowed_types` to be a primitive type in the JSON string but got " + data['allowed_types']);
        }

        return true;
    }


}



/**
 * @member {String} allowed_types
 */
GeneralAttachmentSettings.prototype['allowed_types'] = undefined;

/**
 * @member {Boolean} enabled
 */
GeneralAttachmentSettings.prototype['enabled'] = undefined;

/**
 * @member {Number} max_files
 */
GeneralAttachmentSettings.prototype['max_files'] = undefined;

/**
 * @member {Number} max_size
 */
GeneralAttachmentSettings.prototype['max_size'] = undefined;






export default GeneralAttachmentSettings;

