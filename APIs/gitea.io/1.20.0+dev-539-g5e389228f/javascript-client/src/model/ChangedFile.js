/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChangedFile model module.
 * @module model/ChangedFile
 * @version 1.20.0+dev-539-g5e389228f
 */
class ChangedFile {
    /**
     * Constructs a new <code>ChangedFile</code>.
     * ChangedFile store information about files affected by the pull request
     * @alias module:model/ChangedFile
     */
    constructor() { 
        
        ChangedFile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChangedFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChangedFile} obj Optional instance to populate.
     * @return {module:model/ChangedFile} The populated <code>ChangedFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChangedFile();

            if (data.hasOwnProperty('additions')) {
                obj['additions'] = ApiClient.convertToType(data['additions'], 'Number');
            }
            if (data.hasOwnProperty('changes')) {
                obj['changes'] = ApiClient.convertToType(data['changes'], 'Number');
            }
            if (data.hasOwnProperty('contents_url')) {
                obj['contents_url'] = ApiClient.convertToType(data['contents_url'], 'String');
            }
            if (data.hasOwnProperty('deletions')) {
                obj['deletions'] = ApiClient.convertToType(data['deletions'], 'Number');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('previous_filename')) {
                obj['previous_filename'] = ApiClient.convertToType(data['previous_filename'], 'String');
            }
            if (data.hasOwnProperty('raw_url')) {
                obj['raw_url'] = ApiClient.convertToType(data['raw_url'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChangedFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChangedFile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['contents_url'] && !(typeof data['contents_url'] === 'string' || data['contents_url'] instanceof String)) {
            throw new Error("Expected the field `contents_url` to be a primitive type in the JSON string but got " + data['contents_url']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['previous_filename'] && !(typeof data['previous_filename'] === 'string' || data['previous_filename'] instanceof String)) {
            throw new Error("Expected the field `previous_filename` to be a primitive type in the JSON string but got " + data['previous_filename']);
        }
        // ensure the json data is a string
        if (data['raw_url'] && !(typeof data['raw_url'] === 'string' || data['raw_url'] instanceof String)) {
            throw new Error("Expected the field `raw_url` to be a primitive type in the JSON string but got " + data['raw_url']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * @member {Number} additions
 */
ChangedFile.prototype['additions'] = undefined;

/**
 * @member {Number} changes
 */
ChangedFile.prototype['changes'] = undefined;

/**
 * @member {String} contents_url
 */
ChangedFile.prototype['contents_url'] = undefined;

/**
 * @member {Number} deletions
 */
ChangedFile.prototype['deletions'] = undefined;

/**
 * @member {String} filename
 */
ChangedFile.prototype['filename'] = undefined;

/**
 * @member {String} html_url
 */
ChangedFile.prototype['html_url'] = undefined;

/**
 * @member {String} previous_filename
 */
ChangedFile.prototype['previous_filename'] = undefined;

/**
 * @member {String} raw_url
 */
ChangedFile.prototype['raw_url'] = undefined;

/**
 * @member {String} status
 */
ChangedFile.prototype['status'] = undefined;






export default ChangedFile;

