/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateKeyOption model module.
 * @module model/CreateKeyOption
 * @version 1.20.0+dev-539-g5e389228f
 */
class CreateKeyOption {
    /**
     * Constructs a new <code>CreateKeyOption</code>.
     * CreateKeyOption options when creating a key
     * @alias module:model/CreateKeyOption
     * @param key {String} An armored SSH key to add
     * @param title {String} Title of the key to add
     */
    constructor(key, title) { 
        
        CreateKeyOption.initialize(this, key, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, key, title) { 
        obj['key'] = key;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>CreateKeyOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateKeyOption} obj Optional instance to populate.
     * @return {module:model/CreateKeyOption} The populated <code>CreateKeyOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateKeyOption();

            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('read_only')) {
                obj['read_only'] = ApiClient.convertToType(data['read_only'], 'Boolean');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateKeyOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateKeyOption</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateKeyOption.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

CreateKeyOption.RequiredProperties = ["key", "title"];

/**
 * An armored SSH key to add
 * @member {String} key
 */
CreateKeyOption.prototype['key'] = undefined;

/**
 * Describe if the key has only read access or read/write
 * @member {Boolean} read_only
 */
CreateKeyOption.prototype['read_only'] = undefined;

/**
 * Title of the key to add
 * @member {String} title
 */
CreateKeyOption.prototype['title'] = undefined;






export default CreateKeyOption;

