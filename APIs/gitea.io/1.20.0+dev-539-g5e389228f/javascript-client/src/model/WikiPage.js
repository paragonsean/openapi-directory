/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WikiCommit from './WikiCommit';

/**
 * The WikiPage model module.
 * @module model/WikiPage
 * @version 1.20.0+dev-539-g5e389228f
 */
class WikiPage {
    /**
     * Constructs a new <code>WikiPage</code>.
     * WikiPage a wiki page
     * @alias module:model/WikiPage
     */
    constructor() { 
        
        WikiPage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WikiPage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WikiPage} obj Optional instance to populate.
     * @return {module:model/WikiPage} The populated <code>WikiPage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WikiPage();

            if (data.hasOwnProperty('commit_count')) {
                obj['commit_count'] = ApiClient.convertToType(data['commit_count'], 'Number');
            }
            if (data.hasOwnProperty('content_base64')) {
                obj['content_base64'] = ApiClient.convertToType(data['content_base64'], 'String');
            }
            if (data.hasOwnProperty('footer')) {
                obj['footer'] = ApiClient.convertToType(data['footer'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('last_commit')) {
                obj['last_commit'] = WikiCommit.constructFromObject(data['last_commit']);
            }
            if (data.hasOwnProperty('sidebar')) {
                obj['sidebar'] = ApiClient.convertToType(data['sidebar'], 'String');
            }
            if (data.hasOwnProperty('sub_url')) {
                obj['sub_url'] = ApiClient.convertToType(data['sub_url'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WikiPage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WikiPage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['content_base64'] && !(typeof data['content_base64'] === 'string' || data['content_base64'] instanceof String)) {
            throw new Error("Expected the field `content_base64` to be a primitive type in the JSON string but got " + data['content_base64']);
        }
        // ensure the json data is a string
        if (data['footer'] && !(typeof data['footer'] === 'string' || data['footer'] instanceof String)) {
            throw new Error("Expected the field `footer` to be a primitive type in the JSON string but got " + data['footer']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // validate the optional field `last_commit`
        if (data['last_commit']) { // data not null
          WikiCommit.validateJSON(data['last_commit']);
        }
        // ensure the json data is a string
        if (data['sidebar'] && !(typeof data['sidebar'] === 'string' || data['sidebar'] instanceof String)) {
            throw new Error("Expected the field `sidebar` to be a primitive type in the JSON string but got " + data['sidebar']);
        }
        // ensure the json data is a string
        if (data['sub_url'] && !(typeof data['sub_url'] === 'string' || data['sub_url'] instanceof String)) {
            throw new Error("Expected the field `sub_url` to be a primitive type in the JSON string but got " + data['sub_url']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {Number} commit_count
 */
WikiPage.prototype['commit_count'] = undefined;

/**
 * Page content, base64 encoded
 * @member {String} content_base64
 */
WikiPage.prototype['content_base64'] = undefined;

/**
 * @member {String} footer
 */
WikiPage.prototype['footer'] = undefined;

/**
 * @member {String} html_url
 */
WikiPage.prototype['html_url'] = undefined;

/**
 * @member {module:model/WikiCommit} last_commit
 */
WikiPage.prototype['last_commit'] = undefined;

/**
 * @member {String} sidebar
 */
WikiPage.prototype['sidebar'] = undefined;

/**
 * @member {String} sub_url
 */
WikiPage.prototype['sub_url'] = undefined;

/**
 * @member {String} title
 */
WikiPage.prototype['title'] = undefined;






export default WikiPage;

