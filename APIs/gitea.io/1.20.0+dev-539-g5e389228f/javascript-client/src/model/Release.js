/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';
import User from './User';

/**
 * The Release model module.
 * @module model/Release
 * @version 1.20.0+dev-539-g5e389228f
 */
class Release {
    /**
     * Constructs a new <code>Release</code>.
     * Release represents a repository release
     * @alias module:model/Release
     */
    constructor() { 
        
        Release.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Release</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Release} obj Optional instance to populate.
     * @return {module:model/Release} The populated <code>Release</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Release();

            if (data.hasOwnProperty('assets')) {
                obj['assets'] = ApiClient.convertToType(data['assets'], [Attachment]);
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = User.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('draft')) {
                obj['draft'] = ApiClient.convertToType(data['draft'], 'Boolean');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('prerelease')) {
                obj['prerelease'] = ApiClient.convertToType(data['prerelease'], 'Boolean');
            }
            if (data.hasOwnProperty('published_at')) {
                obj['published_at'] = ApiClient.convertToType(data['published_at'], 'Date');
            }
            if (data.hasOwnProperty('tag_name')) {
                obj['tag_name'] = ApiClient.convertToType(data['tag_name'], 'String');
            }
            if (data.hasOwnProperty('tarball_url')) {
                obj['tarball_url'] = ApiClient.convertToType(data['tarball_url'], 'String');
            }
            if (data.hasOwnProperty('target_commitish')) {
                obj['target_commitish'] = ApiClient.convertToType(data['target_commitish'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('zipball_url')) {
                obj['zipball_url'] = ApiClient.convertToType(data['zipball_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Release</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Release</code>.
     */
    static validateJSON(data) {
        if (data['assets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['assets'])) {
                throw new Error("Expected the field `assets` to be an array in the JSON data but got " + data['assets']);
            }
            // validate the optional field `assets` (array)
            for (const item of data['assets']) {
                Attachment.validateJSON(item);
            };
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          User.validateJSON(data['author']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['tag_name'] && !(typeof data['tag_name'] === 'string' || data['tag_name'] instanceof String)) {
            throw new Error("Expected the field `tag_name` to be a primitive type in the JSON string but got " + data['tag_name']);
        }
        // ensure the json data is a string
        if (data['tarball_url'] && !(typeof data['tarball_url'] === 'string' || data['tarball_url'] instanceof String)) {
            throw new Error("Expected the field `tarball_url` to be a primitive type in the JSON string but got " + data['tarball_url']);
        }
        // ensure the json data is a string
        if (data['target_commitish'] && !(typeof data['target_commitish'] === 'string' || data['target_commitish'] instanceof String)) {
            throw new Error("Expected the field `target_commitish` to be a primitive type in the JSON string but got " + data['target_commitish']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['zipball_url'] && !(typeof data['zipball_url'] === 'string' || data['zipball_url'] instanceof String)) {
            throw new Error("Expected the field `zipball_url` to be a primitive type in the JSON string but got " + data['zipball_url']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Attachment>} assets
 */
Release.prototype['assets'] = undefined;

/**
 * @member {module:model/User} author
 */
Release.prototype['author'] = undefined;

/**
 * @member {String} body
 */
Release.prototype['body'] = undefined;

/**
 * @member {Date} created_at
 */
Release.prototype['created_at'] = undefined;

/**
 * @member {Boolean} draft
 */
Release.prototype['draft'] = undefined;

/**
 * @member {String} html_url
 */
Release.prototype['html_url'] = undefined;

/**
 * @member {Number} id
 */
Release.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Release.prototype['name'] = undefined;

/**
 * @member {Boolean} prerelease
 */
Release.prototype['prerelease'] = undefined;

/**
 * @member {Date} published_at
 */
Release.prototype['published_at'] = undefined;

/**
 * @member {String} tag_name
 */
Release.prototype['tag_name'] = undefined;

/**
 * @member {String} tarball_url
 */
Release.prototype['tarball_url'] = undefined;

/**
 * @member {String} target_commitish
 */
Release.prototype['target_commitish'] = undefined;

/**
 * @member {String} url
 */
Release.prototype['url'] = undefined;

/**
 * @member {String} zipball_url
 */
Release.prototype['zipball_url'] = undefined;






export default Release;

