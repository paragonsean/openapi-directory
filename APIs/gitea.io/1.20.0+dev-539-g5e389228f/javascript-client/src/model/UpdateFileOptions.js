/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommitDateOptions from './CommitDateOptions';
import Identity from './Identity';

/**
 * The UpdateFileOptions model module.
 * @module model/UpdateFileOptions
 * @version 1.20.0+dev-539-g5e389228f
 */
class UpdateFileOptions {
    /**
     * Constructs a new <code>UpdateFileOptions</code>.
     * UpdateFileOptions options for updating files Note: &#x60;author&#x60; and &#x60;committer&#x60; are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)
     * @alias module:model/UpdateFileOptions
     * @param content {String} content must be base64 encoded
     * @param sha {String} sha is the SHA for the file that already exists
     */
    constructor(content, sha) { 
        
        UpdateFileOptions.initialize(this, content, sha);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, content, sha) { 
        obj['content'] = content;
        obj['sha'] = sha;
    }

    /**
     * Constructs a <code>UpdateFileOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateFileOptions} obj Optional instance to populate.
     * @return {module:model/UpdateFileOptions} The populated <code>UpdateFileOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateFileOptions();

            if (data.hasOwnProperty('author')) {
                obj['author'] = Identity.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('committer')) {
                obj['committer'] = Identity.constructFromObject(data['committer']);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('dates')) {
                obj['dates'] = CommitDateOptions.constructFromObject(data['dates']);
            }
            if (data.hasOwnProperty('from_path')) {
                obj['from_path'] = ApiClient.convertToType(data['from_path'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('new_branch')) {
                obj['new_branch'] = ApiClient.convertToType(data['new_branch'], 'String');
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('signoff')) {
                obj['signoff'] = ApiClient.convertToType(data['signoff'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateFileOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateFileOptions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateFileOptions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          Identity.validateJSON(data['author']);
        }
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }
        // validate the optional field `committer`
        if (data['committer']) { // data not null
          Identity.validateJSON(data['committer']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // validate the optional field `dates`
        if (data['dates']) { // data not null
          CommitDateOptions.validateJSON(data['dates']);
        }
        // ensure the json data is a string
        if (data['from_path'] && !(typeof data['from_path'] === 'string' || data['from_path'] instanceof String)) {
            throw new Error("Expected the field `from_path` to be a primitive type in the JSON string but got " + data['from_path']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['new_branch'] && !(typeof data['new_branch'] === 'string' || data['new_branch'] instanceof String)) {
            throw new Error("Expected the field `new_branch` to be a primitive type in the JSON string but got " + data['new_branch']);
        }
        // ensure the json data is a string
        if (data['sha'] && !(typeof data['sha'] === 'string' || data['sha'] instanceof String)) {
            throw new Error("Expected the field `sha` to be a primitive type in the JSON string but got " + data['sha']);
        }

        return true;
    }


}

UpdateFileOptions.RequiredProperties = ["content", "sha"];

/**
 * @member {module:model/Identity} author
 */
UpdateFileOptions.prototype['author'] = undefined;

/**
 * branch (optional) to base this file from. if not given, the default branch is used
 * @member {String} branch
 */
UpdateFileOptions.prototype['branch'] = undefined;

/**
 * @member {module:model/Identity} committer
 */
UpdateFileOptions.prototype['committer'] = undefined;

/**
 * content must be base64 encoded
 * @member {String} content
 */
UpdateFileOptions.prototype['content'] = undefined;

/**
 * @member {module:model/CommitDateOptions} dates
 */
UpdateFileOptions.prototype['dates'] = undefined;

/**
 * from_path (optional) is the path of the original file which will be moved/renamed to the path in the URL
 * @member {String} from_path
 */
UpdateFileOptions.prototype['from_path'] = undefined;

/**
 * message (optional) for the commit of this file. if not supplied, a default message will be used
 * @member {String} message
 */
UpdateFileOptions.prototype['message'] = undefined;

/**
 * new_branch (optional) will make a new branch from `branch` before creating the file
 * @member {String} new_branch
 */
UpdateFileOptions.prototype['new_branch'] = undefined;

/**
 * sha is the SHA for the file that already exists
 * @member {String} sha
 */
UpdateFileOptions.prototype['sha'] = undefined;

/**
 * Add a Signed-off-by trailer by the committer at the end of the commit log message.
 * @member {Boolean} signoff
 */
UpdateFileOptions.prototype['signoff'] = undefined;






export default UpdateFileOptions;

