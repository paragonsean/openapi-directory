/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';
import User from './User';

/**
 * The Comment model module.
 * @module model/Comment
 * @version 1.20.0+dev-539-g5e389228f
 */
class Comment {
    /**
     * Constructs a new <code>Comment</code>.
     * Comment represents a comment on a commit or issue
     * @alias module:model/Comment
     */
    constructor() { 
        
        Comment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Comment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Comment} obj Optional instance to populate.
     * @return {module:model/Comment} The populated <code>Comment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Comment();

            if (data.hasOwnProperty('assets')) {
                obj['assets'] = ApiClient.convertToType(data['assets'], [Attachment]);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('issue_url')) {
                obj['issue_url'] = ApiClient.convertToType(data['issue_url'], 'String');
            }
            if (data.hasOwnProperty('original_author')) {
                obj['original_author'] = ApiClient.convertToType(data['original_author'], 'String');
            }
            if (data.hasOwnProperty('original_author_id')) {
                obj['original_author_id'] = ApiClient.convertToType(data['original_author_id'], 'Number');
            }
            if (data.hasOwnProperty('pull_request_url')) {
                obj['pull_request_url'] = ApiClient.convertToType(data['pull_request_url'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Comment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Comment</code>.
     */
    static validateJSON(data) {
        if (data['assets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['assets'])) {
                throw new Error("Expected the field `assets` to be an array in the JSON data but got " + data['assets']);
            }
            // validate the optional field `assets` (array)
            for (const item of data['assets']) {
                Attachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['issue_url'] && !(typeof data['issue_url'] === 'string' || data['issue_url'] instanceof String)) {
            throw new Error("Expected the field `issue_url` to be a primitive type in the JSON string but got " + data['issue_url']);
        }
        // ensure the json data is a string
        if (data['original_author'] && !(typeof data['original_author'] === 'string' || data['original_author'] instanceof String)) {
            throw new Error("Expected the field `original_author` to be a primitive type in the JSON string but got " + data['original_author']);
        }
        // ensure the json data is a string
        if (data['pull_request_url'] && !(typeof data['pull_request_url'] === 'string' || data['pull_request_url'] instanceof String)) {
            throw new Error("Expected the field `pull_request_url` to be a primitive type in the JSON string but got " + data['pull_request_url']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Attachment>} assets
 */
Comment.prototype['assets'] = undefined;

/**
 * @member {String} body
 */
Comment.prototype['body'] = undefined;

/**
 * @member {Date} created_at
 */
Comment.prototype['created_at'] = undefined;

/**
 * @member {String} html_url
 */
Comment.prototype['html_url'] = undefined;

/**
 * @member {Number} id
 */
Comment.prototype['id'] = undefined;

/**
 * @member {String} issue_url
 */
Comment.prototype['issue_url'] = undefined;

/**
 * @member {String} original_author
 */
Comment.prototype['original_author'] = undefined;

/**
 * @member {Number} original_author_id
 */
Comment.prototype['original_author_id'] = undefined;

/**
 * @member {String} pull_request_url
 */
Comment.prototype['pull_request_url'] = undefined;

/**
 * @member {Date} updated_at
 */
Comment.prototype['updated_at'] = undefined;

/**
 * @member {module:model/User} user
 */
Comment.prototype['user'] = undefined;






export default Comment;

