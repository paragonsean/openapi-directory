/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotificationSubject model module.
 * @module model/NotificationSubject
 * @version 1.20.0+dev-539-g5e389228f
 */
class NotificationSubject {
    /**
     * Constructs a new <code>NotificationSubject</code>.
     * NotificationSubject contains the notification subject (Issue/Pull/Commit)
     * @alias module:model/NotificationSubject
     */
    constructor() { 
        
        NotificationSubject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NotificationSubject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationSubject} obj Optional instance to populate.
     * @return {module:model/NotificationSubject} The populated <code>NotificationSubject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationSubject();

            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('latest_comment_html_url')) {
                obj['latest_comment_html_url'] = ApiClient.convertToType(data['latest_comment_html_url'], 'String');
            }
            if (data.hasOwnProperty('latest_comment_url')) {
                obj['latest_comment_url'] = ApiClient.convertToType(data['latest_comment_url'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationSubject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationSubject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['latest_comment_html_url'] && !(typeof data['latest_comment_html_url'] === 'string' || data['latest_comment_html_url'] instanceof String)) {
            throw new Error("Expected the field `latest_comment_html_url` to be a primitive type in the JSON string but got " + data['latest_comment_html_url']);
        }
        // ensure the json data is a string
        if (data['latest_comment_url'] && !(typeof data['latest_comment_url'] === 'string' || data['latest_comment_url'] instanceof String)) {
            throw new Error("Expected the field `latest_comment_url` to be a primitive type in the JSON string but got " + data['latest_comment_url']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {String} html_url
 */
NotificationSubject.prototype['html_url'] = undefined;

/**
 * @member {String} latest_comment_html_url
 */
NotificationSubject.prototype['latest_comment_html_url'] = undefined;

/**
 * @member {String} latest_comment_url
 */
NotificationSubject.prototype['latest_comment_url'] = undefined;

/**
 * StateType issue state type
 * @member {String} state
 */
NotificationSubject.prototype['state'] = undefined;

/**
 * @member {String} title
 */
NotificationSubject.prototype['title'] = undefined;

/**
 * NotifySubjectType represent type of notification subject
 * @member {String} type
 */
NotificationSubject.prototype['type'] = undefined;

/**
 * @member {String} url
 */
NotificationSubject.prototype['url'] = undefined;






export default NotificationSubject;

