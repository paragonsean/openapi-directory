/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Team from './Team';
import User from './User';

/**
 * The PullReview model module.
 * @module model/PullReview
 * @version 1.20.0+dev-539-g5e389228f
 */
class PullReview {
    /**
     * Constructs a new <code>PullReview</code>.
     * PullReview represents a pull request review
     * @alias module:model/PullReview
     */
    constructor() { 
        
        PullReview.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PullReview</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PullReview} obj Optional instance to populate.
     * @return {module:model/PullReview} The populated <code>PullReview</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PullReview();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('comments_count')) {
                obj['comments_count'] = ApiClient.convertToType(data['comments_count'], 'Number');
            }
            if (data.hasOwnProperty('commit_id')) {
                obj['commit_id'] = ApiClient.convertToType(data['commit_id'], 'String');
            }
            if (data.hasOwnProperty('dismissed')) {
                obj['dismissed'] = ApiClient.convertToType(data['dismissed'], 'Boolean');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('official')) {
                obj['official'] = ApiClient.convertToType(data['official'], 'Boolean');
            }
            if (data.hasOwnProperty('pull_request_url')) {
                obj['pull_request_url'] = ApiClient.convertToType(data['pull_request_url'], 'String');
            }
            if (data.hasOwnProperty('stale')) {
                obj['stale'] = ApiClient.convertToType(data['stale'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('submitted_at')) {
                obj['submitted_at'] = ApiClient.convertToType(data['submitted_at'], 'Date');
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = Team.constructFromObject(data['team']);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PullReview</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PullReview</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['commit_id'] && !(typeof data['commit_id'] === 'string' || data['commit_id'] instanceof String)) {
            throw new Error("Expected the field `commit_id` to be a primitive type in the JSON string but got " + data['commit_id']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['pull_request_url'] && !(typeof data['pull_request_url'] === 'string' || data['pull_request_url'] instanceof String)) {
            throw new Error("Expected the field `pull_request_url` to be a primitive type in the JSON string but got " + data['pull_request_url']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `team`
        if (data['team']) { // data not null
          Team.validateJSON(data['team']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {String} body
 */
PullReview.prototype['body'] = undefined;

/**
 * @member {Number} comments_count
 */
PullReview.prototype['comments_count'] = undefined;

/**
 * @member {String} commit_id
 */
PullReview.prototype['commit_id'] = undefined;

/**
 * @member {Boolean} dismissed
 */
PullReview.prototype['dismissed'] = undefined;

/**
 * @member {String} html_url
 */
PullReview.prototype['html_url'] = undefined;

/**
 * @member {Number} id
 */
PullReview.prototype['id'] = undefined;

/**
 * @member {Boolean} official
 */
PullReview.prototype['official'] = undefined;

/**
 * @member {String} pull_request_url
 */
PullReview.prototype['pull_request_url'] = undefined;

/**
 * @member {Boolean} stale
 */
PullReview.prototype['stale'] = undefined;

/**
 * ReviewStateType review state type
 * @member {String} state
 */
PullReview.prototype['state'] = undefined;

/**
 * @member {Date} submitted_at
 */
PullReview.prototype['submitted_at'] = undefined;

/**
 * @member {module:model/Team} team
 */
PullReview.prototype['team'] = undefined;

/**
 * @member {Date} updated_at
 */
PullReview.prototype['updated_at'] = undefined;

/**
 * @member {module:model/User} user
 */
PullReview.prototype['user'] = undefined;






export default PullReview;

