/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EditBranchProtectionOption model module.
 * @module model/EditBranchProtectionOption
 * @version 1.20.0+dev-539-g5e389228f
 */
class EditBranchProtectionOption {
    /**
     * Constructs a new <code>EditBranchProtectionOption</code>.
     * EditBranchProtectionOption options for editing a branch protection
     * @alias module:model/EditBranchProtectionOption
     */
    constructor() { 
        
        EditBranchProtectionOption.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EditBranchProtectionOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EditBranchProtectionOption} obj Optional instance to populate.
     * @return {module:model/EditBranchProtectionOption} The populated <code>EditBranchProtectionOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EditBranchProtectionOption();

            if (data.hasOwnProperty('approvals_whitelist_teams')) {
                obj['approvals_whitelist_teams'] = ApiClient.convertToType(data['approvals_whitelist_teams'], ['String']);
            }
            if (data.hasOwnProperty('approvals_whitelist_username')) {
                obj['approvals_whitelist_username'] = ApiClient.convertToType(data['approvals_whitelist_username'], ['String']);
            }
            if (data.hasOwnProperty('block_on_official_review_requests')) {
                obj['block_on_official_review_requests'] = ApiClient.convertToType(data['block_on_official_review_requests'], 'Boolean');
            }
            if (data.hasOwnProperty('block_on_outdated_branch')) {
                obj['block_on_outdated_branch'] = ApiClient.convertToType(data['block_on_outdated_branch'], 'Boolean');
            }
            if (data.hasOwnProperty('block_on_rejected_reviews')) {
                obj['block_on_rejected_reviews'] = ApiClient.convertToType(data['block_on_rejected_reviews'], 'Boolean');
            }
            if (data.hasOwnProperty('dismiss_stale_approvals')) {
                obj['dismiss_stale_approvals'] = ApiClient.convertToType(data['dismiss_stale_approvals'], 'Boolean');
            }
            if (data.hasOwnProperty('enable_approvals_whitelist')) {
                obj['enable_approvals_whitelist'] = ApiClient.convertToType(data['enable_approvals_whitelist'], 'Boolean');
            }
            if (data.hasOwnProperty('enable_merge_whitelist')) {
                obj['enable_merge_whitelist'] = ApiClient.convertToType(data['enable_merge_whitelist'], 'Boolean');
            }
            if (data.hasOwnProperty('enable_push')) {
                obj['enable_push'] = ApiClient.convertToType(data['enable_push'], 'Boolean');
            }
            if (data.hasOwnProperty('enable_push_whitelist')) {
                obj['enable_push_whitelist'] = ApiClient.convertToType(data['enable_push_whitelist'], 'Boolean');
            }
            if (data.hasOwnProperty('enable_status_check')) {
                obj['enable_status_check'] = ApiClient.convertToType(data['enable_status_check'], 'Boolean');
            }
            if (data.hasOwnProperty('merge_whitelist_teams')) {
                obj['merge_whitelist_teams'] = ApiClient.convertToType(data['merge_whitelist_teams'], ['String']);
            }
            if (data.hasOwnProperty('merge_whitelist_usernames')) {
                obj['merge_whitelist_usernames'] = ApiClient.convertToType(data['merge_whitelist_usernames'], ['String']);
            }
            if (data.hasOwnProperty('protected_file_patterns')) {
                obj['protected_file_patterns'] = ApiClient.convertToType(data['protected_file_patterns'], 'String');
            }
            if (data.hasOwnProperty('push_whitelist_deploy_keys')) {
                obj['push_whitelist_deploy_keys'] = ApiClient.convertToType(data['push_whitelist_deploy_keys'], 'Boolean');
            }
            if (data.hasOwnProperty('push_whitelist_teams')) {
                obj['push_whitelist_teams'] = ApiClient.convertToType(data['push_whitelist_teams'], ['String']);
            }
            if (data.hasOwnProperty('push_whitelist_usernames')) {
                obj['push_whitelist_usernames'] = ApiClient.convertToType(data['push_whitelist_usernames'], ['String']);
            }
            if (data.hasOwnProperty('require_signed_commits')) {
                obj['require_signed_commits'] = ApiClient.convertToType(data['require_signed_commits'], 'Boolean');
            }
            if (data.hasOwnProperty('required_approvals')) {
                obj['required_approvals'] = ApiClient.convertToType(data['required_approvals'], 'Number');
            }
            if (data.hasOwnProperty('status_check_contexts')) {
                obj['status_check_contexts'] = ApiClient.convertToType(data['status_check_contexts'], ['String']);
            }
            if (data.hasOwnProperty('unprotected_file_patterns')) {
                obj['unprotected_file_patterns'] = ApiClient.convertToType(data['unprotected_file_patterns'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EditBranchProtectionOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EditBranchProtectionOption</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['approvals_whitelist_teams'])) {
            throw new Error("Expected the field `approvals_whitelist_teams` to be an array in the JSON data but got " + data['approvals_whitelist_teams']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['approvals_whitelist_username'])) {
            throw new Error("Expected the field `approvals_whitelist_username` to be an array in the JSON data but got " + data['approvals_whitelist_username']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['merge_whitelist_teams'])) {
            throw new Error("Expected the field `merge_whitelist_teams` to be an array in the JSON data but got " + data['merge_whitelist_teams']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['merge_whitelist_usernames'])) {
            throw new Error("Expected the field `merge_whitelist_usernames` to be an array in the JSON data but got " + data['merge_whitelist_usernames']);
        }
        // ensure the json data is a string
        if (data['protected_file_patterns'] && !(typeof data['protected_file_patterns'] === 'string' || data['protected_file_patterns'] instanceof String)) {
            throw new Error("Expected the field `protected_file_patterns` to be a primitive type in the JSON string but got " + data['protected_file_patterns']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['push_whitelist_teams'])) {
            throw new Error("Expected the field `push_whitelist_teams` to be an array in the JSON data but got " + data['push_whitelist_teams']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['push_whitelist_usernames'])) {
            throw new Error("Expected the field `push_whitelist_usernames` to be an array in the JSON data but got " + data['push_whitelist_usernames']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['status_check_contexts'])) {
            throw new Error("Expected the field `status_check_contexts` to be an array in the JSON data but got " + data['status_check_contexts']);
        }
        // ensure the json data is a string
        if (data['unprotected_file_patterns'] && !(typeof data['unprotected_file_patterns'] === 'string' || data['unprotected_file_patterns'] instanceof String)) {
            throw new Error("Expected the field `unprotected_file_patterns` to be a primitive type in the JSON string but got " + data['unprotected_file_patterns']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} approvals_whitelist_teams
 */
EditBranchProtectionOption.prototype['approvals_whitelist_teams'] = undefined;

/**
 * @member {Array.<String>} approvals_whitelist_username
 */
EditBranchProtectionOption.prototype['approvals_whitelist_username'] = undefined;

/**
 * @member {Boolean} block_on_official_review_requests
 */
EditBranchProtectionOption.prototype['block_on_official_review_requests'] = undefined;

/**
 * @member {Boolean} block_on_outdated_branch
 */
EditBranchProtectionOption.prototype['block_on_outdated_branch'] = undefined;

/**
 * @member {Boolean} block_on_rejected_reviews
 */
EditBranchProtectionOption.prototype['block_on_rejected_reviews'] = undefined;

/**
 * @member {Boolean} dismiss_stale_approvals
 */
EditBranchProtectionOption.prototype['dismiss_stale_approvals'] = undefined;

/**
 * @member {Boolean} enable_approvals_whitelist
 */
EditBranchProtectionOption.prototype['enable_approvals_whitelist'] = undefined;

/**
 * @member {Boolean} enable_merge_whitelist
 */
EditBranchProtectionOption.prototype['enable_merge_whitelist'] = undefined;

/**
 * @member {Boolean} enable_push
 */
EditBranchProtectionOption.prototype['enable_push'] = undefined;

/**
 * @member {Boolean} enable_push_whitelist
 */
EditBranchProtectionOption.prototype['enable_push_whitelist'] = undefined;

/**
 * @member {Boolean} enable_status_check
 */
EditBranchProtectionOption.prototype['enable_status_check'] = undefined;

/**
 * @member {Array.<String>} merge_whitelist_teams
 */
EditBranchProtectionOption.prototype['merge_whitelist_teams'] = undefined;

/**
 * @member {Array.<String>} merge_whitelist_usernames
 */
EditBranchProtectionOption.prototype['merge_whitelist_usernames'] = undefined;

/**
 * @member {String} protected_file_patterns
 */
EditBranchProtectionOption.prototype['protected_file_patterns'] = undefined;

/**
 * @member {Boolean} push_whitelist_deploy_keys
 */
EditBranchProtectionOption.prototype['push_whitelist_deploy_keys'] = undefined;

/**
 * @member {Array.<String>} push_whitelist_teams
 */
EditBranchProtectionOption.prototype['push_whitelist_teams'] = undefined;

/**
 * @member {Array.<String>} push_whitelist_usernames
 */
EditBranchProtectionOption.prototype['push_whitelist_usernames'] = undefined;

/**
 * @member {Boolean} require_signed_commits
 */
EditBranchProtectionOption.prototype['require_signed_commits'] = undefined;

/**
 * @member {Number} required_approvals
 */
EditBranchProtectionOption.prototype['required_approvals'] = undefined;

/**
 * @member {Array.<String>} status_check_contexts
 */
EditBranchProtectionOption.prototype['status_check_contexts'] = undefined;

/**
 * @member {String} unprotected_file_patterns
 */
EditBranchProtectionOption.prototype['unprotected_file_patterns'] = undefined;






export default EditBranchProtectionOption;

