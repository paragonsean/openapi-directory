/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PushMirror model module.
 * @module model/PushMirror
 * @version 1.20.0+dev-539-g5e389228f
 */
class PushMirror {
    /**
     * Constructs a new <code>PushMirror</code>.
     * PushMirror represents information of a push mirror
     * @alias module:model/PushMirror
     */
    constructor() { 
        
        PushMirror.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PushMirror</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PushMirror} obj Optional instance to populate.
     * @return {module:model/PushMirror} The populated <code>PushMirror</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PushMirror();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'String');
            }
            if (data.hasOwnProperty('last_error')) {
                obj['last_error'] = ApiClient.convertToType(data['last_error'], 'String');
            }
            if (data.hasOwnProperty('last_update')) {
                obj['last_update'] = ApiClient.convertToType(data['last_update'], 'String');
            }
            if (data.hasOwnProperty('remote_address')) {
                obj['remote_address'] = ApiClient.convertToType(data['remote_address'], 'String');
            }
            if (data.hasOwnProperty('remote_name')) {
                obj['remote_name'] = ApiClient.convertToType(data['remote_name'], 'String');
            }
            if (data.hasOwnProperty('repo_name')) {
                obj['repo_name'] = ApiClient.convertToType(data['repo_name'], 'String');
            }
            if (data.hasOwnProperty('sync_on_commit')) {
                obj['sync_on_commit'] = ApiClient.convertToType(data['sync_on_commit'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PushMirror</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PushMirror</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['interval'] && !(typeof data['interval'] === 'string' || data['interval'] instanceof String)) {
            throw new Error("Expected the field `interval` to be a primitive type in the JSON string but got " + data['interval']);
        }
        // ensure the json data is a string
        if (data['last_error'] && !(typeof data['last_error'] === 'string' || data['last_error'] instanceof String)) {
            throw new Error("Expected the field `last_error` to be a primitive type in the JSON string but got " + data['last_error']);
        }
        // ensure the json data is a string
        if (data['last_update'] && !(typeof data['last_update'] === 'string' || data['last_update'] instanceof String)) {
            throw new Error("Expected the field `last_update` to be a primitive type in the JSON string but got " + data['last_update']);
        }
        // ensure the json data is a string
        if (data['remote_address'] && !(typeof data['remote_address'] === 'string' || data['remote_address'] instanceof String)) {
            throw new Error("Expected the field `remote_address` to be a primitive type in the JSON string but got " + data['remote_address']);
        }
        // ensure the json data is a string
        if (data['remote_name'] && !(typeof data['remote_name'] === 'string' || data['remote_name'] instanceof String)) {
            throw new Error("Expected the field `remote_name` to be a primitive type in the JSON string but got " + data['remote_name']);
        }
        // ensure the json data is a string
        if (data['repo_name'] && !(typeof data['repo_name'] === 'string' || data['repo_name'] instanceof String)) {
            throw new Error("Expected the field `repo_name` to be a primitive type in the JSON string but got " + data['repo_name']);
        }

        return true;
    }


}



/**
 * @member {String} created
 */
PushMirror.prototype['created'] = undefined;

/**
 * @member {String} interval
 */
PushMirror.prototype['interval'] = undefined;

/**
 * @member {String} last_error
 */
PushMirror.prototype['last_error'] = undefined;

/**
 * @member {String} last_update
 */
PushMirror.prototype['last_update'] = undefined;

/**
 * @member {String} remote_address
 */
PushMirror.prototype['remote_address'] = undefined;

/**
 * @member {String} remote_name
 */
PushMirror.prototype['remote_name'] = undefined;

/**
 * @member {String} repo_name
 */
PushMirror.prototype['repo_name'] = undefined;

/**
 * @member {Boolean} sync_on_commit
 */
PushMirror.prototype['sync_on_commit'] = undefined;






export default PushMirror;

