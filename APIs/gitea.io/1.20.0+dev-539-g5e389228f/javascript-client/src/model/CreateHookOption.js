/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateHookOption model module.
 * @module model/CreateHookOption
 * @version 1.20.0+dev-539-g5e389228f
 */
class CreateHookOption {
    /**
     * Constructs a new <code>CreateHookOption</code>.
     * CreateHookOption options when create a hook
     * @alias module:model/CreateHookOption
     * @param config {Object.<String, String>} CreateHookOptionConfig has all config options in it required are \"content_type\" and \"url\" Required
     * @param type {module:model/CreateHookOption.TypeEnum} 
     */
    constructor(config, type) { 
        
        CreateHookOption.initialize(this, config, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, config, type) { 
        obj['active'] = false;
        obj['config'] = config;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CreateHookOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateHookOption} obj Optional instance to populate.
     * @return {module:model/CreateHookOption} The populated <code>CreateHookOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateHookOption();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('authorization_header')) {
                obj['authorization_header'] = ApiClient.convertToType(data['authorization_header'], 'String');
            }
            if (data.hasOwnProperty('branch_filter')) {
                obj['branch_filter'] = ApiClient.convertToType(data['branch_filter'], 'String');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], {'String': 'String'});
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateHookOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateHookOption</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateHookOption.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['authorization_header'] && !(typeof data['authorization_header'] === 'string' || data['authorization_header'] instanceof String)) {
            throw new Error("Expected the field `authorization_header` to be a primitive type in the JSON string but got " + data['authorization_header']);
        }
        // ensure the json data is a string
        if (data['branch_filter'] && !(typeof data['branch_filter'] === 'string' || data['branch_filter'] instanceof String)) {
            throw new Error("Expected the field `branch_filter` to be a primitive type in the JSON string but got " + data['branch_filter']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['events'])) {
            throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

CreateHookOption.RequiredProperties = ["config", "type"];

/**
 * @member {Boolean} active
 * @default false
 */
CreateHookOption.prototype['active'] = false;

/**
 * @member {String} authorization_header
 */
CreateHookOption.prototype['authorization_header'] = undefined;

/**
 * @member {String} branch_filter
 */
CreateHookOption.prototype['branch_filter'] = undefined;

/**
 * CreateHookOptionConfig has all config options in it required are \"content_type\" and \"url\" Required
 * @member {Object.<String, String>} config
 */
CreateHookOption.prototype['config'] = undefined;

/**
 * @member {Array.<String>} events
 */
CreateHookOption.prototype['events'] = undefined;

/**
 * @member {module:model/CreateHookOption.TypeEnum} type
 */
CreateHookOption.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CreateHookOption['TypeEnum'] = {

    /**
     * value: "dingtalk"
     * @const
     */
    "dingtalk": "dingtalk",

    /**
     * value: "discord"
     * @const
     */
    "discord": "discord",

    /**
     * value: "gitea"
     * @const
     */
    "gitea": "gitea",

    /**
     * value: "gogs"
     * @const
     */
    "gogs": "gogs",

    /**
     * value: "msteams"
     * @const
     */
    "msteams": "msteams",

    /**
     * value: "slack"
     * @const
     */
    "slack": "slack",

    /**
     * value: "telegram"
     * @const
     */
    "telegram": "telegram",

    /**
     * value: "feishu"
     * @const
     */
    "feishu": "feishu",

    /**
     * value: "wechatwork"
     * @const
     */
    "wechatwork": "wechatwork",

    /**
     * value: "packagist"
     * @const
     */
    "packagist": "packagist"
};



export default CreateHookOption;

