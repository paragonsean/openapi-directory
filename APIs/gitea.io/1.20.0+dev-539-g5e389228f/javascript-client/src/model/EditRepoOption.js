/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExternalTracker from './ExternalTracker';
import ExternalWiki from './ExternalWiki';
import InternalTracker from './InternalTracker';

/**
 * The EditRepoOption model module.
 * @module model/EditRepoOption
 * @version 1.20.0+dev-539-g5e389228f
 */
class EditRepoOption {
    /**
     * Constructs a new <code>EditRepoOption</code>.
     * EditRepoOption options when editing a repository&#39;s properties
     * @alias module:model/EditRepoOption
     */
    constructor() { 
        
        EditRepoOption.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EditRepoOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EditRepoOption} obj Optional instance to populate.
     * @return {module:model/EditRepoOption} The populated <code>EditRepoOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EditRepoOption();

            if (data.hasOwnProperty('allow_manual_merge')) {
                obj['allow_manual_merge'] = ApiClient.convertToType(data['allow_manual_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_merge_commits')) {
                obj['allow_merge_commits'] = ApiClient.convertToType(data['allow_merge_commits'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_rebase')) {
                obj['allow_rebase'] = ApiClient.convertToType(data['allow_rebase'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_rebase_explicit')) {
                obj['allow_rebase_explicit'] = ApiClient.convertToType(data['allow_rebase_explicit'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_rebase_update')) {
                obj['allow_rebase_update'] = ApiClient.convertToType(data['allow_rebase_update'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_squash_merge')) {
                obj['allow_squash_merge'] = ApiClient.convertToType(data['allow_squash_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('autodetect_manual_merge')) {
                obj['autodetect_manual_merge'] = ApiClient.convertToType(data['autodetect_manual_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('default_allow_maintainer_edit')) {
                obj['default_allow_maintainer_edit'] = ApiClient.convertToType(data['default_allow_maintainer_edit'], 'Boolean');
            }
            if (data.hasOwnProperty('default_branch')) {
                obj['default_branch'] = ApiClient.convertToType(data['default_branch'], 'String');
            }
            if (data.hasOwnProperty('default_delete_branch_after_merge')) {
                obj['default_delete_branch_after_merge'] = ApiClient.convertToType(data['default_delete_branch_after_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('default_merge_style')) {
                obj['default_merge_style'] = ApiClient.convertToType(data['default_merge_style'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enable_prune')) {
                obj['enable_prune'] = ApiClient.convertToType(data['enable_prune'], 'Boolean');
            }
            if (data.hasOwnProperty('external_tracker')) {
                obj['external_tracker'] = ExternalTracker.constructFromObject(data['external_tracker']);
            }
            if (data.hasOwnProperty('external_wiki')) {
                obj['external_wiki'] = ExternalWiki.constructFromObject(data['external_wiki']);
            }
            if (data.hasOwnProperty('has_actions')) {
                obj['has_actions'] = ApiClient.convertToType(data['has_actions'], 'Boolean');
            }
            if (data.hasOwnProperty('has_issues')) {
                obj['has_issues'] = ApiClient.convertToType(data['has_issues'], 'Boolean');
            }
            if (data.hasOwnProperty('has_packages')) {
                obj['has_packages'] = ApiClient.convertToType(data['has_packages'], 'Boolean');
            }
            if (data.hasOwnProperty('has_projects')) {
                obj['has_projects'] = ApiClient.convertToType(data['has_projects'], 'Boolean');
            }
            if (data.hasOwnProperty('has_pull_requests')) {
                obj['has_pull_requests'] = ApiClient.convertToType(data['has_pull_requests'], 'Boolean');
            }
            if (data.hasOwnProperty('has_releases')) {
                obj['has_releases'] = ApiClient.convertToType(data['has_releases'], 'Boolean');
            }
            if (data.hasOwnProperty('has_wiki')) {
                obj['has_wiki'] = ApiClient.convertToType(data['has_wiki'], 'Boolean');
            }
            if (data.hasOwnProperty('ignore_whitespace_conflicts')) {
                obj['ignore_whitespace_conflicts'] = ApiClient.convertToType(data['ignore_whitespace_conflicts'], 'Boolean');
            }
            if (data.hasOwnProperty('internal_tracker')) {
                obj['internal_tracker'] = InternalTracker.constructFromObject(data['internal_tracker']);
            }
            if (data.hasOwnProperty('mirror_interval')) {
                obj['mirror_interval'] = ApiClient.convertToType(data['mirror_interval'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('private')) {
                obj['private'] = ApiClient.convertToType(data['private'], 'Boolean');
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], 'Boolean');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EditRepoOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EditRepoOption</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['default_branch'] && !(typeof data['default_branch'] === 'string' || data['default_branch'] instanceof String)) {
            throw new Error("Expected the field `default_branch` to be a primitive type in the JSON string but got " + data['default_branch']);
        }
        // ensure the json data is a string
        if (data['default_merge_style'] && !(typeof data['default_merge_style'] === 'string' || data['default_merge_style'] instanceof String)) {
            throw new Error("Expected the field `default_merge_style` to be a primitive type in the JSON string but got " + data['default_merge_style']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `external_tracker`
        if (data['external_tracker']) { // data not null
          ExternalTracker.validateJSON(data['external_tracker']);
        }
        // validate the optional field `external_wiki`
        if (data['external_wiki']) { // data not null
          ExternalWiki.validateJSON(data['external_wiki']);
        }
        // validate the optional field `internal_tracker`
        if (data['internal_tracker']) { // data not null
          InternalTracker.validateJSON(data['internal_tracker']);
        }
        // ensure the json data is a string
        if (data['mirror_interval'] && !(typeof data['mirror_interval'] === 'string' || data['mirror_interval'] instanceof String)) {
            throw new Error("Expected the field `mirror_interval` to be a primitive type in the JSON string but got " + data['mirror_interval']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}



/**
 * either `true` to allow mark pr as merged manually, or `false` to prevent it.
 * @member {Boolean} allow_manual_merge
 */
EditRepoOption.prototype['allow_manual_merge'] = undefined;

/**
 * either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
 * @member {Boolean} allow_merge_commits
 */
EditRepoOption.prototype['allow_merge_commits'] = undefined;

/**
 * either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
 * @member {Boolean} allow_rebase
 */
EditRepoOption.prototype['allow_rebase'] = undefined;

/**
 * either `true` to allow rebase with explicit merge commits (--no-ff), or `false` to prevent rebase with explicit merge commits.
 * @member {Boolean} allow_rebase_explicit
 */
EditRepoOption.prototype['allow_rebase_explicit'] = undefined;

/**
 * either `true` to allow updating pull request branch by rebase, or `false` to prevent it.
 * @member {Boolean} allow_rebase_update
 */
EditRepoOption.prototype['allow_rebase_update'] = undefined;

/**
 * either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
 * @member {Boolean} allow_squash_merge
 */
EditRepoOption.prototype['allow_squash_merge'] = undefined;

/**
 * set to `true` to archive this repository.
 * @member {Boolean} archived
 */
EditRepoOption.prototype['archived'] = undefined;

/**
 * either `true` to enable AutodetectManualMerge, or `false` to prevent it. Note: In some special cases, misjudgments can occur.
 * @member {Boolean} autodetect_manual_merge
 */
EditRepoOption.prototype['autodetect_manual_merge'] = undefined;

/**
 * set to `true` to allow edits from maintainers by default
 * @member {Boolean} default_allow_maintainer_edit
 */
EditRepoOption.prototype['default_allow_maintainer_edit'] = undefined;

/**
 * sets the default branch for this repository.
 * @member {String} default_branch
 */
EditRepoOption.prototype['default_branch'] = undefined;

/**
 * set to `true` to delete pr branch after merge by default
 * @member {Boolean} default_delete_branch_after_merge
 */
EditRepoOption.prototype['default_delete_branch_after_merge'] = undefined;

/**
 * set to a merge style to be used by this repository: \"merge\", \"rebase\", \"rebase-merge\", or \"squash\".
 * @member {String} default_merge_style
 */
EditRepoOption.prototype['default_merge_style'] = undefined;

/**
 * a short description of the repository.
 * @member {String} description
 */
EditRepoOption.prototype['description'] = undefined;

/**
 * enable prune - remove obsolete remote-tracking references
 * @member {Boolean} enable_prune
 */
EditRepoOption.prototype['enable_prune'] = undefined;

/**
 * @member {module:model/ExternalTracker} external_tracker
 */
EditRepoOption.prototype['external_tracker'] = undefined;

/**
 * @member {module:model/ExternalWiki} external_wiki
 */
EditRepoOption.prototype['external_wiki'] = undefined;

/**
 * either `true` to enable actions unit, or `false` to disable them.
 * @member {Boolean} has_actions
 */
EditRepoOption.prototype['has_actions'] = undefined;

/**
 * either `true` to enable issues for this repository or `false` to disable them.
 * @member {Boolean} has_issues
 */
EditRepoOption.prototype['has_issues'] = undefined;

/**
 * either `true` to enable packages unit, or `false` to disable them.
 * @member {Boolean} has_packages
 */
EditRepoOption.prototype['has_packages'] = undefined;

/**
 * either `true` to enable project unit, or `false` to disable them.
 * @member {Boolean} has_projects
 */
EditRepoOption.prototype['has_projects'] = undefined;

/**
 * either `true` to allow pull requests, or `false` to prevent pull request.
 * @member {Boolean} has_pull_requests
 */
EditRepoOption.prototype['has_pull_requests'] = undefined;

/**
 * either `true` to enable releases unit, or `false` to disable them.
 * @member {Boolean} has_releases
 */
EditRepoOption.prototype['has_releases'] = undefined;

/**
 * either `true` to enable the wiki for this repository or `false` to disable it.
 * @member {Boolean} has_wiki
 */
EditRepoOption.prototype['has_wiki'] = undefined;

/**
 * either `true` to ignore whitespace for conflicts, or `false` to not ignore whitespace.
 * @member {Boolean} ignore_whitespace_conflicts
 */
EditRepoOption.prototype['ignore_whitespace_conflicts'] = undefined;

/**
 * @member {module:model/InternalTracker} internal_tracker
 */
EditRepoOption.prototype['internal_tracker'] = undefined;

/**
 * set to a string like `8h30m0s` to set the mirror interval time
 * @member {String} mirror_interval
 */
EditRepoOption.prototype['mirror_interval'] = undefined;

/**
 * name of the repository
 * @member {String} name
 */
EditRepoOption.prototype['name'] = undefined;

/**
 * either `true` to make the repository private or `false` to make it public. Note: you will get a 422 error if the organization restricts changing repository visibility to organization owners and a non-owner tries to change the value of private.
 * @member {Boolean} private
 */
EditRepoOption.prototype['private'] = undefined;

/**
 * either `true` to make this repository a template or `false` to make it a normal repository
 * @member {Boolean} template
 */
EditRepoOption.prototype['template'] = undefined;

/**
 * a URL with more information about the repository.
 * @member {String} website
 */
EditRepoOption.prototype['website'] = undefined;






export default EditRepoOption;

