/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PackageFile model module.
 * @module model/PackageFile
 * @version 1.20.0+dev-539-g5e389228f
 */
class PackageFile {
    /**
     * Constructs a new <code>PackageFile</code>.
     * PackageFile represents a package file
     * @alias module:model/PackageFile
     */
    constructor() { 
        
        PackageFile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PackageFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PackageFile} obj Optional instance to populate.
     * @return {module:model/PackageFile} The populated <code>PackageFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PackageFile();

            if (data.hasOwnProperty('Size')) {
                obj['Size'] = ApiClient.convertToType(data['Size'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('md5')) {
                obj['md5'] = ApiClient.convertToType(data['md5'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sha1')) {
                obj['sha1'] = ApiClient.convertToType(data['sha1'], 'String');
            }
            if (data.hasOwnProperty('sha256')) {
                obj['sha256'] = ApiClient.convertToType(data['sha256'], 'String');
            }
            if (data.hasOwnProperty('sha512')) {
                obj['sha512'] = ApiClient.convertToType(data['sha512'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PackageFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PackageFile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['md5'] && !(typeof data['md5'] === 'string' || data['md5'] instanceof String)) {
            throw new Error("Expected the field `md5` to be a primitive type in the JSON string but got " + data['md5']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['sha1'] && !(typeof data['sha1'] === 'string' || data['sha1'] instanceof String)) {
            throw new Error("Expected the field `sha1` to be a primitive type in the JSON string but got " + data['sha1']);
        }
        // ensure the json data is a string
        if (data['sha256'] && !(typeof data['sha256'] === 'string' || data['sha256'] instanceof String)) {
            throw new Error("Expected the field `sha256` to be a primitive type in the JSON string but got " + data['sha256']);
        }
        // ensure the json data is a string
        if (data['sha512'] && !(typeof data['sha512'] === 'string' || data['sha512'] instanceof String)) {
            throw new Error("Expected the field `sha512` to be a primitive type in the JSON string but got " + data['sha512']);
        }

        return true;
    }


}



/**
 * @member {Number} Size
 */
PackageFile.prototype['Size'] = undefined;

/**
 * @member {Number} id
 */
PackageFile.prototype['id'] = undefined;

/**
 * @member {String} md5
 */
PackageFile.prototype['md5'] = undefined;

/**
 * @member {String} name
 */
PackageFile.prototype['name'] = undefined;

/**
 * @member {String} sha1
 */
PackageFile.prototype['sha1'] = undefined;

/**
 * @member {String} sha256
 */
PackageFile.prototype['sha256'] = undefined;

/**
 * @member {String} sha512
 */
PackageFile.prototype['sha512'] = undefined;






export default PackageFile;

