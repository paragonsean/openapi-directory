/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateLabelOption model module.
 * @module model/CreateLabelOption
 * @version 1.20.0+dev-539-g5e389228f
 */
class CreateLabelOption {
    /**
     * Constructs a new <code>CreateLabelOption</code>.
     * CreateLabelOption options for creating a label
     * @alias module:model/CreateLabelOption
     * @param color {String} 
     * @param name {String} 
     */
    constructor(color, name) { 
        
        CreateLabelOption.initialize(this, color, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, color, name) { 
        obj['color'] = color;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CreateLabelOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateLabelOption} obj Optional instance to populate.
     * @return {module:model/CreateLabelOption} The populated <code>CreateLabelOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateLabelOption();

            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('exclusive')) {
                obj['exclusive'] = ApiClient.convertToType(data['exclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateLabelOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateLabelOption</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateLabelOption.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

CreateLabelOption.RequiredProperties = ["color", "name"];

/**
 * @member {String} color
 */
CreateLabelOption.prototype['color'] = undefined;

/**
 * @member {String} description
 */
CreateLabelOption.prototype['description'] = undefined;

/**
 * @member {Boolean} exclusive
 */
CreateLabelOption.prototype['exclusive'] = undefined;

/**
 * @member {String} name
 */
CreateLabelOption.prototype['name'] = undefined;






export default CreateLabelOption;

