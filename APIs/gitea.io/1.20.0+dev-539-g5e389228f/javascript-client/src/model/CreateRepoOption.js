/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateRepoOption model module.
 * @module model/CreateRepoOption
 * @version 1.20.0+dev-539-g5e389228f
 */
class CreateRepoOption {
    /**
     * Constructs a new <code>CreateRepoOption</code>.
     * CreateRepoOption options when creating repository
     * @alias module:model/CreateRepoOption
     * @param name {String} Name of the repository to create
     */
    constructor(name) { 
        
        CreateRepoOption.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CreateRepoOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateRepoOption} obj Optional instance to populate.
     * @return {module:model/CreateRepoOption} The populated <code>CreateRepoOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateRepoOption();

            if (data.hasOwnProperty('auto_init')) {
                obj['auto_init'] = ApiClient.convertToType(data['auto_init'], 'Boolean');
            }
            if (data.hasOwnProperty('default_branch')) {
                obj['default_branch'] = ApiClient.convertToType(data['default_branch'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('gitignores')) {
                obj['gitignores'] = ApiClient.convertToType(data['gitignores'], 'String');
            }
            if (data.hasOwnProperty('issue_labels')) {
                obj['issue_labels'] = ApiClient.convertToType(data['issue_labels'], 'String');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('private')) {
                obj['private'] = ApiClient.convertToType(data['private'], 'Boolean');
            }
            if (data.hasOwnProperty('readme')) {
                obj['readme'] = ApiClient.convertToType(data['readme'], 'String');
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], 'Boolean');
            }
            if (data.hasOwnProperty('trust_model')) {
                obj['trust_model'] = ApiClient.convertToType(data['trust_model'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateRepoOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateRepoOption</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateRepoOption.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['default_branch'] && !(typeof data['default_branch'] === 'string' || data['default_branch'] instanceof String)) {
            throw new Error("Expected the field `default_branch` to be a primitive type in the JSON string but got " + data['default_branch']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['gitignores'] && !(typeof data['gitignores'] === 'string' || data['gitignores'] instanceof String)) {
            throw new Error("Expected the field `gitignores` to be a primitive type in the JSON string but got " + data['gitignores']);
        }
        // ensure the json data is a string
        if (data['issue_labels'] && !(typeof data['issue_labels'] === 'string' || data['issue_labels'] instanceof String)) {
            throw new Error("Expected the field `issue_labels` to be a primitive type in the JSON string but got " + data['issue_labels']);
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['readme'] && !(typeof data['readme'] === 'string' || data['readme'] instanceof String)) {
            throw new Error("Expected the field `readme` to be a primitive type in the JSON string but got " + data['readme']);
        }
        // ensure the json data is a string
        if (data['trust_model'] && !(typeof data['trust_model'] === 'string' || data['trust_model'] instanceof String)) {
            throw new Error("Expected the field `trust_model` to be a primitive type in the JSON string but got " + data['trust_model']);
        }

        return true;
    }


}

CreateRepoOption.RequiredProperties = ["name"];

/**
 * Whether the repository should be auto-initialized?
 * @member {Boolean} auto_init
 */
CreateRepoOption.prototype['auto_init'] = undefined;

/**
 * DefaultBranch of the repository (used when initializes and in template)
 * @member {String} default_branch
 */
CreateRepoOption.prototype['default_branch'] = undefined;

/**
 * Description of the repository to create
 * @member {String} description
 */
CreateRepoOption.prototype['description'] = undefined;

/**
 * Gitignores to use
 * @member {String} gitignores
 */
CreateRepoOption.prototype['gitignores'] = undefined;

/**
 * Label-Set to use
 * @member {String} issue_labels
 */
CreateRepoOption.prototype['issue_labels'] = undefined;

/**
 * License to use
 * @member {String} license
 */
CreateRepoOption.prototype['license'] = undefined;

/**
 * Name of the repository to create
 * @member {String} name
 */
CreateRepoOption.prototype['name'] = undefined;

/**
 * Whether the repository is private
 * @member {Boolean} private
 */
CreateRepoOption.prototype['private'] = undefined;

/**
 * Readme of the repository to create
 * @member {String} readme
 */
CreateRepoOption.prototype['readme'] = undefined;

/**
 * Whether the repository is template
 * @member {Boolean} template
 */
CreateRepoOption.prototype['template'] = undefined;

/**
 * TrustModel of the repository
 * @member {module:model/CreateRepoOption.TrustModelEnum} trust_model
 */
CreateRepoOption.prototype['trust_model'] = undefined;





/**
 * Allowed values for the <code>trust_model</code> property.
 * @enum {String}
 * @readonly
 */
CreateRepoOption['TrustModelEnum'] = {

    /**
     * value: "default"
     * @const
     */
    "default": "default",

    /**
     * value: "collaborator"
     * @const
     */
    "collaborator": "collaborator",

    /**
     * value: "committer"
     * @const
     */
    "committer": "committer",

    /**
     * value: "collaboratorcommitter"
     * @const
     */
    "collaboratorcommitter": "collaboratorcommitter"
};



export default CreateRepoOption;

