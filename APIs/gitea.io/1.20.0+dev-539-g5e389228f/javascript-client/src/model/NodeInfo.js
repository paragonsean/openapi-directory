/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NodeInfoServices from './NodeInfoServices';
import NodeInfoSoftware from './NodeInfoSoftware';
import NodeInfoUsage from './NodeInfoUsage';

/**
 * The NodeInfo model module.
 * @module model/NodeInfo
 * @version 1.20.0+dev-539-g5e389228f
 */
class NodeInfo {
    /**
     * Constructs a new <code>NodeInfo</code>.
     * NodeInfo contains standardized way of exposing metadata about a server running one of the distributed social networks
     * @alias module:model/NodeInfo
     */
    constructor() { 
        
        NodeInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeInfo} obj Optional instance to populate.
     * @return {module:model/NodeInfo} The populated <code>NodeInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeInfo();

            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('openRegistrations')) {
                obj['openRegistrations'] = ApiClient.convertToType(data['openRegistrations'], 'Boolean');
            }
            if (data.hasOwnProperty('protocols')) {
                obj['protocols'] = ApiClient.convertToType(data['protocols'], ['String']);
            }
            if (data.hasOwnProperty('services')) {
                obj['services'] = NodeInfoServices.constructFromObject(data['services']);
            }
            if (data.hasOwnProperty('software')) {
                obj['software'] = NodeInfoSoftware.constructFromObject(data['software']);
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = NodeInfoUsage.constructFromObject(data['usage']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['protocols'])) {
            throw new Error("Expected the field `protocols` to be an array in the JSON data but got " + data['protocols']);
        }
        // validate the optional field `services`
        if (data['services']) { // data not null
          NodeInfoServices.validateJSON(data['services']);
        }
        // validate the optional field `software`
        if (data['software']) { // data not null
          NodeInfoSoftware.validateJSON(data['software']);
        }
        // validate the optional field `usage`
        if (data['usage']) { // data not null
          NodeInfoUsage.validateJSON(data['usage']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {Object} metadata
 */
NodeInfo.prototype['metadata'] = undefined;

/**
 * @member {Boolean} openRegistrations
 */
NodeInfo.prototype['openRegistrations'] = undefined;

/**
 * @member {Array.<String>} protocols
 */
NodeInfo.prototype['protocols'] = undefined;

/**
 * @member {module:model/NodeInfoServices} services
 */
NodeInfo.prototype['services'] = undefined;

/**
 * @member {module:model/NodeInfoSoftware} software
 */
NodeInfo.prototype['software'] = undefined;

/**
 * @member {module:model/NodeInfoUsage} usage
 */
NodeInfo.prototype['usage'] = undefined;

/**
 * @member {String} version
 */
NodeInfo.prototype['version'] = undefined;






export default NodeInfo;

