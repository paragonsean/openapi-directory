/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Comment from './Comment';
import Issue from './Issue';
import Label from './Label';
import Milestone from './Milestone';
import Team from './Team';
import TrackedTime from './TrackedTime';
import User from './User';

/**
 * The TimelineComment model module.
 * @module model/TimelineComment
 * @version 1.20.0+dev-539-g5e389228f
 */
class TimelineComment {
    /**
     * Constructs a new <code>TimelineComment</code>.
     * TimelineComment represents a timeline comment (comment of any type) on a commit or issue
     * @alias module:model/TimelineComment
     */
    constructor() { 
        
        TimelineComment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimelineComment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimelineComment} obj Optional instance to populate.
     * @return {module:model/TimelineComment} The populated <code>TimelineComment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimelineComment();

            if (data.hasOwnProperty('assignee')) {
                obj['assignee'] = User.constructFromObject(data['assignee']);
            }
            if (data.hasOwnProperty('assignee_team')) {
                obj['assignee_team'] = Team.constructFromObject(data['assignee_team']);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('dependent_issue')) {
                obj['dependent_issue'] = Issue.constructFromObject(data['dependent_issue']);
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('issue_url')) {
                obj['issue_url'] = ApiClient.convertToType(data['issue_url'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = Label.constructFromObject(data['label']);
            }
            if (data.hasOwnProperty('milestone')) {
                obj['milestone'] = Milestone.constructFromObject(data['milestone']);
            }
            if (data.hasOwnProperty('new_ref')) {
                obj['new_ref'] = ApiClient.convertToType(data['new_ref'], 'String');
            }
            if (data.hasOwnProperty('new_title')) {
                obj['new_title'] = ApiClient.convertToType(data['new_title'], 'String');
            }
            if (data.hasOwnProperty('old_milestone')) {
                obj['old_milestone'] = Milestone.constructFromObject(data['old_milestone']);
            }
            if (data.hasOwnProperty('old_project_id')) {
                obj['old_project_id'] = ApiClient.convertToType(data['old_project_id'], 'Number');
            }
            if (data.hasOwnProperty('old_ref')) {
                obj['old_ref'] = ApiClient.convertToType(data['old_ref'], 'String');
            }
            if (data.hasOwnProperty('old_title')) {
                obj['old_title'] = ApiClient.convertToType(data['old_title'], 'String');
            }
            if (data.hasOwnProperty('project_id')) {
                obj['project_id'] = ApiClient.convertToType(data['project_id'], 'Number');
            }
            if (data.hasOwnProperty('pull_request_url')) {
                obj['pull_request_url'] = ApiClient.convertToType(data['pull_request_url'], 'String');
            }
            if (data.hasOwnProperty('ref_action')) {
                obj['ref_action'] = ApiClient.convertToType(data['ref_action'], 'String');
            }
            if (data.hasOwnProperty('ref_comment')) {
                obj['ref_comment'] = Comment.constructFromObject(data['ref_comment']);
            }
            if (data.hasOwnProperty('ref_commit_sha')) {
                obj['ref_commit_sha'] = ApiClient.convertToType(data['ref_commit_sha'], 'String');
            }
            if (data.hasOwnProperty('ref_issue')) {
                obj['ref_issue'] = Issue.constructFromObject(data['ref_issue']);
            }
            if (data.hasOwnProperty('removed_assignee')) {
                obj['removed_assignee'] = ApiClient.convertToType(data['removed_assignee'], 'Boolean');
            }
            if (data.hasOwnProperty('resolve_doer')) {
                obj['resolve_doer'] = User.constructFromObject(data['resolve_doer']);
            }
            if (data.hasOwnProperty('review_id')) {
                obj['review_id'] = ApiClient.convertToType(data['review_id'], 'Number');
            }
            if (data.hasOwnProperty('tracked_time')) {
                obj['tracked_time'] = TrackedTime.constructFromObject(data['tracked_time']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimelineComment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimelineComment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `assignee`
        if (data['assignee']) { // data not null
          User.validateJSON(data['assignee']);
        }
        // validate the optional field `assignee_team`
        if (data['assignee_team']) { // data not null
          Team.validateJSON(data['assignee_team']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // validate the optional field `dependent_issue`
        if (data['dependent_issue']) { // data not null
          Issue.validateJSON(data['dependent_issue']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['issue_url'] && !(typeof data['issue_url'] === 'string' || data['issue_url'] instanceof String)) {
            throw new Error("Expected the field `issue_url` to be a primitive type in the JSON string but got " + data['issue_url']);
        }
        // validate the optional field `label`
        if (data['label']) { // data not null
          Label.validateJSON(data['label']);
        }
        // validate the optional field `milestone`
        if (data['milestone']) { // data not null
          Milestone.validateJSON(data['milestone']);
        }
        // ensure the json data is a string
        if (data['new_ref'] && !(typeof data['new_ref'] === 'string' || data['new_ref'] instanceof String)) {
            throw new Error("Expected the field `new_ref` to be a primitive type in the JSON string but got " + data['new_ref']);
        }
        // ensure the json data is a string
        if (data['new_title'] && !(typeof data['new_title'] === 'string' || data['new_title'] instanceof String)) {
            throw new Error("Expected the field `new_title` to be a primitive type in the JSON string but got " + data['new_title']);
        }
        // validate the optional field `old_milestone`
        if (data['old_milestone']) { // data not null
          Milestone.validateJSON(data['old_milestone']);
        }
        // ensure the json data is a string
        if (data['old_ref'] && !(typeof data['old_ref'] === 'string' || data['old_ref'] instanceof String)) {
            throw new Error("Expected the field `old_ref` to be a primitive type in the JSON string but got " + data['old_ref']);
        }
        // ensure the json data is a string
        if (data['old_title'] && !(typeof data['old_title'] === 'string' || data['old_title'] instanceof String)) {
            throw new Error("Expected the field `old_title` to be a primitive type in the JSON string but got " + data['old_title']);
        }
        // ensure the json data is a string
        if (data['pull_request_url'] && !(typeof data['pull_request_url'] === 'string' || data['pull_request_url'] instanceof String)) {
            throw new Error("Expected the field `pull_request_url` to be a primitive type in the JSON string but got " + data['pull_request_url']);
        }
        // ensure the json data is a string
        if (data['ref_action'] && !(typeof data['ref_action'] === 'string' || data['ref_action'] instanceof String)) {
            throw new Error("Expected the field `ref_action` to be a primitive type in the JSON string but got " + data['ref_action']);
        }
        // validate the optional field `ref_comment`
        if (data['ref_comment']) { // data not null
          Comment.validateJSON(data['ref_comment']);
        }
        // ensure the json data is a string
        if (data['ref_commit_sha'] && !(typeof data['ref_commit_sha'] === 'string' || data['ref_commit_sha'] instanceof String)) {
            throw new Error("Expected the field `ref_commit_sha` to be a primitive type in the JSON string but got " + data['ref_commit_sha']);
        }
        // validate the optional field `ref_issue`
        if (data['ref_issue']) { // data not null
          Issue.validateJSON(data['ref_issue']);
        }
        // validate the optional field `resolve_doer`
        if (data['resolve_doer']) { // data not null
          User.validateJSON(data['resolve_doer']);
        }
        // validate the optional field `tracked_time`
        if (data['tracked_time']) { // data not null
          TrackedTime.validateJSON(data['tracked_time']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {module:model/User} assignee
 */
TimelineComment.prototype['assignee'] = undefined;

/**
 * @member {module:model/Team} assignee_team
 */
TimelineComment.prototype['assignee_team'] = undefined;

/**
 * @member {String} body
 */
TimelineComment.prototype['body'] = undefined;

/**
 * @member {Date} created_at
 */
TimelineComment.prototype['created_at'] = undefined;

/**
 * @member {module:model/Issue} dependent_issue
 */
TimelineComment.prototype['dependent_issue'] = undefined;

/**
 * @member {String} html_url
 */
TimelineComment.prototype['html_url'] = undefined;

/**
 * @member {Number} id
 */
TimelineComment.prototype['id'] = undefined;

/**
 * @member {String} issue_url
 */
TimelineComment.prototype['issue_url'] = undefined;

/**
 * @member {module:model/Label} label
 */
TimelineComment.prototype['label'] = undefined;

/**
 * @member {module:model/Milestone} milestone
 */
TimelineComment.prototype['milestone'] = undefined;

/**
 * @member {String} new_ref
 */
TimelineComment.prototype['new_ref'] = undefined;

/**
 * @member {String} new_title
 */
TimelineComment.prototype['new_title'] = undefined;

/**
 * @member {module:model/Milestone} old_milestone
 */
TimelineComment.prototype['old_milestone'] = undefined;

/**
 * @member {Number} old_project_id
 */
TimelineComment.prototype['old_project_id'] = undefined;

/**
 * @member {String} old_ref
 */
TimelineComment.prototype['old_ref'] = undefined;

/**
 * @member {String} old_title
 */
TimelineComment.prototype['old_title'] = undefined;

/**
 * @member {Number} project_id
 */
TimelineComment.prototype['project_id'] = undefined;

/**
 * @member {String} pull_request_url
 */
TimelineComment.prototype['pull_request_url'] = undefined;

/**
 * @member {String} ref_action
 */
TimelineComment.prototype['ref_action'] = undefined;

/**
 * @member {module:model/Comment} ref_comment
 */
TimelineComment.prototype['ref_comment'] = undefined;

/**
 * commit SHA where issue/PR was referenced
 * @member {String} ref_commit_sha
 */
TimelineComment.prototype['ref_commit_sha'] = undefined;

/**
 * @member {module:model/Issue} ref_issue
 */
TimelineComment.prototype['ref_issue'] = undefined;

/**
 * whether the assignees were removed or added
 * @member {Boolean} removed_assignee
 */
TimelineComment.prototype['removed_assignee'] = undefined;

/**
 * @member {module:model/User} resolve_doer
 */
TimelineComment.prototype['resolve_doer'] = undefined;

/**
 * @member {Number} review_id
 */
TimelineComment.prototype['review_id'] = undefined;

/**
 * @member {module:model/TrackedTime} tracked_time
 */
TimelineComment.prototype['tracked_time'] = undefined;

/**
 * @member {String} type
 */
TimelineComment.prototype['type'] = undefined;

/**
 * @member {Date} updated_at
 */
TimelineComment.prototype['updated_at'] = undefined;

/**
 * @member {module:model/User} user
 */
TimelineComment.prototype['user'] = undefined;






export default TimelineComment;

