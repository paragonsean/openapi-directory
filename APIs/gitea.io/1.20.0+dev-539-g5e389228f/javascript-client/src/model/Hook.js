/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Hook model module.
 * @module model/Hook
 * @version 1.20.0+dev-539-g5e389228f
 */
class Hook {
    /**
     * Constructs a new <code>Hook</code>.
     * Hook a hook is a web hook when one repository changed
     * @alias module:model/Hook
     */
    constructor() { 
        
        Hook.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Hook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Hook} obj Optional instance to populate.
     * @return {module:model/Hook} The populated <code>Hook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Hook();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('authorization_header')) {
                obj['authorization_header'] = ApiClient.convertToType(data['authorization_header'], 'String');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], {'String': 'String'});
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Hook</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Hook</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authorization_header'] && !(typeof data['authorization_header'] === 'string' || data['authorization_header'] instanceof String)) {
            throw new Error("Expected the field `authorization_header` to be a primitive type in the JSON string but got " + data['authorization_header']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['events'])) {
            throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {Boolean} active
 */
Hook.prototype['active'] = undefined;

/**
 * @member {String} authorization_header
 */
Hook.prototype['authorization_header'] = undefined;

/**
 * @member {Object.<String, String>} config
 */
Hook.prototype['config'] = undefined;

/**
 * @member {Date} created_at
 */
Hook.prototype['created_at'] = undefined;

/**
 * @member {Array.<String>} events
 */
Hook.prototype['events'] = undefined;

/**
 * @member {Number} id
 */
Hook.prototype['id'] = undefined;

/**
 * @member {String} type
 */
Hook.prototype['type'] = undefined;

/**
 * @member {Date} updated_at
 */
Hook.prototype['updated_at'] = undefined;






export default Hook;

