/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IssueMeta model module.
 * @module model/IssueMeta
 * @version 1.20.0+dev-539-g5e389228f
 */
class IssueMeta {
    /**
     * Constructs a new <code>IssueMeta</code>.
     * IssueMeta basic issue information
     * @alias module:model/IssueMeta
     */
    constructor() { 
        
        IssueMeta.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IssueMeta</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueMeta} obj Optional instance to populate.
     * @return {module:model/IssueMeta} The populated <code>IssueMeta</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueMeta();

            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('repo')) {
                obj['repo'] = ApiClient.convertToType(data['repo'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssueMeta</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssueMeta</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['repo'] && !(typeof data['repo'] === 'string' || data['repo'] instanceof String)) {
            throw new Error("Expected the field `repo` to be a primitive type in the JSON string but got " + data['repo']);
        }

        return true;
    }


}



/**
 * @member {Number} index
 */
IssueMeta.prototype['index'] = undefined;

/**
 * @member {String} owner
 */
IssueMeta.prototype['owner'] = undefined;

/**
 * @member {String} repo
 */
IssueMeta.prototype['repo'] = undefined;






export default IssueMeta;

