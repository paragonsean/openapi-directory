/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateUserOption model module.
 * @module model/CreateUserOption
 * @version 1.20.0+dev-539-g5e389228f
 */
class CreateUserOption {
    /**
     * Constructs a new <code>CreateUserOption</code>.
     * CreateUserOption create user options
     * @alias module:model/CreateUserOption
     * @param email {String} 
     * @param password {String} 
     * @param username {String} 
     */
    constructor(email, password, username) { 
        
        CreateUserOption.initialize(this, email, password, username);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, password, username) { 
        obj['email'] = email;
        obj['password'] = password;
        obj['username'] = username;
    }

    /**
     * Constructs a <code>CreateUserOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateUserOption} obj Optional instance to populate.
     * @return {module:model/CreateUserOption} The populated <code>CreateUserOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateUserOption();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('full_name')) {
                obj['full_name'] = ApiClient.convertToType(data['full_name'], 'String');
            }
            if (data.hasOwnProperty('login_name')) {
                obj['login_name'] = ApiClient.convertToType(data['login_name'], 'String');
            }
            if (data.hasOwnProperty('must_change_password')) {
                obj['must_change_password'] = ApiClient.convertToType(data['must_change_password'], 'Boolean');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('restricted')) {
                obj['restricted'] = ApiClient.convertToType(data['restricted'], 'Boolean');
            }
            if (data.hasOwnProperty('send_notify')) {
                obj['send_notify'] = ApiClient.convertToType(data['send_notify'], 'Boolean');
            }
            if (data.hasOwnProperty('source_id')) {
                obj['source_id'] = ApiClient.convertToType(data['source_id'], 'Number');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateUserOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateUserOption</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateUserOption.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['full_name'] && !(typeof data['full_name'] === 'string' || data['full_name'] instanceof String)) {
            throw new Error("Expected the field `full_name` to be a primitive type in the JSON string but got " + data['full_name']);
        }
        // ensure the json data is a string
        if (data['login_name'] && !(typeof data['login_name'] === 'string' || data['login_name'] instanceof String)) {
            throw new Error("Expected the field `login_name` to be a primitive type in the JSON string but got " + data['login_name']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }

        return true;
    }


}

CreateUserOption.RequiredProperties = ["email", "password", "username"];

/**
 * For explicitly setting the user creation timestamp. Useful when users are migrated from other systems. When omitted, the user's creation timestamp will be set to \"now\".
 * @member {Date} created_at
 */
CreateUserOption.prototype['created_at'] = undefined;

/**
 * @member {String} email
 */
CreateUserOption.prototype['email'] = undefined;

/**
 * @member {String} full_name
 */
CreateUserOption.prototype['full_name'] = undefined;

/**
 * @member {String} login_name
 */
CreateUserOption.prototype['login_name'] = undefined;

/**
 * @member {Boolean} must_change_password
 */
CreateUserOption.prototype['must_change_password'] = undefined;

/**
 * @member {String} password
 */
CreateUserOption.prototype['password'] = undefined;

/**
 * @member {Boolean} restricted
 */
CreateUserOption.prototype['restricted'] = undefined;

/**
 * @member {Boolean} send_notify
 */
CreateUserOption.prototype['send_notify'] = undefined;

/**
 * @member {Number} source_id
 */
CreateUserOption.prototype['source_id'] = undefined;

/**
 * @member {String} username
 */
CreateUserOption.prototype['username'] = undefined;

/**
 * @member {String} visibility
 */
CreateUserOption.prototype['visibility'] = undefined;






export default CreateUserOption;

