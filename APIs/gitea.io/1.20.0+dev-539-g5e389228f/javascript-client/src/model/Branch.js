/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PayloadCommit from './PayloadCommit';

/**
 * The Branch model module.
 * @module model/Branch
 * @version 1.20.0+dev-539-g5e389228f
 */
class Branch {
    /**
     * Constructs a new <code>Branch</code>.
     * Branch represents a repository branch
     * @alias module:model/Branch
     */
    constructor() { 
        
        Branch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Branch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Branch} obj Optional instance to populate.
     * @return {module:model/Branch} The populated <code>Branch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Branch();

            if (data.hasOwnProperty('commit')) {
                obj['commit'] = PayloadCommit.constructFromObject(data['commit']);
            }
            if (data.hasOwnProperty('effective_branch_protection_name')) {
                obj['effective_branch_protection_name'] = ApiClient.convertToType(data['effective_branch_protection_name'], 'String');
            }
            if (data.hasOwnProperty('enable_status_check')) {
                obj['enable_status_check'] = ApiClient.convertToType(data['enable_status_check'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('protected')) {
                obj['protected'] = ApiClient.convertToType(data['protected'], 'Boolean');
            }
            if (data.hasOwnProperty('required_approvals')) {
                obj['required_approvals'] = ApiClient.convertToType(data['required_approvals'], 'Number');
            }
            if (data.hasOwnProperty('status_check_contexts')) {
                obj['status_check_contexts'] = ApiClient.convertToType(data['status_check_contexts'], ['String']);
            }
            if (data.hasOwnProperty('user_can_merge')) {
                obj['user_can_merge'] = ApiClient.convertToType(data['user_can_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('user_can_push')) {
                obj['user_can_push'] = ApiClient.convertToType(data['user_can_push'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Branch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Branch</code>.
     */
    static validateJSON(data) {
        // validate the optional field `commit`
        if (data['commit']) { // data not null
          PayloadCommit.validateJSON(data['commit']);
        }
        // ensure the json data is a string
        if (data['effective_branch_protection_name'] && !(typeof data['effective_branch_protection_name'] === 'string' || data['effective_branch_protection_name'] instanceof String)) {
            throw new Error("Expected the field `effective_branch_protection_name` to be a primitive type in the JSON string but got " + data['effective_branch_protection_name']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['status_check_contexts'])) {
            throw new Error("Expected the field `status_check_contexts` to be an array in the JSON data but got " + data['status_check_contexts']);
        }

        return true;
    }


}



/**
 * @member {module:model/PayloadCommit} commit
 */
Branch.prototype['commit'] = undefined;

/**
 * @member {String} effective_branch_protection_name
 */
Branch.prototype['effective_branch_protection_name'] = undefined;

/**
 * @member {Boolean} enable_status_check
 */
Branch.prototype['enable_status_check'] = undefined;

/**
 * @member {String} name
 */
Branch.prototype['name'] = undefined;

/**
 * @member {Boolean} protected
 */
Branch.prototype['protected'] = undefined;

/**
 * @member {Number} required_approvals
 */
Branch.prototype['required_approvals'] = undefined;

/**
 * @member {Array.<String>} status_check_contexts
 */
Branch.prototype['status_check_contexts'] = undefined;

/**
 * @member {Boolean} user_can_merge
 */
Branch.prototype['user_can_merge'] = undefined;

/**
 * @member {Boolean} user_can_push
 */
Branch.prototype['user_can_push'] = undefined;






export default Branch;

