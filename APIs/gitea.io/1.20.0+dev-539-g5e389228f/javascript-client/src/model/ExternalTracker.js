/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExternalTracker model module.
 * @module model/ExternalTracker
 * @version 1.20.0+dev-539-g5e389228f
 */
class ExternalTracker {
    /**
     * Constructs a new <code>ExternalTracker</code>.
     * ExternalTracker represents settings for external tracker
     * @alias module:model/ExternalTracker
     */
    constructor() { 
        
        ExternalTracker.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExternalTracker</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExternalTracker} obj Optional instance to populate.
     * @return {module:model/ExternalTracker} The populated <code>ExternalTracker</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExternalTracker();

            if (data.hasOwnProperty('external_tracker_format')) {
                obj['external_tracker_format'] = ApiClient.convertToType(data['external_tracker_format'], 'String');
            }
            if (data.hasOwnProperty('external_tracker_regexp_pattern')) {
                obj['external_tracker_regexp_pattern'] = ApiClient.convertToType(data['external_tracker_regexp_pattern'], 'String');
            }
            if (data.hasOwnProperty('external_tracker_style')) {
                obj['external_tracker_style'] = ApiClient.convertToType(data['external_tracker_style'], 'String');
            }
            if (data.hasOwnProperty('external_tracker_url')) {
                obj['external_tracker_url'] = ApiClient.convertToType(data['external_tracker_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExternalTracker</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExternalTracker</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['external_tracker_format'] && !(typeof data['external_tracker_format'] === 'string' || data['external_tracker_format'] instanceof String)) {
            throw new Error("Expected the field `external_tracker_format` to be a primitive type in the JSON string but got " + data['external_tracker_format']);
        }
        // ensure the json data is a string
        if (data['external_tracker_regexp_pattern'] && !(typeof data['external_tracker_regexp_pattern'] === 'string' || data['external_tracker_regexp_pattern'] instanceof String)) {
            throw new Error("Expected the field `external_tracker_regexp_pattern` to be a primitive type in the JSON string but got " + data['external_tracker_regexp_pattern']);
        }
        // ensure the json data is a string
        if (data['external_tracker_style'] && !(typeof data['external_tracker_style'] === 'string' || data['external_tracker_style'] instanceof String)) {
            throw new Error("Expected the field `external_tracker_style` to be a primitive type in the JSON string but got " + data['external_tracker_style']);
        }
        // ensure the json data is a string
        if (data['external_tracker_url'] && !(typeof data['external_tracker_url'] === 'string' || data['external_tracker_url'] instanceof String)) {
            throw new Error("Expected the field `external_tracker_url` to be a primitive type in the JSON string but got " + data['external_tracker_url']);
        }

        return true;
    }


}



/**
 * External Issue Tracker URL Format. Use the placeholders {user}, {repo} and {index} for the username, repository name and issue index.
 * @member {String} external_tracker_format
 */
ExternalTracker.prototype['external_tracker_format'] = undefined;

/**
 * External Issue Tracker issue regular expression
 * @member {String} external_tracker_regexp_pattern
 */
ExternalTracker.prototype['external_tracker_regexp_pattern'] = undefined;

/**
 * External Issue Tracker Number Format, either `numeric`, `alphanumeric`, or `regexp`
 * @member {String} external_tracker_style
 */
ExternalTracker.prototype['external_tracker_style'] = undefined;

/**
 * URL of external issue tracker.
 * @member {String} external_tracker_url
 */
ExternalTracker.prototype['external_tracker_url'] = undefined;






export default ExternalTracker;

