/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Organization from './Organization';

/**
 * The Team model module.
 * @module model/Team
 * @version 1.20.0+dev-539-g5e389228f
 */
class Team {
    /**
     * Constructs a new <code>Team</code>.
     * Team represents a team in an organization
     * @alias module:model/Team
     */
    constructor() { 
        
        Team.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Team</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Team} obj Optional instance to populate.
     * @return {module:model/Team} The populated <code>Team</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Team();

            if (data.hasOwnProperty('can_create_org_repo')) {
                obj['can_create_org_repo'] = ApiClient.convertToType(data['can_create_org_repo'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('includes_all_repositories')) {
                obj['includes_all_repositories'] = ApiClient.convertToType(data['includes_all_repositories'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = Organization.constructFromObject(data['organization']);
            }
            if (data.hasOwnProperty('permission')) {
                obj['permission'] = ApiClient.convertToType(data['permission'], 'String');
            }
            if (data.hasOwnProperty('units')) {
                obj['units'] = ApiClient.convertToType(data['units'], ['String']);
            }
            if (data.hasOwnProperty('units_map')) {
                obj['units_map'] = ApiClient.convertToType(data['units_map'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Team</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Team</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          Organization.validateJSON(data['organization']);
        }
        // ensure the json data is a string
        if (data['permission'] && !(typeof data['permission'] === 'string' || data['permission'] instanceof String)) {
            throw new Error("Expected the field `permission` to be a primitive type in the JSON string but got " + data['permission']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['units'])) {
            throw new Error("Expected the field `units` to be an array in the JSON data but got " + data['units']);
        }

        return true;
    }


}



/**
 * @member {Boolean} can_create_org_repo
 */
Team.prototype['can_create_org_repo'] = undefined;

/**
 * @member {String} description
 */
Team.prototype['description'] = undefined;

/**
 * @member {Number} id
 */
Team.prototype['id'] = undefined;

/**
 * @member {Boolean} includes_all_repositories
 */
Team.prototype['includes_all_repositories'] = undefined;

/**
 * @member {String} name
 */
Team.prototype['name'] = undefined;

/**
 * @member {module:model/Organization} organization
 */
Team.prototype['organization'] = undefined;

/**
 * @member {module:model/Team.PermissionEnum} permission
 */
Team.prototype['permission'] = undefined;

/**
 * @member {Array.<String>} units
 */
Team.prototype['units'] = undefined;

/**
 * @member {Object.<String, String>} units_map
 */
Team.prototype['units_map'] = undefined;





/**
 * Allowed values for the <code>permission</code> property.
 * @enum {String}
 * @readonly
 */
Team['PermissionEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write",

    /**
     * value: "admin"
     * @const
     */
    "admin": "admin",

    /**
     * value: "owner"
     * @const
     */
    "owner": "owner"
};



export default Team;

