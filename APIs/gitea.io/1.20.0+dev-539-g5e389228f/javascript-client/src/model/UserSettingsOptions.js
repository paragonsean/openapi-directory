/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserSettingsOptions model module.
 * @module model/UserSettingsOptions
 * @version 1.20.0+dev-539-g5e389228f
 */
class UserSettingsOptions {
    /**
     * Constructs a new <code>UserSettingsOptions</code>.
     * UserSettingsOptions represents options to change user settings
     * @alias module:model/UserSettingsOptions
     */
    constructor() { 
        
        UserSettingsOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserSettingsOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserSettingsOptions} obj Optional instance to populate.
     * @return {module:model/UserSettingsOptions} The populated <code>UserSettingsOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserSettingsOptions();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('diff_view_style')) {
                obj['diff_view_style'] = ApiClient.convertToType(data['diff_view_style'], 'String');
            }
            if (data.hasOwnProperty('full_name')) {
                obj['full_name'] = ApiClient.convertToType(data['full_name'], 'String');
            }
            if (data.hasOwnProperty('hide_activity')) {
                obj['hide_activity'] = ApiClient.convertToType(data['hide_activity'], 'Boolean');
            }
            if (data.hasOwnProperty('hide_email')) {
                obj['hide_email'] = ApiClient.convertToType(data['hide_email'], 'Boolean');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('theme')) {
                obj['theme'] = ApiClient.convertToType(data['theme'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserSettingsOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserSettingsOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['diff_view_style'] && !(typeof data['diff_view_style'] === 'string' || data['diff_view_style'] instanceof String)) {
            throw new Error("Expected the field `diff_view_style` to be a primitive type in the JSON string but got " + data['diff_view_style']);
        }
        // ensure the json data is a string
        if (data['full_name'] && !(typeof data['full_name'] === 'string' || data['full_name'] instanceof String)) {
            throw new Error("Expected the field `full_name` to be a primitive type in the JSON string but got " + data['full_name']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['theme'] && !(typeof data['theme'] === 'string' || data['theme'] instanceof String)) {
            throw new Error("Expected the field `theme` to be a primitive type in the JSON string but got " + data['theme']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}



/**
 * @member {String} description
 */
UserSettingsOptions.prototype['description'] = undefined;

/**
 * @member {String} diff_view_style
 */
UserSettingsOptions.prototype['diff_view_style'] = undefined;

/**
 * @member {String} full_name
 */
UserSettingsOptions.prototype['full_name'] = undefined;

/**
 * @member {Boolean} hide_activity
 */
UserSettingsOptions.prototype['hide_activity'] = undefined;

/**
 * Privacy
 * @member {Boolean} hide_email
 */
UserSettingsOptions.prototype['hide_email'] = undefined;

/**
 * @member {String} language
 */
UserSettingsOptions.prototype['language'] = undefined;

/**
 * @member {String} location
 */
UserSettingsOptions.prototype['location'] = undefined;

/**
 * @member {String} theme
 */
UserSettingsOptions.prototype['theme'] = undefined;

/**
 * @member {String} website
 */
UserSettingsOptions.prototype['website'] = undefined;






export default UserSettingsOptions;

