/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MergePullRequestOption model module.
 * @module model/MergePullRequestOption
 * @version 1.20.0+dev-539-g5e389228f
 */
class MergePullRequestOption {
    /**
     * Constructs a new <code>MergePullRequestOption</code>.
     * MergePullRequestForm form for merging Pull Request
     * @alias module:model/MergePullRequestOption
     * @param _do {module:model/MergePullRequestOption.DoEnum} 
     */
    constructor(_do) { 
        
        MergePullRequestOption.initialize(this, _do);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, _do) { 
        obj['Do'] = _do;
    }

    /**
     * Constructs a <code>MergePullRequestOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MergePullRequestOption} obj Optional instance to populate.
     * @return {module:model/MergePullRequestOption} The populated <code>MergePullRequestOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MergePullRequestOption();

            if (data.hasOwnProperty('Do')) {
                obj['Do'] = ApiClient.convertToType(data['Do'], 'String');
            }
            if (data.hasOwnProperty('MergeCommitID')) {
                obj['MergeCommitID'] = ApiClient.convertToType(data['MergeCommitID'], 'String');
            }
            if (data.hasOwnProperty('MergeMessageField')) {
                obj['MergeMessageField'] = ApiClient.convertToType(data['MergeMessageField'], 'String');
            }
            if (data.hasOwnProperty('MergeTitleField')) {
                obj['MergeTitleField'] = ApiClient.convertToType(data['MergeTitleField'], 'String');
            }
            if (data.hasOwnProperty('delete_branch_after_merge')) {
                obj['delete_branch_after_merge'] = ApiClient.convertToType(data['delete_branch_after_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('force_merge')) {
                obj['force_merge'] = ApiClient.convertToType(data['force_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('head_commit_id')) {
                obj['head_commit_id'] = ApiClient.convertToType(data['head_commit_id'], 'String');
            }
            if (data.hasOwnProperty('merge_when_checks_succeed')) {
                obj['merge_when_checks_succeed'] = ApiClient.convertToType(data['merge_when_checks_succeed'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MergePullRequestOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MergePullRequestOption</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MergePullRequestOption.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Do'] && !(typeof data['Do'] === 'string' || data['Do'] instanceof String)) {
            throw new Error("Expected the field `Do` to be a primitive type in the JSON string but got " + data['Do']);
        }
        // ensure the json data is a string
        if (data['MergeCommitID'] && !(typeof data['MergeCommitID'] === 'string' || data['MergeCommitID'] instanceof String)) {
            throw new Error("Expected the field `MergeCommitID` to be a primitive type in the JSON string but got " + data['MergeCommitID']);
        }
        // ensure the json data is a string
        if (data['MergeMessageField'] && !(typeof data['MergeMessageField'] === 'string' || data['MergeMessageField'] instanceof String)) {
            throw new Error("Expected the field `MergeMessageField` to be a primitive type in the JSON string but got " + data['MergeMessageField']);
        }
        // ensure the json data is a string
        if (data['MergeTitleField'] && !(typeof data['MergeTitleField'] === 'string' || data['MergeTitleField'] instanceof String)) {
            throw new Error("Expected the field `MergeTitleField` to be a primitive type in the JSON string but got " + data['MergeTitleField']);
        }
        // ensure the json data is a string
        if (data['head_commit_id'] && !(typeof data['head_commit_id'] === 'string' || data['head_commit_id'] instanceof String)) {
            throw new Error("Expected the field `head_commit_id` to be a primitive type in the JSON string but got " + data['head_commit_id']);
        }

        return true;
    }


}

MergePullRequestOption.RequiredProperties = ["Do"];

/**
 * @member {module:model/MergePullRequestOption.DoEnum} Do
 */
MergePullRequestOption.prototype['Do'] = undefined;

/**
 * @member {String} MergeCommitID
 */
MergePullRequestOption.prototype['MergeCommitID'] = undefined;

/**
 * @member {String} MergeMessageField
 */
MergePullRequestOption.prototype['MergeMessageField'] = undefined;

/**
 * @member {String} MergeTitleField
 */
MergePullRequestOption.prototype['MergeTitleField'] = undefined;

/**
 * @member {Boolean} delete_branch_after_merge
 */
MergePullRequestOption.prototype['delete_branch_after_merge'] = undefined;

/**
 * @member {Boolean} force_merge
 */
MergePullRequestOption.prototype['force_merge'] = undefined;

/**
 * @member {String} head_commit_id
 */
MergePullRequestOption.prototype['head_commit_id'] = undefined;

/**
 * @member {Boolean} merge_when_checks_succeed
 */
MergePullRequestOption.prototype['merge_when_checks_succeed'] = undefined;





/**
 * Allowed values for the <code>Do</code> property.
 * @enum {String}
 * @readonly
 */
MergePullRequestOption['DoEnum'] = {

    /**
     * value: "merge"
     * @const
     */
    "merge": "merge",

    /**
     * value: "rebase"
     * @const
     */
    "rebase": "rebase",

    /**
     * value: "rebase-merge"
     * @const
     */
    "rebase-merge": "rebase-merge",

    /**
     * value: "squash"
     * @const
     */
    "squash": "squash",

    /**
     * value: "manually-merged"
     * @const
     */
    "manually-merged": "manually-merged"
};



export default MergePullRequestOption;

