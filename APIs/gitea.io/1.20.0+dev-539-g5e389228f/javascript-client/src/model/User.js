/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The User model module.
 * @module model/User
 * @version 1.20.0+dev-539-g5e389228f
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * User represents a user
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['login_name'] = 'empty';
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('avatar_url')) {
                obj['avatar_url'] = ApiClient.convertToType(data['avatar_url'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('followers_count')) {
                obj['followers_count'] = ApiClient.convertToType(data['followers_count'], 'Number');
            }
            if (data.hasOwnProperty('following_count')) {
                obj['following_count'] = ApiClient.convertToType(data['following_count'], 'Number');
            }
            if (data.hasOwnProperty('full_name')) {
                obj['full_name'] = ApiClient.convertToType(data['full_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_admin')) {
                obj['is_admin'] = ApiClient.convertToType(data['is_admin'], 'Boolean');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('last_login')) {
                obj['last_login'] = ApiClient.convertToType(data['last_login'], 'Date');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('login_name')) {
                obj['login_name'] = ApiClient.convertToType(data['login_name'], 'String');
            }
            if (data.hasOwnProperty('prohibit_login')) {
                obj['prohibit_login'] = ApiClient.convertToType(data['prohibit_login'], 'Boolean');
            }
            if (data.hasOwnProperty('restricted')) {
                obj['restricted'] = ApiClient.convertToType(data['restricted'], 'Boolean');
            }
            if (data.hasOwnProperty('starred_repos_count')) {
                obj['starred_repos_count'] = ApiClient.convertToType(data['starred_repos_count'], 'Number');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['avatar_url'] && !(typeof data['avatar_url'] === 'string' || data['avatar_url'] instanceof String)) {
            throw new Error("Expected the field `avatar_url` to be a primitive type in the JSON string but got " + data['avatar_url']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['full_name'] && !(typeof data['full_name'] === 'string' || data['full_name'] instanceof String)) {
            throw new Error("Expected the field `full_name` to be a primitive type in the JSON string but got " + data['full_name']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['login'] && !(typeof data['login'] === 'string' || data['login'] instanceof String)) {
            throw new Error("Expected the field `login` to be a primitive type in the JSON string but got " + data['login']);
        }
        // ensure the json data is a string
        if (data['login_name'] && !(typeof data['login_name'] === 'string' || data['login_name'] instanceof String)) {
            throw new Error("Expected the field `login_name` to be a primitive type in the JSON string but got " + data['login_name']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}



/**
 * Is user active
 * @member {Boolean} active
 */
User.prototype['active'] = undefined;

/**
 * URL to the user's avatar
 * @member {String} avatar_url
 */
User.prototype['avatar_url'] = undefined;

/**
 * @member {Date} created
 */
User.prototype['created'] = undefined;

/**
 * the user's description
 * @member {String} description
 */
User.prototype['description'] = undefined;

/**
 * @member {String} email
 */
User.prototype['email'] = undefined;

/**
 * user counts
 * @member {Number} followers_count
 */
User.prototype['followers_count'] = undefined;

/**
 * @member {Number} following_count
 */
User.prototype['following_count'] = undefined;

/**
 * the user's full name
 * @member {String} full_name
 */
User.prototype['full_name'] = undefined;

/**
 * the user's id
 * @member {Number} id
 */
User.prototype['id'] = undefined;

/**
 * Is the user an administrator
 * @member {Boolean} is_admin
 */
User.prototype['is_admin'] = undefined;

/**
 * User locale
 * @member {String} language
 */
User.prototype['language'] = undefined;

/**
 * @member {Date} last_login
 */
User.prototype['last_login'] = undefined;

/**
 * the user's location
 * @member {String} location
 */
User.prototype['location'] = undefined;

/**
 * the user's username
 * @member {String} login
 */
User.prototype['login'] = undefined;

/**
 * the user's authentication sign-in name.
 * @member {String} login_name
 * @default 'empty'
 */
User.prototype['login_name'] = 'empty';

/**
 * Is user login prohibited
 * @member {Boolean} prohibit_login
 */
User.prototype['prohibit_login'] = undefined;

/**
 * Is user restricted
 * @member {Boolean} restricted
 */
User.prototype['restricted'] = undefined;

/**
 * @member {Number} starred_repos_count
 */
User.prototype['starred_repos_count'] = undefined;

/**
 * User visibility level option: public, limited, private
 * @member {String} visibility
 */
User.prototype['visibility'] = undefined;

/**
 * the user's website
 * @member {String} website
 */
User.prototype['website'] = undefined;






export default User;

