/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StopWatch model module.
 * @module model/StopWatch
 * @version 1.20.0+dev-539-g5e389228f
 */
class StopWatch {
    /**
     * Constructs a new <code>StopWatch</code>.
     * StopWatch represent a running stopwatch
     * @alias module:model/StopWatch
     */
    constructor() { 
        
        StopWatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StopWatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StopWatch} obj Optional instance to populate.
     * @return {module:model/StopWatch} The populated <code>StopWatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StopWatch();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('issue_index')) {
                obj['issue_index'] = ApiClient.convertToType(data['issue_index'], 'Number');
            }
            if (data.hasOwnProperty('issue_title')) {
                obj['issue_title'] = ApiClient.convertToType(data['issue_title'], 'String');
            }
            if (data.hasOwnProperty('repo_name')) {
                obj['repo_name'] = ApiClient.convertToType(data['repo_name'], 'String');
            }
            if (data.hasOwnProperty('repo_owner_name')) {
                obj['repo_owner_name'] = ApiClient.convertToType(data['repo_owner_name'], 'String');
            }
            if (data.hasOwnProperty('seconds')) {
                obj['seconds'] = ApiClient.convertToType(data['seconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StopWatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StopWatch</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // ensure the json data is a string
        if (data['issue_title'] && !(typeof data['issue_title'] === 'string' || data['issue_title'] instanceof String)) {
            throw new Error("Expected the field `issue_title` to be a primitive type in the JSON string but got " + data['issue_title']);
        }
        // ensure the json data is a string
        if (data['repo_name'] && !(typeof data['repo_name'] === 'string' || data['repo_name'] instanceof String)) {
            throw new Error("Expected the field `repo_name` to be a primitive type in the JSON string but got " + data['repo_name']);
        }
        // ensure the json data is a string
        if (data['repo_owner_name'] && !(typeof data['repo_owner_name'] === 'string' || data['repo_owner_name'] instanceof String)) {
            throw new Error("Expected the field `repo_owner_name` to be a primitive type in the JSON string but got " + data['repo_owner_name']);
        }

        return true;
    }


}



/**
 * @member {Date} created
 */
StopWatch.prototype['created'] = undefined;

/**
 * @member {String} duration
 */
StopWatch.prototype['duration'] = undefined;

/**
 * @member {Number} issue_index
 */
StopWatch.prototype['issue_index'] = undefined;

/**
 * @member {String} issue_title
 */
StopWatch.prototype['issue_title'] = undefined;

/**
 * @member {String} repo_name
 */
StopWatch.prototype['repo_name'] = undefined;

/**
 * @member {String} repo_owner_name
 */
StopWatch.prototype['repo_owner_name'] = undefined;

/**
 * @member {Number} seconds
 */
StopWatch.prototype['seconds'] = undefined;






export default StopWatch;

