/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Label from './Label';
import Milestone from './Milestone';
import PRBranchInfo from './PRBranchInfo';
import User from './User';

/**
 * The PullRequest model module.
 * @module model/PullRequest
 * @version 1.20.0+dev-539-g5e389228f
 */
class PullRequest {
    /**
     * Constructs a new <code>PullRequest</code>.
     * PullRequest represents a pull request
     * @alias module:model/PullRequest
     */
    constructor() { 
        
        PullRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PullRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PullRequest} obj Optional instance to populate.
     * @return {module:model/PullRequest} The populated <code>PullRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PullRequest();

            if (data.hasOwnProperty('allow_maintainer_edit')) {
                obj['allow_maintainer_edit'] = ApiClient.convertToType(data['allow_maintainer_edit'], 'Boolean');
            }
            if (data.hasOwnProperty('assignee')) {
                obj['assignee'] = User.constructFromObject(data['assignee']);
            }
            if (data.hasOwnProperty('assignees')) {
                obj['assignees'] = ApiClient.convertToType(data['assignees'], [User]);
            }
            if (data.hasOwnProperty('base')) {
                obj['base'] = PRBranchInfo.constructFromObject(data['base']);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('closed_at')) {
                obj['closed_at'] = ApiClient.convertToType(data['closed_at'], 'Date');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('diff_url')) {
                obj['diff_url'] = ApiClient.convertToType(data['diff_url'], 'String');
            }
            if (data.hasOwnProperty('due_date')) {
                obj['due_date'] = ApiClient.convertToType(data['due_date'], 'Date');
            }
            if (data.hasOwnProperty('head')) {
                obj['head'] = PRBranchInfo.constructFromObject(data['head']);
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_locked')) {
                obj['is_locked'] = ApiClient.convertToType(data['is_locked'], 'Boolean');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [Label]);
            }
            if (data.hasOwnProperty('merge_base')) {
                obj['merge_base'] = ApiClient.convertToType(data['merge_base'], 'String');
            }
            if (data.hasOwnProperty('merge_commit_sha')) {
                obj['merge_commit_sha'] = ApiClient.convertToType(data['merge_commit_sha'], 'String');
            }
            if (data.hasOwnProperty('mergeable')) {
                obj['mergeable'] = ApiClient.convertToType(data['mergeable'], 'Boolean');
            }
            if (data.hasOwnProperty('merged')) {
                obj['merged'] = ApiClient.convertToType(data['merged'], 'Boolean');
            }
            if (data.hasOwnProperty('merged_at')) {
                obj['merged_at'] = ApiClient.convertToType(data['merged_at'], 'Date');
            }
            if (data.hasOwnProperty('merged_by')) {
                obj['merged_by'] = User.constructFromObject(data['merged_by']);
            }
            if (data.hasOwnProperty('milestone')) {
                obj['milestone'] = Milestone.constructFromObject(data['milestone']);
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('patch_url')) {
                obj['patch_url'] = ApiClient.convertToType(data['patch_url'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PullRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PullRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `assignee`
        if (data['assignee']) { // data not null
          User.validateJSON(data['assignee']);
        }
        if (data['assignees']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['assignees'])) {
                throw new Error("Expected the field `assignees` to be an array in the JSON data but got " + data['assignees']);
            }
            // validate the optional field `assignees` (array)
            for (const item of data['assignees']) {
                User.validateJSON(item);
            };
        }
        // validate the optional field `base`
        if (data['base']) { // data not null
          PRBranchInfo.validateJSON(data['base']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['diff_url'] && !(typeof data['diff_url'] === 'string' || data['diff_url'] instanceof String)) {
            throw new Error("Expected the field `diff_url` to be a primitive type in the JSON string but got " + data['diff_url']);
        }
        // validate the optional field `head`
        if (data['head']) { // data not null
          PRBranchInfo.validateJSON(data['head']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                Label.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['merge_base'] && !(typeof data['merge_base'] === 'string' || data['merge_base'] instanceof String)) {
            throw new Error("Expected the field `merge_base` to be a primitive type in the JSON string but got " + data['merge_base']);
        }
        // ensure the json data is a string
        if (data['merge_commit_sha'] && !(typeof data['merge_commit_sha'] === 'string' || data['merge_commit_sha'] instanceof String)) {
            throw new Error("Expected the field `merge_commit_sha` to be a primitive type in the JSON string but got " + data['merge_commit_sha']);
        }
        // validate the optional field `merged_by`
        if (data['merged_by']) { // data not null
          User.validateJSON(data['merged_by']);
        }
        // validate the optional field `milestone`
        if (data['milestone']) { // data not null
          Milestone.validateJSON(data['milestone']);
        }
        // ensure the json data is a string
        if (data['patch_url'] && !(typeof data['patch_url'] === 'string' || data['patch_url'] instanceof String)) {
            throw new Error("Expected the field `patch_url` to be a primitive type in the JSON string but got " + data['patch_url']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {Boolean} allow_maintainer_edit
 */
PullRequest.prototype['allow_maintainer_edit'] = undefined;

/**
 * @member {module:model/User} assignee
 */
PullRequest.prototype['assignee'] = undefined;

/**
 * @member {Array.<module:model/User>} assignees
 */
PullRequest.prototype['assignees'] = undefined;

/**
 * @member {module:model/PRBranchInfo} base
 */
PullRequest.prototype['base'] = undefined;

/**
 * @member {String} body
 */
PullRequest.prototype['body'] = undefined;

/**
 * @member {Date} closed_at
 */
PullRequest.prototype['closed_at'] = undefined;

/**
 * @member {Number} comments
 */
PullRequest.prototype['comments'] = undefined;

/**
 * @member {Date} created_at
 */
PullRequest.prototype['created_at'] = undefined;

/**
 * @member {String} diff_url
 */
PullRequest.prototype['diff_url'] = undefined;

/**
 * @member {Date} due_date
 */
PullRequest.prototype['due_date'] = undefined;

/**
 * @member {module:model/PRBranchInfo} head
 */
PullRequest.prototype['head'] = undefined;

/**
 * @member {String} html_url
 */
PullRequest.prototype['html_url'] = undefined;

/**
 * @member {Number} id
 */
PullRequest.prototype['id'] = undefined;

/**
 * @member {Boolean} is_locked
 */
PullRequest.prototype['is_locked'] = undefined;

/**
 * @member {Array.<module:model/Label>} labels
 */
PullRequest.prototype['labels'] = undefined;

/**
 * @member {String} merge_base
 */
PullRequest.prototype['merge_base'] = undefined;

/**
 * @member {String} merge_commit_sha
 */
PullRequest.prototype['merge_commit_sha'] = undefined;

/**
 * @member {Boolean} mergeable
 */
PullRequest.prototype['mergeable'] = undefined;

/**
 * @member {Boolean} merged
 */
PullRequest.prototype['merged'] = undefined;

/**
 * @member {Date} merged_at
 */
PullRequest.prototype['merged_at'] = undefined;

/**
 * @member {module:model/User} merged_by
 */
PullRequest.prototype['merged_by'] = undefined;

/**
 * @member {module:model/Milestone} milestone
 */
PullRequest.prototype['milestone'] = undefined;

/**
 * @member {Number} number
 */
PullRequest.prototype['number'] = undefined;

/**
 * @member {String} patch_url
 */
PullRequest.prototype['patch_url'] = undefined;

/**
 * StateType issue state type
 * @member {String} state
 */
PullRequest.prototype['state'] = undefined;

/**
 * @member {String} title
 */
PullRequest.prototype['title'] = undefined;

/**
 * @member {Date} updated_at
 */
PullRequest.prototype['updated_at'] = undefined;

/**
 * @member {String} url
 */
PullRequest.prototype['url'] = undefined;

/**
 * @member {module:model/User} user
 */
PullRequest.prototype['user'] = undefined;






export default PullRequest;

