/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileLinksResponse from './FileLinksResponse';

/**
 * The ContentsResponse model module.
 * @module model/ContentsResponse
 * @version 1.20.0+dev-539-g5e389228f
 */
class ContentsResponse {
    /**
     * Constructs a new <code>ContentsResponse</code>.
     * ContentsResponse contains information about a repo&#39;s entry&#39;s (dir, file, symlink, submodule) metadata and content
     * @alias module:model/ContentsResponse
     */
    constructor() { 
        
        ContentsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContentsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContentsResponse} obj Optional instance to populate.
     * @return {module:model/ContentsResponse} The populated <code>ContentsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContentsResponse();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = FileLinksResponse.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('download_url')) {
                obj['download_url'] = ApiClient.convertToType(data['download_url'], 'String');
            }
            if (data.hasOwnProperty('encoding')) {
                obj['encoding'] = ApiClient.convertToType(data['encoding'], 'String');
            }
            if (data.hasOwnProperty('git_url')) {
                obj['git_url'] = ApiClient.convertToType(data['git_url'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('last_commit_sha')) {
                obj['last_commit_sha'] = ApiClient.convertToType(data['last_commit_sha'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('submodule_git_url')) {
                obj['submodule_git_url'] = ApiClient.convertToType(data['submodule_git_url'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContentsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContentsResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          FileLinksResponse.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['download_url'] && !(typeof data['download_url'] === 'string' || data['download_url'] instanceof String)) {
            throw new Error("Expected the field `download_url` to be a primitive type in the JSON string but got " + data['download_url']);
        }
        // ensure the json data is a string
        if (data['encoding'] && !(typeof data['encoding'] === 'string' || data['encoding'] instanceof String)) {
            throw new Error("Expected the field `encoding` to be a primitive type in the JSON string but got " + data['encoding']);
        }
        // ensure the json data is a string
        if (data['git_url'] && !(typeof data['git_url'] === 'string' || data['git_url'] instanceof String)) {
            throw new Error("Expected the field `git_url` to be a primitive type in the JSON string but got " + data['git_url']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['last_commit_sha'] && !(typeof data['last_commit_sha'] === 'string' || data['last_commit_sha'] instanceof String)) {
            throw new Error("Expected the field `last_commit_sha` to be a primitive type in the JSON string but got " + data['last_commit_sha']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['sha'] && !(typeof data['sha'] === 'string' || data['sha'] instanceof String)) {
            throw new Error("Expected the field `sha` to be a primitive type in the JSON string but got " + data['sha']);
        }
        // ensure the json data is a string
        if (data['submodule_git_url'] && !(typeof data['submodule_git_url'] === 'string' || data['submodule_git_url'] instanceof String)) {
            throw new Error("Expected the field `submodule_git_url` to be a primitive type in the JSON string but got " + data['submodule_git_url']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {module:model/FileLinksResponse} _links
 */
ContentsResponse.prototype['_links'] = undefined;

/**
 * `content` is populated when `type` is `file`, otherwise null
 * @member {String} content
 */
ContentsResponse.prototype['content'] = undefined;

/**
 * @member {String} download_url
 */
ContentsResponse.prototype['download_url'] = undefined;

/**
 * `encoding` is populated when `type` is `file`, otherwise null
 * @member {String} encoding
 */
ContentsResponse.prototype['encoding'] = undefined;

/**
 * @member {String} git_url
 */
ContentsResponse.prototype['git_url'] = undefined;

/**
 * @member {String} html_url
 */
ContentsResponse.prototype['html_url'] = undefined;

/**
 * @member {String} last_commit_sha
 */
ContentsResponse.prototype['last_commit_sha'] = undefined;

/**
 * @member {String} name
 */
ContentsResponse.prototype['name'] = undefined;

/**
 * @member {String} path
 */
ContentsResponse.prototype['path'] = undefined;

/**
 * @member {String} sha
 */
ContentsResponse.prototype['sha'] = undefined;

/**
 * @member {Number} size
 */
ContentsResponse.prototype['size'] = undefined;

/**
 * `submodule_git_url` is populated when `type` is `submodule`, otherwise null
 * @member {String} submodule_git_url
 */
ContentsResponse.prototype['submodule_git_url'] = undefined;

/**
 * `target` is populated when `type` is `symlink`, otherwise null
 * @member {String} target
 */
ContentsResponse.prototype['target'] = undefined;

/**
 * `type` will be `file`, `dir`, `symlink`, or `submodule`
 * @member {String} type
 */
ContentsResponse.prototype['type'] = undefined;

/**
 * @member {String} url
 */
ContentsResponse.prototype['url'] = undefined;






export default ContentsResponse;

