/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Issue from './Issue';

/**
 * The TrackedTime model module.
 * @module model/TrackedTime
 * @version 1.20.0+dev-539-g5e389228f
 */
class TrackedTime {
    /**
     * Constructs a new <code>TrackedTime</code>.
     * TrackedTime worked time for an issue / pr
     * @alias module:model/TrackedTime
     */
    constructor() { 
        
        TrackedTime.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TrackedTime</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrackedTime} obj Optional instance to populate.
     * @return {module:model/TrackedTime} The populated <code>TrackedTime</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrackedTime();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('issue')) {
                obj['issue'] = Issue.constructFromObject(data['issue']);
            }
            if (data.hasOwnProperty('issue_id')) {
                obj['issue_id'] = ApiClient.convertToType(data['issue_id'], 'Number');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Number');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
            if (data.hasOwnProperty('user_name')) {
                obj['user_name'] = ApiClient.convertToType(data['user_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrackedTime</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrackedTime</code>.
     */
    static validateJSON(data) {
        // validate the optional field `issue`
        if (data['issue']) { // data not null
          Issue.validateJSON(data['issue']);
        }
        // ensure the json data is a string
        if (data['user_name'] && !(typeof data['user_name'] === 'string' || data['user_name'] instanceof String)) {
            throw new Error("Expected the field `user_name` to be a primitive type in the JSON string but got " + data['user_name']);
        }

        return true;
    }


}



/**
 * @member {Date} created
 */
TrackedTime.prototype['created'] = undefined;

/**
 * @member {Number} id
 */
TrackedTime.prototype['id'] = undefined;

/**
 * @member {module:model/Issue} issue
 */
TrackedTime.prototype['issue'] = undefined;

/**
 * deprecated (only for backwards compatibility)
 * @member {Number} issue_id
 */
TrackedTime.prototype['issue_id'] = undefined;

/**
 * Time in seconds
 * @member {Number} time
 */
TrackedTime.prototype['time'] = undefined;

/**
 * deprecated (only for backwards compatibility)
 * @member {Number} user_id
 */
TrackedTime.prototype['user_id'] = undefined;

/**
 * @member {String} user_name
 */
TrackedTime.prototype['user_name'] = undefined;






export default TrackedTime;

