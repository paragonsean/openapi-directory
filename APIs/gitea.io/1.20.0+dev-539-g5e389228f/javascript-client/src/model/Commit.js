/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommitAffectedFiles from './CommitAffectedFiles';
import CommitMeta from './CommitMeta';
import CommitStats from './CommitStats';
import RepoCommit from './RepoCommit';
import User from './User';

/**
 * The Commit model module.
 * @module model/Commit
 * @version 1.20.0+dev-539-g5e389228f
 */
class Commit {
    /**
     * Constructs a new <code>Commit</code>.
     * @alias module:model/Commit
     */
    constructor() { 
        
        Commit.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Commit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Commit} obj Optional instance to populate.
     * @return {module:model/Commit} The populated <code>Commit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Commit();

            if (data.hasOwnProperty('author')) {
                obj['author'] = User.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('commit')) {
                obj['commit'] = RepoCommit.constructFromObject(data['commit']);
            }
            if (data.hasOwnProperty('committer')) {
                obj['committer'] = User.constructFromObject(data['committer']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], [CommitAffectedFiles]);
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('parents')) {
                obj['parents'] = ApiClient.convertToType(data['parents'], [CommitMeta]);
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = CommitStats.constructFromObject(data['stats']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Commit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Commit</code>.
     */
    static validateJSON(data) {
        // validate the optional field `author`
        if (data['author']) { // data not null
          User.validateJSON(data['author']);
        }
        // validate the optional field `commit`
        if (data['commit']) { // data not null
          RepoCommit.validateJSON(data['commit']);
        }
        // validate the optional field `committer`
        if (data['committer']) { // data not null
          User.validateJSON(data['committer']);
        }
        if (data['files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['files'])) {
                throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
            }
            // validate the optional field `files` (array)
            for (const item of data['files']) {
                CommitAffectedFiles.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        if (data['parents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parents'])) {
                throw new Error("Expected the field `parents` to be an array in the JSON data but got " + data['parents']);
            }
            // validate the optional field `parents` (array)
            for (const item of data['parents']) {
                CommitMeta.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sha'] && !(typeof data['sha'] === 'string' || data['sha'] instanceof String)) {
            throw new Error("Expected the field `sha` to be a primitive type in the JSON string but got " + data['sha']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          CommitStats.validateJSON(data['stats']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {module:model/User} author
 */
Commit.prototype['author'] = undefined;

/**
 * @member {module:model/RepoCommit} commit
 */
Commit.prototype['commit'] = undefined;

/**
 * @member {module:model/User} committer
 */
Commit.prototype['committer'] = undefined;

/**
 * @member {Date} created
 */
Commit.prototype['created'] = undefined;

/**
 * @member {Array.<module:model/CommitAffectedFiles>} files
 */
Commit.prototype['files'] = undefined;

/**
 * @member {String} html_url
 */
Commit.prototype['html_url'] = undefined;

/**
 * @member {Array.<module:model/CommitMeta>} parents
 */
Commit.prototype['parents'] = undefined;

/**
 * @member {String} sha
 */
Commit.prototype['sha'] = undefined;

/**
 * @member {module:model/CommitStats} stats
 */
Commit.prototype['stats'] = undefined;

/**
 * @member {String} url
 */
Commit.prototype['url'] = undefined;






export default Commit;

