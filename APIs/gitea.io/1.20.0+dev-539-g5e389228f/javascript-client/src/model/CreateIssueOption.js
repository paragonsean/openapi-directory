/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateIssueOption model module.
 * @module model/CreateIssueOption
 * @version 1.20.0+dev-539-g5e389228f
 */
class CreateIssueOption {
    /**
     * Constructs a new <code>CreateIssueOption</code>.
     * CreateIssueOption options to create one issue
     * @alias module:model/CreateIssueOption
     * @param title {String} 
     */
    constructor(title) { 
        
        CreateIssueOption.initialize(this, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title) { 
        obj['title'] = title;
    }

    /**
     * Constructs a <code>CreateIssueOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateIssueOption} obj Optional instance to populate.
     * @return {module:model/CreateIssueOption} The populated <code>CreateIssueOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateIssueOption();

            if (data.hasOwnProperty('assignee')) {
                obj['assignee'] = ApiClient.convertToType(data['assignee'], 'String');
            }
            if (data.hasOwnProperty('assignees')) {
                obj['assignees'] = ApiClient.convertToType(data['assignees'], ['String']);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('closed')) {
                obj['closed'] = ApiClient.convertToType(data['closed'], 'Boolean');
            }
            if (data.hasOwnProperty('due_date')) {
                obj['due_date'] = ApiClient.convertToType(data['due_date'], 'Date');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['Number']);
            }
            if (data.hasOwnProperty('milestone')) {
                obj['milestone'] = ApiClient.convertToType(data['milestone'], 'Number');
            }
            if (data.hasOwnProperty('ref')) {
                obj['ref'] = ApiClient.convertToType(data['ref'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateIssueOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateIssueOption</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateIssueOption.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['assignee'] && !(typeof data['assignee'] === 'string' || data['assignee'] instanceof String)) {
            throw new Error("Expected the field `assignee` to be a primitive type in the JSON string but got " + data['assignee']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['assignees'])) {
            throw new Error("Expected the field `assignees` to be an array in the JSON data but got " + data['assignees']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['ref'] && !(typeof data['ref'] === 'string' || data['ref'] instanceof String)) {
            throw new Error("Expected the field `ref` to be a primitive type in the JSON string but got " + data['ref']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

CreateIssueOption.RequiredProperties = ["title"];

/**
 * deprecated
 * @member {String} assignee
 */
CreateIssueOption.prototype['assignee'] = undefined;

/**
 * @member {Array.<String>} assignees
 */
CreateIssueOption.prototype['assignees'] = undefined;

/**
 * @member {String} body
 */
CreateIssueOption.prototype['body'] = undefined;

/**
 * @member {Boolean} closed
 */
CreateIssueOption.prototype['closed'] = undefined;

/**
 * @member {Date} due_date
 */
CreateIssueOption.prototype['due_date'] = undefined;

/**
 * list of label ids
 * @member {Array.<Number>} labels
 */
CreateIssueOption.prototype['labels'] = undefined;

/**
 * milestone id
 * @member {Number} milestone
 */
CreateIssueOption.prototype['milestone'] = undefined;

/**
 * @member {String} ref
 */
CreateIssueOption.prototype['ref'] = undefined;

/**
 * @member {String} title
 */
CreateIssueOption.prototype['title'] = undefined;






export default CreateIssueOption;

