/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Comment from './Comment';
import Repository from './Repository';
import User from './User';

/**
 * The Activity model module.
 * @module model/Activity
 * @version 1.20.0+dev-539-g5e389228f
 */
class Activity {
    /**
     * Constructs a new <code>Activity</code>.
     * @alias module:model/Activity
     */
    constructor() { 
        
        Activity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Activity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Activity} obj Optional instance to populate.
     * @return {module:model/Activity} The populated <code>Activity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Activity();

            if (data.hasOwnProperty('act_user')) {
                obj['act_user'] = User.constructFromObject(data['act_user']);
            }
            if (data.hasOwnProperty('act_user_id')) {
                obj['act_user_id'] = ApiClient.convertToType(data['act_user_id'], 'Number');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = Comment.constructFromObject(data['comment']);
            }
            if (data.hasOwnProperty('comment_id')) {
                obj['comment_id'] = ApiClient.convertToType(data['comment_id'], 'Number');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_private')) {
                obj['is_private'] = ApiClient.convertToType(data['is_private'], 'Boolean');
            }
            if (data.hasOwnProperty('op_type')) {
                obj['op_type'] = ApiClient.convertToType(data['op_type'], 'String');
            }
            if (data.hasOwnProperty('ref_name')) {
                obj['ref_name'] = ApiClient.convertToType(data['ref_name'], 'String');
            }
            if (data.hasOwnProperty('repo')) {
                obj['repo'] = Repository.constructFromObject(data['repo']);
            }
            if (data.hasOwnProperty('repo_id')) {
                obj['repo_id'] = ApiClient.convertToType(data['repo_id'], 'Number');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Activity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Activity</code>.
     */
    static validateJSON(data) {
        // validate the optional field `act_user`
        if (data['act_user']) { // data not null
          User.validateJSON(data['act_user']);
        }
        // validate the optional field `comment`
        if (data['comment']) { // data not null
          Comment.validateJSON(data['comment']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['op_type'] && !(typeof data['op_type'] === 'string' || data['op_type'] instanceof String)) {
            throw new Error("Expected the field `op_type` to be a primitive type in the JSON string but got " + data['op_type']);
        }
        // ensure the json data is a string
        if (data['ref_name'] && !(typeof data['ref_name'] === 'string' || data['ref_name'] instanceof String)) {
            throw new Error("Expected the field `ref_name` to be a primitive type in the JSON string but got " + data['ref_name']);
        }
        // validate the optional field `repo`
        if (data['repo']) { // data not null
          Repository.validateJSON(data['repo']);
        }

        return true;
    }


}



/**
 * @member {module:model/User} act_user
 */
Activity.prototype['act_user'] = undefined;

/**
 * @member {Number} act_user_id
 */
Activity.prototype['act_user_id'] = undefined;

/**
 * @member {module:model/Comment} comment
 */
Activity.prototype['comment'] = undefined;

/**
 * @member {Number} comment_id
 */
Activity.prototype['comment_id'] = undefined;

/**
 * @member {String} content
 */
Activity.prototype['content'] = undefined;

/**
 * @member {Date} created
 */
Activity.prototype['created'] = undefined;

/**
 * @member {Number} id
 */
Activity.prototype['id'] = undefined;

/**
 * @member {Boolean} is_private
 */
Activity.prototype['is_private'] = undefined;

/**
 * @member {String} op_type
 */
Activity.prototype['op_type'] = undefined;

/**
 * @member {String} ref_name
 */
Activity.prototype['ref_name'] = undefined;

/**
 * @member {module:model/Repository} repo
 */
Activity.prototype['repo'] = undefined;

/**
 * @member {Number} repo_id
 */
Activity.prototype['repo_id'] = undefined;

/**
 * @member {Number} user_id
 */
Activity.prototype['user_id'] = undefined;






export default Activity;

