/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommitStatus from './CommitStatus';
import Repository from './Repository';

/**
 * The CombinedStatus model module.
 * @module model/CombinedStatus
 * @version 1.20.0+dev-539-g5e389228f
 */
class CombinedStatus {
    /**
     * Constructs a new <code>CombinedStatus</code>.
     * CombinedStatus holds the combined state of several statuses for a single commit
     * @alias module:model/CombinedStatus
     */
    constructor() { 
        
        CombinedStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CombinedStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CombinedStatus} obj Optional instance to populate.
     * @return {module:model/CombinedStatus} The populated <code>CombinedStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CombinedStatus();

            if (data.hasOwnProperty('commit_url')) {
                obj['commit_url'] = ApiClient.convertToType(data['commit_url'], 'String');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = Repository.constructFromObject(data['repository']);
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('statuses')) {
                obj['statuses'] = ApiClient.convertToType(data['statuses'], [CommitStatus]);
            }
            if (data.hasOwnProperty('total_count')) {
                obj['total_count'] = ApiClient.convertToType(data['total_count'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CombinedStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CombinedStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['commit_url'] && !(typeof data['commit_url'] === 'string' || data['commit_url'] instanceof String)) {
            throw new Error("Expected the field `commit_url` to be a primitive type in the JSON string but got " + data['commit_url']);
        }
        // validate the optional field `repository`
        if (data['repository']) { // data not null
          Repository.validateJSON(data['repository']);
        }
        // ensure the json data is a string
        if (data['sha'] && !(typeof data['sha'] === 'string' || data['sha'] instanceof String)) {
            throw new Error("Expected the field `sha` to be a primitive type in the JSON string but got " + data['sha']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        if (data['statuses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statuses'])) {
                throw new Error("Expected the field `statuses` to be an array in the JSON data but got " + data['statuses']);
            }
            // validate the optional field `statuses` (array)
            for (const item of data['statuses']) {
                CommitStatus.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {String} commit_url
 */
CombinedStatus.prototype['commit_url'] = undefined;

/**
 * @member {module:model/Repository} repository
 */
CombinedStatus.prototype['repository'] = undefined;

/**
 * @member {String} sha
 */
CombinedStatus.prototype['sha'] = undefined;

/**
 * CommitStatusState holds the state of a CommitStatus It can be \"pending\", \"success\", \"error\", \"failure\", and \"warning\"
 * @member {String} state
 */
CombinedStatus.prototype['state'] = undefined;

/**
 * @member {Array.<module:model/CommitStatus>} statuses
 */
CombinedStatus.prototype['statuses'] = undefined;

/**
 * @member {Number} total_count
 */
CombinedStatus.prototype['total_count'] = undefined;

/**
 * @member {String} url
 */
CombinedStatus.prototype['url'] = undefined;






export default CombinedStatus;

