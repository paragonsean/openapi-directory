/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PayloadUser from './PayloadUser';

/**
 * The PayloadCommitVerification model module.
 * @module model/PayloadCommitVerification
 * @version 1.20.0+dev-539-g5e389228f
 */
class PayloadCommitVerification {
    /**
     * Constructs a new <code>PayloadCommitVerification</code>.
     * PayloadCommitVerification represents the GPG verification of a commit
     * @alias module:model/PayloadCommitVerification
     */
    constructor() { 
        
        PayloadCommitVerification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PayloadCommitVerification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayloadCommitVerification} obj Optional instance to populate.
     * @return {module:model/PayloadCommitVerification} The populated <code>PayloadCommitVerification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayloadCommitVerification();

            if (data.hasOwnProperty('payload')) {
                obj['payload'] = ApiClient.convertToType(data['payload'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('signer')) {
                obj['signer'] = PayloadUser.constructFromObject(data['signer']);
            }
            if (data.hasOwnProperty('verified')) {
                obj['verified'] = ApiClient.convertToType(data['verified'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PayloadCommitVerification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PayloadCommitVerification</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['payload'] && !(typeof data['payload'] === 'string' || data['payload'] instanceof String)) {
            throw new Error("Expected the field `payload` to be a primitive type in the JSON string but got " + data['payload']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }
        // validate the optional field `signer`
        if (data['signer']) { // data not null
          PayloadUser.validateJSON(data['signer']);
        }

        return true;
    }


}



/**
 * @member {String} payload
 */
PayloadCommitVerification.prototype['payload'] = undefined;

/**
 * @member {String} reason
 */
PayloadCommitVerification.prototype['reason'] = undefined;

/**
 * @member {String} signature
 */
PayloadCommitVerification.prototype['signature'] = undefined;

/**
 * @member {module:model/PayloadUser} signer
 */
PayloadCommitVerification.prototype['signer'] = undefined;

/**
 * @member {Boolean} verified
 */
PayloadCommitVerification.prototype['verified'] = undefined;






export default PayloadCommitVerification;

