/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GiteaApi);
  }
}(this, function(expect, GiteaApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GiteaApi.NotificationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NotificationApi', function() {
    describe('notifyGetList', function() {
      it('should call notifyGetList successfully', function(done) {
        //uncomment below and update the code to test notifyGetList
        //instance.notifyGetList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('notifyGetRepoList', function() {
      it('should call notifyGetRepoList successfully', function(done) {
        //uncomment below and update the code to test notifyGetRepoList
        //instance.notifyGetRepoList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('notifyGetThread', function() {
      it('should call notifyGetThread successfully', function(done) {
        //uncomment below and update the code to test notifyGetThread
        //instance.notifyGetThread(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('notifyNewAvailable', function() {
      it('should call notifyNewAvailable successfully', function(done) {
        //uncomment below and update the code to test notifyNewAvailable
        //instance.notifyNewAvailable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('notifyReadList', function() {
      it('should call notifyReadList successfully', function(done) {
        //uncomment below and update the code to test notifyReadList
        //instance.notifyReadList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('notifyReadRepoList', function() {
      it('should call notifyReadRepoList successfully', function(done) {
        //uncomment below and update the code to test notifyReadRepoList
        //instance.notifyReadRepoList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('notifyReadThread', function() {
      it('should call notifyReadThread successfully', function(done) {
        //uncomment below and update the code to test notifyReadThread
        //instance.notifyReadThread(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
