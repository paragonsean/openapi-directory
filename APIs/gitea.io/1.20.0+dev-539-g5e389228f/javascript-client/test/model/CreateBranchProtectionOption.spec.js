/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GiteaApi);
  }
}(this, function(expect, GiteaApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GiteaApi.CreateBranchProtectionOption();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateBranchProtectionOption', function() {
    it('should create an instance of CreateBranchProtectionOption', function() {
      // uncomment below and update the code to test CreateBranchProtectionOption
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be.a(GiteaApi.CreateBranchProtectionOption);
    });

    it('should have the property approvalsWhitelistTeams (base name: "approvals_whitelist_teams")', function() {
      // uncomment below and update the code to test the property approvalsWhitelistTeams
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property approvalsWhitelistUsername (base name: "approvals_whitelist_username")', function() {
      // uncomment below and update the code to test the property approvalsWhitelistUsername
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property blockOnOfficialReviewRequests (base name: "block_on_official_review_requests")', function() {
      // uncomment below and update the code to test the property blockOnOfficialReviewRequests
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property blockOnOutdatedBranch (base name: "block_on_outdated_branch")', function() {
      // uncomment below and update the code to test the property blockOnOutdatedBranch
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property blockOnRejectedReviews (base name: "block_on_rejected_reviews")', function() {
      // uncomment below and update the code to test the property blockOnRejectedReviews
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property branchName (base name: "branch_name")', function() {
      // uncomment below and update the code to test the property branchName
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property dismissStaleApprovals (base name: "dismiss_stale_approvals")', function() {
      // uncomment below and update the code to test the property dismissStaleApprovals
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property enableApprovalsWhitelist (base name: "enable_approvals_whitelist")', function() {
      // uncomment below and update the code to test the property enableApprovalsWhitelist
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property enableMergeWhitelist (base name: "enable_merge_whitelist")', function() {
      // uncomment below and update the code to test the property enableMergeWhitelist
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property enablePush (base name: "enable_push")', function() {
      // uncomment below and update the code to test the property enablePush
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property enablePushWhitelist (base name: "enable_push_whitelist")', function() {
      // uncomment below and update the code to test the property enablePushWhitelist
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property enableStatusCheck (base name: "enable_status_check")', function() {
      // uncomment below and update the code to test the property enableStatusCheck
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property mergeWhitelistTeams (base name: "merge_whitelist_teams")', function() {
      // uncomment below and update the code to test the property mergeWhitelistTeams
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property mergeWhitelistUsernames (base name: "merge_whitelist_usernames")', function() {
      // uncomment below and update the code to test the property mergeWhitelistUsernames
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property protectedFilePatterns (base name: "protected_file_patterns")', function() {
      // uncomment below and update the code to test the property protectedFilePatterns
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property pushWhitelistDeployKeys (base name: "push_whitelist_deploy_keys")', function() {
      // uncomment below and update the code to test the property pushWhitelistDeployKeys
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property pushWhitelistTeams (base name: "push_whitelist_teams")', function() {
      // uncomment below and update the code to test the property pushWhitelistTeams
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property pushWhitelistUsernames (base name: "push_whitelist_usernames")', function() {
      // uncomment below and update the code to test the property pushWhitelistUsernames
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property requireSignedCommits (base name: "require_signed_commits")', function() {
      // uncomment below and update the code to test the property requireSignedCommits
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property requiredApprovals (base name: "required_approvals")', function() {
      // uncomment below and update the code to test the property requiredApprovals
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property ruleName (base name: "rule_name")', function() {
      // uncomment below and update the code to test the property ruleName
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property statusCheckContexts (base name: "status_check_contexts")', function() {
      // uncomment below and update the code to test the property statusCheckContexts
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

    it('should have the property unprotectedFilePatterns (base name: "unprotected_file_patterns")', function() {
      // uncomment below and update the code to test the property unprotectedFilePatterns
      //var instance = new GiteaApi.CreateBranchProtectionOption();
      //expect(instance).to.be();
    });

  });

}));
