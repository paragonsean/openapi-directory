/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GiteaApi);
  }
}(this, function(expect, GiteaApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GiteaApi.CreateRepoOption();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateRepoOption', function() {
    it('should create an instance of CreateRepoOption', function() {
      // uncomment below and update the code to test CreateRepoOption
      //var instance = new GiteaApi.CreateRepoOption();
      //expect(instance).to.be.a(GiteaApi.CreateRepoOption);
    });

    it('should have the property autoInit (base name: "auto_init")', function() {
      // uncomment below and update the code to test the property autoInit
      //var instance = new GiteaApi.CreateRepoOption();
      //expect(instance).to.be();
    });

    it('should have the property defaultBranch (base name: "default_branch")', function() {
      // uncomment below and update the code to test the property defaultBranch
      //var instance = new GiteaApi.CreateRepoOption();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new GiteaApi.CreateRepoOption();
      //expect(instance).to.be();
    });

    it('should have the property gitignores (base name: "gitignores")', function() {
      // uncomment below and update the code to test the property gitignores
      //var instance = new GiteaApi.CreateRepoOption();
      //expect(instance).to.be();
    });

    it('should have the property issueLabels (base name: "issue_labels")', function() {
      // uncomment below and update the code to test the property issueLabels
      //var instance = new GiteaApi.CreateRepoOption();
      //expect(instance).to.be();
    });

    it('should have the property license (base name: "license")', function() {
      // uncomment below and update the code to test the property license
      //var instance = new GiteaApi.CreateRepoOption();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new GiteaApi.CreateRepoOption();
      //expect(instance).to.be();
    });

    it('should have the property _private (base name: "private")', function() {
      // uncomment below and update the code to test the property _private
      //var instance = new GiteaApi.CreateRepoOption();
      //expect(instance).to.be();
    });

    it('should have the property readme (base name: "readme")', function() {
      // uncomment below and update the code to test the property readme
      //var instance = new GiteaApi.CreateRepoOption();
      //expect(instance).to.be();
    });

    it('should have the property template (base name: "template")', function() {
      // uncomment below and update the code to test the property template
      //var instance = new GiteaApi.CreateRepoOption();
      //expect(instance).to.be();
    });

    it('should have the property trustModel (base name: "trust_model")', function() {
      // uncomment below and update the code to test the property trustModel
      //var instance = new GiteaApi.CreateRepoOption();
      //expect(instance).to.be();
    });

  });

}));
