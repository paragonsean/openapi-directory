/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GiteaApi);
  }
}(this, function(expect, GiteaApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GiteaApi.GPGKey();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GPGKey', function() {
    it('should create an instance of GPGKey', function() {
      // uncomment below and update the code to test GPGKey
      //var instance = new GiteaApi.GPGKey();
      //expect(instance).to.be.a(GiteaApi.GPGKey);
    });

    it('should have the property canCertify (base name: "can_certify")', function() {
      // uncomment below and update the code to test the property canCertify
      //var instance = new GiteaApi.GPGKey();
      //expect(instance).to.be();
    });

    it('should have the property canEncryptComms (base name: "can_encrypt_comms")', function() {
      // uncomment below and update the code to test the property canEncryptComms
      //var instance = new GiteaApi.GPGKey();
      //expect(instance).to.be();
    });

    it('should have the property canEncryptStorage (base name: "can_encrypt_storage")', function() {
      // uncomment below and update the code to test the property canEncryptStorage
      //var instance = new GiteaApi.GPGKey();
      //expect(instance).to.be();
    });

    it('should have the property canSign (base name: "can_sign")', function() {
      // uncomment below and update the code to test the property canSign
      //var instance = new GiteaApi.GPGKey();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new GiteaApi.GPGKey();
      //expect(instance).to.be();
    });

    it('should have the property emails (base name: "emails")', function() {
      // uncomment below and update the code to test the property emails
      //var instance = new GiteaApi.GPGKey();
      //expect(instance).to.be();
    });

    it('should have the property expiresAt (base name: "expires_at")', function() {
      // uncomment below and update the code to test the property expiresAt
      //var instance = new GiteaApi.GPGKey();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new GiteaApi.GPGKey();
      //expect(instance).to.be();
    });

    it('should have the property keyId (base name: "key_id")', function() {
      // uncomment below and update the code to test the property keyId
      //var instance = new GiteaApi.GPGKey();
      //expect(instance).to.be();
    });

    it('should have the property primaryKeyId (base name: "primary_key_id")', function() {
      // uncomment below and update the code to test the property primaryKeyId
      //var instance = new GiteaApi.GPGKey();
      //expect(instance).to.be();
    });

    it('should have the property publicKey (base name: "public_key")', function() {
      // uncomment below and update the code to test the property publicKey
      //var instance = new GiteaApi.GPGKey();
      //expect(instance).to.be();
    });

    it('should have the property subkeys (base name: "subkeys")', function() {
      // uncomment below and update the code to test the property subkeys
      //var instance = new GiteaApi.GPGKey();
      //expect(instance).to.be();
    });

    it('should have the property verified (base name: "verified")', function() {
      // uncomment below and update the code to test the property verified
      //var instance = new GiteaApi.GPGKey();
      //expect(instance).to.be();
    });

  });

}));
