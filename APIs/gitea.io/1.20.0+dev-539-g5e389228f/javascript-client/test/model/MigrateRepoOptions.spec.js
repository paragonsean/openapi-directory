/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GiteaApi);
  }
}(this, function(expect, GiteaApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GiteaApi.MigrateRepoOptions();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MigrateRepoOptions', function() {
    it('should create an instance of MigrateRepoOptions', function() {
      // uncomment below and update the code to test MigrateRepoOptions
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be.a(GiteaApi.MigrateRepoOptions);
    });

    it('should have the property authPassword (base name: "auth_password")', function() {
      // uncomment below and update the code to test the property authPassword
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property authToken (base name: "auth_token")', function() {
      // uncomment below and update the code to test the property authToken
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property authUsername (base name: "auth_username")', function() {
      // uncomment below and update the code to test the property authUsername
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property cloneAddr (base name: "clone_addr")', function() {
      // uncomment below and update the code to test the property cloneAddr
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property issues (base name: "issues")', function() {
      // uncomment below and update the code to test the property issues
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property lfs (base name: "lfs")', function() {
      // uncomment below and update the code to test the property lfs
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property lfsEndpoint (base name: "lfs_endpoint")', function() {
      // uncomment below and update the code to test the property lfsEndpoint
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property milestones (base name: "milestones")', function() {
      // uncomment below and update the code to test the property milestones
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property mirror (base name: "mirror")', function() {
      // uncomment below and update the code to test the property mirror
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property mirrorInterval (base name: "mirror_interval")', function() {
      // uncomment below and update the code to test the property mirrorInterval
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property _private (base name: "private")', function() {
      // uncomment below and update the code to test the property _private
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property pullRequests (base name: "pull_requests")', function() {
      // uncomment below and update the code to test the property pullRequests
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property releases (base name: "releases")', function() {
      // uncomment below and update the code to test the property releases
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property repoName (base name: "repo_name")', function() {
      // uncomment below and update the code to test the property repoName
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property repoOwner (base name: "repo_owner")', function() {
      // uncomment below and update the code to test the property repoOwner
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property service (base name: "service")', function() {
      // uncomment below and update the code to test the property service
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property uid (base name: "uid")', function() {
      // uncomment below and update the code to test the property uid
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

    it('should have the property wiki (base name: "wiki")', function() {
      // uncomment below and update the code to test the property wiki
      //var instance = new GiteaApi.MigrateRepoOptions();
      //expect(instance).to.be();
    });

  });

}));
