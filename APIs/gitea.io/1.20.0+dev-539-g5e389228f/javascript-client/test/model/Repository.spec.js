/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GiteaApi);
  }
}(this, function(expect, GiteaApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GiteaApi.Repository();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Repository', function() {
    it('should create an instance of Repository', function() {
      // uncomment below and update the code to test Repository
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be.a(GiteaApi.Repository);
    });

    it('should have the property allowMergeCommits (base name: "allow_merge_commits")', function() {
      // uncomment below and update the code to test the property allowMergeCommits
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property allowRebase (base name: "allow_rebase")', function() {
      // uncomment below and update the code to test the property allowRebase
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property allowRebaseExplicit (base name: "allow_rebase_explicit")', function() {
      // uncomment below and update the code to test the property allowRebaseExplicit
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property allowRebaseUpdate (base name: "allow_rebase_update")', function() {
      // uncomment below and update the code to test the property allowRebaseUpdate
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property allowSquashMerge (base name: "allow_squash_merge")', function() {
      // uncomment below and update the code to test the property allowSquashMerge
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property archived (base name: "archived")', function() {
      // uncomment below and update the code to test the property archived
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property avatarUrl (base name: "avatar_url")', function() {
      // uncomment below and update the code to test the property avatarUrl
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property cloneUrl (base name: "clone_url")', function() {
      // uncomment below and update the code to test the property cloneUrl
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property defaultAllowMaintainerEdit (base name: "default_allow_maintainer_edit")', function() {
      // uncomment below and update the code to test the property defaultAllowMaintainerEdit
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property defaultBranch (base name: "default_branch")', function() {
      // uncomment below and update the code to test the property defaultBranch
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property defaultDeleteBranchAfterMerge (base name: "default_delete_branch_after_merge")', function() {
      // uncomment below and update the code to test the property defaultDeleteBranchAfterMerge
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property defaultMergeStyle (base name: "default_merge_style")', function() {
      // uncomment below and update the code to test the property defaultMergeStyle
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property empty (base name: "empty")', function() {
      // uncomment below and update the code to test the property empty
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property externalTracker (base name: "external_tracker")', function() {
      // uncomment below and update the code to test the property externalTracker
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property externalWiki (base name: "external_wiki")', function() {
      // uncomment below and update the code to test the property externalWiki
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property fork (base name: "fork")', function() {
      // uncomment below and update the code to test the property fork
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property forksCount (base name: "forks_count")', function() {
      // uncomment below and update the code to test the property forksCount
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property fullName (base name: "full_name")', function() {
      // uncomment below and update the code to test the property fullName
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property hasActions (base name: "has_actions")', function() {
      // uncomment below and update the code to test the property hasActions
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property hasIssues (base name: "has_issues")', function() {
      // uncomment below and update the code to test the property hasIssues
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property hasPackages (base name: "has_packages")', function() {
      // uncomment below and update the code to test the property hasPackages
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property hasProjects (base name: "has_projects")', function() {
      // uncomment below and update the code to test the property hasProjects
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property hasPullRequests (base name: "has_pull_requests")', function() {
      // uncomment below and update the code to test the property hasPullRequests
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property hasReleases (base name: "has_releases")', function() {
      // uncomment below and update the code to test the property hasReleases
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property hasWiki (base name: "has_wiki")', function() {
      // uncomment below and update the code to test the property hasWiki
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property htmlUrl (base name: "html_url")', function() {
      // uncomment below and update the code to test the property htmlUrl
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property ignoreWhitespaceConflicts (base name: "ignore_whitespace_conflicts")', function() {
      // uncomment below and update the code to test the property ignoreWhitespaceConflicts
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property internal (base name: "internal")', function() {
      // uncomment below and update the code to test the property internal
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property internalTracker (base name: "internal_tracker")', function() {
      // uncomment below and update the code to test the property internalTracker
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property language (base name: "language")', function() {
      // uncomment below and update the code to test the property language
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property languagesUrl (base name: "languages_url")', function() {
      // uncomment below and update the code to test the property languagesUrl
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property link (base name: "link")', function() {
      // uncomment below and update the code to test the property link
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property mirror (base name: "mirror")', function() {
      // uncomment below and update the code to test the property mirror
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property mirrorInterval (base name: "mirror_interval")', function() {
      // uncomment below and update the code to test the property mirrorInterval
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property mirrorUpdated (base name: "mirror_updated")', function() {
      // uncomment below and update the code to test the property mirrorUpdated
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property openIssuesCount (base name: "open_issues_count")', function() {
      // uncomment below and update the code to test the property openIssuesCount
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property openPrCounter (base name: "open_pr_counter")', function() {
      // uncomment below and update the code to test the property openPrCounter
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property originalUrl (base name: "original_url")', function() {
      // uncomment below and update the code to test the property originalUrl
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property parent (base name: "parent")', function() {
      // uncomment below and update the code to test the property parent
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property permissions (base name: "permissions")', function() {
      // uncomment below and update the code to test the property permissions
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property _private (base name: "private")', function() {
      // uncomment below and update the code to test the property _private
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property releaseCounter (base name: "release_counter")', function() {
      // uncomment below and update the code to test the property releaseCounter
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property repoTransfer (base name: "repo_transfer")', function() {
      // uncomment below and update the code to test the property repoTransfer
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "size")', function() {
      // uncomment below and update the code to test the property size
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property sshUrl (base name: "ssh_url")', function() {
      // uncomment below and update the code to test the property sshUrl
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property starsCount (base name: "stars_count")', function() {
      // uncomment below and update the code to test the property starsCount
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property template (base name: "template")', function() {
      // uncomment below and update the code to test the property template
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property watchersCount (base name: "watchers_count")', function() {
      // uncomment below and update the code to test the property watchersCount
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

    it('should have the property website (base name: "website")', function() {
      // uncomment below and update the code to test the property website
      //var instance = new GiteaApi.Repository();
      //expect(instance).to.be();
    });

  });

}));
