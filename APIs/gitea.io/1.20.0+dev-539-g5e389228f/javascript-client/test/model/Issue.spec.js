/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GiteaApi);
  }
}(this, function(expect, GiteaApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GiteaApi.Issue();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Issue', function() {
    it('should create an instance of Issue', function() {
      // uncomment below and update the code to test Issue
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be.a(GiteaApi.Issue);
    });

    it('should have the property assets (base name: "assets")', function() {
      // uncomment below and update the code to test the property assets
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property assignee (base name: "assignee")', function() {
      // uncomment below and update the code to test the property assignee
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property assignees (base name: "assignees")', function() {
      // uncomment below and update the code to test the property assignees
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property body (base name: "body")', function() {
      // uncomment below and update the code to test the property body
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property closedAt (base name: "closed_at")', function() {
      // uncomment below and update the code to test the property closedAt
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property comments (base name: "comments")', function() {
      // uncomment below and update the code to test the property comments
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property dueDate (base name: "due_date")', function() {
      // uncomment below and update the code to test the property dueDate
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property htmlUrl (base name: "html_url")', function() {
      // uncomment below and update the code to test the property htmlUrl
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property isLocked (base name: "is_locked")', function() {
      // uncomment below and update the code to test the property isLocked
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property milestone (base name: "milestone")', function() {
      // uncomment below and update the code to test the property milestone
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property number (base name: "number")', function() {
      // uncomment below and update the code to test the property number
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property originalAuthor (base name: "original_author")', function() {
      // uncomment below and update the code to test the property originalAuthor
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property originalAuthorId (base name: "original_author_id")', function() {
      // uncomment below and update the code to test the property originalAuthorId
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property pullRequest (base name: "pull_request")', function() {
      // uncomment below and update the code to test the property pullRequest
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property ref (base name: "ref")', function() {
      // uncomment below and update the code to test the property ref
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property repository (base name: "repository")', function() {
      // uncomment below and update the code to test the property repository
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new GiteaApi.Issue();
      //expect(instance).to.be();
    });

  });

}));
