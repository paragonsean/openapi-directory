/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GiteaApi);
  }
}(this, function(expect, GiteaApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GiteaApi.TimelineComment();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TimelineComment', function() {
    it('should create an instance of TimelineComment', function() {
      // uncomment below and update the code to test TimelineComment
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be.a(GiteaApi.TimelineComment);
    });

    it('should have the property assignee (base name: "assignee")', function() {
      // uncomment below and update the code to test the property assignee
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property assigneeTeam (base name: "assignee_team")', function() {
      // uncomment below and update the code to test the property assigneeTeam
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property body (base name: "body")', function() {
      // uncomment below and update the code to test the property body
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property dependentIssue (base name: "dependent_issue")', function() {
      // uncomment below and update the code to test the property dependentIssue
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property htmlUrl (base name: "html_url")', function() {
      // uncomment below and update the code to test the property htmlUrl
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property issueUrl (base name: "issue_url")', function() {
      // uncomment below and update the code to test the property issueUrl
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property label (base name: "label")', function() {
      // uncomment below and update the code to test the property label
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property milestone (base name: "milestone")', function() {
      // uncomment below and update the code to test the property milestone
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property newRef (base name: "new_ref")', function() {
      // uncomment below and update the code to test the property newRef
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property newTitle (base name: "new_title")', function() {
      // uncomment below and update the code to test the property newTitle
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property oldMilestone (base name: "old_milestone")', function() {
      // uncomment below and update the code to test the property oldMilestone
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property oldProjectId (base name: "old_project_id")', function() {
      // uncomment below and update the code to test the property oldProjectId
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property oldRef (base name: "old_ref")', function() {
      // uncomment below and update the code to test the property oldRef
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property oldTitle (base name: "old_title")', function() {
      // uncomment below and update the code to test the property oldTitle
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property projectId (base name: "project_id")', function() {
      // uncomment below and update the code to test the property projectId
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property pullRequestUrl (base name: "pull_request_url")', function() {
      // uncomment below and update the code to test the property pullRequestUrl
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property refAction (base name: "ref_action")', function() {
      // uncomment below and update the code to test the property refAction
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property refComment (base name: "ref_comment")', function() {
      // uncomment below and update the code to test the property refComment
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property refCommitSha (base name: "ref_commit_sha")', function() {
      // uncomment below and update the code to test the property refCommitSha
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property refIssue (base name: "ref_issue")', function() {
      // uncomment below and update the code to test the property refIssue
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property removedAssignee (base name: "removed_assignee")', function() {
      // uncomment below and update the code to test the property removedAssignee
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property resolveDoer (base name: "resolve_doer")', function() {
      // uncomment below and update the code to test the property resolveDoer
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property reviewId (base name: "review_id")', function() {
      // uncomment below and update the code to test the property reviewId
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property trackedTime (base name: "tracked_time")', function() {
      // uncomment below and update the code to test the property trackedTime
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new GiteaApi.TimelineComment();
      //expect(instance).to.be();
    });

  });

}));
