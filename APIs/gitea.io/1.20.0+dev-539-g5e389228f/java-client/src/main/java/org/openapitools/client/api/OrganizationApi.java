/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Activity;
import org.openapitools.client.model.CreateHookOption;
import org.openapitools.client.model.CreateLabelOption;
import org.openapitools.client.model.CreateOrgOption;
import org.openapitools.client.model.CreateRepoOption;
import org.openapitools.client.model.CreateTeamOption;
import org.openapitools.client.model.EditHookOption;
import org.openapitools.client.model.EditLabelOption;
import org.openapitools.client.model.EditOrgOption;
import org.openapitools.client.model.EditTeamOption;
import org.openapitools.client.model.Hook;
import org.openapitools.client.model.Label;
import java.time.LocalDate;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.OrganizationPermissions;
import org.openapitools.client.model.Repository;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.TeamSearch200Response;
import org.openapitools.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createOrgRepo
     * @param org name of organization (required)
     * @param createRepoOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrgRepoCall(String org, CreateRepoOption createRepoOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRepoOption;

        // create path and map variables
        String localVarPath = "/orgs/{org}/repos"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrgRepoValidateBeforeCall(String org, CreateRepoOption createRepoOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling createOrgRepo(Async)");
        }

        return createOrgRepoCall(org, createRepoOption, _callback);

    }

    /**
     * Create a repository in an organization
     * 
     * @param org name of organization (required)
     * @param createRepoOption  (optional)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public Repository createOrgRepo(String org, CreateRepoOption createRepoOption) throws ApiException {
        ApiResponse<Repository> localVarResp = createOrgRepoWithHttpInfo(org, createRepoOption);
        return localVarResp.getData();
    }

    /**
     * Create a repository in an organization
     * 
     * @param org name of organization (required)
     * @param createRepoOption  (optional)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Repository> createOrgRepoWithHttpInfo(String org, CreateRepoOption createRepoOption) throws ApiException {
        okhttp3.Call localVarCall = createOrgRepoValidateBeforeCall(org, createRepoOption, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a repository in an organization (asynchronously)
     * 
     * @param org name of organization (required)
     * @param createRepoOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrgRepoAsync(String org, CreateRepoOption createRepoOption, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrgRepoValidateBeforeCall(org, createRepoOption, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrgRepoDeprecated
     * @param org name of organization (required)
     * @param createRepoOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createOrgRepoDeprecatedCall(String org, CreateRepoOption createRepoOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRepoOption;

        // create path and map variables
        String localVarPath = "/org/{org}/repos"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrgRepoDeprecatedValidateBeforeCall(String org, CreateRepoOption createRepoOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling createOrgRepoDeprecated(Async)");
        }

        return createOrgRepoDeprecatedCall(org, createRepoOption, _callback);

    }

    /**
     * Create a repository in an organization
     * 
     * @param org name of organization (required)
     * @param createRepoOption  (optional)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Repository createOrgRepoDeprecated(String org, CreateRepoOption createRepoOption) throws ApiException {
        ApiResponse<Repository> localVarResp = createOrgRepoDeprecatedWithHttpInfo(org, createRepoOption);
        return localVarResp.getData();
    }

    /**
     * Create a repository in an organization
     * 
     * @param org name of organization (required)
     * @param createRepoOption  (optional)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Repository> createOrgRepoDeprecatedWithHttpInfo(String org, CreateRepoOption createRepoOption) throws ApiException {
        okhttp3.Call localVarCall = createOrgRepoDeprecatedValidateBeforeCall(org, createRepoOption, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a repository in an organization (asynchronously)
     * 
     * @param org name of organization (required)
     * @param createRepoOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createOrgRepoDeprecatedAsync(String org, CreateRepoOption createRepoOption, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrgRepoDeprecatedValidateBeforeCall(org, createRepoOption, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgAddTeamMember
     * @param id id of the team (required)
     * @param username username of the user to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgAddTeamMemberCall(Long id, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{id}/members/{username}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgAddTeamMemberValidateBeforeCall(Long id, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgAddTeamMember(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling orgAddTeamMember(Async)");
        }

        return orgAddTeamMemberCall(id, username, _callback);

    }

    /**
     * Add a team member
     * 
     * @param id id of the team (required)
     * @param username username of the user to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void orgAddTeamMember(Long id, String username) throws ApiException {
        orgAddTeamMemberWithHttpInfo(id, username);
    }

    /**
     * Add a team member
     * 
     * @param id id of the team (required)
     * @param username username of the user to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgAddTeamMemberWithHttpInfo(Long id, String username) throws ApiException {
        okhttp3.Call localVarCall = orgAddTeamMemberValidateBeforeCall(id, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a team member (asynchronously)
     * 
     * @param id id of the team (required)
     * @param username username of the user to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgAddTeamMemberAsync(Long id, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgAddTeamMemberValidateBeforeCall(id, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgAddTeamRepository
     * @param id id of the team (required)
     * @param org organization that owns the repo to add (required)
     * @param repo name of the repo to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call orgAddTeamRepositoryCall(Long id, String org, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{id}/repos/{org}/{repo}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgAddTeamRepositoryValidateBeforeCall(Long id, String org, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgAddTeamRepository(Async)");
        }

        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgAddTeamRepository(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling orgAddTeamRepository(Async)");
        }

        return orgAddTeamRepositoryCall(id, org, repo, _callback);

    }

    /**
     * Add a repository to a team
     * 
     * @param id id of the team (required)
     * @param org organization that owns the repo to add (required)
     * @param repo name of the repo to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void orgAddTeamRepository(Long id, String org, String repo) throws ApiException {
        orgAddTeamRepositoryWithHttpInfo(id, org, repo);
    }

    /**
     * Add a repository to a team
     * 
     * @param id id of the team (required)
     * @param org organization that owns the repo to add (required)
     * @param repo name of the repo to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgAddTeamRepositoryWithHttpInfo(Long id, String org, String repo) throws ApiException {
        okhttp3.Call localVarCall = orgAddTeamRepositoryValidateBeforeCall(id, org, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a repository to a team (asynchronously)
     * 
     * @param id id of the team (required)
     * @param org organization that owns the repo to add (required)
     * @param repo name of the repo to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call orgAddTeamRepositoryAsync(Long id, String org, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgAddTeamRepositoryValidateBeforeCall(id, org, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgConcealMember
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call orgConcealMemberCall(String org, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/public_members/{username}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgConcealMemberValidateBeforeCall(String org, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgConcealMember(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling orgConcealMember(Async)");
        }

        return orgConcealMemberCall(org, username, _callback);

    }

    /**
     * Conceal a user&#39;s membership
     * 
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void orgConcealMember(String org, String username) throws ApiException {
        orgConcealMemberWithHttpInfo(org, username);
    }

    /**
     * Conceal a user&#39;s membership
     * 
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgConcealMemberWithHttpInfo(String org, String username) throws ApiException {
        okhttp3.Call localVarCall = orgConcealMemberValidateBeforeCall(org, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Conceal a user&#39;s membership (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call orgConcealMemberAsync(String org, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgConcealMemberValidateBeforeCall(org, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgCreate
     * @param createOrgOption  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call orgCreateCall(CreateOrgOption createOrgOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrgOption;

        // create path and map variables
        String localVarPath = "/orgs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgCreateValidateBeforeCall(CreateOrgOption createOrgOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createOrgOption' is set
        if (createOrgOption == null) {
            throw new ApiException("Missing the required parameter 'createOrgOption' when calling orgCreate(Async)");
        }

        return orgCreateCall(createOrgOption, _callback);

    }

    /**
     * Create an organization
     * 
     * @param createOrgOption  (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Organization orgCreate(CreateOrgOption createOrgOption) throws ApiException {
        ApiResponse<Organization> localVarResp = orgCreateWithHttpInfo(createOrgOption);
        return localVarResp.getData();
    }

    /**
     * Create an organization
     * 
     * @param createOrgOption  (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Organization> orgCreateWithHttpInfo(CreateOrgOption createOrgOption) throws ApiException {
        okhttp3.Call localVarCall = orgCreateValidateBeforeCall(createOrgOption, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an organization (asynchronously)
     * 
     * @param createOrgOption  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call orgCreateAsync(CreateOrgOption createOrgOption, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgCreateValidateBeforeCall(createOrgOption, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgCreateHook
     * @param org name of the organization (required)
     * @param createHookOption  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgCreateHookCall(String org, CreateHookOption createHookOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createHookOption;

        // create path and map variables
        String localVarPath = "/orgs/{org}/hooks"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgCreateHookValidateBeforeCall(String org, CreateHookOption createHookOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgCreateHook(Async)");
        }

        // verify the required parameter 'createHookOption' is set
        if (createHookOption == null) {
            throw new ApiException("Missing the required parameter 'createHookOption' when calling orgCreateHook(Async)");
        }

        return orgCreateHookCall(org, createHookOption, _callback);

    }

    /**
     * Create a hook
     * 
     * @param org name of the organization (required)
     * @param createHookOption  (required)
     * @return Hook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public Hook orgCreateHook(String org, CreateHookOption createHookOption) throws ApiException {
        ApiResponse<Hook> localVarResp = orgCreateHookWithHttpInfo(org, createHookOption);
        return localVarResp.getData();
    }

    /**
     * Create a hook
     * 
     * @param org name of the organization (required)
     * @param createHookOption  (required)
     * @return ApiResponse&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hook> orgCreateHookWithHttpInfo(String org, CreateHookOption createHookOption) throws ApiException {
        okhttp3.Call localVarCall = orgCreateHookValidateBeforeCall(org, createHookOption, null);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a hook (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param createHookOption  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgCreateHookAsync(String org, CreateHookOption createHookOption, final ApiCallback<Hook> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgCreateHookValidateBeforeCall(org, createHookOption, _callback);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgCreateLabel
     * @param org name of the organization (required)
     * @param createLabelOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Label </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call orgCreateLabelCall(String org, CreateLabelOption createLabelOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLabelOption;

        // create path and map variables
        String localVarPath = "/orgs/{org}/labels"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgCreateLabelValidateBeforeCall(String org, CreateLabelOption createLabelOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgCreateLabel(Async)");
        }

        return orgCreateLabelCall(org, createLabelOption, _callback);

    }

    /**
     * Create a label for an organization
     * 
     * @param org name of the organization (required)
     * @param createLabelOption  (optional)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Label </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Label orgCreateLabel(String org, CreateLabelOption createLabelOption) throws ApiException {
        ApiResponse<Label> localVarResp = orgCreateLabelWithHttpInfo(org, createLabelOption);
        return localVarResp.getData();
    }

    /**
     * Create a label for an organization
     * 
     * @param org name of the organization (required)
     * @param createLabelOption  (optional)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Label </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Label> orgCreateLabelWithHttpInfo(String org, CreateLabelOption createLabelOption) throws ApiException {
        okhttp3.Call localVarCall = orgCreateLabelValidateBeforeCall(org, createLabelOption, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a label for an organization (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param createLabelOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Label </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call orgCreateLabelAsync(String org, CreateLabelOption createLabelOption, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgCreateLabelValidateBeforeCall(org, createLabelOption, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgCreateTeam
     * @param org name of the organization (required)
     * @param createTeamOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call orgCreateTeamCall(String org, CreateTeamOption createTeamOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTeamOption;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgCreateTeamValidateBeforeCall(String org, CreateTeamOption createTeamOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgCreateTeam(Async)");
        }

        return orgCreateTeamCall(org, createTeamOption, _callback);

    }

    /**
     * Create a team
     * 
     * @param org name of the organization (required)
     * @param createTeamOption  (optional)
     * @return Team
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Team orgCreateTeam(String org, CreateTeamOption createTeamOption) throws ApiException {
        ApiResponse<Team> localVarResp = orgCreateTeamWithHttpInfo(org, createTeamOption);
        return localVarResp.getData();
    }

    /**
     * Create a team
     * 
     * @param org name of the organization (required)
     * @param createTeamOption  (optional)
     * @return ApiResponse&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Team> orgCreateTeamWithHttpInfo(String org, CreateTeamOption createTeamOption) throws ApiException {
        okhttp3.Call localVarCall = orgCreateTeamValidateBeforeCall(org, createTeamOption, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a team (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param createTeamOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call orgCreateTeamAsync(String org, CreateTeamOption createTeamOption, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgCreateTeamValidateBeforeCall(org, createTeamOption, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgDelete
     * @param org organization that is to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgDeleteCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgDeleteValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgDelete(Async)");
        }

        return orgDeleteCall(org, _callback);

    }

    /**
     * Delete an organization
     * 
     * @param org organization that is to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public void orgDelete(String org) throws ApiException {
        orgDeleteWithHttpInfo(org);
    }

    /**
     * Delete an organization
     * 
     * @param org organization that is to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgDeleteWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = orgDeleteValidateBeforeCall(org, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an organization (asynchronously)
     * 
     * @param org organization that is to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgDeleteAsync(String org, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgDeleteValidateBeforeCall(org, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgDeleteHook
     * @param org name of the organization (required)
     * @param id id of the hook to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgDeleteHookCall(String org, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/hooks/{id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgDeleteHookValidateBeforeCall(String org, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgDeleteHook(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgDeleteHook(Async)");
        }

        return orgDeleteHookCall(org, id, _callback);

    }

    /**
     * Delete a hook
     * 
     * @param org name of the organization (required)
     * @param id id of the hook to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public void orgDeleteHook(String org, Long id) throws ApiException {
        orgDeleteHookWithHttpInfo(org, id);
    }

    /**
     * Delete a hook
     * 
     * @param org name of the organization (required)
     * @param id id of the hook to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgDeleteHookWithHttpInfo(String org, Long id) throws ApiException {
        okhttp3.Call localVarCall = orgDeleteHookValidateBeforeCall(org, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a hook (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param id id of the hook to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgDeleteHookAsync(String org, Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgDeleteHookValidateBeforeCall(org, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgDeleteLabel
     * @param org name of the organization (required)
     * @param id id of the label to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgDeleteLabelCall(String org, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/labels/{id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgDeleteLabelValidateBeforeCall(String org, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgDeleteLabel(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgDeleteLabel(Async)");
        }

        return orgDeleteLabelCall(org, id, _callback);

    }

    /**
     * Delete a label
     * 
     * @param org name of the organization (required)
     * @param id id of the label to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public void orgDeleteLabel(String org, Long id) throws ApiException {
        orgDeleteLabelWithHttpInfo(org, id);
    }

    /**
     * Delete a label
     * 
     * @param org name of the organization (required)
     * @param id id of the label to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgDeleteLabelWithHttpInfo(String org, Long id) throws ApiException {
        okhttp3.Call localVarCall = orgDeleteLabelValidateBeforeCall(org, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a label (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param id id of the label to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgDeleteLabelAsync(String org, Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgDeleteLabelValidateBeforeCall(org, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgDeleteMember
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> member removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgDeleteMemberCall(String org, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/members/{username}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgDeleteMemberValidateBeforeCall(String org, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgDeleteMember(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling orgDeleteMember(Async)");
        }

        return orgDeleteMemberCall(org, username, _callback);

    }

    /**
     * Remove a member from an organization
     * 
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> member removed </td><td>  -  </td></tr>
     </table>
     */
    public void orgDeleteMember(String org, String username) throws ApiException {
        orgDeleteMemberWithHttpInfo(org, username);
    }

    /**
     * Remove a member from an organization
     * 
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> member removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgDeleteMemberWithHttpInfo(String org, String username) throws ApiException {
        okhttp3.Call localVarCall = orgDeleteMemberValidateBeforeCall(org, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a member from an organization (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> member removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgDeleteMemberAsync(String org, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgDeleteMemberValidateBeforeCall(org, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgDeleteTeam
     * @param id id of the team to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> team deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgDeleteTeamCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgDeleteTeamValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgDeleteTeam(Async)");
        }

        return orgDeleteTeamCall(id, _callback);

    }

    /**
     * Delete a team
     * 
     * @param id id of the team to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> team deleted </td><td>  -  </td></tr>
     </table>
     */
    public void orgDeleteTeam(Long id) throws ApiException {
        orgDeleteTeamWithHttpInfo(id);
    }

    /**
     * Delete a team
     * 
     * @param id id of the team to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> team deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgDeleteTeamWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = orgDeleteTeamValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a team (asynchronously)
     * 
     * @param id id of the team to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> team deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgDeleteTeamAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgDeleteTeamValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgEdit
     * @param org name of the organization to edit (required)
     * @param editOrgOption  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgEditCall(String org, EditOrgOption editOrgOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editOrgOption;

        // create path and map variables
        String localVarPath = "/orgs/{org}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgEditValidateBeforeCall(String org, EditOrgOption editOrgOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgEdit(Async)");
        }

        // verify the required parameter 'editOrgOption' is set
        if (editOrgOption == null) {
            throw new ApiException("Missing the required parameter 'editOrgOption' when calling orgEdit(Async)");
        }

        return orgEditCall(org, editOrgOption, _callback);

    }

    /**
     * Edit an organization
     * 
     * @param org name of the organization to edit (required)
     * @param editOrgOption  (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization </td><td>  -  </td></tr>
     </table>
     */
    public Organization orgEdit(String org, EditOrgOption editOrgOption) throws ApiException {
        ApiResponse<Organization> localVarResp = orgEditWithHttpInfo(org, editOrgOption);
        return localVarResp.getData();
    }

    /**
     * Edit an organization
     * 
     * @param org name of the organization to edit (required)
     * @param editOrgOption  (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> orgEditWithHttpInfo(String org, EditOrgOption editOrgOption) throws ApiException {
        okhttp3.Call localVarCall = orgEditValidateBeforeCall(org, editOrgOption, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an organization (asynchronously)
     * 
     * @param org name of the organization to edit (required)
     * @param editOrgOption  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgEditAsync(String org, EditOrgOption editOrgOption, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgEditValidateBeforeCall(org, editOrgOption, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgEditHook
     * @param org name of the organization (required)
     * @param id id of the hook to update (required)
     * @param editHookOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgEditHookCall(String org, Long id, EditHookOption editHookOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editHookOption;

        // create path and map variables
        String localVarPath = "/orgs/{org}/hooks/{id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgEditHookValidateBeforeCall(String org, Long id, EditHookOption editHookOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgEditHook(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgEditHook(Async)");
        }

        return orgEditHookCall(org, id, editHookOption, _callback);

    }

    /**
     * Update a hook
     * 
     * @param org name of the organization (required)
     * @param id id of the hook to update (required)
     * @param editHookOption  (optional)
     * @return Hook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public Hook orgEditHook(String org, Long id, EditHookOption editHookOption) throws ApiException {
        ApiResponse<Hook> localVarResp = orgEditHookWithHttpInfo(org, id, editHookOption);
        return localVarResp.getData();
    }

    /**
     * Update a hook
     * 
     * @param org name of the organization (required)
     * @param id id of the hook to update (required)
     * @param editHookOption  (optional)
     * @return ApiResponse&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hook> orgEditHookWithHttpInfo(String org, Long id, EditHookOption editHookOption) throws ApiException {
        okhttp3.Call localVarCall = orgEditHookValidateBeforeCall(org, id, editHookOption, null);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a hook (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param id id of the hook to update (required)
     * @param editHookOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgEditHookAsync(String org, Long id, EditHookOption editHookOption, final ApiCallback<Hook> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgEditHookValidateBeforeCall(org, id, editHookOption, _callback);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgEditLabel
     * @param org name of the organization (required)
     * @param id id of the label to edit (required)
     * @param editLabelOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call orgEditLabelCall(String org, Long id, EditLabelOption editLabelOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editLabelOption;

        // create path and map variables
        String localVarPath = "/orgs/{org}/labels/{id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgEditLabelValidateBeforeCall(String org, Long id, EditLabelOption editLabelOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgEditLabel(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgEditLabel(Async)");
        }

        return orgEditLabelCall(org, id, editLabelOption, _callback);

    }

    /**
     * Update a label
     * 
     * @param org name of the organization (required)
     * @param id id of the label to edit (required)
     * @param editLabelOption  (optional)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Label orgEditLabel(String org, Long id, EditLabelOption editLabelOption) throws ApiException {
        ApiResponse<Label> localVarResp = orgEditLabelWithHttpInfo(org, id, editLabelOption);
        return localVarResp.getData();
    }

    /**
     * Update a label
     * 
     * @param org name of the organization (required)
     * @param id id of the label to edit (required)
     * @param editLabelOption  (optional)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Label> orgEditLabelWithHttpInfo(String org, Long id, EditLabelOption editLabelOption) throws ApiException {
        okhttp3.Call localVarCall = orgEditLabelValidateBeforeCall(org, id, editLabelOption, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a label (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param id id of the label to edit (required)
     * @param editLabelOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call orgEditLabelAsync(String org, Long id, EditLabelOption editLabelOption, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgEditLabelValidateBeforeCall(org, id, editLabelOption, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgEditTeam
     * @param id id of the team to edit (required)
     * @param editTeamOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgEditTeamCall(Integer id, EditTeamOption editTeamOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editTeamOption;

        // create path and map variables
        String localVarPath = "/teams/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgEditTeamValidateBeforeCall(Integer id, EditTeamOption editTeamOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgEditTeam(Async)");
        }

        return orgEditTeamCall(id, editTeamOption, _callback);

    }

    /**
     * Edit a team
     * 
     * @param id id of the team to edit (required)
     * @param editTeamOption  (optional)
     * @return Team
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public Team orgEditTeam(Integer id, EditTeamOption editTeamOption) throws ApiException {
        ApiResponse<Team> localVarResp = orgEditTeamWithHttpInfo(id, editTeamOption);
        return localVarResp.getData();
    }

    /**
     * Edit a team
     * 
     * @param id id of the team to edit (required)
     * @param editTeamOption  (optional)
     * @return ApiResponse&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Team> orgEditTeamWithHttpInfo(Integer id, EditTeamOption editTeamOption) throws ApiException {
        okhttp3.Call localVarCall = orgEditTeamValidateBeforeCall(id, editTeamOption, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a team (asynchronously)
     * 
     * @param id id of the team to edit (required)
     * @param editTeamOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgEditTeamAsync(Integer id, EditTeamOption editTeamOption, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgEditTeamValidateBeforeCall(id, editTeamOption, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgGet
     * @param org name of the organization to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgGetCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgGetValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgGet(Async)");
        }

        return orgGetCall(org, _callback);

    }

    /**
     * Get an organization
     * 
     * @param org name of the organization to get (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization </td><td>  -  </td></tr>
     </table>
     */
    public Organization orgGet(String org) throws ApiException {
        ApiResponse<Organization> localVarResp = orgGetWithHttpInfo(org);
        return localVarResp.getData();
    }

    /**
     * Get an organization
     * 
     * @param org name of the organization to get (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> orgGetWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = orgGetValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an organization (asynchronously)
     * 
     * @param org name of the organization to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgGetAsync(String org, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgGetValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgGetAll
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrganizationList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgGetAllCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgGetAllValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return orgGetAllCall(page, limit, _callback);

    }

    /**
     * Get list of organizations
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrganizationList </td><td>  -  </td></tr>
     </table>
     */
    public List<Organization> orgGetAll(Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Organization>> localVarResp = orgGetAllWithHttpInfo(page, limit);
        return localVarResp.getData();
    }

    /**
     * Get list of organizations
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Organization&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrganizationList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Organization>> orgGetAllWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = orgGetAllValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of organizations (asynchronously)
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrganizationList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgGetAllAsync(Integer page, Integer limit, final ApiCallback<List<Organization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgGetAllValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgGetHook
     * @param org name of the organization (required)
     * @param id id of the hook to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgGetHookCall(String org, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/hooks/{id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgGetHookValidateBeforeCall(String org, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgGetHook(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgGetHook(Async)");
        }

        return orgGetHookCall(org, id, _callback);

    }

    /**
     * Get a hook
     * 
     * @param org name of the organization (required)
     * @param id id of the hook to get (required)
     * @return Hook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public Hook orgGetHook(String org, Long id) throws ApiException {
        ApiResponse<Hook> localVarResp = orgGetHookWithHttpInfo(org, id);
        return localVarResp.getData();
    }

    /**
     * Get a hook
     * 
     * @param org name of the organization (required)
     * @param id id of the hook to get (required)
     * @return ApiResponse&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hook> orgGetHookWithHttpInfo(String org, Long id) throws ApiException {
        okhttp3.Call localVarCall = orgGetHookValidateBeforeCall(org, id, null);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a hook (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param id id of the hook to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgGetHookAsync(String org, Long id, final ApiCallback<Hook> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgGetHookValidateBeforeCall(org, id, _callback);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgGetLabel
     * @param org name of the organization (required)
     * @param id id of the label to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgGetLabelCall(String org, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/labels/{id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgGetLabelValidateBeforeCall(String org, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgGetLabel(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgGetLabel(Async)");
        }

        return orgGetLabelCall(org, id, _callback);

    }

    /**
     * Get a single label
     * 
     * @param org name of the organization (required)
     * @param id id of the label to get (required)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label </td><td>  -  </td></tr>
     </table>
     */
    public Label orgGetLabel(String org, Long id) throws ApiException {
        ApiResponse<Label> localVarResp = orgGetLabelWithHttpInfo(org, id);
        return localVarResp.getData();
    }

    /**
     * Get a single label
     * 
     * @param org name of the organization (required)
     * @param id id of the label to get (required)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Label> orgGetLabelWithHttpInfo(String org, Long id) throws ApiException {
        okhttp3.Call localVarCall = orgGetLabelValidateBeforeCall(org, id, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single label (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param id id of the label to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgGetLabelAsync(String org, Long id, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgGetLabelValidateBeforeCall(org, id, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgGetTeam
     * @param id id of the team to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgGetTeamCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgGetTeamValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgGetTeam(Async)");
        }

        return orgGetTeamCall(id, _callback);

    }

    /**
     * Get a team
     * 
     * @param id id of the team to get (required)
     * @return Team
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public Team orgGetTeam(Long id) throws ApiException {
        ApiResponse<Team> localVarResp = orgGetTeamWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a team
     * 
     * @param id id of the team to get (required)
     * @return ApiResponse&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Team> orgGetTeamWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = orgGetTeamValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a team (asynchronously)
     * 
     * @param id id of the team to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgGetTeamAsync(Long id, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgGetTeamValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgGetUserPermissions
     * @param username username of user (required)
     * @param org name of the organization (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrganizationPermissions </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgGetUserPermissionsCall(String username, String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/orgs/{org}/permissions"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgGetUserPermissionsValidateBeforeCall(String username, String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling orgGetUserPermissions(Async)");
        }

        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgGetUserPermissions(Async)");
        }

        return orgGetUserPermissionsCall(username, org, _callback);

    }

    /**
     * Get user permissions in organization
     * 
     * @param username username of user (required)
     * @param org name of the organization (required)
     * @return OrganizationPermissions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrganizationPermissions </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationPermissions orgGetUserPermissions(String username, String org) throws ApiException {
        ApiResponse<OrganizationPermissions> localVarResp = orgGetUserPermissionsWithHttpInfo(username, org);
        return localVarResp.getData();
    }

    /**
     * Get user permissions in organization
     * 
     * @param username username of user (required)
     * @param org name of the organization (required)
     * @return ApiResponse&lt;OrganizationPermissions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrganizationPermissions </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationPermissions> orgGetUserPermissionsWithHttpInfo(String username, String org) throws ApiException {
        okhttp3.Call localVarCall = orgGetUserPermissionsValidateBeforeCall(username, org, null);
        Type localVarReturnType = new TypeToken<OrganizationPermissions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user permissions in organization (asynchronously)
     * 
     * @param username username of user (required)
     * @param org name of the organization (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrganizationPermissions </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgGetUserPermissionsAsync(String username, String org, final ApiCallback<OrganizationPermissions> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgGetUserPermissionsValidateBeforeCall(username, org, _callback);
        Type localVarReturnType = new TypeToken<OrganizationPermissions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgIsMember
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user is a member </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> redirection to /orgs/{org}/public_members/{username} </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user is not a member </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgIsMemberCall(String org, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/members/{username}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgIsMemberValidateBeforeCall(String org, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgIsMember(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling orgIsMember(Async)");
        }

        return orgIsMemberCall(org, username, _callback);

    }

    /**
     * Check if a user is a member of an organization
     * 
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user is a member </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> redirection to /orgs/{org}/public_members/{username} </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user is not a member </td><td>  -  </td></tr>
     </table>
     */
    public void orgIsMember(String org, String username) throws ApiException {
        orgIsMemberWithHttpInfo(org, username);
    }

    /**
     * Check if a user is a member of an organization
     * 
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user is a member </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> redirection to /orgs/{org}/public_members/{username} </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user is not a member </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgIsMemberWithHttpInfo(String org, String username) throws ApiException {
        okhttp3.Call localVarCall = orgIsMemberValidateBeforeCall(org, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a user is a member of an organization (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user is a member </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> redirection to /orgs/{org}/public_members/{username} </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user is not a member </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgIsMemberAsync(String org, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgIsMemberValidateBeforeCall(org, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgIsPublicMember
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user is a public member </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user is not a public member </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgIsPublicMemberCall(String org, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/public_members/{username}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgIsPublicMemberValidateBeforeCall(String org, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgIsPublicMember(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling orgIsPublicMember(Async)");
        }

        return orgIsPublicMemberCall(org, username, _callback);

    }

    /**
     * Check if a user is a public member of an organization
     * 
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user is a public member </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user is not a public member </td><td>  -  </td></tr>
     </table>
     */
    public void orgIsPublicMember(String org, String username) throws ApiException {
        orgIsPublicMemberWithHttpInfo(org, username);
    }

    /**
     * Check if a user is a public member of an organization
     * 
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user is a public member </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user is not a public member </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgIsPublicMemberWithHttpInfo(String org, String username) throws ApiException {
        okhttp3.Call localVarCall = orgIsPublicMemberValidateBeforeCall(org, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a user is a public member of an organization (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user is a public member </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user is not a public member </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgIsPublicMemberAsync(String org, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgIsPublicMemberValidateBeforeCall(org, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgListActivityFeeds
     * @param org name of the org (required)
     * @param date the date of the activities to be found (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityFeedsList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListActivityFeedsCall(String org, LocalDate date, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/activities/feeds"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgListActivityFeedsValidateBeforeCall(String org, LocalDate date, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgListActivityFeeds(Async)");
        }

        return orgListActivityFeedsCall(org, date, page, limit, _callback);

    }

    /**
     * List an organization&#39;s activity feeds
     * 
     * @param org name of the org (required)
     * @param date the date of the activities to be found (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Activity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityFeedsList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public List<Activity> orgListActivityFeeds(String org, LocalDate date, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Activity>> localVarResp = orgListActivityFeedsWithHttpInfo(org, date, page, limit);
        return localVarResp.getData();
    }

    /**
     * List an organization&#39;s activity feeds
     * 
     * @param org name of the org (required)
     * @param date the date of the activities to be found (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Activity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityFeedsList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Activity>> orgListActivityFeedsWithHttpInfo(String org, LocalDate date, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = orgListActivityFeedsValidateBeforeCall(org, date, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Activity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List an organization&#39;s activity feeds (asynchronously)
     * 
     * @param org name of the org (required)
     * @param date the date of the activities to be found (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityFeedsList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListActivityFeedsAsync(String org, LocalDate date, Integer page, Integer limit, final ApiCallback<List<Activity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgListActivityFeedsValidateBeforeCall(org, date, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Activity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgListCurrentUserOrgs
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrganizationList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListCurrentUserOrgsCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/orgs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgListCurrentUserOrgsValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return orgListCurrentUserOrgsCall(page, limit, _callback);

    }

    /**
     * List the current user&#39;s organizations
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrganizationList </td><td>  -  </td></tr>
     </table>
     */
    public List<Organization> orgListCurrentUserOrgs(Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Organization>> localVarResp = orgListCurrentUserOrgsWithHttpInfo(page, limit);
        return localVarResp.getData();
    }

    /**
     * List the current user&#39;s organizations
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Organization&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrganizationList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Organization>> orgListCurrentUserOrgsWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = orgListCurrentUserOrgsValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the current user&#39;s organizations (asynchronously)
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrganizationList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListCurrentUserOrgsAsync(Integer page, Integer limit, final ApiCallback<List<Organization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgListCurrentUserOrgsValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgListHooks
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HookList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListHooksCall(String org, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/hooks"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgListHooksValidateBeforeCall(String org, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgListHooks(Async)");
        }

        return orgListHooksCall(org, page, limit, _callback);

    }

    /**
     * List an organization&#39;s webhooks
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HookList </td><td>  -  </td></tr>
     </table>
     */
    public List<Hook> orgListHooks(String org, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Hook>> localVarResp = orgListHooksWithHttpInfo(org, page, limit);
        return localVarResp.getData();
    }

    /**
     * List an organization&#39;s webhooks
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Hook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HookList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Hook>> orgListHooksWithHttpInfo(String org, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = orgListHooksValidateBeforeCall(org, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Hook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List an organization&#39;s webhooks (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HookList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListHooksAsync(String org, Integer page, Integer limit, final ApiCallback<List<Hook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgListHooksValidateBeforeCall(org, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Hook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgListLabels
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListLabelsCall(String org, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/labels"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgListLabelsValidateBeforeCall(String org, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgListLabels(Async)");
        }

        return orgListLabelsCall(org, page, limit, _callback);

    }

    /**
     * List an organization&#39;s labels
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
     </table>
     */
    public List<Label> orgListLabels(String org, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Label>> localVarResp = orgListLabelsWithHttpInfo(org, page, limit);
        return localVarResp.getData();
    }

    /**
     * List an organization&#39;s labels
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Label&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Label>> orgListLabelsWithHttpInfo(String org, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = orgListLabelsValidateBeforeCall(org, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List an organization&#39;s labels (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListLabelsAsync(String org, Integer page, Integer limit, final ApiCallback<List<Label>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgListLabelsValidateBeforeCall(org, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgListMembers
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListMembersCall(String org, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/members"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgListMembersValidateBeforeCall(String org, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgListMembers(Async)");
        }

        return orgListMembersCall(org, page, limit, _callback);

    }

    /**
     * List an organization&#39;s members
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public List<User> orgListMembers(String org, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<User>> localVarResp = orgListMembersWithHttpInfo(org, page, limit);
        return localVarResp.getData();
    }

    /**
     * List an organization&#39;s members
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> orgListMembersWithHttpInfo(String org, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = orgListMembersValidateBeforeCall(org, page, limit, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List an organization&#39;s members (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListMembersAsync(String org, Integer page, Integer limit, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgListMembersValidateBeforeCall(org, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgListPublicMembers
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListPublicMembersCall(String org, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/public_members"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgListPublicMembersValidateBeforeCall(String org, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgListPublicMembers(Async)");
        }

        return orgListPublicMembersCall(org, page, limit, _callback);

    }

    /**
     * List an organization&#39;s public members
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public List<User> orgListPublicMembers(String org, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<User>> localVarResp = orgListPublicMembersWithHttpInfo(org, page, limit);
        return localVarResp.getData();
    }

    /**
     * List an organization&#39;s public members
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> orgListPublicMembersWithHttpInfo(String org, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = orgListPublicMembersValidateBeforeCall(org, page, limit, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List an organization&#39;s public members (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListPublicMembersAsync(String org, Integer page, Integer limit, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgListPublicMembersValidateBeforeCall(org, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgListRepos
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListReposCall(String org, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/repos"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgListReposValidateBeforeCall(String org, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgListRepos(Async)");
        }

        return orgListReposCall(org, page, limit, _callback);

    }

    /**
     * List an organization&#39;s repos
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public List<Repository> orgListRepos(String org, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Repository>> localVarResp = orgListReposWithHttpInfo(org, page, limit);
        return localVarResp.getData();
    }

    /**
     * List an organization&#39;s repos
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Repository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Repository>> orgListReposWithHttpInfo(String org, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = orgListReposValidateBeforeCall(org, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List an organization&#39;s repos (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListReposAsync(String org, Integer page, Integer limit, final ApiCallback<List<Repository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgListReposValidateBeforeCall(org, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgListTeamActivityFeeds
     * @param id id of the team (required)
     * @param date the date of the activities to be found (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityFeedsList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListTeamActivityFeedsCall(Long id, LocalDate date, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{id}/activities/feeds"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgListTeamActivityFeedsValidateBeforeCall(Long id, LocalDate date, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgListTeamActivityFeeds(Async)");
        }

        return orgListTeamActivityFeedsCall(id, date, page, limit, _callback);

    }

    /**
     * List a team&#39;s activity feeds
     * 
     * @param id id of the team (required)
     * @param date the date of the activities to be found (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Activity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityFeedsList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public List<Activity> orgListTeamActivityFeeds(Long id, LocalDate date, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Activity>> localVarResp = orgListTeamActivityFeedsWithHttpInfo(id, date, page, limit);
        return localVarResp.getData();
    }

    /**
     * List a team&#39;s activity feeds
     * 
     * @param id id of the team (required)
     * @param date the date of the activities to be found (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Activity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityFeedsList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Activity>> orgListTeamActivityFeedsWithHttpInfo(Long id, LocalDate date, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = orgListTeamActivityFeedsValidateBeforeCall(id, date, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Activity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a team&#39;s activity feeds (asynchronously)
     * 
     * @param id id of the team (required)
     * @param date the date of the activities to be found (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityFeedsList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListTeamActivityFeedsAsync(Long id, LocalDate date, Integer page, Integer limit, final ApiCallback<List<Activity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgListTeamActivityFeedsValidateBeforeCall(id, date, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Activity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgListTeamMember
     * @param id id of the team (required)
     * @param username username of the member to list (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListTeamMemberCall(Long id, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{id}/members/{username}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgListTeamMemberValidateBeforeCall(Long id, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgListTeamMember(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling orgListTeamMember(Async)");
        }

        return orgListTeamMemberCall(id, username, _callback);

    }

    /**
     * List a particular member of team
     * 
     * @param id id of the team (required)
     * @param username username of the member to list (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public User orgListTeamMember(Long id, String username) throws ApiException {
        ApiResponse<User> localVarResp = orgListTeamMemberWithHttpInfo(id, username);
        return localVarResp.getData();
    }

    /**
     * List a particular member of team
     * 
     * @param id id of the team (required)
     * @param username username of the member to list (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> orgListTeamMemberWithHttpInfo(Long id, String username) throws ApiException {
        okhttp3.Call localVarCall = orgListTeamMemberValidateBeforeCall(id, username, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a particular member of team (asynchronously)
     * 
     * @param id id of the team (required)
     * @param username username of the member to list (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListTeamMemberAsync(Long id, String username, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgListTeamMemberValidateBeforeCall(id, username, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgListTeamMembers
     * @param id id of the team (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListTeamMembersCall(Long id, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{id}/members"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgListTeamMembersValidateBeforeCall(Long id, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgListTeamMembers(Async)");
        }

        return orgListTeamMembersCall(id, page, limit, _callback);

    }

    /**
     * List a team&#39;s members
     * 
     * @param id id of the team (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public List<User> orgListTeamMembers(Long id, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<User>> localVarResp = orgListTeamMembersWithHttpInfo(id, page, limit);
        return localVarResp.getData();
    }

    /**
     * List a team&#39;s members
     * 
     * @param id id of the team (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> orgListTeamMembersWithHttpInfo(Long id, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = orgListTeamMembersValidateBeforeCall(id, page, limit, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a team&#39;s members (asynchronously)
     * 
     * @param id id of the team (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListTeamMembersAsync(Long id, Integer page, Integer limit, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgListTeamMembersValidateBeforeCall(id, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgListTeamRepo
     * @param id id of the team (required)
     * @param org organization that owns the repo to list (required)
     * @param repo name of the repo to list (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListTeamRepoCall(Long id, String org, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{id}/repos/{org}/{repo}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgListTeamRepoValidateBeforeCall(Long id, String org, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgListTeamRepo(Async)");
        }

        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgListTeamRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling orgListTeamRepo(Async)");
        }

        return orgListTeamRepoCall(id, org, repo, _callback);

    }

    /**
     * List a particular repo of team
     * 
     * @param id id of the team (required)
     * @param org organization that owns the repo to list (required)
     * @param repo name of the repo to list (required)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public Repository orgListTeamRepo(Long id, String org, String repo) throws ApiException {
        ApiResponse<Repository> localVarResp = orgListTeamRepoWithHttpInfo(id, org, repo);
        return localVarResp.getData();
    }

    /**
     * List a particular repo of team
     * 
     * @param id id of the team (required)
     * @param org organization that owns the repo to list (required)
     * @param repo name of the repo to list (required)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Repository> orgListTeamRepoWithHttpInfo(Long id, String org, String repo) throws ApiException {
        okhttp3.Call localVarCall = orgListTeamRepoValidateBeforeCall(id, org, repo, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a particular repo of team (asynchronously)
     * 
     * @param id id of the team (required)
     * @param org organization that owns the repo to list (required)
     * @param repo name of the repo to list (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListTeamRepoAsync(Long id, String org, String repo, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgListTeamRepoValidateBeforeCall(id, org, repo, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgListTeamRepos
     * @param id id of the team (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListTeamReposCall(Long id, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{id}/repos"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgListTeamReposValidateBeforeCall(Long id, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgListTeamRepos(Async)");
        }

        return orgListTeamReposCall(id, page, limit, _callback);

    }

    /**
     * List a team&#39;s repos
     * 
     * @param id id of the team (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public List<Repository> orgListTeamRepos(Long id, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Repository>> localVarResp = orgListTeamReposWithHttpInfo(id, page, limit);
        return localVarResp.getData();
    }

    /**
     * List a team&#39;s repos
     * 
     * @param id id of the team (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Repository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Repository>> orgListTeamReposWithHttpInfo(Long id, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = orgListTeamReposValidateBeforeCall(id, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a team&#39;s repos (asynchronously)
     * 
     * @param id id of the team (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListTeamReposAsync(Long id, Integer page, Integer limit, final ApiCallback<List<Repository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgListTeamReposValidateBeforeCall(id, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgListTeams
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TeamList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListTeamsCall(String org, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgListTeamsValidateBeforeCall(String org, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgListTeams(Async)");
        }

        return orgListTeamsCall(org, page, limit, _callback);

    }

    /**
     * List an organization&#39;s teams
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TeamList </td><td>  -  </td></tr>
     </table>
     */
    public List<Team> orgListTeams(String org, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Team>> localVarResp = orgListTeamsWithHttpInfo(org, page, limit);
        return localVarResp.getData();
    }

    /**
     * List an organization&#39;s teams
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Team&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TeamList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Team>> orgListTeamsWithHttpInfo(String org, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = orgListTeamsValidateBeforeCall(org, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List an organization&#39;s teams (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TeamList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListTeamsAsync(String org, Integer page, Integer limit, final ApiCallback<List<Team>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgListTeamsValidateBeforeCall(org, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgListUserOrgs
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrganizationList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListUserOrgsCall(String username, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/orgs"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgListUserOrgsValidateBeforeCall(String username, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling orgListUserOrgs(Async)");
        }

        return orgListUserOrgsCall(username, page, limit, _callback);

    }

    /**
     * List a user&#39;s organizations
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrganizationList </td><td>  -  </td></tr>
     </table>
     */
    public List<Organization> orgListUserOrgs(String username, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Organization>> localVarResp = orgListUserOrgsWithHttpInfo(username, page, limit);
        return localVarResp.getData();
    }

    /**
     * List a user&#39;s organizations
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Organization&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrganizationList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Organization>> orgListUserOrgsWithHttpInfo(String username, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = orgListUserOrgsValidateBeforeCall(username, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a user&#39;s organizations (asynchronously)
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrganizationList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgListUserOrgsAsync(String username, Integer page, Integer limit, final ApiCallback<List<Organization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgListUserOrgsValidateBeforeCall(username, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgPublicizeMember
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> membership publicized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call orgPublicizeMemberCall(String org, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/public_members/{username}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgPublicizeMemberValidateBeforeCall(String org, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgPublicizeMember(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling orgPublicizeMember(Async)");
        }

        return orgPublicizeMemberCall(org, username, _callback);

    }

    /**
     * Publicize a user&#39;s membership
     * 
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> membership publicized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void orgPublicizeMember(String org, String username) throws ApiException {
        orgPublicizeMemberWithHttpInfo(org, username);
    }

    /**
     * Publicize a user&#39;s membership
     * 
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> membership publicized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgPublicizeMemberWithHttpInfo(String org, String username) throws ApiException {
        okhttp3.Call localVarCall = orgPublicizeMemberValidateBeforeCall(org, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Publicize a user&#39;s membership (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param username username of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> membership publicized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call orgPublicizeMemberAsync(String org, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgPublicizeMemberValidateBeforeCall(org, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgRemoveTeamMember
     * @param id id of the team (required)
     * @param username username of the user to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgRemoveTeamMemberCall(Long id, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{id}/members/{username}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgRemoveTeamMemberValidateBeforeCall(Long id, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgRemoveTeamMember(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling orgRemoveTeamMember(Async)");
        }

        return orgRemoveTeamMemberCall(id, username, _callback);

    }

    /**
     * Remove a team member
     * 
     * @param id id of the team (required)
     * @param username username of the user to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void orgRemoveTeamMember(Long id, String username) throws ApiException {
        orgRemoveTeamMemberWithHttpInfo(id, username);
    }

    /**
     * Remove a team member
     * 
     * @param id id of the team (required)
     * @param username username of the user to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgRemoveTeamMemberWithHttpInfo(Long id, String username) throws ApiException {
        okhttp3.Call localVarCall = orgRemoveTeamMemberValidateBeforeCall(id, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a team member (asynchronously)
     * 
     * @param id id of the team (required)
     * @param username username of the user to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgRemoveTeamMemberAsync(Long id, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgRemoveTeamMemberValidateBeforeCall(id, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgRemoveTeamRepository
     * @param id id of the team (required)
     * @param org organization that owns the repo to remove (required)
     * @param repo name of the repo to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call orgRemoveTeamRepositoryCall(Long id, String org, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{id}/repos/{org}/{repo}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgRemoveTeamRepositoryValidateBeforeCall(Long id, String org, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orgRemoveTeamRepository(Async)");
        }

        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling orgRemoveTeamRepository(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling orgRemoveTeamRepository(Async)");
        }

        return orgRemoveTeamRepositoryCall(id, org, repo, _callback);

    }

    /**
     * Remove a repository from a team
     * This does not delete the repository, it only removes the repository from the team.
     * @param id id of the team (required)
     * @param org organization that owns the repo to remove (required)
     * @param repo name of the repo to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void orgRemoveTeamRepository(Long id, String org, String repo) throws ApiException {
        orgRemoveTeamRepositoryWithHttpInfo(id, org, repo);
    }

    /**
     * Remove a repository from a team
     * This does not delete the repository, it only removes the repository from the team.
     * @param id id of the team (required)
     * @param org organization that owns the repo to remove (required)
     * @param repo name of the repo to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgRemoveTeamRepositoryWithHttpInfo(Long id, String org, String repo) throws ApiException {
        okhttp3.Call localVarCall = orgRemoveTeamRepositoryValidateBeforeCall(id, org, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a repository from a team (asynchronously)
     * This does not delete the repository, it only removes the repository from the team.
     * @param id id of the team (required)
     * @param org organization that owns the repo to remove (required)
     * @param repo name of the repo to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call orgRemoveTeamRepositoryAsync(Long id, String org, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgRemoveTeamRepositoryValidateBeforeCall(id, org, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamSearch
     * @param org name of the organization (required)
     * @param q keywords to search (optional)
     * @param includeDesc include search within team description (defaults to true) (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SearchResults of a successful search </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamSearchCall(String org, String q, Boolean includeDesc, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/search"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (includeDesc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_desc", includeDesc));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamSearchValidateBeforeCall(String org, String q, Boolean includeDesc, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamSearch(Async)");
        }

        return teamSearchCall(org, q, includeDesc, page, limit, _callback);

    }

    /**
     * Search for teams within an organization
     * 
     * @param org name of the organization (required)
     * @param q keywords to search (optional)
     * @param includeDesc include search within team description (defaults to true) (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return TeamSearch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SearchResults of a successful search </td><td>  -  </td></tr>
     </table>
     */
    public TeamSearch200Response teamSearch(String org, String q, Boolean includeDesc, Integer page, Integer limit) throws ApiException {
        ApiResponse<TeamSearch200Response> localVarResp = teamSearchWithHttpInfo(org, q, includeDesc, page, limit);
        return localVarResp.getData();
    }

    /**
     * Search for teams within an organization
     * 
     * @param org name of the organization (required)
     * @param q keywords to search (optional)
     * @param includeDesc include search within team description (defaults to true) (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;TeamSearch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SearchResults of a successful search </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamSearch200Response> teamSearchWithHttpInfo(String org, String q, Boolean includeDesc, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = teamSearchValidateBeforeCall(org, q, includeDesc, page, limit, null);
        Type localVarReturnType = new TypeToken<TeamSearch200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for teams within an organization (asynchronously)
     * 
     * @param org name of the organization (required)
     * @param q keywords to search (optional)
     * @param includeDesc include search within team description (defaults to true) (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SearchResults of a successful search </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamSearchAsync(String org, String q, Boolean includeDesc, Integer page, Integer limit, final ApiCallback<TeamSearch200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamSearchValidateBeforeCall(org, q, includeDesc, page, limit, _callback);
        Type localVarReturnType = new TypeToken<TeamSearch200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
