/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MigrateRepoOptions options for migrating repository&#39;s this is used to interact with api v1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:48.734827-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MigrateRepoOptions {
  public static final String SERIALIZED_NAME_AUTH_PASSWORD = "auth_password";
  @SerializedName(SERIALIZED_NAME_AUTH_PASSWORD)
  private String authPassword;

  public static final String SERIALIZED_NAME_AUTH_TOKEN = "auth_token";
  @SerializedName(SERIALIZED_NAME_AUTH_TOKEN)
  private String authToken;

  public static final String SERIALIZED_NAME_AUTH_USERNAME = "auth_username";
  @SerializedName(SERIALIZED_NAME_AUTH_USERNAME)
  private String authUsername;

  public static final String SERIALIZED_NAME_CLONE_ADDR = "clone_addr";
  @SerializedName(SERIALIZED_NAME_CLONE_ADDR)
  private String cloneAddr;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ISSUES = "issues";
  @SerializedName(SERIALIZED_NAME_ISSUES)
  private Boolean issues;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Boolean labels;

  public static final String SERIALIZED_NAME_LFS = "lfs";
  @SerializedName(SERIALIZED_NAME_LFS)
  private Boolean lfs;

  public static final String SERIALIZED_NAME_LFS_ENDPOINT = "lfs_endpoint";
  @SerializedName(SERIALIZED_NAME_LFS_ENDPOINT)
  private String lfsEndpoint;

  public static final String SERIALIZED_NAME_MILESTONES = "milestones";
  @SerializedName(SERIALIZED_NAME_MILESTONES)
  private Boolean milestones;

  public static final String SERIALIZED_NAME_MIRROR = "mirror";
  @SerializedName(SERIALIZED_NAME_MIRROR)
  private Boolean mirror;

  public static final String SERIALIZED_NAME_MIRROR_INTERVAL = "mirror_interval";
  @SerializedName(SERIALIZED_NAME_MIRROR_INTERVAL)
  private String mirrorInterval;

  public static final String SERIALIZED_NAME_PRIVATE = "private";
  @SerializedName(SERIALIZED_NAME_PRIVATE)
  private Boolean _private;

  public static final String SERIALIZED_NAME_PULL_REQUESTS = "pull_requests";
  @SerializedName(SERIALIZED_NAME_PULL_REQUESTS)
  private Boolean pullRequests;

  public static final String SERIALIZED_NAME_RELEASES = "releases";
  @SerializedName(SERIALIZED_NAME_RELEASES)
  private Boolean releases;

  public static final String SERIALIZED_NAME_REPO_NAME = "repo_name";
  @SerializedName(SERIALIZED_NAME_REPO_NAME)
  private String repoName;

  public static final String SERIALIZED_NAME_REPO_OWNER = "repo_owner";
  @SerializedName(SERIALIZED_NAME_REPO_OWNER)
  private String repoOwner;

  /**
   * Gets or Sets service
   */
  @JsonAdapter(ServiceEnum.Adapter.class)
  public enum ServiceEnum {
    GIT("git"),
    
    GITHUB("github"),
    
    GITEA("gitea"),
    
    GITLAB("gitlab");

    private String value;

    ServiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceEnum fromValue(String value) {
      for (ServiceEnum b : ServiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServiceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private ServiceEnum service;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private Long uid;

  public static final String SERIALIZED_NAME_WIKI = "wiki";
  @SerializedName(SERIALIZED_NAME_WIKI)
  private Boolean wiki;

  public MigrateRepoOptions() {
  }

  public MigrateRepoOptions authPassword(String authPassword) {
    this.authPassword = authPassword;
    return this;
  }

  /**
   * Get authPassword
   * @return authPassword
   */
  @javax.annotation.Nullable
  public String getAuthPassword() {
    return authPassword;
  }

  public void setAuthPassword(String authPassword) {
    this.authPassword = authPassword;
  }


  public MigrateRepoOptions authToken(String authToken) {
    this.authToken = authToken;
    return this;
  }

  /**
   * Get authToken
   * @return authToken
   */
  @javax.annotation.Nullable
  public String getAuthToken() {
    return authToken;
  }

  public void setAuthToken(String authToken) {
    this.authToken = authToken;
  }


  public MigrateRepoOptions authUsername(String authUsername) {
    this.authUsername = authUsername;
    return this;
  }

  /**
   * Get authUsername
   * @return authUsername
   */
  @javax.annotation.Nullable
  public String getAuthUsername() {
    return authUsername;
  }

  public void setAuthUsername(String authUsername) {
    this.authUsername = authUsername;
  }


  public MigrateRepoOptions cloneAddr(String cloneAddr) {
    this.cloneAddr = cloneAddr;
    return this;
  }

  /**
   * Get cloneAddr
   * @return cloneAddr
   */
  @javax.annotation.Nonnull
  public String getCloneAddr() {
    return cloneAddr;
  }

  public void setCloneAddr(String cloneAddr) {
    this.cloneAddr = cloneAddr;
  }


  public MigrateRepoOptions description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public MigrateRepoOptions issues(Boolean issues) {
    this.issues = issues;
    return this;
  }

  /**
   * Get issues
   * @return issues
   */
  @javax.annotation.Nullable
  public Boolean getIssues() {
    return issues;
  }

  public void setIssues(Boolean issues) {
    this.issues = issues;
  }


  public MigrateRepoOptions labels(Boolean labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public Boolean getLabels() {
    return labels;
  }

  public void setLabels(Boolean labels) {
    this.labels = labels;
  }


  public MigrateRepoOptions lfs(Boolean lfs) {
    this.lfs = lfs;
    return this;
  }

  /**
   * Get lfs
   * @return lfs
   */
  @javax.annotation.Nullable
  public Boolean getLfs() {
    return lfs;
  }

  public void setLfs(Boolean lfs) {
    this.lfs = lfs;
  }


  public MigrateRepoOptions lfsEndpoint(String lfsEndpoint) {
    this.lfsEndpoint = lfsEndpoint;
    return this;
  }

  /**
   * Get lfsEndpoint
   * @return lfsEndpoint
   */
  @javax.annotation.Nullable
  public String getLfsEndpoint() {
    return lfsEndpoint;
  }

  public void setLfsEndpoint(String lfsEndpoint) {
    this.lfsEndpoint = lfsEndpoint;
  }


  public MigrateRepoOptions milestones(Boolean milestones) {
    this.milestones = milestones;
    return this;
  }

  /**
   * Get milestones
   * @return milestones
   */
  @javax.annotation.Nullable
  public Boolean getMilestones() {
    return milestones;
  }

  public void setMilestones(Boolean milestones) {
    this.milestones = milestones;
  }


  public MigrateRepoOptions mirror(Boolean mirror) {
    this.mirror = mirror;
    return this;
  }

  /**
   * Get mirror
   * @return mirror
   */
  @javax.annotation.Nullable
  public Boolean getMirror() {
    return mirror;
  }

  public void setMirror(Boolean mirror) {
    this.mirror = mirror;
  }


  public MigrateRepoOptions mirrorInterval(String mirrorInterval) {
    this.mirrorInterval = mirrorInterval;
    return this;
  }

  /**
   * Get mirrorInterval
   * @return mirrorInterval
   */
  @javax.annotation.Nullable
  public String getMirrorInterval() {
    return mirrorInterval;
  }

  public void setMirrorInterval(String mirrorInterval) {
    this.mirrorInterval = mirrorInterval;
  }


  public MigrateRepoOptions _private(Boolean _private) {
    this._private = _private;
    return this;
  }

  /**
   * Get _private
   * @return _private
   */
  @javax.annotation.Nullable
  public Boolean getPrivate() {
    return _private;
  }

  public void setPrivate(Boolean _private) {
    this._private = _private;
  }


  public MigrateRepoOptions pullRequests(Boolean pullRequests) {
    this.pullRequests = pullRequests;
    return this;
  }

  /**
   * Get pullRequests
   * @return pullRequests
   */
  @javax.annotation.Nullable
  public Boolean getPullRequests() {
    return pullRequests;
  }

  public void setPullRequests(Boolean pullRequests) {
    this.pullRequests = pullRequests;
  }


  public MigrateRepoOptions releases(Boolean releases) {
    this.releases = releases;
    return this;
  }

  /**
   * Get releases
   * @return releases
   */
  @javax.annotation.Nullable
  public Boolean getReleases() {
    return releases;
  }

  public void setReleases(Boolean releases) {
    this.releases = releases;
  }


  public MigrateRepoOptions repoName(String repoName) {
    this.repoName = repoName;
    return this;
  }

  /**
   * Get repoName
   * @return repoName
   */
  @javax.annotation.Nonnull
  public String getRepoName() {
    return repoName;
  }

  public void setRepoName(String repoName) {
    this.repoName = repoName;
  }


  public MigrateRepoOptions repoOwner(String repoOwner) {
    this.repoOwner = repoOwner;
    return this;
  }

  /**
   * Name of User or Organisation who will own Repo after migration
   * @return repoOwner
   */
  @javax.annotation.Nullable
  public String getRepoOwner() {
    return repoOwner;
  }

  public void setRepoOwner(String repoOwner) {
    this.repoOwner = repoOwner;
  }


  public MigrateRepoOptions service(ServiceEnum service) {
    this.service = service;
    return this;
  }

  /**
   * Get service
   * @return service
   */
  @javax.annotation.Nullable
  public ServiceEnum getService() {
    return service;
  }

  public void setService(ServiceEnum service) {
    this.service = service;
  }


  public MigrateRepoOptions uid(Long uid) {
    this.uid = uid;
    return this;
  }

  /**
   * deprecated (only for backwards compatibility)
   * @return uid
   */
  @javax.annotation.Nullable
  public Long getUid() {
    return uid;
  }

  public void setUid(Long uid) {
    this.uid = uid;
  }


  public MigrateRepoOptions wiki(Boolean wiki) {
    this.wiki = wiki;
    return this;
  }

  /**
   * Get wiki
   * @return wiki
   */
  @javax.annotation.Nullable
  public Boolean getWiki() {
    return wiki;
  }

  public void setWiki(Boolean wiki) {
    this.wiki = wiki;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MigrateRepoOptions migrateRepoOptions = (MigrateRepoOptions) o;
    return Objects.equals(this.authPassword, migrateRepoOptions.authPassword) &&
        Objects.equals(this.authToken, migrateRepoOptions.authToken) &&
        Objects.equals(this.authUsername, migrateRepoOptions.authUsername) &&
        Objects.equals(this.cloneAddr, migrateRepoOptions.cloneAddr) &&
        Objects.equals(this.description, migrateRepoOptions.description) &&
        Objects.equals(this.issues, migrateRepoOptions.issues) &&
        Objects.equals(this.labels, migrateRepoOptions.labels) &&
        Objects.equals(this.lfs, migrateRepoOptions.lfs) &&
        Objects.equals(this.lfsEndpoint, migrateRepoOptions.lfsEndpoint) &&
        Objects.equals(this.milestones, migrateRepoOptions.milestones) &&
        Objects.equals(this.mirror, migrateRepoOptions.mirror) &&
        Objects.equals(this.mirrorInterval, migrateRepoOptions.mirrorInterval) &&
        Objects.equals(this._private, migrateRepoOptions._private) &&
        Objects.equals(this.pullRequests, migrateRepoOptions.pullRequests) &&
        Objects.equals(this.releases, migrateRepoOptions.releases) &&
        Objects.equals(this.repoName, migrateRepoOptions.repoName) &&
        Objects.equals(this.repoOwner, migrateRepoOptions.repoOwner) &&
        Objects.equals(this.service, migrateRepoOptions.service) &&
        Objects.equals(this.uid, migrateRepoOptions.uid) &&
        Objects.equals(this.wiki, migrateRepoOptions.wiki);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authPassword, authToken, authUsername, cloneAddr, description, issues, labels, lfs, lfsEndpoint, milestones, mirror, mirrorInterval, _private, pullRequests, releases, repoName, repoOwner, service, uid, wiki);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MigrateRepoOptions {\n");
    sb.append("    authPassword: ").append(toIndentedString(authPassword)).append("\n");
    sb.append("    authToken: ").append(toIndentedString(authToken)).append("\n");
    sb.append("    authUsername: ").append(toIndentedString(authUsername)).append("\n");
    sb.append("    cloneAddr: ").append(toIndentedString(cloneAddr)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lfs: ").append(toIndentedString(lfs)).append("\n");
    sb.append("    lfsEndpoint: ").append(toIndentedString(lfsEndpoint)).append("\n");
    sb.append("    milestones: ").append(toIndentedString(milestones)).append("\n");
    sb.append("    mirror: ").append(toIndentedString(mirror)).append("\n");
    sb.append("    mirrorInterval: ").append(toIndentedString(mirrorInterval)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    pullRequests: ").append(toIndentedString(pullRequests)).append("\n");
    sb.append("    releases: ").append(toIndentedString(releases)).append("\n");
    sb.append("    repoName: ").append(toIndentedString(repoName)).append("\n");
    sb.append("    repoOwner: ").append(toIndentedString(repoOwner)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    wiki: ").append(toIndentedString(wiki)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auth_password");
    openapiFields.add("auth_token");
    openapiFields.add("auth_username");
    openapiFields.add("clone_addr");
    openapiFields.add("description");
    openapiFields.add("issues");
    openapiFields.add("labels");
    openapiFields.add("lfs");
    openapiFields.add("lfs_endpoint");
    openapiFields.add("milestones");
    openapiFields.add("mirror");
    openapiFields.add("mirror_interval");
    openapiFields.add("private");
    openapiFields.add("pull_requests");
    openapiFields.add("releases");
    openapiFields.add("repo_name");
    openapiFields.add("repo_owner");
    openapiFields.add("service");
    openapiFields.add("uid");
    openapiFields.add("wiki");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clone_addr");
    openapiRequiredFields.add("repo_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MigrateRepoOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MigrateRepoOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MigrateRepoOptions is not found in the empty JSON string", MigrateRepoOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MigrateRepoOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MigrateRepoOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MigrateRepoOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("auth_password") != null && !jsonObj.get("auth_password").isJsonNull()) && !jsonObj.get("auth_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_password").toString()));
      }
      if ((jsonObj.get("auth_token") != null && !jsonObj.get("auth_token").isJsonNull()) && !jsonObj.get("auth_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_token").toString()));
      }
      if ((jsonObj.get("auth_username") != null && !jsonObj.get("auth_username").isJsonNull()) && !jsonObj.get("auth_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_username").toString()));
      }
      if (!jsonObj.get("clone_addr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clone_addr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clone_addr").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("lfs_endpoint") != null && !jsonObj.get("lfs_endpoint").isJsonNull()) && !jsonObj.get("lfs_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lfs_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lfs_endpoint").toString()));
      }
      if ((jsonObj.get("mirror_interval") != null && !jsonObj.get("mirror_interval").isJsonNull()) && !jsonObj.get("mirror_interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mirror_interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mirror_interval").toString()));
      }
      if (!jsonObj.get("repo_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repo_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo_name").toString()));
      }
      if ((jsonObj.get("repo_owner") != null && !jsonObj.get("repo_owner").isJsonNull()) && !jsonObj.get("repo_owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repo_owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo_owner").toString()));
      }
      if ((jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) && !jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
      // validate the optional field `service`
      if (jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) {
        ServiceEnum.validateJsonElement(jsonObj.get("service"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MigrateRepoOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MigrateRepoOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MigrateRepoOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MigrateRepoOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<MigrateRepoOptions>() {
           @Override
           public void write(JsonWriter out, MigrateRepoOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MigrateRepoOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MigrateRepoOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MigrateRepoOptions
   * @throws IOException if the JSON string is invalid with respect to MigrateRepoOptions
   */
  public static MigrateRepoOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MigrateRepoOptions.class);
  }

  /**
   * Convert an instance of MigrateRepoOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

