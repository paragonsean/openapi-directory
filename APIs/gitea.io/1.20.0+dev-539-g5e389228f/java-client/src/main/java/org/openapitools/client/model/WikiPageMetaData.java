/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.WikiCommit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WikiPageMetaData wiki page meta information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:48.734827-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WikiPageMetaData {
  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private String htmlUrl;

  public static final String SERIALIZED_NAME_LAST_COMMIT = "last_commit";
  @SerializedName(SERIALIZED_NAME_LAST_COMMIT)
  private WikiCommit lastCommit;

  public static final String SERIALIZED_NAME_SUB_URL = "sub_url";
  @SerializedName(SERIALIZED_NAME_SUB_URL)
  private String subUrl;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public WikiPageMetaData() {
  }

  public WikiPageMetaData htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nullable
  public String getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public WikiPageMetaData lastCommit(WikiCommit lastCommit) {
    this.lastCommit = lastCommit;
    return this;
  }

  /**
   * Get lastCommit
   * @return lastCommit
   */
  @javax.annotation.Nullable
  public WikiCommit getLastCommit() {
    return lastCommit;
  }

  public void setLastCommit(WikiCommit lastCommit) {
    this.lastCommit = lastCommit;
  }


  public WikiPageMetaData subUrl(String subUrl) {
    this.subUrl = subUrl;
    return this;
  }

  /**
   * Get subUrl
   * @return subUrl
   */
  @javax.annotation.Nullable
  public String getSubUrl() {
    return subUrl;
  }

  public void setSubUrl(String subUrl) {
    this.subUrl = subUrl;
  }


  public WikiPageMetaData title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WikiPageMetaData wikiPageMetaData = (WikiPageMetaData) o;
    return Objects.equals(this.htmlUrl, wikiPageMetaData.htmlUrl) &&
        Objects.equals(this.lastCommit, wikiPageMetaData.lastCommit) &&
        Objects.equals(this.subUrl, wikiPageMetaData.subUrl) &&
        Objects.equals(this.title, wikiPageMetaData.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(htmlUrl, lastCommit, subUrl, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WikiPageMetaData {\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    lastCommit: ").append(toIndentedString(lastCommit)).append("\n");
    sb.append("    subUrl: ").append(toIndentedString(subUrl)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("html_url");
    openapiFields.add("last_commit");
    openapiFields.add("sub_url");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WikiPageMetaData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WikiPageMetaData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WikiPageMetaData is not found in the empty JSON string", WikiPageMetaData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WikiPageMetaData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WikiPageMetaData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("html_url") != null && !jsonObj.get("html_url").isJsonNull()) && !jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      // validate the optional field `last_commit`
      if (jsonObj.get("last_commit") != null && !jsonObj.get("last_commit").isJsonNull()) {
        WikiCommit.validateJsonElement(jsonObj.get("last_commit"));
      }
      if ((jsonObj.get("sub_url") != null && !jsonObj.get("sub_url").isJsonNull()) && !jsonObj.get("sub_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub_url").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WikiPageMetaData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WikiPageMetaData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WikiPageMetaData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WikiPageMetaData.class));

       return (TypeAdapter<T>) new TypeAdapter<WikiPageMetaData>() {
           @Override
           public void write(JsonWriter out, WikiPageMetaData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WikiPageMetaData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WikiPageMetaData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WikiPageMetaData
   * @throws IOException if the JSON string is invalid with respect to WikiPageMetaData
   */
  public static WikiPageMetaData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WikiPageMetaData.class);
  }

  /**
   * Convert an instance of WikiPageMetaData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

