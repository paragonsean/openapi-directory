/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MergePullRequestForm form for merging Pull Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:48.734827-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MergePullRequestOption {
  /**
   * Gets or Sets _do
   */
  @JsonAdapter(DoEnum.Adapter.class)
  public enum DoEnum {
    MERGE("merge"),
    
    REBASE("rebase"),
    
    REBASE_MERGE("rebase-merge"),
    
    SQUASH("squash"),
    
    MANUALLY_MERGED("manually-merged");

    private String value;

    DoEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DoEnum fromValue(String value) {
      for (DoEnum b : DoEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DoEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DoEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DoEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DoEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DO = "Do";
  @SerializedName(SERIALIZED_NAME_DO)
  private DoEnum _do;

  public static final String SERIALIZED_NAME_MERGE_COMMIT_I_D = "MergeCommitID";
  @SerializedName(SERIALIZED_NAME_MERGE_COMMIT_I_D)
  private String mergeCommitID;

  public static final String SERIALIZED_NAME_MERGE_MESSAGE_FIELD = "MergeMessageField";
  @SerializedName(SERIALIZED_NAME_MERGE_MESSAGE_FIELD)
  private String mergeMessageField;

  public static final String SERIALIZED_NAME_MERGE_TITLE_FIELD = "MergeTitleField";
  @SerializedName(SERIALIZED_NAME_MERGE_TITLE_FIELD)
  private String mergeTitleField;

  public static final String SERIALIZED_NAME_DELETE_BRANCH_AFTER_MERGE = "delete_branch_after_merge";
  @SerializedName(SERIALIZED_NAME_DELETE_BRANCH_AFTER_MERGE)
  private Boolean deleteBranchAfterMerge;

  public static final String SERIALIZED_NAME_FORCE_MERGE = "force_merge";
  @SerializedName(SERIALIZED_NAME_FORCE_MERGE)
  private Boolean forceMerge;

  public static final String SERIALIZED_NAME_HEAD_COMMIT_ID = "head_commit_id";
  @SerializedName(SERIALIZED_NAME_HEAD_COMMIT_ID)
  private String headCommitId;

  public static final String SERIALIZED_NAME_MERGE_WHEN_CHECKS_SUCCEED = "merge_when_checks_succeed";
  @SerializedName(SERIALIZED_NAME_MERGE_WHEN_CHECKS_SUCCEED)
  private Boolean mergeWhenChecksSucceed;

  public MergePullRequestOption() {
  }

  public MergePullRequestOption _do(DoEnum _do) {
    this._do = _do;
    return this;
  }

  /**
   * Get _do
   * @return _do
   */
  @javax.annotation.Nonnull
  public DoEnum getDo() {
    return _do;
  }

  public void setDo(DoEnum _do) {
    this._do = _do;
  }


  public MergePullRequestOption mergeCommitID(String mergeCommitID) {
    this.mergeCommitID = mergeCommitID;
    return this;
  }

  /**
   * Get mergeCommitID
   * @return mergeCommitID
   */
  @javax.annotation.Nullable
  public String getMergeCommitID() {
    return mergeCommitID;
  }

  public void setMergeCommitID(String mergeCommitID) {
    this.mergeCommitID = mergeCommitID;
  }


  public MergePullRequestOption mergeMessageField(String mergeMessageField) {
    this.mergeMessageField = mergeMessageField;
    return this;
  }

  /**
   * Get mergeMessageField
   * @return mergeMessageField
   */
  @javax.annotation.Nullable
  public String getMergeMessageField() {
    return mergeMessageField;
  }

  public void setMergeMessageField(String mergeMessageField) {
    this.mergeMessageField = mergeMessageField;
  }


  public MergePullRequestOption mergeTitleField(String mergeTitleField) {
    this.mergeTitleField = mergeTitleField;
    return this;
  }

  /**
   * Get mergeTitleField
   * @return mergeTitleField
   */
  @javax.annotation.Nullable
  public String getMergeTitleField() {
    return mergeTitleField;
  }

  public void setMergeTitleField(String mergeTitleField) {
    this.mergeTitleField = mergeTitleField;
  }


  public MergePullRequestOption deleteBranchAfterMerge(Boolean deleteBranchAfterMerge) {
    this.deleteBranchAfterMerge = deleteBranchAfterMerge;
    return this;
  }

  /**
   * Get deleteBranchAfterMerge
   * @return deleteBranchAfterMerge
   */
  @javax.annotation.Nullable
  public Boolean getDeleteBranchAfterMerge() {
    return deleteBranchAfterMerge;
  }

  public void setDeleteBranchAfterMerge(Boolean deleteBranchAfterMerge) {
    this.deleteBranchAfterMerge = deleteBranchAfterMerge;
  }


  public MergePullRequestOption forceMerge(Boolean forceMerge) {
    this.forceMerge = forceMerge;
    return this;
  }

  /**
   * Get forceMerge
   * @return forceMerge
   */
  @javax.annotation.Nullable
  public Boolean getForceMerge() {
    return forceMerge;
  }

  public void setForceMerge(Boolean forceMerge) {
    this.forceMerge = forceMerge;
  }


  public MergePullRequestOption headCommitId(String headCommitId) {
    this.headCommitId = headCommitId;
    return this;
  }

  /**
   * Get headCommitId
   * @return headCommitId
   */
  @javax.annotation.Nullable
  public String getHeadCommitId() {
    return headCommitId;
  }

  public void setHeadCommitId(String headCommitId) {
    this.headCommitId = headCommitId;
  }


  public MergePullRequestOption mergeWhenChecksSucceed(Boolean mergeWhenChecksSucceed) {
    this.mergeWhenChecksSucceed = mergeWhenChecksSucceed;
    return this;
  }

  /**
   * Get mergeWhenChecksSucceed
   * @return mergeWhenChecksSucceed
   */
  @javax.annotation.Nullable
  public Boolean getMergeWhenChecksSucceed() {
    return mergeWhenChecksSucceed;
  }

  public void setMergeWhenChecksSucceed(Boolean mergeWhenChecksSucceed) {
    this.mergeWhenChecksSucceed = mergeWhenChecksSucceed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MergePullRequestOption mergePullRequestOption = (MergePullRequestOption) o;
    return Objects.equals(this._do, mergePullRequestOption._do) &&
        Objects.equals(this.mergeCommitID, mergePullRequestOption.mergeCommitID) &&
        Objects.equals(this.mergeMessageField, mergePullRequestOption.mergeMessageField) &&
        Objects.equals(this.mergeTitleField, mergePullRequestOption.mergeTitleField) &&
        Objects.equals(this.deleteBranchAfterMerge, mergePullRequestOption.deleteBranchAfterMerge) &&
        Objects.equals(this.forceMerge, mergePullRequestOption.forceMerge) &&
        Objects.equals(this.headCommitId, mergePullRequestOption.headCommitId) &&
        Objects.equals(this.mergeWhenChecksSucceed, mergePullRequestOption.mergeWhenChecksSucceed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_do, mergeCommitID, mergeMessageField, mergeTitleField, deleteBranchAfterMerge, forceMerge, headCommitId, mergeWhenChecksSucceed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MergePullRequestOption {\n");
    sb.append("    _do: ").append(toIndentedString(_do)).append("\n");
    sb.append("    mergeCommitID: ").append(toIndentedString(mergeCommitID)).append("\n");
    sb.append("    mergeMessageField: ").append(toIndentedString(mergeMessageField)).append("\n");
    sb.append("    mergeTitleField: ").append(toIndentedString(mergeTitleField)).append("\n");
    sb.append("    deleteBranchAfterMerge: ").append(toIndentedString(deleteBranchAfterMerge)).append("\n");
    sb.append("    forceMerge: ").append(toIndentedString(forceMerge)).append("\n");
    sb.append("    headCommitId: ").append(toIndentedString(headCommitId)).append("\n");
    sb.append("    mergeWhenChecksSucceed: ").append(toIndentedString(mergeWhenChecksSucceed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Do");
    openapiFields.add("MergeCommitID");
    openapiFields.add("MergeMessageField");
    openapiFields.add("MergeTitleField");
    openapiFields.add("delete_branch_after_merge");
    openapiFields.add("force_merge");
    openapiFields.add("head_commit_id");
    openapiFields.add("merge_when_checks_succeed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Do");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MergePullRequestOption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MergePullRequestOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MergePullRequestOption is not found in the empty JSON string", MergePullRequestOption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MergePullRequestOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MergePullRequestOption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MergePullRequestOption.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Do").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Do` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Do").toString()));
      }
      // validate the required field `Do`
      DoEnum.validateJsonElement(jsonObj.get("Do"));
      if ((jsonObj.get("MergeCommitID") != null && !jsonObj.get("MergeCommitID").isJsonNull()) && !jsonObj.get("MergeCommitID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MergeCommitID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MergeCommitID").toString()));
      }
      if ((jsonObj.get("MergeMessageField") != null && !jsonObj.get("MergeMessageField").isJsonNull()) && !jsonObj.get("MergeMessageField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MergeMessageField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MergeMessageField").toString()));
      }
      if ((jsonObj.get("MergeTitleField") != null && !jsonObj.get("MergeTitleField").isJsonNull()) && !jsonObj.get("MergeTitleField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MergeTitleField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MergeTitleField").toString()));
      }
      if ((jsonObj.get("head_commit_id") != null && !jsonObj.get("head_commit_id").isJsonNull()) && !jsonObj.get("head_commit_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `head_commit_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("head_commit_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MergePullRequestOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MergePullRequestOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MergePullRequestOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MergePullRequestOption.class));

       return (TypeAdapter<T>) new TypeAdapter<MergePullRequestOption>() {
           @Override
           public void write(JsonWriter out, MergePullRequestOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MergePullRequestOption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MergePullRequestOption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MergePullRequestOption
   * @throws IOException if the JSON string is invalid with respect to MergePullRequestOption
   */
  public static MergePullRequestOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MergePullRequestOption.class);
  }

  /**
   * Convert an instance of MergePullRequestOption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

