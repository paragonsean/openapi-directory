/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.WikiCommit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WikiPage a wiki page
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:48.734827-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WikiPage {
  public static final String SERIALIZED_NAME_COMMIT_COUNT = "commit_count";
  @SerializedName(SERIALIZED_NAME_COMMIT_COUNT)
  private Long commitCount;

  public static final String SERIALIZED_NAME_CONTENT_BASE64 = "content_base64";
  @SerializedName(SERIALIZED_NAME_CONTENT_BASE64)
  private String contentBase64;

  public static final String SERIALIZED_NAME_FOOTER = "footer";
  @SerializedName(SERIALIZED_NAME_FOOTER)
  private String footer;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private String htmlUrl;

  public static final String SERIALIZED_NAME_LAST_COMMIT = "last_commit";
  @SerializedName(SERIALIZED_NAME_LAST_COMMIT)
  private WikiCommit lastCommit;

  public static final String SERIALIZED_NAME_SIDEBAR = "sidebar";
  @SerializedName(SERIALIZED_NAME_SIDEBAR)
  private String sidebar;

  public static final String SERIALIZED_NAME_SUB_URL = "sub_url";
  @SerializedName(SERIALIZED_NAME_SUB_URL)
  private String subUrl;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public WikiPage() {
  }

  public WikiPage commitCount(Long commitCount) {
    this.commitCount = commitCount;
    return this;
  }

  /**
   * Get commitCount
   * @return commitCount
   */
  @javax.annotation.Nullable
  public Long getCommitCount() {
    return commitCount;
  }

  public void setCommitCount(Long commitCount) {
    this.commitCount = commitCount;
  }


  public WikiPage contentBase64(String contentBase64) {
    this.contentBase64 = contentBase64;
    return this;
  }

  /**
   * Page content, base64 encoded
   * @return contentBase64
   */
  @javax.annotation.Nullable
  public String getContentBase64() {
    return contentBase64;
  }

  public void setContentBase64(String contentBase64) {
    this.contentBase64 = contentBase64;
  }


  public WikiPage footer(String footer) {
    this.footer = footer;
    return this;
  }

  /**
   * Get footer
   * @return footer
   */
  @javax.annotation.Nullable
  public String getFooter() {
    return footer;
  }

  public void setFooter(String footer) {
    this.footer = footer;
  }


  public WikiPage htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nullable
  public String getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public WikiPage lastCommit(WikiCommit lastCommit) {
    this.lastCommit = lastCommit;
    return this;
  }

  /**
   * Get lastCommit
   * @return lastCommit
   */
  @javax.annotation.Nullable
  public WikiCommit getLastCommit() {
    return lastCommit;
  }

  public void setLastCommit(WikiCommit lastCommit) {
    this.lastCommit = lastCommit;
  }


  public WikiPage sidebar(String sidebar) {
    this.sidebar = sidebar;
    return this;
  }

  /**
   * Get sidebar
   * @return sidebar
   */
  @javax.annotation.Nullable
  public String getSidebar() {
    return sidebar;
  }

  public void setSidebar(String sidebar) {
    this.sidebar = sidebar;
  }


  public WikiPage subUrl(String subUrl) {
    this.subUrl = subUrl;
    return this;
  }

  /**
   * Get subUrl
   * @return subUrl
   */
  @javax.annotation.Nullable
  public String getSubUrl() {
    return subUrl;
  }

  public void setSubUrl(String subUrl) {
    this.subUrl = subUrl;
  }


  public WikiPage title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WikiPage wikiPage = (WikiPage) o;
    return Objects.equals(this.commitCount, wikiPage.commitCount) &&
        Objects.equals(this.contentBase64, wikiPage.contentBase64) &&
        Objects.equals(this.footer, wikiPage.footer) &&
        Objects.equals(this.htmlUrl, wikiPage.htmlUrl) &&
        Objects.equals(this.lastCommit, wikiPage.lastCommit) &&
        Objects.equals(this.sidebar, wikiPage.sidebar) &&
        Objects.equals(this.subUrl, wikiPage.subUrl) &&
        Objects.equals(this.title, wikiPage.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitCount, contentBase64, footer, htmlUrl, lastCommit, sidebar, subUrl, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WikiPage {\n");
    sb.append("    commitCount: ").append(toIndentedString(commitCount)).append("\n");
    sb.append("    contentBase64: ").append(toIndentedString(contentBase64)).append("\n");
    sb.append("    footer: ").append(toIndentedString(footer)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    lastCommit: ").append(toIndentedString(lastCommit)).append("\n");
    sb.append("    sidebar: ").append(toIndentedString(sidebar)).append("\n");
    sb.append("    subUrl: ").append(toIndentedString(subUrl)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commit_count");
    openapiFields.add("content_base64");
    openapiFields.add("footer");
    openapiFields.add("html_url");
    openapiFields.add("last_commit");
    openapiFields.add("sidebar");
    openapiFields.add("sub_url");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WikiPage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WikiPage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WikiPage is not found in the empty JSON string", WikiPage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WikiPage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WikiPage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("content_base64") != null && !jsonObj.get("content_base64").isJsonNull()) && !jsonObj.get("content_base64").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_base64` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_base64").toString()));
      }
      if ((jsonObj.get("footer") != null && !jsonObj.get("footer").isJsonNull()) && !jsonObj.get("footer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `footer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("footer").toString()));
      }
      if ((jsonObj.get("html_url") != null && !jsonObj.get("html_url").isJsonNull()) && !jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      // validate the optional field `last_commit`
      if (jsonObj.get("last_commit") != null && !jsonObj.get("last_commit").isJsonNull()) {
        WikiCommit.validateJsonElement(jsonObj.get("last_commit"));
      }
      if ((jsonObj.get("sidebar") != null && !jsonObj.get("sidebar").isJsonNull()) && !jsonObj.get("sidebar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sidebar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sidebar").toString()));
      }
      if ((jsonObj.get("sub_url") != null && !jsonObj.get("sub_url").isJsonNull()) && !jsonObj.get("sub_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub_url").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WikiPage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WikiPage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WikiPage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WikiPage.class));

       return (TypeAdapter<T>) new TypeAdapter<WikiPage>() {
           @Override
           public void write(JsonWriter out, WikiPage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WikiPage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WikiPage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WikiPage
   * @throws IOException if the JSON string is invalid with respect to WikiPage
   */
  public static WikiPage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WikiPage.class);
  }

  /**
   * Convert an instance of WikiPage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

