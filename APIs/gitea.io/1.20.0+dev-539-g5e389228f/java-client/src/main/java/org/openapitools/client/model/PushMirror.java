/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PushMirror represents information of a push mirror
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:48.734827-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PushMirror {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private String interval;

  public static final String SERIALIZED_NAME_LAST_ERROR = "last_error";
  @SerializedName(SERIALIZED_NAME_LAST_ERROR)
  private String lastError;

  public static final String SERIALIZED_NAME_LAST_UPDATE = "last_update";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE)
  private String lastUpdate;

  public static final String SERIALIZED_NAME_REMOTE_ADDRESS = "remote_address";
  @SerializedName(SERIALIZED_NAME_REMOTE_ADDRESS)
  private String remoteAddress;

  public static final String SERIALIZED_NAME_REMOTE_NAME = "remote_name";
  @SerializedName(SERIALIZED_NAME_REMOTE_NAME)
  private String remoteName;

  public static final String SERIALIZED_NAME_REPO_NAME = "repo_name";
  @SerializedName(SERIALIZED_NAME_REPO_NAME)
  private String repoName;

  public static final String SERIALIZED_NAME_SYNC_ON_COMMIT = "sync_on_commit";
  @SerializedName(SERIALIZED_NAME_SYNC_ON_COMMIT)
  private Boolean syncOnCommit;

  public PushMirror() {
  }

  public PushMirror created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public PushMirror interval(String interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Get interval
   * @return interval
   */
  @javax.annotation.Nullable
  public String getInterval() {
    return interval;
  }

  public void setInterval(String interval) {
    this.interval = interval;
  }


  public PushMirror lastError(String lastError) {
    this.lastError = lastError;
    return this;
  }

  /**
   * Get lastError
   * @return lastError
   */
  @javax.annotation.Nullable
  public String getLastError() {
    return lastError;
  }

  public void setLastError(String lastError) {
    this.lastError = lastError;
  }


  public PushMirror lastUpdate(String lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

  /**
   * Get lastUpdate
   * @return lastUpdate
   */
  @javax.annotation.Nullable
  public String getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(String lastUpdate) {
    this.lastUpdate = lastUpdate;
  }


  public PushMirror remoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
    return this;
  }

  /**
   * Get remoteAddress
   * @return remoteAddress
   */
  @javax.annotation.Nullable
  public String getRemoteAddress() {
    return remoteAddress;
  }

  public void setRemoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
  }


  public PushMirror remoteName(String remoteName) {
    this.remoteName = remoteName;
    return this;
  }

  /**
   * Get remoteName
   * @return remoteName
   */
  @javax.annotation.Nullable
  public String getRemoteName() {
    return remoteName;
  }

  public void setRemoteName(String remoteName) {
    this.remoteName = remoteName;
  }


  public PushMirror repoName(String repoName) {
    this.repoName = repoName;
    return this;
  }

  /**
   * Get repoName
   * @return repoName
   */
  @javax.annotation.Nullable
  public String getRepoName() {
    return repoName;
  }

  public void setRepoName(String repoName) {
    this.repoName = repoName;
  }


  public PushMirror syncOnCommit(Boolean syncOnCommit) {
    this.syncOnCommit = syncOnCommit;
    return this;
  }

  /**
   * Get syncOnCommit
   * @return syncOnCommit
   */
  @javax.annotation.Nullable
  public Boolean getSyncOnCommit() {
    return syncOnCommit;
  }

  public void setSyncOnCommit(Boolean syncOnCommit) {
    this.syncOnCommit = syncOnCommit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PushMirror pushMirror = (PushMirror) o;
    return Objects.equals(this.created, pushMirror.created) &&
        Objects.equals(this.interval, pushMirror.interval) &&
        Objects.equals(this.lastError, pushMirror.lastError) &&
        Objects.equals(this.lastUpdate, pushMirror.lastUpdate) &&
        Objects.equals(this.remoteAddress, pushMirror.remoteAddress) &&
        Objects.equals(this.remoteName, pushMirror.remoteName) &&
        Objects.equals(this.repoName, pushMirror.repoName) &&
        Objects.equals(this.syncOnCommit, pushMirror.syncOnCommit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, interval, lastError, lastUpdate, remoteAddress, remoteName, repoName, syncOnCommit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PushMirror {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    lastError: ").append(toIndentedString(lastError)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("    remoteAddress: ").append(toIndentedString(remoteAddress)).append("\n");
    sb.append("    remoteName: ").append(toIndentedString(remoteName)).append("\n");
    sb.append("    repoName: ").append(toIndentedString(repoName)).append("\n");
    sb.append("    syncOnCommit: ").append(toIndentedString(syncOnCommit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("interval");
    openapiFields.add("last_error");
    openapiFields.add("last_update");
    openapiFields.add("remote_address");
    openapiFields.add("remote_name");
    openapiFields.add("repo_name");
    openapiFields.add("sync_on_commit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PushMirror
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PushMirror.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PushMirror is not found in the empty JSON string", PushMirror.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PushMirror.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PushMirror` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) && !jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      if ((jsonObj.get("last_error") != null && !jsonObj.get("last_error").isJsonNull()) && !jsonObj.get("last_error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_error").toString()));
      }
      if ((jsonObj.get("last_update") != null && !jsonObj.get("last_update").isJsonNull()) && !jsonObj.get("last_update").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_update` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_update").toString()));
      }
      if ((jsonObj.get("remote_address") != null && !jsonObj.get("remote_address").isJsonNull()) && !jsonObj.get("remote_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remote_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remote_address").toString()));
      }
      if ((jsonObj.get("remote_name") != null && !jsonObj.get("remote_name").isJsonNull()) && !jsonObj.get("remote_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remote_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remote_name").toString()));
      }
      if ((jsonObj.get("repo_name") != null && !jsonObj.get("repo_name").isJsonNull()) && !jsonObj.get("repo_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repo_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PushMirror.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PushMirror' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PushMirror> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PushMirror.class));

       return (TypeAdapter<T>) new TypeAdapter<PushMirror>() {
           @Override
           public void write(JsonWriter out, PushMirror value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PushMirror read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PushMirror given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PushMirror
   * @throws IOException if the JSON string is invalid with respect to PushMirror
   */
  public static PushMirror fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PushMirror.class);
  }

  /**
   * Convert an instance of PushMirror to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

