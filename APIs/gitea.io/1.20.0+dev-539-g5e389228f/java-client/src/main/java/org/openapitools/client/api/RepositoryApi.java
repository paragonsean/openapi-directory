/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIError;
import org.openapitools.client.model.Activity;
import org.openapitools.client.model.AddCollaboratorOption;
import org.openapitools.client.model.AnnotatedTag;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.Branch;
import org.openapitools.client.model.BranchProtection;
import org.openapitools.client.model.ChangedFile;
import org.openapitools.client.model.CombinedStatus;
import org.openapitools.client.model.Commit;
import org.openapitools.client.model.CommitStatus;
import org.openapitools.client.model.ContentsResponse;
import org.openapitools.client.model.CreateBranchProtectionOption;
import org.openapitools.client.model.CreateBranchRepoOption;
import org.openapitools.client.model.CreateFileOptions;
import org.openapitools.client.model.CreateForkOption;
import org.openapitools.client.model.CreateHookOption;
import org.openapitools.client.model.CreateKeyOption;
import org.openapitools.client.model.CreatePullRequestOption;
import org.openapitools.client.model.CreatePullReviewOptions;
import org.openapitools.client.model.CreatePushMirrorOption;
import org.openapitools.client.model.CreateReleaseOption;
import org.openapitools.client.model.CreateRepoOption;
import org.openapitools.client.model.CreateStatusOption;
import org.openapitools.client.model.CreateTagOption;
import org.openapitools.client.model.CreateWikiPageOptions;
import org.openapitools.client.model.DeleteFileOptions;
import org.openapitools.client.model.DeployKey;
import org.openapitools.client.model.DismissPullReviewOptions;
import org.openapitools.client.model.EditAttachmentOptions;
import org.openapitools.client.model.EditBranchProtectionOption;
import org.openapitools.client.model.EditGitHookOption;
import org.openapitools.client.model.EditHookOption;
import org.openapitools.client.model.EditPullRequestOption;
import org.openapitools.client.model.EditReleaseOption;
import org.openapitools.client.model.EditRepoOption;
import java.io.File;
import org.openapitools.client.model.FileDeleteResponse;
import org.openapitools.client.model.FileResponse;
import org.openapitools.client.model.GenerateRepoOption;
import org.openapitools.client.model.GitBlobResponse;
import org.openapitools.client.model.GitHook;
import org.openapitools.client.model.GitTreeResponse;
import org.openapitools.client.model.Hook;
import org.openapitools.client.model.IssueConfig;
import org.openapitools.client.model.IssueConfigValidation;
import org.openapitools.client.model.IssueTemplate;
import java.time.LocalDate;
import org.openapitools.client.model.MergePullRequestOption;
import org.openapitools.client.model.MigrateRepoOptions;
import org.openapitools.client.model.Note;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PullRequest;
import org.openapitools.client.model.PullReview;
import org.openapitools.client.model.PullReviewComment;
import org.openapitools.client.model.PullReviewRequestOptions;
import org.openapitools.client.model.PushMirror;
import org.openapitools.client.model.Reference;
import org.openapitools.client.model.Release;
import org.openapitools.client.model.RepoCollaboratorPermission;
import org.openapitools.client.model.RepoTopicOptions;
import org.openapitools.client.model.Repository;
import org.openapitools.client.model.SearchResults;
import org.openapitools.client.model.SubmitPullReviewOptions;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.TopicName;
import org.openapitools.client.model.TopicResponse;
import org.openapitools.client.model.TrackedTime;
import org.openapitools.client.model.TransferRepoOption;
import org.openapitools.client.model.UpdateFileOptions;
import org.openapitools.client.model.User;
import org.openapitools.client.model.WatchInfo;
import org.openapitools.client.model.WikiCommitList;
import org.openapitools.client.model.WikiPage;
import org.openapitools.client.model.WikiPageMetaData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RepositoryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RepositoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RepositoryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for acceptRepoTransfer
     * @param owner owner of the repo to transfer (required)
     * @param repo name of the repo to transfer (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptRepoTransferCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/transfer/accept"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptRepoTransferValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling acceptRepoTransfer(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling acceptRepoTransfer(Async)");
        }

        return acceptRepoTransferCall(owner, repo, _callback);

    }

    /**
     * Accept a repo transfer
     * 
     * @param owner owner of the repo to transfer (required)
     * @param repo name of the repo to transfer (required)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public Repository acceptRepoTransfer(String owner, String repo) throws ApiException {
        ApiResponse<Repository> localVarResp = acceptRepoTransferWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Accept a repo transfer
     * 
     * @param owner owner of the repo to transfer (required)
     * @param repo name of the repo to transfer (required)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Repository> acceptRepoTransferWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = acceptRepoTransferValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accept a repo transfer (asynchronously)
     * 
     * @param owner owner of the repo to transfer (required)
     * @param repo name of the repo to transfer (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptRepoTransferAsync(String owner, String repo, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptRepoTransferValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCurrentUserRepo
     * @param createRepoOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createCurrentUserRepoCall(CreateRepoOption createRepoOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRepoOption;

        // create path and map variables
        String localVarPath = "/user/repos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCurrentUserRepoValidateBeforeCall(CreateRepoOption createRepoOption, final ApiCallback _callback) throws ApiException {
        return createCurrentUserRepoCall(createRepoOption, _callback);

    }

    /**
     * Create a repository
     * 
     * @param createRepoOption  (optional)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Repository createCurrentUserRepo(CreateRepoOption createRepoOption) throws ApiException {
        ApiResponse<Repository> localVarResp = createCurrentUserRepoWithHttpInfo(createRepoOption);
        return localVarResp.getData();
    }

    /**
     * Create a repository
     * 
     * @param createRepoOption  (optional)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Repository> createCurrentUserRepoWithHttpInfo(CreateRepoOption createRepoOption) throws ApiException {
        okhttp3.Call localVarCall = createCurrentUserRepoValidateBeforeCall(createRepoOption, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a repository (asynchronously)
     * 
     * @param createRepoOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createCurrentUserRepoAsync(CreateRepoOption createRepoOption, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCurrentUserRepoValidateBeforeCall(createRepoOption, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFork
     * @param owner owner of the repo to fork (required)
     * @param repo name of the repo to fork (required)
     * @param createForkOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createForkCall(String owner, String repo, CreateForkOption createForkOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createForkOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/forks"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createForkValidateBeforeCall(String owner, String repo, CreateForkOption createForkOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling createFork(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling createFork(Async)");
        }

        return createForkCall(owner, repo, createForkOption, _callback);

    }

    /**
     * Fork a repository
     * 
     * @param owner owner of the repo to fork (required)
     * @param repo name of the repo to fork (required)
     * @param createForkOption  (optional)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Repository createFork(String owner, String repo, CreateForkOption createForkOption) throws ApiException {
        ApiResponse<Repository> localVarResp = createForkWithHttpInfo(owner, repo, createForkOption);
        return localVarResp.getData();
    }

    /**
     * Fork a repository
     * 
     * @param owner owner of the repo to fork (required)
     * @param repo name of the repo to fork (required)
     * @param createForkOption  (optional)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Repository> createForkWithHttpInfo(String owner, String repo, CreateForkOption createForkOption) throws ApiException {
        okhttp3.Call localVarCall = createForkValidateBeforeCall(owner, repo, createForkOption, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fork a repository (asynchronously)
     * 
     * @param owner owner of the repo to fork (required)
     * @param repo name of the repo to fork (required)
     * @param createForkOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createForkAsync(String owner, String repo, CreateForkOption createForkOption, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = createForkValidateBeforeCall(owner, repo, createForkOption, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateRepo
     * @param templateOwner name of the template repository owner (required)
     * @param templateRepo name of the template repository (required)
     * @param generateRepoOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call generateRepoCall(String templateOwner, String templateRepo, GenerateRepoOption generateRepoOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateRepoOption;

        // create path and map variables
        String localVarPath = "/repos/{template_owner}/{template_repo}/generate"
            .replace("{" + "template_owner" + "}", localVarApiClient.escapeString(templateOwner.toString()))
            .replace("{" + "template_repo" + "}", localVarApiClient.escapeString(templateRepo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateRepoValidateBeforeCall(String templateOwner, String templateRepo, GenerateRepoOption generateRepoOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateOwner' is set
        if (templateOwner == null) {
            throw new ApiException("Missing the required parameter 'templateOwner' when calling generateRepo(Async)");
        }

        // verify the required parameter 'templateRepo' is set
        if (templateRepo == null) {
            throw new ApiException("Missing the required parameter 'templateRepo' when calling generateRepo(Async)");
        }

        return generateRepoCall(templateOwner, templateRepo, generateRepoOption, _callback);

    }

    /**
     * Create a repository using a template
     * 
     * @param templateOwner name of the template repository owner (required)
     * @param templateRepo name of the template repository (required)
     * @param generateRepoOption  (optional)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Repository generateRepo(String templateOwner, String templateRepo, GenerateRepoOption generateRepoOption) throws ApiException {
        ApiResponse<Repository> localVarResp = generateRepoWithHttpInfo(templateOwner, templateRepo, generateRepoOption);
        return localVarResp.getData();
    }

    /**
     * Create a repository using a template
     * 
     * @param templateOwner name of the template repository owner (required)
     * @param templateRepo name of the template repository (required)
     * @param generateRepoOption  (optional)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Repository> generateRepoWithHttpInfo(String templateOwner, String templateRepo, GenerateRepoOption generateRepoOption) throws ApiException {
        okhttp3.Call localVarCall = generateRepoValidateBeforeCall(templateOwner, templateRepo, generateRepoOption, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a repository using a template (asynchronously)
     * 
     * @param templateOwner name of the template repository owner (required)
     * @param templateRepo name of the template repository (required)
     * @param generateRepoOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call generateRepoAsync(String templateOwner, String templateRepo, GenerateRepoOption generateRepoOption, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateRepoValidateBeforeCall(templateOwner, templateRepo, generateRepoOption, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnnotatedTag
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AnnotatedTag </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotatedTagCall(String owner, String repo, String sha, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/git/tags/{sha}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnotatedTagValidateBeforeCall(String owner, String repo, String sha, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getAnnotatedTag(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling getAnnotatedTag(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling getAnnotatedTag(Async)");
        }

        return getAnnotatedTagCall(owner, repo, sha, _callback);

    }

    /**
     * Gets the tag object of an annotated tag (not lightweight tags)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags. (required)
     * @return AnnotatedTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AnnotatedTag </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public AnnotatedTag getAnnotatedTag(String owner, String repo, String sha) throws ApiException {
        ApiResponse<AnnotatedTag> localVarResp = getAnnotatedTagWithHttpInfo(owner, repo, sha);
        return localVarResp.getData();
    }

    /**
     * Gets the tag object of an annotated tag (not lightweight tags)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags. (required)
     * @return ApiResponse&lt;AnnotatedTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AnnotatedTag </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<AnnotatedTag> getAnnotatedTagWithHttpInfo(String owner, String repo, String sha) throws ApiException {
        okhttp3.Call localVarCall = getAnnotatedTagValidateBeforeCall(owner, repo, sha, null);
        Type localVarReturnType = new TypeToken<AnnotatedTag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the tag object of an annotated tag (not lightweight tags) (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AnnotatedTag </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotatedTagAsync(String owner, String repo, String sha, final ApiCallback<AnnotatedTag> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnotatedTagValidateBeforeCall(owner, repo, sha, _callback);
        Type localVarReturnType = new TypeToken<AnnotatedTag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBlob
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the commit (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitBlobResponse </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getBlobCall(String owner, String repo, String sha, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/git/blobs/{sha}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBlobValidateBeforeCall(String owner, String repo, String sha, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getBlob(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling getBlob(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling getBlob(Async)");
        }

        return getBlobCall(owner, repo, sha, _callback);

    }

    /**
     * Gets the blob of a repository.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the commit (required)
     * @return GitBlobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitBlobResponse </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public GitBlobResponse getBlob(String owner, String repo, String sha) throws ApiException {
        ApiResponse<GitBlobResponse> localVarResp = getBlobWithHttpInfo(owner, repo, sha);
        return localVarResp.getData();
    }

    /**
     * Gets the blob of a repository.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the commit (required)
     * @return ApiResponse&lt;GitBlobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitBlobResponse </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<GitBlobResponse> getBlobWithHttpInfo(String owner, String repo, String sha) throws ApiException {
        okhttp3.Call localVarCall = getBlobValidateBeforeCall(owner, repo, sha, null);
        Type localVarReturnType = new TypeToken<GitBlobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the blob of a repository. (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the commit (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitBlobResponse </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getBlobAsync(String owner, String repo, String sha, final ApiCallback<GitBlobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBlobValidateBeforeCall(owner, repo, sha, _callback);
        Type localVarReturnType = new TypeToken<GitBlobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTree
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the commit (required)
     * @param recursive show all directories and files (optional)
     * @param page page number; the &#39;truncated&#39; field in the response will be true if there are still more items after this page, false if the last page (optional)
     * @param perPage number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitTreeResponse </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTreeCall(String owner, String repo, String sha, Boolean recursive, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/git/trees/{sha}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTreeValidateBeforeCall(String owner, String repo, String sha, Boolean recursive, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getTree(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling getTree(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling getTree(Async)");
        }

        return getTreeCall(owner, repo, sha, recursive, page, perPage, _callback);

    }

    /**
     * Gets the tree of a repository.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the commit (required)
     * @param recursive show all directories and files (optional)
     * @param page page number; the &#39;truncated&#39; field in the response will be true if there are still more items after this page, false if the last page (optional)
     * @param perPage number of items per page (optional)
     * @return GitTreeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitTreeResponse </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public GitTreeResponse getTree(String owner, String repo, String sha, Boolean recursive, Integer page, Integer perPage) throws ApiException {
        ApiResponse<GitTreeResponse> localVarResp = getTreeWithHttpInfo(owner, repo, sha, recursive, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Gets the tree of a repository.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the commit (required)
     * @param recursive show all directories and files (optional)
     * @param page page number; the &#39;truncated&#39; field in the response will be true if there are still more items after this page, false if the last page (optional)
     * @param perPage number of items per page (optional)
     * @return ApiResponse&lt;GitTreeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitTreeResponse </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<GitTreeResponse> getTreeWithHttpInfo(String owner, String repo, String sha, Boolean recursive, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getTreeValidateBeforeCall(owner, repo, sha, recursive, page, perPage, null);
        Type localVarReturnType = new TypeToken<GitTreeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the tree of a repository. (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the commit (required)
     * @param recursive show all directories and files (optional)
     * @param page page number; the &#39;truncated&#39; field in the response will be true if there are still more items after this page, false if the last page (optional)
     * @param perPage number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitTreeResponse </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTreeAsync(String owner, String repo, String sha, Boolean recursive, Integer page, Integer perPage, final ApiCallback<GitTreeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTreeValidateBeforeCall(owner, repo, sha, recursive, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<GitTreeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listForks
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listForksCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/forks"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listForksValidateBeforeCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling listForks(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling listForks(Async)");
        }

        return listForksCall(owner, repo, page, limit, _callback);

    }

    /**
     * List a repository&#39;s forks
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public List<Repository> listForks(String owner, String repo, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Repository>> localVarResp = listForksWithHttpInfo(owner, repo, page, limit);
        return localVarResp.getData();
    }

    /**
     * List a repository&#39;s forks
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Repository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Repository>> listForksWithHttpInfo(String owner, String repo, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listForksValidateBeforeCall(owner, repo, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a repository&#39;s forks (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listForksAsync(String owner, String repo, Integer page, Integer limit, final ApiCallback<List<Repository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listForksValidateBeforeCall(owner, repo, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rejectRepoTransfer
     * @param owner owner of the repo to transfer (required)
     * @param repo name of the repo to transfer (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectRepoTransferCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/transfer/reject"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectRepoTransferValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling rejectRepoTransfer(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling rejectRepoTransfer(Async)");
        }

        return rejectRepoTransferCall(owner, repo, _callback);

    }

    /**
     * Reject a repo transfer
     * 
     * @param owner owner of the repo to transfer (required)
     * @param repo name of the repo to transfer (required)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public Repository rejectRepoTransfer(String owner, String repo) throws ApiException {
        ApiResponse<Repository> localVarResp = rejectRepoTransferWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Reject a repo transfer
     * 
     * @param owner owner of the repo to transfer (required)
     * @param repo name of the repo to transfer (required)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Repository> rejectRepoTransferWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = rejectRepoTransferValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reject a repo transfer (asynchronously)
     * 
     * @param owner owner of the repo to transfer (required)
     * @param repo name of the repo to transfer (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectRepoTransferAsync(String owner, String repo, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectRepoTransferValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoAddCollaborator
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param collaborator username of the collaborator to add (required)
     * @param addCollaboratorOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoAddCollaboratorCall(String owner, String repo, String collaborator, AddCollaboratorOption addCollaboratorOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addCollaboratorOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/collaborators/{collaborator}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "collaborator" + "}", localVarApiClient.escapeString(collaborator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoAddCollaboratorValidateBeforeCall(String owner, String repo, String collaborator, AddCollaboratorOption addCollaboratorOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoAddCollaborator(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoAddCollaborator(Async)");
        }

        // verify the required parameter 'collaborator' is set
        if (collaborator == null) {
            throw new ApiException("Missing the required parameter 'collaborator' when calling repoAddCollaborator(Async)");
        }

        return repoAddCollaboratorCall(owner, repo, collaborator, addCollaboratorOption, _callback);

    }

    /**
     * Add a collaborator to a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param collaborator username of the collaborator to add (required)
     * @param addCollaboratorOption  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void repoAddCollaborator(String owner, String repo, String collaborator, AddCollaboratorOption addCollaboratorOption) throws ApiException {
        repoAddCollaboratorWithHttpInfo(owner, repo, collaborator, addCollaboratorOption);
    }

    /**
     * Add a collaborator to a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param collaborator username of the collaborator to add (required)
     * @param addCollaboratorOption  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoAddCollaboratorWithHttpInfo(String owner, String repo, String collaborator, AddCollaboratorOption addCollaboratorOption) throws ApiException {
        okhttp3.Call localVarCall = repoAddCollaboratorValidateBeforeCall(owner, repo, collaborator, addCollaboratorOption, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a collaborator to a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param collaborator username of the collaborator to add (required)
     * @param addCollaboratorOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoAddCollaboratorAsync(String owner, String repo, String collaborator, AddCollaboratorOption addCollaboratorOption, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoAddCollaboratorValidateBeforeCall(owner, repo, collaborator, addCollaboratorOption, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoAddPushMirror
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createPushMirrorOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PushMirror </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoAddPushMirrorCall(String owner, String repo, CreatePushMirrorOption createPushMirrorOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPushMirrorOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/push_mirrors"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoAddPushMirrorValidateBeforeCall(String owner, String repo, CreatePushMirrorOption createPushMirrorOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoAddPushMirror(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoAddPushMirror(Async)");
        }

        return repoAddPushMirrorCall(owner, repo, createPushMirrorOption, _callback);

    }

    /**
     * add a push mirror to the repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createPushMirrorOption  (optional)
     * @return PushMirror
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PushMirror </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public PushMirror repoAddPushMirror(String owner, String repo, CreatePushMirrorOption createPushMirrorOption) throws ApiException {
        ApiResponse<PushMirror> localVarResp = repoAddPushMirrorWithHttpInfo(owner, repo, createPushMirrorOption);
        return localVarResp.getData();
    }

    /**
     * add a push mirror to the repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createPushMirrorOption  (optional)
     * @return ApiResponse&lt;PushMirror&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PushMirror </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<PushMirror> repoAddPushMirrorWithHttpInfo(String owner, String repo, CreatePushMirrorOption createPushMirrorOption) throws ApiException {
        okhttp3.Call localVarCall = repoAddPushMirrorValidateBeforeCall(owner, repo, createPushMirrorOption, null);
        Type localVarReturnType = new TypeToken<PushMirror>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * add a push mirror to the repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createPushMirrorOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PushMirror </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoAddPushMirrorAsync(String owner, String repo, CreatePushMirrorOption createPushMirrorOption, final ApiCallback<PushMirror> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoAddPushMirrorValidateBeforeCall(owner, repo, createPushMirrorOption, _callback);
        Type localVarReturnType = new TypeToken<PushMirror>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoAddTeam
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param team team name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoAddTeamCall(String owner, String repo, String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/teams/{team}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoAddTeamValidateBeforeCall(String owner, String repo, String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoAddTeam(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoAddTeam(Async)");
        }

        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling repoAddTeam(Async)");
        }

        return repoAddTeamCall(owner, repo, team, _callback);

    }

    /**
     * Add a team to a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param team team name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void repoAddTeam(String owner, String repo, String team) throws ApiException {
        repoAddTeamWithHttpInfo(owner, repo, team);
    }

    /**
     * Add a team to a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param team team name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoAddTeamWithHttpInfo(String owner, String repo, String team) throws ApiException {
        okhttp3.Call localVarCall = repoAddTeamValidateBeforeCall(owner, repo, team, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a team to a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param team team name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoAddTeamAsync(String owner, String repo, String team, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoAddTeamValidateBeforeCall(owner, repo, team, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoAddTopic
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param topic name of the topic to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIInvalidTopicsError is error format response to invalid topics </td><td>  * invalidTopics -  <br>  * message -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoAddTopicCall(String owner, String repo, String topic, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/topics/{topic}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "topic" + "}", localVarApiClient.escapeString(topic.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoAddTopicValidateBeforeCall(String owner, String repo, String topic, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoAddTopic(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoAddTopic(Async)");
        }

        // verify the required parameter 'topic' is set
        if (topic == null) {
            throw new ApiException("Missing the required parameter 'topic' when calling repoAddTopic(Async)");
        }

        return repoAddTopicCall(owner, repo, topic, _callback);

    }

    /**
     * Add a topic to a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param topic name of the topic to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIInvalidTopicsError is error format response to invalid topics </td><td>  * invalidTopics -  <br>  * message -  <br>  </td></tr>
     </table>
     */
    public void repoAddTopic(String owner, String repo, String topic) throws ApiException {
        repoAddTopicWithHttpInfo(owner, repo, topic);
    }

    /**
     * Add a topic to a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param topic name of the topic to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIInvalidTopicsError is error format response to invalid topics </td><td>  * invalidTopics -  <br>  * message -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoAddTopicWithHttpInfo(String owner, String repo, String topic) throws ApiException {
        okhttp3.Call localVarCall = repoAddTopicValidateBeforeCall(owner, repo, topic, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a topic to a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param topic name of the topic to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIInvalidTopicsError is error format response to invalid topics </td><td>  * invalidTopics -  <br>  * message -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoAddTopicAsync(String owner, String repo, String topic, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoAddTopicValidateBeforeCall(owner, repo, topic, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoApplyDiffPatch
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param updateFileOptions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FileResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoApplyDiffPatchCall(String owner, String repo, UpdateFileOptions updateFileOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFileOptions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/diffpatch"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoApplyDiffPatchValidateBeforeCall(String owner, String repo, UpdateFileOptions updateFileOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoApplyDiffPatch(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoApplyDiffPatch(Async)");
        }

        // verify the required parameter 'updateFileOptions' is set
        if (updateFileOptions == null) {
            throw new ApiException("Missing the required parameter 'updateFileOptions' when calling repoApplyDiffPatch(Async)");
        }

        return repoApplyDiffPatchCall(owner, repo, updateFileOptions, _callback);

    }

    /**
     * Apply diff patch to repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param updateFileOptions  (required)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FileResponse </td><td>  -  </td></tr>
     </table>
     */
    public FileResponse repoApplyDiffPatch(String owner, String repo, UpdateFileOptions updateFileOptions) throws ApiException {
        ApiResponse<FileResponse> localVarResp = repoApplyDiffPatchWithHttpInfo(owner, repo, updateFileOptions);
        return localVarResp.getData();
    }

    /**
     * Apply diff patch to repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param updateFileOptions  (required)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FileResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileResponse> repoApplyDiffPatchWithHttpInfo(String owner, String repo, UpdateFileOptions updateFileOptions) throws ApiException {
        okhttp3.Call localVarCall = repoApplyDiffPatchValidateBeforeCall(owner, repo, updateFileOptions, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply diff patch to repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param updateFileOptions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FileResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoApplyDiffPatchAsync(String owner, String repo, UpdateFileOptions updateFileOptions, final ApiCallback<FileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoApplyDiffPatchValidateBeforeCall(owner, repo, updateFileOptions, _callback);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoCancelScheduledAutoMerge
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to merge (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoCancelScheduledAutoMergeCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}/merge"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoCancelScheduledAutoMergeValidateBeforeCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoCancelScheduledAutoMerge(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoCancelScheduledAutoMerge(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoCancelScheduledAutoMerge(Async)");
        }

        return repoCancelScheduledAutoMergeCall(owner, repo, index, _callback);

    }

    /**
     * Cancel the scheduled auto merge for the given pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to merge (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void repoCancelScheduledAutoMerge(String owner, String repo, Long index) throws ApiException {
        repoCancelScheduledAutoMergeWithHttpInfo(owner, repo, index);
    }

    /**
     * Cancel the scheduled auto merge for the given pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to merge (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoCancelScheduledAutoMergeWithHttpInfo(String owner, String repo, Long index) throws ApiException {
        okhttp3.Call localVarCall = repoCancelScheduledAutoMergeValidateBeforeCall(owner, repo, index, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel the scheduled auto merge for the given pull request (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to merge (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoCancelScheduledAutoMergeAsync(String owner, String repo, Long index, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoCancelScheduledAutoMergeValidateBeforeCall(owner, repo, index, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoCheckCollaborator
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param collaborator username of the collaborator (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCheckCollaboratorCall(String owner, String repo, String collaborator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/collaborators/{collaborator}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "collaborator" + "}", localVarApiClient.escapeString(collaborator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoCheckCollaboratorValidateBeforeCall(String owner, String repo, String collaborator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoCheckCollaborator(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoCheckCollaborator(Async)");
        }

        // verify the required parameter 'collaborator' is set
        if (collaborator == null) {
            throw new ApiException("Missing the required parameter 'collaborator' when calling repoCheckCollaborator(Async)");
        }

        return repoCheckCollaboratorCall(owner, repo, collaborator, _callback);

    }

    /**
     * Check if a user is a collaborator of a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param collaborator username of the collaborator (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void repoCheckCollaborator(String owner, String repo, String collaborator) throws ApiException {
        repoCheckCollaboratorWithHttpInfo(owner, repo, collaborator);
    }

    /**
     * Check if a user is a collaborator of a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param collaborator username of the collaborator (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoCheckCollaboratorWithHttpInfo(String owner, String repo, String collaborator) throws ApiException {
        okhttp3.Call localVarCall = repoCheckCollaboratorValidateBeforeCall(owner, repo, collaborator, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a user is a collaborator of a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param collaborator username of the collaborator (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCheckCollaboratorAsync(String owner, String repo, String collaborator, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoCheckCollaboratorValidateBeforeCall(owner, repo, collaborator, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoCheckTeam
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param team team name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCheckTeamCall(String owner, String repo, String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/teams/{team}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoCheckTeamValidateBeforeCall(String owner, String repo, String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoCheckTeam(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoCheckTeam(Async)");
        }

        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling repoCheckTeam(Async)");
        }

        return repoCheckTeamCall(owner, repo, team, _callback);

    }

    /**
     * Check if a team is assigned to a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param team team name (required)
     * @return Team
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Team repoCheckTeam(String owner, String repo, String team) throws ApiException {
        ApiResponse<Team> localVarResp = repoCheckTeamWithHttpInfo(owner, repo, team);
        return localVarResp.getData();
    }

    /**
     * Check if a team is assigned to a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param team team name (required)
     * @return ApiResponse&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Team> repoCheckTeamWithHttpInfo(String owner, String repo, String team) throws ApiException {
        okhttp3.Call localVarCall = repoCheckTeamValidateBeforeCall(owner, repo, team, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if a team is assigned to a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param team team name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCheckTeamAsync(String owner, String repo, String team, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoCheckTeamValidateBeforeCall(owner, repo, team, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoCreateBranch
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createBranchRepoOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Branch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The old branch does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The branch with the same name already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateBranchCall(String owner, String repo, CreateBranchRepoOption createBranchRepoOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBranchRepoOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoCreateBranchValidateBeforeCall(String owner, String repo, CreateBranchRepoOption createBranchRepoOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoCreateBranch(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoCreateBranch(Async)");
        }

        return repoCreateBranchCall(owner, repo, createBranchRepoOption, _callback);

    }

    /**
     * Create a branch
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createBranchRepoOption  (optional)
     * @return Branch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Branch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The old branch does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The branch with the same name already exists. </td><td>  -  </td></tr>
     </table>
     */
    public Branch repoCreateBranch(String owner, String repo, CreateBranchRepoOption createBranchRepoOption) throws ApiException {
        ApiResponse<Branch> localVarResp = repoCreateBranchWithHttpInfo(owner, repo, createBranchRepoOption);
        return localVarResp.getData();
    }

    /**
     * Create a branch
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createBranchRepoOption  (optional)
     * @return ApiResponse&lt;Branch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Branch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The old branch does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The branch with the same name already exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Branch> repoCreateBranchWithHttpInfo(String owner, String repo, CreateBranchRepoOption createBranchRepoOption) throws ApiException {
        okhttp3.Call localVarCall = repoCreateBranchValidateBeforeCall(owner, repo, createBranchRepoOption, null);
        Type localVarReturnType = new TypeToken<Branch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a branch (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createBranchRepoOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Branch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The old branch does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The branch with the same name already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateBranchAsync(String owner, String repo, CreateBranchRepoOption createBranchRepoOption, final ApiCallback<Branch> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoCreateBranchValidateBeforeCall(owner, repo, createBranchRepoOption, _callback);
        Type localVarReturnType = new TypeToken<Branch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoCreateBranchProtection
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createBranchProtectionOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> BranchProtection </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateBranchProtectionCall(String owner, String repo, CreateBranchProtectionOption createBranchProtectionOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBranchProtectionOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branch_protections"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoCreateBranchProtectionValidateBeforeCall(String owner, String repo, CreateBranchProtectionOption createBranchProtectionOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoCreateBranchProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoCreateBranchProtection(Async)");
        }

        return repoCreateBranchProtectionCall(owner, repo, createBranchProtectionOption, _callback);

    }

    /**
     * Create a branch protections for a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createBranchProtectionOption  (optional)
     * @return BranchProtection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> BranchProtection </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public BranchProtection repoCreateBranchProtection(String owner, String repo, CreateBranchProtectionOption createBranchProtectionOption) throws ApiException {
        ApiResponse<BranchProtection> localVarResp = repoCreateBranchProtectionWithHttpInfo(owner, repo, createBranchProtectionOption);
        return localVarResp.getData();
    }

    /**
     * Create a branch protections for a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createBranchProtectionOption  (optional)
     * @return ApiResponse&lt;BranchProtection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> BranchProtection </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<BranchProtection> repoCreateBranchProtectionWithHttpInfo(String owner, String repo, CreateBranchProtectionOption createBranchProtectionOption) throws ApiException {
        okhttp3.Call localVarCall = repoCreateBranchProtectionValidateBeforeCall(owner, repo, createBranchProtectionOption, null);
        Type localVarReturnType = new TypeToken<BranchProtection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a branch protections for a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createBranchProtectionOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> BranchProtection </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateBranchProtectionAsync(String owner, String repo, CreateBranchProtectionOption createBranchProtectionOption, final ApiCallback<BranchProtection> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoCreateBranchProtectionValidateBeforeCall(owner, repo, createBranchProtectionOption, _callback);
        Type localVarReturnType = new TypeToken<BranchProtection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoCreateFile
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath path of the file to create (required)
     * @param createFileOptions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> FileResponse </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateFileCall(String owner, String repo, String filepath, CreateFileOptions createFileOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFileOptions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/contents/{filepath}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "filepath" + "}", localVarApiClient.escapeString(filepath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoCreateFileValidateBeforeCall(String owner, String repo, String filepath, CreateFileOptions createFileOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoCreateFile(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoCreateFile(Async)");
        }

        // verify the required parameter 'filepath' is set
        if (filepath == null) {
            throw new ApiException("Missing the required parameter 'filepath' when calling repoCreateFile(Async)");
        }

        // verify the required parameter 'createFileOptions' is set
        if (createFileOptions == null) {
            throw new ApiException("Missing the required parameter 'createFileOptions' when calling repoCreateFile(Async)");
        }

        return repoCreateFileCall(owner, repo, filepath, createFileOptions, _callback);

    }

    /**
     * Create a file in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath path of the file to create (required)
     * @param createFileOptions  (required)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> FileResponse </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public FileResponse repoCreateFile(String owner, String repo, String filepath, CreateFileOptions createFileOptions) throws ApiException {
        ApiResponse<FileResponse> localVarResp = repoCreateFileWithHttpInfo(owner, repo, filepath, createFileOptions);
        return localVarResp.getData();
    }

    /**
     * Create a file in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath path of the file to create (required)
     * @param createFileOptions  (required)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> FileResponse </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<FileResponse> repoCreateFileWithHttpInfo(String owner, String repo, String filepath, CreateFileOptions createFileOptions) throws ApiException {
        okhttp3.Call localVarCall = repoCreateFileValidateBeforeCall(owner, repo, filepath, createFileOptions, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a file in a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath path of the file to create (required)
     * @param createFileOptions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> FileResponse </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateFileAsync(String owner, String repo, String filepath, CreateFileOptions createFileOptions, final ApiCallback<FileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoCreateFileValidateBeforeCall(owner, repo, filepath, createFileOptions, _callback);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoCreateHook
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createHookOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateHookCall(String owner, String repo, CreateHookOption createHookOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createHookOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/hooks"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoCreateHookValidateBeforeCall(String owner, String repo, CreateHookOption createHookOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoCreateHook(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoCreateHook(Async)");
        }

        return repoCreateHookCall(owner, repo, createHookOption, _callback);

    }

    /**
     * Create a hook
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createHookOption  (optional)
     * @return Hook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public Hook repoCreateHook(String owner, String repo, CreateHookOption createHookOption) throws ApiException {
        ApiResponse<Hook> localVarResp = repoCreateHookWithHttpInfo(owner, repo, createHookOption);
        return localVarResp.getData();
    }

    /**
     * Create a hook
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createHookOption  (optional)
     * @return ApiResponse&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hook> repoCreateHookWithHttpInfo(String owner, String repo, CreateHookOption createHookOption) throws ApiException {
        okhttp3.Call localVarCall = repoCreateHookValidateBeforeCall(owner, repo, createHookOption, null);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a hook (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createHookOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateHookAsync(String owner, String repo, CreateHookOption createHookOption, final ApiCallback<Hook> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoCreateHookValidateBeforeCall(owner, repo, createHookOption, _callback);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoCreateKey
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createKeyOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> DeployKey </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateKeyCall(String owner, String repo, CreateKeyOption createKeyOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createKeyOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/keys"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoCreateKeyValidateBeforeCall(String owner, String repo, CreateKeyOption createKeyOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoCreateKey(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoCreateKey(Async)");
        }

        return repoCreateKeyCall(owner, repo, createKeyOption, _callback);

    }

    /**
     * Add a key to a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createKeyOption  (optional)
     * @return DeployKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> DeployKey </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public DeployKey repoCreateKey(String owner, String repo, CreateKeyOption createKeyOption) throws ApiException {
        ApiResponse<DeployKey> localVarResp = repoCreateKeyWithHttpInfo(owner, repo, createKeyOption);
        return localVarResp.getData();
    }

    /**
     * Add a key to a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createKeyOption  (optional)
     * @return ApiResponse&lt;DeployKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> DeployKey </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DeployKey> repoCreateKeyWithHttpInfo(String owner, String repo, CreateKeyOption createKeyOption) throws ApiException {
        okhttp3.Call localVarCall = repoCreateKeyValidateBeforeCall(owner, repo, createKeyOption, null);
        Type localVarReturnType = new TypeToken<DeployKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a key to a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createKeyOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> DeployKey </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateKeyAsync(String owner, String repo, CreateKeyOption createKeyOption, final ApiCallback<DeployKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoCreateKeyValidateBeforeCall(owner, repo, createKeyOption, _callback);
        Type localVarReturnType = new TypeToken<DeployKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoCreatePullRequest
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createPullRequestOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PullRequest </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreatePullRequestCall(String owner, String repo, CreatePullRequestOption createPullRequestOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPullRequestOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoCreatePullRequestValidateBeforeCall(String owner, String repo, CreatePullRequestOption createPullRequestOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoCreatePullRequest(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoCreatePullRequest(Async)");
        }

        return repoCreatePullRequestCall(owner, repo, createPullRequestOption, _callback);

    }

    /**
     * Create a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createPullRequestOption  (optional)
     * @return PullRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PullRequest </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public PullRequest repoCreatePullRequest(String owner, String repo, CreatePullRequestOption createPullRequestOption) throws ApiException {
        ApiResponse<PullRequest> localVarResp = repoCreatePullRequestWithHttpInfo(owner, repo, createPullRequestOption);
        return localVarResp.getData();
    }

    /**
     * Create a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createPullRequestOption  (optional)
     * @return ApiResponse&lt;PullRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PullRequest </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<PullRequest> repoCreatePullRequestWithHttpInfo(String owner, String repo, CreatePullRequestOption createPullRequestOption) throws ApiException {
        okhttp3.Call localVarCall = repoCreatePullRequestValidateBeforeCall(owner, repo, createPullRequestOption, null);
        Type localVarReturnType = new TypeToken<PullRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a pull request (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createPullRequestOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PullRequest </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreatePullRequestAsync(String owner, String repo, CreatePullRequestOption createPullRequestOption, final ApiCallback<PullRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoCreatePullRequestValidateBeforeCall(owner, repo, createPullRequestOption, _callback);
        Type localVarReturnType = new TypeToken<PullRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoCreatePullReview
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param createPullReviewOptions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreatePullReviewCall(String owner, String repo, Long index, CreatePullReviewOptions createPullReviewOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPullReviewOptions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}/reviews"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoCreatePullReviewValidateBeforeCall(String owner, String repo, Long index, CreatePullReviewOptions createPullReviewOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoCreatePullReview(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoCreatePullReview(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoCreatePullReview(Async)");
        }

        // verify the required parameter 'createPullReviewOptions' is set
        if (createPullReviewOptions == null) {
            throw new ApiException("Missing the required parameter 'createPullReviewOptions' when calling repoCreatePullReview(Async)");
        }

        return repoCreatePullReviewCall(owner, repo, index, createPullReviewOptions, _callback);

    }

    /**
     * Create a review to an pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param createPullReviewOptions  (required)
     * @return PullReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public PullReview repoCreatePullReview(String owner, String repo, Long index, CreatePullReviewOptions createPullReviewOptions) throws ApiException {
        ApiResponse<PullReview> localVarResp = repoCreatePullReviewWithHttpInfo(owner, repo, index, createPullReviewOptions);
        return localVarResp.getData();
    }

    /**
     * Create a review to an pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param createPullReviewOptions  (required)
     * @return ApiResponse&lt;PullReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<PullReview> repoCreatePullReviewWithHttpInfo(String owner, String repo, Long index, CreatePullReviewOptions createPullReviewOptions) throws ApiException {
        okhttp3.Call localVarCall = repoCreatePullReviewValidateBeforeCall(owner, repo, index, createPullReviewOptions, null);
        Type localVarReturnType = new TypeToken<PullReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a review to an pull request (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param createPullReviewOptions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreatePullReviewAsync(String owner, String repo, Long index, CreatePullReviewOptions createPullReviewOptions, final ApiCallback<PullReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoCreatePullReviewValidateBeforeCall(owner, repo, index, createPullReviewOptions, _callback);
        Type localVarReturnType = new TypeToken<PullReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoCreatePullReviewRequests
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param pullReviewRequestOptions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PullReviewList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreatePullReviewRequestsCall(String owner, String repo, Long index, PullReviewRequestOptions pullReviewRequestOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pullReviewRequestOptions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}/requested_reviewers"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoCreatePullReviewRequestsValidateBeforeCall(String owner, String repo, Long index, PullReviewRequestOptions pullReviewRequestOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoCreatePullReviewRequests(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoCreatePullReviewRequests(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoCreatePullReviewRequests(Async)");
        }

        // verify the required parameter 'pullReviewRequestOptions' is set
        if (pullReviewRequestOptions == null) {
            throw new ApiException("Missing the required parameter 'pullReviewRequestOptions' when calling repoCreatePullReviewRequests(Async)");
        }

        return repoCreatePullReviewRequestsCall(owner, repo, index, pullReviewRequestOptions, _callback);

    }

    /**
     * create review requests for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param pullReviewRequestOptions  (required)
     * @return List&lt;PullReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PullReviewList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public List<PullReview> repoCreatePullReviewRequests(String owner, String repo, Long index, PullReviewRequestOptions pullReviewRequestOptions) throws ApiException {
        ApiResponse<List<PullReview>> localVarResp = repoCreatePullReviewRequestsWithHttpInfo(owner, repo, index, pullReviewRequestOptions);
        return localVarResp.getData();
    }

    /**
     * create review requests for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param pullReviewRequestOptions  (required)
     * @return ApiResponse&lt;List&lt;PullReview&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PullReviewList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<PullReview>> repoCreatePullReviewRequestsWithHttpInfo(String owner, String repo, Long index, PullReviewRequestOptions pullReviewRequestOptions) throws ApiException {
        okhttp3.Call localVarCall = repoCreatePullReviewRequestsValidateBeforeCall(owner, repo, index, pullReviewRequestOptions, null);
        Type localVarReturnType = new TypeToken<List<PullReview>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create review requests for a pull request (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param pullReviewRequestOptions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PullReviewList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreatePullReviewRequestsAsync(String owner, String repo, Long index, PullReviewRequestOptions pullReviewRequestOptions, final ApiCallback<List<PullReview>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoCreatePullReviewRequestsValidateBeforeCall(owner, repo, index, pullReviewRequestOptions, _callback);
        Type localVarReturnType = new TypeToken<List<PullReview>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoCreateRelease
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createReleaseOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateReleaseCall(String owner, String repo, CreateReleaseOption createReleaseOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReleaseOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoCreateReleaseValidateBeforeCall(String owner, String repo, CreateReleaseOption createReleaseOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoCreateRelease(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoCreateRelease(Async)");
        }

        return repoCreateReleaseCall(owner, repo, createReleaseOption, _callback);

    }

    /**
     * Create a release
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createReleaseOption  (optional)
     * @return Release
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Release repoCreateRelease(String owner, String repo, CreateReleaseOption createReleaseOption) throws ApiException {
        ApiResponse<Release> localVarResp = repoCreateReleaseWithHttpInfo(owner, repo, createReleaseOption);
        return localVarResp.getData();
    }

    /**
     * Create a release
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createReleaseOption  (optional)
     * @return ApiResponse&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Release> repoCreateReleaseWithHttpInfo(String owner, String repo, CreateReleaseOption createReleaseOption) throws ApiException {
        okhttp3.Call localVarCall = repoCreateReleaseValidateBeforeCall(owner, repo, createReleaseOption, null);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a release (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createReleaseOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateReleaseAsync(String owner, String repo, CreateReleaseOption createReleaseOption, final ApiCallback<Release> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoCreateReleaseValidateBeforeCall(owner, repo, createReleaseOption, _callback);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoCreateReleaseAttachment
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param attachment attachment to upload (required)
     * @param name name of the attachment (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateReleaseAttachmentCall(String owner, String repo, Long id, File attachment, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/{id}/assets"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachment != null) {
            localVarFormParams.put("attachment", attachment);
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoCreateReleaseAttachmentValidateBeforeCall(String owner, String repo, Long id, File attachment, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoCreateReleaseAttachment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoCreateReleaseAttachment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoCreateReleaseAttachment(Async)");
        }

        // verify the required parameter 'attachment' is set
        if (attachment == null) {
            throw new ApiException("Missing the required parameter 'attachment' when calling repoCreateReleaseAttachment(Async)");
        }

        return repoCreateReleaseAttachmentCall(owner, repo, id, attachment, name, _callback);

    }

    /**
     * Create a release attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param attachment attachment to upload (required)
     * @param name name of the attachment (optional)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Attachment repoCreateReleaseAttachment(String owner, String repo, Long id, File attachment, String name) throws ApiException {
        ApiResponse<Attachment> localVarResp = repoCreateReleaseAttachmentWithHttpInfo(owner, repo, id, attachment, name);
        return localVarResp.getData();
    }

    /**
     * Create a release attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param attachment attachment to upload (required)
     * @param name name of the attachment (optional)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Attachment> repoCreateReleaseAttachmentWithHttpInfo(String owner, String repo, Long id, File attachment, String name) throws ApiException {
        okhttp3.Call localVarCall = repoCreateReleaseAttachmentValidateBeforeCall(owner, repo, id, attachment, name, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a release attachment (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param attachment attachment to upload (required)
     * @param name name of the attachment (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateReleaseAttachmentAsync(String owner, String repo, Long id, File attachment, String name, final ApiCallback<Attachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoCreateReleaseAttachmentValidateBeforeCall(owner, repo, id, attachment, name, _callback);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoCreateStatus
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the commit (required)
     * @param createStatusOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CommitStatus </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateStatusCall(String owner, String repo, String sha, CreateStatusOption createStatusOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStatusOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/statuses/{sha}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoCreateStatusValidateBeforeCall(String owner, String repo, String sha, CreateStatusOption createStatusOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoCreateStatus(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoCreateStatus(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling repoCreateStatus(Async)");
        }

        return repoCreateStatusCall(owner, repo, sha, createStatusOption, _callback);

    }

    /**
     * Create a commit status
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the commit (required)
     * @param createStatusOption  (optional)
     * @return CommitStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CommitStatus </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public CommitStatus repoCreateStatus(String owner, String repo, String sha, CreateStatusOption createStatusOption) throws ApiException {
        ApiResponse<CommitStatus> localVarResp = repoCreateStatusWithHttpInfo(owner, repo, sha, createStatusOption);
        return localVarResp.getData();
    }

    /**
     * Create a commit status
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the commit (required)
     * @param createStatusOption  (optional)
     * @return ApiResponse&lt;CommitStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CommitStatus </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<CommitStatus> repoCreateStatusWithHttpInfo(String owner, String repo, String sha, CreateStatusOption createStatusOption) throws ApiException {
        okhttp3.Call localVarCall = repoCreateStatusValidateBeforeCall(owner, repo, sha, createStatusOption, null);
        Type localVarReturnType = new TypeToken<CommitStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a commit status (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the commit (required)
     * @param createStatusOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CommitStatus </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateStatusAsync(String owner, String repo, String sha, CreateStatusOption createStatusOption, final ApiCallback<CommitStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoCreateStatusValidateBeforeCall(owner, repo, sha, createStatusOption, _callback);
        Type localVarReturnType = new TypeToken<CommitStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoCreateTag
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createTagOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIConflict is a conflict empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateTagCall(String owner, String repo, CreateTagOption createTagOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTagOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/tags"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoCreateTagValidateBeforeCall(String owner, String repo, CreateTagOption createTagOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoCreateTag(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoCreateTag(Async)");
        }

        return repoCreateTagCall(owner, repo, createTagOption, _callback);

    }

    /**
     * Create a new git tag in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createTagOption  (optional)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIConflict is a conflict empty response </td><td>  -  </td></tr>
     </table>
     */
    public Tag repoCreateTag(String owner, String repo, CreateTagOption createTagOption) throws ApiException {
        ApiResponse<Tag> localVarResp = repoCreateTagWithHttpInfo(owner, repo, createTagOption);
        return localVarResp.getData();
    }

    /**
     * Create a new git tag in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createTagOption  (optional)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIConflict is a conflict empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> repoCreateTagWithHttpInfo(String owner, String repo, CreateTagOption createTagOption) throws ApiException {
        okhttp3.Call localVarCall = repoCreateTagValidateBeforeCall(owner, repo, createTagOption, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new git tag in a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createTagOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIConflict is a conflict empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateTagAsync(String owner, String repo, CreateTagOption createTagOption, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoCreateTagValidateBeforeCall(owner, repo, createTagOption, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoCreateWikiPage
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createWikiPageOptions  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> WikiPage </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateWikiPageCall(String owner, String repo, CreateWikiPageOptions createWikiPageOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWikiPageOptions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/wiki/new"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoCreateWikiPageValidateBeforeCall(String owner, String repo, CreateWikiPageOptions createWikiPageOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoCreateWikiPage(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoCreateWikiPage(Async)");
        }

        return repoCreateWikiPageCall(owner, repo, createWikiPageOptions, _callback);

    }

    /**
     * Create a wiki page
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createWikiPageOptions  (optional)
     * @return WikiPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> WikiPage </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public WikiPage repoCreateWikiPage(String owner, String repo, CreateWikiPageOptions createWikiPageOptions) throws ApiException {
        ApiResponse<WikiPage> localVarResp = repoCreateWikiPageWithHttpInfo(owner, repo, createWikiPageOptions);
        return localVarResp.getData();
    }

    /**
     * Create a wiki page
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createWikiPageOptions  (optional)
     * @return ApiResponse&lt;WikiPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> WikiPage </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<WikiPage> repoCreateWikiPageWithHttpInfo(String owner, String repo, CreateWikiPageOptions createWikiPageOptions) throws ApiException {
        okhttp3.Call localVarCall = repoCreateWikiPageValidateBeforeCall(owner, repo, createWikiPageOptions, null);
        Type localVarReturnType = new TypeToken<WikiPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a wiki page (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createWikiPageOptions  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> WikiPage </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoCreateWikiPageAsync(String owner, String repo, CreateWikiPageOptions createWikiPageOptions, final ApiCallback<WikiPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoCreateWikiPageValidateBeforeCall(owner, repo, createWikiPageOptions, _callback);
        Type localVarReturnType = new TypeToken<WikiPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDelete
     * @param owner owner of the repo to delete (required)
     * @param repo name of the repo to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeleteValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDelete(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDelete(Async)");
        }

        return repoDeleteCall(owner, repo, _callback);

    }

    /**
     * Delete a repository
     * 
     * @param owner owner of the repo to delete (required)
     * @param repo name of the repo to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void repoDelete(String owner, String repo) throws ApiException {
        repoDeleteWithHttpInfo(owner, repo);
    }

    /**
     * Delete a repository
     * 
     * @param owner owner of the repo to delete (required)
     * @param repo name of the repo to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoDeleteWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = repoDeleteValidateBeforeCall(owner, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a repository (asynchronously)
     * 
     * @param owner owner of the repo to delete (required)
     * @param repo name of the repo to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteAsync(String owner, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeleteValidateBeforeCall(owner, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDeleteBranch
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param branch branch to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteBranchCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeleteBranchValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDeleteBranch(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDeleteBranch(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling repoDeleteBranch(Async)");
        }

        return repoDeleteBranchCall(owner, repo, branch, _callback);

    }

    /**
     * Delete a specific branch from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param branch branch to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void repoDeleteBranch(String owner, String repo, String branch) throws ApiException {
        repoDeleteBranchWithHttpInfo(owner, repo, branch);
    }

    /**
     * Delete a specific branch from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param branch branch to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoDeleteBranchWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = repoDeleteBranchValidateBeforeCall(owner, repo, branch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a specific branch from a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param branch branch to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteBranchAsync(String owner, String repo, String branch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeleteBranchValidateBeforeCall(owner, repo, branch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDeleteBranchProtection
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name name of protected branch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteBranchProtectionCall(String owner, String repo, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branch_protections/{name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeleteBranchProtectionValidateBeforeCall(String owner, String repo, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDeleteBranchProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDeleteBranchProtection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling repoDeleteBranchProtection(Async)");
        }

        return repoDeleteBranchProtectionCall(owner, repo, name, _callback);

    }

    /**
     * Delete a specific branch protection for the repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name name of protected branch (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void repoDeleteBranchProtection(String owner, String repo, String name) throws ApiException {
        repoDeleteBranchProtectionWithHttpInfo(owner, repo, name);
    }

    /**
     * Delete a specific branch protection for the repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name name of protected branch (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoDeleteBranchProtectionWithHttpInfo(String owner, String repo, String name) throws ApiException {
        okhttp3.Call localVarCall = repoDeleteBranchProtectionValidateBeforeCall(owner, repo, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a specific branch protection for the repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name name of protected branch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteBranchProtectionAsync(String owner, String repo, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeleteBranchProtectionValidateBeforeCall(owner, repo, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDeleteCollaborator
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param collaborator username of the collaborator to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteCollaboratorCall(String owner, String repo, String collaborator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/collaborators/{collaborator}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "collaborator" + "}", localVarApiClient.escapeString(collaborator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeleteCollaboratorValidateBeforeCall(String owner, String repo, String collaborator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDeleteCollaborator(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDeleteCollaborator(Async)");
        }

        // verify the required parameter 'collaborator' is set
        if (collaborator == null) {
            throw new ApiException("Missing the required parameter 'collaborator' when calling repoDeleteCollaborator(Async)");
        }

        return repoDeleteCollaboratorCall(owner, repo, collaborator, _callback);

    }

    /**
     * Delete a collaborator from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param collaborator username of the collaborator to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void repoDeleteCollaborator(String owner, String repo, String collaborator) throws ApiException {
        repoDeleteCollaboratorWithHttpInfo(owner, repo, collaborator);
    }

    /**
     * Delete a collaborator from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param collaborator username of the collaborator to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoDeleteCollaboratorWithHttpInfo(String owner, String repo, String collaborator) throws ApiException {
        okhttp3.Call localVarCall = repoDeleteCollaboratorValidateBeforeCall(owner, repo, collaborator, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a collaborator from a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param collaborator username of the collaborator to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteCollaboratorAsync(String owner, String repo, String collaborator, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeleteCollaboratorValidateBeforeCall(owner, repo, collaborator, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDeleteFile
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath path of the file to delete (required)
     * @param deleteFileOptions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FileDeleteResponse </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteFileCall(String owner, String repo, String filepath, DeleteFileOptions deleteFileOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteFileOptions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/contents/{filepath}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "filepath" + "}", localVarApiClient.escapeString(filepath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeleteFileValidateBeforeCall(String owner, String repo, String filepath, DeleteFileOptions deleteFileOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDeleteFile(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDeleteFile(Async)");
        }

        // verify the required parameter 'filepath' is set
        if (filepath == null) {
            throw new ApiException("Missing the required parameter 'filepath' when calling repoDeleteFile(Async)");
        }

        // verify the required parameter 'deleteFileOptions' is set
        if (deleteFileOptions == null) {
            throw new ApiException("Missing the required parameter 'deleteFileOptions' when calling repoDeleteFile(Async)");
        }

        return repoDeleteFileCall(owner, repo, filepath, deleteFileOptions, _callback);

    }

    /**
     * Delete a file in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath path of the file to delete (required)
     * @param deleteFileOptions  (required)
     * @return FileDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FileDeleteResponse </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public FileDeleteResponse repoDeleteFile(String owner, String repo, String filepath, DeleteFileOptions deleteFileOptions) throws ApiException {
        ApiResponse<FileDeleteResponse> localVarResp = repoDeleteFileWithHttpInfo(owner, repo, filepath, deleteFileOptions);
        return localVarResp.getData();
    }

    /**
     * Delete a file in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath path of the file to delete (required)
     * @param deleteFileOptions  (required)
     * @return ApiResponse&lt;FileDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FileDeleteResponse </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<FileDeleteResponse> repoDeleteFileWithHttpInfo(String owner, String repo, String filepath, DeleteFileOptions deleteFileOptions) throws ApiException {
        okhttp3.Call localVarCall = repoDeleteFileValidateBeforeCall(owner, repo, filepath, deleteFileOptions, null);
        Type localVarReturnType = new TypeToken<FileDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a file in a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath path of the file to delete (required)
     * @param deleteFileOptions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FileDeleteResponse </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteFileAsync(String owner, String repo, String filepath, DeleteFileOptions deleteFileOptions, final ApiCallback<FileDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeleteFileValidateBeforeCall(owner, repo, filepath, deleteFileOptions, _callback);
        Type localVarReturnType = new TypeToken<FileDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDeleteGitHook
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteGitHookCall(String owner, String repo, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/hooks/git/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeleteGitHookValidateBeforeCall(String owner, String repo, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDeleteGitHook(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDeleteGitHook(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoDeleteGitHook(Async)");
        }

        return repoDeleteGitHookCall(owner, repo, id, _callback);

    }

    /**
     * Delete a Git hook in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to get (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void repoDeleteGitHook(String owner, String repo, String id) throws ApiException {
        repoDeleteGitHookWithHttpInfo(owner, repo, id);
    }

    /**
     * Delete a Git hook in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to get (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoDeleteGitHookWithHttpInfo(String owner, String repo, String id) throws ApiException {
        okhttp3.Call localVarCall = repoDeleteGitHookValidateBeforeCall(owner, repo, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Git hook in a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteGitHookAsync(String owner, String repo, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeleteGitHookValidateBeforeCall(owner, repo, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDeleteHook
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteHookCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/hooks/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeleteHookValidateBeforeCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDeleteHook(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDeleteHook(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoDeleteHook(Async)");
        }

        return repoDeleteHookCall(owner, repo, id, _callback);

    }

    /**
     * Delete a hook in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void repoDeleteHook(String owner, String repo, Long id) throws ApiException {
        repoDeleteHookWithHttpInfo(owner, repo, id);
    }

    /**
     * Delete a hook in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoDeleteHookWithHttpInfo(String owner, String repo, Long id) throws ApiException {
        okhttp3.Call localVarCall = repoDeleteHookValidateBeforeCall(owner, repo, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a hook in a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteHookAsync(String owner, String repo, Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeleteHookValidateBeforeCall(owner, repo, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDeleteKey
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the key to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteKeyCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/keys/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeleteKeyValidateBeforeCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDeleteKey(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDeleteKey(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoDeleteKey(Async)");
        }

        return repoDeleteKeyCall(owner, repo, id, _callback);

    }

    /**
     * Delete a key from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the key to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void repoDeleteKey(String owner, String repo, Long id) throws ApiException {
        repoDeleteKeyWithHttpInfo(owner, repo, id);
    }

    /**
     * Delete a key from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the key to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoDeleteKeyWithHttpInfo(String owner, String repo, Long id) throws ApiException {
        okhttp3.Call localVarCall = repoDeleteKeyValidateBeforeCall(owner, repo, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a key from a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the key to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteKeyAsync(String owner, String repo, Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeleteKeyValidateBeforeCall(owner, repo, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDeletePullReview
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeletePullReviewCall(String owner, String repo, Long index, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeletePullReviewValidateBeforeCall(String owner, String repo, Long index, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDeletePullReview(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDeletePullReview(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoDeletePullReview(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoDeletePullReview(Async)");
        }

        return repoDeletePullReviewCall(owner, repo, index, id, _callback);

    }

    /**
     * Delete a specific review from a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void repoDeletePullReview(String owner, String repo, Long index, Long id) throws ApiException {
        repoDeletePullReviewWithHttpInfo(owner, repo, index, id);
    }

    /**
     * Delete a specific review from a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoDeletePullReviewWithHttpInfo(String owner, String repo, Long index, Long id) throws ApiException {
        okhttp3.Call localVarCall = repoDeletePullReviewValidateBeforeCall(owner, repo, index, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a specific review from a pull request (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeletePullReviewAsync(String owner, String repo, Long index, Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeletePullReviewValidateBeforeCall(owner, repo, index, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDeletePullReviewRequests
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param pullReviewRequestOptions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeletePullReviewRequestsCall(String owner, String repo, Long index, PullReviewRequestOptions pullReviewRequestOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pullReviewRequestOptions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}/requested_reviewers"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeletePullReviewRequestsValidateBeforeCall(String owner, String repo, Long index, PullReviewRequestOptions pullReviewRequestOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDeletePullReviewRequests(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDeletePullReviewRequests(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoDeletePullReviewRequests(Async)");
        }

        // verify the required parameter 'pullReviewRequestOptions' is set
        if (pullReviewRequestOptions == null) {
            throw new ApiException("Missing the required parameter 'pullReviewRequestOptions' when calling repoDeletePullReviewRequests(Async)");
        }

        return repoDeletePullReviewRequestsCall(owner, repo, index, pullReviewRequestOptions, _callback);

    }

    /**
     * cancel review requests for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param pullReviewRequestOptions  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void repoDeletePullReviewRequests(String owner, String repo, Long index, PullReviewRequestOptions pullReviewRequestOptions) throws ApiException {
        repoDeletePullReviewRequestsWithHttpInfo(owner, repo, index, pullReviewRequestOptions);
    }

    /**
     * cancel review requests for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param pullReviewRequestOptions  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoDeletePullReviewRequestsWithHttpInfo(String owner, String repo, Long index, PullReviewRequestOptions pullReviewRequestOptions) throws ApiException {
        okhttp3.Call localVarCall = repoDeletePullReviewRequestsValidateBeforeCall(owner, repo, index, pullReviewRequestOptions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * cancel review requests for a pull request (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param pullReviewRequestOptions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeletePullReviewRequestsAsync(String owner, String repo, Long index, PullReviewRequestOptions pullReviewRequestOptions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeletePullReviewRequestsValidateBeforeCall(owner, repo, index, pullReviewRequestOptions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDeletePushMirror
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name remote name of the pushMirror (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeletePushMirrorCall(String owner, String repo, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/push_mirrors/{name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeletePushMirrorValidateBeforeCall(String owner, String repo, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDeletePushMirror(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDeletePushMirror(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling repoDeletePushMirror(Async)");
        }

        return repoDeletePushMirrorCall(owner, repo, name, _callback);

    }

    /**
     * deletes a push mirror from a repository by remoteName
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name remote name of the pushMirror (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void repoDeletePushMirror(String owner, String repo, String name) throws ApiException {
        repoDeletePushMirrorWithHttpInfo(owner, repo, name);
    }

    /**
     * deletes a push mirror from a repository by remoteName
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name remote name of the pushMirror (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoDeletePushMirrorWithHttpInfo(String owner, String repo, String name) throws ApiException {
        okhttp3.Call localVarCall = repoDeletePushMirrorValidateBeforeCall(owner, repo, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deletes a push mirror from a repository by remoteName (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name remote name of the pushMirror (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeletePushMirrorAsync(String owner, String repo, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeletePushMirrorValidateBeforeCall(owner, repo, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDeleteRelease
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteReleaseCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeleteReleaseValidateBeforeCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDeleteRelease(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDeleteRelease(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoDeleteRelease(Async)");
        }

        return repoDeleteReleaseCall(owner, repo, id, _callback);

    }

    /**
     * Delete a release
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public void repoDeleteRelease(String owner, String repo, Long id) throws ApiException {
        repoDeleteReleaseWithHttpInfo(owner, repo, id);
    }

    /**
     * Delete a release
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoDeleteReleaseWithHttpInfo(String owner, String repo, Long id) throws ApiException {
        okhttp3.Call localVarCall = repoDeleteReleaseValidateBeforeCall(owner, repo, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a release (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteReleaseAsync(String owner, String repo, Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeleteReleaseValidateBeforeCall(owner, repo, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDeleteReleaseAttachment
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param attachmentId id of the attachment to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteReleaseAttachmentCall(String owner, String repo, Long id, Long attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeleteReleaseAttachmentValidateBeforeCall(String owner, String repo, Long id, Long attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDeleteReleaseAttachment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDeleteReleaseAttachment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoDeleteReleaseAttachment(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling repoDeleteReleaseAttachment(Async)");
        }

        return repoDeleteReleaseAttachmentCall(owner, repo, id, attachmentId, _callback);

    }

    /**
     * Delete a release attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param attachmentId id of the attachment to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public void repoDeleteReleaseAttachment(String owner, String repo, Long id, Long attachmentId) throws ApiException {
        repoDeleteReleaseAttachmentWithHttpInfo(owner, repo, id, attachmentId);
    }

    /**
     * Delete a release attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param attachmentId id of the attachment to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoDeleteReleaseAttachmentWithHttpInfo(String owner, String repo, Long id, Long attachmentId) throws ApiException {
        okhttp3.Call localVarCall = repoDeleteReleaseAttachmentValidateBeforeCall(owner, repo, id, attachmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a release attachment (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param attachmentId id of the attachment to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteReleaseAttachmentAsync(String owner, String repo, Long id, Long attachmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeleteReleaseAttachmentValidateBeforeCall(owner, repo, id, attachmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDeleteReleaseByTag
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param tag tag name of the release to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteReleaseByTagCall(String owner, String repo, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/tags/{tag}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeleteReleaseByTagValidateBeforeCall(String owner, String repo, String tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDeleteReleaseByTag(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDeleteReleaseByTag(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling repoDeleteReleaseByTag(Async)");
        }

        return repoDeleteReleaseByTagCall(owner, repo, tag, _callback);

    }

    /**
     * Delete a release by tag name
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param tag tag name of the release to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public void repoDeleteReleaseByTag(String owner, String repo, String tag) throws ApiException {
        repoDeleteReleaseByTagWithHttpInfo(owner, repo, tag);
    }

    /**
     * Delete a release by tag name
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param tag tag name of the release to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoDeleteReleaseByTagWithHttpInfo(String owner, String repo, String tag) throws ApiException {
        okhttp3.Call localVarCall = repoDeleteReleaseByTagValidateBeforeCall(owner, repo, tag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a release by tag name (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param tag tag name of the release to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteReleaseByTagAsync(String owner, String repo, String tag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeleteReleaseByTagValidateBeforeCall(owner, repo, tag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDeleteTag
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param tag name of tag to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIConflict is a conflict empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteTagCall(String owner, String repo, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/tags/{tag}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeleteTagValidateBeforeCall(String owner, String repo, String tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDeleteTag(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDeleteTag(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling repoDeleteTag(Async)");
        }

        return repoDeleteTagCall(owner, repo, tag, _callback);

    }

    /**
     * Delete a repository&#39;s tag by name
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param tag name of tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIConflict is a conflict empty response </td><td>  -  </td></tr>
     </table>
     */
    public void repoDeleteTag(String owner, String repo, String tag) throws ApiException {
        repoDeleteTagWithHttpInfo(owner, repo, tag);
    }

    /**
     * Delete a repository&#39;s tag by name
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param tag name of tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIConflict is a conflict empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoDeleteTagWithHttpInfo(String owner, String repo, String tag) throws ApiException {
        okhttp3.Call localVarCall = repoDeleteTagValidateBeforeCall(owner, repo, tag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a repository&#39;s tag by name (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param tag name of tag to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIConflict is a conflict empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteTagAsync(String owner, String repo, String tag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeleteTagValidateBeforeCall(owner, repo, tag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDeleteTeam
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param team team name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteTeamCall(String owner, String repo, String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/teams/{team}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeleteTeamValidateBeforeCall(String owner, String repo, String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDeleteTeam(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDeleteTeam(Async)");
        }

        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling repoDeleteTeam(Async)");
        }

        return repoDeleteTeamCall(owner, repo, team, _callback);

    }

    /**
     * Delete a team from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param team team name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void repoDeleteTeam(String owner, String repo, String team) throws ApiException {
        repoDeleteTeamWithHttpInfo(owner, repo, team);
    }

    /**
     * Delete a team from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param team team name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoDeleteTeamWithHttpInfo(String owner, String repo, String team) throws ApiException {
        okhttp3.Call localVarCall = repoDeleteTeamValidateBeforeCall(owner, repo, team, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a team from a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param team team name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteTeamAsync(String owner, String repo, String team, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeleteTeamValidateBeforeCall(owner, repo, team, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDeleteTopic
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param topic name of the topic to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIInvalidTopicsError is error format response to invalid topics </td><td>  * invalidTopics -  <br>  * message -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteTopicCall(String owner, String repo, String topic, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/topics/{topic}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "topic" + "}", localVarApiClient.escapeString(topic.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeleteTopicValidateBeforeCall(String owner, String repo, String topic, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDeleteTopic(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDeleteTopic(Async)");
        }

        // verify the required parameter 'topic' is set
        if (topic == null) {
            throw new ApiException("Missing the required parameter 'topic' when calling repoDeleteTopic(Async)");
        }

        return repoDeleteTopicCall(owner, repo, topic, _callback);

    }

    /**
     * Delete a topic from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param topic name of the topic to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIInvalidTopicsError is error format response to invalid topics </td><td>  * invalidTopics -  <br>  * message -  <br>  </td></tr>
     </table>
     */
    public void repoDeleteTopic(String owner, String repo, String topic) throws ApiException {
        repoDeleteTopicWithHttpInfo(owner, repo, topic);
    }

    /**
     * Delete a topic from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param topic name of the topic to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIInvalidTopicsError is error format response to invalid topics </td><td>  * invalidTopics -  <br>  * message -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoDeleteTopicWithHttpInfo(String owner, String repo, String topic) throws ApiException {
        okhttp3.Call localVarCall = repoDeleteTopicValidateBeforeCall(owner, repo, topic, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a topic from a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param topic name of the topic to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIInvalidTopicsError is error format response to invalid topics </td><td>  * invalidTopics -  <br>  * message -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteTopicAsync(String owner, String repo, String topic, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeleteTopicValidateBeforeCall(owner, repo, topic, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDeleteWikiPage
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param pageName name of the page (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteWikiPageCall(String owner, String repo, String pageName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/wiki/page/{pageName}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pageName" + "}", localVarApiClient.escapeString(pageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDeleteWikiPageValidateBeforeCall(String owner, String repo, String pageName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDeleteWikiPage(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDeleteWikiPage(Async)");
        }

        // verify the required parameter 'pageName' is set
        if (pageName == null) {
            throw new ApiException("Missing the required parameter 'pageName' when calling repoDeleteWikiPage(Async)");
        }

        return repoDeleteWikiPageCall(owner, repo, pageName, _callback);

    }

    /**
     * Delete a wiki page
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param pageName name of the page (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void repoDeleteWikiPage(String owner, String repo, String pageName) throws ApiException {
        repoDeleteWikiPageWithHttpInfo(owner, repo, pageName);
    }

    /**
     * Delete a wiki page
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param pageName name of the page (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoDeleteWikiPageWithHttpInfo(String owner, String repo, String pageName) throws ApiException {
        okhttp3.Call localVarCall = repoDeleteWikiPageValidateBeforeCall(owner, repo, pageName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a wiki page (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param pageName name of the page (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDeleteWikiPageAsync(String owner, String repo, String pageName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDeleteWikiPageValidateBeforeCall(owner, repo, pageName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDismissPullReview
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @param dismissPullReviewOptions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoDismissPullReviewCall(String owner, String repo, Long index, Long id, DismissPullReviewOptions dismissPullReviewOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dismissPullReviewOptions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/dismissals"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDismissPullReviewValidateBeforeCall(String owner, String repo, Long index, Long id, DismissPullReviewOptions dismissPullReviewOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDismissPullReview(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDismissPullReview(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoDismissPullReview(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoDismissPullReview(Async)");
        }

        // verify the required parameter 'dismissPullReviewOptions' is set
        if (dismissPullReviewOptions == null) {
            throw new ApiException("Missing the required parameter 'dismissPullReviewOptions' when calling repoDismissPullReview(Async)");
        }

        return repoDismissPullReviewCall(owner, repo, index, id, dismissPullReviewOptions, _callback);

    }

    /**
     * Dismiss a review for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @param dismissPullReviewOptions  (required)
     * @return PullReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public PullReview repoDismissPullReview(String owner, String repo, Long index, Long id, DismissPullReviewOptions dismissPullReviewOptions) throws ApiException {
        ApiResponse<PullReview> localVarResp = repoDismissPullReviewWithHttpInfo(owner, repo, index, id, dismissPullReviewOptions);
        return localVarResp.getData();
    }

    /**
     * Dismiss a review for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @param dismissPullReviewOptions  (required)
     * @return ApiResponse&lt;PullReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<PullReview> repoDismissPullReviewWithHttpInfo(String owner, String repo, Long index, Long id, DismissPullReviewOptions dismissPullReviewOptions) throws ApiException {
        okhttp3.Call localVarCall = repoDismissPullReviewValidateBeforeCall(owner, repo, index, id, dismissPullReviewOptions, null);
        Type localVarReturnType = new TypeToken<PullReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Dismiss a review for a pull request (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @param dismissPullReviewOptions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoDismissPullReviewAsync(String owner, String repo, Long index, Long id, DismissPullReviewOptions dismissPullReviewOptions, final ApiCallback<PullReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDismissPullReviewValidateBeforeCall(owner, repo, index, id, dismissPullReviewOptions, _callback);
        Type localVarReturnType = new TypeToken<PullReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDownloadCommitDiffOrPatch
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha SHA of the commit to get (required)
     * @param diffType whether the output is diff or patch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIString is a string response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDownloadCommitDiffOrPatchCall(String owner, String repo, String sha, String diffType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/git/commits/{sha}.{diffType}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()))
            .replace("{" + "diffType" + "}", localVarApiClient.escapeString(diffType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDownloadCommitDiffOrPatchValidateBeforeCall(String owner, String repo, String sha, String diffType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDownloadCommitDiffOrPatch(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDownloadCommitDiffOrPatch(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling repoDownloadCommitDiffOrPatch(Async)");
        }

        // verify the required parameter 'diffType' is set
        if (diffType == null) {
            throw new ApiException("Missing the required parameter 'diffType' when calling repoDownloadCommitDiffOrPatch(Async)");
        }

        return repoDownloadCommitDiffOrPatchCall(owner, repo, sha, diffType, _callback);

    }

    /**
     * Get a commit&#39;s diff or patch
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha SHA of the commit to get (required)
     * @param diffType whether the output is diff or patch (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIString is a string response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public String repoDownloadCommitDiffOrPatch(String owner, String repo, String sha, String diffType) throws ApiException {
        ApiResponse<String> localVarResp = repoDownloadCommitDiffOrPatchWithHttpInfo(owner, repo, sha, diffType);
        return localVarResp.getData();
    }

    /**
     * Get a commit&#39;s diff or patch
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha SHA of the commit to get (required)
     * @param diffType whether the output is diff or patch (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIString is a string response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> repoDownloadCommitDiffOrPatchWithHttpInfo(String owner, String repo, String sha, String diffType) throws ApiException {
        okhttp3.Call localVarCall = repoDownloadCommitDiffOrPatchValidateBeforeCall(owner, repo, sha, diffType, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a commit&#39;s diff or patch (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha SHA of the commit to get (required)
     * @param diffType whether the output is diff or patch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIString is a string response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDownloadCommitDiffOrPatchAsync(String owner, String repo, String sha, String diffType, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDownloadCommitDiffOrPatchValidateBeforeCall(owner, repo, sha, diffType, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoDownloadPullDiffOrPatch
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param diffType whether the output is diff or patch (required)
     * @param binary whether to include binary file changes. if true, the diff is applicable with &#x60;git apply&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIString is a string response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDownloadPullDiffOrPatchCall(String owner, String repo, Long index, String diffType, Boolean binary, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}.{diffType}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "diffType" + "}", localVarApiClient.escapeString(diffType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (binary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("binary", binary));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoDownloadPullDiffOrPatchValidateBeforeCall(String owner, String repo, Long index, String diffType, Boolean binary, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoDownloadPullDiffOrPatch(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoDownloadPullDiffOrPatch(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoDownloadPullDiffOrPatch(Async)");
        }

        // verify the required parameter 'diffType' is set
        if (diffType == null) {
            throw new ApiException("Missing the required parameter 'diffType' when calling repoDownloadPullDiffOrPatch(Async)");
        }

        return repoDownloadPullDiffOrPatchCall(owner, repo, index, diffType, binary, _callback);

    }

    /**
     * Get a pull request diff or patch
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param diffType whether the output is diff or patch (required)
     * @param binary whether to include binary file changes. if true, the diff is applicable with &#x60;git apply&#x60; (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIString is a string response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public String repoDownloadPullDiffOrPatch(String owner, String repo, Long index, String diffType, Boolean binary) throws ApiException {
        ApiResponse<String> localVarResp = repoDownloadPullDiffOrPatchWithHttpInfo(owner, repo, index, diffType, binary);
        return localVarResp.getData();
    }

    /**
     * Get a pull request diff or patch
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param diffType whether the output is diff or patch (required)
     * @param binary whether to include binary file changes. if true, the diff is applicable with &#x60;git apply&#x60; (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIString is a string response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> repoDownloadPullDiffOrPatchWithHttpInfo(String owner, String repo, Long index, String diffType, Boolean binary) throws ApiException {
        okhttp3.Call localVarCall = repoDownloadPullDiffOrPatchValidateBeforeCall(owner, repo, index, diffType, binary, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a pull request diff or patch (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param diffType whether the output is diff or patch (required)
     * @param binary whether to include binary file changes. if true, the diff is applicable with &#x60;git apply&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIString is a string response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoDownloadPullDiffOrPatchAsync(String owner, String repo, Long index, String diffType, Boolean binary, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoDownloadPullDiffOrPatchValidateBeforeCall(owner, repo, index, diffType, binary, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoEdit
     * @param owner owner of the repo to edit (required)
     * @param repo name of the repo to edit (required)
     * @param editRepoOption Properties of a repo that you can edit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoEditCall(String owner, String repo, EditRepoOption editRepoOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editRepoOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoEditValidateBeforeCall(String owner, String repo, EditRepoOption editRepoOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoEdit(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoEdit(Async)");
        }

        return repoEditCall(owner, repo, editRepoOption, _callback);

    }

    /**
     * Edit a repository&#39;s properties. Only fields that are set will be changed.
     * 
     * @param owner owner of the repo to edit (required)
     * @param repo name of the repo to edit (required)
     * @param editRepoOption Properties of a repo that you can edit (optional)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Repository repoEdit(String owner, String repo, EditRepoOption editRepoOption) throws ApiException {
        ApiResponse<Repository> localVarResp = repoEditWithHttpInfo(owner, repo, editRepoOption);
        return localVarResp.getData();
    }

    /**
     * Edit a repository&#39;s properties. Only fields that are set will be changed.
     * 
     * @param owner owner of the repo to edit (required)
     * @param repo name of the repo to edit (required)
     * @param editRepoOption Properties of a repo that you can edit (optional)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Repository> repoEditWithHttpInfo(String owner, String repo, EditRepoOption editRepoOption) throws ApiException {
        okhttp3.Call localVarCall = repoEditValidateBeforeCall(owner, repo, editRepoOption, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a repository&#39;s properties. Only fields that are set will be changed. (asynchronously)
     * 
     * @param owner owner of the repo to edit (required)
     * @param repo name of the repo to edit (required)
     * @param editRepoOption Properties of a repo that you can edit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoEditAsync(String owner, String repo, EditRepoOption editRepoOption, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoEditValidateBeforeCall(owner, repo, editRepoOption, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoEditBranchProtection
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name name of protected branch (required)
     * @param editBranchProtectionOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BranchProtection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoEditBranchProtectionCall(String owner, String repo, String name, EditBranchProtectionOption editBranchProtectionOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editBranchProtectionOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branch_protections/{name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoEditBranchProtectionValidateBeforeCall(String owner, String repo, String name, EditBranchProtectionOption editBranchProtectionOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoEditBranchProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoEditBranchProtection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling repoEditBranchProtection(Async)");
        }

        return repoEditBranchProtectionCall(owner, repo, name, editBranchProtectionOption, _callback);

    }

    /**
     * Edit a branch protections for a repository. Only fields that are set will be changed
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name name of protected branch (required)
     * @param editBranchProtectionOption  (optional)
     * @return BranchProtection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BranchProtection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public BranchProtection repoEditBranchProtection(String owner, String repo, String name, EditBranchProtectionOption editBranchProtectionOption) throws ApiException {
        ApiResponse<BranchProtection> localVarResp = repoEditBranchProtectionWithHttpInfo(owner, repo, name, editBranchProtectionOption);
        return localVarResp.getData();
    }

    /**
     * Edit a branch protections for a repository. Only fields that are set will be changed
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name name of protected branch (required)
     * @param editBranchProtectionOption  (optional)
     * @return ApiResponse&lt;BranchProtection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BranchProtection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<BranchProtection> repoEditBranchProtectionWithHttpInfo(String owner, String repo, String name, EditBranchProtectionOption editBranchProtectionOption) throws ApiException {
        okhttp3.Call localVarCall = repoEditBranchProtectionValidateBeforeCall(owner, repo, name, editBranchProtectionOption, null);
        Type localVarReturnType = new TypeToken<BranchProtection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a branch protections for a repository. Only fields that are set will be changed (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name name of protected branch (required)
     * @param editBranchProtectionOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BranchProtection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoEditBranchProtectionAsync(String owner, String repo, String name, EditBranchProtectionOption editBranchProtectionOption, final ApiCallback<BranchProtection> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoEditBranchProtectionValidateBeforeCall(owner, repo, name, editBranchProtectionOption, _callback);
        Type localVarReturnType = new TypeToken<BranchProtection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoEditGitHook
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to get (required)
     * @param editGitHookOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitHook </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoEditGitHookCall(String owner, String repo, String id, EditGitHookOption editGitHookOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editGitHookOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/hooks/git/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoEditGitHookValidateBeforeCall(String owner, String repo, String id, EditGitHookOption editGitHookOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoEditGitHook(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoEditGitHook(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoEditGitHook(Async)");
        }

        return repoEditGitHookCall(owner, repo, id, editGitHookOption, _callback);

    }

    /**
     * Edit a Git hook in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to get (required)
     * @param editGitHookOption  (optional)
     * @return GitHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitHook </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public GitHook repoEditGitHook(String owner, String repo, String id, EditGitHookOption editGitHookOption) throws ApiException {
        ApiResponse<GitHook> localVarResp = repoEditGitHookWithHttpInfo(owner, repo, id, editGitHookOption);
        return localVarResp.getData();
    }

    /**
     * Edit a Git hook in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to get (required)
     * @param editGitHookOption  (optional)
     * @return ApiResponse&lt;GitHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitHook </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GitHook> repoEditGitHookWithHttpInfo(String owner, String repo, String id, EditGitHookOption editGitHookOption) throws ApiException {
        okhttp3.Call localVarCall = repoEditGitHookValidateBeforeCall(owner, repo, id, editGitHookOption, null);
        Type localVarReturnType = new TypeToken<GitHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a Git hook in a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to get (required)
     * @param editGitHookOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitHook </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoEditGitHookAsync(String owner, String repo, String id, EditGitHookOption editGitHookOption, final ApiCallback<GitHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoEditGitHookValidateBeforeCall(owner, repo, id, editGitHookOption, _callback);
        Type localVarReturnType = new TypeToken<GitHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoEditHook
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id index of the hook (required)
     * @param editHookOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoEditHookCall(String owner, String repo, Long id, EditHookOption editHookOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editHookOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/hooks/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoEditHookValidateBeforeCall(String owner, String repo, Long id, EditHookOption editHookOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoEditHook(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoEditHook(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoEditHook(Async)");
        }

        return repoEditHookCall(owner, repo, id, editHookOption, _callback);

    }

    /**
     * Edit a hook in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id index of the hook (required)
     * @param editHookOption  (optional)
     * @return Hook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public Hook repoEditHook(String owner, String repo, Long id, EditHookOption editHookOption) throws ApiException {
        ApiResponse<Hook> localVarResp = repoEditHookWithHttpInfo(owner, repo, id, editHookOption);
        return localVarResp.getData();
    }

    /**
     * Edit a hook in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id index of the hook (required)
     * @param editHookOption  (optional)
     * @return ApiResponse&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hook> repoEditHookWithHttpInfo(String owner, String repo, Long id, EditHookOption editHookOption) throws ApiException {
        okhttp3.Call localVarCall = repoEditHookValidateBeforeCall(owner, repo, id, editHookOption, null);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a hook in a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id index of the hook (required)
     * @param editHookOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoEditHookAsync(String owner, String repo, Long id, EditHookOption editHookOption, final ApiCallback<Hook> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoEditHookValidateBeforeCall(owner, repo, id, editHookOption, _callback);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoEditPullRequest
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to edit (required)
     * @param editPullRequestOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PullRequest </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 412 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoEditPullRequestCall(String owner, String repo, Long index, EditPullRequestOption editPullRequestOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editPullRequestOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoEditPullRequestValidateBeforeCall(String owner, String repo, Long index, EditPullRequestOption editPullRequestOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoEditPullRequest(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoEditPullRequest(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoEditPullRequest(Async)");
        }

        return repoEditPullRequestCall(owner, repo, index, editPullRequestOption, _callback);

    }

    /**
     * Update a pull request. If using deadline only the date will be taken into account, and time of day ignored.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to edit (required)
     * @param editPullRequestOption  (optional)
     * @return PullRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PullRequest </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 412 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public PullRequest repoEditPullRequest(String owner, String repo, Long index, EditPullRequestOption editPullRequestOption) throws ApiException {
        ApiResponse<PullRequest> localVarResp = repoEditPullRequestWithHttpInfo(owner, repo, index, editPullRequestOption);
        return localVarResp.getData();
    }

    /**
     * Update a pull request. If using deadline only the date will be taken into account, and time of day ignored.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to edit (required)
     * @param editPullRequestOption  (optional)
     * @return ApiResponse&lt;PullRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PullRequest </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 412 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<PullRequest> repoEditPullRequestWithHttpInfo(String owner, String repo, Long index, EditPullRequestOption editPullRequestOption) throws ApiException {
        okhttp3.Call localVarCall = repoEditPullRequestValidateBeforeCall(owner, repo, index, editPullRequestOption, null);
        Type localVarReturnType = new TypeToken<PullRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a pull request. If using deadline only the date will be taken into account, and time of day ignored. (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to edit (required)
     * @param editPullRequestOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PullRequest </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 412 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoEditPullRequestAsync(String owner, String repo, Long index, EditPullRequestOption editPullRequestOption, final ApiCallback<PullRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoEditPullRequestValidateBeforeCall(owner, repo, index, editPullRequestOption, _callback);
        Type localVarReturnType = new TypeToken<PullRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoEditRelease
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release to edit (required)
     * @param editReleaseOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoEditReleaseCall(String owner, String repo, Long id, EditReleaseOption editReleaseOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editReleaseOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoEditReleaseValidateBeforeCall(String owner, String repo, Long id, EditReleaseOption editReleaseOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoEditRelease(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoEditRelease(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoEditRelease(Async)");
        }

        return repoEditReleaseCall(owner, repo, id, editReleaseOption, _callback);

    }

    /**
     * Update a release
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release to edit (required)
     * @param editReleaseOption  (optional)
     * @return Release
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public Release repoEditRelease(String owner, String repo, Long id, EditReleaseOption editReleaseOption) throws ApiException {
        ApiResponse<Release> localVarResp = repoEditReleaseWithHttpInfo(owner, repo, id, editReleaseOption);
        return localVarResp.getData();
    }

    /**
     * Update a release
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release to edit (required)
     * @param editReleaseOption  (optional)
     * @return ApiResponse&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Release> repoEditReleaseWithHttpInfo(String owner, String repo, Long id, EditReleaseOption editReleaseOption) throws ApiException {
        okhttp3.Call localVarCall = repoEditReleaseValidateBeforeCall(owner, repo, id, editReleaseOption, null);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a release (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release to edit (required)
     * @param editReleaseOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoEditReleaseAsync(String owner, String repo, Long id, EditReleaseOption editReleaseOption, final ApiCallback<Release> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoEditReleaseValidateBeforeCall(owner, repo, id, editReleaseOption, _callback);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoEditReleaseAttachment
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param attachmentId id of the attachment to edit (required)
     * @param editAttachmentOptions  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoEditReleaseAttachmentCall(String owner, String repo, Long id, Long attachmentId, EditAttachmentOptions editAttachmentOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editAttachmentOptions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoEditReleaseAttachmentValidateBeforeCall(String owner, String repo, Long id, Long attachmentId, EditAttachmentOptions editAttachmentOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoEditReleaseAttachment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoEditReleaseAttachment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoEditReleaseAttachment(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling repoEditReleaseAttachment(Async)");
        }

        return repoEditReleaseAttachmentCall(owner, repo, id, attachmentId, editAttachmentOptions, _callback);

    }

    /**
     * Edit a release attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param attachmentId id of the attachment to edit (required)
     * @param editAttachmentOptions  (optional)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
     </table>
     */
    public Attachment repoEditReleaseAttachment(String owner, String repo, Long id, Long attachmentId, EditAttachmentOptions editAttachmentOptions) throws ApiException {
        ApiResponse<Attachment> localVarResp = repoEditReleaseAttachmentWithHttpInfo(owner, repo, id, attachmentId, editAttachmentOptions);
        return localVarResp.getData();
    }

    /**
     * Edit a release attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param attachmentId id of the attachment to edit (required)
     * @param editAttachmentOptions  (optional)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachment> repoEditReleaseAttachmentWithHttpInfo(String owner, String repo, Long id, Long attachmentId, EditAttachmentOptions editAttachmentOptions) throws ApiException {
        okhttp3.Call localVarCall = repoEditReleaseAttachmentValidateBeforeCall(owner, repo, id, attachmentId, editAttachmentOptions, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a release attachment (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param attachmentId id of the attachment to edit (required)
     * @param editAttachmentOptions  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoEditReleaseAttachmentAsync(String owner, String repo, Long id, Long attachmentId, EditAttachmentOptions editAttachmentOptions, final ApiCallback<Attachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoEditReleaseAttachmentValidateBeforeCall(owner, repo, id, attachmentId, editAttachmentOptions, _callback);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoEditWikiPage
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param pageName name of the page (required)
     * @param createWikiPageOptions  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WikiPage </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoEditWikiPageCall(String owner, String repo, String pageName, CreateWikiPageOptions createWikiPageOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWikiPageOptions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/wiki/page/{pageName}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pageName" + "}", localVarApiClient.escapeString(pageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoEditWikiPageValidateBeforeCall(String owner, String repo, String pageName, CreateWikiPageOptions createWikiPageOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoEditWikiPage(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoEditWikiPage(Async)");
        }

        // verify the required parameter 'pageName' is set
        if (pageName == null) {
            throw new ApiException("Missing the required parameter 'pageName' when calling repoEditWikiPage(Async)");
        }

        return repoEditWikiPageCall(owner, repo, pageName, createWikiPageOptions, _callback);

    }

    /**
     * Edit a wiki page
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param pageName name of the page (required)
     * @param createWikiPageOptions  (optional)
     * @return WikiPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WikiPage </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public WikiPage repoEditWikiPage(String owner, String repo, String pageName, CreateWikiPageOptions createWikiPageOptions) throws ApiException {
        ApiResponse<WikiPage> localVarResp = repoEditWikiPageWithHttpInfo(owner, repo, pageName, createWikiPageOptions);
        return localVarResp.getData();
    }

    /**
     * Edit a wiki page
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param pageName name of the page (required)
     * @param createWikiPageOptions  (optional)
     * @return ApiResponse&lt;WikiPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WikiPage </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<WikiPage> repoEditWikiPageWithHttpInfo(String owner, String repo, String pageName, CreateWikiPageOptions createWikiPageOptions) throws ApiException {
        okhttp3.Call localVarCall = repoEditWikiPageValidateBeforeCall(owner, repo, pageName, createWikiPageOptions, null);
        Type localVarReturnType = new TypeToken<WikiPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a wiki page (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param pageName name of the page (required)
     * @param createWikiPageOptions  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WikiPage </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoEditWikiPageAsync(String owner, String repo, String pageName, CreateWikiPageOptions createWikiPageOptions, final ApiCallback<WikiPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoEditWikiPageValidateBeforeCall(owner, repo, pageName, createWikiPageOptions, _callback);
        Type localVarReturnType = new TypeToken<WikiPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGet
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGet(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGet(Async)");
        }

        return repoGetCall(owner, repo, _callback);

    }

    /**
     * Get a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
     </table>
     */
    public Repository repoGet(String owner, String repo) throws ApiException {
        ApiResponse<Repository> localVarResp = repoGetWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Repository> repoGetWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = repoGetValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetAsync(String owner, String repo, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetAllCommits
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha SHA or branch to start listing commits from (usually &#39;master&#39;) (optional)
     * @param path filepath of a file/dir (optional)
     * @param stat include diff stats for every commit (disable for speedup, default &#39;true&#39;) (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (ignored if used with &#39;path&#39;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommitList </td><td>  * X-HasMore - True if there is another page <br>  * X-Page - The current page <br>  * X-PageCount - Total number of pages <br>  * X-PerPage - Commits per page <br>  * X-Total - Total commit count <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> EmptyRepository </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetAllCommitsCall(String owner, String repo, String sha, String path, Boolean stat, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/commits"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sha != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sha", sha));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (stat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stat", stat));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetAllCommitsValidateBeforeCall(String owner, String repo, String sha, String path, Boolean stat, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetAllCommits(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetAllCommits(Async)");
        }

        return repoGetAllCommitsCall(owner, repo, sha, path, stat, page, limit, _callback);

    }

    /**
     * Get a list of all commits from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha SHA or branch to start listing commits from (usually &#39;master&#39;) (optional)
     * @param path filepath of a file/dir (optional)
     * @param stat include diff stats for every commit (disable for speedup, default &#39;true&#39;) (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (ignored if used with &#39;path&#39;) (optional)
     * @return List&lt;Commit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommitList </td><td>  * X-HasMore - True if there is another page <br>  * X-Page - The current page <br>  * X-PageCount - Total number of pages <br>  * X-PerPage - Commits per page <br>  * X-Total - Total commit count <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> EmptyRepository </td><td>  -  </td></tr>
     </table>
     */
    public List<Commit> repoGetAllCommits(String owner, String repo, String sha, String path, Boolean stat, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Commit>> localVarResp = repoGetAllCommitsWithHttpInfo(owner, repo, sha, path, stat, page, limit);
        return localVarResp.getData();
    }

    /**
     * Get a list of all commits from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha SHA or branch to start listing commits from (usually &#39;master&#39;) (optional)
     * @param path filepath of a file/dir (optional)
     * @param stat include diff stats for every commit (disable for speedup, default &#39;true&#39;) (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (ignored if used with &#39;path&#39;) (optional)
     * @return ApiResponse&lt;List&lt;Commit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommitList </td><td>  * X-HasMore - True if there is another page <br>  * X-Page - The current page <br>  * X-PageCount - Total number of pages <br>  * X-PerPage - Commits per page <br>  * X-Total - Total commit count <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> EmptyRepository </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Commit>> repoGetAllCommitsWithHttpInfo(String owner, String repo, String sha, String path, Boolean stat, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoGetAllCommitsValidateBeforeCall(owner, repo, sha, path, stat, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Commit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all commits from a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha SHA or branch to start listing commits from (usually &#39;master&#39;) (optional)
     * @param path filepath of a file/dir (optional)
     * @param stat include diff stats for every commit (disable for speedup, default &#39;true&#39;) (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (ignored if used with &#39;path&#39;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommitList </td><td>  * X-HasMore - True if there is another page <br>  * X-Page - The current page <br>  * X-PageCount - Total number of pages <br>  * X-PerPage - Commits per page <br>  * X-Total - Total commit count <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> EmptyRepository </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetAllCommitsAsync(String owner, String repo, String sha, String path, Boolean stat, Integer page, Integer limit, final ApiCallback<List<Commit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetAllCommitsValidateBeforeCall(owner, repo, sha, path, stat, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Commit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetArchive
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param archive the git reference for download with attached archive format (e.g. master.zip) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetArchiveCall(String owner, String repo, String archive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/archive/{archive}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "archive" + "}", localVarApiClient.escapeString(archive.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetArchiveValidateBeforeCall(String owner, String repo, String archive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetArchive(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetArchive(Async)");
        }

        // verify the required parameter 'archive' is set
        if (archive == null) {
            throw new ApiException("Missing the required parameter 'archive' when calling repoGetArchive(Async)");
        }

        return repoGetArchiveCall(owner, repo, archive, _callback);

    }

    /**
     * Get an archive of a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param archive the git reference for download with attached archive format (e.g. master.zip) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void repoGetArchive(String owner, String repo, String archive) throws ApiException {
        repoGetArchiveWithHttpInfo(owner, repo, archive);
    }

    /**
     * Get an archive of a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param archive the git reference for download with attached archive format (e.g. master.zip) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoGetArchiveWithHttpInfo(String owner, String repo, String archive) throws ApiException {
        okhttp3.Call localVarCall = repoGetArchiveValidateBeforeCall(owner, repo, archive, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get an archive of a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param archive the git reference for download with attached archive format (e.g. master.zip) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetArchiveAsync(String owner, String repo, String archive, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetArchiveValidateBeforeCall(owner, repo, archive, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetAssignees
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetAssigneesCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/assignees"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetAssigneesValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetAssignees(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetAssignees(Async)");
        }

        return repoGetAssigneesCall(owner, repo, _callback);

    }

    /**
     * Return all users that have write access and can be assigned to issues
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public List<User> repoGetAssignees(String owner, String repo) throws ApiException {
        ApiResponse<List<User>> localVarResp = repoGetAssigneesWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Return all users that have write access and can be assigned to issues
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> repoGetAssigneesWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = repoGetAssigneesValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return all users that have write access and can be assigned to issues (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetAssigneesAsync(String owner, String repo, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetAssigneesValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetBranch
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param branch branch to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Branch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetBranchCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetBranchValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetBranch(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetBranch(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling repoGetBranch(Async)");
        }

        return repoGetBranchCall(owner, repo, branch, _callback);

    }

    /**
     * Retrieve a specific branch from a repository, including its effective branch protection
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param branch branch to get (required)
     * @return Branch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Branch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public Branch repoGetBranch(String owner, String repo, String branch) throws ApiException {
        ApiResponse<Branch> localVarResp = repoGetBranchWithHttpInfo(owner, repo, branch);
        return localVarResp.getData();
    }

    /**
     * Retrieve a specific branch from a repository, including its effective branch protection
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param branch branch to get (required)
     * @return ApiResponse&lt;Branch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Branch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Branch> repoGetBranchWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = repoGetBranchValidateBeforeCall(owner, repo, branch, null);
        Type localVarReturnType = new TypeToken<Branch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a specific branch from a repository, including its effective branch protection (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param branch branch to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Branch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetBranchAsync(String owner, String repo, String branch, final ApiCallback<Branch> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetBranchValidateBeforeCall(owner, repo, branch, _callback);
        Type localVarReturnType = new TypeToken<Branch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetBranchProtection
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name name of protected branch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BranchProtection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetBranchProtectionCall(String owner, String repo, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branch_protections/{name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetBranchProtectionValidateBeforeCall(String owner, String repo, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetBranchProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetBranchProtection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling repoGetBranchProtection(Async)");
        }

        return repoGetBranchProtectionCall(owner, repo, name, _callback);

    }

    /**
     * Get a specific branch protection for the repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name name of protected branch (required)
     * @return BranchProtection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BranchProtection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public BranchProtection repoGetBranchProtection(String owner, String repo, String name) throws ApiException {
        ApiResponse<BranchProtection> localVarResp = repoGetBranchProtectionWithHttpInfo(owner, repo, name);
        return localVarResp.getData();
    }

    /**
     * Get a specific branch protection for the repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name name of protected branch (required)
     * @return ApiResponse&lt;BranchProtection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BranchProtection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BranchProtection> repoGetBranchProtectionWithHttpInfo(String owner, String repo, String name) throws ApiException {
        okhttp3.Call localVarCall = repoGetBranchProtectionValidateBeforeCall(owner, repo, name, null);
        Type localVarReturnType = new TypeToken<BranchProtection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific branch protection for the repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name name of protected branch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BranchProtection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetBranchProtectionAsync(String owner, String repo, String name, final ApiCallback<BranchProtection> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetBranchProtectionValidateBeforeCall(owner, repo, name, _callback);
        Type localVarReturnType = new TypeToken<BranchProtection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetByID
     * @param id id of the repo to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetByIDCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetByIDValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoGetByID(Async)");
        }

        return repoGetByIDCall(id, _callback);

    }

    /**
     * Get a repository by id
     * 
     * @param id id of the repo to get (required)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
     </table>
     */
    public Repository repoGetByID(Long id) throws ApiException {
        ApiResponse<Repository> localVarResp = repoGetByIDWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a repository by id
     * 
     * @param id id of the repo to get (required)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Repository> repoGetByIDWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = repoGetByIDValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a repository by id (asynchronously)
     * 
     * @param id id of the repo to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Repository </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetByIDAsync(Long id, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetByIDValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetCombinedStatusByRef
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param ref name of branch/tag/commit (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CombinedStatus </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetCombinedStatusByRefCall(String owner, String repo, String ref, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/commits/{ref}/status"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "ref" + "}", localVarApiClient.escapeString(ref.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetCombinedStatusByRefValidateBeforeCall(String owner, String repo, String ref, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetCombinedStatusByRef(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetCombinedStatusByRef(Async)");
        }

        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling repoGetCombinedStatusByRef(Async)");
        }

        return repoGetCombinedStatusByRefCall(owner, repo, ref, page, limit, _callback);

    }

    /**
     * Get a commit&#39;s combined status, by branch/tag/commit reference
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param ref name of branch/tag/commit (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return CombinedStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CombinedStatus </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public CombinedStatus repoGetCombinedStatusByRef(String owner, String repo, String ref, Integer page, Integer limit) throws ApiException {
        ApiResponse<CombinedStatus> localVarResp = repoGetCombinedStatusByRefWithHttpInfo(owner, repo, ref, page, limit);
        return localVarResp.getData();
    }

    /**
     * Get a commit&#39;s combined status, by branch/tag/commit reference
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param ref name of branch/tag/commit (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;CombinedStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CombinedStatus </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<CombinedStatus> repoGetCombinedStatusByRefWithHttpInfo(String owner, String repo, String ref, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoGetCombinedStatusByRefValidateBeforeCall(owner, repo, ref, page, limit, null);
        Type localVarReturnType = new TypeToken<CombinedStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a commit&#39;s combined status, by branch/tag/commit reference (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param ref name of branch/tag/commit (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CombinedStatus </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetCombinedStatusByRefAsync(String owner, String repo, String ref, Integer page, Integer limit, final ApiCallback<CombinedStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetCombinedStatusByRefValidateBeforeCall(owner, repo, ref, page, limit, _callback);
        Type localVarReturnType = new TypeToken<CombinedStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetContents
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath path of the dir, file, symlink or submodule in the repo (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ContentsResponse </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetContentsCall(String owner, String repo, String filepath, String ref, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/contents/{filepath}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "filepath" + "}", localVarApiClient.escapeString(filepath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetContentsValidateBeforeCall(String owner, String repo, String filepath, String ref, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetContents(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetContents(Async)");
        }

        // verify the required parameter 'filepath' is set
        if (filepath == null) {
            throw new ApiException("Missing the required parameter 'filepath' when calling repoGetContents(Async)");
        }

        return repoGetContentsCall(owner, repo, filepath, ref, _callback);

    }

    /**
     * Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath path of the dir, file, symlink or submodule in the repo (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @return ContentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ContentsResponse </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ContentsResponse repoGetContents(String owner, String repo, String filepath, String ref) throws ApiException {
        ApiResponse<ContentsResponse> localVarResp = repoGetContentsWithHttpInfo(owner, repo, filepath, ref);
        return localVarResp.getData();
    }

    /**
     * Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath path of the dir, file, symlink or submodule in the repo (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @return ApiResponse&lt;ContentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ContentsResponse </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentsResponse> repoGetContentsWithHttpInfo(String owner, String repo, String filepath, String ref) throws ApiException {
        okhttp3.Call localVarCall = repoGetContentsValidateBeforeCall(owner, repo, filepath, ref, null);
        Type localVarReturnType = new TypeToken<ContentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath path of the dir, file, symlink or submodule in the repo (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ContentsResponse </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetContentsAsync(String owner, String repo, String filepath, String ref, final ApiCallback<ContentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetContentsValidateBeforeCall(owner, repo, filepath, ref, _callback);
        Type localVarReturnType = new TypeToken<ContentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetContentsList
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ContentsListResponse </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetContentsListCall(String owner, String repo, String ref, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/contents"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetContentsListValidateBeforeCall(String owner, String repo, String ref, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetContentsList(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetContentsList(Async)");
        }

        return repoGetContentsListCall(owner, repo, ref, _callback);

    }

    /**
     * Gets the metadata of all the entries of the root dir
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @return List&lt;ContentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ContentsListResponse </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public List<ContentsResponse> repoGetContentsList(String owner, String repo, String ref) throws ApiException {
        ApiResponse<List<ContentsResponse>> localVarResp = repoGetContentsListWithHttpInfo(owner, repo, ref);
        return localVarResp.getData();
    }

    /**
     * Gets the metadata of all the entries of the root dir
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @return ApiResponse&lt;List&lt;ContentsResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ContentsListResponse </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContentsResponse>> repoGetContentsListWithHttpInfo(String owner, String repo, String ref) throws ApiException {
        okhttp3.Call localVarCall = repoGetContentsListValidateBeforeCall(owner, repo, ref, null);
        Type localVarReturnType = new TypeToken<List<ContentsResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the metadata of all the entries of the root dir (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ContentsListResponse </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetContentsListAsync(String owner, String repo, String ref, final ApiCallback<List<ContentsResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetContentsListValidateBeforeCall(owner, repo, ref, _callback);
        Type localVarReturnType = new TypeToken<List<ContentsResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetEditorConfig
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath filepath of file to get (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetEditorConfigCall(String owner, String repo, String filepath, String ref, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/editorconfig/{filepath}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "filepath" + "}", localVarApiClient.escapeString(filepath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetEditorConfigValidateBeforeCall(String owner, String repo, String filepath, String ref, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetEditorConfig(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetEditorConfig(Async)");
        }

        // verify the required parameter 'filepath' is set
        if (filepath == null) {
            throw new ApiException("Missing the required parameter 'filepath' when calling repoGetEditorConfig(Async)");
        }

        return repoGetEditorConfigCall(owner, repo, filepath, ref, _callback);

    }

    /**
     * Get the EditorConfig definitions of a file in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath filepath of file to get (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void repoGetEditorConfig(String owner, String repo, String filepath, String ref) throws ApiException {
        repoGetEditorConfigWithHttpInfo(owner, repo, filepath, ref);
    }

    /**
     * Get the EditorConfig definitions of a file in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath filepath of file to get (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoGetEditorConfigWithHttpInfo(String owner, String repo, String filepath, String ref) throws ApiException {
        okhttp3.Call localVarCall = repoGetEditorConfigValidateBeforeCall(owner, repo, filepath, ref, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the EditorConfig definitions of a file in a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath filepath of file to get (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetEditorConfigAsync(String owner, String repo, String filepath, String ref, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetEditorConfigValidateBeforeCall(owner, repo, filepath, ref, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetGitHook
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitHook </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetGitHookCall(String owner, String repo, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/hooks/git/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetGitHookValidateBeforeCall(String owner, String repo, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetGitHook(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetGitHook(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoGetGitHook(Async)");
        }

        return repoGetGitHookCall(owner, repo, id, _callback);

    }

    /**
     * Get a Git hook
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to get (required)
     * @return GitHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitHook </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public GitHook repoGetGitHook(String owner, String repo, String id) throws ApiException {
        ApiResponse<GitHook> localVarResp = repoGetGitHookWithHttpInfo(owner, repo, id);
        return localVarResp.getData();
    }

    /**
     * Get a Git hook
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to get (required)
     * @return ApiResponse&lt;GitHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitHook </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GitHook> repoGetGitHookWithHttpInfo(String owner, String repo, String id) throws ApiException {
        okhttp3.Call localVarCall = repoGetGitHookValidateBeforeCall(owner, repo, id, null);
        Type localVarReturnType = new TypeToken<GitHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Git hook (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitHook </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetGitHookAsync(String owner, String repo, String id, final ApiCallback<GitHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetGitHookValidateBeforeCall(owner, repo, id, _callback);
        Type localVarReturnType = new TypeToken<GitHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetHook
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetHookCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/hooks/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetHookValidateBeforeCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetHook(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetHook(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoGetHook(Async)");
        }

        return repoGetHookCall(owner, repo, id, _callback);

    }

    /**
     * Get a hook
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to get (required)
     * @return Hook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public Hook repoGetHook(String owner, String repo, Long id) throws ApiException {
        ApiResponse<Hook> localVarResp = repoGetHookWithHttpInfo(owner, repo, id);
        return localVarResp.getData();
    }

    /**
     * Get a hook
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to get (required)
     * @return ApiResponse&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hook> repoGetHookWithHttpInfo(String owner, String repo, Long id) throws ApiException {
        okhttp3.Call localVarCall = repoGetHookValidateBeforeCall(owner, repo, id, null);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a hook (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetHookAsync(String owner, String repo, Long id, final ApiCallback<Hook> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetHookValidateBeforeCall(owner, repo, id, _callback);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetIssueConfig
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepoIssueConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetIssueConfigCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issue_config"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetIssueConfigValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetIssueConfig(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetIssueConfig(Async)");
        }

        return repoGetIssueConfigCall(owner, repo, _callback);

    }

    /**
     * Returns the issue config for a repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return IssueConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepoIssueConfig </td><td>  -  </td></tr>
     </table>
     */
    public IssueConfig repoGetIssueConfig(String owner, String repo) throws ApiException {
        ApiResponse<IssueConfig> localVarResp = repoGetIssueConfigWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Returns the issue config for a repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return ApiResponse&lt;IssueConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepoIssueConfig </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IssueConfig> repoGetIssueConfigWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = repoGetIssueConfigValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<IssueConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the issue config for a repo (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepoIssueConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetIssueConfigAsync(String owner, String repo, final ApiCallback<IssueConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetIssueConfigValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<IssueConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetIssueTemplates
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueTemplates </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetIssueTemplatesCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issue_templates"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetIssueTemplatesValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetIssueTemplates(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetIssueTemplates(Async)");
        }

        return repoGetIssueTemplatesCall(owner, repo, _callback);

    }

    /**
     * Get available issue templates for a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return List&lt;IssueTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueTemplates </td><td>  -  </td></tr>
     </table>
     */
    public List<IssueTemplate> repoGetIssueTemplates(String owner, String repo) throws ApiException {
        ApiResponse<List<IssueTemplate>> localVarResp = repoGetIssueTemplatesWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get available issue templates for a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return ApiResponse&lt;List&lt;IssueTemplate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueTemplates </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IssueTemplate>> repoGetIssueTemplatesWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = repoGetIssueTemplatesValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<List<IssueTemplate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get available issue templates for a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueTemplates </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetIssueTemplatesAsync(String owner, String repo, final ApiCallback<List<IssueTemplate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetIssueTemplatesValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<List<IssueTemplate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetKey
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the key to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DeployKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetKeyCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/keys/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetKeyValidateBeforeCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetKey(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetKey(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoGetKey(Async)");
        }

        return repoGetKeyCall(owner, repo, id, _callback);

    }

    /**
     * Get a repository&#39;s key by id
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the key to get (required)
     * @return DeployKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DeployKey </td><td>  -  </td></tr>
     </table>
     */
    public DeployKey repoGetKey(String owner, String repo, Long id) throws ApiException {
        ApiResponse<DeployKey> localVarResp = repoGetKeyWithHttpInfo(owner, repo, id);
        return localVarResp.getData();
    }

    /**
     * Get a repository&#39;s key by id
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the key to get (required)
     * @return ApiResponse&lt;DeployKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DeployKey </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeployKey> repoGetKeyWithHttpInfo(String owner, String repo, Long id) throws ApiException {
        okhttp3.Call localVarCall = repoGetKeyValidateBeforeCall(owner, repo, id, null);
        Type localVarReturnType = new TypeToken<DeployKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a repository&#39;s key by id (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the key to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DeployKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetKeyAsync(String owner, String repo, Long id, final ApiCallback<DeployKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetKeyValidateBeforeCall(owner, repo, id, _callback);
        Type localVarReturnType = new TypeToken<DeployKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetLanguages
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LanguageStatistics </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetLanguagesCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/languages"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetLanguagesValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetLanguages(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetLanguages(Async)");
        }

        return repoGetLanguagesCall(owner, repo, _callback);

    }

    /**
     * Get languages and number of bytes of code written
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return Map&lt;String, Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LanguageStatistics </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Long> repoGetLanguages(String owner, String repo) throws ApiException {
        ApiResponse<Map<String, Long>> localVarResp = repoGetLanguagesWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get languages and number of bytes of code written
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return ApiResponse&lt;Map&lt;String, Long&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LanguageStatistics </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Long>> repoGetLanguagesWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = repoGetLanguagesValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<Map<String, Long>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get languages and number of bytes of code written (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LanguageStatistics </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetLanguagesAsync(String owner, String repo, final ApiCallback<Map<String, Long>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetLanguagesValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Long>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetLatestRelease
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetLatestReleaseCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/latest"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetLatestReleaseValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetLatestRelease(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetLatestRelease(Async)");
        }

        return repoGetLatestReleaseCall(owner, repo, _callback);

    }

    /**
     * Gets the most recent non-prerelease, non-draft release of a repository, sorted by created_at
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return Release
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public Release repoGetLatestRelease(String owner, String repo) throws ApiException {
        ApiResponse<Release> localVarResp = repoGetLatestReleaseWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Gets the most recent non-prerelease, non-draft release of a repository, sorted by created_at
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return ApiResponse&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Release> repoGetLatestReleaseWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = repoGetLatestReleaseValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the most recent non-prerelease, non-draft release of a repository, sorted by created_at (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetLatestReleaseAsync(String owner, String repo, final ApiCallback<Release> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetLatestReleaseValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetNote
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha a git ref or commit sha (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Note </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetNoteCall(String owner, String repo, String sha, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/git/notes/{sha}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetNoteValidateBeforeCall(String owner, String repo, String sha, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetNote(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetNote(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling repoGetNote(Async)");
        }

        return repoGetNoteCall(owner, repo, sha, _callback);

    }

    /**
     * Get a note corresponding to a single commit from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha a git ref or commit sha (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Note </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Note repoGetNote(String owner, String repo, String sha) throws ApiException {
        ApiResponse<Note> localVarResp = repoGetNoteWithHttpInfo(owner, repo, sha);
        return localVarResp.getData();
    }

    /**
     * Get a note corresponding to a single commit from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha a git ref or commit sha (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Note </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Note> repoGetNoteWithHttpInfo(String owner, String repo, String sha) throws ApiException {
        okhttp3.Call localVarCall = repoGetNoteValidateBeforeCall(owner, repo, sha, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a note corresponding to a single commit from a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha a git ref or commit sha (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Note </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetNoteAsync(String owner, String repo, String sha, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetNoteValidateBeforeCall(owner, repo, sha, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetPullRequest
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullRequest </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetPullRequestCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetPullRequestValidateBeforeCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetPullRequest(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetPullRequest(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoGetPullRequest(Async)");
        }

        return repoGetPullRequestCall(owner, repo, index, _callback);

    }

    /**
     * Get a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @return PullRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullRequest </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public PullRequest repoGetPullRequest(String owner, String repo, Long index) throws ApiException {
        ApiResponse<PullRequest> localVarResp = repoGetPullRequestWithHttpInfo(owner, repo, index);
        return localVarResp.getData();
    }

    /**
     * Get a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @return ApiResponse&lt;PullRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullRequest </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PullRequest> repoGetPullRequestWithHttpInfo(String owner, String repo, Long index) throws ApiException {
        okhttp3.Call localVarCall = repoGetPullRequestValidateBeforeCall(owner, repo, index, null);
        Type localVarReturnType = new TypeToken<PullRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a pull request (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullRequest </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetPullRequestAsync(String owner, String repo, Long index, final ApiCallback<PullRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetPullRequestValidateBeforeCall(owner, repo, index, _callback);
        Type localVarReturnType = new TypeToken<PullRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetPullRequestCommits
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommitList </td><td>  * X-HasMore - True if there is another page <br>  * X-Page - The current page <br>  * X-PageCount - Total number of pages <br>  * X-PerPage - Commits per page <br>  * X-Total - Total commit count <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetPullRequestCommitsCall(String owner, String repo, Long index, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}/commits"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetPullRequestCommitsValidateBeforeCall(String owner, String repo, Long index, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetPullRequestCommits(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetPullRequestCommits(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoGetPullRequestCommits(Async)");
        }

        return repoGetPullRequestCommitsCall(owner, repo, index, page, limit, _callback);

    }

    /**
     * Get commits for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Commit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommitList </td><td>  * X-HasMore - True if there is another page <br>  * X-Page - The current page <br>  * X-PageCount - Total number of pages <br>  * X-PerPage - Commits per page <br>  * X-Total - Total commit count <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public List<Commit> repoGetPullRequestCommits(String owner, String repo, Long index, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Commit>> localVarResp = repoGetPullRequestCommitsWithHttpInfo(owner, repo, index, page, limit);
        return localVarResp.getData();
    }

    /**
     * Get commits for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Commit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommitList </td><td>  * X-HasMore - True if there is another page <br>  * X-Page - The current page <br>  * X-PageCount - Total number of pages <br>  * X-PerPage - Commits per page <br>  * X-Total - Total commit count <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Commit>> repoGetPullRequestCommitsWithHttpInfo(String owner, String repo, Long index, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoGetPullRequestCommitsValidateBeforeCall(owner, repo, index, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Commit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get commits for a pull request (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommitList </td><td>  * X-HasMore - True if there is another page <br>  * X-Page - The current page <br>  * X-PageCount - Total number of pages <br>  * X-PerPage - Commits per page <br>  * X-Total - Total commit count <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetPullRequestCommitsAsync(String owner, String repo, Long index, Integer page, Integer limit, final ApiCallback<List<Commit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetPullRequestCommitsValidateBeforeCall(owner, repo, index, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Commit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetPullRequestFiles
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param skipTo skip to given file (optional)
     * @param whitespace whitespace behavior (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ChangedFileList </td><td>  * X-HasMore - True if there is another page <br>  * X-Page - The current page <br>  * X-PageCount - Total number of pages <br>  * X-PerPage - Commits per page <br>  * X-Total - Total commit count <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetPullRequestFilesCall(String owner, String repo, Long index, String skipTo, String whitespace, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}/files"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skipTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip-to", skipTo));
        }

        if (whitespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("whitespace", whitespace));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetPullRequestFilesValidateBeforeCall(String owner, String repo, Long index, String skipTo, String whitespace, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetPullRequestFiles(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetPullRequestFiles(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoGetPullRequestFiles(Async)");
        }

        return repoGetPullRequestFilesCall(owner, repo, index, skipTo, whitespace, page, limit, _callback);

    }

    /**
     * Get changed files for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param skipTo skip to given file (optional)
     * @param whitespace whitespace behavior (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;ChangedFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ChangedFileList </td><td>  * X-HasMore - True if there is another page <br>  * X-Page - The current page <br>  * X-PageCount - Total number of pages <br>  * X-PerPage - Commits per page <br>  * X-Total - Total commit count <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public List<ChangedFile> repoGetPullRequestFiles(String owner, String repo, Long index, String skipTo, String whitespace, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<ChangedFile>> localVarResp = repoGetPullRequestFilesWithHttpInfo(owner, repo, index, skipTo, whitespace, page, limit);
        return localVarResp.getData();
    }

    /**
     * Get changed files for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param skipTo skip to given file (optional)
     * @param whitespace whitespace behavior (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;ChangedFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ChangedFileList </td><td>  * X-HasMore - True if there is another page <br>  * X-Page - The current page <br>  * X-PageCount - Total number of pages <br>  * X-PerPage - Commits per page <br>  * X-Total - Total commit count <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ChangedFile>> repoGetPullRequestFilesWithHttpInfo(String owner, String repo, Long index, String skipTo, String whitespace, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoGetPullRequestFilesValidateBeforeCall(owner, repo, index, skipTo, whitespace, page, limit, null);
        Type localVarReturnType = new TypeToken<List<ChangedFile>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get changed files for a pull request (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param skipTo skip to given file (optional)
     * @param whitespace whitespace behavior (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ChangedFileList </td><td>  * X-HasMore - True if there is another page <br>  * X-Page - The current page <br>  * X-PageCount - Total number of pages <br>  * X-PerPage - Commits per page <br>  * X-Total - Total commit count <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetPullRequestFilesAsync(String owner, String repo, Long index, String skipTo, String whitespace, Integer page, Integer limit, final ApiCallback<List<ChangedFile>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetPullRequestFilesValidateBeforeCall(owner, repo, index, skipTo, whitespace, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<ChangedFile>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetPullReview
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetPullReviewCall(String owner, String repo, Long index, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetPullReviewValidateBeforeCall(String owner, String repo, Long index, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetPullReview(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetPullReview(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoGetPullReview(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoGetPullReview(Async)");
        }

        return repoGetPullReviewCall(owner, repo, index, id, _callback);

    }

    /**
     * Get a specific review for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @return PullReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public PullReview repoGetPullReview(String owner, String repo, Long index, Long id) throws ApiException {
        ApiResponse<PullReview> localVarResp = repoGetPullReviewWithHttpInfo(owner, repo, index, id);
        return localVarResp.getData();
    }

    /**
     * Get a specific review for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @return ApiResponse&lt;PullReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PullReview> repoGetPullReviewWithHttpInfo(String owner, String repo, Long index, Long id) throws ApiException {
        okhttp3.Call localVarCall = repoGetPullReviewValidateBeforeCall(owner, repo, index, id, null);
        Type localVarReturnType = new TypeToken<PullReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific review for a pull request (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetPullReviewAsync(String owner, String repo, Long index, Long id, final ApiCallback<PullReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetPullReviewValidateBeforeCall(owner, repo, index, id, _callback);
        Type localVarReturnType = new TypeToken<PullReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetPullReviewComments
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullCommentList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetPullReviewCommentsCall(String owner, String repo, Long index, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetPullReviewCommentsValidateBeforeCall(String owner, String repo, Long index, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetPullReviewComments(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetPullReviewComments(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoGetPullReviewComments(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoGetPullReviewComments(Async)");
        }

        return repoGetPullReviewCommentsCall(owner, repo, index, id, _callback);

    }

    /**
     * Get a specific review for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @return List&lt;PullReviewComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullCommentList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public List<PullReviewComment> repoGetPullReviewComments(String owner, String repo, Long index, Long id) throws ApiException {
        ApiResponse<List<PullReviewComment>> localVarResp = repoGetPullReviewCommentsWithHttpInfo(owner, repo, index, id);
        return localVarResp.getData();
    }

    /**
     * Get a specific review for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @return ApiResponse&lt;List&lt;PullReviewComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullCommentList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PullReviewComment>> repoGetPullReviewCommentsWithHttpInfo(String owner, String repo, Long index, Long id) throws ApiException {
        okhttp3.Call localVarCall = repoGetPullReviewCommentsValidateBeforeCall(owner, repo, index, id, null);
        Type localVarReturnType = new TypeToken<List<PullReviewComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific review for a pull request (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullCommentList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetPullReviewCommentsAsync(String owner, String repo, Long index, Long id, final ApiCallback<List<PullReviewComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetPullReviewCommentsValidateBeforeCall(owner, repo, index, id, _callback);
        Type localVarReturnType = new TypeToken<List<PullReviewComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetPushMirrorByRemoteName
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name remote name of push mirror (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PushMirror </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetPushMirrorByRemoteNameCall(String owner, String repo, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/push_mirrors/{name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetPushMirrorByRemoteNameValidateBeforeCall(String owner, String repo, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetPushMirrorByRemoteName(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetPushMirrorByRemoteName(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling repoGetPushMirrorByRemoteName(Async)");
        }

        return repoGetPushMirrorByRemoteNameCall(owner, repo, name, _callback);

    }

    /**
     * Get push mirror of the repository by remoteName
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name remote name of push mirror (required)
     * @return PushMirror
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PushMirror </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public PushMirror repoGetPushMirrorByRemoteName(String owner, String repo, String name) throws ApiException {
        ApiResponse<PushMirror> localVarResp = repoGetPushMirrorByRemoteNameWithHttpInfo(owner, repo, name);
        return localVarResp.getData();
    }

    /**
     * Get push mirror of the repository by remoteName
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name remote name of push mirror (required)
     * @return ApiResponse&lt;PushMirror&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PushMirror </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<PushMirror> repoGetPushMirrorByRemoteNameWithHttpInfo(String owner, String repo, String name) throws ApiException {
        okhttp3.Call localVarCall = repoGetPushMirrorByRemoteNameValidateBeforeCall(owner, repo, name, null);
        Type localVarReturnType = new TypeToken<PushMirror>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get push mirror of the repository by remoteName (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param name remote name of push mirror (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PushMirror </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetPushMirrorByRemoteNameAsync(String owner, String repo, String name, final ApiCallback<PushMirror> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetPushMirrorByRemoteNameValidateBeforeCall(owner, repo, name, _callback);
        Type localVarReturnType = new TypeToken<PushMirror>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetRawFile
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath filepath of the file to get (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns raw file content. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetRawFileCall(String owner, String repo, String filepath, String ref, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/raw/{filepath}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "filepath" + "}", localVarApiClient.escapeString(filepath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetRawFileValidateBeforeCall(String owner, String repo, String filepath, String ref, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetRawFile(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetRawFile(Async)");
        }

        // verify the required parameter 'filepath' is set
        if (filepath == null) {
            throw new ApiException("Missing the required parameter 'filepath' when calling repoGetRawFile(Async)");
        }

        return repoGetRawFileCall(owner, repo, filepath, ref, _callback);

    }

    /**
     * Get a file from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath filepath of the file to get (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns raw file content. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void repoGetRawFile(String owner, String repo, String filepath, String ref) throws ApiException {
        repoGetRawFileWithHttpInfo(owner, repo, filepath, ref);
    }

    /**
     * Get a file from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath filepath of the file to get (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns raw file content. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoGetRawFileWithHttpInfo(String owner, String repo, String filepath, String ref) throws ApiException {
        okhttp3.Call localVarCall = repoGetRawFileValidateBeforeCall(owner, repo, filepath, ref, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a file from a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath filepath of the file to get (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns raw file content. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetRawFileAsync(String owner, String repo, String filepath, String ref, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetRawFileValidateBeforeCall(owner, repo, filepath, ref, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetRawFileOrLFS
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath filepath of the file to get (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns raw file content. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetRawFileOrLFSCall(String owner, String repo, String filepath, String ref, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/media/{filepath}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "filepath" + "}", localVarApiClient.escapeString(filepath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetRawFileOrLFSValidateBeforeCall(String owner, String repo, String filepath, String ref, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetRawFileOrLFS(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetRawFileOrLFS(Async)");
        }

        // verify the required parameter 'filepath' is set
        if (filepath == null) {
            throw new ApiException("Missing the required parameter 'filepath' when calling repoGetRawFileOrLFS(Async)");
        }

        return repoGetRawFileOrLFSCall(owner, repo, filepath, ref, _callback);

    }

    /**
     * Get a file or it&#39;s LFS object from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath filepath of the file to get (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns raw file content. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void repoGetRawFileOrLFS(String owner, String repo, String filepath, String ref) throws ApiException {
        repoGetRawFileOrLFSWithHttpInfo(owner, repo, filepath, ref);
    }

    /**
     * Get a file or it&#39;s LFS object from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath filepath of the file to get (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns raw file content. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoGetRawFileOrLFSWithHttpInfo(String owner, String repo, String filepath, String ref) throws ApiException {
        okhttp3.Call localVarCall = repoGetRawFileOrLFSValidateBeforeCall(owner, repo, filepath, ref, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a file or it&#39;s LFS object from a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath filepath of the file to get (required)
     * @param ref The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns raw file content. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetRawFileOrLFSAsync(String owner, String repo, String filepath, String ref, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetRawFileOrLFSValidateBeforeCall(owner, repo, filepath, ref, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetRelease
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetReleaseCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetReleaseValidateBeforeCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetRelease(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetRelease(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoGetRelease(Async)");
        }

        return repoGetReleaseCall(owner, repo, id, _callback);

    }

    /**
     * Get a release
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release to get (required)
     * @return Release
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public Release repoGetRelease(String owner, String repo, Long id) throws ApiException {
        ApiResponse<Release> localVarResp = repoGetReleaseWithHttpInfo(owner, repo, id);
        return localVarResp.getData();
    }

    /**
     * Get a release
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release to get (required)
     * @return ApiResponse&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Release> repoGetReleaseWithHttpInfo(String owner, String repo, Long id) throws ApiException {
        okhttp3.Call localVarCall = repoGetReleaseValidateBeforeCall(owner, repo, id, null);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a release (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetReleaseAsync(String owner, String repo, Long id, final ApiCallback<Release> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetReleaseValidateBeforeCall(owner, repo, id, _callback);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetReleaseAttachment
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param attachmentId id of the attachment to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetReleaseAttachmentCall(String owner, String repo, Long id, Long attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetReleaseAttachmentValidateBeforeCall(String owner, String repo, Long id, Long attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetReleaseAttachment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetReleaseAttachment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoGetReleaseAttachment(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling repoGetReleaseAttachment(Async)");
        }

        return repoGetReleaseAttachmentCall(owner, repo, id, attachmentId, _callback);

    }

    /**
     * Get a release attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param attachmentId id of the attachment to get (required)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment </td><td>  -  </td></tr>
     </table>
     */
    public Attachment repoGetReleaseAttachment(String owner, String repo, Long id, Long attachmentId) throws ApiException {
        ApiResponse<Attachment> localVarResp = repoGetReleaseAttachmentWithHttpInfo(owner, repo, id, attachmentId);
        return localVarResp.getData();
    }

    /**
     * Get a release attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param attachmentId id of the attachment to get (required)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachment> repoGetReleaseAttachmentWithHttpInfo(String owner, String repo, Long id, Long attachmentId) throws ApiException {
        okhttp3.Call localVarCall = repoGetReleaseAttachmentValidateBeforeCall(owner, repo, id, attachmentId, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a release attachment (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param attachmentId id of the attachment to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetReleaseAttachmentAsync(String owner, String repo, Long id, Long attachmentId, final ApiCallback<Attachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetReleaseAttachmentValidateBeforeCall(owner, repo, id, attachmentId, _callback);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetReleaseByTag
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param tag tag name of the release to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetReleaseByTagCall(String owner, String repo, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/tags/{tag}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetReleaseByTagValidateBeforeCall(String owner, String repo, String tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetReleaseByTag(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetReleaseByTag(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling repoGetReleaseByTag(Async)");
        }

        return repoGetReleaseByTagCall(owner, repo, tag, _callback);

    }

    /**
     * Get a release by tag name
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param tag tag name of the release to get (required)
     * @return Release
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public Release repoGetReleaseByTag(String owner, String repo, String tag) throws ApiException {
        ApiResponse<Release> localVarResp = repoGetReleaseByTagWithHttpInfo(owner, repo, tag);
        return localVarResp.getData();
    }

    /**
     * Get a release by tag name
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param tag tag name of the release to get (required)
     * @return ApiResponse&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Release> repoGetReleaseByTagWithHttpInfo(String owner, String repo, String tag) throws ApiException {
        okhttp3.Call localVarCall = repoGetReleaseByTagValidateBeforeCall(owner, repo, tag, null);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a release by tag name (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param tag tag name of the release to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Release </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetReleaseByTagAsync(String owner, String repo, String tag, final ApiCallback<Release> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetReleaseByTagValidateBeforeCall(owner, repo, tag, _callback);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetRepoPermissions
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param collaborator username of the collaborator (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepoCollaboratorPermission </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetRepoPermissionsCall(String owner, String repo, String collaborator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/collaborators/{collaborator}/permission"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "collaborator" + "}", localVarApiClient.escapeString(collaborator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetRepoPermissionsValidateBeforeCall(String owner, String repo, String collaborator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetRepoPermissions(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetRepoPermissions(Async)");
        }

        // verify the required parameter 'collaborator' is set
        if (collaborator == null) {
            throw new ApiException("Missing the required parameter 'collaborator' when calling repoGetRepoPermissions(Async)");
        }

        return repoGetRepoPermissionsCall(owner, repo, collaborator, _callback);

    }

    /**
     * Get repository permissions for a user
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param collaborator username of the collaborator (required)
     * @return RepoCollaboratorPermission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepoCollaboratorPermission </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public RepoCollaboratorPermission repoGetRepoPermissions(String owner, String repo, String collaborator) throws ApiException {
        ApiResponse<RepoCollaboratorPermission> localVarResp = repoGetRepoPermissionsWithHttpInfo(owner, repo, collaborator);
        return localVarResp.getData();
    }

    /**
     * Get repository permissions for a user
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param collaborator username of the collaborator (required)
     * @return ApiResponse&lt;RepoCollaboratorPermission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepoCollaboratorPermission </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepoCollaboratorPermission> repoGetRepoPermissionsWithHttpInfo(String owner, String repo, String collaborator) throws ApiException {
        okhttp3.Call localVarCall = repoGetRepoPermissionsValidateBeforeCall(owner, repo, collaborator, null);
        Type localVarReturnType = new TypeToken<RepoCollaboratorPermission>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get repository permissions for a user (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param collaborator username of the collaborator (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepoCollaboratorPermission </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetRepoPermissionsAsync(String owner, String repo, String collaborator, final ApiCallback<RepoCollaboratorPermission> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetRepoPermissionsValidateBeforeCall(owner, repo, collaborator, _callback);
        Type localVarReturnType = new TypeToken<RepoCollaboratorPermission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetReviewers
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetReviewersCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/reviewers"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetReviewersValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetReviewers(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetReviewers(Async)");
        }

        return repoGetReviewersCall(owner, repo, _callback);

    }

    /**
     * Return all users that can be requested to review in this repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public List<User> repoGetReviewers(String owner, String repo) throws ApiException {
        ApiResponse<List<User>> localVarResp = repoGetReviewersWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Return all users that can be requested to review in this repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> repoGetReviewersWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = repoGetReviewersValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return all users that can be requested to review in this repo (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetReviewersAsync(String owner, String repo, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetReviewersValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetSingleCommit
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha a git ref or commit sha (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetSingleCommitCall(String owner, String repo, String sha, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/git/commits/{sha}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetSingleCommitValidateBeforeCall(String owner, String repo, String sha, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetSingleCommit(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetSingleCommit(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling repoGetSingleCommit(Async)");
        }

        return repoGetSingleCommitCall(owner, repo, sha, _callback);

    }

    /**
     * Get a single commit from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha a git ref or commit sha (required)
     * @return Commit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Commit repoGetSingleCommit(String owner, String repo, String sha) throws ApiException {
        ApiResponse<Commit> localVarResp = repoGetSingleCommitWithHttpInfo(owner, repo, sha);
        return localVarResp.getData();
    }

    /**
     * Get a single commit from a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha a git ref or commit sha (required)
     * @return ApiResponse&lt;Commit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Commit> repoGetSingleCommitWithHttpInfo(String owner, String repo, String sha) throws ApiException {
        okhttp3.Call localVarCall = repoGetSingleCommitValidateBeforeCall(owner, repo, sha, null);
        Type localVarReturnType = new TypeToken<Commit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single commit from a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha a git ref or commit sha (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetSingleCommitAsync(String owner, String repo, String sha, final ApiCallback<Commit> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetSingleCommitValidateBeforeCall(owner, repo, sha, _callback);
        Type localVarReturnType = new TypeToken<Commit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetTag
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param tag name of tag (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetTagCall(String owner, String repo, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/tags/{tag}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetTagValidateBeforeCall(String owner, String repo, String tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetTag(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetTag(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling repoGetTag(Async)");
        }

        return repoGetTagCall(owner, repo, tag, _callback);

    }

    /**
     * Get the tag of a repository by tag name
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param tag name of tag (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public Tag repoGetTag(String owner, String repo, String tag) throws ApiException {
        ApiResponse<Tag> localVarResp = repoGetTagWithHttpInfo(owner, repo, tag);
        return localVarResp.getData();
    }

    /**
     * Get the tag of a repository by tag name
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param tag name of tag (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> repoGetTagWithHttpInfo(String owner, String repo, String tag) throws ApiException {
        okhttp3.Call localVarCall = repoGetTagValidateBeforeCall(owner, repo, tag, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the tag of a repository by tag name (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param tag name of tag (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetTagAsync(String owner, String repo, String tag, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetTagValidateBeforeCall(owner, repo, tag, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetWikiPage
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param pageName name of the page (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WikiPage </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetWikiPageCall(String owner, String repo, String pageName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/wiki/page/{pageName}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pageName" + "}", localVarApiClient.escapeString(pageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetWikiPageValidateBeforeCall(String owner, String repo, String pageName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetWikiPage(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetWikiPage(Async)");
        }

        // verify the required parameter 'pageName' is set
        if (pageName == null) {
            throw new ApiException("Missing the required parameter 'pageName' when calling repoGetWikiPage(Async)");
        }

        return repoGetWikiPageCall(owner, repo, pageName, _callback);

    }

    /**
     * Get a wiki page
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param pageName name of the page (required)
     * @return WikiPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WikiPage </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public WikiPage repoGetWikiPage(String owner, String repo, String pageName) throws ApiException {
        ApiResponse<WikiPage> localVarResp = repoGetWikiPageWithHttpInfo(owner, repo, pageName);
        return localVarResp.getData();
    }

    /**
     * Get a wiki page
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param pageName name of the page (required)
     * @return ApiResponse&lt;WikiPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WikiPage </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WikiPage> repoGetWikiPageWithHttpInfo(String owner, String repo, String pageName) throws ApiException {
        okhttp3.Call localVarCall = repoGetWikiPageValidateBeforeCall(owner, repo, pageName, null);
        Type localVarReturnType = new TypeToken<WikiPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a wiki page (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param pageName name of the page (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WikiPage </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetWikiPageAsync(String owner, String repo, String pageName, final ApiCallback<WikiPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetWikiPageValidateBeforeCall(owner, repo, pageName, _callback);
        Type localVarReturnType = new TypeToken<WikiPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetWikiPageRevisions
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param pageName name of the page (required)
     * @param page page number of results to return (1-based) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WikiCommitList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetWikiPageRevisionsCall(String owner, String repo, String pageName, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/wiki/revisions/{pageName}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pageName" + "}", localVarApiClient.escapeString(pageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetWikiPageRevisionsValidateBeforeCall(String owner, String repo, String pageName, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetWikiPageRevisions(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetWikiPageRevisions(Async)");
        }

        // verify the required parameter 'pageName' is set
        if (pageName == null) {
            throw new ApiException("Missing the required parameter 'pageName' when calling repoGetWikiPageRevisions(Async)");
        }

        return repoGetWikiPageRevisionsCall(owner, repo, pageName, page, _callback);

    }

    /**
     * Get revisions of a wiki page
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param pageName name of the page (required)
     * @param page page number of results to return (1-based) (optional)
     * @return WikiCommitList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WikiCommitList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public WikiCommitList repoGetWikiPageRevisions(String owner, String repo, String pageName, Integer page) throws ApiException {
        ApiResponse<WikiCommitList> localVarResp = repoGetWikiPageRevisionsWithHttpInfo(owner, repo, pageName, page);
        return localVarResp.getData();
    }

    /**
     * Get revisions of a wiki page
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param pageName name of the page (required)
     * @param page page number of results to return (1-based) (optional)
     * @return ApiResponse&lt;WikiCommitList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WikiCommitList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WikiCommitList> repoGetWikiPageRevisionsWithHttpInfo(String owner, String repo, String pageName, Integer page) throws ApiException {
        okhttp3.Call localVarCall = repoGetWikiPageRevisionsValidateBeforeCall(owner, repo, pageName, page, null);
        Type localVarReturnType = new TypeToken<WikiCommitList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get revisions of a wiki page (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param pageName name of the page (required)
     * @param page page number of results to return (1-based) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WikiCommitList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetWikiPageRevisionsAsync(String owner, String repo, String pageName, Integer page, final ApiCallback<WikiCommitList> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetWikiPageRevisionsValidateBeforeCall(owner, repo, pageName, page, _callback);
        Type localVarReturnType = new TypeToken<WikiCommitList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoGetWikiPages
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WikiPageList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetWikiPagesCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/wiki/pages"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoGetWikiPagesValidateBeforeCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoGetWikiPages(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoGetWikiPages(Async)");
        }

        return repoGetWikiPagesCall(owner, repo, page, limit, _callback);

    }

    /**
     * Get all wiki pages
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;WikiPageMetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WikiPageList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public List<WikiPageMetaData> repoGetWikiPages(String owner, String repo, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<WikiPageMetaData>> localVarResp = repoGetWikiPagesWithHttpInfo(owner, repo, page, limit);
        return localVarResp.getData();
    }

    /**
     * Get all wiki pages
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;WikiPageMetaData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WikiPageList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WikiPageMetaData>> repoGetWikiPagesWithHttpInfo(String owner, String repo, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoGetWikiPagesValidateBeforeCall(owner, repo, page, limit, null);
        Type localVarReturnType = new TypeToken<List<WikiPageMetaData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all wiki pages (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WikiPageList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoGetWikiPagesAsync(String owner, String repo, Integer page, Integer limit, final ApiCallback<List<WikiPageMetaData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoGetWikiPagesValidateBeforeCall(owner, repo, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<WikiPageMetaData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListActivityFeeds
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param date the date of the activities to be found (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityFeedsList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListActivityFeedsCall(String owner, String repo, LocalDate date, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/activities/feeds"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListActivityFeedsValidateBeforeCall(String owner, String repo, LocalDate date, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListActivityFeeds(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListActivityFeeds(Async)");
        }

        return repoListActivityFeedsCall(owner, repo, date, page, limit, _callback);

    }

    /**
     * List a repository&#39;s activity feeds
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param date the date of the activities to be found (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Activity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityFeedsList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public List<Activity> repoListActivityFeeds(String owner, String repo, LocalDate date, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Activity>> localVarResp = repoListActivityFeedsWithHttpInfo(owner, repo, date, page, limit);
        return localVarResp.getData();
    }

    /**
     * List a repository&#39;s activity feeds
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param date the date of the activities to be found (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Activity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityFeedsList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Activity>> repoListActivityFeedsWithHttpInfo(String owner, String repo, LocalDate date, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoListActivityFeedsValidateBeforeCall(owner, repo, date, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Activity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a repository&#39;s activity feeds (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param date the date of the activities to be found (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityFeedsList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListActivityFeedsAsync(String owner, String repo, LocalDate date, Integer page, Integer limit, final ApiCallback<List<Activity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListActivityFeedsValidateBeforeCall(owner, repo, date, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Activity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListAllGitRefs
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReferenceList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListAllGitRefsCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/git/refs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListAllGitRefsValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListAllGitRefs(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListAllGitRefs(Async)");
        }

        return repoListAllGitRefsCall(owner, repo, _callback);

    }

    /**
     * Get specified ref or filtered repository&#39;s refs
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return List&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReferenceList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public List<Reference> repoListAllGitRefs(String owner, String repo) throws ApiException {
        ApiResponse<List<Reference>> localVarResp = repoListAllGitRefsWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get specified ref or filtered repository&#39;s refs
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return ApiResponse&lt;List&lt;Reference&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReferenceList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Reference>> repoListAllGitRefsWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = repoListAllGitRefsValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<List<Reference>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get specified ref or filtered repository&#39;s refs (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReferenceList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListAllGitRefsAsync(String owner, String repo, final ApiCallback<List<Reference>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListAllGitRefsValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<List<Reference>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListBranchProtection
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BranchProtectionList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListBranchProtectionCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branch_protections"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListBranchProtectionValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListBranchProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListBranchProtection(Async)");
        }

        return repoListBranchProtectionCall(owner, repo, _callback);

    }

    /**
     * List branch protections for a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return List&lt;BranchProtection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BranchProtectionList </td><td>  -  </td></tr>
     </table>
     */
    public List<BranchProtection> repoListBranchProtection(String owner, String repo) throws ApiException {
        ApiResponse<List<BranchProtection>> localVarResp = repoListBranchProtectionWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * List branch protections for a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return ApiResponse&lt;List&lt;BranchProtection&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BranchProtectionList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BranchProtection>> repoListBranchProtectionWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = repoListBranchProtectionValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<List<BranchProtection>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List branch protections for a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BranchProtectionList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListBranchProtectionAsync(String owner, String repo, final ApiCallback<List<BranchProtection>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListBranchProtectionValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<List<BranchProtection>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListBranches
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BranchList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListBranchesCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListBranchesValidateBeforeCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListBranches(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListBranches(Async)");
        }

        return repoListBranchesCall(owner, repo, page, limit, _callback);

    }

    /**
     * List a repository&#39;s branches
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Branch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BranchList </td><td>  -  </td></tr>
     </table>
     */
    public List<Branch> repoListBranches(String owner, String repo, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Branch>> localVarResp = repoListBranchesWithHttpInfo(owner, repo, page, limit);
        return localVarResp.getData();
    }

    /**
     * List a repository&#39;s branches
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Branch&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BranchList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Branch>> repoListBranchesWithHttpInfo(String owner, String repo, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoListBranchesValidateBeforeCall(owner, repo, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Branch>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a repository&#39;s branches (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BranchList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListBranchesAsync(String owner, String repo, Integer page, Integer limit, final ApiCallback<List<Branch>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListBranchesValidateBeforeCall(owner, repo, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Branch>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListCollaborators
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListCollaboratorsCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/collaborators"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListCollaboratorsValidateBeforeCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListCollaborators(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListCollaborators(Async)");
        }

        return repoListCollaboratorsCall(owner, repo, page, limit, _callback);

    }

    /**
     * List a repository&#39;s collaborators
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public List<User> repoListCollaborators(String owner, String repo, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<User>> localVarResp = repoListCollaboratorsWithHttpInfo(owner, repo, page, limit);
        return localVarResp.getData();
    }

    /**
     * List a repository&#39;s collaborators
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> repoListCollaboratorsWithHttpInfo(String owner, String repo, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoListCollaboratorsValidateBeforeCall(owner, repo, page, limit, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a repository&#39;s collaborators (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListCollaboratorsAsync(String owner, String repo, Integer page, Integer limit, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListCollaboratorsValidateBeforeCall(owner, repo, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListGitHooks
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitHookList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListGitHooksCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/hooks/git"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListGitHooksValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListGitHooks(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListGitHooks(Async)");
        }

        return repoListGitHooksCall(owner, repo, _callback);

    }

    /**
     * List the Git hooks in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return List&lt;GitHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitHookList </td><td>  -  </td></tr>
     </table>
     */
    public List<GitHook> repoListGitHooks(String owner, String repo) throws ApiException {
        ApiResponse<List<GitHook>> localVarResp = repoListGitHooksWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * List the Git hooks in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return ApiResponse&lt;List&lt;GitHook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitHookList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GitHook>> repoListGitHooksWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = repoListGitHooksValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<List<GitHook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the Git hooks in a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GitHookList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListGitHooksAsync(String owner, String repo, final ApiCallback<List<GitHook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListGitHooksValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<List<GitHook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListGitRefs
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param ref part or full name of the ref (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReferenceList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListGitRefsCall(String owner, String repo, String ref, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/git/refs/{ref}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "ref" + "}", localVarApiClient.escapeString(ref.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListGitRefsValidateBeforeCall(String owner, String repo, String ref, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListGitRefs(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListGitRefs(Async)");
        }

        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling repoListGitRefs(Async)");
        }

        return repoListGitRefsCall(owner, repo, ref, _callback);

    }

    /**
     * Get specified ref or filtered repository&#39;s refs
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param ref part or full name of the ref (required)
     * @return List&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReferenceList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public List<Reference> repoListGitRefs(String owner, String repo, String ref) throws ApiException {
        ApiResponse<List<Reference>> localVarResp = repoListGitRefsWithHttpInfo(owner, repo, ref);
        return localVarResp.getData();
    }

    /**
     * Get specified ref or filtered repository&#39;s refs
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param ref part or full name of the ref (required)
     * @return ApiResponse&lt;List&lt;Reference&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReferenceList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Reference>> repoListGitRefsWithHttpInfo(String owner, String repo, String ref) throws ApiException {
        okhttp3.Call localVarCall = repoListGitRefsValidateBeforeCall(owner, repo, ref, null);
        Type localVarReturnType = new TypeToken<List<Reference>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get specified ref or filtered repository&#39;s refs (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param ref part or full name of the ref (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReferenceList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListGitRefsAsync(String owner, String repo, String ref, final ApiCallback<List<Reference>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListGitRefsValidateBeforeCall(owner, repo, ref, _callback);
        Type localVarReturnType = new TypeToken<List<Reference>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListHooks
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HookList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListHooksCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/hooks"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListHooksValidateBeforeCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListHooks(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListHooks(Async)");
        }

        return repoListHooksCall(owner, repo, page, limit, _callback);

    }

    /**
     * List the hooks in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HookList </td><td>  -  </td></tr>
     </table>
     */
    public List<Hook> repoListHooks(String owner, String repo, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Hook>> localVarResp = repoListHooksWithHttpInfo(owner, repo, page, limit);
        return localVarResp.getData();
    }

    /**
     * List the hooks in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Hook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HookList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Hook>> repoListHooksWithHttpInfo(String owner, String repo, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoListHooksValidateBeforeCall(owner, repo, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Hook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the hooks in a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HookList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListHooksAsync(String owner, String repo, Integer page, Integer limit, final ApiCallback<List<Hook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListHooksValidateBeforeCall(owner, repo, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Hook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListKeys
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param keyId the key_id to search for (optional)
     * @param fingerprint fingerprint of the key (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DeployKeyList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListKeysCall(String owner, String repo, Integer keyId, String fingerprint, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/keys"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key_id", keyId));
        }

        if (fingerprint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fingerprint", fingerprint));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListKeysValidateBeforeCall(String owner, String repo, Integer keyId, String fingerprint, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListKeys(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListKeys(Async)");
        }

        return repoListKeysCall(owner, repo, keyId, fingerprint, page, limit, _callback);

    }

    /**
     * List a repository&#39;s keys
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param keyId the key_id to search for (optional)
     * @param fingerprint fingerprint of the key (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;DeployKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DeployKeyList </td><td>  -  </td></tr>
     </table>
     */
    public List<DeployKey> repoListKeys(String owner, String repo, Integer keyId, String fingerprint, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<DeployKey>> localVarResp = repoListKeysWithHttpInfo(owner, repo, keyId, fingerprint, page, limit);
        return localVarResp.getData();
    }

    /**
     * List a repository&#39;s keys
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param keyId the key_id to search for (optional)
     * @param fingerprint fingerprint of the key (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;DeployKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DeployKeyList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DeployKey>> repoListKeysWithHttpInfo(String owner, String repo, Integer keyId, String fingerprint, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoListKeysValidateBeforeCall(owner, repo, keyId, fingerprint, page, limit, null);
        Type localVarReturnType = new TypeToken<List<DeployKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a repository&#39;s keys (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param keyId the key_id to search for (optional)
     * @param fingerprint fingerprint of the key (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DeployKeyList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListKeysAsync(String owner, String repo, Integer keyId, String fingerprint, Integer page, Integer limit, final ApiCallback<List<DeployKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListKeysValidateBeforeCall(owner, repo, keyId, fingerprint, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<DeployKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListPullRequests
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param state State of pull request: open or closed (optional) (optional)
     * @param sort Type of sort (optional)
     * @param milestone ID of the milestone (optional)
     * @param labels Label IDs (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullRequestList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListPullRequestsCall(String owner, String repo, String state, String sort, Long milestone, List<Long> labels, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (milestone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("milestone", milestone));
        }

        if (labels != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "labels", labels));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListPullRequestsValidateBeforeCall(String owner, String repo, String state, String sort, Long milestone, List<Long> labels, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListPullRequests(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListPullRequests(Async)");
        }

        return repoListPullRequestsCall(owner, repo, state, sort, milestone, labels, page, limit, _callback);

    }

    /**
     * List a repo&#39;s pull requests
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param state State of pull request: open or closed (optional) (optional)
     * @param sort Type of sort (optional)
     * @param milestone ID of the milestone (optional)
     * @param labels Label IDs (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;PullRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullRequestList </td><td>  -  </td></tr>
     </table>
     */
    public List<PullRequest> repoListPullRequests(String owner, String repo, String state, String sort, Long milestone, List<Long> labels, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<PullRequest>> localVarResp = repoListPullRequestsWithHttpInfo(owner, repo, state, sort, milestone, labels, page, limit);
        return localVarResp.getData();
    }

    /**
     * List a repo&#39;s pull requests
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param state State of pull request: open or closed (optional) (optional)
     * @param sort Type of sort (optional)
     * @param milestone ID of the milestone (optional)
     * @param labels Label IDs (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;PullRequest&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullRequestList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PullRequest>> repoListPullRequestsWithHttpInfo(String owner, String repo, String state, String sort, Long milestone, List<Long> labels, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoListPullRequestsValidateBeforeCall(owner, repo, state, sort, milestone, labels, page, limit, null);
        Type localVarReturnType = new TypeToken<List<PullRequest>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a repo&#39;s pull requests (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param state State of pull request: open or closed (optional) (optional)
     * @param sort Type of sort (optional)
     * @param milestone ID of the milestone (optional)
     * @param labels Label IDs (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullRequestList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListPullRequestsAsync(String owner, String repo, String state, String sort, Long milestone, List<Long> labels, Integer page, Integer limit, final ApiCallback<List<PullRequest>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListPullRequestsValidateBeforeCall(owner, repo, state, sort, milestone, labels, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<PullRequest>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListPullReviews
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReviewList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListPullReviewsCall(String owner, String repo, Long index, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}/reviews"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListPullReviewsValidateBeforeCall(String owner, String repo, Long index, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListPullReviews(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListPullReviews(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoListPullReviews(Async)");
        }

        return repoListPullReviewsCall(owner, repo, index, page, limit, _callback);

    }

    /**
     * List all reviews for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;PullReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReviewList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public List<PullReview> repoListPullReviews(String owner, String repo, Long index, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<PullReview>> localVarResp = repoListPullReviewsWithHttpInfo(owner, repo, index, page, limit);
        return localVarResp.getData();
    }

    /**
     * List all reviews for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;PullReview&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReviewList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PullReview>> repoListPullReviewsWithHttpInfo(String owner, String repo, Long index, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoListPullReviewsValidateBeforeCall(owner, repo, index, page, limit, null);
        Type localVarReturnType = new TypeToken<List<PullReview>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all reviews for a pull request (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReviewList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListPullReviewsAsync(String owner, String repo, Long index, Integer page, Integer limit, final ApiCallback<List<PullReview>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListPullReviewsValidateBeforeCall(owner, repo, index, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<PullReview>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListPushMirrors
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PushMirrorList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoListPushMirrorsCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/push_mirrors"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListPushMirrorsValidateBeforeCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListPushMirrors(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListPushMirrors(Async)");
        }

        return repoListPushMirrorsCall(owner, repo, page, limit, _callback);

    }

    /**
     * Get all push mirrors of the repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;PushMirror&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PushMirrorList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public List<PushMirror> repoListPushMirrors(String owner, String repo, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<PushMirror>> localVarResp = repoListPushMirrorsWithHttpInfo(owner, repo, page, limit);
        return localVarResp.getData();
    }

    /**
     * Get all push mirrors of the repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;PushMirror&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PushMirrorList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<PushMirror>> repoListPushMirrorsWithHttpInfo(String owner, String repo, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoListPushMirrorsValidateBeforeCall(owner, repo, page, limit, null);
        Type localVarReturnType = new TypeToken<List<PushMirror>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all push mirrors of the repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PushMirrorList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoListPushMirrorsAsync(String owner, String repo, Integer page, Integer limit, final ApiCallback<List<PushMirror>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListPushMirrorsValidateBeforeCall(owner, repo, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<PushMirror>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListReleaseAttachments
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AttachmentList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListReleaseAttachmentsCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/{id}/assets"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListReleaseAttachmentsValidateBeforeCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListReleaseAttachments(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListReleaseAttachments(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoListReleaseAttachments(Async)");
        }

        return repoListReleaseAttachmentsCall(owner, repo, id, _callback);

    }

    /**
     * List release&#39;s attachments
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @return List&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AttachmentList </td><td>  -  </td></tr>
     </table>
     */
    public List<Attachment> repoListReleaseAttachments(String owner, String repo, Long id) throws ApiException {
        ApiResponse<List<Attachment>> localVarResp = repoListReleaseAttachmentsWithHttpInfo(owner, repo, id);
        return localVarResp.getData();
    }

    /**
     * List release&#39;s attachments
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @return ApiResponse&lt;List&lt;Attachment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AttachmentList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Attachment>> repoListReleaseAttachmentsWithHttpInfo(String owner, String repo, Long id) throws ApiException {
        okhttp3.Call localVarCall = repoListReleaseAttachmentsValidateBeforeCall(owner, repo, id, null);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List release&#39;s attachments (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the release (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AttachmentList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListReleaseAttachmentsAsync(String owner, String repo, Long id, final ApiCallback<List<Attachment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListReleaseAttachmentsValidateBeforeCall(owner, repo, id, _callback);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListReleases
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param draft filter (exclude / include) drafts, if you dont have repo write access none will show (optional)
     * @param preRelease filter (exclude / include) pre-releases (optional)
     * @param perPage page size of results, deprecated - use limit (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReleaseList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListReleasesCall(String owner, String repo, Boolean draft, Boolean preRelease, Integer perPage, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        if (preRelease != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pre-release", preRelease));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListReleasesValidateBeforeCall(String owner, String repo, Boolean draft, Boolean preRelease, Integer perPage, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListReleases(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListReleases(Async)");
        }

        return repoListReleasesCall(owner, repo, draft, preRelease, perPage, page, limit, _callback);

    }

    /**
     * List a repo&#39;s releases
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param draft filter (exclude / include) drafts, if you dont have repo write access none will show (optional)
     * @param preRelease filter (exclude / include) pre-releases (optional)
     * @param perPage page size of results, deprecated - use limit (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReleaseList </td><td>  -  </td></tr>
     </table>
     */
    public List<Release> repoListReleases(String owner, String repo, Boolean draft, Boolean preRelease, Integer perPage, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Release>> localVarResp = repoListReleasesWithHttpInfo(owner, repo, draft, preRelease, perPage, page, limit);
        return localVarResp.getData();
    }

    /**
     * List a repo&#39;s releases
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param draft filter (exclude / include) drafts, if you dont have repo write access none will show (optional)
     * @param preRelease filter (exclude / include) pre-releases (optional)
     * @param perPage page size of results, deprecated - use limit (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Release&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReleaseList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Release>> repoListReleasesWithHttpInfo(String owner, String repo, Boolean draft, Boolean preRelease, Integer perPage, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoListReleasesValidateBeforeCall(owner, repo, draft, preRelease, perPage, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Release>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a repo&#39;s releases (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param draft filter (exclude / include) drafts, if you dont have repo write access none will show (optional)
     * @param preRelease filter (exclude / include) pre-releases (optional)
     * @param perPage page size of results, deprecated - use limit (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReleaseList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListReleasesAsync(String owner, String repo, Boolean draft, Boolean preRelease, Integer perPage, Integer page, Integer limit, final ApiCallback<List<Release>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListReleasesValidateBeforeCall(owner, repo, draft, preRelease, perPage, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Release>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListStargazers
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListStargazersCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/stargazers"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListStargazersValidateBeforeCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListStargazers(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListStargazers(Async)");
        }

        return repoListStargazersCall(owner, repo, page, limit, _callback);

    }

    /**
     * List a repo&#39;s stargazers
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public List<User> repoListStargazers(String owner, String repo, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<User>> localVarResp = repoListStargazersWithHttpInfo(owner, repo, page, limit);
        return localVarResp.getData();
    }

    /**
     * List a repo&#39;s stargazers
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> repoListStargazersWithHttpInfo(String owner, String repo, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoListStargazersValidateBeforeCall(owner, repo, page, limit, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a repo&#39;s stargazers (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListStargazersAsync(String owner, String repo, Integer page, Integer limit, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListStargazersValidateBeforeCall(owner, repo, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListStatuses
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the commit (required)
     * @param sort type of sort (optional)
     * @param state type of state (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommitStatusList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoListStatusesCall(String owner, String repo, String sha, String sort, String state, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/statuses/{sha}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListStatusesValidateBeforeCall(String owner, String repo, String sha, String sort, String state, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListStatuses(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListStatuses(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling repoListStatuses(Async)");
        }

        return repoListStatusesCall(owner, repo, sha, sort, state, page, limit, _callback);

    }

    /**
     * Get a commit&#39;s statuses
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the commit (required)
     * @param sort type of sort (optional)
     * @param state type of state (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;CommitStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommitStatusList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public List<CommitStatus> repoListStatuses(String owner, String repo, String sha, String sort, String state, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<CommitStatus>> localVarResp = repoListStatusesWithHttpInfo(owner, repo, sha, sort, state, page, limit);
        return localVarResp.getData();
    }

    /**
     * Get a commit&#39;s statuses
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the commit (required)
     * @param sort type of sort (optional)
     * @param state type of state (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;CommitStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommitStatusList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<CommitStatus>> repoListStatusesWithHttpInfo(String owner, String repo, String sha, String sort, String state, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoListStatusesValidateBeforeCall(owner, repo, sha, sort, state, page, limit, null);
        Type localVarReturnType = new TypeToken<List<CommitStatus>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a commit&#39;s statuses (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param sha sha of the commit (required)
     * @param sort type of sort (optional)
     * @param state type of state (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommitStatusList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoListStatusesAsync(String owner, String repo, String sha, String sort, String state, Integer page, Integer limit, final ApiCallback<List<CommitStatus>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListStatusesValidateBeforeCall(owner, repo, sha, sort, state, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<CommitStatus>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListStatusesByRef
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param ref name of branch/tag/commit (required)
     * @param sort type of sort (optional)
     * @param state type of state (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommitStatusList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoListStatusesByRefCall(String owner, String repo, String ref, String sort, String state, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/commits/{ref}/statuses"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "ref" + "}", localVarApiClient.escapeString(ref.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListStatusesByRefValidateBeforeCall(String owner, String repo, String ref, String sort, String state, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListStatusesByRef(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListStatusesByRef(Async)");
        }

        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling repoListStatusesByRef(Async)");
        }

        return repoListStatusesByRefCall(owner, repo, ref, sort, state, page, limit, _callback);

    }

    /**
     * Get a commit&#39;s statuses, by branch/tag/commit reference
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param ref name of branch/tag/commit (required)
     * @param sort type of sort (optional)
     * @param state type of state (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;CommitStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommitStatusList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public List<CommitStatus> repoListStatusesByRef(String owner, String repo, String ref, String sort, String state, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<CommitStatus>> localVarResp = repoListStatusesByRefWithHttpInfo(owner, repo, ref, sort, state, page, limit);
        return localVarResp.getData();
    }

    /**
     * Get a commit&#39;s statuses, by branch/tag/commit reference
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param ref name of branch/tag/commit (required)
     * @param sort type of sort (optional)
     * @param state type of state (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;CommitStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommitStatusList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<CommitStatus>> repoListStatusesByRefWithHttpInfo(String owner, String repo, String ref, String sort, String state, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoListStatusesByRefValidateBeforeCall(owner, repo, ref, sort, state, page, limit, null);
        Type localVarReturnType = new TypeToken<List<CommitStatus>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a commit&#39;s statuses, by branch/tag/commit reference (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param ref name of branch/tag/commit (required)
     * @param sort type of sort (optional)
     * @param state type of state (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommitStatusList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoListStatusesByRefAsync(String owner, String repo, String ref, String sort, String state, Integer page, Integer limit, final ApiCallback<List<CommitStatus>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListStatusesByRefValidateBeforeCall(owner, repo, ref, sort, state, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<CommitStatus>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListSubscribers
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListSubscribersCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/subscribers"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListSubscribersValidateBeforeCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListSubscribers(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListSubscribers(Async)");
        }

        return repoListSubscribersCall(owner, repo, page, limit, _callback);

    }

    /**
     * List a repo&#39;s watchers
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public List<User> repoListSubscribers(String owner, String repo, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<User>> localVarResp = repoListSubscribersWithHttpInfo(owner, repo, page, limit);
        return localVarResp.getData();
    }

    /**
     * List a repo&#39;s watchers
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> repoListSubscribersWithHttpInfo(String owner, String repo, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoListSubscribersValidateBeforeCall(owner, repo, page, limit, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a repo&#39;s watchers (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListSubscribersAsync(String owner, String repo, Integer page, Integer limit, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListSubscribersValidateBeforeCall(owner, repo, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListTags
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results, default maximum page size is 50 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TagList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListTagsCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/tags"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListTagsValidateBeforeCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListTags(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListTags(Async)");
        }

        return repoListTagsCall(owner, repo, page, limit, _callback);

    }

    /**
     * List a repository&#39;s tags
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results, default maximum page size is 50 (optional)
     * @return List&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TagList </td><td>  -  </td></tr>
     </table>
     */
    public List<Tag> repoListTags(String owner, String repo, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Tag>> localVarResp = repoListTagsWithHttpInfo(owner, repo, page, limit);
        return localVarResp.getData();
    }

    /**
     * List a repository&#39;s tags
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results, default maximum page size is 50 (optional)
     * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TagList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Tag>> repoListTagsWithHttpInfo(String owner, String repo, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoListTagsValidateBeforeCall(owner, repo, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a repository&#39;s tags (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results, default maximum page size is 50 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TagList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListTagsAsync(String owner, String repo, Integer page, Integer limit, final ApiCallback<List<Tag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListTagsValidateBeforeCall(owner, repo, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListTeams
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TeamList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListTeamsCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/teams"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListTeamsValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListTeams(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListTeams(Async)");
        }

        return repoListTeamsCall(owner, repo, _callback);

    }

    /**
     * List a repository&#39;s teams
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return List&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TeamList </td><td>  -  </td></tr>
     </table>
     */
    public List<Team> repoListTeams(String owner, String repo) throws ApiException {
        ApiResponse<List<Team>> localVarResp = repoListTeamsWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * List a repository&#39;s teams
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return ApiResponse&lt;List&lt;Team&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TeamList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Team>> repoListTeamsWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = repoListTeamsValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a repository&#39;s teams (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TeamList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListTeamsAsync(String owner, String repo, final ApiCallback<List<Team>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListTeamsValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoListTopics
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TopicNames </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListTopicsCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/topics"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoListTopicsValidateBeforeCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoListTopics(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoListTopics(Async)");
        }

        return repoListTopicsCall(owner, repo, page, limit, _callback);

    }

    /**
     * Get list of topics that a repository has
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return TopicName
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TopicNames </td><td>  -  </td></tr>
     </table>
     */
    public TopicName repoListTopics(String owner, String repo, Integer page, Integer limit) throws ApiException {
        ApiResponse<TopicName> localVarResp = repoListTopicsWithHttpInfo(owner, repo, page, limit);
        return localVarResp.getData();
    }

    /**
     * Get list of topics that a repository has
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;TopicName&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TopicNames </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TopicName> repoListTopicsWithHttpInfo(String owner, String repo, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoListTopicsValidateBeforeCall(owner, repo, page, limit, null);
        Type localVarReturnType = new TypeToken<TopicName>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of topics that a repository has (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TopicNames </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoListTopicsAsync(String owner, String repo, Integer page, Integer limit, final ApiCallback<TopicName> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoListTopicsValidateBeforeCall(owner, repo, page, limit, _callback);
        Type localVarReturnType = new TypeToken<TopicName>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoMergePullRequest
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to merge (required)
     * @param mergePullRequestOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoMergePullRequestCall(String owner, String repo, Long index, MergePullRequestOption mergePullRequestOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mergePullRequestOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}/merge"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoMergePullRequestValidateBeforeCall(String owner, String repo, Long index, MergePullRequestOption mergePullRequestOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoMergePullRequest(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoMergePullRequest(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoMergePullRequest(Async)");
        }

        return repoMergePullRequestCall(owner, repo, index, mergePullRequestOption, _callback);

    }

    /**
     * Merge a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to merge (required)
     * @param mergePullRequestOption  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void repoMergePullRequest(String owner, String repo, Long index, MergePullRequestOption mergePullRequestOption) throws ApiException {
        repoMergePullRequestWithHttpInfo(owner, repo, index, mergePullRequestOption);
    }

    /**
     * Merge a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to merge (required)
     * @param mergePullRequestOption  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoMergePullRequestWithHttpInfo(String owner, String repo, Long index, MergePullRequestOption mergePullRequestOption) throws ApiException {
        okhttp3.Call localVarCall = repoMergePullRequestValidateBeforeCall(owner, repo, index, mergePullRequestOption, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Merge a pull request (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to merge (required)
     * @param mergePullRequestOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoMergePullRequestAsync(String owner, String repo, Long index, MergePullRequestOption mergePullRequestOption, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoMergePullRequestValidateBeforeCall(owner, repo, index, mergePullRequestOption, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoMigrate
     * @param migrateRepoOptions  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoMigrateCall(MigrateRepoOptions migrateRepoOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = migrateRepoOptions;

        // create path and map variables
        String localVarPath = "/repos/migrate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoMigrateValidateBeforeCall(MigrateRepoOptions migrateRepoOptions, final ApiCallback _callback) throws ApiException {
        return repoMigrateCall(migrateRepoOptions, _callback);

    }

    /**
     * Migrate a remote git repository
     * 
     * @param migrateRepoOptions  (optional)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Repository repoMigrate(MigrateRepoOptions migrateRepoOptions) throws ApiException {
        ApiResponse<Repository> localVarResp = repoMigrateWithHttpInfo(migrateRepoOptions);
        return localVarResp.getData();
    }

    /**
     * Migrate a remote git repository
     * 
     * @param migrateRepoOptions  (optional)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Repository> repoMigrateWithHttpInfo(MigrateRepoOptions migrateRepoOptions) throws ApiException {
        okhttp3.Call localVarCall = repoMigrateValidateBeforeCall(migrateRepoOptions, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Migrate a remote git repository (asynchronously)
     * 
     * @param migrateRepoOptions  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoMigrateAsync(MigrateRepoOptions migrateRepoOptions, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoMigrateValidateBeforeCall(migrateRepoOptions, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoMirrorSync
     * @param owner owner of the repo to sync (required)
     * @param repo name of the repo to sync (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoMirrorSyncCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/mirror-sync"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoMirrorSyncValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoMirrorSync(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoMirrorSync(Async)");
        }

        return repoMirrorSyncCall(owner, repo, _callback);

    }

    /**
     * Sync a mirrored repository
     * 
     * @param owner owner of the repo to sync (required)
     * @param repo name of the repo to sync (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void repoMirrorSync(String owner, String repo) throws ApiException {
        repoMirrorSyncWithHttpInfo(owner, repo);
    }

    /**
     * Sync a mirrored repository
     * 
     * @param owner owner of the repo to sync (required)
     * @param repo name of the repo to sync (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoMirrorSyncWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = repoMirrorSyncValidateBeforeCall(owner, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sync a mirrored repository (asynchronously)
     * 
     * @param owner owner of the repo to sync (required)
     * @param repo name of the repo to sync (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoMirrorSyncAsync(String owner, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoMirrorSyncValidateBeforeCall(owner, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoPullRequestIsMerged
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> pull request has been merged </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pull request has not been merged </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoPullRequestIsMergedCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}/merge"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoPullRequestIsMergedValidateBeforeCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoPullRequestIsMerged(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoPullRequestIsMerged(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoPullRequestIsMerged(Async)");
        }

        return repoPullRequestIsMergedCall(owner, repo, index, _callback);

    }

    /**
     * Check if a pull request has been merged
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> pull request has been merged </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pull request has not been merged </td><td>  -  </td></tr>
     </table>
     */
    public void repoPullRequestIsMerged(String owner, String repo, Long index) throws ApiException {
        repoPullRequestIsMergedWithHttpInfo(owner, repo, index);
    }

    /**
     * Check if a pull request has been merged
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> pull request has been merged </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pull request has not been merged </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoPullRequestIsMergedWithHttpInfo(String owner, String repo, Long index) throws ApiException {
        okhttp3.Call localVarCall = repoPullRequestIsMergedValidateBeforeCall(owner, repo, index, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a pull request has been merged (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> pull request has been merged </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pull request has not been merged </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoPullRequestIsMergedAsync(String owner, String repo, Long index, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoPullRequestIsMergedValidateBeforeCall(owner, repo, index, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoPushMirrorSync
     * @param owner owner of the repo to sync (required)
     * @param repo name of the repo to sync (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoPushMirrorSyncCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/push_mirrors-sync"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoPushMirrorSyncValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoPushMirrorSync(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoPushMirrorSync(Async)");
        }

        return repoPushMirrorSyncCall(owner, repo, _callback);

    }

    /**
     * Sync all push mirrored repository
     * 
     * @param owner owner of the repo to sync (required)
     * @param repo name of the repo to sync (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void repoPushMirrorSync(String owner, String repo) throws ApiException {
        repoPushMirrorSyncWithHttpInfo(owner, repo);
    }

    /**
     * Sync all push mirrored repository
     * 
     * @param owner owner of the repo to sync (required)
     * @param repo name of the repo to sync (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoPushMirrorSyncWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = repoPushMirrorSyncValidateBeforeCall(owner, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sync all push mirrored repository (asynchronously)
     * 
     * @param owner owner of the repo to sync (required)
     * @param repo name of the repo to sync (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoPushMirrorSyncAsync(String owner, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoPushMirrorSyncValidateBeforeCall(owner, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoSearch
     * @param q keyword (optional)
     * @param topic Limit search to repositories with keyword as topic (optional)
     * @param includeDesc include search of keyword within repository description (optional)
     * @param uid search only for repos that the user with the given id owns or contributes to (optional)
     * @param priorityOwnerId repo owner to prioritize in the results (optional)
     * @param teamId search only for repos that belong to the given team id (optional)
     * @param starredBy search only for repos that the user with the given id has starred (optional)
     * @param _private include private repositories this user has access to (defaults to true) (optional)
     * @param isPrivate show only pubic, private or all repositories (defaults to all) (optional)
     * @param template include template repositories this user has access to (defaults to true) (optional)
     * @param archived show only archived, non-archived or all repositories (defaults to all) (optional)
     * @param mode type of repository to search for. Supported values are \&quot;fork\&quot;, \&quot;source\&quot;, \&quot;mirror\&quot; and \&quot;collaborative\&quot; (optional)
     * @param exclusive if &#x60;uid&#x60; is given, search only for repos that the user owns (optional)
     * @param sort sort repos by attribute. Supported values are \&quot;alpha\&quot;, \&quot;created\&quot;, \&quot;updated\&quot;, \&quot;size\&quot;, and \&quot;id\&quot;. Default is \&quot;alpha\&quot; (optional)
     * @param order sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified. (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SearchResults </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoSearchCall(String q, Boolean topic, Boolean includeDesc, Long uid, Long priorityOwnerId, Long teamId, Long starredBy, Boolean _private, Boolean isPrivate, Boolean template, Boolean archived, String mode, Boolean exclusive, String sort, String order, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (topic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topic", topic));
        }

        if (includeDesc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDesc", includeDesc));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        if (priorityOwnerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority_owner_id", priorityOwnerId));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (starredBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starredBy", starredBy));
        }

        if (_private != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("private", _private));
        }

        if (isPrivate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_private", isPrivate));
        }

        if (template != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template", template));
        }

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (exclusive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclusive", exclusive));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoSearchValidateBeforeCall(String q, Boolean topic, Boolean includeDesc, Long uid, Long priorityOwnerId, Long teamId, Long starredBy, Boolean _private, Boolean isPrivate, Boolean template, Boolean archived, String mode, Boolean exclusive, String sort, String order, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return repoSearchCall(q, topic, includeDesc, uid, priorityOwnerId, teamId, starredBy, _private, isPrivate, template, archived, mode, exclusive, sort, order, page, limit, _callback);

    }

    /**
     * Search for repositories
     * 
     * @param q keyword (optional)
     * @param topic Limit search to repositories with keyword as topic (optional)
     * @param includeDesc include search of keyword within repository description (optional)
     * @param uid search only for repos that the user with the given id owns or contributes to (optional)
     * @param priorityOwnerId repo owner to prioritize in the results (optional)
     * @param teamId search only for repos that belong to the given team id (optional)
     * @param starredBy search only for repos that the user with the given id has starred (optional)
     * @param _private include private repositories this user has access to (defaults to true) (optional)
     * @param isPrivate show only pubic, private or all repositories (defaults to all) (optional)
     * @param template include template repositories this user has access to (defaults to true) (optional)
     * @param archived show only archived, non-archived or all repositories (defaults to all) (optional)
     * @param mode type of repository to search for. Supported values are \&quot;fork\&quot;, \&quot;source\&quot;, \&quot;mirror\&quot; and \&quot;collaborative\&quot; (optional)
     * @param exclusive if &#x60;uid&#x60; is given, search only for repos that the user owns (optional)
     * @param sort sort repos by attribute. Supported values are \&quot;alpha\&quot;, \&quot;created\&quot;, \&quot;updated\&quot;, \&quot;size\&quot;, and \&quot;id\&quot;. Default is \&quot;alpha\&quot; (optional)
     * @param order sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified. (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return SearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SearchResults </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public SearchResults repoSearch(String q, Boolean topic, Boolean includeDesc, Long uid, Long priorityOwnerId, Long teamId, Long starredBy, Boolean _private, Boolean isPrivate, Boolean template, Boolean archived, String mode, Boolean exclusive, String sort, String order, Integer page, Integer limit) throws ApiException {
        ApiResponse<SearchResults> localVarResp = repoSearchWithHttpInfo(q, topic, includeDesc, uid, priorityOwnerId, teamId, starredBy, _private, isPrivate, template, archived, mode, exclusive, sort, order, page, limit);
        return localVarResp.getData();
    }

    /**
     * Search for repositories
     * 
     * @param q keyword (optional)
     * @param topic Limit search to repositories with keyword as topic (optional)
     * @param includeDesc include search of keyword within repository description (optional)
     * @param uid search only for repos that the user with the given id owns or contributes to (optional)
     * @param priorityOwnerId repo owner to prioritize in the results (optional)
     * @param teamId search only for repos that belong to the given team id (optional)
     * @param starredBy search only for repos that the user with the given id has starred (optional)
     * @param _private include private repositories this user has access to (defaults to true) (optional)
     * @param isPrivate show only pubic, private or all repositories (defaults to all) (optional)
     * @param template include template repositories this user has access to (defaults to true) (optional)
     * @param archived show only archived, non-archived or all repositories (defaults to all) (optional)
     * @param mode type of repository to search for. Supported values are \&quot;fork\&quot;, \&quot;source\&quot;, \&quot;mirror\&quot; and \&quot;collaborative\&quot; (optional)
     * @param exclusive if &#x60;uid&#x60; is given, search only for repos that the user owns (optional)
     * @param sort sort repos by attribute. Supported values are \&quot;alpha\&quot;, \&quot;created\&quot;, \&quot;updated\&quot;, \&quot;size\&quot;, and \&quot;id\&quot;. Default is \&quot;alpha\&quot; (optional)
     * @param order sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified. (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;SearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SearchResults </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<SearchResults> repoSearchWithHttpInfo(String q, Boolean topic, Boolean includeDesc, Long uid, Long priorityOwnerId, Long teamId, Long starredBy, Boolean _private, Boolean isPrivate, Boolean template, Boolean archived, String mode, Boolean exclusive, String sort, String order, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoSearchValidateBeforeCall(q, topic, includeDesc, uid, priorityOwnerId, teamId, starredBy, _private, isPrivate, template, archived, mode, exclusive, sort, order, page, limit, null);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for repositories (asynchronously)
     * 
     * @param q keyword (optional)
     * @param topic Limit search to repositories with keyword as topic (optional)
     * @param includeDesc include search of keyword within repository description (optional)
     * @param uid search only for repos that the user with the given id owns or contributes to (optional)
     * @param priorityOwnerId repo owner to prioritize in the results (optional)
     * @param teamId search only for repos that belong to the given team id (optional)
     * @param starredBy search only for repos that the user with the given id has starred (optional)
     * @param _private include private repositories this user has access to (defaults to true) (optional)
     * @param isPrivate show only pubic, private or all repositories (defaults to all) (optional)
     * @param template include template repositories this user has access to (defaults to true) (optional)
     * @param archived show only archived, non-archived or all repositories (defaults to all) (optional)
     * @param mode type of repository to search for. Supported values are \&quot;fork\&quot;, \&quot;source\&quot;, \&quot;mirror\&quot; and \&quot;collaborative\&quot; (optional)
     * @param exclusive if &#x60;uid&#x60; is given, search only for repos that the user owns (optional)
     * @param sort sort repos by attribute. Supported values are \&quot;alpha\&quot;, \&quot;created\&quot;, \&quot;updated\&quot;, \&quot;size\&quot;, and \&quot;id\&quot;. Default is \&quot;alpha\&quot; (optional)
     * @param order sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified. (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SearchResults </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoSearchAsync(String q, Boolean topic, Boolean includeDesc, Long uid, Long priorityOwnerId, Long teamId, Long starredBy, Boolean _private, Boolean isPrivate, Boolean template, Boolean archived, String mode, Boolean exclusive, String sort, String order, Integer page, Integer limit, final ApiCallback<SearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoSearchValidateBeforeCall(q, topic, includeDesc, uid, priorityOwnerId, teamId, starredBy, _private, isPrivate, template, archived, mode, exclusive, sort, order, page, limit, _callback);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoSigningKey
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GPG armored public key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoSigningKeyCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/signing-key.gpg"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoSigningKeyValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoSigningKey(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoSigningKey(Async)");
        }

        return repoSigningKeyCall(owner, repo, _callback);

    }

    /**
     * Get signing-key.gpg for given repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GPG armored public key </td><td>  -  </td></tr>
     </table>
     */
    public String repoSigningKey(String owner, String repo) throws ApiException {
        ApiResponse<String> localVarResp = repoSigningKeyWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get signing-key.gpg for given repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GPG armored public key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> repoSigningKeyWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = repoSigningKeyValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get signing-key.gpg for given repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GPG armored public key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoSigningKeyAsync(String owner, String repo, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoSigningKeyValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoSubmitPullReview
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @param submitPullReviewOptions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoSubmitPullReviewCall(String owner, String repo, Long index, Long id, SubmitPullReviewOptions submitPullReviewOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = submitPullReviewOptions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoSubmitPullReviewValidateBeforeCall(String owner, String repo, Long index, Long id, SubmitPullReviewOptions submitPullReviewOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoSubmitPullReview(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoSubmitPullReview(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoSubmitPullReview(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoSubmitPullReview(Async)");
        }

        // verify the required parameter 'submitPullReviewOptions' is set
        if (submitPullReviewOptions == null) {
            throw new ApiException("Missing the required parameter 'submitPullReviewOptions' when calling repoSubmitPullReview(Async)");
        }

        return repoSubmitPullReviewCall(owner, repo, index, id, submitPullReviewOptions, _callback);

    }

    /**
     * Submit a pending review to an pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @param submitPullReviewOptions  (required)
     * @return PullReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public PullReview repoSubmitPullReview(String owner, String repo, Long index, Long id, SubmitPullReviewOptions submitPullReviewOptions) throws ApiException {
        ApiResponse<PullReview> localVarResp = repoSubmitPullReviewWithHttpInfo(owner, repo, index, id, submitPullReviewOptions);
        return localVarResp.getData();
    }

    /**
     * Submit a pending review to an pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @param submitPullReviewOptions  (required)
     * @return ApiResponse&lt;PullReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<PullReview> repoSubmitPullReviewWithHttpInfo(String owner, String repo, Long index, Long id, SubmitPullReviewOptions submitPullReviewOptions) throws ApiException {
        okhttp3.Call localVarCall = repoSubmitPullReviewValidateBeforeCall(owner, repo, index, id, submitPullReviewOptions, null);
        Type localVarReturnType = new TypeToken<PullReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a pending review to an pull request (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @param submitPullReviewOptions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoSubmitPullReviewAsync(String owner, String repo, Long index, Long id, SubmitPullReviewOptions submitPullReviewOptions, final ApiCallback<PullReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoSubmitPullReviewValidateBeforeCall(owner, repo, index, id, submitPullReviewOptions, _callback);
        Type localVarReturnType = new TypeToken<PullReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoTestHook
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to test (required)
     * @param ref The name of the commit/branch/tag, indicates which commit will be loaded to the webhook payload. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoTestHookCall(String owner, String repo, Long id, String ref, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/hooks/{id}/tests"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoTestHookValidateBeforeCall(String owner, String repo, Long id, String ref, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoTestHook(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoTestHook(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoTestHook(Async)");
        }

        return repoTestHookCall(owner, repo, id, ref, _callback);

    }

    /**
     * Test a push webhook
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to test (required)
     * @param ref The name of the commit/branch/tag, indicates which commit will be loaded to the webhook payload. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public void repoTestHook(String owner, String repo, Long id, String ref) throws ApiException {
        repoTestHookWithHttpInfo(owner, repo, id, ref);
    }

    /**
     * Test a push webhook
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to test (required)
     * @param ref The name of the commit/branch/tag, indicates which commit will be loaded to the webhook payload. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoTestHookWithHttpInfo(String owner, String repo, Long id, String ref) throws ApiException {
        okhttp3.Call localVarCall = repoTestHookValidateBeforeCall(owner, repo, id, ref, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Test a push webhook (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the hook to test (required)
     * @param ref The name of the commit/branch/tag, indicates which commit will be loaded to the webhook payload. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoTestHookAsync(String owner, String repo, Long id, String ref, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoTestHookValidateBeforeCall(owner, repo, id, ref, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoTrackedTimes
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param user optional filter by user (available for issue managers) (optional)
     * @param since Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTimeList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoTrackedTimesCall(String owner, String repo, String user, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/times"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoTrackedTimesValidateBeforeCall(String owner, String repo, String user, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoTrackedTimes(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoTrackedTimes(Async)");
        }

        return repoTrackedTimesCall(owner, repo, user, since, before, page, limit, _callback);

    }

    /**
     * List a repo&#39;s tracked times
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param user optional filter by user (available for issue managers) (optional)
     * @param since Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;TrackedTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTimeList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public List<TrackedTime> repoTrackedTimes(String owner, String repo, String user, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<TrackedTime>> localVarResp = repoTrackedTimesWithHttpInfo(owner, repo, user, since, before, page, limit);
        return localVarResp.getData();
    }

    /**
     * List a repo&#39;s tracked times
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param user optional filter by user (available for issue managers) (optional)
     * @param since Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;TrackedTime&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTimeList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<TrackedTime>> repoTrackedTimesWithHttpInfo(String owner, String repo, String user, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = repoTrackedTimesValidateBeforeCall(owner, repo, user, since, before, page, limit, null);
        Type localVarReturnType = new TypeToken<List<TrackedTime>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a repo&#39;s tracked times (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param user optional filter by user (available for issue managers) (optional)
     * @param since Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTimeList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoTrackedTimesAsync(String owner, String repo, String user, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit, final ApiCallback<List<TrackedTime>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoTrackedTimesValidateBeforeCall(owner, repo, user, since, before, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<TrackedTime>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoTransfer
     * @param owner owner of the repo to transfer (required)
     * @param repo name of the repo to transfer (required)
     * @param transferRepoOption Transfer Options (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoTransferCall(String owner, String repo, TransferRepoOption transferRepoOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferRepoOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/transfer"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoTransferValidateBeforeCall(String owner, String repo, TransferRepoOption transferRepoOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoTransfer(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoTransfer(Async)");
        }

        // verify the required parameter 'transferRepoOption' is set
        if (transferRepoOption == null) {
            throw new ApiException("Missing the required parameter 'transferRepoOption' when calling repoTransfer(Async)");
        }

        return repoTransferCall(owner, repo, transferRepoOption, _callback);

    }

    /**
     * Transfer a repo ownership
     * 
     * @param owner owner of the repo to transfer (required)
     * @param repo name of the repo to transfer (required)
     * @param transferRepoOption Transfer Options (required)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Repository repoTransfer(String owner, String repo, TransferRepoOption transferRepoOption) throws ApiException {
        ApiResponse<Repository> localVarResp = repoTransferWithHttpInfo(owner, repo, transferRepoOption);
        return localVarResp.getData();
    }

    /**
     * Transfer a repo ownership
     * 
     * @param owner owner of the repo to transfer (required)
     * @param repo name of the repo to transfer (required)
     * @param transferRepoOption Transfer Options (required)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Repository> repoTransferWithHttpInfo(String owner, String repo, TransferRepoOption transferRepoOption) throws ApiException {
        okhttp3.Call localVarCall = repoTransferValidateBeforeCall(owner, repo, transferRepoOption, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer a repo ownership (asynchronously)
     * 
     * @param owner owner of the repo to transfer (required)
     * @param repo name of the repo to transfer (required)
     * @param transferRepoOption Transfer Options (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoTransferAsync(String owner, String repo, TransferRepoOption transferRepoOption, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoTransferValidateBeforeCall(owner, repo, transferRepoOption, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoUnDismissPullReview
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoUnDismissPullReviewCall(String owner, String repo, Long index, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/undismissals"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoUnDismissPullReviewValidateBeforeCall(String owner, String repo, Long index, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoUnDismissPullReview(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoUnDismissPullReview(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoUnDismissPullReview(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repoUnDismissPullReview(Async)");
        }

        return repoUnDismissPullReviewCall(owner, repo, index, id, _callback);

    }

    /**
     * Cancel to dismiss a review for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @return PullReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public PullReview repoUnDismissPullReview(String owner, String repo, Long index, Long id) throws ApiException {
        ApiResponse<PullReview> localVarResp = repoUnDismissPullReviewWithHttpInfo(owner, repo, index, id);
        return localVarResp.getData();
    }

    /**
     * Cancel to dismiss a review for a pull request
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @return ApiResponse&lt;PullReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<PullReview> repoUnDismissPullReviewWithHttpInfo(String owner, String repo, Long index, Long id) throws ApiException {
        okhttp3.Call localVarCall = repoUnDismissPullReviewValidateBeforeCall(owner, repo, index, id, null);
        Type localVarReturnType = new TypeToken<PullReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel to dismiss a review for a pull request (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request (required)
     * @param id id of the review (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PullReview </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoUnDismissPullReviewAsync(String owner, String repo, Long index, Long id, final ApiCallback<PullReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoUnDismissPullReviewValidateBeforeCall(owner, repo, index, id, _callback);
        Type localVarReturnType = new TypeToken<PullReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoUpdateFile
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath path of the file to update (required)
     * @param updateFileOptions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FileResponse </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoUpdateFileCall(String owner, String repo, String filepath, UpdateFileOptions updateFileOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFileOptions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/contents/{filepath}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "filepath" + "}", localVarApiClient.escapeString(filepath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoUpdateFileValidateBeforeCall(String owner, String repo, String filepath, UpdateFileOptions updateFileOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoUpdateFile(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoUpdateFile(Async)");
        }

        // verify the required parameter 'filepath' is set
        if (filepath == null) {
            throw new ApiException("Missing the required parameter 'filepath' when calling repoUpdateFile(Async)");
        }

        // verify the required parameter 'updateFileOptions' is set
        if (updateFileOptions == null) {
            throw new ApiException("Missing the required parameter 'updateFileOptions' when calling repoUpdateFile(Async)");
        }

        return repoUpdateFileCall(owner, repo, filepath, updateFileOptions, _callback);

    }

    /**
     * Update a file in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath path of the file to update (required)
     * @param updateFileOptions  (required)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FileResponse </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public FileResponse repoUpdateFile(String owner, String repo, String filepath, UpdateFileOptions updateFileOptions) throws ApiException {
        ApiResponse<FileResponse> localVarResp = repoUpdateFileWithHttpInfo(owner, repo, filepath, updateFileOptions);
        return localVarResp.getData();
    }

    /**
     * Update a file in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath path of the file to update (required)
     * @param updateFileOptions  (required)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FileResponse </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<FileResponse> repoUpdateFileWithHttpInfo(String owner, String repo, String filepath, UpdateFileOptions updateFileOptions) throws ApiException {
        okhttp3.Call localVarCall = repoUpdateFileValidateBeforeCall(owner, repo, filepath, updateFileOptions, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a file in a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param filepath path of the file to update (required)
     * @param updateFileOptions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FileResponse </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoUpdateFileAsync(String owner, String repo, String filepath, UpdateFileOptions updateFileOptions, final ApiCallback<FileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoUpdateFileValidateBeforeCall(owner, repo, filepath, updateFileOptions, _callback);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoUpdatePullRequest
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param style how to update pull request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoUpdatePullRequestCall(String owner, String repo, Long index, String style, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{index}/update"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (style != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("style", style));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoUpdatePullRequestValidateBeforeCall(String owner, String repo, Long index, String style, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoUpdatePullRequest(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoUpdatePullRequest(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling repoUpdatePullRequest(Async)");
        }

        return repoUpdatePullRequestCall(owner, repo, index, style, _callback);

    }

    /**
     * Merge PR&#39;s baseBranch into headBranch
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param style how to update pull request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void repoUpdatePullRequest(String owner, String repo, Long index, String style) throws ApiException {
        repoUpdatePullRequestWithHttpInfo(owner, repo, index, style);
    }

    /**
     * Merge PR&#39;s baseBranch into headBranch
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param style how to update pull request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoUpdatePullRequestWithHttpInfo(String owner, String repo, Long index, String style) throws ApiException {
        okhttp3.Call localVarCall = repoUpdatePullRequestValidateBeforeCall(owner, repo, index, style, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Merge PR&#39;s baseBranch into headBranch (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the pull request to get (required)
     * @param style how to update pull request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoUpdatePullRequestAsync(String owner, String repo, Long index, String style, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoUpdatePullRequestValidateBeforeCall(owner, repo, index, style, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoUpdateTopics
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param repoTopicOptions  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIInvalidTopicsError is error format response to invalid topics </td><td>  * invalidTopics -  <br>  * message -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoUpdateTopicsCall(String owner, String repo, RepoTopicOptions repoTopicOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = repoTopicOptions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/topics"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoUpdateTopicsValidateBeforeCall(String owner, String repo, RepoTopicOptions repoTopicOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoUpdateTopics(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoUpdateTopics(Async)");
        }

        return repoUpdateTopicsCall(owner, repo, repoTopicOptions, _callback);

    }

    /**
     * Replace list of topics for a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param repoTopicOptions  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIInvalidTopicsError is error format response to invalid topics </td><td>  * invalidTopics -  <br>  * message -  <br>  </td></tr>
     </table>
     */
    public void repoUpdateTopics(String owner, String repo, RepoTopicOptions repoTopicOptions) throws ApiException {
        repoUpdateTopicsWithHttpInfo(owner, repo, repoTopicOptions);
    }

    /**
     * Replace list of topics for a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param repoTopicOptions  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIInvalidTopicsError is error format response to invalid topics </td><td>  * invalidTopics -  <br>  * message -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> repoUpdateTopicsWithHttpInfo(String owner, String repo, RepoTopicOptions repoTopicOptions) throws ApiException {
        okhttp3.Call localVarCall = repoUpdateTopicsValidateBeforeCall(owner, repo, repoTopicOptions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Replace list of topics for a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param repoTopicOptions  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIInvalidTopicsError is error format response to invalid topics </td><td>  * invalidTopics -  <br>  * message -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call repoUpdateTopicsAsync(String owner, String repo, RepoTopicOptions repoTopicOptions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoUpdateTopicsValidateBeforeCall(owner, repo, repoTopicOptions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repoValidateIssueConfig
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepoIssueConfigValidation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoValidateIssueConfigCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issue_config/validate"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repoValidateIssueConfigValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling repoValidateIssueConfig(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling repoValidateIssueConfig(Async)");
        }

        return repoValidateIssueConfigCall(owner, repo, _callback);

    }

    /**
     * Returns the validation information for a issue config
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return IssueConfigValidation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepoIssueConfigValidation </td><td>  -  </td></tr>
     </table>
     */
    public IssueConfigValidation repoValidateIssueConfig(String owner, String repo) throws ApiException {
        ApiResponse<IssueConfigValidation> localVarResp = repoValidateIssueConfigWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Returns the validation information for a issue config
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return ApiResponse&lt;IssueConfigValidation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepoIssueConfigValidation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IssueConfigValidation> repoValidateIssueConfigWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = repoValidateIssueConfigValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<IssueConfigValidation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the validation information for a issue config (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepoIssueConfigValidation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repoValidateIssueConfigAsync(String owner, String repo, final ApiCallback<IssueConfigValidation> _callback) throws ApiException {

        okhttp3.Call localVarCall = repoValidateIssueConfigValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<IssueConfigValidation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicSearch
     * @param q keywords to search (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TopicListResponse </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call topicSearchCall(String q, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/topics/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicSearchValidateBeforeCall(String q, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling topicSearch(Async)");
        }

        return topicSearchCall(q, page, limit, _callback);

    }

    /**
     * search topics via keyword
     * 
     * @param q keywords to search (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;TopicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TopicListResponse </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public List<TopicResponse> topicSearch(String q, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<TopicResponse>> localVarResp = topicSearchWithHttpInfo(q, page, limit);
        return localVarResp.getData();
    }

    /**
     * search topics via keyword
     * 
     * @param q keywords to search (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;TopicResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TopicListResponse </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<TopicResponse>> topicSearchWithHttpInfo(String q, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = topicSearchValidateBeforeCall(q, page, limit, null);
        Type localVarReturnType = new TypeToken<List<TopicResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * search topics via keyword (asynchronously)
     * 
     * @param q keywords to search (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TopicListResponse </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call topicSearchAsync(String q, Integer page, Integer limit, final ApiCallback<List<TopicResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicSearchValidateBeforeCall(q, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<TopicResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentCheckSubscription
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WatchInfo </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User is not watching this repo or repo do not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentCheckSubscriptionCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/subscription"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentCheckSubscriptionValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling userCurrentCheckSubscription(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling userCurrentCheckSubscription(Async)");
        }

        return userCurrentCheckSubscriptionCall(owner, repo, _callback);

    }

    /**
     * Check if the current user is watching a repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return WatchInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WatchInfo </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User is not watching this repo or repo do not exist </td><td>  -  </td></tr>
     </table>
     */
    public WatchInfo userCurrentCheckSubscription(String owner, String repo) throws ApiException {
        ApiResponse<WatchInfo> localVarResp = userCurrentCheckSubscriptionWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Check if the current user is watching a repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return ApiResponse&lt;WatchInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WatchInfo </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User is not watching this repo or repo do not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WatchInfo> userCurrentCheckSubscriptionWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = userCurrentCheckSubscriptionValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<WatchInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if the current user is watching a repo (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WatchInfo </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User is not watching this repo or repo do not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentCheckSubscriptionAsync(String owner, String repo, final ApiCallback<WatchInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentCheckSubscriptionValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<WatchInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentDeleteSubscription
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentDeleteSubscriptionCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/subscription"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentDeleteSubscriptionValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling userCurrentDeleteSubscription(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling userCurrentDeleteSubscription(Async)");
        }

        return userCurrentDeleteSubscriptionCall(owner, repo, _callback);

    }

    /**
     * Unwatch a repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public void userCurrentDeleteSubscription(String owner, String repo) throws ApiException {
        userCurrentDeleteSubscriptionWithHttpInfo(owner, repo);
    }

    /**
     * Unwatch a repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userCurrentDeleteSubscriptionWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = userCurrentDeleteSubscriptionValidateBeforeCall(owner, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unwatch a repo (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentDeleteSubscriptionAsync(String owner, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentDeleteSubscriptionValidateBeforeCall(owner, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentPutSubscription
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WatchInfo </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentPutSubscriptionCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/subscription"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentPutSubscriptionValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling userCurrentPutSubscription(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling userCurrentPutSubscription(Async)");
        }

        return userCurrentPutSubscriptionCall(owner, repo, _callback);

    }

    /**
     * Watch a repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return WatchInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WatchInfo </td><td>  -  </td></tr>
     </table>
     */
    public WatchInfo userCurrentPutSubscription(String owner, String repo) throws ApiException {
        ApiResponse<WatchInfo> localVarResp = userCurrentPutSubscriptionWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Watch a repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return ApiResponse&lt;WatchInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WatchInfo </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WatchInfo> userCurrentPutSubscriptionWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = userCurrentPutSubscriptionValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<WatchInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Watch a repo (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WatchInfo </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentPutSubscriptionAsync(String owner, String repo, final ApiCallback<WatchInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentPutSubscriptionValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<WatchInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userTrackedTimes
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param user username of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTimeList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call userTrackedTimesCall(String owner, String repo, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/times/{user}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call userTrackedTimesValidateBeforeCall(String owner, String repo, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling userTrackedTimes(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling userTrackedTimes(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling userTrackedTimes(Async)");
        }

        return userTrackedTimesCall(owner, repo, user, _callback);

    }

    /**
     * List a user&#39;s tracked times in a repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param user username of user (required)
     * @return List&lt;TrackedTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTimeList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public List<TrackedTime> userTrackedTimes(String owner, String repo, String user) throws ApiException {
        ApiResponse<List<TrackedTime>> localVarResp = userTrackedTimesWithHttpInfo(owner, repo, user);
        return localVarResp.getData();
    }

    /**
     * List a user&#39;s tracked times in a repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param user username of user (required)
     * @return ApiResponse&lt;List&lt;TrackedTime&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTimeList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<TrackedTime>> userTrackedTimesWithHttpInfo(String owner, String repo, String user) throws ApiException {
        okhttp3.Call localVarCall = userTrackedTimesValidateBeforeCall(owner, repo, user, null);
        Type localVarReturnType = new TypeToken<List<TrackedTime>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a user&#39;s tracked times in a repo (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param user username of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTimeList </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call userTrackedTimesAsync(String owner, String repo, String user, final ApiCallback<List<TrackedTime>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userTrackedTimesValidateBeforeCall(owner, repo, user, _callback);
        Type localVarReturnType = new TypeToken<List<TrackedTime>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
