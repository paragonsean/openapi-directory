/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GeneralUISettings contains global ui settings exposed by API
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:48.734827-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GeneralUISettings {
  public static final String SERIALIZED_NAME_ALLOWED_REACTIONS = "allowed_reactions";
  @SerializedName(SERIALIZED_NAME_ALLOWED_REACTIONS)
  private List<String> allowedReactions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_EMOJIS = "custom_emojis";
  @SerializedName(SERIALIZED_NAME_CUSTOM_EMOJIS)
  private List<String> customEmojis = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_THEME = "default_theme";
  @SerializedName(SERIALIZED_NAME_DEFAULT_THEME)
  private String defaultTheme;

  public GeneralUISettings() {
  }

  public GeneralUISettings allowedReactions(List<String> allowedReactions) {
    this.allowedReactions = allowedReactions;
    return this;
  }

  public GeneralUISettings addAllowedReactionsItem(String allowedReactionsItem) {
    if (this.allowedReactions == null) {
      this.allowedReactions = new ArrayList<>();
    }
    this.allowedReactions.add(allowedReactionsItem);
    return this;
  }

  /**
   * Get allowedReactions
   * @return allowedReactions
   */
  @javax.annotation.Nullable
  public List<String> getAllowedReactions() {
    return allowedReactions;
  }

  public void setAllowedReactions(List<String> allowedReactions) {
    this.allowedReactions = allowedReactions;
  }


  public GeneralUISettings customEmojis(List<String> customEmojis) {
    this.customEmojis = customEmojis;
    return this;
  }

  public GeneralUISettings addCustomEmojisItem(String customEmojisItem) {
    if (this.customEmojis == null) {
      this.customEmojis = new ArrayList<>();
    }
    this.customEmojis.add(customEmojisItem);
    return this;
  }

  /**
   * Get customEmojis
   * @return customEmojis
   */
  @javax.annotation.Nullable
  public List<String> getCustomEmojis() {
    return customEmojis;
  }

  public void setCustomEmojis(List<String> customEmojis) {
    this.customEmojis = customEmojis;
  }


  public GeneralUISettings defaultTheme(String defaultTheme) {
    this.defaultTheme = defaultTheme;
    return this;
  }

  /**
   * Get defaultTheme
   * @return defaultTheme
   */
  @javax.annotation.Nullable
  public String getDefaultTheme() {
    return defaultTheme;
  }

  public void setDefaultTheme(String defaultTheme) {
    this.defaultTheme = defaultTheme;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeneralUISettings generalUISettings = (GeneralUISettings) o;
    return Objects.equals(this.allowedReactions, generalUISettings.allowedReactions) &&
        Objects.equals(this.customEmojis, generalUISettings.customEmojis) &&
        Objects.equals(this.defaultTheme, generalUISettings.defaultTheme);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedReactions, customEmojis, defaultTheme);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeneralUISettings {\n");
    sb.append("    allowedReactions: ").append(toIndentedString(allowedReactions)).append("\n");
    sb.append("    customEmojis: ").append(toIndentedString(customEmojis)).append("\n");
    sb.append("    defaultTheme: ").append(toIndentedString(defaultTheme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_reactions");
    openapiFields.add("custom_emojis");
    openapiFields.add("default_theme");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GeneralUISettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GeneralUISettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GeneralUISettings is not found in the empty JSON string", GeneralUISettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GeneralUISettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GeneralUISettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_reactions") != null && !jsonObj.get("allowed_reactions").isJsonNull() && !jsonObj.get("allowed_reactions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_reactions` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_reactions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("custom_emojis") != null && !jsonObj.get("custom_emojis").isJsonNull() && !jsonObj.get("custom_emojis").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_emojis` to be an array in the JSON string but got `%s`", jsonObj.get("custom_emojis").toString()));
      }
      if ((jsonObj.get("default_theme") != null && !jsonObj.get("default_theme").isJsonNull()) && !jsonObj.get("default_theme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_theme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_theme").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GeneralUISettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GeneralUISettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GeneralUISettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GeneralUISettings.class));

       return (TypeAdapter<T>) new TypeAdapter<GeneralUISettings>() {
           @Override
           public void write(JsonWriter out, GeneralUISettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GeneralUISettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GeneralUISettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GeneralUISettings
   * @throws IOException if the JSON string is invalid with respect to GeneralUISettings
   */
  public static GeneralUISettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GeneralUISettings.class);
  }

  /**
   * Convert an instance of GeneralUISettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

