/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BranchProtection represents a branch protection for a repository
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:48.734827-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BranchProtection {
  public static final String SERIALIZED_NAME_APPROVALS_WHITELIST_TEAMS = "approvals_whitelist_teams";
  @SerializedName(SERIALIZED_NAME_APPROVALS_WHITELIST_TEAMS)
  private List<String> approvalsWhitelistTeams = new ArrayList<>();

  public static final String SERIALIZED_NAME_APPROVALS_WHITELIST_USERNAME = "approvals_whitelist_username";
  @SerializedName(SERIALIZED_NAME_APPROVALS_WHITELIST_USERNAME)
  private List<String> approvalsWhitelistUsername = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLOCK_ON_OFFICIAL_REVIEW_REQUESTS = "block_on_official_review_requests";
  @SerializedName(SERIALIZED_NAME_BLOCK_ON_OFFICIAL_REVIEW_REQUESTS)
  private Boolean blockOnOfficialReviewRequests;

  public static final String SERIALIZED_NAME_BLOCK_ON_OUTDATED_BRANCH = "block_on_outdated_branch";
  @SerializedName(SERIALIZED_NAME_BLOCK_ON_OUTDATED_BRANCH)
  private Boolean blockOnOutdatedBranch;

  public static final String SERIALIZED_NAME_BLOCK_ON_REJECTED_REVIEWS = "block_on_rejected_reviews";
  @SerializedName(SERIALIZED_NAME_BLOCK_ON_REJECTED_REVIEWS)
  private Boolean blockOnRejectedReviews;

  public static final String SERIALIZED_NAME_BRANCH_NAME = "branch_name";
  @SerializedName(SERIALIZED_NAME_BRANCH_NAME)
  private String branchName;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DISMISS_STALE_APPROVALS = "dismiss_stale_approvals";
  @SerializedName(SERIALIZED_NAME_DISMISS_STALE_APPROVALS)
  private Boolean dismissStaleApprovals;

  public static final String SERIALIZED_NAME_ENABLE_APPROVALS_WHITELIST = "enable_approvals_whitelist";
  @SerializedName(SERIALIZED_NAME_ENABLE_APPROVALS_WHITELIST)
  private Boolean enableApprovalsWhitelist;

  public static final String SERIALIZED_NAME_ENABLE_MERGE_WHITELIST = "enable_merge_whitelist";
  @SerializedName(SERIALIZED_NAME_ENABLE_MERGE_WHITELIST)
  private Boolean enableMergeWhitelist;

  public static final String SERIALIZED_NAME_ENABLE_PUSH = "enable_push";
  @SerializedName(SERIALIZED_NAME_ENABLE_PUSH)
  private Boolean enablePush;

  public static final String SERIALIZED_NAME_ENABLE_PUSH_WHITELIST = "enable_push_whitelist";
  @SerializedName(SERIALIZED_NAME_ENABLE_PUSH_WHITELIST)
  private Boolean enablePushWhitelist;

  public static final String SERIALIZED_NAME_ENABLE_STATUS_CHECK = "enable_status_check";
  @SerializedName(SERIALIZED_NAME_ENABLE_STATUS_CHECK)
  private Boolean enableStatusCheck;

  public static final String SERIALIZED_NAME_MERGE_WHITELIST_TEAMS = "merge_whitelist_teams";
  @SerializedName(SERIALIZED_NAME_MERGE_WHITELIST_TEAMS)
  private List<String> mergeWhitelistTeams = new ArrayList<>();

  public static final String SERIALIZED_NAME_MERGE_WHITELIST_USERNAMES = "merge_whitelist_usernames";
  @SerializedName(SERIALIZED_NAME_MERGE_WHITELIST_USERNAMES)
  private List<String> mergeWhitelistUsernames = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROTECTED_FILE_PATTERNS = "protected_file_patterns";
  @SerializedName(SERIALIZED_NAME_PROTECTED_FILE_PATTERNS)
  private String protectedFilePatterns;

  public static final String SERIALIZED_NAME_PUSH_WHITELIST_DEPLOY_KEYS = "push_whitelist_deploy_keys";
  @SerializedName(SERIALIZED_NAME_PUSH_WHITELIST_DEPLOY_KEYS)
  private Boolean pushWhitelistDeployKeys;

  public static final String SERIALIZED_NAME_PUSH_WHITELIST_TEAMS = "push_whitelist_teams";
  @SerializedName(SERIALIZED_NAME_PUSH_WHITELIST_TEAMS)
  private List<String> pushWhitelistTeams = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUSH_WHITELIST_USERNAMES = "push_whitelist_usernames";
  @SerializedName(SERIALIZED_NAME_PUSH_WHITELIST_USERNAMES)
  private List<String> pushWhitelistUsernames = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRE_SIGNED_COMMITS = "require_signed_commits";
  @SerializedName(SERIALIZED_NAME_REQUIRE_SIGNED_COMMITS)
  private Boolean requireSignedCommits;

  public static final String SERIALIZED_NAME_REQUIRED_APPROVALS = "required_approvals";
  @SerializedName(SERIALIZED_NAME_REQUIRED_APPROVALS)
  private Long requiredApprovals;

  public static final String SERIALIZED_NAME_RULE_NAME = "rule_name";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;

  public static final String SERIALIZED_NAME_STATUS_CHECK_CONTEXTS = "status_check_contexts";
  @SerializedName(SERIALIZED_NAME_STATUS_CHECK_CONTEXTS)
  private List<String> statusCheckContexts = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNPROTECTED_FILE_PATTERNS = "unprotected_file_patterns";
  @SerializedName(SERIALIZED_NAME_UNPROTECTED_FILE_PATTERNS)
  private String unprotectedFilePatterns;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public BranchProtection() {
  }

  public BranchProtection approvalsWhitelistTeams(List<String> approvalsWhitelistTeams) {
    this.approvalsWhitelistTeams = approvalsWhitelistTeams;
    return this;
  }

  public BranchProtection addApprovalsWhitelistTeamsItem(String approvalsWhitelistTeamsItem) {
    if (this.approvalsWhitelistTeams == null) {
      this.approvalsWhitelistTeams = new ArrayList<>();
    }
    this.approvalsWhitelistTeams.add(approvalsWhitelistTeamsItem);
    return this;
  }

  /**
   * Get approvalsWhitelistTeams
   * @return approvalsWhitelistTeams
   */
  @javax.annotation.Nullable
  public List<String> getApprovalsWhitelistTeams() {
    return approvalsWhitelistTeams;
  }

  public void setApprovalsWhitelistTeams(List<String> approvalsWhitelistTeams) {
    this.approvalsWhitelistTeams = approvalsWhitelistTeams;
  }


  public BranchProtection approvalsWhitelistUsername(List<String> approvalsWhitelistUsername) {
    this.approvalsWhitelistUsername = approvalsWhitelistUsername;
    return this;
  }

  public BranchProtection addApprovalsWhitelistUsernameItem(String approvalsWhitelistUsernameItem) {
    if (this.approvalsWhitelistUsername == null) {
      this.approvalsWhitelistUsername = new ArrayList<>();
    }
    this.approvalsWhitelistUsername.add(approvalsWhitelistUsernameItem);
    return this;
  }

  /**
   * Get approvalsWhitelistUsername
   * @return approvalsWhitelistUsername
   */
  @javax.annotation.Nullable
  public List<String> getApprovalsWhitelistUsername() {
    return approvalsWhitelistUsername;
  }

  public void setApprovalsWhitelistUsername(List<String> approvalsWhitelistUsername) {
    this.approvalsWhitelistUsername = approvalsWhitelistUsername;
  }


  public BranchProtection blockOnOfficialReviewRequests(Boolean blockOnOfficialReviewRequests) {
    this.blockOnOfficialReviewRequests = blockOnOfficialReviewRequests;
    return this;
  }

  /**
   * Get blockOnOfficialReviewRequests
   * @return blockOnOfficialReviewRequests
   */
  @javax.annotation.Nullable
  public Boolean getBlockOnOfficialReviewRequests() {
    return blockOnOfficialReviewRequests;
  }

  public void setBlockOnOfficialReviewRequests(Boolean blockOnOfficialReviewRequests) {
    this.blockOnOfficialReviewRequests = blockOnOfficialReviewRequests;
  }


  public BranchProtection blockOnOutdatedBranch(Boolean blockOnOutdatedBranch) {
    this.blockOnOutdatedBranch = blockOnOutdatedBranch;
    return this;
  }

  /**
   * Get blockOnOutdatedBranch
   * @return blockOnOutdatedBranch
   */
  @javax.annotation.Nullable
  public Boolean getBlockOnOutdatedBranch() {
    return blockOnOutdatedBranch;
  }

  public void setBlockOnOutdatedBranch(Boolean blockOnOutdatedBranch) {
    this.blockOnOutdatedBranch = blockOnOutdatedBranch;
  }


  public BranchProtection blockOnRejectedReviews(Boolean blockOnRejectedReviews) {
    this.blockOnRejectedReviews = blockOnRejectedReviews;
    return this;
  }

  /**
   * Get blockOnRejectedReviews
   * @return blockOnRejectedReviews
   */
  @javax.annotation.Nullable
  public Boolean getBlockOnRejectedReviews() {
    return blockOnRejectedReviews;
  }

  public void setBlockOnRejectedReviews(Boolean blockOnRejectedReviews) {
    this.blockOnRejectedReviews = blockOnRejectedReviews;
  }


  public BranchProtection branchName(String branchName) {
    this.branchName = branchName;
    return this;
  }

  /**
   * Deprecated: true
   * @return branchName
   */
  @javax.annotation.Nullable
  public String getBranchName() {
    return branchName;
  }

  public void setBranchName(String branchName) {
    this.branchName = branchName;
  }


  public BranchProtection createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public BranchProtection dismissStaleApprovals(Boolean dismissStaleApprovals) {
    this.dismissStaleApprovals = dismissStaleApprovals;
    return this;
  }

  /**
   * Get dismissStaleApprovals
   * @return dismissStaleApprovals
   */
  @javax.annotation.Nullable
  public Boolean getDismissStaleApprovals() {
    return dismissStaleApprovals;
  }

  public void setDismissStaleApprovals(Boolean dismissStaleApprovals) {
    this.dismissStaleApprovals = dismissStaleApprovals;
  }


  public BranchProtection enableApprovalsWhitelist(Boolean enableApprovalsWhitelist) {
    this.enableApprovalsWhitelist = enableApprovalsWhitelist;
    return this;
  }

  /**
   * Get enableApprovalsWhitelist
   * @return enableApprovalsWhitelist
   */
  @javax.annotation.Nullable
  public Boolean getEnableApprovalsWhitelist() {
    return enableApprovalsWhitelist;
  }

  public void setEnableApprovalsWhitelist(Boolean enableApprovalsWhitelist) {
    this.enableApprovalsWhitelist = enableApprovalsWhitelist;
  }


  public BranchProtection enableMergeWhitelist(Boolean enableMergeWhitelist) {
    this.enableMergeWhitelist = enableMergeWhitelist;
    return this;
  }

  /**
   * Get enableMergeWhitelist
   * @return enableMergeWhitelist
   */
  @javax.annotation.Nullable
  public Boolean getEnableMergeWhitelist() {
    return enableMergeWhitelist;
  }

  public void setEnableMergeWhitelist(Boolean enableMergeWhitelist) {
    this.enableMergeWhitelist = enableMergeWhitelist;
  }


  public BranchProtection enablePush(Boolean enablePush) {
    this.enablePush = enablePush;
    return this;
  }

  /**
   * Get enablePush
   * @return enablePush
   */
  @javax.annotation.Nullable
  public Boolean getEnablePush() {
    return enablePush;
  }

  public void setEnablePush(Boolean enablePush) {
    this.enablePush = enablePush;
  }


  public BranchProtection enablePushWhitelist(Boolean enablePushWhitelist) {
    this.enablePushWhitelist = enablePushWhitelist;
    return this;
  }

  /**
   * Get enablePushWhitelist
   * @return enablePushWhitelist
   */
  @javax.annotation.Nullable
  public Boolean getEnablePushWhitelist() {
    return enablePushWhitelist;
  }

  public void setEnablePushWhitelist(Boolean enablePushWhitelist) {
    this.enablePushWhitelist = enablePushWhitelist;
  }


  public BranchProtection enableStatusCheck(Boolean enableStatusCheck) {
    this.enableStatusCheck = enableStatusCheck;
    return this;
  }

  /**
   * Get enableStatusCheck
   * @return enableStatusCheck
   */
  @javax.annotation.Nullable
  public Boolean getEnableStatusCheck() {
    return enableStatusCheck;
  }

  public void setEnableStatusCheck(Boolean enableStatusCheck) {
    this.enableStatusCheck = enableStatusCheck;
  }


  public BranchProtection mergeWhitelistTeams(List<String> mergeWhitelistTeams) {
    this.mergeWhitelistTeams = mergeWhitelistTeams;
    return this;
  }

  public BranchProtection addMergeWhitelistTeamsItem(String mergeWhitelistTeamsItem) {
    if (this.mergeWhitelistTeams == null) {
      this.mergeWhitelistTeams = new ArrayList<>();
    }
    this.mergeWhitelistTeams.add(mergeWhitelistTeamsItem);
    return this;
  }

  /**
   * Get mergeWhitelistTeams
   * @return mergeWhitelistTeams
   */
  @javax.annotation.Nullable
  public List<String> getMergeWhitelistTeams() {
    return mergeWhitelistTeams;
  }

  public void setMergeWhitelistTeams(List<String> mergeWhitelistTeams) {
    this.mergeWhitelistTeams = mergeWhitelistTeams;
  }


  public BranchProtection mergeWhitelistUsernames(List<String> mergeWhitelistUsernames) {
    this.mergeWhitelistUsernames = mergeWhitelistUsernames;
    return this;
  }

  public BranchProtection addMergeWhitelistUsernamesItem(String mergeWhitelistUsernamesItem) {
    if (this.mergeWhitelistUsernames == null) {
      this.mergeWhitelistUsernames = new ArrayList<>();
    }
    this.mergeWhitelistUsernames.add(mergeWhitelistUsernamesItem);
    return this;
  }

  /**
   * Get mergeWhitelistUsernames
   * @return mergeWhitelistUsernames
   */
  @javax.annotation.Nullable
  public List<String> getMergeWhitelistUsernames() {
    return mergeWhitelistUsernames;
  }

  public void setMergeWhitelistUsernames(List<String> mergeWhitelistUsernames) {
    this.mergeWhitelistUsernames = mergeWhitelistUsernames;
  }


  public BranchProtection protectedFilePatterns(String protectedFilePatterns) {
    this.protectedFilePatterns = protectedFilePatterns;
    return this;
  }

  /**
   * Get protectedFilePatterns
   * @return protectedFilePatterns
   */
  @javax.annotation.Nullable
  public String getProtectedFilePatterns() {
    return protectedFilePatterns;
  }

  public void setProtectedFilePatterns(String protectedFilePatterns) {
    this.protectedFilePatterns = protectedFilePatterns;
  }


  public BranchProtection pushWhitelistDeployKeys(Boolean pushWhitelistDeployKeys) {
    this.pushWhitelistDeployKeys = pushWhitelistDeployKeys;
    return this;
  }

  /**
   * Get pushWhitelistDeployKeys
   * @return pushWhitelistDeployKeys
   */
  @javax.annotation.Nullable
  public Boolean getPushWhitelistDeployKeys() {
    return pushWhitelistDeployKeys;
  }

  public void setPushWhitelistDeployKeys(Boolean pushWhitelistDeployKeys) {
    this.pushWhitelistDeployKeys = pushWhitelistDeployKeys;
  }


  public BranchProtection pushWhitelistTeams(List<String> pushWhitelistTeams) {
    this.pushWhitelistTeams = pushWhitelistTeams;
    return this;
  }

  public BranchProtection addPushWhitelistTeamsItem(String pushWhitelistTeamsItem) {
    if (this.pushWhitelistTeams == null) {
      this.pushWhitelistTeams = new ArrayList<>();
    }
    this.pushWhitelistTeams.add(pushWhitelistTeamsItem);
    return this;
  }

  /**
   * Get pushWhitelistTeams
   * @return pushWhitelistTeams
   */
  @javax.annotation.Nullable
  public List<String> getPushWhitelistTeams() {
    return pushWhitelistTeams;
  }

  public void setPushWhitelistTeams(List<String> pushWhitelistTeams) {
    this.pushWhitelistTeams = pushWhitelistTeams;
  }


  public BranchProtection pushWhitelistUsernames(List<String> pushWhitelistUsernames) {
    this.pushWhitelistUsernames = pushWhitelistUsernames;
    return this;
  }

  public BranchProtection addPushWhitelistUsernamesItem(String pushWhitelistUsernamesItem) {
    if (this.pushWhitelistUsernames == null) {
      this.pushWhitelistUsernames = new ArrayList<>();
    }
    this.pushWhitelistUsernames.add(pushWhitelistUsernamesItem);
    return this;
  }

  /**
   * Get pushWhitelistUsernames
   * @return pushWhitelistUsernames
   */
  @javax.annotation.Nullable
  public List<String> getPushWhitelistUsernames() {
    return pushWhitelistUsernames;
  }

  public void setPushWhitelistUsernames(List<String> pushWhitelistUsernames) {
    this.pushWhitelistUsernames = pushWhitelistUsernames;
  }


  public BranchProtection requireSignedCommits(Boolean requireSignedCommits) {
    this.requireSignedCommits = requireSignedCommits;
    return this;
  }

  /**
   * Get requireSignedCommits
   * @return requireSignedCommits
   */
  @javax.annotation.Nullable
  public Boolean getRequireSignedCommits() {
    return requireSignedCommits;
  }

  public void setRequireSignedCommits(Boolean requireSignedCommits) {
    this.requireSignedCommits = requireSignedCommits;
  }


  public BranchProtection requiredApprovals(Long requiredApprovals) {
    this.requiredApprovals = requiredApprovals;
    return this;
  }

  /**
   * Get requiredApprovals
   * @return requiredApprovals
   */
  @javax.annotation.Nullable
  public Long getRequiredApprovals() {
    return requiredApprovals;
  }

  public void setRequiredApprovals(Long requiredApprovals) {
    this.requiredApprovals = requiredApprovals;
  }


  public BranchProtection ruleName(String ruleName) {
    this.ruleName = ruleName;
    return this;
  }

  /**
   * Get ruleName
   * @return ruleName
   */
  @javax.annotation.Nullable
  public String getRuleName() {
    return ruleName;
  }

  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }


  public BranchProtection statusCheckContexts(List<String> statusCheckContexts) {
    this.statusCheckContexts = statusCheckContexts;
    return this;
  }

  public BranchProtection addStatusCheckContextsItem(String statusCheckContextsItem) {
    if (this.statusCheckContexts == null) {
      this.statusCheckContexts = new ArrayList<>();
    }
    this.statusCheckContexts.add(statusCheckContextsItem);
    return this;
  }

  /**
   * Get statusCheckContexts
   * @return statusCheckContexts
   */
  @javax.annotation.Nullable
  public List<String> getStatusCheckContexts() {
    return statusCheckContexts;
  }

  public void setStatusCheckContexts(List<String> statusCheckContexts) {
    this.statusCheckContexts = statusCheckContexts;
  }


  public BranchProtection unprotectedFilePatterns(String unprotectedFilePatterns) {
    this.unprotectedFilePatterns = unprotectedFilePatterns;
    return this;
  }

  /**
   * Get unprotectedFilePatterns
   * @return unprotectedFilePatterns
   */
  @javax.annotation.Nullable
  public String getUnprotectedFilePatterns() {
    return unprotectedFilePatterns;
  }

  public void setUnprotectedFilePatterns(String unprotectedFilePatterns) {
    this.unprotectedFilePatterns = unprotectedFilePatterns;
  }


  public BranchProtection updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BranchProtection branchProtection = (BranchProtection) o;
    return Objects.equals(this.approvalsWhitelistTeams, branchProtection.approvalsWhitelistTeams) &&
        Objects.equals(this.approvalsWhitelistUsername, branchProtection.approvalsWhitelistUsername) &&
        Objects.equals(this.blockOnOfficialReviewRequests, branchProtection.blockOnOfficialReviewRequests) &&
        Objects.equals(this.blockOnOutdatedBranch, branchProtection.blockOnOutdatedBranch) &&
        Objects.equals(this.blockOnRejectedReviews, branchProtection.blockOnRejectedReviews) &&
        Objects.equals(this.branchName, branchProtection.branchName) &&
        Objects.equals(this.createdAt, branchProtection.createdAt) &&
        Objects.equals(this.dismissStaleApprovals, branchProtection.dismissStaleApprovals) &&
        Objects.equals(this.enableApprovalsWhitelist, branchProtection.enableApprovalsWhitelist) &&
        Objects.equals(this.enableMergeWhitelist, branchProtection.enableMergeWhitelist) &&
        Objects.equals(this.enablePush, branchProtection.enablePush) &&
        Objects.equals(this.enablePushWhitelist, branchProtection.enablePushWhitelist) &&
        Objects.equals(this.enableStatusCheck, branchProtection.enableStatusCheck) &&
        Objects.equals(this.mergeWhitelistTeams, branchProtection.mergeWhitelistTeams) &&
        Objects.equals(this.mergeWhitelistUsernames, branchProtection.mergeWhitelistUsernames) &&
        Objects.equals(this.protectedFilePatterns, branchProtection.protectedFilePatterns) &&
        Objects.equals(this.pushWhitelistDeployKeys, branchProtection.pushWhitelistDeployKeys) &&
        Objects.equals(this.pushWhitelistTeams, branchProtection.pushWhitelistTeams) &&
        Objects.equals(this.pushWhitelistUsernames, branchProtection.pushWhitelistUsernames) &&
        Objects.equals(this.requireSignedCommits, branchProtection.requireSignedCommits) &&
        Objects.equals(this.requiredApprovals, branchProtection.requiredApprovals) &&
        Objects.equals(this.ruleName, branchProtection.ruleName) &&
        Objects.equals(this.statusCheckContexts, branchProtection.statusCheckContexts) &&
        Objects.equals(this.unprotectedFilePatterns, branchProtection.unprotectedFilePatterns) &&
        Objects.equals(this.updatedAt, branchProtection.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approvalsWhitelistTeams, approvalsWhitelistUsername, blockOnOfficialReviewRequests, blockOnOutdatedBranch, blockOnRejectedReviews, branchName, createdAt, dismissStaleApprovals, enableApprovalsWhitelist, enableMergeWhitelist, enablePush, enablePushWhitelist, enableStatusCheck, mergeWhitelistTeams, mergeWhitelistUsernames, protectedFilePatterns, pushWhitelistDeployKeys, pushWhitelistTeams, pushWhitelistUsernames, requireSignedCommits, requiredApprovals, ruleName, statusCheckContexts, unprotectedFilePatterns, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BranchProtection {\n");
    sb.append("    approvalsWhitelistTeams: ").append(toIndentedString(approvalsWhitelistTeams)).append("\n");
    sb.append("    approvalsWhitelistUsername: ").append(toIndentedString(approvalsWhitelistUsername)).append("\n");
    sb.append("    blockOnOfficialReviewRequests: ").append(toIndentedString(blockOnOfficialReviewRequests)).append("\n");
    sb.append("    blockOnOutdatedBranch: ").append(toIndentedString(blockOnOutdatedBranch)).append("\n");
    sb.append("    blockOnRejectedReviews: ").append(toIndentedString(blockOnRejectedReviews)).append("\n");
    sb.append("    branchName: ").append(toIndentedString(branchName)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    dismissStaleApprovals: ").append(toIndentedString(dismissStaleApprovals)).append("\n");
    sb.append("    enableApprovalsWhitelist: ").append(toIndentedString(enableApprovalsWhitelist)).append("\n");
    sb.append("    enableMergeWhitelist: ").append(toIndentedString(enableMergeWhitelist)).append("\n");
    sb.append("    enablePush: ").append(toIndentedString(enablePush)).append("\n");
    sb.append("    enablePushWhitelist: ").append(toIndentedString(enablePushWhitelist)).append("\n");
    sb.append("    enableStatusCheck: ").append(toIndentedString(enableStatusCheck)).append("\n");
    sb.append("    mergeWhitelistTeams: ").append(toIndentedString(mergeWhitelistTeams)).append("\n");
    sb.append("    mergeWhitelistUsernames: ").append(toIndentedString(mergeWhitelistUsernames)).append("\n");
    sb.append("    protectedFilePatterns: ").append(toIndentedString(protectedFilePatterns)).append("\n");
    sb.append("    pushWhitelistDeployKeys: ").append(toIndentedString(pushWhitelistDeployKeys)).append("\n");
    sb.append("    pushWhitelistTeams: ").append(toIndentedString(pushWhitelistTeams)).append("\n");
    sb.append("    pushWhitelistUsernames: ").append(toIndentedString(pushWhitelistUsernames)).append("\n");
    sb.append("    requireSignedCommits: ").append(toIndentedString(requireSignedCommits)).append("\n");
    sb.append("    requiredApprovals: ").append(toIndentedString(requiredApprovals)).append("\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("    statusCheckContexts: ").append(toIndentedString(statusCheckContexts)).append("\n");
    sb.append("    unprotectedFilePatterns: ").append(toIndentedString(unprotectedFilePatterns)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approvals_whitelist_teams");
    openapiFields.add("approvals_whitelist_username");
    openapiFields.add("block_on_official_review_requests");
    openapiFields.add("block_on_outdated_branch");
    openapiFields.add("block_on_rejected_reviews");
    openapiFields.add("branch_name");
    openapiFields.add("created_at");
    openapiFields.add("dismiss_stale_approvals");
    openapiFields.add("enable_approvals_whitelist");
    openapiFields.add("enable_merge_whitelist");
    openapiFields.add("enable_push");
    openapiFields.add("enable_push_whitelist");
    openapiFields.add("enable_status_check");
    openapiFields.add("merge_whitelist_teams");
    openapiFields.add("merge_whitelist_usernames");
    openapiFields.add("protected_file_patterns");
    openapiFields.add("push_whitelist_deploy_keys");
    openapiFields.add("push_whitelist_teams");
    openapiFields.add("push_whitelist_usernames");
    openapiFields.add("require_signed_commits");
    openapiFields.add("required_approvals");
    openapiFields.add("rule_name");
    openapiFields.add("status_check_contexts");
    openapiFields.add("unprotected_file_patterns");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BranchProtection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BranchProtection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BranchProtection is not found in the empty JSON string", BranchProtection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BranchProtection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BranchProtection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("approvals_whitelist_teams") != null && !jsonObj.get("approvals_whitelist_teams").isJsonNull() && !jsonObj.get("approvals_whitelist_teams").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvals_whitelist_teams` to be an array in the JSON string but got `%s`", jsonObj.get("approvals_whitelist_teams").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("approvals_whitelist_username") != null && !jsonObj.get("approvals_whitelist_username").isJsonNull() && !jsonObj.get("approvals_whitelist_username").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvals_whitelist_username` to be an array in the JSON string but got `%s`", jsonObj.get("approvals_whitelist_username").toString()));
      }
      if ((jsonObj.get("branch_name") != null && !jsonObj.get("branch_name").isJsonNull()) && !jsonObj.get("branch_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("merge_whitelist_teams") != null && !jsonObj.get("merge_whitelist_teams").isJsonNull() && !jsonObj.get("merge_whitelist_teams").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_whitelist_teams` to be an array in the JSON string but got `%s`", jsonObj.get("merge_whitelist_teams").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("merge_whitelist_usernames") != null && !jsonObj.get("merge_whitelist_usernames").isJsonNull() && !jsonObj.get("merge_whitelist_usernames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_whitelist_usernames` to be an array in the JSON string but got `%s`", jsonObj.get("merge_whitelist_usernames").toString()));
      }
      if ((jsonObj.get("protected_file_patterns") != null && !jsonObj.get("protected_file_patterns").isJsonNull()) && !jsonObj.get("protected_file_patterns").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protected_file_patterns` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protected_file_patterns").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("push_whitelist_teams") != null && !jsonObj.get("push_whitelist_teams").isJsonNull() && !jsonObj.get("push_whitelist_teams").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `push_whitelist_teams` to be an array in the JSON string but got `%s`", jsonObj.get("push_whitelist_teams").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("push_whitelist_usernames") != null && !jsonObj.get("push_whitelist_usernames").isJsonNull() && !jsonObj.get("push_whitelist_usernames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `push_whitelist_usernames` to be an array in the JSON string but got `%s`", jsonObj.get("push_whitelist_usernames").toString()));
      }
      if ((jsonObj.get("rule_name") != null && !jsonObj.get("rule_name").isJsonNull()) && !jsonObj.get("rule_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rule_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rule_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("status_check_contexts") != null && !jsonObj.get("status_check_contexts").isJsonNull() && !jsonObj.get("status_check_contexts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_check_contexts` to be an array in the JSON string but got `%s`", jsonObj.get("status_check_contexts").toString()));
      }
      if ((jsonObj.get("unprotected_file_patterns") != null && !jsonObj.get("unprotected_file_patterns").isJsonNull()) && !jsonObj.get("unprotected_file_patterns").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unprotected_file_patterns` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unprotected_file_patterns").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BranchProtection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BranchProtection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BranchProtection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BranchProtection.class));

       return (TypeAdapter<T>) new TypeAdapter<BranchProtection>() {
           @Override
           public void write(JsonWriter out, BranchProtection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BranchProtection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BranchProtection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BranchProtection
   * @throws IOException if the JSON string is invalid with respect to BranchProtection
   */
  public static BranchProtection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BranchProtection.class);
  }

  /**
   * Convert an instance of BranchProtection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

