/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Label;
import org.openapitools.client.model.Milestone;
import org.openapitools.client.model.PRBranchInfo;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PullRequest represents a pull request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:48.734827-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PullRequest {
  public static final String SERIALIZED_NAME_ALLOW_MAINTAINER_EDIT = "allow_maintainer_edit";
  @SerializedName(SERIALIZED_NAME_ALLOW_MAINTAINER_EDIT)
  private Boolean allowMaintainerEdit;

  public static final String SERIALIZED_NAME_ASSIGNEE = "assignee";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE)
  private User assignee;

  public static final String SERIALIZED_NAME_ASSIGNEES = "assignees";
  @SerializedName(SERIALIZED_NAME_ASSIGNEES)
  private List<User> assignees = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASE = "base";
  @SerializedName(SERIALIZED_NAME_BASE)
  private PRBranchInfo base;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_CLOSED_AT = "closed_at";
  @SerializedName(SERIALIZED_NAME_CLOSED_AT)
  private OffsetDateTime closedAt;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private Long comments;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DIFF_URL = "diff_url";
  @SerializedName(SERIALIZED_NAME_DIFF_URL)
  private String diffUrl;

  public static final String SERIALIZED_NAME_DUE_DATE = "due_date";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private OffsetDateTime dueDate;

  public static final String SERIALIZED_NAME_HEAD = "head";
  @SerializedName(SERIALIZED_NAME_HEAD)
  private PRBranchInfo head;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private String htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IS_LOCKED = "is_locked";
  @SerializedName(SERIALIZED_NAME_IS_LOCKED)
  private Boolean isLocked;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<Label> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_MERGE_BASE = "merge_base";
  @SerializedName(SERIALIZED_NAME_MERGE_BASE)
  private String mergeBase;

  public static final String SERIALIZED_NAME_MERGE_COMMIT_SHA = "merge_commit_sha";
  @SerializedName(SERIALIZED_NAME_MERGE_COMMIT_SHA)
  private String mergeCommitSha;

  public static final String SERIALIZED_NAME_MERGEABLE = "mergeable";
  @SerializedName(SERIALIZED_NAME_MERGEABLE)
  private Boolean mergeable;

  public static final String SERIALIZED_NAME_MERGED = "merged";
  @SerializedName(SERIALIZED_NAME_MERGED)
  private Boolean merged;

  public static final String SERIALIZED_NAME_MERGED_AT = "merged_at";
  @SerializedName(SERIALIZED_NAME_MERGED_AT)
  private OffsetDateTime mergedAt;

  public static final String SERIALIZED_NAME_MERGED_BY = "merged_by";
  @SerializedName(SERIALIZED_NAME_MERGED_BY)
  private User mergedBy;

  public static final String SERIALIZED_NAME_MILESTONE = "milestone";
  @SerializedName(SERIALIZED_NAME_MILESTONE)
  private Milestone milestone;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Long number;

  public static final String SERIALIZED_NAME_PATCH_URL = "patch_url";
  @SerializedName(SERIALIZED_NAME_PATCH_URL)
  private String patchUrl;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public PullRequest() {
  }

  public PullRequest allowMaintainerEdit(Boolean allowMaintainerEdit) {
    this.allowMaintainerEdit = allowMaintainerEdit;
    return this;
  }

  /**
   * Get allowMaintainerEdit
   * @return allowMaintainerEdit
   */
  @javax.annotation.Nullable
  public Boolean getAllowMaintainerEdit() {
    return allowMaintainerEdit;
  }

  public void setAllowMaintainerEdit(Boolean allowMaintainerEdit) {
    this.allowMaintainerEdit = allowMaintainerEdit;
  }


  public PullRequest assignee(User assignee) {
    this.assignee = assignee;
    return this;
  }

  /**
   * Get assignee
   * @return assignee
   */
  @javax.annotation.Nullable
  public User getAssignee() {
    return assignee;
  }

  public void setAssignee(User assignee) {
    this.assignee = assignee;
  }


  public PullRequest assignees(List<User> assignees) {
    this.assignees = assignees;
    return this;
  }

  public PullRequest addAssigneesItem(User assigneesItem) {
    if (this.assignees == null) {
      this.assignees = new ArrayList<>();
    }
    this.assignees.add(assigneesItem);
    return this;
  }

  /**
   * Get assignees
   * @return assignees
   */
  @javax.annotation.Nullable
  public List<User> getAssignees() {
    return assignees;
  }

  public void setAssignees(List<User> assignees) {
    this.assignees = assignees;
  }


  public PullRequest base(PRBranchInfo base) {
    this.base = base;
    return this;
  }

  /**
   * Get base
   * @return base
   */
  @javax.annotation.Nullable
  public PRBranchInfo getBase() {
    return base;
  }

  public void setBase(PRBranchInfo base) {
    this.base = base;
  }


  public PullRequest body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public PullRequest closedAt(OffsetDateTime closedAt) {
    this.closedAt = closedAt;
    return this;
  }

  /**
   * Get closedAt
   * @return closedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getClosedAt() {
    return closedAt;
  }

  public void setClosedAt(OffsetDateTime closedAt) {
    this.closedAt = closedAt;
  }


  public PullRequest comments(Long comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public Long getComments() {
    return comments;
  }

  public void setComments(Long comments) {
    this.comments = comments;
  }


  public PullRequest createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public PullRequest diffUrl(String diffUrl) {
    this.diffUrl = diffUrl;
    return this;
  }

  /**
   * Get diffUrl
   * @return diffUrl
   */
  @javax.annotation.Nullable
  public String getDiffUrl() {
    return diffUrl;
  }

  public void setDiffUrl(String diffUrl) {
    this.diffUrl = diffUrl;
  }


  public PullRequest dueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Get dueDate
   * @return dueDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDueDate() {
    return dueDate;
  }

  public void setDueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
  }


  public PullRequest head(PRBranchInfo head) {
    this.head = head;
    return this;
  }

  /**
   * Get head
   * @return head
   */
  @javax.annotation.Nullable
  public PRBranchInfo getHead() {
    return head;
  }

  public void setHead(PRBranchInfo head) {
    this.head = head;
  }


  public PullRequest htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nullable
  public String getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public PullRequest id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public PullRequest isLocked(Boolean isLocked) {
    this.isLocked = isLocked;
    return this;
  }

  /**
   * Get isLocked
   * @return isLocked
   */
  @javax.annotation.Nullable
  public Boolean getIsLocked() {
    return isLocked;
  }

  public void setIsLocked(Boolean isLocked) {
    this.isLocked = isLocked;
  }


  public PullRequest labels(List<Label> labels) {
    this.labels = labels;
    return this;
  }

  public PullRequest addLabelsItem(Label labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public List<Label> getLabels() {
    return labels;
  }

  public void setLabels(List<Label> labels) {
    this.labels = labels;
  }


  public PullRequest mergeBase(String mergeBase) {
    this.mergeBase = mergeBase;
    return this;
  }

  /**
   * Get mergeBase
   * @return mergeBase
   */
  @javax.annotation.Nullable
  public String getMergeBase() {
    return mergeBase;
  }

  public void setMergeBase(String mergeBase) {
    this.mergeBase = mergeBase;
  }


  public PullRequest mergeCommitSha(String mergeCommitSha) {
    this.mergeCommitSha = mergeCommitSha;
    return this;
  }

  /**
   * Get mergeCommitSha
   * @return mergeCommitSha
   */
  @javax.annotation.Nullable
  public String getMergeCommitSha() {
    return mergeCommitSha;
  }

  public void setMergeCommitSha(String mergeCommitSha) {
    this.mergeCommitSha = mergeCommitSha;
  }


  public PullRequest mergeable(Boolean mergeable) {
    this.mergeable = mergeable;
    return this;
  }

  /**
   * Get mergeable
   * @return mergeable
   */
  @javax.annotation.Nullable
  public Boolean getMergeable() {
    return mergeable;
  }

  public void setMergeable(Boolean mergeable) {
    this.mergeable = mergeable;
  }


  public PullRequest merged(Boolean merged) {
    this.merged = merged;
    return this;
  }

  /**
   * Get merged
   * @return merged
   */
  @javax.annotation.Nullable
  public Boolean getMerged() {
    return merged;
  }

  public void setMerged(Boolean merged) {
    this.merged = merged;
  }


  public PullRequest mergedAt(OffsetDateTime mergedAt) {
    this.mergedAt = mergedAt;
    return this;
  }

  /**
   * Get mergedAt
   * @return mergedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMergedAt() {
    return mergedAt;
  }

  public void setMergedAt(OffsetDateTime mergedAt) {
    this.mergedAt = mergedAt;
  }


  public PullRequest mergedBy(User mergedBy) {
    this.mergedBy = mergedBy;
    return this;
  }

  /**
   * Get mergedBy
   * @return mergedBy
   */
  @javax.annotation.Nullable
  public User getMergedBy() {
    return mergedBy;
  }

  public void setMergedBy(User mergedBy) {
    this.mergedBy = mergedBy;
  }


  public PullRequest milestone(Milestone milestone) {
    this.milestone = milestone;
    return this;
  }

  /**
   * Get milestone
   * @return milestone
   */
  @javax.annotation.Nullable
  public Milestone getMilestone() {
    return milestone;
  }

  public void setMilestone(Milestone milestone) {
    this.milestone = milestone;
  }


  public PullRequest number(Long number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Long getNumber() {
    return number;
  }

  public void setNumber(Long number) {
    this.number = number;
  }


  public PullRequest patchUrl(String patchUrl) {
    this.patchUrl = patchUrl;
    return this;
  }

  /**
   * Get patchUrl
   * @return patchUrl
   */
  @javax.annotation.Nullable
  public String getPatchUrl() {
    return patchUrl;
  }

  public void setPatchUrl(String patchUrl) {
    this.patchUrl = patchUrl;
  }


  public PullRequest state(String state) {
    this.state = state;
    return this;
  }

  /**
   * StateType issue state type
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public PullRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public PullRequest updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public PullRequest url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public PullRequest user(User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullRequest pullRequest = (PullRequest) o;
    return Objects.equals(this.allowMaintainerEdit, pullRequest.allowMaintainerEdit) &&
        Objects.equals(this.assignee, pullRequest.assignee) &&
        Objects.equals(this.assignees, pullRequest.assignees) &&
        Objects.equals(this.base, pullRequest.base) &&
        Objects.equals(this.body, pullRequest.body) &&
        Objects.equals(this.closedAt, pullRequest.closedAt) &&
        Objects.equals(this.comments, pullRequest.comments) &&
        Objects.equals(this.createdAt, pullRequest.createdAt) &&
        Objects.equals(this.diffUrl, pullRequest.diffUrl) &&
        Objects.equals(this.dueDate, pullRequest.dueDate) &&
        Objects.equals(this.head, pullRequest.head) &&
        Objects.equals(this.htmlUrl, pullRequest.htmlUrl) &&
        Objects.equals(this.id, pullRequest.id) &&
        Objects.equals(this.isLocked, pullRequest.isLocked) &&
        Objects.equals(this.labels, pullRequest.labels) &&
        Objects.equals(this.mergeBase, pullRequest.mergeBase) &&
        Objects.equals(this.mergeCommitSha, pullRequest.mergeCommitSha) &&
        Objects.equals(this.mergeable, pullRequest.mergeable) &&
        Objects.equals(this.merged, pullRequest.merged) &&
        Objects.equals(this.mergedAt, pullRequest.mergedAt) &&
        Objects.equals(this.mergedBy, pullRequest.mergedBy) &&
        Objects.equals(this.milestone, pullRequest.milestone) &&
        Objects.equals(this.number, pullRequest.number) &&
        Objects.equals(this.patchUrl, pullRequest.patchUrl) &&
        Objects.equals(this.state, pullRequest.state) &&
        Objects.equals(this.title, pullRequest.title) &&
        Objects.equals(this.updatedAt, pullRequest.updatedAt) &&
        Objects.equals(this.url, pullRequest.url) &&
        Objects.equals(this.user, pullRequest.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowMaintainerEdit, assignee, assignees, base, body, closedAt, comments, createdAt, diffUrl, dueDate, head, htmlUrl, id, isLocked, labels, mergeBase, mergeCommitSha, mergeable, merged, mergedAt, mergedBy, milestone, number, patchUrl, state, title, updatedAt, url, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullRequest {\n");
    sb.append("    allowMaintainerEdit: ").append(toIndentedString(allowMaintainerEdit)).append("\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    assignees: ").append(toIndentedString(assignees)).append("\n");
    sb.append("    base: ").append(toIndentedString(base)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    closedAt: ").append(toIndentedString(closedAt)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    diffUrl: ").append(toIndentedString(diffUrl)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    head: ").append(toIndentedString(head)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isLocked: ").append(toIndentedString(isLocked)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    mergeBase: ").append(toIndentedString(mergeBase)).append("\n");
    sb.append("    mergeCommitSha: ").append(toIndentedString(mergeCommitSha)).append("\n");
    sb.append("    mergeable: ").append(toIndentedString(mergeable)).append("\n");
    sb.append("    merged: ").append(toIndentedString(merged)).append("\n");
    sb.append("    mergedAt: ").append(toIndentedString(mergedAt)).append("\n");
    sb.append("    mergedBy: ").append(toIndentedString(mergedBy)).append("\n");
    sb.append("    milestone: ").append(toIndentedString(milestone)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    patchUrl: ").append(toIndentedString(patchUrl)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_maintainer_edit");
    openapiFields.add("assignee");
    openapiFields.add("assignees");
    openapiFields.add("base");
    openapiFields.add("body");
    openapiFields.add("closed_at");
    openapiFields.add("comments");
    openapiFields.add("created_at");
    openapiFields.add("diff_url");
    openapiFields.add("due_date");
    openapiFields.add("head");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("is_locked");
    openapiFields.add("labels");
    openapiFields.add("merge_base");
    openapiFields.add("merge_commit_sha");
    openapiFields.add("mergeable");
    openapiFields.add("merged");
    openapiFields.add("merged_at");
    openapiFields.add("merged_by");
    openapiFields.add("milestone");
    openapiFields.add("number");
    openapiFields.add("patch_url");
    openapiFields.add("state");
    openapiFields.add("title");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PullRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PullRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PullRequest is not found in the empty JSON string", PullRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PullRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PullRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `assignee`
      if (jsonObj.get("assignee") != null && !jsonObj.get("assignee").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("assignee"));
      }
      if (jsonObj.get("assignees") != null && !jsonObj.get("assignees").isJsonNull()) {
        JsonArray jsonArrayassignees = jsonObj.getAsJsonArray("assignees");
        if (jsonArrayassignees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("assignees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `assignees` to be an array in the JSON string but got `%s`", jsonObj.get("assignees").toString()));
          }

          // validate the optional field `assignees` (array)
          for (int i = 0; i < jsonArrayassignees.size(); i++) {
            User.validateJsonElement(jsonArrayassignees.get(i));
          };
        }
      }
      // validate the optional field `base`
      if (jsonObj.get("base") != null && !jsonObj.get("base").isJsonNull()) {
        PRBranchInfo.validateJsonElement(jsonObj.get("base"));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("diff_url") != null && !jsonObj.get("diff_url").isJsonNull()) && !jsonObj.get("diff_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diff_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diff_url").toString()));
      }
      // validate the optional field `head`
      if (jsonObj.get("head") != null && !jsonObj.get("head").isJsonNull()) {
        PRBranchInfo.validateJsonElement(jsonObj.get("head"));
      }
      if ((jsonObj.get("html_url") != null && !jsonObj.get("html_url").isJsonNull()) && !jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
        if (jsonArraylabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
          }

          // validate the optional field `labels` (array)
          for (int i = 0; i < jsonArraylabels.size(); i++) {
            Label.validateJsonElement(jsonArraylabels.get(i));
          };
        }
      }
      if ((jsonObj.get("merge_base") != null && !jsonObj.get("merge_base").isJsonNull()) && !jsonObj.get("merge_base").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_base` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_base").toString()));
      }
      if ((jsonObj.get("merge_commit_sha") != null && !jsonObj.get("merge_commit_sha").isJsonNull()) && !jsonObj.get("merge_commit_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_commit_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_commit_sha").toString()));
      }
      // validate the optional field `merged_by`
      if (jsonObj.get("merged_by") != null && !jsonObj.get("merged_by").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("merged_by"));
      }
      // validate the optional field `milestone`
      if (jsonObj.get("milestone") != null && !jsonObj.get("milestone").isJsonNull()) {
        Milestone.validateJsonElement(jsonObj.get("milestone"));
      }
      if ((jsonObj.get("patch_url") != null && !jsonObj.get("patch_url").isJsonNull()) && !jsonObj.get("patch_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `patch_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("patch_url").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PullRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PullRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PullRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PullRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PullRequest>() {
           @Override
           public void write(JsonWriter out, PullRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PullRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PullRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PullRequest
   * @throws IOException if the JSON string is invalid with respect to PullRequest
   */
  public static PullRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PullRequest.class);
  }

  /**
   * Convert an instance of PullRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

