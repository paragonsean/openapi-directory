/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StopWatch represent a running stopwatch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:48.734827-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StopWatch {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_ISSUE_INDEX = "issue_index";
  @SerializedName(SERIALIZED_NAME_ISSUE_INDEX)
  private Long issueIndex;

  public static final String SERIALIZED_NAME_ISSUE_TITLE = "issue_title";
  @SerializedName(SERIALIZED_NAME_ISSUE_TITLE)
  private String issueTitle;

  public static final String SERIALIZED_NAME_REPO_NAME = "repo_name";
  @SerializedName(SERIALIZED_NAME_REPO_NAME)
  private String repoName;

  public static final String SERIALIZED_NAME_REPO_OWNER_NAME = "repo_owner_name";
  @SerializedName(SERIALIZED_NAME_REPO_OWNER_NAME)
  private String repoOwnerName;

  public static final String SERIALIZED_NAME_SECONDS = "seconds";
  @SerializedName(SERIALIZED_NAME_SECONDS)
  private Long seconds;

  public StopWatch() {
  }

  public StopWatch created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public StopWatch duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public StopWatch issueIndex(Long issueIndex) {
    this.issueIndex = issueIndex;
    return this;
  }

  /**
   * Get issueIndex
   * @return issueIndex
   */
  @javax.annotation.Nullable
  public Long getIssueIndex() {
    return issueIndex;
  }

  public void setIssueIndex(Long issueIndex) {
    this.issueIndex = issueIndex;
  }


  public StopWatch issueTitle(String issueTitle) {
    this.issueTitle = issueTitle;
    return this;
  }

  /**
   * Get issueTitle
   * @return issueTitle
   */
  @javax.annotation.Nullable
  public String getIssueTitle() {
    return issueTitle;
  }

  public void setIssueTitle(String issueTitle) {
    this.issueTitle = issueTitle;
  }


  public StopWatch repoName(String repoName) {
    this.repoName = repoName;
    return this;
  }

  /**
   * Get repoName
   * @return repoName
   */
  @javax.annotation.Nullable
  public String getRepoName() {
    return repoName;
  }

  public void setRepoName(String repoName) {
    this.repoName = repoName;
  }


  public StopWatch repoOwnerName(String repoOwnerName) {
    this.repoOwnerName = repoOwnerName;
    return this;
  }

  /**
   * Get repoOwnerName
   * @return repoOwnerName
   */
  @javax.annotation.Nullable
  public String getRepoOwnerName() {
    return repoOwnerName;
  }

  public void setRepoOwnerName(String repoOwnerName) {
    this.repoOwnerName = repoOwnerName;
  }


  public StopWatch seconds(Long seconds) {
    this.seconds = seconds;
    return this;
  }

  /**
   * Get seconds
   * @return seconds
   */
  @javax.annotation.Nullable
  public Long getSeconds() {
    return seconds;
  }

  public void setSeconds(Long seconds) {
    this.seconds = seconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StopWatch stopWatch = (StopWatch) o;
    return Objects.equals(this.created, stopWatch.created) &&
        Objects.equals(this.duration, stopWatch.duration) &&
        Objects.equals(this.issueIndex, stopWatch.issueIndex) &&
        Objects.equals(this.issueTitle, stopWatch.issueTitle) &&
        Objects.equals(this.repoName, stopWatch.repoName) &&
        Objects.equals(this.repoOwnerName, stopWatch.repoOwnerName) &&
        Objects.equals(this.seconds, stopWatch.seconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, duration, issueIndex, issueTitle, repoName, repoOwnerName, seconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StopWatch {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    issueIndex: ").append(toIndentedString(issueIndex)).append("\n");
    sb.append("    issueTitle: ").append(toIndentedString(issueTitle)).append("\n");
    sb.append("    repoName: ").append(toIndentedString(repoName)).append("\n");
    sb.append("    repoOwnerName: ").append(toIndentedString(repoOwnerName)).append("\n");
    sb.append("    seconds: ").append(toIndentedString(seconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("duration");
    openapiFields.add("issue_index");
    openapiFields.add("issue_title");
    openapiFields.add("repo_name");
    openapiFields.add("repo_owner_name");
    openapiFields.add("seconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StopWatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StopWatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StopWatch is not found in the empty JSON string", StopWatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StopWatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StopWatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("issue_title") != null && !jsonObj.get("issue_title").isJsonNull()) && !jsonObj.get("issue_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_title").toString()));
      }
      if ((jsonObj.get("repo_name") != null && !jsonObj.get("repo_name").isJsonNull()) && !jsonObj.get("repo_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repo_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo_name").toString()));
      }
      if ((jsonObj.get("repo_owner_name") != null && !jsonObj.get("repo_owner_name").isJsonNull()) && !jsonObj.get("repo_owner_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repo_owner_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo_owner_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StopWatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StopWatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StopWatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StopWatch.class));

       return (TypeAdapter<T>) new TypeAdapter<StopWatch>() {
           @Override
           public void write(JsonWriter out, StopWatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StopWatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StopWatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StopWatch
   * @throws IOException if the JSON string is invalid with respect to StopWatch
   */
  public static StopWatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StopWatch.class);
  }

  /**
   * Convert an instance of StopWatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

