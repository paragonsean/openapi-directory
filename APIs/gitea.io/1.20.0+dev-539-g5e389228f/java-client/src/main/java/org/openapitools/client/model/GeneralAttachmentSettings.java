/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GeneralAttachmentSettings contains global Attachment settings exposed by API
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:48.734827-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GeneralAttachmentSettings {
  public static final String SERIALIZED_NAME_ALLOWED_TYPES = "allowed_types";
  @SerializedName(SERIALIZED_NAME_ALLOWED_TYPES)
  private String allowedTypes;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_MAX_FILES = "max_files";
  @SerializedName(SERIALIZED_NAME_MAX_FILES)
  private Long maxFiles;

  public static final String SERIALIZED_NAME_MAX_SIZE = "max_size";
  @SerializedName(SERIALIZED_NAME_MAX_SIZE)
  private Long maxSize;

  public GeneralAttachmentSettings() {
  }

  public GeneralAttachmentSettings allowedTypes(String allowedTypes) {
    this.allowedTypes = allowedTypes;
    return this;
  }

  /**
   * Get allowedTypes
   * @return allowedTypes
   */
  @javax.annotation.Nullable
  public String getAllowedTypes() {
    return allowedTypes;
  }

  public void setAllowedTypes(String allowedTypes) {
    this.allowedTypes = allowedTypes;
  }


  public GeneralAttachmentSettings enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public GeneralAttachmentSettings maxFiles(Long maxFiles) {
    this.maxFiles = maxFiles;
    return this;
  }

  /**
   * Get maxFiles
   * @return maxFiles
   */
  @javax.annotation.Nullable
  public Long getMaxFiles() {
    return maxFiles;
  }

  public void setMaxFiles(Long maxFiles) {
    this.maxFiles = maxFiles;
  }


  public GeneralAttachmentSettings maxSize(Long maxSize) {
    this.maxSize = maxSize;
    return this;
  }

  /**
   * Get maxSize
   * @return maxSize
   */
  @javax.annotation.Nullable
  public Long getMaxSize() {
    return maxSize;
  }

  public void setMaxSize(Long maxSize) {
    this.maxSize = maxSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeneralAttachmentSettings generalAttachmentSettings = (GeneralAttachmentSettings) o;
    return Objects.equals(this.allowedTypes, generalAttachmentSettings.allowedTypes) &&
        Objects.equals(this.enabled, generalAttachmentSettings.enabled) &&
        Objects.equals(this.maxFiles, generalAttachmentSettings.maxFiles) &&
        Objects.equals(this.maxSize, generalAttachmentSettings.maxSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedTypes, enabled, maxFiles, maxSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeneralAttachmentSettings {\n");
    sb.append("    allowedTypes: ").append(toIndentedString(allowedTypes)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    maxFiles: ").append(toIndentedString(maxFiles)).append("\n");
    sb.append("    maxSize: ").append(toIndentedString(maxSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_types");
    openapiFields.add("enabled");
    openapiFields.add("max_files");
    openapiFields.add("max_size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GeneralAttachmentSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GeneralAttachmentSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GeneralAttachmentSettings is not found in the empty JSON string", GeneralAttachmentSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GeneralAttachmentSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GeneralAttachmentSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allowed_types") != null && !jsonObj.get("allowed_types").isJsonNull()) && !jsonObj.get("allowed_types").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_types` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowed_types").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GeneralAttachmentSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GeneralAttachmentSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GeneralAttachmentSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GeneralAttachmentSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<GeneralAttachmentSettings>() {
           @Override
           public void write(JsonWriter out, GeneralAttachmentSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GeneralAttachmentSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GeneralAttachmentSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GeneralAttachmentSettings
   * @throws IOException if the JSON string is invalid with respect to GeneralAttachmentSettings
   */
  public static GeneralAttachmentSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GeneralAttachmentSettings.class);
  }

  /**
   * Convert an instance of GeneralAttachmentSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

