/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GenerateRepoOption options when creating repository using a template
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:48.734827-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GenerateRepoOption {
  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private Boolean avatar;

  public static final String SERIALIZED_NAME_DEFAULT_BRANCH = "default_branch";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRANCH)
  private String defaultBranch;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GIT_CONTENT = "git_content";
  @SerializedName(SERIALIZED_NAME_GIT_CONTENT)
  private Boolean gitContent;

  public static final String SERIALIZED_NAME_GIT_HOOKS = "git_hooks";
  @SerializedName(SERIALIZED_NAME_GIT_HOOKS)
  private Boolean gitHooks;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Boolean labels;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PRIVATE = "private";
  @SerializedName(SERIALIZED_NAME_PRIVATE)
  private Boolean _private;

  public static final String SERIALIZED_NAME_TOPICS = "topics";
  @SerializedName(SERIALIZED_NAME_TOPICS)
  private Boolean topics;

  public static final String SERIALIZED_NAME_WEBHOOKS = "webhooks";
  @SerializedName(SERIALIZED_NAME_WEBHOOKS)
  private Boolean webhooks;

  public GenerateRepoOption() {
  }

  public GenerateRepoOption avatar(Boolean avatar) {
    this.avatar = avatar;
    return this;
  }

  /**
   * include avatar of the template repo
   * @return avatar
   */
  @javax.annotation.Nullable
  public Boolean getAvatar() {
    return avatar;
  }

  public void setAvatar(Boolean avatar) {
    this.avatar = avatar;
  }


  public GenerateRepoOption defaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
    return this;
  }

  /**
   * Default branch of the new repository
   * @return defaultBranch
   */
  @javax.annotation.Nullable
  public String getDefaultBranch() {
    return defaultBranch;
  }

  public void setDefaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
  }


  public GenerateRepoOption description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the repository to create
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GenerateRepoOption gitContent(Boolean gitContent) {
    this.gitContent = gitContent;
    return this;
  }

  /**
   * include git content of default branch in template repo
   * @return gitContent
   */
  @javax.annotation.Nullable
  public Boolean getGitContent() {
    return gitContent;
  }

  public void setGitContent(Boolean gitContent) {
    this.gitContent = gitContent;
  }


  public GenerateRepoOption gitHooks(Boolean gitHooks) {
    this.gitHooks = gitHooks;
    return this;
  }

  /**
   * include git hooks in template repo
   * @return gitHooks
   */
  @javax.annotation.Nullable
  public Boolean getGitHooks() {
    return gitHooks;
  }

  public void setGitHooks(Boolean gitHooks) {
    this.gitHooks = gitHooks;
  }


  public GenerateRepoOption labels(Boolean labels) {
    this.labels = labels;
    return this;
  }

  /**
   * include labels in template repo
   * @return labels
   */
  @javax.annotation.Nullable
  public Boolean getLabels() {
    return labels;
  }

  public void setLabels(Boolean labels) {
    this.labels = labels;
  }


  public GenerateRepoOption name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the repository to create
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GenerateRepoOption owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * The organization or person who will own the new repository
   * @return owner
   */
  @javax.annotation.Nonnull
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public GenerateRepoOption _private(Boolean _private) {
    this._private = _private;
    return this;
  }

  /**
   * Whether the repository is private
   * @return _private
   */
  @javax.annotation.Nullable
  public Boolean getPrivate() {
    return _private;
  }

  public void setPrivate(Boolean _private) {
    this._private = _private;
  }


  public GenerateRepoOption topics(Boolean topics) {
    this.topics = topics;
    return this;
  }

  /**
   * include topics in template repo
   * @return topics
   */
  @javax.annotation.Nullable
  public Boolean getTopics() {
    return topics;
  }

  public void setTopics(Boolean topics) {
    this.topics = topics;
  }


  public GenerateRepoOption webhooks(Boolean webhooks) {
    this.webhooks = webhooks;
    return this;
  }

  /**
   * include webhooks in template repo
   * @return webhooks
   */
  @javax.annotation.Nullable
  public Boolean getWebhooks() {
    return webhooks;
  }

  public void setWebhooks(Boolean webhooks) {
    this.webhooks = webhooks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateRepoOption generateRepoOption = (GenerateRepoOption) o;
    return Objects.equals(this.avatar, generateRepoOption.avatar) &&
        Objects.equals(this.defaultBranch, generateRepoOption.defaultBranch) &&
        Objects.equals(this.description, generateRepoOption.description) &&
        Objects.equals(this.gitContent, generateRepoOption.gitContent) &&
        Objects.equals(this.gitHooks, generateRepoOption.gitHooks) &&
        Objects.equals(this.labels, generateRepoOption.labels) &&
        Objects.equals(this.name, generateRepoOption.name) &&
        Objects.equals(this.owner, generateRepoOption.owner) &&
        Objects.equals(this._private, generateRepoOption._private) &&
        Objects.equals(this.topics, generateRepoOption.topics) &&
        Objects.equals(this.webhooks, generateRepoOption.webhooks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatar, defaultBranch, description, gitContent, gitHooks, labels, name, owner, _private, topics, webhooks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateRepoOption {\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    defaultBranch: ").append(toIndentedString(defaultBranch)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    gitContent: ").append(toIndentedString(gitContent)).append("\n");
    sb.append("    gitHooks: ").append(toIndentedString(gitHooks)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("    webhooks: ").append(toIndentedString(webhooks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatar");
    openapiFields.add("default_branch");
    openapiFields.add("description");
    openapiFields.add("git_content");
    openapiFields.add("git_hooks");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("owner");
    openapiFields.add("private");
    openapiFields.add("topics");
    openapiFields.add("webhooks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("owner");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenerateRepoOption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenerateRepoOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateRepoOption is not found in the empty JSON string", GenerateRepoOption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenerateRepoOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateRepoOption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GenerateRepoOption.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("default_branch") != null && !jsonObj.get("default_branch").isJsonNull()) && !jsonObj.get("default_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_branch").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateRepoOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateRepoOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateRepoOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateRepoOption.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateRepoOption>() {
           @Override
           public void write(JsonWriter out, GenerateRepoOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateRepoOption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenerateRepoOption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenerateRepoOption
   * @throws IOException if the JSON string is invalid with respect to GenerateRepoOption
   */
  public static GenerateRepoOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateRepoOption.class);
  }

  /**
   * Convert an instance of GenerateRepoOption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

