/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.NotificationCount;
import org.openapitools.client.model.NotificationThread;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for notifyGetList
     * @param all If true, show notifications marked as read. Default value is false (optional)
     * @param statusTypes Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)
     * @param subjectType filter notifications by subject type (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NotificationThreadList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyGetListCall(Boolean all, List<String> statusTypes, List<String> subjectType, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        if (statusTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status-types", statusTypes));
        }

        if (subjectType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject-type", subjectType));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notifyGetListValidateBeforeCall(Boolean all, List<String> statusTypes, List<String> subjectType, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return notifyGetListCall(all, statusTypes, subjectType, since, before, page, limit, _callback);

    }

    /**
     * List users&#39;s notification threads
     * 
     * @param all If true, show notifications marked as read. Default value is false (optional)
     * @param statusTypes Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)
     * @param subjectType filter notifications by subject type (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;NotificationThread&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NotificationThreadList </td><td>  -  </td></tr>
     </table>
     */
    public List<NotificationThread> notifyGetList(Boolean all, List<String> statusTypes, List<String> subjectType, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<NotificationThread>> localVarResp = notifyGetListWithHttpInfo(all, statusTypes, subjectType, since, before, page, limit);
        return localVarResp.getData();
    }

    /**
     * List users&#39;s notification threads
     * 
     * @param all If true, show notifications marked as read. Default value is false (optional)
     * @param statusTypes Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)
     * @param subjectType filter notifications by subject type (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;NotificationThread&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NotificationThreadList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NotificationThread>> notifyGetListWithHttpInfo(Boolean all, List<String> statusTypes, List<String> subjectType, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = notifyGetListValidateBeforeCall(all, statusTypes, subjectType, since, before, page, limit, null);
        Type localVarReturnType = new TypeToken<List<NotificationThread>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List users&#39;s notification threads (asynchronously)
     * 
     * @param all If true, show notifications marked as read. Default value is false (optional)
     * @param statusTypes Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)
     * @param subjectType filter notifications by subject type (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NotificationThreadList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyGetListAsync(Boolean all, List<String> statusTypes, List<String> subjectType, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit, final ApiCallback<List<NotificationThread>> _callback) throws ApiException {

        okhttp3.Call localVarCall = notifyGetListValidateBeforeCall(all, statusTypes, subjectType, since, before, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<NotificationThread>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notifyGetRepoList
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param all If true, show notifications marked as read. Default value is false (optional)
     * @param statusTypes Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)
     * @param subjectType filter notifications by subject type (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NotificationThreadList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyGetRepoListCall(String owner, String repo, Boolean all, List<String> statusTypes, List<String> subjectType, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/notifications"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        if (statusTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status-types", statusTypes));
        }

        if (subjectType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject-type", subjectType));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notifyGetRepoListValidateBeforeCall(String owner, String repo, Boolean all, List<String> statusTypes, List<String> subjectType, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling notifyGetRepoList(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling notifyGetRepoList(Async)");
        }

        return notifyGetRepoListCall(owner, repo, all, statusTypes, subjectType, since, before, page, limit, _callback);

    }

    /**
     * List users&#39;s notification threads on a specific repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param all If true, show notifications marked as read. Default value is false (optional)
     * @param statusTypes Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)
     * @param subjectType filter notifications by subject type (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;NotificationThread&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NotificationThreadList </td><td>  -  </td></tr>
     </table>
     */
    public List<NotificationThread> notifyGetRepoList(String owner, String repo, Boolean all, List<String> statusTypes, List<String> subjectType, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<NotificationThread>> localVarResp = notifyGetRepoListWithHttpInfo(owner, repo, all, statusTypes, subjectType, since, before, page, limit);
        return localVarResp.getData();
    }

    /**
     * List users&#39;s notification threads on a specific repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param all If true, show notifications marked as read. Default value is false (optional)
     * @param statusTypes Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)
     * @param subjectType filter notifications by subject type (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;NotificationThread&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NotificationThreadList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NotificationThread>> notifyGetRepoListWithHttpInfo(String owner, String repo, Boolean all, List<String> statusTypes, List<String> subjectType, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = notifyGetRepoListValidateBeforeCall(owner, repo, all, statusTypes, subjectType, since, before, page, limit, null);
        Type localVarReturnType = new TypeToken<List<NotificationThread>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List users&#39;s notification threads on a specific repo (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param all If true, show notifications marked as read. Default value is false (optional)
     * @param statusTypes Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)
     * @param subjectType filter notifications by subject type (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NotificationThreadList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyGetRepoListAsync(String owner, String repo, Boolean all, List<String> statusTypes, List<String> subjectType, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit, final ApiCallback<List<NotificationThread>> _callback) throws ApiException {

        okhttp3.Call localVarCall = notifyGetRepoListValidateBeforeCall(owner, repo, all, statusTypes, subjectType, since, before, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<NotificationThread>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notifyGetThread
     * @param id id of notification thread (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NotificationThread </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyGetThreadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/threads/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notifyGetThreadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling notifyGetThread(Async)");
        }

        return notifyGetThreadCall(id, _callback);

    }

    /**
     * Get notification thread by ID
     * 
     * @param id id of notification thread (required)
     * @return NotificationThread
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NotificationThread </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public NotificationThread notifyGetThread(String id) throws ApiException {
        ApiResponse<NotificationThread> localVarResp = notifyGetThreadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get notification thread by ID
     * 
     * @param id id of notification thread (required)
     * @return ApiResponse&lt;NotificationThread&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NotificationThread </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationThread> notifyGetThreadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = notifyGetThreadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<NotificationThread>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get notification thread by ID (asynchronously)
     * 
     * @param id id of notification thread (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NotificationThread </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyGetThreadAsync(String id, final ApiCallback<NotificationThread> _callback) throws ApiException {

        okhttp3.Call localVarCall = notifyGetThreadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<NotificationThread>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notifyNewAvailable
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of unread notifications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyNewAvailableCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/new";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notifyNewAvailableValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return notifyNewAvailableCall(_callback);

    }

    /**
     * Check if unread notifications exist
     * 
     * @return NotificationCount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of unread notifications </td><td>  -  </td></tr>
     </table>
     */
    public NotificationCount notifyNewAvailable() throws ApiException {
        ApiResponse<NotificationCount> localVarResp = notifyNewAvailableWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Check if unread notifications exist
     * 
     * @return ApiResponse&lt;NotificationCount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of unread notifications </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationCount> notifyNewAvailableWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = notifyNewAvailableValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<NotificationCount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if unread notifications exist (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of unread notifications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyNewAvailableAsync(final ApiCallback<NotificationCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = notifyNewAvailableValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<NotificationCount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notifyReadList
     * @param lastReadAt Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)
     * @param all If true, mark all notifications on this repo. Default value is false (optional)
     * @param statusTypes Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)
     * @param toStatus Status to mark notifications as, Defaults to read. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 205 </td><td> NotificationThreadList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyReadListCall(OffsetDateTime lastReadAt, String all, List<String> statusTypes, String toStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lastReadAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_read_at", lastReadAt));
        }

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        if (statusTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status-types", statusTypes));
        }

        if (toStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to-status", toStatus));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notifyReadListValidateBeforeCall(OffsetDateTime lastReadAt, String all, List<String> statusTypes, String toStatus, final ApiCallback _callback) throws ApiException {
        return notifyReadListCall(lastReadAt, all, statusTypes, toStatus, _callback);

    }

    /**
     * Mark notification threads as read, pinned or unread
     * 
     * @param lastReadAt Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)
     * @param all If true, mark all notifications on this repo. Default value is false (optional)
     * @param statusTypes Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)
     * @param toStatus Status to mark notifications as, Defaults to read. (optional)
     * @return List&lt;NotificationThread&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 205 </td><td> NotificationThreadList </td><td>  -  </td></tr>
     </table>
     */
    public List<NotificationThread> notifyReadList(OffsetDateTime lastReadAt, String all, List<String> statusTypes, String toStatus) throws ApiException {
        ApiResponse<List<NotificationThread>> localVarResp = notifyReadListWithHttpInfo(lastReadAt, all, statusTypes, toStatus);
        return localVarResp.getData();
    }

    /**
     * Mark notification threads as read, pinned or unread
     * 
     * @param lastReadAt Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)
     * @param all If true, mark all notifications on this repo. Default value is false (optional)
     * @param statusTypes Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)
     * @param toStatus Status to mark notifications as, Defaults to read. (optional)
     * @return ApiResponse&lt;List&lt;NotificationThread&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 205 </td><td> NotificationThreadList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NotificationThread>> notifyReadListWithHttpInfo(OffsetDateTime lastReadAt, String all, List<String> statusTypes, String toStatus) throws ApiException {
        okhttp3.Call localVarCall = notifyReadListValidateBeforeCall(lastReadAt, all, statusTypes, toStatus, null);
        Type localVarReturnType = new TypeToken<List<NotificationThread>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark notification threads as read, pinned or unread (asynchronously)
     * 
     * @param lastReadAt Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)
     * @param all If true, mark all notifications on this repo. Default value is false (optional)
     * @param statusTypes Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)
     * @param toStatus Status to mark notifications as, Defaults to read. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 205 </td><td> NotificationThreadList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyReadListAsync(OffsetDateTime lastReadAt, String all, List<String> statusTypes, String toStatus, final ApiCallback<List<NotificationThread>> _callback) throws ApiException {

        okhttp3.Call localVarCall = notifyReadListValidateBeforeCall(lastReadAt, all, statusTypes, toStatus, _callback);
        Type localVarReturnType = new TypeToken<List<NotificationThread>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notifyReadRepoList
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param all If true, mark all notifications on this repo. Default value is false (optional)
     * @param statusTypes Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)
     * @param toStatus Status to mark notifications as. Defaults to read. (optional)
     * @param lastReadAt Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 205 </td><td> NotificationThreadList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyReadRepoListCall(String owner, String repo, String all, List<String> statusTypes, String toStatus, OffsetDateTime lastReadAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/notifications"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        if (statusTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status-types", statusTypes));
        }

        if (toStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to-status", toStatus));
        }

        if (lastReadAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_read_at", lastReadAt));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notifyReadRepoListValidateBeforeCall(String owner, String repo, String all, List<String> statusTypes, String toStatus, OffsetDateTime lastReadAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling notifyReadRepoList(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling notifyReadRepoList(Async)");
        }

        return notifyReadRepoListCall(owner, repo, all, statusTypes, toStatus, lastReadAt, _callback);

    }

    /**
     * Mark notification threads as read, pinned or unread on a specific repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param all If true, mark all notifications on this repo. Default value is false (optional)
     * @param statusTypes Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)
     * @param toStatus Status to mark notifications as. Defaults to read. (optional)
     * @param lastReadAt Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)
     * @return List&lt;NotificationThread&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 205 </td><td> NotificationThreadList </td><td>  -  </td></tr>
     </table>
     */
    public List<NotificationThread> notifyReadRepoList(String owner, String repo, String all, List<String> statusTypes, String toStatus, OffsetDateTime lastReadAt) throws ApiException {
        ApiResponse<List<NotificationThread>> localVarResp = notifyReadRepoListWithHttpInfo(owner, repo, all, statusTypes, toStatus, lastReadAt);
        return localVarResp.getData();
    }

    /**
     * Mark notification threads as read, pinned or unread on a specific repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param all If true, mark all notifications on this repo. Default value is false (optional)
     * @param statusTypes Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)
     * @param toStatus Status to mark notifications as. Defaults to read. (optional)
     * @param lastReadAt Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)
     * @return ApiResponse&lt;List&lt;NotificationThread&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 205 </td><td> NotificationThreadList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NotificationThread>> notifyReadRepoListWithHttpInfo(String owner, String repo, String all, List<String> statusTypes, String toStatus, OffsetDateTime lastReadAt) throws ApiException {
        okhttp3.Call localVarCall = notifyReadRepoListValidateBeforeCall(owner, repo, all, statusTypes, toStatus, lastReadAt, null);
        Type localVarReturnType = new TypeToken<List<NotificationThread>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark notification threads as read, pinned or unread on a specific repo (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param all If true, mark all notifications on this repo. Default value is false (optional)
     * @param statusTypes Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)
     * @param toStatus Status to mark notifications as. Defaults to read. (optional)
     * @param lastReadAt Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 205 </td><td> NotificationThreadList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyReadRepoListAsync(String owner, String repo, String all, List<String> statusTypes, String toStatus, OffsetDateTime lastReadAt, final ApiCallback<List<NotificationThread>> _callback) throws ApiException {

        okhttp3.Call localVarCall = notifyReadRepoListValidateBeforeCall(owner, repo, all, statusTypes, toStatus, lastReadAt, _callback);
        Type localVarReturnType = new TypeToken<List<NotificationThread>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notifyReadThread
     * @param id id of notification thread (required)
     * @param toStatus Status to mark notifications as (optional, default to read)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 205 </td><td> NotificationThread </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyReadThreadCall(String id, String toStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/threads/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (toStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to-status", toStatus));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notifyReadThreadValidateBeforeCall(String id, String toStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling notifyReadThread(Async)");
        }

        return notifyReadThreadCall(id, toStatus, _callback);

    }

    /**
     * Mark notification thread as read by ID
     * 
     * @param id id of notification thread (required)
     * @param toStatus Status to mark notifications as (optional, default to read)
     * @return NotificationThread
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 205 </td><td> NotificationThread </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public NotificationThread notifyReadThread(String id, String toStatus) throws ApiException {
        ApiResponse<NotificationThread> localVarResp = notifyReadThreadWithHttpInfo(id, toStatus);
        return localVarResp.getData();
    }

    /**
     * Mark notification thread as read by ID
     * 
     * @param id id of notification thread (required)
     * @param toStatus Status to mark notifications as (optional, default to read)
     * @return ApiResponse&lt;NotificationThread&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 205 </td><td> NotificationThread </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationThread> notifyReadThreadWithHttpInfo(String id, String toStatus) throws ApiException {
        okhttp3.Call localVarCall = notifyReadThreadValidateBeforeCall(id, toStatus, null);
        Type localVarReturnType = new TypeToken<NotificationThread>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark notification thread as read by ID (asynchronously)
     * 
     * @param id id of notification thread (required)
     * @param toStatus Status to mark notifications as (optional, default to read)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 205 </td><td> NotificationThread </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyReadThreadAsync(String id, String toStatus, final ApiCallback<NotificationThread> _callback) throws ApiException {

        okhttp3.Call localVarCall = notifyReadThreadValidateBeforeCall(id, toStatus, _callback);
        Type localVarReturnType = new TypeToken<NotificationThread>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
