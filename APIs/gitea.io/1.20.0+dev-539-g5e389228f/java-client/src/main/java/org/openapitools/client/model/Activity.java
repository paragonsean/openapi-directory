/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.Repository;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Activity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:48.734827-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Activity {
  public static final String SERIALIZED_NAME_ACT_USER = "act_user";
  @SerializedName(SERIALIZED_NAME_ACT_USER)
  private User actUser;

  public static final String SERIALIZED_NAME_ACT_USER_ID = "act_user_id";
  @SerializedName(SERIALIZED_NAME_ACT_USER_ID)
  private Long actUserId;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private Comment comment;

  public static final String SERIALIZED_NAME_COMMENT_ID = "comment_id";
  @SerializedName(SERIALIZED_NAME_COMMENT_ID)
  private Long commentId;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IS_PRIVATE = "is_private";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE)
  private Boolean isPrivate;

  public static final String SERIALIZED_NAME_OP_TYPE = "op_type";
  @SerializedName(SERIALIZED_NAME_OP_TYPE)
  private String opType;

  public static final String SERIALIZED_NAME_REF_NAME = "ref_name";
  @SerializedName(SERIALIZED_NAME_REF_NAME)
  private String refName;

  public static final String SERIALIZED_NAME_REPO = "repo";
  @SerializedName(SERIALIZED_NAME_REPO)
  private Repository repo;

  public static final String SERIALIZED_NAME_REPO_ID = "repo_id";
  @SerializedName(SERIALIZED_NAME_REPO_ID)
  private Long repoId;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Long userId;

  public Activity() {
  }

  public Activity actUser(User actUser) {
    this.actUser = actUser;
    return this;
  }

  /**
   * Get actUser
   * @return actUser
   */
  @javax.annotation.Nullable
  public User getActUser() {
    return actUser;
  }

  public void setActUser(User actUser) {
    this.actUser = actUser;
  }


  public Activity actUserId(Long actUserId) {
    this.actUserId = actUserId;
    return this;
  }

  /**
   * Get actUserId
   * @return actUserId
   */
  @javax.annotation.Nullable
  public Long getActUserId() {
    return actUserId;
  }

  public void setActUserId(Long actUserId) {
    this.actUserId = actUserId;
  }


  public Activity comment(Comment comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public Comment getComment() {
    return comment;
  }

  public void setComment(Comment comment) {
    this.comment = comment;
  }


  public Activity commentId(Long commentId) {
    this.commentId = commentId;
    return this;
  }

  /**
   * Get commentId
   * @return commentId
   */
  @javax.annotation.Nullable
  public Long getCommentId() {
    return commentId;
  }

  public void setCommentId(Long commentId) {
    this.commentId = commentId;
  }


  public Activity content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public Activity created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public Activity id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Activity isPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
    return this;
  }

  /**
   * Get isPrivate
   * @return isPrivate
   */
  @javax.annotation.Nullable
  public Boolean getIsPrivate() {
    return isPrivate;
  }

  public void setIsPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
  }


  public Activity opType(String opType) {
    this.opType = opType;
    return this;
  }

  /**
   * Get opType
   * @return opType
   */
  @javax.annotation.Nullable
  public String getOpType() {
    return opType;
  }

  public void setOpType(String opType) {
    this.opType = opType;
  }


  public Activity refName(String refName) {
    this.refName = refName;
    return this;
  }

  /**
   * Get refName
   * @return refName
   */
  @javax.annotation.Nullable
  public String getRefName() {
    return refName;
  }

  public void setRefName(String refName) {
    this.refName = refName;
  }


  public Activity repo(Repository repo) {
    this.repo = repo;
    return this;
  }

  /**
   * Get repo
   * @return repo
   */
  @javax.annotation.Nullable
  public Repository getRepo() {
    return repo;
  }

  public void setRepo(Repository repo) {
    this.repo = repo;
  }


  public Activity repoId(Long repoId) {
    this.repoId = repoId;
    return this;
  }

  /**
   * Get repoId
   * @return repoId
   */
  @javax.annotation.Nullable
  public Long getRepoId() {
    return repoId;
  }

  public void setRepoId(Long repoId) {
    this.repoId = repoId;
  }


  public Activity userId(Long userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public Long getUserId() {
    return userId;
  }

  public void setUserId(Long userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Activity activity = (Activity) o;
    return Objects.equals(this.actUser, activity.actUser) &&
        Objects.equals(this.actUserId, activity.actUserId) &&
        Objects.equals(this.comment, activity.comment) &&
        Objects.equals(this.commentId, activity.commentId) &&
        Objects.equals(this.content, activity.content) &&
        Objects.equals(this.created, activity.created) &&
        Objects.equals(this.id, activity.id) &&
        Objects.equals(this.isPrivate, activity.isPrivate) &&
        Objects.equals(this.opType, activity.opType) &&
        Objects.equals(this.refName, activity.refName) &&
        Objects.equals(this.repo, activity.repo) &&
        Objects.equals(this.repoId, activity.repoId) &&
        Objects.equals(this.userId, activity.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actUser, actUserId, comment, commentId, content, created, id, isPrivate, opType, refName, repo, repoId, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Activity {\n");
    sb.append("    actUser: ").append(toIndentedString(actUser)).append("\n");
    sb.append("    actUserId: ").append(toIndentedString(actUserId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    commentId: ").append(toIndentedString(commentId)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    opType: ").append(toIndentedString(opType)).append("\n");
    sb.append("    refName: ").append(toIndentedString(refName)).append("\n");
    sb.append("    repo: ").append(toIndentedString(repo)).append("\n");
    sb.append("    repoId: ").append(toIndentedString(repoId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("act_user");
    openapiFields.add("act_user_id");
    openapiFields.add("comment");
    openapiFields.add("comment_id");
    openapiFields.add("content");
    openapiFields.add("created");
    openapiFields.add("id");
    openapiFields.add("is_private");
    openapiFields.add("op_type");
    openapiFields.add("ref_name");
    openapiFields.add("repo");
    openapiFields.add("repo_id");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Activity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Activity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Activity is not found in the empty JSON string", Activity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Activity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Activity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `act_user`
      if (jsonObj.get("act_user") != null && !jsonObj.get("act_user").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("act_user"));
      }
      // validate the optional field `comment`
      if (jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) {
        Comment.validateJsonElement(jsonObj.get("comment"));
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("op_type") != null && !jsonObj.get("op_type").isJsonNull()) && !jsonObj.get("op_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `op_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("op_type").toString()));
      }
      if ((jsonObj.get("ref_name") != null && !jsonObj.get("ref_name").isJsonNull()) && !jsonObj.get("ref_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref_name").toString()));
      }
      // validate the optional field `repo`
      if (jsonObj.get("repo") != null && !jsonObj.get("repo").isJsonNull()) {
        Repository.validateJsonElement(jsonObj.get("repo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Activity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Activity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Activity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Activity.class));

       return (TypeAdapter<T>) new TypeAdapter<Activity>() {
           @Override
           public void write(JsonWriter out, Activity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Activity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Activity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Activity
   * @throws IOException if the JSON string is invalid with respect to Activity
   */
  public static Activity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Activity.class);
  }

  /**
   * Convert an instance of Activity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

