/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NodeInfoServices;
import org.openapitools.client.model.NodeInfoSoftware;
import org.openapitools.client.model.NodeInfoUsage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NodeInfo contains standardized way of exposing metadata about a server running one of the distributed social networks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:48.734827-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodeInfo {
  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_OPEN_REGISTRATIONS = "openRegistrations";
  @SerializedName(SERIALIZED_NAME_OPEN_REGISTRATIONS)
  private Boolean openRegistrations;

  public static final String SERIALIZED_NAME_PROTOCOLS = "protocols";
  @SerializedName(SERIALIZED_NAME_PROTOCOLS)
  private List<String> protocols = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private NodeInfoServices services;

  public static final String SERIALIZED_NAME_SOFTWARE = "software";
  @SerializedName(SERIALIZED_NAME_SOFTWARE)
  private NodeInfoSoftware software;

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private NodeInfoUsage usage;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public NodeInfo() {
  }

  public NodeInfo metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public NodeInfo openRegistrations(Boolean openRegistrations) {
    this.openRegistrations = openRegistrations;
    return this;
  }

  /**
   * Get openRegistrations
   * @return openRegistrations
   */
  @javax.annotation.Nullable
  public Boolean getOpenRegistrations() {
    return openRegistrations;
  }

  public void setOpenRegistrations(Boolean openRegistrations) {
    this.openRegistrations = openRegistrations;
  }


  public NodeInfo protocols(List<String> protocols) {
    this.protocols = protocols;
    return this;
  }

  public NodeInfo addProtocolsItem(String protocolsItem) {
    if (this.protocols == null) {
      this.protocols = new ArrayList<>();
    }
    this.protocols.add(protocolsItem);
    return this;
  }

  /**
   * Get protocols
   * @return protocols
   */
  @javax.annotation.Nullable
  public List<String> getProtocols() {
    return protocols;
  }

  public void setProtocols(List<String> protocols) {
    this.protocols = protocols;
  }


  public NodeInfo services(NodeInfoServices services) {
    this.services = services;
    return this;
  }

  /**
   * Get services
   * @return services
   */
  @javax.annotation.Nullable
  public NodeInfoServices getServices() {
    return services;
  }

  public void setServices(NodeInfoServices services) {
    this.services = services;
  }


  public NodeInfo software(NodeInfoSoftware software) {
    this.software = software;
    return this;
  }

  /**
   * Get software
   * @return software
   */
  @javax.annotation.Nullable
  public NodeInfoSoftware getSoftware() {
    return software;
  }

  public void setSoftware(NodeInfoSoftware software) {
    this.software = software;
  }


  public NodeInfo usage(NodeInfoUsage usage) {
    this.usage = usage;
    return this;
  }

  /**
   * Get usage
   * @return usage
   */
  @javax.annotation.Nullable
  public NodeInfoUsage getUsage() {
    return usage;
  }

  public void setUsage(NodeInfoUsage usage) {
    this.usage = usage;
  }


  public NodeInfo version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeInfo nodeInfo = (NodeInfo) o;
    return Objects.equals(this.metadata, nodeInfo.metadata) &&
        Objects.equals(this.openRegistrations, nodeInfo.openRegistrations) &&
        Objects.equals(this.protocols, nodeInfo.protocols) &&
        Objects.equals(this.services, nodeInfo.services) &&
        Objects.equals(this.software, nodeInfo.software) &&
        Objects.equals(this.usage, nodeInfo.usage) &&
        Objects.equals(this.version, nodeInfo.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, openRegistrations, protocols, services, software, usage, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeInfo {\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    openRegistrations: ").append(toIndentedString(openRegistrations)).append("\n");
    sb.append("    protocols: ").append(toIndentedString(protocols)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    software: ").append(toIndentedString(software)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metadata");
    openapiFields.add("openRegistrations");
    openapiFields.add("protocols");
    openapiFields.add("services");
    openapiFields.add("software");
    openapiFields.add("usage");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodeInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeInfo is not found in the empty JSON string", NodeInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("protocols") != null && !jsonObj.get("protocols").isJsonNull() && !jsonObj.get("protocols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocols` to be an array in the JSON string but got `%s`", jsonObj.get("protocols").toString()));
      }
      // validate the optional field `services`
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) {
        NodeInfoServices.validateJsonElement(jsonObj.get("services"));
      }
      // validate the optional field `software`
      if (jsonObj.get("software") != null && !jsonObj.get("software").isJsonNull()) {
        NodeInfoSoftware.validateJsonElement(jsonObj.get("software"));
      }
      // validate the optional field `usage`
      if (jsonObj.get("usage") != null && !jsonObj.get("usage").isJsonNull()) {
        NodeInfoUsage.validateJsonElement(jsonObj.get("usage"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeInfo>() {
           @Override
           public void write(JsonWriter out, NodeInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodeInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodeInfo
   * @throws IOException if the JSON string is invalid with respect to NodeInfo
   */
  public static NodeInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeInfo.class);
  }

  /**
   * Convert an instance of NodeInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

