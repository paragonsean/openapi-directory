/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddTimeOption;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.CreateIssueCommentOption;
import org.openapitools.client.model.CreateIssueOption;
import org.openapitools.client.model.CreateLabelOption;
import org.openapitools.client.model.CreateMilestoneOption;
import org.openapitools.client.model.EditAttachmentOptions;
import org.openapitools.client.model.EditDeadlineOption;
import org.openapitools.client.model.EditIssueCommentOption;
import org.openapitools.client.model.EditIssueOption;
import org.openapitools.client.model.EditLabelOption;
import org.openapitools.client.model.EditMilestoneOption;
import org.openapitools.client.model.EditReactionOption;
import java.io.File;
import org.openapitools.client.model.Issue;
import org.openapitools.client.model.IssueDeadline;
import org.openapitools.client.model.IssueLabelsOption;
import org.openapitools.client.model.IssueMeta;
import org.openapitools.client.model.Label;
import org.openapitools.client.model.Milestone;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Reaction;
import org.openapitools.client.model.TimelineComment;
import org.openapitools.client.model.TrackedTime;
import org.openapitools.client.model.User;
import org.openapitools.client.model.WatchInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IssueApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssueApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IssueApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for issueAddLabel
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueLabelsOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueAddLabelCall(String owner, String repo, Long index, IssueLabelsOption issueLabelsOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueLabelsOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/labels"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueAddLabelValidateBeforeCall(String owner, String repo, Long index, IssueLabelsOption issueLabelsOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueAddLabel(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueAddLabel(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueAddLabel(Async)");
        }

        return issueAddLabelCall(owner, repo, index, issueLabelsOption, _callback);

    }

    /**
     * Add a label to an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueLabelsOption  (optional)
     * @return List&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public List<Label> issueAddLabel(String owner, String repo, Long index, IssueLabelsOption issueLabelsOption) throws ApiException {
        ApiResponse<List<Label>> localVarResp = issueAddLabelWithHttpInfo(owner, repo, index, issueLabelsOption);
        return localVarResp.getData();
    }

    /**
     * Add a label to an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueLabelsOption  (optional)
     * @return ApiResponse&lt;List&lt;Label&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Label>> issueAddLabelWithHttpInfo(String owner, String repo, Long index, IssueLabelsOption issueLabelsOption) throws ApiException {
        okhttp3.Call localVarCall = issueAddLabelValidateBeforeCall(owner, repo, index, issueLabelsOption, null);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a label to an issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueLabelsOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueAddLabelAsync(String owner, String repo, Long index, IssueLabelsOption issueLabelsOption, final ApiCallback<List<Label>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueAddLabelValidateBeforeCall(owner, repo, index, issueLabelsOption, _callback);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueAddSubscription
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param user user to subscribe (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Already subscribed </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully Subscribed </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> User can only subscribe itself if he is no admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueAddSubscriptionCall(String owner, String repo, Long index, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueAddSubscriptionValidateBeforeCall(String owner, String repo, Long index, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueAddSubscription(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueAddSubscription(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueAddSubscription(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling issueAddSubscription(Async)");
        }

        return issueAddSubscriptionCall(owner, repo, index, user, _callback);

    }

    /**
     * Subscribe user to issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param user user to subscribe (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Already subscribed </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully Subscribed </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> User can only subscribe itself if he is no admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void issueAddSubscription(String owner, String repo, Long index, String user) throws ApiException {
        issueAddSubscriptionWithHttpInfo(owner, repo, index, user);
    }

    /**
     * Subscribe user to issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param user user to subscribe (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Already subscribed </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully Subscribed </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> User can only subscribe itself if he is no admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> issueAddSubscriptionWithHttpInfo(String owner, String repo, Long index, String user) throws ApiException {
        okhttp3.Call localVarCall = issueAddSubscriptionValidateBeforeCall(owner, repo, index, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Subscribe user to issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param user user to subscribe (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Already subscribed </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully Subscribed </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> User can only subscribe itself if he is no admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueAddSubscriptionAsync(String owner, String repo, Long index, String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueAddSubscriptionValidateBeforeCall(owner, repo, index, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueAddTime
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param addTimeOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTime </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueAddTimeCall(String owner, String repo, Long index, AddTimeOption addTimeOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addTimeOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/times"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueAddTimeValidateBeforeCall(String owner, String repo, Long index, AddTimeOption addTimeOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueAddTime(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueAddTime(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueAddTime(Async)");
        }

        return issueAddTimeCall(owner, repo, index, addTimeOption, _callback);

    }

    /**
     * Add tracked time to a issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param addTimeOption  (optional)
     * @return TrackedTime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTime </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public TrackedTime issueAddTime(String owner, String repo, Long index, AddTimeOption addTimeOption) throws ApiException {
        ApiResponse<TrackedTime> localVarResp = issueAddTimeWithHttpInfo(owner, repo, index, addTimeOption);
        return localVarResp.getData();
    }

    /**
     * Add tracked time to a issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param addTimeOption  (optional)
     * @return ApiResponse&lt;TrackedTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTime </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TrackedTime> issueAddTimeWithHttpInfo(String owner, String repo, Long index, AddTimeOption addTimeOption) throws ApiException {
        okhttp3.Call localVarCall = issueAddTimeValidateBeforeCall(owner, repo, index, addTimeOption, null);
        Type localVarReturnType = new TypeToken<TrackedTime>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add tracked time to a issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param addTimeOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTime </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueAddTimeAsync(String owner, String repo, Long index, AddTimeOption addTimeOption, final ApiCallback<TrackedTime> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueAddTimeValidateBeforeCall(owner, repo, index, addTimeOption, _callback);
        Type localVarReturnType = new TypeToken<TrackedTime>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueCheckSubscription
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WatchInfo </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueCheckSubscriptionCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/subscriptions/check"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueCheckSubscriptionValidateBeforeCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueCheckSubscription(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueCheckSubscription(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueCheckSubscription(Async)");
        }

        return issueCheckSubscriptionCall(owner, repo, index, _callback);

    }

    /**
     * Check if user is subscribed to an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @return WatchInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WatchInfo </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public WatchInfo issueCheckSubscription(String owner, String repo, Long index) throws ApiException {
        ApiResponse<WatchInfo> localVarResp = issueCheckSubscriptionWithHttpInfo(owner, repo, index);
        return localVarResp.getData();
    }

    /**
     * Check if user is subscribed to an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @return ApiResponse&lt;WatchInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WatchInfo </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WatchInfo> issueCheckSubscriptionWithHttpInfo(String owner, String repo, Long index) throws ApiException {
        okhttp3.Call localVarCall = issueCheckSubscriptionValidateBeforeCall(owner, repo, index, null);
        Type localVarReturnType = new TypeToken<WatchInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if user is subscribed to an issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WatchInfo </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueCheckSubscriptionAsync(String owner, String repo, Long index, final ApiCallback<WatchInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueCheckSubscriptionValidateBeforeCall(owner, repo, index, _callback);
        Type localVarReturnType = new TypeToken<WatchInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueClearLabels
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueClearLabelsCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/labels"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueClearLabelsValidateBeforeCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueClearLabels(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueClearLabels(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueClearLabels(Async)");
        }

        return issueClearLabelsCall(owner, repo, index, _callback);

    }

    /**
     * Remove all labels from an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void issueClearLabels(String owner, String repo, Long index) throws ApiException {
        issueClearLabelsWithHttpInfo(owner, repo, index);
    }

    /**
     * Remove all labels from an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> issueClearLabelsWithHttpInfo(String owner, String repo, Long index) throws ApiException {
        okhttp3.Call localVarCall = issueClearLabelsValidateBeforeCall(owner, repo, index, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove all labels from an issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueClearLabelsAsync(String owner, String repo, Long index, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueClearLabelsValidateBeforeCall(owner, repo, index, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueCreateComment
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param createIssueCommentOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Comment </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueCreateCommentCall(String owner, String repo, Long index, CreateIssueCommentOption createIssueCommentOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createIssueCommentOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueCreateCommentValidateBeforeCall(String owner, String repo, Long index, CreateIssueCommentOption createIssueCommentOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueCreateComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueCreateComment(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueCreateComment(Async)");
        }

        return issueCreateCommentCall(owner, repo, index, createIssueCommentOption, _callback);

    }

    /**
     * Add a comment to an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param createIssueCommentOption  (optional)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Comment </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Comment issueCreateComment(String owner, String repo, Long index, CreateIssueCommentOption createIssueCommentOption) throws ApiException {
        ApiResponse<Comment> localVarResp = issueCreateCommentWithHttpInfo(owner, repo, index, createIssueCommentOption);
        return localVarResp.getData();
    }

    /**
     * Add a comment to an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param createIssueCommentOption  (optional)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Comment </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Comment> issueCreateCommentWithHttpInfo(String owner, String repo, Long index, CreateIssueCommentOption createIssueCommentOption) throws ApiException {
        okhttp3.Call localVarCall = issueCreateCommentValidateBeforeCall(owner, repo, index, createIssueCommentOption, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a comment to an issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param createIssueCommentOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Comment </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueCreateCommentAsync(String owner, String repo, Long index, CreateIssueCommentOption createIssueCommentOption, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueCreateCommentValidateBeforeCall(owner, repo, index, createIssueCommentOption, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueCreateIssue
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createIssueOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 412 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueCreateIssueCall(String owner, String repo, CreateIssueOption createIssueOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createIssueOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueCreateIssueValidateBeforeCall(String owner, String repo, CreateIssueOption createIssueOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueCreateIssue(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueCreateIssue(Async)");
        }

        return issueCreateIssueCall(owner, repo, createIssueOption, _callback);

    }

    /**
     * Create an issue. If using deadline only the date will be taken into account, and time of day ignored.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createIssueOption  (optional)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 412 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Issue issueCreateIssue(String owner, String repo, CreateIssueOption createIssueOption) throws ApiException {
        ApiResponse<Issue> localVarResp = issueCreateIssueWithHttpInfo(owner, repo, createIssueOption);
        return localVarResp.getData();
    }

    /**
     * Create an issue. If using deadline only the date will be taken into account, and time of day ignored.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createIssueOption  (optional)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 412 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Issue> issueCreateIssueWithHttpInfo(String owner, String repo, CreateIssueOption createIssueOption) throws ApiException {
        okhttp3.Call localVarCall = issueCreateIssueValidateBeforeCall(owner, repo, createIssueOption, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an issue. If using deadline only the date will be taken into account, and time of day ignored. (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createIssueOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 412 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueCreateIssueAsync(String owner, String repo, CreateIssueOption createIssueOption, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueCreateIssueValidateBeforeCall(owner, repo, createIssueOption, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueCreateIssueAttachment
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param attachment attachment to upload (required)
     * @param name name of the attachment (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueCreateIssueAttachmentCall(String owner, String repo, Long index, File attachment, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/assets"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachment != null) {
            localVarFormParams.put("attachment", attachment);
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueCreateIssueAttachmentValidateBeforeCall(String owner, String repo, Long index, File attachment, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueCreateIssueAttachment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueCreateIssueAttachment(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueCreateIssueAttachment(Async)");
        }

        // verify the required parameter 'attachment' is set
        if (attachment == null) {
            throw new ApiException("Missing the required parameter 'attachment' when calling issueCreateIssueAttachment(Async)");
        }

        return issueCreateIssueAttachmentCall(owner, repo, index, attachment, name, _callback);

    }

    /**
     * Create an issue attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param attachment attachment to upload (required)
     * @param name name of the attachment (optional)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Attachment issueCreateIssueAttachment(String owner, String repo, Long index, File attachment, String name) throws ApiException {
        ApiResponse<Attachment> localVarResp = issueCreateIssueAttachmentWithHttpInfo(owner, repo, index, attachment, name);
        return localVarResp.getData();
    }

    /**
     * Create an issue attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param attachment attachment to upload (required)
     * @param name name of the attachment (optional)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Attachment> issueCreateIssueAttachmentWithHttpInfo(String owner, String repo, Long index, File attachment, String name) throws ApiException {
        okhttp3.Call localVarCall = issueCreateIssueAttachmentValidateBeforeCall(owner, repo, index, attachment, name, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an issue attachment (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param attachment attachment to upload (required)
     * @param name name of the attachment (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueCreateIssueAttachmentAsync(String owner, String repo, Long index, File attachment, String name, final ApiCallback<Attachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueCreateIssueAttachmentValidateBeforeCall(owner, repo, index, attachment, name, _callback);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueCreateIssueBlocking
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueMeta  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the issue does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueCreateIssueBlockingCall(String owner, String repo, String index, IssueMeta issueMeta, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueMeta;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/blocks"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueCreateIssueBlockingValidateBeforeCall(String owner, String repo, String index, IssueMeta issueMeta, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueCreateIssueBlocking(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueCreateIssueBlocking(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueCreateIssueBlocking(Async)");
        }

        return issueCreateIssueBlockingCall(owner, repo, index, issueMeta, _callback);

    }

    /**
     * Block the issue given in the body by the issue in path
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueMeta  (optional)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the issue does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Issue issueCreateIssueBlocking(String owner, String repo, String index, IssueMeta issueMeta) throws ApiException {
        ApiResponse<Issue> localVarResp = issueCreateIssueBlockingWithHttpInfo(owner, repo, index, issueMeta);
        return localVarResp.getData();
    }

    /**
     * Block the issue given in the body by the issue in path
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueMeta  (optional)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the issue does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Issue> issueCreateIssueBlockingWithHttpInfo(String owner, String repo, String index, IssueMeta issueMeta) throws ApiException {
        okhttp3.Call localVarCall = issueCreateIssueBlockingValidateBeforeCall(owner, repo, index, issueMeta, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Block the issue given in the body by the issue in path (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueMeta  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the issue does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueCreateIssueBlockingAsync(String owner, String repo, String index, IssueMeta issueMeta, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueCreateIssueBlockingValidateBeforeCall(owner, repo, index, issueMeta, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueCreateIssueCommentAttachment
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param attachment attachment to upload (required)
     * @param name name of the attachment (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueCreateIssueCommentAttachmentCall(String owner, String repo, Long id, File attachment, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{id}/assets"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachment != null) {
            localVarFormParams.put("attachment", attachment);
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueCreateIssueCommentAttachmentValidateBeforeCall(String owner, String repo, Long id, File attachment, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueCreateIssueCommentAttachment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueCreateIssueCommentAttachment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueCreateIssueCommentAttachment(Async)");
        }

        // verify the required parameter 'attachment' is set
        if (attachment == null) {
            throw new ApiException("Missing the required parameter 'attachment' when calling issueCreateIssueCommentAttachment(Async)");
        }

        return issueCreateIssueCommentAttachmentCall(owner, repo, id, attachment, name, _callback);

    }

    /**
     * Create a comment attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param attachment attachment to upload (required)
     * @param name name of the attachment (optional)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Attachment issueCreateIssueCommentAttachment(String owner, String repo, Long id, File attachment, String name) throws ApiException {
        ApiResponse<Attachment> localVarResp = issueCreateIssueCommentAttachmentWithHttpInfo(owner, repo, id, attachment, name);
        return localVarResp.getData();
    }

    /**
     * Create a comment attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param attachment attachment to upload (required)
     * @param name name of the attachment (optional)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Attachment> issueCreateIssueCommentAttachmentWithHttpInfo(String owner, String repo, Long id, File attachment, String name) throws ApiException {
        okhttp3.Call localVarCall = issueCreateIssueCommentAttachmentValidateBeforeCall(owner, repo, id, attachment, name, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a comment attachment (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param attachment attachment to upload (required)
     * @param name name of the attachment (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueCreateIssueCommentAttachmentAsync(String owner, String repo, Long id, File attachment, String name, final ApiCallback<Attachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueCreateIssueCommentAttachmentValidateBeforeCall(owner, repo, id, attachment, name, _callback);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueCreateIssueDependencies
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueMeta  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the issue does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueCreateIssueDependenciesCall(String owner, String repo, String index, IssueMeta issueMeta, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueMeta;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/dependencies"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueCreateIssueDependenciesValidateBeforeCall(String owner, String repo, String index, IssueMeta issueMeta, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueCreateIssueDependencies(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueCreateIssueDependencies(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueCreateIssueDependencies(Async)");
        }

        return issueCreateIssueDependenciesCall(owner, repo, index, issueMeta, _callback);

    }

    /**
     * Make the issue in the url depend on the issue in the form.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueMeta  (optional)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the issue does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Issue issueCreateIssueDependencies(String owner, String repo, String index, IssueMeta issueMeta) throws ApiException {
        ApiResponse<Issue> localVarResp = issueCreateIssueDependenciesWithHttpInfo(owner, repo, index, issueMeta);
        return localVarResp.getData();
    }

    /**
     * Make the issue in the url depend on the issue in the form.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueMeta  (optional)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the issue does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Issue> issueCreateIssueDependenciesWithHttpInfo(String owner, String repo, String index, IssueMeta issueMeta) throws ApiException {
        okhttp3.Call localVarCall = issueCreateIssueDependenciesValidateBeforeCall(owner, repo, index, issueMeta, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Make the issue in the url depend on the issue in the form. (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueMeta  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the issue does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueCreateIssueDependenciesAsync(String owner, String repo, String index, IssueMeta issueMeta, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueCreateIssueDependenciesValidateBeforeCall(owner, repo, index, issueMeta, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueCreateLabel
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createLabelOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Label </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueCreateLabelCall(String owner, String repo, CreateLabelOption createLabelOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLabelOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/labels"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueCreateLabelValidateBeforeCall(String owner, String repo, CreateLabelOption createLabelOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueCreateLabel(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueCreateLabel(Async)");
        }

        return issueCreateLabelCall(owner, repo, createLabelOption, _callback);

    }

    /**
     * Create a label
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createLabelOption  (optional)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Label </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Label issueCreateLabel(String owner, String repo, CreateLabelOption createLabelOption) throws ApiException {
        ApiResponse<Label> localVarResp = issueCreateLabelWithHttpInfo(owner, repo, createLabelOption);
        return localVarResp.getData();
    }

    /**
     * Create a label
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createLabelOption  (optional)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Label </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Label> issueCreateLabelWithHttpInfo(String owner, String repo, CreateLabelOption createLabelOption) throws ApiException {
        okhttp3.Call localVarCall = issueCreateLabelValidateBeforeCall(owner, repo, createLabelOption, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a label (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createLabelOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Label </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueCreateLabelAsync(String owner, String repo, CreateLabelOption createLabelOption, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueCreateLabelValidateBeforeCall(owner, repo, createLabelOption, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueCreateMilestone
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createMilestoneOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Milestone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueCreateMilestoneCall(String owner, String repo, CreateMilestoneOption createMilestoneOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMilestoneOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/milestones"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueCreateMilestoneValidateBeforeCall(String owner, String repo, CreateMilestoneOption createMilestoneOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueCreateMilestone(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueCreateMilestone(Async)");
        }

        return issueCreateMilestoneCall(owner, repo, createMilestoneOption, _callback);

    }

    /**
     * Create a milestone
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createMilestoneOption  (optional)
     * @return Milestone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Milestone </td><td>  -  </td></tr>
     </table>
     */
    public Milestone issueCreateMilestone(String owner, String repo, CreateMilestoneOption createMilestoneOption) throws ApiException {
        ApiResponse<Milestone> localVarResp = issueCreateMilestoneWithHttpInfo(owner, repo, createMilestoneOption);
        return localVarResp.getData();
    }

    /**
     * Create a milestone
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createMilestoneOption  (optional)
     * @return ApiResponse&lt;Milestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Milestone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Milestone> issueCreateMilestoneWithHttpInfo(String owner, String repo, CreateMilestoneOption createMilestoneOption) throws ApiException {
        okhttp3.Call localVarCall = issueCreateMilestoneValidateBeforeCall(owner, repo, createMilestoneOption, null);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a milestone (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param createMilestoneOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Milestone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueCreateMilestoneAsync(String owner, String repo, CreateMilestoneOption createMilestoneOption, final ApiCallback<Milestone> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueCreateMilestoneValidateBeforeCall(owner, repo, createMilestoneOption, _callback);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueDelete
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of issue to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueDeleteValidateBeforeCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueDelete(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueDelete(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueDelete(Async)");
        }

        return issueDeleteCall(owner, repo, index, _callback);

    }

    /**
     * Delete an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of issue to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void issueDelete(String owner, String repo, Long index) throws ApiException {
        issueDeleteWithHttpInfo(owner, repo, index);
    }

    /**
     * Delete an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of issue to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> issueDeleteWithHttpInfo(String owner, String repo, Long index) throws ApiException {
        okhttp3.Call localVarCall = issueDeleteValidateBeforeCall(owner, repo, index, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of issue to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteAsync(String owner, String repo, Long index, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueDeleteValidateBeforeCall(owner, repo, index, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueDeleteComment
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of comment to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteCommentCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueDeleteCommentValidateBeforeCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueDeleteComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueDeleteComment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueDeleteComment(Async)");
        }

        return issueDeleteCommentCall(owner, repo, id, _callback);

    }

    /**
     * Delete a comment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of comment to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void issueDeleteComment(String owner, String repo, Long id) throws ApiException {
        issueDeleteCommentWithHttpInfo(owner, repo, id);
    }

    /**
     * Delete a comment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of comment to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> issueDeleteCommentWithHttpInfo(String owner, String repo, Long id) throws ApiException {
        okhttp3.Call localVarCall = issueDeleteCommentValidateBeforeCall(owner, repo, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a comment (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of comment to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteCommentAsync(String owner, String repo, Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueDeleteCommentValidateBeforeCall(owner, repo, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueDeleteCommentDeprecated
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index this parameter is ignored (required)
     * @param id id of comment to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call issueDeleteCommentDeprecatedCall(String owner, String repo, Integer index, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/comments/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueDeleteCommentDeprecatedValidateBeforeCall(String owner, String repo, Integer index, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueDeleteCommentDeprecated(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueDeleteCommentDeprecated(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueDeleteCommentDeprecated(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueDeleteCommentDeprecated(Async)");
        }

        return issueDeleteCommentDeprecatedCall(owner, repo, index, id, _callback);

    }

    /**
     * Delete a comment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index this parameter is ignored (required)
     * @param id id of comment to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void issueDeleteCommentDeprecated(String owner, String repo, Integer index, Long id) throws ApiException {
        issueDeleteCommentDeprecatedWithHttpInfo(owner, repo, index, id);
    }

    /**
     * Delete a comment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index this parameter is ignored (required)
     * @param id id of comment to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> issueDeleteCommentDeprecatedWithHttpInfo(String owner, String repo, Integer index, Long id) throws ApiException {
        okhttp3.Call localVarCall = issueDeleteCommentDeprecatedValidateBeforeCall(owner, repo, index, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a comment (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index this parameter is ignored (required)
     * @param id id of comment to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call issueDeleteCommentDeprecatedAsync(String owner, String repo, Integer index, Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueDeleteCommentDeprecatedValidateBeforeCall(owner, repo, index, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueDeleteCommentReaction
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment to edit (required)
     * @param editReactionOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteCommentReactionCall(String owner, String repo, Long id, EditReactionOption editReactionOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editReactionOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{id}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueDeleteCommentReactionValidateBeforeCall(String owner, String repo, Long id, EditReactionOption editReactionOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueDeleteCommentReaction(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueDeleteCommentReaction(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueDeleteCommentReaction(Async)");
        }

        return issueDeleteCommentReactionCall(owner, repo, id, editReactionOption, _callback);

    }

    /**
     * Remove a reaction from a comment of an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment to edit (required)
     * @param editReactionOption  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void issueDeleteCommentReaction(String owner, String repo, Long id, EditReactionOption editReactionOption) throws ApiException {
        issueDeleteCommentReactionWithHttpInfo(owner, repo, id, editReactionOption);
    }

    /**
     * Remove a reaction from a comment of an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment to edit (required)
     * @param editReactionOption  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> issueDeleteCommentReactionWithHttpInfo(String owner, String repo, Long id, EditReactionOption editReactionOption) throws ApiException {
        okhttp3.Call localVarCall = issueDeleteCommentReactionValidateBeforeCall(owner, repo, id, editReactionOption, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a reaction from a comment of an issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment to edit (required)
     * @param editReactionOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteCommentReactionAsync(String owner, String repo, Long id, EditReactionOption editReactionOption, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueDeleteCommentReactionValidateBeforeCall(owner, repo, id, editReactionOption, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueDeleteIssueAttachment
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param attachmentId id of the attachment to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteIssueAttachmentCall(String owner, String repo, Long index, Long attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueDeleteIssueAttachmentValidateBeforeCall(String owner, String repo, Long index, Long attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueDeleteIssueAttachment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueDeleteIssueAttachment(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueDeleteIssueAttachment(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling issueDeleteIssueAttachment(Async)");
        }

        return issueDeleteIssueAttachmentCall(owner, repo, index, attachmentId, _callback);

    }

    /**
     * Delete an issue attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param attachmentId id of the attachment to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void issueDeleteIssueAttachment(String owner, String repo, Long index, Long attachmentId) throws ApiException {
        issueDeleteIssueAttachmentWithHttpInfo(owner, repo, index, attachmentId);
    }

    /**
     * Delete an issue attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param attachmentId id of the attachment to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> issueDeleteIssueAttachmentWithHttpInfo(String owner, String repo, Long index, Long attachmentId) throws ApiException {
        okhttp3.Call localVarCall = issueDeleteIssueAttachmentValidateBeforeCall(owner, repo, index, attachmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an issue attachment (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param attachmentId id of the attachment to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteIssueAttachmentAsync(String owner, String repo, Long index, Long attachmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueDeleteIssueAttachmentValidateBeforeCall(owner, repo, index, attachmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueDeleteIssueCommentAttachment
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param attachmentId id of the attachment to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteIssueCommentAttachmentCall(String owner, String repo, Long id, Long attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueDeleteIssueCommentAttachmentValidateBeforeCall(String owner, String repo, Long id, Long attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueDeleteIssueCommentAttachment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueDeleteIssueCommentAttachment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueDeleteIssueCommentAttachment(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling issueDeleteIssueCommentAttachment(Async)");
        }

        return issueDeleteIssueCommentAttachmentCall(owner, repo, id, attachmentId, _callback);

    }

    /**
     * Delete a comment attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param attachmentId id of the attachment to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void issueDeleteIssueCommentAttachment(String owner, String repo, Long id, Long attachmentId) throws ApiException {
        issueDeleteIssueCommentAttachmentWithHttpInfo(owner, repo, id, attachmentId);
    }

    /**
     * Delete a comment attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param attachmentId id of the attachment to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> issueDeleteIssueCommentAttachmentWithHttpInfo(String owner, String repo, Long id, Long attachmentId) throws ApiException {
        okhttp3.Call localVarCall = issueDeleteIssueCommentAttachmentValidateBeforeCall(owner, repo, id, attachmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a comment attachment (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param attachmentId id of the attachment to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteIssueCommentAttachmentAsync(String owner, String repo, Long id, Long attachmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueDeleteIssueCommentAttachmentValidateBeforeCall(owner, repo, id, attachmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueDeleteIssueReaction
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param editReactionOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteIssueReactionCall(String owner, String repo, Long index, EditReactionOption editReactionOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editReactionOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueDeleteIssueReactionValidateBeforeCall(String owner, String repo, Long index, EditReactionOption editReactionOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueDeleteIssueReaction(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueDeleteIssueReaction(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueDeleteIssueReaction(Async)");
        }

        return issueDeleteIssueReactionCall(owner, repo, index, editReactionOption, _callback);

    }

    /**
     * Remove a reaction from an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param editReactionOption  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void issueDeleteIssueReaction(String owner, String repo, Long index, EditReactionOption editReactionOption) throws ApiException {
        issueDeleteIssueReactionWithHttpInfo(owner, repo, index, editReactionOption);
    }

    /**
     * Remove a reaction from an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param editReactionOption  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> issueDeleteIssueReactionWithHttpInfo(String owner, String repo, Long index, EditReactionOption editReactionOption) throws ApiException {
        okhttp3.Call localVarCall = issueDeleteIssueReactionValidateBeforeCall(owner, repo, index, editReactionOption, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a reaction from an issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param editReactionOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteIssueReactionAsync(String owner, String repo, Long index, EditReactionOption editReactionOption, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueDeleteIssueReactionValidateBeforeCall(owner, repo, index, editReactionOption, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueDeleteLabel
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the label to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteLabelCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/labels/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueDeleteLabelValidateBeforeCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueDeleteLabel(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueDeleteLabel(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueDeleteLabel(Async)");
        }

        return issueDeleteLabelCall(owner, repo, id, _callback);

    }

    /**
     * Delete a label
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the label to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public void issueDeleteLabel(String owner, String repo, Long id) throws ApiException {
        issueDeleteLabelWithHttpInfo(owner, repo, id);
    }

    /**
     * Delete a label
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the label to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> issueDeleteLabelWithHttpInfo(String owner, String repo, Long id) throws ApiException {
        okhttp3.Call localVarCall = issueDeleteLabelValidateBeforeCall(owner, repo, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a label (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the label to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteLabelAsync(String owner, String repo, Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueDeleteLabelValidateBeforeCall(owner, repo, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueDeleteMilestone
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id the milestone to delete, identified by ID and if not available by name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteMilestoneCall(String owner, String repo, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/milestones/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueDeleteMilestoneValidateBeforeCall(String owner, String repo, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueDeleteMilestone(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueDeleteMilestone(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueDeleteMilestone(Async)");
        }

        return issueDeleteMilestoneCall(owner, repo, id, _callback);

    }

    /**
     * Delete a milestone
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id the milestone to delete, identified by ID and if not available by name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public void issueDeleteMilestone(String owner, String repo, String id) throws ApiException {
        issueDeleteMilestoneWithHttpInfo(owner, repo, id);
    }

    /**
     * Delete a milestone
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id the milestone to delete, identified by ID and if not available by name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> issueDeleteMilestoneWithHttpInfo(String owner, String repo, String id) throws ApiException {
        okhttp3.Call localVarCall = issueDeleteMilestoneValidateBeforeCall(owner, repo, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a milestone (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id the milestone to delete, identified by ID and if not available by name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteMilestoneAsync(String owner, String repo, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueDeleteMilestoneValidateBeforeCall(owner, repo, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueDeleteStopWatch
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to stop the stopwatch on (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not repo writer, user does not have rights to toggle stopwatch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot cancel a non existent stopwatch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteStopWatchCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/stopwatch/delete"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueDeleteStopWatchValidateBeforeCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueDeleteStopWatch(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueDeleteStopWatch(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueDeleteStopWatch(Async)");
        }

        return issueDeleteStopWatchCall(owner, repo, index, _callback);

    }

    /**
     * Delete an issue&#39;s existing stopwatch.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to stop the stopwatch on (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not repo writer, user does not have rights to toggle stopwatch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot cancel a non existent stopwatch </td><td>  -  </td></tr>
     </table>
     */
    public void issueDeleteStopWatch(String owner, String repo, Long index) throws ApiException {
        issueDeleteStopWatchWithHttpInfo(owner, repo, index);
    }

    /**
     * Delete an issue&#39;s existing stopwatch.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to stop the stopwatch on (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not repo writer, user does not have rights to toggle stopwatch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot cancel a non existent stopwatch </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> issueDeleteStopWatchWithHttpInfo(String owner, String repo, Long index) throws ApiException {
        okhttp3.Call localVarCall = issueDeleteStopWatchValidateBeforeCall(owner, repo, index, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an issue&#39;s existing stopwatch. (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to stop the stopwatch on (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not repo writer, user does not have rights to toggle stopwatch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot cancel a non existent stopwatch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteStopWatchAsync(String owner, String repo, Long index, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueDeleteStopWatchValidateBeforeCall(owner, repo, index, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueDeleteSubscription
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param user user witch unsubscribe (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Already unsubscribed </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully Unsubscribed </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> User can only subscribe itself if he is no admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteSubscriptionCall(String owner, String repo, Long index, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueDeleteSubscriptionValidateBeforeCall(String owner, String repo, Long index, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueDeleteSubscription(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueDeleteSubscription(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueDeleteSubscription(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling issueDeleteSubscription(Async)");
        }

        return issueDeleteSubscriptionCall(owner, repo, index, user, _callback);

    }

    /**
     * Unsubscribe user from issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param user user witch unsubscribe (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Already unsubscribed </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully Unsubscribed </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> User can only subscribe itself if he is no admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void issueDeleteSubscription(String owner, String repo, Long index, String user) throws ApiException {
        issueDeleteSubscriptionWithHttpInfo(owner, repo, index, user);
    }

    /**
     * Unsubscribe user from issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param user user witch unsubscribe (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Already unsubscribed </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully Unsubscribed </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> User can only subscribe itself if he is no admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> issueDeleteSubscriptionWithHttpInfo(String owner, String repo, Long index, String user) throws ApiException {
        okhttp3.Call localVarCall = issueDeleteSubscriptionValidateBeforeCall(owner, repo, index, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unsubscribe user from issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param user user witch unsubscribe (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Already unsubscribed </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully Unsubscribed </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> User can only subscribe itself if he is no admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteSubscriptionAsync(String owner, String repo, Long index, String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueDeleteSubscriptionValidateBeforeCall(owner, repo, index, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueDeleteTime
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param id id of time to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteTimeCall(String owner, String repo, Long index, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/times/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueDeleteTimeValidateBeforeCall(String owner, String repo, Long index, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueDeleteTime(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueDeleteTime(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueDeleteTime(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueDeleteTime(Async)");
        }

        return issueDeleteTimeCall(owner, repo, index, id, _callback);

    }

    /**
     * Delete specific tracked time
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param id id of time to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void issueDeleteTime(String owner, String repo, Long index, Long id) throws ApiException {
        issueDeleteTimeWithHttpInfo(owner, repo, index, id);
    }

    /**
     * Delete specific tracked time
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param id id of time to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> issueDeleteTimeWithHttpInfo(String owner, String repo, Long index, Long id) throws ApiException {
        okhttp3.Call localVarCall = issueDeleteTimeValidateBeforeCall(owner, repo, index, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete specific tracked time (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param id id of time to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueDeleteTimeAsync(String owner, String repo, Long index, Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueDeleteTimeValidateBeforeCall(owner, repo, index, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueEditComment
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment to edit (required)
     * @param editIssueCommentOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueEditCommentCall(String owner, String repo, Long id, EditIssueCommentOption editIssueCommentOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editIssueCommentOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueEditCommentValidateBeforeCall(String owner, String repo, Long id, EditIssueCommentOption editIssueCommentOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueEditComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueEditComment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueEditComment(Async)");
        }

        return issueEditCommentCall(owner, repo, id, editIssueCommentOption, _callback);

    }

    /**
     * Edit a comment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment to edit (required)
     * @param editIssueCommentOption  (optional)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public Comment issueEditComment(String owner, String repo, Long id, EditIssueCommentOption editIssueCommentOption) throws ApiException {
        ApiResponse<Comment> localVarResp = issueEditCommentWithHttpInfo(owner, repo, id, editIssueCommentOption);
        return localVarResp.getData();
    }

    /**
     * Edit a comment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment to edit (required)
     * @param editIssueCommentOption  (optional)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> issueEditCommentWithHttpInfo(String owner, String repo, Long id, EditIssueCommentOption editIssueCommentOption) throws ApiException {
        okhttp3.Call localVarCall = issueEditCommentValidateBeforeCall(owner, repo, id, editIssueCommentOption, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a comment (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment to edit (required)
     * @param editIssueCommentOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueEditCommentAsync(String owner, String repo, Long id, EditIssueCommentOption editIssueCommentOption, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueEditCommentValidateBeforeCall(owner, repo, id, editIssueCommentOption, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueEditCommentDeprecated
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index this parameter is ignored (required)
     * @param id id of the comment to edit (required)
     * @param editIssueCommentOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call issueEditCommentDeprecatedCall(String owner, String repo, Integer index, Long id, EditIssueCommentOption editIssueCommentOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editIssueCommentOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/comments/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueEditCommentDeprecatedValidateBeforeCall(String owner, String repo, Integer index, Long id, EditIssueCommentOption editIssueCommentOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueEditCommentDeprecated(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueEditCommentDeprecated(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueEditCommentDeprecated(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueEditCommentDeprecated(Async)");
        }

        return issueEditCommentDeprecatedCall(owner, repo, index, id, editIssueCommentOption, _callback);

    }

    /**
     * Edit a comment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index this parameter is ignored (required)
     * @param id id of the comment to edit (required)
     * @param editIssueCommentOption  (optional)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Comment issueEditCommentDeprecated(String owner, String repo, Integer index, Long id, EditIssueCommentOption editIssueCommentOption) throws ApiException {
        ApiResponse<Comment> localVarResp = issueEditCommentDeprecatedWithHttpInfo(owner, repo, index, id, editIssueCommentOption);
        return localVarResp.getData();
    }

    /**
     * Edit a comment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index this parameter is ignored (required)
     * @param id id of the comment to edit (required)
     * @param editIssueCommentOption  (optional)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Comment> issueEditCommentDeprecatedWithHttpInfo(String owner, String repo, Integer index, Long id, EditIssueCommentOption editIssueCommentOption) throws ApiException {
        okhttp3.Call localVarCall = issueEditCommentDeprecatedValidateBeforeCall(owner, repo, index, id, editIssueCommentOption, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a comment (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index this parameter is ignored (required)
     * @param id id of the comment to edit (required)
     * @param editIssueCommentOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call issueEditCommentDeprecatedAsync(String owner, String repo, Integer index, Long id, EditIssueCommentOption editIssueCommentOption, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueEditCommentDeprecatedValidateBeforeCall(owner, repo, index, id, editIssueCommentOption, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueEditIssue
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to edit (required)
     * @param editIssueOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueEditIssueCall(String owner, String repo, Long index, EditIssueOption editIssueOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editIssueOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueEditIssueValidateBeforeCall(String owner, String repo, Long index, EditIssueOption editIssueOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueEditIssue(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueEditIssue(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueEditIssue(Async)");
        }

        return issueEditIssueCall(owner, repo, index, editIssueOption, _callback);

    }

    /**
     * Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to edit (required)
     * @param editIssueOption  (optional)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Issue issueEditIssue(String owner, String repo, Long index, EditIssueOption editIssueOption) throws ApiException {
        ApiResponse<Issue> localVarResp = issueEditIssueWithHttpInfo(owner, repo, index, editIssueOption);
        return localVarResp.getData();
    }

    /**
     * Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to edit (required)
     * @param editIssueOption  (optional)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Issue> issueEditIssueWithHttpInfo(String owner, String repo, Long index, EditIssueOption editIssueOption) throws ApiException {
        okhttp3.Call localVarCall = issueEditIssueValidateBeforeCall(owner, repo, index, editIssueOption, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an issue. If using deadline only the date will be taken into account, and time of day ignored. (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to edit (required)
     * @param editIssueOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueEditIssueAsync(String owner, String repo, Long index, EditIssueOption editIssueOption, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueEditIssueValidateBeforeCall(owner, repo, index, editIssueOption, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueEditIssueAttachment
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param attachmentId id of the attachment to edit (required)
     * @param editAttachmentOptions  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueEditIssueAttachmentCall(String owner, String repo, Long index, Long attachmentId, EditAttachmentOptions editAttachmentOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editAttachmentOptions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueEditIssueAttachmentValidateBeforeCall(String owner, String repo, Long index, Long attachmentId, EditAttachmentOptions editAttachmentOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueEditIssueAttachment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueEditIssueAttachment(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueEditIssueAttachment(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling issueEditIssueAttachment(Async)");
        }

        return issueEditIssueAttachmentCall(owner, repo, index, attachmentId, editAttachmentOptions, _callback);

    }

    /**
     * Edit an issue attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param attachmentId id of the attachment to edit (required)
     * @param editAttachmentOptions  (optional)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Attachment issueEditIssueAttachment(String owner, String repo, Long index, Long attachmentId, EditAttachmentOptions editAttachmentOptions) throws ApiException {
        ApiResponse<Attachment> localVarResp = issueEditIssueAttachmentWithHttpInfo(owner, repo, index, attachmentId, editAttachmentOptions);
        return localVarResp.getData();
    }

    /**
     * Edit an issue attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param attachmentId id of the attachment to edit (required)
     * @param editAttachmentOptions  (optional)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Attachment> issueEditIssueAttachmentWithHttpInfo(String owner, String repo, Long index, Long attachmentId, EditAttachmentOptions editAttachmentOptions) throws ApiException {
        okhttp3.Call localVarCall = issueEditIssueAttachmentValidateBeforeCall(owner, repo, index, attachmentId, editAttachmentOptions, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an issue attachment (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param attachmentId id of the attachment to edit (required)
     * @param editAttachmentOptions  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueEditIssueAttachmentAsync(String owner, String repo, Long index, Long attachmentId, EditAttachmentOptions editAttachmentOptions, final ApiCallback<Attachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueEditIssueAttachmentValidateBeforeCall(owner, repo, index, attachmentId, editAttachmentOptions, _callback);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueEditIssueCommentAttachment
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param attachmentId id of the attachment to edit (required)
     * @param editAttachmentOptions  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueEditIssueCommentAttachmentCall(String owner, String repo, Long id, Long attachmentId, EditAttachmentOptions editAttachmentOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editAttachmentOptions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueEditIssueCommentAttachmentValidateBeforeCall(String owner, String repo, Long id, Long attachmentId, EditAttachmentOptions editAttachmentOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueEditIssueCommentAttachment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueEditIssueCommentAttachment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueEditIssueCommentAttachment(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling issueEditIssueCommentAttachment(Async)");
        }

        return issueEditIssueCommentAttachmentCall(owner, repo, id, attachmentId, editAttachmentOptions, _callback);

    }

    /**
     * Edit a comment attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param attachmentId id of the attachment to edit (required)
     * @param editAttachmentOptions  (optional)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Attachment issueEditIssueCommentAttachment(String owner, String repo, Long id, Long attachmentId, EditAttachmentOptions editAttachmentOptions) throws ApiException {
        ApiResponse<Attachment> localVarResp = issueEditIssueCommentAttachmentWithHttpInfo(owner, repo, id, attachmentId, editAttachmentOptions);
        return localVarResp.getData();
    }

    /**
     * Edit a comment attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param attachmentId id of the attachment to edit (required)
     * @param editAttachmentOptions  (optional)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Attachment> issueEditIssueCommentAttachmentWithHttpInfo(String owner, String repo, Long id, Long attachmentId, EditAttachmentOptions editAttachmentOptions) throws ApiException {
        okhttp3.Call localVarCall = issueEditIssueCommentAttachmentValidateBeforeCall(owner, repo, id, attachmentId, editAttachmentOptions, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a comment attachment (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param attachmentId id of the attachment to edit (required)
     * @param editAttachmentOptions  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueEditIssueCommentAttachmentAsync(String owner, String repo, Long id, Long attachmentId, EditAttachmentOptions editAttachmentOptions, final ApiCallback<Attachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueEditIssueCommentAttachmentValidateBeforeCall(owner, repo, id, attachmentId, editAttachmentOptions, _callback);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueEditIssueDeadline
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to create or update a deadline on (required)
     * @param editDeadlineOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> IssueDeadline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueEditIssueDeadlineCall(String owner, String repo, Long index, EditDeadlineOption editDeadlineOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editDeadlineOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/deadline"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueEditIssueDeadlineValidateBeforeCall(String owner, String repo, Long index, EditDeadlineOption editDeadlineOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueEditIssueDeadline(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueEditIssueDeadline(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueEditIssueDeadline(Async)");
        }

        return issueEditIssueDeadlineCall(owner, repo, index, editDeadlineOption, _callback);

    }

    /**
     * Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to create or update a deadline on (required)
     * @param editDeadlineOption  (optional)
     * @return IssueDeadline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> IssueDeadline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public IssueDeadline issueEditIssueDeadline(String owner, String repo, Long index, EditDeadlineOption editDeadlineOption) throws ApiException {
        ApiResponse<IssueDeadline> localVarResp = issueEditIssueDeadlineWithHttpInfo(owner, repo, index, editDeadlineOption);
        return localVarResp.getData();
    }

    /**
     * Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to create or update a deadline on (required)
     * @param editDeadlineOption  (optional)
     * @return ApiResponse&lt;IssueDeadline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> IssueDeadline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IssueDeadline> issueEditIssueDeadlineWithHttpInfo(String owner, String repo, Long index, EditDeadlineOption editDeadlineOption) throws ApiException {
        okhttp3.Call localVarCall = issueEditIssueDeadlineValidateBeforeCall(owner, repo, index, editDeadlineOption, null);
        Type localVarReturnType = new TypeToken<IssueDeadline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored. (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to create or update a deadline on (required)
     * @param editDeadlineOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> IssueDeadline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueEditIssueDeadlineAsync(String owner, String repo, Long index, EditDeadlineOption editDeadlineOption, final ApiCallback<IssueDeadline> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueEditIssueDeadlineValidateBeforeCall(owner, repo, index, editDeadlineOption, _callback);
        Type localVarReturnType = new TypeToken<IssueDeadline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueEditLabel
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the label to edit (required)
     * @param editLabelOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueEditLabelCall(String owner, String repo, Long id, EditLabelOption editLabelOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editLabelOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/labels/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueEditLabelValidateBeforeCall(String owner, String repo, Long id, EditLabelOption editLabelOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueEditLabel(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueEditLabel(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueEditLabel(Async)");
        }

        return issueEditLabelCall(owner, repo, id, editLabelOption, _callback);

    }

    /**
     * Update a label
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the label to edit (required)
     * @param editLabelOption  (optional)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Label issueEditLabel(String owner, String repo, Long id, EditLabelOption editLabelOption) throws ApiException {
        ApiResponse<Label> localVarResp = issueEditLabelWithHttpInfo(owner, repo, id, editLabelOption);
        return localVarResp.getData();
    }

    /**
     * Update a label
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the label to edit (required)
     * @param editLabelOption  (optional)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Label> issueEditLabelWithHttpInfo(String owner, String repo, Long id, EditLabelOption editLabelOption) throws ApiException {
        okhttp3.Call localVarCall = issueEditLabelValidateBeforeCall(owner, repo, id, editLabelOption, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a label (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the label to edit (required)
     * @param editLabelOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueEditLabelAsync(String owner, String repo, Long id, EditLabelOption editLabelOption, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueEditLabelValidateBeforeCall(owner, repo, id, editLabelOption, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueEditMilestone
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id the milestone to edit, identified by ID and if not available by name (required)
     * @param editMilestoneOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Milestone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueEditMilestoneCall(String owner, String repo, String id, EditMilestoneOption editMilestoneOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editMilestoneOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/milestones/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueEditMilestoneValidateBeforeCall(String owner, String repo, String id, EditMilestoneOption editMilestoneOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueEditMilestone(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueEditMilestone(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueEditMilestone(Async)");
        }

        return issueEditMilestoneCall(owner, repo, id, editMilestoneOption, _callback);

    }

    /**
     * Update a milestone
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id the milestone to edit, identified by ID and if not available by name (required)
     * @param editMilestoneOption  (optional)
     * @return Milestone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Milestone </td><td>  -  </td></tr>
     </table>
     */
    public Milestone issueEditMilestone(String owner, String repo, String id, EditMilestoneOption editMilestoneOption) throws ApiException {
        ApiResponse<Milestone> localVarResp = issueEditMilestoneWithHttpInfo(owner, repo, id, editMilestoneOption);
        return localVarResp.getData();
    }

    /**
     * Update a milestone
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id the milestone to edit, identified by ID and if not available by name (required)
     * @param editMilestoneOption  (optional)
     * @return ApiResponse&lt;Milestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Milestone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Milestone> issueEditMilestoneWithHttpInfo(String owner, String repo, String id, EditMilestoneOption editMilestoneOption) throws ApiException {
        okhttp3.Call localVarCall = issueEditMilestoneValidateBeforeCall(owner, repo, id, editMilestoneOption, null);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a milestone (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id the milestone to edit, identified by ID and if not available by name (required)
     * @param editMilestoneOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Milestone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueEditMilestoneAsync(String owner, String repo, String id, EditMilestoneOption editMilestoneOption, final ApiCallback<Milestone> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueEditMilestoneValidateBeforeCall(owner, repo, id, editMilestoneOption, _callback);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueGetComment
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetCommentCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueGetCommentValidateBeforeCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueGetComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueGetComment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueGetComment(Async)");
        }

        return issueGetCommentCall(owner, repo, id, _callback);

    }

    /**
     * Get a comment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public Comment issueGetComment(String owner, String repo, Long id) throws ApiException {
        ApiResponse<Comment> localVarResp = issueGetCommentWithHttpInfo(owner, repo, id);
        return localVarResp.getData();
    }

    /**
     * Get a comment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> issueGetCommentWithHttpInfo(String owner, String repo, Long id) throws ApiException {
        okhttp3.Call localVarCall = issueGetCommentValidateBeforeCall(owner, repo, id, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a comment (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetCommentAsync(String owner, String repo, Long id, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueGetCommentValidateBeforeCall(owner, repo, id, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueGetCommentReactions
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment to edit (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReactionList </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetCommentReactionsCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{id}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueGetCommentReactionsValidateBeforeCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueGetCommentReactions(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueGetCommentReactions(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueGetCommentReactions(Async)");
        }

        return issueGetCommentReactionsCall(owner, repo, id, _callback);

    }

    /**
     * Get a list of reactions from a comment of an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment to edit (required)
     * @return List&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReactionList </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public List<Reaction> issueGetCommentReactions(String owner, String repo, Long id) throws ApiException {
        ApiResponse<List<Reaction>> localVarResp = issueGetCommentReactionsWithHttpInfo(owner, repo, id);
        return localVarResp.getData();
    }

    /**
     * Get a list of reactions from a comment of an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment to edit (required)
     * @return ApiResponse&lt;List&lt;Reaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReactionList </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Reaction>> issueGetCommentReactionsWithHttpInfo(String owner, String repo, Long id) throws ApiException {
        okhttp3.Call localVarCall = issueGetCommentReactionsValidateBeforeCall(owner, repo, id, null);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of reactions from a comment of an issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment to edit (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReactionList </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetCommentReactionsAsync(String owner, String repo, Long id, final ApiCallback<List<Reaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueGetCommentReactionsValidateBeforeCall(owner, repo, id, _callback);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueGetComments
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param since if provided, only comments updated since the specified time are returned. (optional)
     * @param before if provided, only comments updated before the provided time are returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommentList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetCommentsCall(String owner, String repo, Long index, OffsetDateTime since, OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueGetCommentsValidateBeforeCall(String owner, String repo, Long index, OffsetDateTime since, OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueGetComments(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueGetComments(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueGetComments(Async)");
        }

        return issueGetCommentsCall(owner, repo, index, since, before, _callback);

    }

    /**
     * List all comments on an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param since if provided, only comments updated since the specified time are returned. (optional)
     * @param before if provided, only comments updated before the provided time are returned. (optional)
     * @return List&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommentList </td><td>  -  </td></tr>
     </table>
     */
    public List<Comment> issueGetComments(String owner, String repo, Long index, OffsetDateTime since, OffsetDateTime before) throws ApiException {
        ApiResponse<List<Comment>> localVarResp = issueGetCommentsWithHttpInfo(owner, repo, index, since, before);
        return localVarResp.getData();
    }

    /**
     * List all comments on an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param since if provided, only comments updated since the specified time are returned. (optional)
     * @param before if provided, only comments updated before the provided time are returned. (optional)
     * @return ApiResponse&lt;List&lt;Comment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommentList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Comment>> issueGetCommentsWithHttpInfo(String owner, String repo, Long index, OffsetDateTime since, OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = issueGetCommentsValidateBeforeCall(owner, repo, index, since, before, null);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all comments on an issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param since if provided, only comments updated since the specified time are returned. (optional)
     * @param before if provided, only comments updated before the provided time are returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommentList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetCommentsAsync(String owner, String repo, Long index, OffsetDateTime since, OffsetDateTime before, final ApiCallback<List<Comment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueGetCommentsValidateBeforeCall(owner, repo, index, since, before, _callback);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueGetCommentsAndTimeline
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param since if provided, only comments updated since the specified time are returned. (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param before if provided, only comments updated before the provided time are returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TimelineList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetCommentsAndTimelineCall(String owner, String repo, Long index, OffsetDateTime since, Integer page, Integer limit, OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/timeline"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueGetCommentsAndTimelineValidateBeforeCall(String owner, String repo, Long index, OffsetDateTime since, Integer page, Integer limit, OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueGetCommentsAndTimeline(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueGetCommentsAndTimeline(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueGetCommentsAndTimeline(Async)");
        }

        return issueGetCommentsAndTimelineCall(owner, repo, index, since, page, limit, before, _callback);

    }

    /**
     * List all comments and events on an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param since if provided, only comments updated since the specified time are returned. (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param before if provided, only comments updated before the provided time are returned. (optional)
     * @return List&lt;TimelineComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TimelineList </td><td>  -  </td></tr>
     </table>
     */
    public List<TimelineComment> issueGetCommentsAndTimeline(String owner, String repo, Long index, OffsetDateTime since, Integer page, Integer limit, OffsetDateTime before) throws ApiException {
        ApiResponse<List<TimelineComment>> localVarResp = issueGetCommentsAndTimelineWithHttpInfo(owner, repo, index, since, page, limit, before);
        return localVarResp.getData();
    }

    /**
     * List all comments and events on an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param since if provided, only comments updated since the specified time are returned. (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param before if provided, only comments updated before the provided time are returned. (optional)
     * @return ApiResponse&lt;List&lt;TimelineComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TimelineList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TimelineComment>> issueGetCommentsAndTimelineWithHttpInfo(String owner, String repo, Long index, OffsetDateTime since, Integer page, Integer limit, OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = issueGetCommentsAndTimelineValidateBeforeCall(owner, repo, index, since, page, limit, before, null);
        Type localVarReturnType = new TypeToken<List<TimelineComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all comments and events on an issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param since if provided, only comments updated since the specified time are returned. (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param before if provided, only comments updated before the provided time are returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TimelineList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetCommentsAndTimelineAsync(String owner, String repo, Long index, OffsetDateTime since, Integer page, Integer limit, OffsetDateTime before, final ApiCallback<List<TimelineComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueGetCommentsAndTimelineValidateBeforeCall(owner, repo, index, since, page, limit, before, _callback);
        Type localVarReturnType = new TypeToken<List<TimelineComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueGetIssue
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetIssueCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueGetIssueValidateBeforeCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueGetIssue(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueGetIssue(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueGetIssue(Async)");
        }

        return issueGetIssueCall(owner, repo, index, _callback);

    }

    /**
     * Get an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to get (required)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public Issue issueGetIssue(String owner, String repo, Long index) throws ApiException {
        ApiResponse<Issue> localVarResp = issueGetIssueWithHttpInfo(owner, repo, index);
        return localVarResp.getData();
    }

    /**
     * Get an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to get (required)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Issue> issueGetIssueWithHttpInfo(String owner, String repo, Long index) throws ApiException {
        okhttp3.Call localVarCall = issueGetIssueValidateBeforeCall(owner, repo, index, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Issue </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetIssueAsync(String owner, String repo, Long index, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueGetIssueValidateBeforeCall(owner, repo, index, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueGetIssueAttachment
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param attachmentId id of the attachment to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetIssueAttachmentCall(String owner, String repo, Long index, Long attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueGetIssueAttachmentValidateBeforeCall(String owner, String repo, Long index, Long attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueGetIssueAttachment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueGetIssueAttachment(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueGetIssueAttachment(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling issueGetIssueAttachment(Async)");
        }

        return issueGetIssueAttachmentCall(owner, repo, index, attachmentId, _callback);

    }

    /**
     * Get an issue attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param attachmentId id of the attachment to get (required)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Attachment issueGetIssueAttachment(String owner, String repo, Long index, Long attachmentId) throws ApiException {
        ApiResponse<Attachment> localVarResp = issueGetIssueAttachmentWithHttpInfo(owner, repo, index, attachmentId);
        return localVarResp.getData();
    }

    /**
     * Get an issue attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param attachmentId id of the attachment to get (required)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Attachment> issueGetIssueAttachmentWithHttpInfo(String owner, String repo, Long index, Long attachmentId) throws ApiException {
        okhttp3.Call localVarCall = issueGetIssueAttachmentValidateBeforeCall(owner, repo, index, attachmentId, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an issue attachment (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param attachmentId id of the attachment to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetIssueAttachmentAsync(String owner, String repo, Long index, Long attachmentId, final ApiCallback<Attachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueGetIssueAttachmentValidateBeforeCall(owner, repo, index, attachmentId, _callback);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueGetIssueCommentAttachment
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param attachmentId id of the attachment to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetIssueCommentAttachmentCall(String owner, String repo, Long id, Long attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueGetIssueCommentAttachmentValidateBeforeCall(String owner, String repo, Long id, Long attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueGetIssueCommentAttachment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueGetIssueCommentAttachment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueGetIssueCommentAttachment(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling issueGetIssueCommentAttachment(Async)");
        }

        return issueGetIssueCommentAttachmentCall(owner, repo, id, attachmentId, _callback);

    }

    /**
     * Get a comment attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param attachmentId id of the attachment to get (required)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Attachment issueGetIssueCommentAttachment(String owner, String repo, Long id, Long attachmentId) throws ApiException {
        ApiResponse<Attachment> localVarResp = issueGetIssueCommentAttachmentWithHttpInfo(owner, repo, id, attachmentId);
        return localVarResp.getData();
    }

    /**
     * Get a comment attachment
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param attachmentId id of the attachment to get (required)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Attachment> issueGetIssueCommentAttachmentWithHttpInfo(String owner, String repo, Long id, Long attachmentId) throws ApiException {
        okhttp3.Call localVarCall = issueGetIssueCommentAttachmentValidateBeforeCall(owner, repo, id, attachmentId, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a comment attachment (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param attachmentId id of the attachment to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetIssueCommentAttachmentAsync(String owner, String repo, Long id, Long attachmentId, final ApiCallback<Attachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueGetIssueCommentAttachmentValidateBeforeCall(owner, repo, id, attachmentId, _callback);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueGetIssueReactions
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReactionList </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetIssueReactionsCall(String owner, String repo, Long index, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueGetIssueReactionsValidateBeforeCall(String owner, String repo, Long index, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueGetIssueReactions(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueGetIssueReactions(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueGetIssueReactions(Async)");
        }

        return issueGetIssueReactionsCall(owner, repo, index, page, limit, _callback);

    }

    /**
     * Get a list reactions of an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReactionList </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public List<Reaction> issueGetIssueReactions(String owner, String repo, Long index, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Reaction>> localVarResp = issueGetIssueReactionsWithHttpInfo(owner, repo, index, page, limit);
        return localVarResp.getData();
    }

    /**
     * Get a list reactions of an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Reaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReactionList </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Reaction>> issueGetIssueReactionsWithHttpInfo(String owner, String repo, Long index, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = issueGetIssueReactionsValidateBeforeCall(owner, repo, index, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list reactions of an issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ReactionList </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetIssueReactionsAsync(String owner, String repo, Long index, Integer page, Integer limit, final ApiCallback<List<Reaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueGetIssueReactionsValidateBeforeCall(owner, repo, index, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueGetLabel
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the label to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetLabelCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/labels/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueGetLabelValidateBeforeCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueGetLabel(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueGetLabel(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueGetLabel(Async)");
        }

        return issueGetLabelCall(owner, repo, id, _callback);

    }

    /**
     * Get a single label
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the label to get (required)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label </td><td>  -  </td></tr>
     </table>
     */
    public Label issueGetLabel(String owner, String repo, Long id) throws ApiException {
        ApiResponse<Label> localVarResp = issueGetLabelWithHttpInfo(owner, repo, id);
        return localVarResp.getData();
    }

    /**
     * Get a single label
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the label to get (required)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Label> issueGetLabelWithHttpInfo(String owner, String repo, Long id) throws ApiException {
        okhttp3.Call localVarCall = issueGetLabelValidateBeforeCall(owner, repo, id, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single label (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the label to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetLabelAsync(String owner, String repo, Long id, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueGetLabelValidateBeforeCall(owner, repo, id, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueGetLabels
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetLabelsCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/labels"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueGetLabelsValidateBeforeCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueGetLabels(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueGetLabels(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueGetLabels(Async)");
        }

        return issueGetLabelsCall(owner, repo, index, _callback);

    }

    /**
     * Get an issue&#39;s labels
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @return List&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public List<Label> issueGetLabels(String owner, String repo, Long index) throws ApiException {
        ApiResponse<List<Label>> localVarResp = issueGetLabelsWithHttpInfo(owner, repo, index);
        return localVarResp.getData();
    }

    /**
     * Get an issue&#39;s labels
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @return ApiResponse&lt;List&lt;Label&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Label>> issueGetLabelsWithHttpInfo(String owner, String repo, Long index) throws ApiException {
        okhttp3.Call localVarCall = issueGetLabelsValidateBeforeCall(owner, repo, index, null);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an issue&#39;s labels (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetLabelsAsync(String owner, String repo, Long index, final ApiCallback<List<Label>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueGetLabelsValidateBeforeCall(owner, repo, index, _callback);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueGetMilestone
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id the milestone to get, identified by ID and if not available by name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Milestone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetMilestoneCall(String owner, String repo, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/milestones/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueGetMilestoneValidateBeforeCall(String owner, String repo, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueGetMilestone(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueGetMilestone(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueGetMilestone(Async)");
        }

        return issueGetMilestoneCall(owner, repo, id, _callback);

    }

    /**
     * Get a milestone
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id the milestone to get, identified by ID and if not available by name (required)
     * @return Milestone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Milestone </td><td>  -  </td></tr>
     </table>
     */
    public Milestone issueGetMilestone(String owner, String repo, String id) throws ApiException {
        ApiResponse<Milestone> localVarResp = issueGetMilestoneWithHttpInfo(owner, repo, id);
        return localVarResp.getData();
    }

    /**
     * Get a milestone
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id the milestone to get, identified by ID and if not available by name (required)
     * @return ApiResponse&lt;Milestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Milestone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Milestone> issueGetMilestoneWithHttpInfo(String owner, String repo, String id) throws ApiException {
        okhttp3.Call localVarCall = issueGetMilestoneValidateBeforeCall(owner, repo, id, null);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a milestone (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id the milestone to get, identified by ID and if not available by name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Milestone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetMilestoneAsync(String owner, String repo, String id, final ApiCallback<Milestone> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueGetMilestoneValidateBeforeCall(owner, repo, id, _callback);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueGetMilestonesList
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param state Milestone state, Recognized values are open, closed and all. Defaults to \&quot;open\&quot; (optional)
     * @param name filter by milestone name (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MilestoneList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetMilestonesListCall(String owner, String repo, String state, String name, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/milestones"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueGetMilestonesListValidateBeforeCall(String owner, String repo, String state, String name, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueGetMilestonesList(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueGetMilestonesList(Async)");
        }

        return issueGetMilestonesListCall(owner, repo, state, name, page, limit, _callback);

    }

    /**
     * Get all of a repository&#39;s opened milestones
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param state Milestone state, Recognized values are open, closed and all. Defaults to \&quot;open\&quot; (optional)
     * @param name filter by milestone name (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Milestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MilestoneList </td><td>  -  </td></tr>
     </table>
     */
    public List<Milestone> issueGetMilestonesList(String owner, String repo, String state, String name, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Milestone>> localVarResp = issueGetMilestonesListWithHttpInfo(owner, repo, state, name, page, limit);
        return localVarResp.getData();
    }

    /**
     * Get all of a repository&#39;s opened milestones
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param state Milestone state, Recognized values are open, closed and all. Defaults to \&quot;open\&quot; (optional)
     * @param name filter by milestone name (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Milestone&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MilestoneList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Milestone>> issueGetMilestonesListWithHttpInfo(String owner, String repo, String state, String name, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = issueGetMilestonesListValidateBeforeCall(owner, repo, state, name, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Milestone>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all of a repository&#39;s opened milestones (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param state Milestone state, Recognized values are open, closed and all. Defaults to \&quot;open\&quot; (optional)
     * @param name filter by milestone name (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MilestoneList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetMilestonesListAsync(String owner, String repo, String state, String name, Integer page, Integer limit, final ApiCallback<List<Milestone>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueGetMilestonesListValidateBeforeCall(owner, repo, state, name, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Milestone>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueGetRepoComments
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param since if provided, only comments updated since the provided time are returned. (optional)
     * @param before if provided, only comments updated before the provided time are returned. (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommentList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetRepoCommentsCall(String owner, String repo, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueGetRepoCommentsValidateBeforeCall(String owner, String repo, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueGetRepoComments(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueGetRepoComments(Async)");
        }

        return issueGetRepoCommentsCall(owner, repo, since, before, page, limit, _callback);

    }

    /**
     * List all comments in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param since if provided, only comments updated since the provided time are returned. (optional)
     * @param before if provided, only comments updated before the provided time are returned. (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommentList </td><td>  -  </td></tr>
     </table>
     */
    public List<Comment> issueGetRepoComments(String owner, String repo, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Comment>> localVarResp = issueGetRepoCommentsWithHttpInfo(owner, repo, since, before, page, limit);
        return localVarResp.getData();
    }

    /**
     * List all comments in a repository
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param since if provided, only comments updated since the provided time are returned. (optional)
     * @param before if provided, only comments updated before the provided time are returned. (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Comment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommentList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Comment>> issueGetRepoCommentsWithHttpInfo(String owner, String repo, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = issueGetRepoCommentsValidateBeforeCall(owner, repo, since, before, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all comments in a repository (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param since if provided, only comments updated since the provided time are returned. (optional)
     * @param before if provided, only comments updated before the provided time are returned. (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CommentList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueGetRepoCommentsAsync(String owner, String repo, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit, final ApiCallback<List<Comment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueGetRepoCommentsValidateBeforeCall(owner, repo, since, before, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueListBlocks
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueListBlocksCall(String owner, String repo, String index, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/blocks"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueListBlocksValidateBeforeCall(String owner, String repo, String index, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueListBlocks(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueListBlocks(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueListBlocks(Async)");
        }

        return issueListBlocksCall(owner, repo, index, page, limit, _callback);

    }

    /**
     * List issues that are blocked by this issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueList </td><td>  -  </td></tr>
     </table>
     */
    public List<Issue> issueListBlocks(String owner, String repo, String index, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Issue>> localVarResp = issueListBlocksWithHttpInfo(owner, repo, index, page, limit);
        return localVarResp.getData();
    }

    /**
     * List issues that are blocked by this issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Issue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Issue>> issueListBlocksWithHttpInfo(String owner, String repo, String index, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = issueListBlocksValidateBeforeCall(owner, repo, index, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Issue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List issues that are blocked by this issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueListBlocksAsync(String owner, String repo, String index, Integer page, Integer limit, final ApiCallback<List<Issue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueListBlocksValidateBeforeCall(owner, repo, index, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Issue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueListIssueAttachments
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AttachmentList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueListIssueAttachmentsCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/assets"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueListIssueAttachmentsValidateBeforeCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueListIssueAttachments(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueListIssueAttachments(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueListIssueAttachments(Async)");
        }

        return issueListIssueAttachmentsCall(owner, repo, index, _callback);

    }

    /**
     * List issue&#39;s attachments
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @return List&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AttachmentList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public List<Attachment> issueListIssueAttachments(String owner, String repo, Long index) throws ApiException {
        ApiResponse<List<Attachment>> localVarResp = issueListIssueAttachmentsWithHttpInfo(owner, repo, index);
        return localVarResp.getData();
    }

    /**
     * List issue&#39;s attachments
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @return ApiResponse&lt;List&lt;Attachment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AttachmentList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Attachment>> issueListIssueAttachmentsWithHttpInfo(String owner, String repo, Long index) throws ApiException {
        okhttp3.Call localVarCall = issueListIssueAttachmentsValidateBeforeCall(owner, repo, index, null);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List issue&#39;s attachments (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AttachmentList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueListIssueAttachmentsAsync(String owner, String repo, Long index, final ApiCallback<List<Attachment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueListIssueAttachmentsValidateBeforeCall(owner, repo, index, _callback);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueListIssueCommentAttachments
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AttachmentList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueListIssueCommentAttachmentsCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{id}/assets"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueListIssueCommentAttachmentsValidateBeforeCall(String owner, String repo, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueListIssueCommentAttachments(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueListIssueCommentAttachments(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueListIssueCommentAttachments(Async)");
        }

        return issueListIssueCommentAttachmentsCall(owner, repo, id, _callback);

    }

    /**
     * List comment&#39;s attachments
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @return List&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AttachmentList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public List<Attachment> issueListIssueCommentAttachments(String owner, String repo, Long id) throws ApiException {
        ApiResponse<List<Attachment>> localVarResp = issueListIssueCommentAttachmentsWithHttpInfo(owner, repo, id);
        return localVarResp.getData();
    }

    /**
     * List comment&#39;s attachments
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @return ApiResponse&lt;List&lt;Attachment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AttachmentList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Attachment>> issueListIssueCommentAttachmentsWithHttpInfo(String owner, String repo, Long id) throws ApiException {
        okhttp3.Call localVarCall = issueListIssueCommentAttachmentsValidateBeforeCall(owner, repo, id, null);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List comment&#39;s attachments (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AttachmentList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueListIssueCommentAttachmentsAsync(String owner, String repo, Long id, final ApiCallback<List<Attachment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueListIssueCommentAttachmentsValidateBeforeCall(owner, repo, id, _callback);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueListIssueDependencies
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueListIssueDependenciesCall(String owner, String repo, String index, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/dependencies"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueListIssueDependenciesValidateBeforeCall(String owner, String repo, String index, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueListIssueDependencies(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueListIssueDependencies(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueListIssueDependencies(Async)");
        }

        return issueListIssueDependenciesCall(owner, repo, index, page, limit, _callback);

    }

    /**
     * List an issue&#39;s dependencies, i.e all issues that block this issue.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueList </td><td>  -  </td></tr>
     </table>
     */
    public List<Issue> issueListIssueDependencies(String owner, String repo, String index, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Issue>> localVarResp = issueListIssueDependenciesWithHttpInfo(owner, repo, index, page, limit);
        return localVarResp.getData();
    }

    /**
     * List an issue&#39;s dependencies, i.e all issues that block this issue.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Issue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Issue>> issueListIssueDependenciesWithHttpInfo(String owner, String repo, String index, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = issueListIssueDependenciesValidateBeforeCall(owner, repo, index, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Issue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List an issue&#39;s dependencies, i.e all issues that block this issue. (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueListIssueDependenciesAsync(String owner, String repo, String index, Integer page, Integer limit, final ApiCallback<List<Issue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueListIssueDependenciesValidateBeforeCall(owner, repo, index, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Issue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueListIssues
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param state whether issue is open or closed (optional)
     * @param labels comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded (optional)
     * @param q search string (optional)
     * @param type filter by type (issues / pulls) if set (optional)
     * @param milestones comma separated list of milestone names or ids. It uses names and fall back to ids. Fetch only issues that have any of this milestones. Non existent milestones are discarded (optional)
     * @param since Only show items updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show items updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param createdBy Only show items which were created by the the given user (optional)
     * @param assignedBy Only show items for which the given user is assigned (optional)
     * @param mentionedBy Only show items in which the given user was mentioned (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueListIssuesCall(String owner, String repo, String state, String labels, String q, String type, String milestones, OffsetDateTime since, OffsetDateTime before, String createdBy, String assignedBy, String mentionedBy, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (labels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labels", labels));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (milestones != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("milestones", milestones));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (createdBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_by", createdBy));
        }

        if (assignedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_by", assignedBy));
        }

        if (mentionedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mentioned_by", mentionedBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueListIssuesValidateBeforeCall(String owner, String repo, String state, String labels, String q, String type, String milestones, OffsetDateTime since, OffsetDateTime before, String createdBy, String assignedBy, String mentionedBy, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueListIssues(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueListIssues(Async)");
        }

        return issueListIssuesCall(owner, repo, state, labels, q, type, milestones, since, before, createdBy, assignedBy, mentionedBy, page, limit, _callback);

    }

    /**
     * List a repository&#39;s issues
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param state whether issue is open or closed (optional)
     * @param labels comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded (optional)
     * @param q search string (optional)
     * @param type filter by type (issues / pulls) if set (optional)
     * @param milestones comma separated list of milestone names or ids. It uses names and fall back to ids. Fetch only issues that have any of this milestones. Non existent milestones are discarded (optional)
     * @param since Only show items updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show items updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param createdBy Only show items which were created by the the given user (optional)
     * @param assignedBy Only show items for which the given user is assigned (optional)
     * @param mentionedBy Only show items in which the given user was mentioned (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueList </td><td>  -  </td></tr>
     </table>
     */
    public List<Issue> issueListIssues(String owner, String repo, String state, String labels, String q, String type, String milestones, OffsetDateTime since, OffsetDateTime before, String createdBy, String assignedBy, String mentionedBy, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Issue>> localVarResp = issueListIssuesWithHttpInfo(owner, repo, state, labels, q, type, milestones, since, before, createdBy, assignedBy, mentionedBy, page, limit);
        return localVarResp.getData();
    }

    /**
     * List a repository&#39;s issues
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param state whether issue is open or closed (optional)
     * @param labels comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded (optional)
     * @param q search string (optional)
     * @param type filter by type (issues / pulls) if set (optional)
     * @param milestones comma separated list of milestone names or ids. It uses names and fall back to ids. Fetch only issues that have any of this milestones. Non existent milestones are discarded (optional)
     * @param since Only show items updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show items updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param createdBy Only show items which were created by the the given user (optional)
     * @param assignedBy Only show items for which the given user is assigned (optional)
     * @param mentionedBy Only show items in which the given user was mentioned (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Issue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Issue>> issueListIssuesWithHttpInfo(String owner, String repo, String state, String labels, String q, String type, String milestones, OffsetDateTime since, OffsetDateTime before, String createdBy, String assignedBy, String mentionedBy, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = issueListIssuesValidateBeforeCall(owner, repo, state, labels, q, type, milestones, since, before, createdBy, assignedBy, mentionedBy, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Issue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a repository&#39;s issues (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param state whether issue is open or closed (optional)
     * @param labels comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded (optional)
     * @param q search string (optional)
     * @param type filter by type (issues / pulls) if set (optional)
     * @param milestones comma separated list of milestone names or ids. It uses names and fall back to ids. Fetch only issues that have any of this milestones. Non existent milestones are discarded (optional)
     * @param since Only show items updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show items updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param createdBy Only show items which were created by the the given user (optional)
     * @param assignedBy Only show items for which the given user is assigned (optional)
     * @param mentionedBy Only show items in which the given user was mentioned (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueListIssuesAsync(String owner, String repo, String state, String labels, String q, String type, String milestones, OffsetDateTime since, OffsetDateTime before, String createdBy, String assignedBy, String mentionedBy, Integer page, Integer limit, final ApiCallback<List<Issue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueListIssuesValidateBeforeCall(owner, repo, state, labels, q, type, milestones, since, before, createdBy, assignedBy, mentionedBy, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Issue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueListLabels
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueListLabelsCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/labels"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueListLabelsValidateBeforeCall(String owner, String repo, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueListLabels(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueListLabels(Async)");
        }

        return issueListLabelsCall(owner, repo, page, limit, _callback);

    }

    /**
     * Get all of a repository&#39;s labels
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
     </table>
     */
    public List<Label> issueListLabels(String owner, String repo, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Label>> localVarResp = issueListLabelsWithHttpInfo(owner, repo, page, limit);
        return localVarResp.getData();
    }

    /**
     * Get all of a repository&#39;s labels
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Label&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Label>> issueListLabelsWithHttpInfo(String owner, String repo, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = issueListLabelsValidateBeforeCall(owner, repo, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all of a repository&#39;s labels (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueListLabelsAsync(String owner, String repo, Integer page, Integer limit, final ApiCallback<List<Label>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueListLabelsValidateBeforeCall(owner, repo, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuePostCommentReaction
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment to edit (required)
     * @param editReactionOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issuePostCommentReactionCall(String owner, String repo, Long id, EditReactionOption editReactionOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editReactionOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{id}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuePostCommentReactionValidateBeforeCall(String owner, String repo, Long id, EditReactionOption editReactionOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuePostCommentReaction(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuePostCommentReaction(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issuePostCommentReaction(Async)");
        }

        return issuePostCommentReactionCall(owner, repo, id, editReactionOption, _callback);

    }

    /**
     * Add a reaction to a comment of an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment to edit (required)
     * @param editReactionOption  (optional)
     * @return Reaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Reaction issuePostCommentReaction(String owner, String repo, Long id, EditReactionOption editReactionOption) throws ApiException {
        ApiResponse<Reaction> localVarResp = issuePostCommentReactionWithHttpInfo(owner, repo, id, editReactionOption);
        return localVarResp.getData();
    }

    /**
     * Add a reaction to a comment of an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment to edit (required)
     * @param editReactionOption  (optional)
     * @return ApiResponse&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Reaction> issuePostCommentReactionWithHttpInfo(String owner, String repo, Long id, EditReactionOption editReactionOption) throws ApiException {
        okhttp3.Call localVarCall = issuePostCommentReactionValidateBeforeCall(owner, repo, id, editReactionOption, null);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a reaction to a comment of an issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param id id of the comment to edit (required)
     * @param editReactionOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issuePostCommentReactionAsync(String owner, String repo, Long id, EditReactionOption editReactionOption, final ApiCallback<Reaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuePostCommentReactionValidateBeforeCall(owner, repo, id, editReactionOption, _callback);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuePostIssueReaction
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param editReactionOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issuePostIssueReactionCall(String owner, String repo, Long index, EditReactionOption editReactionOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editReactionOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuePostIssueReactionValidateBeforeCall(String owner, String repo, Long index, EditReactionOption editReactionOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuePostIssueReaction(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuePostIssueReaction(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issuePostIssueReaction(Async)");
        }

        return issuePostIssueReactionCall(owner, repo, index, editReactionOption, _callback);

    }

    /**
     * Add a reaction to an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param editReactionOption  (optional)
     * @return Reaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Reaction issuePostIssueReaction(String owner, String repo, Long index, EditReactionOption editReactionOption) throws ApiException {
        ApiResponse<Reaction> localVarResp = issuePostIssueReactionWithHttpInfo(owner, repo, index, editReactionOption);
        return localVarResp.getData();
    }

    /**
     * Add a reaction to an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param editReactionOption  (optional)
     * @return ApiResponse&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Reaction> issuePostIssueReactionWithHttpInfo(String owner, String repo, Long index, EditReactionOption editReactionOption) throws ApiException {
        okhttp3.Call localVarCall = issuePostIssueReactionValidateBeforeCall(owner, repo, index, editReactionOption, null);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a reaction to an issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param editReactionOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issuePostIssueReactionAsync(String owner, String repo, Long index, EditReactionOption editReactionOption, final ApiCallback<Reaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuePostIssueReactionValidateBeforeCall(owner, repo, index, editReactionOption, _callback);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueRemoveIssueBlocking
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueMeta  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueRemoveIssueBlockingCall(String owner, String repo, String index, IssueMeta issueMeta, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueMeta;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/blocks"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueRemoveIssueBlockingValidateBeforeCall(String owner, String repo, String index, IssueMeta issueMeta, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueRemoveIssueBlocking(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueRemoveIssueBlocking(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueRemoveIssueBlocking(Async)");
        }

        return issueRemoveIssueBlockingCall(owner, repo, index, issueMeta, _callback);

    }

    /**
     * Unblock the issue given in the body by the issue in path
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueMeta  (optional)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Issue </td><td>  -  </td></tr>
     </table>
     */
    public Issue issueRemoveIssueBlocking(String owner, String repo, String index, IssueMeta issueMeta) throws ApiException {
        ApiResponse<Issue> localVarResp = issueRemoveIssueBlockingWithHttpInfo(owner, repo, index, issueMeta);
        return localVarResp.getData();
    }

    /**
     * Unblock the issue given in the body by the issue in path
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueMeta  (optional)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Issue> issueRemoveIssueBlockingWithHttpInfo(String owner, String repo, String index, IssueMeta issueMeta) throws ApiException {
        okhttp3.Call localVarCall = issueRemoveIssueBlockingValidateBeforeCall(owner, repo, index, issueMeta, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unblock the issue given in the body by the issue in path (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueMeta  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueRemoveIssueBlockingAsync(String owner, String repo, String index, IssueMeta issueMeta, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueRemoveIssueBlockingValidateBeforeCall(owner, repo, index, issueMeta, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueRemoveIssueDependencies
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueMeta  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueRemoveIssueDependenciesCall(String owner, String repo, String index, IssueMeta issueMeta, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueMeta;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/dependencies"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueRemoveIssueDependenciesValidateBeforeCall(String owner, String repo, String index, IssueMeta issueMeta, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueRemoveIssueDependencies(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueRemoveIssueDependencies(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueRemoveIssueDependencies(Async)");
        }

        return issueRemoveIssueDependenciesCall(owner, repo, index, issueMeta, _callback);

    }

    /**
     * Remove an issue dependency
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueMeta  (optional)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Issue </td><td>  -  </td></tr>
     </table>
     */
    public Issue issueRemoveIssueDependencies(String owner, String repo, String index, IssueMeta issueMeta) throws ApiException {
        ApiResponse<Issue> localVarResp = issueRemoveIssueDependenciesWithHttpInfo(owner, repo, index, issueMeta);
        return localVarResp.getData();
    }

    /**
     * Remove an issue dependency
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueMeta  (optional)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Issue> issueRemoveIssueDependenciesWithHttpInfo(String owner, String repo, String index, IssueMeta issueMeta) throws ApiException {
        okhttp3.Call localVarCall = issueRemoveIssueDependenciesValidateBeforeCall(owner, repo, index, issueMeta, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove an issue dependency (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueMeta  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueRemoveIssueDependenciesAsync(String owner, String repo, String index, IssueMeta issueMeta, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueRemoveIssueDependenciesValidateBeforeCall(owner, repo, index, issueMeta, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueRemoveLabel
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param id id of the label to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueRemoveLabelCall(String owner, String repo, Long index, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/labels/{id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueRemoveLabelValidateBeforeCall(String owner, String repo, Long index, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueRemoveLabel(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueRemoveLabel(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueRemoveLabel(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueRemoveLabel(Async)");
        }

        return issueRemoveLabelCall(owner, repo, index, id, _callback);

    }

    /**
     * Remove a label from an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param id id of the label to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void issueRemoveLabel(String owner, String repo, Long index, Long id) throws ApiException {
        issueRemoveLabelWithHttpInfo(owner, repo, index, id);
    }

    /**
     * Remove a label from an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param id id of the label to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> issueRemoveLabelWithHttpInfo(String owner, String repo, Long index, Long id) throws ApiException {
        okhttp3.Call localVarCall = issueRemoveLabelValidateBeforeCall(owner, repo, index, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a label from an issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param id id of the label to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueRemoveLabelAsync(String owner, String repo, Long index, Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueRemoveLabelValidateBeforeCall(owner, repo, index, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueReplaceLabels
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueLabelsOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueReplaceLabelsCall(String owner, String repo, Long index, IssueLabelsOption issueLabelsOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueLabelsOption;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/labels"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueReplaceLabelsValidateBeforeCall(String owner, String repo, Long index, IssueLabelsOption issueLabelsOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueReplaceLabels(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueReplaceLabels(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueReplaceLabels(Async)");
        }

        return issueReplaceLabelsCall(owner, repo, index, issueLabelsOption, _callback);

    }

    /**
     * Replace an issue&#39;s labels
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueLabelsOption  (optional)
     * @return List&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public List<Label> issueReplaceLabels(String owner, String repo, Long index, IssueLabelsOption issueLabelsOption) throws ApiException {
        ApiResponse<List<Label>> localVarResp = issueReplaceLabelsWithHttpInfo(owner, repo, index, issueLabelsOption);
        return localVarResp.getData();
    }

    /**
     * Replace an issue&#39;s labels
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueLabelsOption  (optional)
     * @return ApiResponse&lt;List&lt;Label&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Label>> issueReplaceLabelsWithHttpInfo(String owner, String repo, Long index, IssueLabelsOption issueLabelsOption) throws ApiException {
        okhttp3.Call localVarCall = issueReplaceLabelsValidateBeforeCall(owner, repo, index, issueLabelsOption, null);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace an issue&#39;s labels (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param issueLabelsOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LabelList </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueReplaceLabelsAsync(String owner, String repo, Long index, IssueLabelsOption issueLabelsOption, final ApiCallback<List<Label>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueReplaceLabelsValidateBeforeCall(owner, repo, index, issueLabelsOption, _callback);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueResetTime
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to add tracked time to (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueResetTimeCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/times"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueResetTimeValidateBeforeCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueResetTime(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueResetTime(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueResetTime(Async)");
        }

        return issueResetTimeCall(owner, repo, index, _callback);

    }

    /**
     * Reset a tracked time of an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to add tracked time to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void issueResetTime(String owner, String repo, Long index) throws ApiException {
        issueResetTimeWithHttpInfo(owner, repo, index);
    }

    /**
     * Reset a tracked time of an issue
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to add tracked time to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> issueResetTimeWithHttpInfo(String owner, String repo, Long index) throws ApiException {
        okhttp3.Call localVarCall = issueResetTimeValidateBeforeCall(owner, repo, index, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset a tracked time of an issue (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to add tracked time to (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call issueResetTimeAsync(String owner, String repo, Long index, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueResetTimeValidateBeforeCall(owner, repo, index, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueSearchIssues
     * @param state whether issue is open or closed (optional)
     * @param labels comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded (optional)
     * @param milestones comma separated list of milestone names. Fetch only issues that have any of this milestones. Non existent are discarded (optional)
     * @param q search string (optional)
     * @param priorityRepoId repository to prioritize in the results (optional)
     * @param type filter by type (issues / pulls) if set (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param assigned filter (issues / pulls) assigned to you, default is false (optional)
     * @param created filter (issues / pulls) created by you, default is false (optional)
     * @param mentioned filter (issues / pulls) mentioning you, default is false (optional)
     * @param reviewRequested filter pulls requesting your review, default is false (optional)
     * @param reviewed filter pulls reviewed by you, default is false (optional)
     * @param owner filter by owner (optional)
     * @param team filter by team (requires organization owner parameter to be provided) (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueSearchIssuesCall(String state, String labels, String milestones, String q, Long priorityRepoId, String type, OffsetDateTime since, OffsetDateTime before, Boolean assigned, Boolean created, Boolean mentioned, Boolean reviewRequested, Boolean reviewed, String owner, String team, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/issues/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (labels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labels", labels));
        }

        if (milestones != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("milestones", milestones));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (priorityRepoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority_repo_id", priorityRepoId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (assigned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned", assigned));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (mentioned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mentioned", mentioned));
        }

        if (reviewRequested != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("review_requested", reviewRequested));
        }

        if (reviewed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reviewed", reviewed));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueSearchIssuesValidateBeforeCall(String state, String labels, String milestones, String q, Long priorityRepoId, String type, OffsetDateTime since, OffsetDateTime before, Boolean assigned, Boolean created, Boolean mentioned, Boolean reviewRequested, Boolean reviewed, String owner, String team, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return issueSearchIssuesCall(state, labels, milestones, q, priorityRepoId, type, since, before, assigned, created, mentioned, reviewRequested, reviewed, owner, team, page, limit, _callback);

    }

    /**
     * Search for issues across the repositories that the user has access to
     * 
     * @param state whether issue is open or closed (optional)
     * @param labels comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded (optional)
     * @param milestones comma separated list of milestone names. Fetch only issues that have any of this milestones. Non existent are discarded (optional)
     * @param q search string (optional)
     * @param priorityRepoId repository to prioritize in the results (optional)
     * @param type filter by type (issues / pulls) if set (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param assigned filter (issues / pulls) assigned to you, default is false (optional)
     * @param created filter (issues / pulls) created by you, default is false (optional)
     * @param mentioned filter (issues / pulls) mentioning you, default is false (optional)
     * @param reviewRequested filter pulls requesting your review, default is false (optional)
     * @param reviewed filter pulls reviewed by you, default is false (optional)
     * @param owner filter by owner (optional)
     * @param team filter by team (requires organization owner parameter to be provided) (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueList </td><td>  -  </td></tr>
     </table>
     */
    public List<Issue> issueSearchIssues(String state, String labels, String milestones, String q, Long priorityRepoId, String type, OffsetDateTime since, OffsetDateTime before, Boolean assigned, Boolean created, Boolean mentioned, Boolean reviewRequested, Boolean reviewed, String owner, String team, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Issue>> localVarResp = issueSearchIssuesWithHttpInfo(state, labels, milestones, q, priorityRepoId, type, since, before, assigned, created, mentioned, reviewRequested, reviewed, owner, team, page, limit);
        return localVarResp.getData();
    }

    /**
     * Search for issues across the repositories that the user has access to
     * 
     * @param state whether issue is open or closed (optional)
     * @param labels comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded (optional)
     * @param milestones comma separated list of milestone names. Fetch only issues that have any of this milestones. Non existent are discarded (optional)
     * @param q search string (optional)
     * @param priorityRepoId repository to prioritize in the results (optional)
     * @param type filter by type (issues / pulls) if set (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param assigned filter (issues / pulls) assigned to you, default is false (optional)
     * @param created filter (issues / pulls) created by you, default is false (optional)
     * @param mentioned filter (issues / pulls) mentioning you, default is false (optional)
     * @param reviewRequested filter pulls requesting your review, default is false (optional)
     * @param reviewed filter pulls reviewed by you, default is false (optional)
     * @param owner filter by owner (optional)
     * @param team filter by team (requires organization owner parameter to be provided) (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Issue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Issue>> issueSearchIssuesWithHttpInfo(String state, String labels, String milestones, String q, Long priorityRepoId, String type, OffsetDateTime since, OffsetDateTime before, Boolean assigned, Boolean created, Boolean mentioned, Boolean reviewRequested, Boolean reviewed, String owner, String team, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = issueSearchIssuesValidateBeforeCall(state, labels, milestones, q, priorityRepoId, type, since, before, assigned, created, mentioned, reviewRequested, reviewed, owner, team, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Issue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for issues across the repositories that the user has access to (asynchronously)
     * 
     * @param state whether issue is open or closed (optional)
     * @param labels comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded (optional)
     * @param milestones comma separated list of milestone names. Fetch only issues that have any of this milestones. Non existent are discarded (optional)
     * @param q search string (optional)
     * @param priorityRepoId repository to prioritize in the results (optional)
     * @param type filter by type (issues / pulls) if set (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param assigned filter (issues / pulls) assigned to you, default is false (optional)
     * @param created filter (issues / pulls) created by you, default is false (optional)
     * @param mentioned filter (issues / pulls) mentioning you, default is false (optional)
     * @param reviewRequested filter pulls requesting your review, default is false (optional)
     * @param reviewed filter pulls reviewed by you, default is false (optional)
     * @param owner filter by owner (optional)
     * @param team filter by team (requires organization owner parameter to be provided) (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IssueList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueSearchIssuesAsync(String state, String labels, String milestones, String q, Long priorityRepoId, String type, OffsetDateTime since, OffsetDateTime before, Boolean assigned, Boolean created, Boolean mentioned, Boolean reviewRequested, Boolean reviewed, String owner, String team, Integer page, Integer limit, final ApiCallback<List<Issue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueSearchIssuesValidateBeforeCall(state, labels, milestones, q, priorityRepoId, type, since, before, assigned, created, mentioned, reviewRequested, reviewed, owner, team, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Issue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueStartStopWatch
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to create the stopwatch on (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not repo writer, user does not have rights to toggle stopwatch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot start a stopwatch again if it already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueStartStopWatchCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/stopwatch/start"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueStartStopWatchValidateBeforeCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueStartStopWatch(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueStartStopWatch(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueStartStopWatch(Async)");
        }

        return issueStartStopWatchCall(owner, repo, index, _callback);

    }

    /**
     * Start stopwatch on an issue.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to create the stopwatch on (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not repo writer, user does not have rights to toggle stopwatch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot start a stopwatch again if it already exists </td><td>  -  </td></tr>
     </table>
     */
    public void issueStartStopWatch(String owner, String repo, Long index) throws ApiException {
        issueStartStopWatchWithHttpInfo(owner, repo, index);
    }

    /**
     * Start stopwatch on an issue.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to create the stopwatch on (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not repo writer, user does not have rights to toggle stopwatch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot start a stopwatch again if it already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> issueStartStopWatchWithHttpInfo(String owner, String repo, Long index) throws ApiException {
        okhttp3.Call localVarCall = issueStartStopWatchValidateBeforeCall(owner, repo, index, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Start stopwatch on an issue. (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to create the stopwatch on (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not repo writer, user does not have rights to toggle stopwatch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot start a stopwatch again if it already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueStartStopWatchAsync(String owner, String repo, Long index, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueStartStopWatchValidateBeforeCall(owner, repo, index, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueStopStopWatch
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to stop the stopwatch on (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not repo writer, user does not have rights to toggle stopwatch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot stop a non existent stopwatch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueStopStopWatchCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/stopwatch/stop"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueStopStopWatchValidateBeforeCall(String owner, String repo, Long index, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueStopStopWatch(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueStopStopWatch(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueStopStopWatch(Async)");
        }

        return issueStopStopWatchCall(owner, repo, index, _callback);

    }

    /**
     * Stop an issue&#39;s existing stopwatch.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to stop the stopwatch on (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not repo writer, user does not have rights to toggle stopwatch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot stop a non existent stopwatch </td><td>  -  </td></tr>
     </table>
     */
    public void issueStopStopWatch(String owner, String repo, Long index) throws ApiException {
        issueStopStopWatchWithHttpInfo(owner, repo, index);
    }

    /**
     * Stop an issue&#39;s existing stopwatch.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to stop the stopwatch on (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not repo writer, user does not have rights to toggle stopwatch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot stop a non existent stopwatch </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> issueStopStopWatchWithHttpInfo(String owner, String repo, Long index) throws ApiException {
        okhttp3.Call localVarCall = issueStopStopWatchValidateBeforeCall(owner, repo, index, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stop an issue&#39;s existing stopwatch. (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue to stop the stopwatch on (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not repo writer, user does not have rights to toggle stopwatch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot stop a non existent stopwatch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueStopStopWatchAsync(String owner, String repo, Long index, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueStopStopWatchValidateBeforeCall(owner, repo, index, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueSubscriptions
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueSubscriptionsCall(String owner, String repo, Long index, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/subscriptions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueSubscriptionsValidateBeforeCall(String owner, String repo, Long index, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueSubscriptions(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueSubscriptions(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueSubscriptions(Async)");
        }

        return issueSubscriptionsCall(owner, repo, index, page, limit, _callback);

    }

    /**
     * Get users who subscribed on an issue.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public List<User> issueSubscriptions(String owner, String repo, Long index, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<User>> localVarResp = issueSubscriptionsWithHttpInfo(owner, repo, index, page, limit);
        return localVarResp.getData();
    }

    /**
     * Get users who subscribed on an issue.
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> issueSubscriptionsWithHttpInfo(String owner, String repo, Long index, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = issueSubscriptionsValidateBeforeCall(owner, repo, index, page, limit, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get users who subscribed on an issue. (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueSubscriptionsAsync(String owner, String repo, Long index, Integer page, Integer limit, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueSubscriptionsValidateBeforeCall(owner, repo, index, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueTrackedTimes
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param user optional filter by user (available for issue managers) (optional)
     * @param since Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTimeList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueTrackedTimesCall(String owner, String repo, Long index, String user, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{index}/times"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueTrackedTimesValidateBeforeCall(String owner, String repo, Long index, String user, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issueTrackedTimes(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issueTrackedTimes(Async)");
        }

        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling issueTrackedTimes(Async)");
        }

        return issueTrackedTimesCall(owner, repo, index, user, since, before, page, limit, _callback);

    }

    /**
     * List an issue&#39;s tracked times
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param user optional filter by user (available for issue managers) (optional)
     * @param since Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;TrackedTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTimeList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public List<TrackedTime> issueTrackedTimes(String owner, String repo, Long index, String user, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<TrackedTime>> localVarResp = issueTrackedTimesWithHttpInfo(owner, repo, index, user, since, before, page, limit);
        return localVarResp.getData();
    }

    /**
     * List an issue&#39;s tracked times
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param user optional filter by user (available for issue managers) (optional)
     * @param since Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;TrackedTime&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTimeList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TrackedTime>> issueTrackedTimesWithHttpInfo(String owner, String repo, Long index, String user, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = issueTrackedTimesValidateBeforeCall(owner, repo, index, user, since, before, page, limit, null);
        Type localVarReturnType = new TypeToken<List<TrackedTime>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List an issue&#39;s tracked times (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param index index of the issue (required)
     * @param user optional filter by user (available for issue managers) (optional)
     * @param since Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTimeList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueTrackedTimesAsync(String owner, String repo, Long index, String user, OffsetDateTime since, OffsetDateTime before, Integer page, Integer limit, final ApiCallback<List<TrackedTime>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueTrackedTimesValidateBeforeCall(owner, repo, index, user, since, before, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<TrackedTime>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
