/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateRepoOption options when creating repository
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:48.734827-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRepoOption {
  public static final String SERIALIZED_NAME_AUTO_INIT = "auto_init";
  @SerializedName(SERIALIZED_NAME_AUTO_INIT)
  private Boolean autoInit;

  public static final String SERIALIZED_NAME_DEFAULT_BRANCH = "default_branch";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRANCH)
  private String defaultBranch;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GITIGNORES = "gitignores";
  @SerializedName(SERIALIZED_NAME_GITIGNORES)
  private String gitignores;

  public static final String SERIALIZED_NAME_ISSUE_LABELS = "issue_labels";
  @SerializedName(SERIALIZED_NAME_ISSUE_LABELS)
  private String issueLabels;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIVATE = "private";
  @SerializedName(SERIALIZED_NAME_PRIVATE)
  private Boolean _private;

  public static final String SERIALIZED_NAME_README = "readme";
  @SerializedName(SERIALIZED_NAME_README)
  private String readme;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private Boolean template;

  /**
   * TrustModel of the repository
   */
  @JsonAdapter(TrustModelEnum.Adapter.class)
  public enum TrustModelEnum {
    DEFAULT("default"),
    
    COLLABORATOR("collaborator"),
    
    COMMITTER("committer"),
    
    COLLABORATORCOMMITTER("collaboratorcommitter");

    private String value;

    TrustModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrustModelEnum fromValue(String value) {
      for (TrustModelEnum b : TrustModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrustModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrustModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrustModelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrustModelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrustModelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRUST_MODEL = "trust_model";
  @SerializedName(SERIALIZED_NAME_TRUST_MODEL)
  private TrustModelEnum trustModel;

  public CreateRepoOption() {
  }

  public CreateRepoOption autoInit(Boolean autoInit) {
    this.autoInit = autoInit;
    return this;
  }

  /**
   * Whether the repository should be auto-initialized?
   * @return autoInit
   */
  @javax.annotation.Nullable
  public Boolean getAutoInit() {
    return autoInit;
  }

  public void setAutoInit(Boolean autoInit) {
    this.autoInit = autoInit;
  }


  public CreateRepoOption defaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
    return this;
  }

  /**
   * DefaultBranch of the repository (used when initializes and in template)
   * @return defaultBranch
   */
  @javax.annotation.Nullable
  public String getDefaultBranch() {
    return defaultBranch;
  }

  public void setDefaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
  }


  public CreateRepoOption description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the repository to create
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateRepoOption gitignores(String gitignores) {
    this.gitignores = gitignores;
    return this;
  }

  /**
   * Gitignores to use
   * @return gitignores
   */
  @javax.annotation.Nullable
  public String getGitignores() {
    return gitignores;
  }

  public void setGitignores(String gitignores) {
    this.gitignores = gitignores;
  }


  public CreateRepoOption issueLabels(String issueLabels) {
    this.issueLabels = issueLabels;
    return this;
  }

  /**
   * Label-Set to use
   * @return issueLabels
   */
  @javax.annotation.Nullable
  public String getIssueLabels() {
    return issueLabels;
  }

  public void setIssueLabels(String issueLabels) {
    this.issueLabels = issueLabels;
  }


  public CreateRepoOption license(String license) {
    this.license = license;
    return this;
  }

  /**
   * License to use
   * @return license
   */
  @javax.annotation.Nullable
  public String getLicense() {
    return license;
  }

  public void setLicense(String license) {
    this.license = license;
  }


  public CreateRepoOption name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the repository to create
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateRepoOption _private(Boolean _private) {
    this._private = _private;
    return this;
  }

  /**
   * Whether the repository is private
   * @return _private
   */
  @javax.annotation.Nullable
  public Boolean getPrivate() {
    return _private;
  }

  public void setPrivate(Boolean _private) {
    this._private = _private;
  }


  public CreateRepoOption readme(String readme) {
    this.readme = readme;
    return this;
  }

  /**
   * Readme of the repository to create
   * @return readme
   */
  @javax.annotation.Nullable
  public String getReadme() {
    return readme;
  }

  public void setReadme(String readme) {
    this.readme = readme;
  }


  public CreateRepoOption template(Boolean template) {
    this.template = template;
    return this;
  }

  /**
   * Whether the repository is template
   * @return template
   */
  @javax.annotation.Nullable
  public Boolean getTemplate() {
    return template;
  }

  public void setTemplate(Boolean template) {
    this.template = template;
  }


  public CreateRepoOption trustModel(TrustModelEnum trustModel) {
    this.trustModel = trustModel;
    return this;
  }

  /**
   * TrustModel of the repository
   * @return trustModel
   */
  @javax.annotation.Nullable
  public TrustModelEnum getTrustModel() {
    return trustModel;
  }

  public void setTrustModel(TrustModelEnum trustModel) {
    this.trustModel = trustModel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRepoOption createRepoOption = (CreateRepoOption) o;
    return Objects.equals(this.autoInit, createRepoOption.autoInit) &&
        Objects.equals(this.defaultBranch, createRepoOption.defaultBranch) &&
        Objects.equals(this.description, createRepoOption.description) &&
        Objects.equals(this.gitignores, createRepoOption.gitignores) &&
        Objects.equals(this.issueLabels, createRepoOption.issueLabels) &&
        Objects.equals(this.license, createRepoOption.license) &&
        Objects.equals(this.name, createRepoOption.name) &&
        Objects.equals(this._private, createRepoOption._private) &&
        Objects.equals(this.readme, createRepoOption.readme) &&
        Objects.equals(this.template, createRepoOption.template) &&
        Objects.equals(this.trustModel, createRepoOption.trustModel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoInit, defaultBranch, description, gitignores, issueLabels, license, name, _private, readme, template, trustModel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRepoOption {\n");
    sb.append("    autoInit: ").append(toIndentedString(autoInit)).append("\n");
    sb.append("    defaultBranch: ").append(toIndentedString(defaultBranch)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    gitignores: ").append(toIndentedString(gitignores)).append("\n");
    sb.append("    issueLabels: ").append(toIndentedString(issueLabels)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    readme: ").append(toIndentedString(readme)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    trustModel: ").append(toIndentedString(trustModel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_init");
    openapiFields.add("default_branch");
    openapiFields.add("description");
    openapiFields.add("gitignores");
    openapiFields.add("issue_labels");
    openapiFields.add("license");
    openapiFields.add("name");
    openapiFields.add("private");
    openapiFields.add("readme");
    openapiFields.add("template");
    openapiFields.add("trust_model");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRepoOption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRepoOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRepoOption is not found in the empty JSON string", CreateRepoOption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRepoOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRepoOption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRepoOption.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("default_branch") != null && !jsonObj.get("default_branch").isJsonNull()) && !jsonObj.get("default_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_branch").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("gitignores") != null && !jsonObj.get("gitignores").isJsonNull()) && !jsonObj.get("gitignores").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitignores` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitignores").toString()));
      }
      if ((jsonObj.get("issue_labels") != null && !jsonObj.get("issue_labels").isJsonNull()) && !jsonObj.get("issue_labels").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_labels` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_labels").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("readme") != null && !jsonObj.get("readme").isJsonNull()) && !jsonObj.get("readme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readme").toString()));
      }
      if ((jsonObj.get("trust_model") != null && !jsonObj.get("trust_model").isJsonNull()) && !jsonObj.get("trust_model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trust_model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trust_model").toString()));
      }
      // validate the optional field `trust_model`
      if (jsonObj.get("trust_model") != null && !jsonObj.get("trust_model").isJsonNull()) {
        TrustModelEnum.validateJsonElement(jsonObj.get("trust_model"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRepoOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRepoOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRepoOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRepoOption.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRepoOption>() {
           @Override
           public void write(JsonWriter out, CreateRepoOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRepoOption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRepoOption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRepoOption
   * @throws IOException if the JSON string is invalid with respect to CreateRepoOption
   */
  public static CreateRepoOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRepoOption.class);
  }

  /**
   * Convert an instance of CreateRepoOption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

