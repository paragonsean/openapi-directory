/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ExternalTracker;
import org.openapitools.client.model.ExternalWiki;
import org.openapitools.client.model.InternalTracker;
import org.openapitools.client.model.Permission;
import org.openapitools.client.model.RepoTransfer;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Repository represents a repository
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:48.734827-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Repository {
  public static final String SERIALIZED_NAME_ALLOW_MERGE_COMMITS = "allow_merge_commits";
  @SerializedName(SERIALIZED_NAME_ALLOW_MERGE_COMMITS)
  private Boolean allowMergeCommits;

  public static final String SERIALIZED_NAME_ALLOW_REBASE = "allow_rebase";
  @SerializedName(SERIALIZED_NAME_ALLOW_REBASE)
  private Boolean allowRebase;

  public static final String SERIALIZED_NAME_ALLOW_REBASE_EXPLICIT = "allow_rebase_explicit";
  @SerializedName(SERIALIZED_NAME_ALLOW_REBASE_EXPLICIT)
  private Boolean allowRebaseExplicit;

  public static final String SERIALIZED_NAME_ALLOW_REBASE_UPDATE = "allow_rebase_update";
  @SerializedName(SERIALIZED_NAME_ALLOW_REBASE_UPDATE)
  private Boolean allowRebaseUpdate;

  public static final String SERIALIZED_NAME_ALLOW_SQUASH_MERGE = "allow_squash_merge";
  @SerializedName(SERIALIZED_NAME_ALLOW_SQUASH_MERGE)
  private Boolean allowSquashMerge;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_AVATAR_URL = "avatar_url";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private String avatarUrl;

  public static final String SERIALIZED_NAME_CLONE_URL = "clone_url";
  @SerializedName(SERIALIZED_NAME_CLONE_URL)
  private String cloneUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DEFAULT_ALLOW_MAINTAINER_EDIT = "default_allow_maintainer_edit";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ALLOW_MAINTAINER_EDIT)
  private Boolean defaultAllowMaintainerEdit;

  public static final String SERIALIZED_NAME_DEFAULT_BRANCH = "default_branch";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRANCH)
  private String defaultBranch;

  public static final String SERIALIZED_NAME_DEFAULT_DELETE_BRANCH_AFTER_MERGE = "default_delete_branch_after_merge";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DELETE_BRANCH_AFTER_MERGE)
  private Boolean defaultDeleteBranchAfterMerge;

  public static final String SERIALIZED_NAME_DEFAULT_MERGE_STYLE = "default_merge_style";
  @SerializedName(SERIALIZED_NAME_DEFAULT_MERGE_STYLE)
  private String defaultMergeStyle;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMPTY = "empty";
  @SerializedName(SERIALIZED_NAME_EMPTY)
  private Boolean empty;

  public static final String SERIALIZED_NAME_EXTERNAL_TRACKER = "external_tracker";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_TRACKER)
  private ExternalTracker externalTracker;

  public static final String SERIALIZED_NAME_EXTERNAL_WIKI = "external_wiki";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_WIKI)
  private ExternalWiki externalWiki;

  public static final String SERIALIZED_NAME_FORK = "fork";
  @SerializedName(SERIALIZED_NAME_FORK)
  private Boolean fork;

  public static final String SERIALIZED_NAME_FORKS_COUNT = "forks_count";
  @SerializedName(SERIALIZED_NAME_FORKS_COUNT)
  private Long forksCount;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_HAS_ACTIONS = "has_actions";
  @SerializedName(SERIALIZED_NAME_HAS_ACTIONS)
  private Boolean hasActions;

  public static final String SERIALIZED_NAME_HAS_ISSUES = "has_issues";
  @SerializedName(SERIALIZED_NAME_HAS_ISSUES)
  private Boolean hasIssues;

  public static final String SERIALIZED_NAME_HAS_PACKAGES = "has_packages";
  @SerializedName(SERIALIZED_NAME_HAS_PACKAGES)
  private Boolean hasPackages;

  public static final String SERIALIZED_NAME_HAS_PROJECTS = "has_projects";
  @SerializedName(SERIALIZED_NAME_HAS_PROJECTS)
  private Boolean hasProjects;

  public static final String SERIALIZED_NAME_HAS_PULL_REQUESTS = "has_pull_requests";
  @SerializedName(SERIALIZED_NAME_HAS_PULL_REQUESTS)
  private Boolean hasPullRequests;

  public static final String SERIALIZED_NAME_HAS_RELEASES = "has_releases";
  @SerializedName(SERIALIZED_NAME_HAS_RELEASES)
  private Boolean hasReleases;

  public static final String SERIALIZED_NAME_HAS_WIKI = "has_wiki";
  @SerializedName(SERIALIZED_NAME_HAS_WIKI)
  private Boolean hasWiki;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private String htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IGNORE_WHITESPACE_CONFLICTS = "ignore_whitespace_conflicts";
  @SerializedName(SERIALIZED_NAME_IGNORE_WHITESPACE_CONFLICTS)
  private Boolean ignoreWhitespaceConflicts;

  public static final String SERIALIZED_NAME_INTERNAL = "internal";
  @SerializedName(SERIALIZED_NAME_INTERNAL)
  private Boolean internal;

  public static final String SERIALIZED_NAME_INTERNAL_TRACKER = "internal_tracker";
  @SerializedName(SERIALIZED_NAME_INTERNAL_TRACKER)
  private InternalTracker internalTracker;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LANGUAGES_URL = "languages_url";
  @SerializedName(SERIALIZED_NAME_LANGUAGES_URL)
  private String languagesUrl;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_MIRROR = "mirror";
  @SerializedName(SERIALIZED_NAME_MIRROR)
  private Boolean mirror;

  public static final String SERIALIZED_NAME_MIRROR_INTERVAL = "mirror_interval";
  @SerializedName(SERIALIZED_NAME_MIRROR_INTERVAL)
  private String mirrorInterval;

  public static final String SERIALIZED_NAME_MIRROR_UPDATED = "mirror_updated";
  @SerializedName(SERIALIZED_NAME_MIRROR_UPDATED)
  private OffsetDateTime mirrorUpdated;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPEN_ISSUES_COUNT = "open_issues_count";
  @SerializedName(SERIALIZED_NAME_OPEN_ISSUES_COUNT)
  private Long openIssuesCount;

  public static final String SERIALIZED_NAME_OPEN_PR_COUNTER = "open_pr_counter";
  @SerializedName(SERIALIZED_NAME_OPEN_PR_COUNTER)
  private Long openPrCounter;

  public static final String SERIALIZED_NAME_ORIGINAL_URL = "original_url";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_URL)
  private String originalUrl;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private User owner;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private Repository parent;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private Permission permissions;

  public static final String SERIALIZED_NAME_PRIVATE = "private";
  @SerializedName(SERIALIZED_NAME_PRIVATE)
  private Boolean _private;

  public static final String SERIALIZED_NAME_RELEASE_COUNTER = "release_counter";
  @SerializedName(SERIALIZED_NAME_RELEASE_COUNTER)
  private Long releaseCounter;

  public static final String SERIALIZED_NAME_REPO_TRANSFER = "repo_transfer";
  @SerializedName(SERIALIZED_NAME_REPO_TRANSFER)
  private RepoTransfer repoTransfer;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_SSH_URL = "ssh_url";
  @SerializedName(SERIALIZED_NAME_SSH_URL)
  private String sshUrl;

  public static final String SERIALIZED_NAME_STARS_COUNT = "stars_count";
  @SerializedName(SERIALIZED_NAME_STARS_COUNT)
  private Long starsCount;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private Boolean template;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_WATCHERS_COUNT = "watchers_count";
  @SerializedName(SERIALIZED_NAME_WATCHERS_COUNT)
  private Long watchersCount;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public Repository() {
  }

  public Repository allowMergeCommits(Boolean allowMergeCommits) {
    this.allowMergeCommits = allowMergeCommits;
    return this;
  }

  /**
   * Get allowMergeCommits
   * @return allowMergeCommits
   */
  @javax.annotation.Nullable
  public Boolean getAllowMergeCommits() {
    return allowMergeCommits;
  }

  public void setAllowMergeCommits(Boolean allowMergeCommits) {
    this.allowMergeCommits = allowMergeCommits;
  }


  public Repository allowRebase(Boolean allowRebase) {
    this.allowRebase = allowRebase;
    return this;
  }

  /**
   * Get allowRebase
   * @return allowRebase
   */
  @javax.annotation.Nullable
  public Boolean getAllowRebase() {
    return allowRebase;
  }

  public void setAllowRebase(Boolean allowRebase) {
    this.allowRebase = allowRebase;
  }


  public Repository allowRebaseExplicit(Boolean allowRebaseExplicit) {
    this.allowRebaseExplicit = allowRebaseExplicit;
    return this;
  }

  /**
   * Get allowRebaseExplicit
   * @return allowRebaseExplicit
   */
  @javax.annotation.Nullable
  public Boolean getAllowRebaseExplicit() {
    return allowRebaseExplicit;
  }

  public void setAllowRebaseExplicit(Boolean allowRebaseExplicit) {
    this.allowRebaseExplicit = allowRebaseExplicit;
  }


  public Repository allowRebaseUpdate(Boolean allowRebaseUpdate) {
    this.allowRebaseUpdate = allowRebaseUpdate;
    return this;
  }

  /**
   * Get allowRebaseUpdate
   * @return allowRebaseUpdate
   */
  @javax.annotation.Nullable
  public Boolean getAllowRebaseUpdate() {
    return allowRebaseUpdate;
  }

  public void setAllowRebaseUpdate(Boolean allowRebaseUpdate) {
    this.allowRebaseUpdate = allowRebaseUpdate;
  }


  public Repository allowSquashMerge(Boolean allowSquashMerge) {
    this.allowSquashMerge = allowSquashMerge;
    return this;
  }

  /**
   * Get allowSquashMerge
   * @return allowSquashMerge
   */
  @javax.annotation.Nullable
  public Boolean getAllowSquashMerge() {
    return allowSquashMerge;
  }

  public void setAllowSquashMerge(Boolean allowSquashMerge) {
    this.allowSquashMerge = allowSquashMerge;
  }


  public Repository archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Get archived
   * @return archived
   */
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public Repository avatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
    return this;
  }

  /**
   * Get avatarUrl
   * @return avatarUrl
   */
  @javax.annotation.Nullable
  public String getAvatarUrl() {
    return avatarUrl;
  }

  public void setAvatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
  }


  public Repository cloneUrl(String cloneUrl) {
    this.cloneUrl = cloneUrl;
    return this;
  }

  /**
   * Get cloneUrl
   * @return cloneUrl
   */
  @javax.annotation.Nullable
  public String getCloneUrl() {
    return cloneUrl;
  }

  public void setCloneUrl(String cloneUrl) {
    this.cloneUrl = cloneUrl;
  }


  public Repository createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Repository defaultAllowMaintainerEdit(Boolean defaultAllowMaintainerEdit) {
    this.defaultAllowMaintainerEdit = defaultAllowMaintainerEdit;
    return this;
  }

  /**
   * Get defaultAllowMaintainerEdit
   * @return defaultAllowMaintainerEdit
   */
  @javax.annotation.Nullable
  public Boolean getDefaultAllowMaintainerEdit() {
    return defaultAllowMaintainerEdit;
  }

  public void setDefaultAllowMaintainerEdit(Boolean defaultAllowMaintainerEdit) {
    this.defaultAllowMaintainerEdit = defaultAllowMaintainerEdit;
  }


  public Repository defaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
    return this;
  }

  /**
   * Get defaultBranch
   * @return defaultBranch
   */
  @javax.annotation.Nullable
  public String getDefaultBranch() {
    return defaultBranch;
  }

  public void setDefaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
  }


  public Repository defaultDeleteBranchAfterMerge(Boolean defaultDeleteBranchAfterMerge) {
    this.defaultDeleteBranchAfterMerge = defaultDeleteBranchAfterMerge;
    return this;
  }

  /**
   * Get defaultDeleteBranchAfterMerge
   * @return defaultDeleteBranchAfterMerge
   */
  @javax.annotation.Nullable
  public Boolean getDefaultDeleteBranchAfterMerge() {
    return defaultDeleteBranchAfterMerge;
  }

  public void setDefaultDeleteBranchAfterMerge(Boolean defaultDeleteBranchAfterMerge) {
    this.defaultDeleteBranchAfterMerge = defaultDeleteBranchAfterMerge;
  }


  public Repository defaultMergeStyle(String defaultMergeStyle) {
    this.defaultMergeStyle = defaultMergeStyle;
    return this;
  }

  /**
   * Get defaultMergeStyle
   * @return defaultMergeStyle
   */
  @javax.annotation.Nullable
  public String getDefaultMergeStyle() {
    return defaultMergeStyle;
  }

  public void setDefaultMergeStyle(String defaultMergeStyle) {
    this.defaultMergeStyle = defaultMergeStyle;
  }


  public Repository description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Repository empty(Boolean empty) {
    this.empty = empty;
    return this;
  }

  /**
   * Get empty
   * @return empty
   */
  @javax.annotation.Nullable
  public Boolean getEmpty() {
    return empty;
  }

  public void setEmpty(Boolean empty) {
    this.empty = empty;
  }


  public Repository externalTracker(ExternalTracker externalTracker) {
    this.externalTracker = externalTracker;
    return this;
  }

  /**
   * Get externalTracker
   * @return externalTracker
   */
  @javax.annotation.Nullable
  public ExternalTracker getExternalTracker() {
    return externalTracker;
  }

  public void setExternalTracker(ExternalTracker externalTracker) {
    this.externalTracker = externalTracker;
  }


  public Repository externalWiki(ExternalWiki externalWiki) {
    this.externalWiki = externalWiki;
    return this;
  }

  /**
   * Get externalWiki
   * @return externalWiki
   */
  @javax.annotation.Nullable
  public ExternalWiki getExternalWiki() {
    return externalWiki;
  }

  public void setExternalWiki(ExternalWiki externalWiki) {
    this.externalWiki = externalWiki;
  }


  public Repository fork(Boolean fork) {
    this.fork = fork;
    return this;
  }

  /**
   * Get fork
   * @return fork
   */
  @javax.annotation.Nullable
  public Boolean getFork() {
    return fork;
  }

  public void setFork(Boolean fork) {
    this.fork = fork;
  }


  public Repository forksCount(Long forksCount) {
    this.forksCount = forksCount;
    return this;
  }

  /**
   * Get forksCount
   * @return forksCount
   */
  @javax.annotation.Nullable
  public Long getForksCount() {
    return forksCount;
  }

  public void setForksCount(Long forksCount) {
    this.forksCount = forksCount;
  }


  public Repository fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Get fullName
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public Repository hasActions(Boolean hasActions) {
    this.hasActions = hasActions;
    return this;
  }

  /**
   * Get hasActions
   * @return hasActions
   */
  @javax.annotation.Nullable
  public Boolean getHasActions() {
    return hasActions;
  }

  public void setHasActions(Boolean hasActions) {
    this.hasActions = hasActions;
  }


  public Repository hasIssues(Boolean hasIssues) {
    this.hasIssues = hasIssues;
    return this;
  }

  /**
   * Get hasIssues
   * @return hasIssues
   */
  @javax.annotation.Nullable
  public Boolean getHasIssues() {
    return hasIssues;
  }

  public void setHasIssues(Boolean hasIssues) {
    this.hasIssues = hasIssues;
  }


  public Repository hasPackages(Boolean hasPackages) {
    this.hasPackages = hasPackages;
    return this;
  }

  /**
   * Get hasPackages
   * @return hasPackages
   */
  @javax.annotation.Nullable
  public Boolean getHasPackages() {
    return hasPackages;
  }

  public void setHasPackages(Boolean hasPackages) {
    this.hasPackages = hasPackages;
  }


  public Repository hasProjects(Boolean hasProjects) {
    this.hasProjects = hasProjects;
    return this;
  }

  /**
   * Get hasProjects
   * @return hasProjects
   */
  @javax.annotation.Nullable
  public Boolean getHasProjects() {
    return hasProjects;
  }

  public void setHasProjects(Boolean hasProjects) {
    this.hasProjects = hasProjects;
  }


  public Repository hasPullRequests(Boolean hasPullRequests) {
    this.hasPullRequests = hasPullRequests;
    return this;
  }

  /**
   * Get hasPullRequests
   * @return hasPullRequests
   */
  @javax.annotation.Nullable
  public Boolean getHasPullRequests() {
    return hasPullRequests;
  }

  public void setHasPullRequests(Boolean hasPullRequests) {
    this.hasPullRequests = hasPullRequests;
  }


  public Repository hasReleases(Boolean hasReleases) {
    this.hasReleases = hasReleases;
    return this;
  }

  /**
   * Get hasReleases
   * @return hasReleases
   */
  @javax.annotation.Nullable
  public Boolean getHasReleases() {
    return hasReleases;
  }

  public void setHasReleases(Boolean hasReleases) {
    this.hasReleases = hasReleases;
  }


  public Repository hasWiki(Boolean hasWiki) {
    this.hasWiki = hasWiki;
    return this;
  }

  /**
   * Get hasWiki
   * @return hasWiki
   */
  @javax.annotation.Nullable
  public Boolean getHasWiki() {
    return hasWiki;
  }

  public void setHasWiki(Boolean hasWiki) {
    this.hasWiki = hasWiki;
  }


  public Repository htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nullable
  public String getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public Repository id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Repository ignoreWhitespaceConflicts(Boolean ignoreWhitespaceConflicts) {
    this.ignoreWhitespaceConflicts = ignoreWhitespaceConflicts;
    return this;
  }

  /**
   * Get ignoreWhitespaceConflicts
   * @return ignoreWhitespaceConflicts
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreWhitespaceConflicts() {
    return ignoreWhitespaceConflicts;
  }

  public void setIgnoreWhitespaceConflicts(Boolean ignoreWhitespaceConflicts) {
    this.ignoreWhitespaceConflicts = ignoreWhitespaceConflicts;
  }


  public Repository internal(Boolean internal) {
    this.internal = internal;
    return this;
  }

  /**
   * Get internal
   * @return internal
   */
  @javax.annotation.Nullable
  public Boolean getInternal() {
    return internal;
  }

  public void setInternal(Boolean internal) {
    this.internal = internal;
  }


  public Repository internalTracker(InternalTracker internalTracker) {
    this.internalTracker = internalTracker;
    return this;
  }

  /**
   * Get internalTracker
   * @return internalTracker
   */
  @javax.annotation.Nullable
  public InternalTracker getInternalTracker() {
    return internalTracker;
  }

  public void setInternalTracker(InternalTracker internalTracker) {
    this.internalTracker = internalTracker;
  }


  public Repository language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public Repository languagesUrl(String languagesUrl) {
    this.languagesUrl = languagesUrl;
    return this;
  }

  /**
   * Get languagesUrl
   * @return languagesUrl
   */
  @javax.annotation.Nullable
  public String getLanguagesUrl() {
    return languagesUrl;
  }

  public void setLanguagesUrl(String languagesUrl) {
    this.languagesUrl = languagesUrl;
  }


  public Repository link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public Repository mirror(Boolean mirror) {
    this.mirror = mirror;
    return this;
  }

  /**
   * Get mirror
   * @return mirror
   */
  @javax.annotation.Nullable
  public Boolean getMirror() {
    return mirror;
  }

  public void setMirror(Boolean mirror) {
    this.mirror = mirror;
  }


  public Repository mirrorInterval(String mirrorInterval) {
    this.mirrorInterval = mirrorInterval;
    return this;
  }

  /**
   * Get mirrorInterval
   * @return mirrorInterval
   */
  @javax.annotation.Nullable
  public String getMirrorInterval() {
    return mirrorInterval;
  }

  public void setMirrorInterval(String mirrorInterval) {
    this.mirrorInterval = mirrorInterval;
  }


  public Repository mirrorUpdated(OffsetDateTime mirrorUpdated) {
    this.mirrorUpdated = mirrorUpdated;
    return this;
  }

  /**
   * Get mirrorUpdated
   * @return mirrorUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMirrorUpdated() {
    return mirrorUpdated;
  }

  public void setMirrorUpdated(OffsetDateTime mirrorUpdated) {
    this.mirrorUpdated = mirrorUpdated;
  }


  public Repository name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Repository openIssuesCount(Long openIssuesCount) {
    this.openIssuesCount = openIssuesCount;
    return this;
  }

  /**
   * Get openIssuesCount
   * @return openIssuesCount
   */
  @javax.annotation.Nullable
  public Long getOpenIssuesCount() {
    return openIssuesCount;
  }

  public void setOpenIssuesCount(Long openIssuesCount) {
    this.openIssuesCount = openIssuesCount;
  }


  public Repository openPrCounter(Long openPrCounter) {
    this.openPrCounter = openPrCounter;
    return this;
  }

  /**
   * Get openPrCounter
   * @return openPrCounter
   */
  @javax.annotation.Nullable
  public Long getOpenPrCounter() {
    return openPrCounter;
  }

  public void setOpenPrCounter(Long openPrCounter) {
    this.openPrCounter = openPrCounter;
  }


  public Repository originalUrl(String originalUrl) {
    this.originalUrl = originalUrl;
    return this;
  }

  /**
   * Get originalUrl
   * @return originalUrl
   */
  @javax.annotation.Nullable
  public String getOriginalUrl() {
    return originalUrl;
  }

  public void setOriginalUrl(String originalUrl) {
    this.originalUrl = originalUrl;
  }


  public Repository owner(User owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public User getOwner() {
    return owner;
  }

  public void setOwner(User owner) {
    this.owner = owner;
  }


  public Repository parent(Repository parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public Repository getParent() {
    return parent;
  }

  public void setParent(Repository parent) {
    this.parent = parent;
  }


  public Repository permissions(Permission permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nullable
  public Permission getPermissions() {
    return permissions;
  }

  public void setPermissions(Permission permissions) {
    this.permissions = permissions;
  }


  public Repository _private(Boolean _private) {
    this._private = _private;
    return this;
  }

  /**
   * Get _private
   * @return _private
   */
  @javax.annotation.Nullable
  public Boolean getPrivate() {
    return _private;
  }

  public void setPrivate(Boolean _private) {
    this._private = _private;
  }


  public Repository releaseCounter(Long releaseCounter) {
    this.releaseCounter = releaseCounter;
    return this;
  }

  /**
   * Get releaseCounter
   * @return releaseCounter
   */
  @javax.annotation.Nullable
  public Long getReleaseCounter() {
    return releaseCounter;
  }

  public void setReleaseCounter(Long releaseCounter) {
    this.releaseCounter = releaseCounter;
  }


  public Repository repoTransfer(RepoTransfer repoTransfer) {
    this.repoTransfer = repoTransfer;
    return this;
  }

  /**
   * Get repoTransfer
   * @return repoTransfer
   */
  @javax.annotation.Nullable
  public RepoTransfer getRepoTransfer() {
    return repoTransfer;
  }

  public void setRepoTransfer(RepoTransfer repoTransfer) {
    this.repoTransfer = repoTransfer;
  }


  public Repository size(Long size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  public Repository sshUrl(String sshUrl) {
    this.sshUrl = sshUrl;
    return this;
  }

  /**
   * Get sshUrl
   * @return sshUrl
   */
  @javax.annotation.Nullable
  public String getSshUrl() {
    return sshUrl;
  }

  public void setSshUrl(String sshUrl) {
    this.sshUrl = sshUrl;
  }


  public Repository starsCount(Long starsCount) {
    this.starsCount = starsCount;
    return this;
  }

  /**
   * Get starsCount
   * @return starsCount
   */
  @javax.annotation.Nullable
  public Long getStarsCount() {
    return starsCount;
  }

  public void setStarsCount(Long starsCount) {
    this.starsCount = starsCount;
  }


  public Repository template(Boolean template) {
    this.template = template;
    return this;
  }

  /**
   * Get template
   * @return template
   */
  @javax.annotation.Nullable
  public Boolean getTemplate() {
    return template;
  }

  public void setTemplate(Boolean template) {
    this.template = template;
  }


  public Repository updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Repository watchersCount(Long watchersCount) {
    this.watchersCount = watchersCount;
    return this;
  }

  /**
   * Get watchersCount
   * @return watchersCount
   */
  @javax.annotation.Nullable
  public Long getWatchersCount() {
    return watchersCount;
  }

  public void setWatchersCount(Long watchersCount) {
    this.watchersCount = watchersCount;
  }


  public Repository website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Repository repository = (Repository) o;
    return Objects.equals(this.allowMergeCommits, repository.allowMergeCommits) &&
        Objects.equals(this.allowRebase, repository.allowRebase) &&
        Objects.equals(this.allowRebaseExplicit, repository.allowRebaseExplicit) &&
        Objects.equals(this.allowRebaseUpdate, repository.allowRebaseUpdate) &&
        Objects.equals(this.allowSquashMerge, repository.allowSquashMerge) &&
        Objects.equals(this.archived, repository.archived) &&
        Objects.equals(this.avatarUrl, repository.avatarUrl) &&
        Objects.equals(this.cloneUrl, repository.cloneUrl) &&
        Objects.equals(this.createdAt, repository.createdAt) &&
        Objects.equals(this.defaultAllowMaintainerEdit, repository.defaultAllowMaintainerEdit) &&
        Objects.equals(this.defaultBranch, repository.defaultBranch) &&
        Objects.equals(this.defaultDeleteBranchAfterMerge, repository.defaultDeleteBranchAfterMerge) &&
        Objects.equals(this.defaultMergeStyle, repository.defaultMergeStyle) &&
        Objects.equals(this.description, repository.description) &&
        Objects.equals(this.empty, repository.empty) &&
        Objects.equals(this.externalTracker, repository.externalTracker) &&
        Objects.equals(this.externalWiki, repository.externalWiki) &&
        Objects.equals(this.fork, repository.fork) &&
        Objects.equals(this.forksCount, repository.forksCount) &&
        Objects.equals(this.fullName, repository.fullName) &&
        Objects.equals(this.hasActions, repository.hasActions) &&
        Objects.equals(this.hasIssues, repository.hasIssues) &&
        Objects.equals(this.hasPackages, repository.hasPackages) &&
        Objects.equals(this.hasProjects, repository.hasProjects) &&
        Objects.equals(this.hasPullRequests, repository.hasPullRequests) &&
        Objects.equals(this.hasReleases, repository.hasReleases) &&
        Objects.equals(this.hasWiki, repository.hasWiki) &&
        Objects.equals(this.htmlUrl, repository.htmlUrl) &&
        Objects.equals(this.id, repository.id) &&
        Objects.equals(this.ignoreWhitespaceConflicts, repository.ignoreWhitespaceConflicts) &&
        Objects.equals(this.internal, repository.internal) &&
        Objects.equals(this.internalTracker, repository.internalTracker) &&
        Objects.equals(this.language, repository.language) &&
        Objects.equals(this.languagesUrl, repository.languagesUrl) &&
        Objects.equals(this.link, repository.link) &&
        Objects.equals(this.mirror, repository.mirror) &&
        Objects.equals(this.mirrorInterval, repository.mirrorInterval) &&
        Objects.equals(this.mirrorUpdated, repository.mirrorUpdated) &&
        Objects.equals(this.name, repository.name) &&
        Objects.equals(this.openIssuesCount, repository.openIssuesCount) &&
        Objects.equals(this.openPrCounter, repository.openPrCounter) &&
        Objects.equals(this.originalUrl, repository.originalUrl) &&
        Objects.equals(this.owner, repository.owner) &&
        Objects.equals(this.parent, repository.parent) &&
        Objects.equals(this.permissions, repository.permissions) &&
        Objects.equals(this._private, repository._private) &&
        Objects.equals(this.releaseCounter, repository.releaseCounter) &&
        Objects.equals(this.repoTransfer, repository.repoTransfer) &&
        Objects.equals(this.size, repository.size) &&
        Objects.equals(this.sshUrl, repository.sshUrl) &&
        Objects.equals(this.starsCount, repository.starsCount) &&
        Objects.equals(this.template, repository.template) &&
        Objects.equals(this.updatedAt, repository.updatedAt) &&
        Objects.equals(this.watchersCount, repository.watchersCount) &&
        Objects.equals(this.website, repository.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowMergeCommits, allowRebase, allowRebaseExplicit, allowRebaseUpdate, allowSquashMerge, archived, avatarUrl, cloneUrl, createdAt, defaultAllowMaintainerEdit, defaultBranch, defaultDeleteBranchAfterMerge, defaultMergeStyle, description, empty, externalTracker, externalWiki, fork, forksCount, fullName, hasActions, hasIssues, hasPackages, hasProjects, hasPullRequests, hasReleases, hasWiki, htmlUrl, id, ignoreWhitespaceConflicts, internal, internalTracker, language, languagesUrl, link, mirror, mirrorInterval, mirrorUpdated, name, openIssuesCount, openPrCounter, originalUrl, owner, parent, permissions, _private, releaseCounter, repoTransfer, size, sshUrl, starsCount, template, updatedAt, watchersCount, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Repository {\n");
    sb.append("    allowMergeCommits: ").append(toIndentedString(allowMergeCommits)).append("\n");
    sb.append("    allowRebase: ").append(toIndentedString(allowRebase)).append("\n");
    sb.append("    allowRebaseExplicit: ").append(toIndentedString(allowRebaseExplicit)).append("\n");
    sb.append("    allowRebaseUpdate: ").append(toIndentedString(allowRebaseUpdate)).append("\n");
    sb.append("    allowSquashMerge: ").append(toIndentedString(allowSquashMerge)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    cloneUrl: ").append(toIndentedString(cloneUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    defaultAllowMaintainerEdit: ").append(toIndentedString(defaultAllowMaintainerEdit)).append("\n");
    sb.append("    defaultBranch: ").append(toIndentedString(defaultBranch)).append("\n");
    sb.append("    defaultDeleteBranchAfterMerge: ").append(toIndentedString(defaultDeleteBranchAfterMerge)).append("\n");
    sb.append("    defaultMergeStyle: ").append(toIndentedString(defaultMergeStyle)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    empty: ").append(toIndentedString(empty)).append("\n");
    sb.append("    externalTracker: ").append(toIndentedString(externalTracker)).append("\n");
    sb.append("    externalWiki: ").append(toIndentedString(externalWiki)).append("\n");
    sb.append("    fork: ").append(toIndentedString(fork)).append("\n");
    sb.append("    forksCount: ").append(toIndentedString(forksCount)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    hasActions: ").append(toIndentedString(hasActions)).append("\n");
    sb.append("    hasIssues: ").append(toIndentedString(hasIssues)).append("\n");
    sb.append("    hasPackages: ").append(toIndentedString(hasPackages)).append("\n");
    sb.append("    hasProjects: ").append(toIndentedString(hasProjects)).append("\n");
    sb.append("    hasPullRequests: ").append(toIndentedString(hasPullRequests)).append("\n");
    sb.append("    hasReleases: ").append(toIndentedString(hasReleases)).append("\n");
    sb.append("    hasWiki: ").append(toIndentedString(hasWiki)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ignoreWhitespaceConflicts: ").append(toIndentedString(ignoreWhitespaceConflicts)).append("\n");
    sb.append("    internal: ").append(toIndentedString(internal)).append("\n");
    sb.append("    internalTracker: ").append(toIndentedString(internalTracker)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    languagesUrl: ").append(toIndentedString(languagesUrl)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    mirror: ").append(toIndentedString(mirror)).append("\n");
    sb.append("    mirrorInterval: ").append(toIndentedString(mirrorInterval)).append("\n");
    sb.append("    mirrorUpdated: ").append(toIndentedString(mirrorUpdated)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    openIssuesCount: ").append(toIndentedString(openIssuesCount)).append("\n");
    sb.append("    openPrCounter: ").append(toIndentedString(openPrCounter)).append("\n");
    sb.append("    originalUrl: ").append(toIndentedString(originalUrl)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    releaseCounter: ").append(toIndentedString(releaseCounter)).append("\n");
    sb.append("    repoTransfer: ").append(toIndentedString(repoTransfer)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    sshUrl: ").append(toIndentedString(sshUrl)).append("\n");
    sb.append("    starsCount: ").append(toIndentedString(starsCount)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    watchersCount: ").append(toIndentedString(watchersCount)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_merge_commits");
    openapiFields.add("allow_rebase");
    openapiFields.add("allow_rebase_explicit");
    openapiFields.add("allow_rebase_update");
    openapiFields.add("allow_squash_merge");
    openapiFields.add("archived");
    openapiFields.add("avatar_url");
    openapiFields.add("clone_url");
    openapiFields.add("created_at");
    openapiFields.add("default_allow_maintainer_edit");
    openapiFields.add("default_branch");
    openapiFields.add("default_delete_branch_after_merge");
    openapiFields.add("default_merge_style");
    openapiFields.add("description");
    openapiFields.add("empty");
    openapiFields.add("external_tracker");
    openapiFields.add("external_wiki");
    openapiFields.add("fork");
    openapiFields.add("forks_count");
    openapiFields.add("full_name");
    openapiFields.add("has_actions");
    openapiFields.add("has_issues");
    openapiFields.add("has_packages");
    openapiFields.add("has_projects");
    openapiFields.add("has_pull_requests");
    openapiFields.add("has_releases");
    openapiFields.add("has_wiki");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("ignore_whitespace_conflicts");
    openapiFields.add("internal");
    openapiFields.add("internal_tracker");
    openapiFields.add("language");
    openapiFields.add("languages_url");
    openapiFields.add("link");
    openapiFields.add("mirror");
    openapiFields.add("mirror_interval");
    openapiFields.add("mirror_updated");
    openapiFields.add("name");
    openapiFields.add("open_issues_count");
    openapiFields.add("open_pr_counter");
    openapiFields.add("original_url");
    openapiFields.add("owner");
    openapiFields.add("parent");
    openapiFields.add("permissions");
    openapiFields.add("private");
    openapiFields.add("release_counter");
    openapiFields.add("repo_transfer");
    openapiFields.add("size");
    openapiFields.add("ssh_url");
    openapiFields.add("stars_count");
    openapiFields.add("template");
    openapiFields.add("updated_at");
    openapiFields.add("watchers_count");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Repository
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Repository.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Repository is not found in the empty JSON string", Repository.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Repository.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Repository` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("avatar_url") != null && !jsonObj.get("avatar_url").isJsonNull()) && !jsonObj.get("avatar_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_url").toString()));
      }
      if ((jsonObj.get("clone_url") != null && !jsonObj.get("clone_url").isJsonNull()) && !jsonObj.get("clone_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clone_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clone_url").toString()));
      }
      if ((jsonObj.get("default_branch") != null && !jsonObj.get("default_branch").isJsonNull()) && !jsonObj.get("default_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_branch").toString()));
      }
      if ((jsonObj.get("default_merge_style") != null && !jsonObj.get("default_merge_style").isJsonNull()) && !jsonObj.get("default_merge_style").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_merge_style` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_merge_style").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `external_tracker`
      if (jsonObj.get("external_tracker") != null && !jsonObj.get("external_tracker").isJsonNull()) {
        ExternalTracker.validateJsonElement(jsonObj.get("external_tracker"));
      }
      // validate the optional field `external_wiki`
      if (jsonObj.get("external_wiki") != null && !jsonObj.get("external_wiki").isJsonNull()) {
        ExternalWiki.validateJsonElement(jsonObj.get("external_wiki"));
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if ((jsonObj.get("html_url") != null && !jsonObj.get("html_url").isJsonNull()) && !jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      // validate the optional field `internal_tracker`
      if (jsonObj.get("internal_tracker") != null && !jsonObj.get("internal_tracker").isJsonNull()) {
        InternalTracker.validateJsonElement(jsonObj.get("internal_tracker"));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("languages_url") != null && !jsonObj.get("languages_url").isJsonNull()) && !jsonObj.get("languages_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languages_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languages_url").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("mirror_interval") != null && !jsonObj.get("mirror_interval").isJsonNull()) && !jsonObj.get("mirror_interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mirror_interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mirror_interval").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("original_url") != null && !jsonObj.get("original_url").isJsonNull()) && !jsonObj.get("original_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_url").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("owner"));
      }
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        Repository.validateJsonElement(jsonObj.get("parent"));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        Permission.validateJsonElement(jsonObj.get("permissions"));
      }
      // validate the optional field `repo_transfer`
      if (jsonObj.get("repo_transfer") != null && !jsonObj.get("repo_transfer").isJsonNull()) {
        RepoTransfer.validateJsonElement(jsonObj.get("repo_transfer"));
      }
      if ((jsonObj.get("ssh_url") != null && !jsonObj.get("ssh_url").isJsonNull()) && !jsonObj.get("ssh_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssh_url").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Repository.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Repository' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Repository> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Repository.class));

       return (TypeAdapter<T>) new TypeAdapter<Repository>() {
           @Override
           public void write(JsonWriter out, Repository value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Repository read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Repository given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Repository
   * @throws IOException if the JSON string is invalid with respect to Repository
   */
  public static Repository fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Repository.class);
  }

  /**
   * Convert an instance of Repository to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

