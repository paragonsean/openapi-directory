/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExternalTracker represents settings for external tracker
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:48.734827-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExternalTracker {
  public static final String SERIALIZED_NAME_EXTERNAL_TRACKER_FORMAT = "external_tracker_format";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_TRACKER_FORMAT)
  private String externalTrackerFormat;

  public static final String SERIALIZED_NAME_EXTERNAL_TRACKER_REGEXP_PATTERN = "external_tracker_regexp_pattern";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_TRACKER_REGEXP_PATTERN)
  private String externalTrackerRegexpPattern;

  public static final String SERIALIZED_NAME_EXTERNAL_TRACKER_STYLE = "external_tracker_style";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_TRACKER_STYLE)
  private String externalTrackerStyle;

  public static final String SERIALIZED_NAME_EXTERNAL_TRACKER_URL = "external_tracker_url";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_TRACKER_URL)
  private String externalTrackerUrl;

  public ExternalTracker() {
  }

  public ExternalTracker externalTrackerFormat(String externalTrackerFormat) {
    this.externalTrackerFormat = externalTrackerFormat;
    return this;
  }

  /**
   * External Issue Tracker URL Format. Use the placeholders {user}, {repo} and {index} for the username, repository name and issue index.
   * @return externalTrackerFormat
   */
  @javax.annotation.Nullable
  public String getExternalTrackerFormat() {
    return externalTrackerFormat;
  }

  public void setExternalTrackerFormat(String externalTrackerFormat) {
    this.externalTrackerFormat = externalTrackerFormat;
  }


  public ExternalTracker externalTrackerRegexpPattern(String externalTrackerRegexpPattern) {
    this.externalTrackerRegexpPattern = externalTrackerRegexpPattern;
    return this;
  }

  /**
   * External Issue Tracker issue regular expression
   * @return externalTrackerRegexpPattern
   */
  @javax.annotation.Nullable
  public String getExternalTrackerRegexpPattern() {
    return externalTrackerRegexpPattern;
  }

  public void setExternalTrackerRegexpPattern(String externalTrackerRegexpPattern) {
    this.externalTrackerRegexpPattern = externalTrackerRegexpPattern;
  }


  public ExternalTracker externalTrackerStyle(String externalTrackerStyle) {
    this.externalTrackerStyle = externalTrackerStyle;
    return this;
  }

  /**
   * External Issue Tracker Number Format, either &#x60;numeric&#x60;, &#x60;alphanumeric&#x60;, or &#x60;regexp&#x60;
   * @return externalTrackerStyle
   */
  @javax.annotation.Nullable
  public String getExternalTrackerStyle() {
    return externalTrackerStyle;
  }

  public void setExternalTrackerStyle(String externalTrackerStyle) {
    this.externalTrackerStyle = externalTrackerStyle;
  }


  public ExternalTracker externalTrackerUrl(String externalTrackerUrl) {
    this.externalTrackerUrl = externalTrackerUrl;
    return this;
  }

  /**
   * URL of external issue tracker.
   * @return externalTrackerUrl
   */
  @javax.annotation.Nullable
  public String getExternalTrackerUrl() {
    return externalTrackerUrl;
  }

  public void setExternalTrackerUrl(String externalTrackerUrl) {
    this.externalTrackerUrl = externalTrackerUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalTracker externalTracker = (ExternalTracker) o;
    return Objects.equals(this.externalTrackerFormat, externalTracker.externalTrackerFormat) &&
        Objects.equals(this.externalTrackerRegexpPattern, externalTracker.externalTrackerRegexpPattern) &&
        Objects.equals(this.externalTrackerStyle, externalTracker.externalTrackerStyle) &&
        Objects.equals(this.externalTrackerUrl, externalTracker.externalTrackerUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalTrackerFormat, externalTrackerRegexpPattern, externalTrackerStyle, externalTrackerUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalTracker {\n");
    sb.append("    externalTrackerFormat: ").append(toIndentedString(externalTrackerFormat)).append("\n");
    sb.append("    externalTrackerRegexpPattern: ").append(toIndentedString(externalTrackerRegexpPattern)).append("\n");
    sb.append("    externalTrackerStyle: ").append(toIndentedString(externalTrackerStyle)).append("\n");
    sb.append("    externalTrackerUrl: ").append(toIndentedString(externalTrackerUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("external_tracker_format");
    openapiFields.add("external_tracker_regexp_pattern");
    openapiFields.add("external_tracker_style");
    openapiFields.add("external_tracker_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExternalTracker
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExternalTracker.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExternalTracker is not found in the empty JSON string", ExternalTracker.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExternalTracker.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExternalTracker` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("external_tracker_format") != null && !jsonObj.get("external_tracker_format").isJsonNull()) && !jsonObj.get("external_tracker_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_tracker_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_tracker_format").toString()));
      }
      if ((jsonObj.get("external_tracker_regexp_pattern") != null && !jsonObj.get("external_tracker_regexp_pattern").isJsonNull()) && !jsonObj.get("external_tracker_regexp_pattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_tracker_regexp_pattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_tracker_regexp_pattern").toString()));
      }
      if ((jsonObj.get("external_tracker_style") != null && !jsonObj.get("external_tracker_style").isJsonNull()) && !jsonObj.get("external_tracker_style").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_tracker_style` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_tracker_style").toString()));
      }
      if ((jsonObj.get("external_tracker_url") != null && !jsonObj.get("external_tracker_url").isJsonNull()) && !jsonObj.get("external_tracker_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_tracker_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_tracker_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExternalTracker.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExternalTracker' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExternalTracker> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExternalTracker.class));

       return (TypeAdapter<T>) new TypeAdapter<ExternalTracker>() {
           @Override
           public void write(JsonWriter out, ExternalTracker value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExternalTracker read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExternalTracker given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExternalTracker
   * @throws IOException if the JSON string is invalid with respect to ExternalTracker
   */
  public static ExternalTracker fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExternalTracker.class);
  }

  /**
   * Convert an instance of ExternalTracker to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

