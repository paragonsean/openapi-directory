/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.Issue;
import org.openapitools.client.model.Label;
import org.openapitools.client.model.Milestone;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.TrackedTime;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TimelineComment represents a timeline comment (comment of any type) on a commit or issue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:48.734827-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimelineComment {
  public static final String SERIALIZED_NAME_ASSIGNEE = "assignee";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE)
  private User assignee;

  public static final String SERIALIZED_NAME_ASSIGNEE_TEAM = "assignee_team";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE_TEAM)
  private Team assigneeTeam;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DEPENDENT_ISSUE = "dependent_issue";
  @SerializedName(SERIALIZED_NAME_DEPENDENT_ISSUE)
  private Issue dependentIssue;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private String htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_ISSUE_URL = "issue_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_URL)
  private String issueUrl;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private Label label;

  public static final String SERIALIZED_NAME_MILESTONE = "milestone";
  @SerializedName(SERIALIZED_NAME_MILESTONE)
  private Milestone milestone;

  public static final String SERIALIZED_NAME_NEW_REF = "new_ref";
  @SerializedName(SERIALIZED_NAME_NEW_REF)
  private String newRef;

  public static final String SERIALIZED_NAME_NEW_TITLE = "new_title";
  @SerializedName(SERIALIZED_NAME_NEW_TITLE)
  private String newTitle;

  public static final String SERIALIZED_NAME_OLD_MILESTONE = "old_milestone";
  @SerializedName(SERIALIZED_NAME_OLD_MILESTONE)
  private Milestone oldMilestone;

  public static final String SERIALIZED_NAME_OLD_PROJECT_ID = "old_project_id";
  @SerializedName(SERIALIZED_NAME_OLD_PROJECT_ID)
  private Long oldProjectId;

  public static final String SERIALIZED_NAME_OLD_REF = "old_ref";
  @SerializedName(SERIALIZED_NAME_OLD_REF)
  private String oldRef;

  public static final String SERIALIZED_NAME_OLD_TITLE = "old_title";
  @SerializedName(SERIALIZED_NAME_OLD_TITLE)
  private String oldTitle;

  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Long projectId;

  public static final String SERIALIZED_NAME_PULL_REQUEST_URL = "pull_request_url";
  @SerializedName(SERIALIZED_NAME_PULL_REQUEST_URL)
  private String pullRequestUrl;

  public static final String SERIALIZED_NAME_REF_ACTION = "ref_action";
  @SerializedName(SERIALIZED_NAME_REF_ACTION)
  private String refAction;

  public static final String SERIALIZED_NAME_REF_COMMENT = "ref_comment";
  @SerializedName(SERIALIZED_NAME_REF_COMMENT)
  private Comment refComment;

  public static final String SERIALIZED_NAME_REF_COMMIT_SHA = "ref_commit_sha";
  @SerializedName(SERIALIZED_NAME_REF_COMMIT_SHA)
  private String refCommitSha;

  public static final String SERIALIZED_NAME_REF_ISSUE = "ref_issue";
  @SerializedName(SERIALIZED_NAME_REF_ISSUE)
  private Issue refIssue;

  public static final String SERIALIZED_NAME_REMOVED_ASSIGNEE = "removed_assignee";
  @SerializedName(SERIALIZED_NAME_REMOVED_ASSIGNEE)
  private Boolean removedAssignee;

  public static final String SERIALIZED_NAME_RESOLVE_DOER = "resolve_doer";
  @SerializedName(SERIALIZED_NAME_RESOLVE_DOER)
  private User resolveDoer;

  public static final String SERIALIZED_NAME_REVIEW_ID = "review_id";
  @SerializedName(SERIALIZED_NAME_REVIEW_ID)
  private Long reviewId;

  public static final String SERIALIZED_NAME_TRACKED_TIME = "tracked_time";
  @SerializedName(SERIALIZED_NAME_TRACKED_TIME)
  private TrackedTime trackedTime;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public TimelineComment() {
  }

  public TimelineComment assignee(User assignee) {
    this.assignee = assignee;
    return this;
  }

  /**
   * Get assignee
   * @return assignee
   */
  @javax.annotation.Nullable
  public User getAssignee() {
    return assignee;
  }

  public void setAssignee(User assignee) {
    this.assignee = assignee;
  }


  public TimelineComment assigneeTeam(Team assigneeTeam) {
    this.assigneeTeam = assigneeTeam;
    return this;
  }

  /**
   * Get assigneeTeam
   * @return assigneeTeam
   */
  @javax.annotation.Nullable
  public Team getAssigneeTeam() {
    return assigneeTeam;
  }

  public void setAssigneeTeam(Team assigneeTeam) {
    this.assigneeTeam = assigneeTeam;
  }


  public TimelineComment body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public TimelineComment createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TimelineComment dependentIssue(Issue dependentIssue) {
    this.dependentIssue = dependentIssue;
    return this;
  }

  /**
   * Get dependentIssue
   * @return dependentIssue
   */
  @javax.annotation.Nullable
  public Issue getDependentIssue() {
    return dependentIssue;
  }

  public void setDependentIssue(Issue dependentIssue) {
    this.dependentIssue = dependentIssue;
  }


  public TimelineComment htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nullable
  public String getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public TimelineComment id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public TimelineComment issueUrl(String issueUrl) {
    this.issueUrl = issueUrl;
    return this;
  }

  /**
   * Get issueUrl
   * @return issueUrl
   */
  @javax.annotation.Nullable
  public String getIssueUrl() {
    return issueUrl;
  }

  public void setIssueUrl(String issueUrl) {
    this.issueUrl = issueUrl;
  }


  public TimelineComment label(Label label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public Label getLabel() {
    return label;
  }

  public void setLabel(Label label) {
    this.label = label;
  }


  public TimelineComment milestone(Milestone milestone) {
    this.milestone = milestone;
    return this;
  }

  /**
   * Get milestone
   * @return milestone
   */
  @javax.annotation.Nullable
  public Milestone getMilestone() {
    return milestone;
  }

  public void setMilestone(Milestone milestone) {
    this.milestone = milestone;
  }


  public TimelineComment newRef(String newRef) {
    this.newRef = newRef;
    return this;
  }

  /**
   * Get newRef
   * @return newRef
   */
  @javax.annotation.Nullable
  public String getNewRef() {
    return newRef;
  }

  public void setNewRef(String newRef) {
    this.newRef = newRef;
  }


  public TimelineComment newTitle(String newTitle) {
    this.newTitle = newTitle;
    return this;
  }

  /**
   * Get newTitle
   * @return newTitle
   */
  @javax.annotation.Nullable
  public String getNewTitle() {
    return newTitle;
  }

  public void setNewTitle(String newTitle) {
    this.newTitle = newTitle;
  }


  public TimelineComment oldMilestone(Milestone oldMilestone) {
    this.oldMilestone = oldMilestone;
    return this;
  }

  /**
   * Get oldMilestone
   * @return oldMilestone
   */
  @javax.annotation.Nullable
  public Milestone getOldMilestone() {
    return oldMilestone;
  }

  public void setOldMilestone(Milestone oldMilestone) {
    this.oldMilestone = oldMilestone;
  }


  public TimelineComment oldProjectId(Long oldProjectId) {
    this.oldProjectId = oldProjectId;
    return this;
  }

  /**
   * Get oldProjectId
   * @return oldProjectId
   */
  @javax.annotation.Nullable
  public Long getOldProjectId() {
    return oldProjectId;
  }

  public void setOldProjectId(Long oldProjectId) {
    this.oldProjectId = oldProjectId;
  }


  public TimelineComment oldRef(String oldRef) {
    this.oldRef = oldRef;
    return this;
  }

  /**
   * Get oldRef
   * @return oldRef
   */
  @javax.annotation.Nullable
  public String getOldRef() {
    return oldRef;
  }

  public void setOldRef(String oldRef) {
    this.oldRef = oldRef;
  }


  public TimelineComment oldTitle(String oldTitle) {
    this.oldTitle = oldTitle;
    return this;
  }

  /**
   * Get oldTitle
   * @return oldTitle
   */
  @javax.annotation.Nullable
  public String getOldTitle() {
    return oldTitle;
  }

  public void setOldTitle(String oldTitle) {
    this.oldTitle = oldTitle;
  }


  public TimelineComment projectId(Long projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * @return projectId
   */
  @javax.annotation.Nullable
  public Long getProjectId() {
    return projectId;
  }

  public void setProjectId(Long projectId) {
    this.projectId = projectId;
  }


  public TimelineComment pullRequestUrl(String pullRequestUrl) {
    this.pullRequestUrl = pullRequestUrl;
    return this;
  }

  /**
   * Get pullRequestUrl
   * @return pullRequestUrl
   */
  @javax.annotation.Nullable
  public String getPullRequestUrl() {
    return pullRequestUrl;
  }

  public void setPullRequestUrl(String pullRequestUrl) {
    this.pullRequestUrl = pullRequestUrl;
  }


  public TimelineComment refAction(String refAction) {
    this.refAction = refAction;
    return this;
  }

  /**
   * Get refAction
   * @return refAction
   */
  @javax.annotation.Nullable
  public String getRefAction() {
    return refAction;
  }

  public void setRefAction(String refAction) {
    this.refAction = refAction;
  }


  public TimelineComment refComment(Comment refComment) {
    this.refComment = refComment;
    return this;
  }

  /**
   * Get refComment
   * @return refComment
   */
  @javax.annotation.Nullable
  public Comment getRefComment() {
    return refComment;
  }

  public void setRefComment(Comment refComment) {
    this.refComment = refComment;
  }


  public TimelineComment refCommitSha(String refCommitSha) {
    this.refCommitSha = refCommitSha;
    return this;
  }

  /**
   * commit SHA where issue/PR was referenced
   * @return refCommitSha
   */
  @javax.annotation.Nullable
  public String getRefCommitSha() {
    return refCommitSha;
  }

  public void setRefCommitSha(String refCommitSha) {
    this.refCommitSha = refCommitSha;
  }


  public TimelineComment refIssue(Issue refIssue) {
    this.refIssue = refIssue;
    return this;
  }

  /**
   * Get refIssue
   * @return refIssue
   */
  @javax.annotation.Nullable
  public Issue getRefIssue() {
    return refIssue;
  }

  public void setRefIssue(Issue refIssue) {
    this.refIssue = refIssue;
  }


  public TimelineComment removedAssignee(Boolean removedAssignee) {
    this.removedAssignee = removedAssignee;
    return this;
  }

  /**
   * whether the assignees were removed or added
   * @return removedAssignee
   */
  @javax.annotation.Nullable
  public Boolean getRemovedAssignee() {
    return removedAssignee;
  }

  public void setRemovedAssignee(Boolean removedAssignee) {
    this.removedAssignee = removedAssignee;
  }


  public TimelineComment resolveDoer(User resolveDoer) {
    this.resolveDoer = resolveDoer;
    return this;
  }

  /**
   * Get resolveDoer
   * @return resolveDoer
   */
  @javax.annotation.Nullable
  public User getResolveDoer() {
    return resolveDoer;
  }

  public void setResolveDoer(User resolveDoer) {
    this.resolveDoer = resolveDoer;
  }


  public TimelineComment reviewId(Long reviewId) {
    this.reviewId = reviewId;
    return this;
  }

  /**
   * Get reviewId
   * @return reviewId
   */
  @javax.annotation.Nullable
  public Long getReviewId() {
    return reviewId;
  }

  public void setReviewId(Long reviewId) {
    this.reviewId = reviewId;
  }


  public TimelineComment trackedTime(TrackedTime trackedTime) {
    this.trackedTime = trackedTime;
    return this;
  }

  /**
   * Get trackedTime
   * @return trackedTime
   */
  @javax.annotation.Nullable
  public TrackedTime getTrackedTime() {
    return trackedTime;
  }

  public void setTrackedTime(TrackedTime trackedTime) {
    this.trackedTime = trackedTime;
  }


  public TimelineComment type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public TimelineComment updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public TimelineComment user(User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimelineComment timelineComment = (TimelineComment) o;
    return Objects.equals(this.assignee, timelineComment.assignee) &&
        Objects.equals(this.assigneeTeam, timelineComment.assigneeTeam) &&
        Objects.equals(this.body, timelineComment.body) &&
        Objects.equals(this.createdAt, timelineComment.createdAt) &&
        Objects.equals(this.dependentIssue, timelineComment.dependentIssue) &&
        Objects.equals(this.htmlUrl, timelineComment.htmlUrl) &&
        Objects.equals(this.id, timelineComment.id) &&
        Objects.equals(this.issueUrl, timelineComment.issueUrl) &&
        Objects.equals(this.label, timelineComment.label) &&
        Objects.equals(this.milestone, timelineComment.milestone) &&
        Objects.equals(this.newRef, timelineComment.newRef) &&
        Objects.equals(this.newTitle, timelineComment.newTitle) &&
        Objects.equals(this.oldMilestone, timelineComment.oldMilestone) &&
        Objects.equals(this.oldProjectId, timelineComment.oldProjectId) &&
        Objects.equals(this.oldRef, timelineComment.oldRef) &&
        Objects.equals(this.oldTitle, timelineComment.oldTitle) &&
        Objects.equals(this.projectId, timelineComment.projectId) &&
        Objects.equals(this.pullRequestUrl, timelineComment.pullRequestUrl) &&
        Objects.equals(this.refAction, timelineComment.refAction) &&
        Objects.equals(this.refComment, timelineComment.refComment) &&
        Objects.equals(this.refCommitSha, timelineComment.refCommitSha) &&
        Objects.equals(this.refIssue, timelineComment.refIssue) &&
        Objects.equals(this.removedAssignee, timelineComment.removedAssignee) &&
        Objects.equals(this.resolveDoer, timelineComment.resolveDoer) &&
        Objects.equals(this.reviewId, timelineComment.reviewId) &&
        Objects.equals(this.trackedTime, timelineComment.trackedTime) &&
        Objects.equals(this.type, timelineComment.type) &&
        Objects.equals(this.updatedAt, timelineComment.updatedAt) &&
        Objects.equals(this.user, timelineComment.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignee, assigneeTeam, body, createdAt, dependentIssue, htmlUrl, id, issueUrl, label, milestone, newRef, newTitle, oldMilestone, oldProjectId, oldRef, oldTitle, projectId, pullRequestUrl, refAction, refComment, refCommitSha, refIssue, removedAssignee, resolveDoer, reviewId, trackedTime, type, updatedAt, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimelineComment {\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    assigneeTeam: ").append(toIndentedString(assigneeTeam)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    dependentIssue: ").append(toIndentedString(dependentIssue)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issueUrl: ").append(toIndentedString(issueUrl)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    milestone: ").append(toIndentedString(milestone)).append("\n");
    sb.append("    newRef: ").append(toIndentedString(newRef)).append("\n");
    sb.append("    newTitle: ").append(toIndentedString(newTitle)).append("\n");
    sb.append("    oldMilestone: ").append(toIndentedString(oldMilestone)).append("\n");
    sb.append("    oldProjectId: ").append(toIndentedString(oldProjectId)).append("\n");
    sb.append("    oldRef: ").append(toIndentedString(oldRef)).append("\n");
    sb.append("    oldTitle: ").append(toIndentedString(oldTitle)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    pullRequestUrl: ").append(toIndentedString(pullRequestUrl)).append("\n");
    sb.append("    refAction: ").append(toIndentedString(refAction)).append("\n");
    sb.append("    refComment: ").append(toIndentedString(refComment)).append("\n");
    sb.append("    refCommitSha: ").append(toIndentedString(refCommitSha)).append("\n");
    sb.append("    refIssue: ").append(toIndentedString(refIssue)).append("\n");
    sb.append("    removedAssignee: ").append(toIndentedString(removedAssignee)).append("\n");
    sb.append("    resolveDoer: ").append(toIndentedString(resolveDoer)).append("\n");
    sb.append("    reviewId: ").append(toIndentedString(reviewId)).append("\n");
    sb.append("    trackedTime: ").append(toIndentedString(trackedTime)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignee");
    openapiFields.add("assignee_team");
    openapiFields.add("body");
    openapiFields.add("created_at");
    openapiFields.add("dependent_issue");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("issue_url");
    openapiFields.add("label");
    openapiFields.add("milestone");
    openapiFields.add("new_ref");
    openapiFields.add("new_title");
    openapiFields.add("old_milestone");
    openapiFields.add("old_project_id");
    openapiFields.add("old_ref");
    openapiFields.add("old_title");
    openapiFields.add("project_id");
    openapiFields.add("pull_request_url");
    openapiFields.add("ref_action");
    openapiFields.add("ref_comment");
    openapiFields.add("ref_commit_sha");
    openapiFields.add("ref_issue");
    openapiFields.add("removed_assignee");
    openapiFields.add("resolve_doer");
    openapiFields.add("review_id");
    openapiFields.add("tracked_time");
    openapiFields.add("type");
    openapiFields.add("updated_at");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimelineComment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimelineComment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimelineComment is not found in the empty JSON string", TimelineComment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimelineComment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimelineComment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `assignee`
      if (jsonObj.get("assignee") != null && !jsonObj.get("assignee").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("assignee"));
      }
      // validate the optional field `assignee_team`
      if (jsonObj.get("assignee_team") != null && !jsonObj.get("assignee_team").isJsonNull()) {
        Team.validateJsonElement(jsonObj.get("assignee_team"));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      // validate the optional field `dependent_issue`
      if (jsonObj.get("dependent_issue") != null && !jsonObj.get("dependent_issue").isJsonNull()) {
        Issue.validateJsonElement(jsonObj.get("dependent_issue"));
      }
      if ((jsonObj.get("html_url") != null && !jsonObj.get("html_url").isJsonNull()) && !jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if ((jsonObj.get("issue_url") != null && !jsonObj.get("issue_url").isJsonNull()) && !jsonObj.get("issue_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_url").toString()));
      }
      // validate the optional field `label`
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) {
        Label.validateJsonElement(jsonObj.get("label"));
      }
      // validate the optional field `milestone`
      if (jsonObj.get("milestone") != null && !jsonObj.get("milestone").isJsonNull()) {
        Milestone.validateJsonElement(jsonObj.get("milestone"));
      }
      if ((jsonObj.get("new_ref") != null && !jsonObj.get("new_ref").isJsonNull()) && !jsonObj.get("new_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_ref").toString()));
      }
      if ((jsonObj.get("new_title") != null && !jsonObj.get("new_title").isJsonNull()) && !jsonObj.get("new_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_title").toString()));
      }
      // validate the optional field `old_milestone`
      if (jsonObj.get("old_milestone") != null && !jsonObj.get("old_milestone").isJsonNull()) {
        Milestone.validateJsonElement(jsonObj.get("old_milestone"));
      }
      if ((jsonObj.get("old_ref") != null && !jsonObj.get("old_ref").isJsonNull()) && !jsonObj.get("old_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `old_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("old_ref").toString()));
      }
      if ((jsonObj.get("old_title") != null && !jsonObj.get("old_title").isJsonNull()) && !jsonObj.get("old_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `old_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("old_title").toString()));
      }
      if ((jsonObj.get("pull_request_url") != null && !jsonObj.get("pull_request_url").isJsonNull()) && !jsonObj.get("pull_request_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pull_request_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pull_request_url").toString()));
      }
      if ((jsonObj.get("ref_action") != null && !jsonObj.get("ref_action").isJsonNull()) && !jsonObj.get("ref_action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref_action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref_action").toString()));
      }
      // validate the optional field `ref_comment`
      if (jsonObj.get("ref_comment") != null && !jsonObj.get("ref_comment").isJsonNull()) {
        Comment.validateJsonElement(jsonObj.get("ref_comment"));
      }
      if ((jsonObj.get("ref_commit_sha") != null && !jsonObj.get("ref_commit_sha").isJsonNull()) && !jsonObj.get("ref_commit_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref_commit_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref_commit_sha").toString()));
      }
      // validate the optional field `ref_issue`
      if (jsonObj.get("ref_issue") != null && !jsonObj.get("ref_issue").isJsonNull()) {
        Issue.validateJsonElement(jsonObj.get("ref_issue"));
      }
      // validate the optional field `resolve_doer`
      if (jsonObj.get("resolve_doer") != null && !jsonObj.get("resolve_doer").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("resolve_doer"));
      }
      // validate the optional field `tracked_time`
      if (jsonObj.get("tracked_time") != null && !jsonObj.get("tracked_time").isJsonNull()) {
        TrackedTime.validateJsonElement(jsonObj.get("tracked_time"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimelineComment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimelineComment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimelineComment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimelineComment.class));

       return (TypeAdapter<T>) new TypeAdapter<TimelineComment>() {
           @Override
           public void write(JsonWriter out, TimelineComment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimelineComment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimelineComment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimelineComment
   * @throws IOException if the JSON string is invalid with respect to TimelineComment
   */
  public static TimelineComment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimelineComment.class);
  }

  /**
   * Convert an instance of TimelineComment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

