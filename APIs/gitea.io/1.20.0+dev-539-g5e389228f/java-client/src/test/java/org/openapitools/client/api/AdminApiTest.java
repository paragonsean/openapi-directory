/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateHookOption;
import org.openapitools.client.model.CreateKeyOption;
import org.openapitools.client.model.CreateOrgOption;
import org.openapitools.client.model.CreateRepoOption;
import org.openapitools.client.model.CreateUserOption;
import org.openapitools.client.model.Cron;
import org.openapitools.client.model.EditHookOption;
import org.openapitools.client.model.EditUserOption;
import org.openapitools.client.model.Email;
import org.openapitools.client.model.Hook;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.PublicKey;
import org.openapitools.client.model.RenameUserOption;
import org.openapitools.client.model.Repository;
import org.openapitools.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminApi
 */
@Disabled
public class AdminApiTest {

    private final AdminApi api = new AdminApi();

    /**
     * Adopt unadopted files as a repository
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminAdoptRepositoryTest() throws ApiException {
        String owner = null;
        String repo = null;
        api.adminAdoptRepository(owner, repo);
        // TODO: test validations
    }

    /**
     * Create a hook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminCreateHookTest() throws ApiException {
        CreateHookOption createHookOption = null;
        Hook response = api.adminCreateHook(createHookOption);
        // TODO: test validations
    }

    /**
     * Create an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminCreateOrgTest() throws ApiException {
        String username = null;
        CreateOrgOption createOrgOption = null;
        Organization response = api.adminCreateOrg(username, createOrgOption);
        // TODO: test validations
    }

    /**
     * Add a public key on behalf of a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminCreatePublicKeyTest() throws ApiException {
        String username = null;
        CreateKeyOption createKeyOption = null;
        PublicKey response = api.adminCreatePublicKey(username, createKeyOption);
        // TODO: test validations
    }

    /**
     * Create a repository on behalf of a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminCreateRepoTest() throws ApiException {
        String username = null;
        CreateRepoOption createRepoOption = null;
        Repository response = api.adminCreateRepo(username, createRepoOption);
        // TODO: test validations
    }

    /**
     * Create a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminCreateUserTest() throws ApiException {
        CreateUserOption createUserOption = null;
        User response = api.adminCreateUser(createUserOption);
        // TODO: test validations
    }

    /**
     * List cron tasks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminCronListTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        List<Cron> response = api.adminCronList(page, limit);
        // TODO: test validations
    }

    /**
     * Run cron task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminCronRunTest() throws ApiException {
        String task = null;
        api.adminCronRun(task);
        // TODO: test validations
    }

    /**
     * Delete a hook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminDeleteHookTest() throws ApiException {
        Long id = null;
        api.adminDeleteHook(id);
        // TODO: test validations
    }

    /**
     * Delete unadopted files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminDeleteUnadoptedRepositoryTest() throws ApiException {
        String owner = null;
        String repo = null;
        api.adminDeleteUnadoptedRepository(owner, repo);
        // TODO: test validations
    }

    /**
     * Delete a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminDeleteUserTest() throws ApiException {
        String username = null;
        Boolean purge = null;
        api.adminDeleteUser(username, purge);
        // TODO: test validations
    }

    /**
     * Delete a user&#39;s public key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminDeleteUserPublicKeyTest() throws ApiException {
        String username = null;
        Long id = null;
        api.adminDeleteUserPublicKey(username, id);
        // TODO: test validations
    }

    /**
     * Update a hook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminEditHookTest() throws ApiException {
        Long id = null;
        EditHookOption editHookOption = null;
        Hook response = api.adminEditHook(id, editHookOption);
        // TODO: test validations
    }

    /**
     * Edit an existing user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminEditUserTest() throws ApiException {
        String username = null;
        EditUserOption editUserOption = null;
        User response = api.adminEditUser(username, editUserOption);
        // TODO: test validations
    }

    /**
     * List all emails
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminGetAllEmailsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        List<Email> response = api.adminGetAllEmails(page, limit);
        // TODO: test validations
    }

    /**
     * List all organizations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminGetAllOrgsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        List<Organization> response = api.adminGetAllOrgs(page, limit);
        // TODO: test validations
    }

    /**
     * Get a hook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminGetHookTest() throws ApiException {
        Long id = null;
        Hook response = api.adminGetHook(id);
        // TODO: test validations
    }

    /**
     * List system&#39;s webhooks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminListHooksTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        List<Hook> response = api.adminListHooks(page, limit);
        // TODO: test validations
    }

    /**
     * Rename a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminRenameUserTest() throws ApiException {
        String username = null;
        RenameUserOption renameUserOption = null;
        api.adminRenameUser(username, renameUserOption);
        // TODO: test validations
    }

    /**
     * Search all emails
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminSearchEmailsTest() throws ApiException {
        String q = null;
        Integer page = null;
        Integer limit = null;
        List<Email> response = api.adminSearchEmails(q, page, limit);
        // TODO: test validations
    }

    /**
     * Search users according filter conditions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminSearchUsersTest() throws ApiException {
        Long sourceId = null;
        String loginName = null;
        Integer page = null;
        Integer limit = null;
        List<User> response = api.adminSearchUsers(sourceId, loginName, page, limit);
        // TODO: test validations
    }

    /**
     * List unadopted repositories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUnadoptedListTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String pattern = null;
        List<String> response = api.adminUnadoptedList(page, limit, pattern);
        // TODO: test validations
    }

}
