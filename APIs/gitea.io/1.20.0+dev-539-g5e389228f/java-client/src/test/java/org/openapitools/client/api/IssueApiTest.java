/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddTimeOption;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.CreateIssueCommentOption;
import org.openapitools.client.model.CreateIssueOption;
import org.openapitools.client.model.CreateLabelOption;
import org.openapitools.client.model.CreateMilestoneOption;
import org.openapitools.client.model.EditAttachmentOptions;
import org.openapitools.client.model.EditDeadlineOption;
import org.openapitools.client.model.EditIssueCommentOption;
import org.openapitools.client.model.EditIssueOption;
import org.openapitools.client.model.EditLabelOption;
import org.openapitools.client.model.EditMilestoneOption;
import org.openapitools.client.model.EditReactionOption;
import java.io.File;
import org.openapitools.client.model.Issue;
import org.openapitools.client.model.IssueDeadline;
import org.openapitools.client.model.IssueLabelsOption;
import org.openapitools.client.model.IssueMeta;
import org.openapitools.client.model.Label;
import org.openapitools.client.model.Milestone;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Reaction;
import org.openapitools.client.model.TimelineComment;
import org.openapitools.client.model.TrackedTime;
import org.openapitools.client.model.User;
import org.openapitools.client.model.WatchInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IssueApi
 */
@Disabled
public class IssueApiTest {

    private final IssueApi api = new IssueApi();

    /**
     * Add a label to an issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueAddLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        IssueLabelsOption issueLabelsOption = null;
        List<Label> response = api.issueAddLabel(owner, repo, index, issueLabelsOption);
        // TODO: test validations
    }

    /**
     * Subscribe user to issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueAddSubscriptionTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        String user = null;
        api.issueAddSubscription(owner, repo, index, user);
        // TODO: test validations
    }

    /**
     * Add tracked time to a issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueAddTimeTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        AddTimeOption addTimeOption = null;
        TrackedTime response = api.issueAddTime(owner, repo, index, addTimeOption);
        // TODO: test validations
    }

    /**
     * Check if user is subscribed to an issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueCheckSubscriptionTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        WatchInfo response = api.issueCheckSubscription(owner, repo, index);
        // TODO: test validations
    }

    /**
     * Remove all labels from an issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueClearLabelsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        api.issueClearLabels(owner, repo, index);
        // TODO: test validations
    }

    /**
     * Add a comment to an issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueCreateCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        CreateIssueCommentOption createIssueCommentOption = null;
        Comment response = api.issueCreateComment(owner, repo, index, createIssueCommentOption);
        // TODO: test validations
    }

    /**
     * Create an issue. If using deadline only the date will be taken into account, and time of day ignored.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueCreateIssueTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateIssueOption createIssueOption = null;
        Issue response = api.issueCreateIssue(owner, repo, createIssueOption);
        // TODO: test validations
    }

    /**
     * Create an issue attachment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueCreateIssueAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        File attachment = null;
        String name = null;
        Attachment response = api.issueCreateIssueAttachment(owner, repo, index, attachment, name);
        // TODO: test validations
    }

    /**
     * Block the issue given in the body by the issue in path
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueCreateIssueBlockingTest() throws ApiException {
        String owner = null;
        String repo = null;
        String index = null;
        IssueMeta issueMeta = null;
        Issue response = api.issueCreateIssueBlocking(owner, repo, index, issueMeta);
        // TODO: test validations
    }

    /**
     * Create a comment attachment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueCreateIssueCommentAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        File attachment = null;
        String name = null;
        Attachment response = api.issueCreateIssueCommentAttachment(owner, repo, id, attachment, name);
        // TODO: test validations
    }

    /**
     * Make the issue in the url depend on the issue in the form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueCreateIssueDependenciesTest() throws ApiException {
        String owner = null;
        String repo = null;
        String index = null;
        IssueMeta issueMeta = null;
        Issue response = api.issueCreateIssueDependencies(owner, repo, index, issueMeta);
        // TODO: test validations
    }

    /**
     * Create a label
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueCreateLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateLabelOption createLabelOption = null;
        Label response = api.issueCreateLabel(owner, repo, createLabelOption);
        // TODO: test validations
    }

    /**
     * Create a milestone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueCreateMilestoneTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateMilestoneOption createMilestoneOption = null;
        Milestone response = api.issueCreateMilestone(owner, repo, createMilestoneOption);
        // TODO: test validations
    }

    /**
     * Delete an issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueDeleteTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        api.issueDelete(owner, repo, index);
        // TODO: test validations
    }

    /**
     * Delete a comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueDeleteCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        api.issueDeleteComment(owner, repo, id);
        // TODO: test validations
    }

    /**
     * Delete a comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueDeleteCommentDeprecatedTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer index = null;
        Long id = null;
        api.issueDeleteCommentDeprecated(owner, repo, index, id);
        // TODO: test validations
    }

    /**
     * Remove a reaction from a comment of an issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueDeleteCommentReactionTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        EditReactionOption editReactionOption = null;
        api.issueDeleteCommentReaction(owner, repo, id, editReactionOption);
        // TODO: test validations
    }

    /**
     * Delete an issue attachment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueDeleteIssueAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long attachmentId = null;
        api.issueDeleteIssueAttachment(owner, repo, index, attachmentId);
        // TODO: test validations
    }

    /**
     * Delete a comment attachment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueDeleteIssueCommentAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Long attachmentId = null;
        api.issueDeleteIssueCommentAttachment(owner, repo, id, attachmentId);
        // TODO: test validations
    }

    /**
     * Remove a reaction from an issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueDeleteIssueReactionTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        EditReactionOption editReactionOption = null;
        api.issueDeleteIssueReaction(owner, repo, index, editReactionOption);
        // TODO: test validations
    }

    /**
     * Delete a label
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueDeleteLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        api.issueDeleteLabel(owner, repo, id);
        // TODO: test validations
    }

    /**
     * Delete a milestone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueDeleteMilestoneTest() throws ApiException {
        String owner = null;
        String repo = null;
        String id = null;
        api.issueDeleteMilestone(owner, repo, id);
        // TODO: test validations
    }

    /**
     * Delete an issue&#39;s existing stopwatch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueDeleteStopWatchTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        api.issueDeleteStopWatch(owner, repo, index);
        // TODO: test validations
    }

    /**
     * Unsubscribe user from issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueDeleteSubscriptionTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        String user = null;
        api.issueDeleteSubscription(owner, repo, index, user);
        // TODO: test validations
    }

    /**
     * Delete specific tracked time
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueDeleteTimeTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long id = null;
        api.issueDeleteTime(owner, repo, index, id);
        // TODO: test validations
    }

    /**
     * Edit a comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueEditCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        EditIssueCommentOption editIssueCommentOption = null;
        Comment response = api.issueEditComment(owner, repo, id, editIssueCommentOption);
        // TODO: test validations
    }

    /**
     * Edit a comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueEditCommentDeprecatedTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer index = null;
        Long id = null;
        EditIssueCommentOption editIssueCommentOption = null;
        Comment response = api.issueEditCommentDeprecated(owner, repo, index, id, editIssueCommentOption);
        // TODO: test validations
    }

    /**
     * Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueEditIssueTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        EditIssueOption editIssueOption = null;
        Issue response = api.issueEditIssue(owner, repo, index, editIssueOption);
        // TODO: test validations
    }

    /**
     * Edit an issue attachment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueEditIssueAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long attachmentId = null;
        EditAttachmentOptions editAttachmentOptions = null;
        Attachment response = api.issueEditIssueAttachment(owner, repo, index, attachmentId, editAttachmentOptions);
        // TODO: test validations
    }

    /**
     * Edit a comment attachment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueEditIssueCommentAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Long attachmentId = null;
        EditAttachmentOptions editAttachmentOptions = null;
        Attachment response = api.issueEditIssueCommentAttachment(owner, repo, id, attachmentId, editAttachmentOptions);
        // TODO: test validations
    }

    /**
     * Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueEditIssueDeadlineTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        EditDeadlineOption editDeadlineOption = null;
        IssueDeadline response = api.issueEditIssueDeadline(owner, repo, index, editDeadlineOption);
        // TODO: test validations
    }

    /**
     * Update a label
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueEditLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        EditLabelOption editLabelOption = null;
        Label response = api.issueEditLabel(owner, repo, id, editLabelOption);
        // TODO: test validations
    }

    /**
     * Update a milestone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueEditMilestoneTest() throws ApiException {
        String owner = null;
        String repo = null;
        String id = null;
        EditMilestoneOption editMilestoneOption = null;
        Milestone response = api.issueEditMilestone(owner, repo, id, editMilestoneOption);
        // TODO: test validations
    }

    /**
     * Get a comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueGetCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Comment response = api.issueGetComment(owner, repo, id);
        // TODO: test validations
    }

    /**
     * Get a list of reactions from a comment of an issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueGetCommentReactionsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        List<Reaction> response = api.issueGetCommentReactions(owner, repo, id);
        // TODO: test validations
    }

    /**
     * List all comments on an issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueGetCommentsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        List<Comment> response = api.issueGetComments(owner, repo, index, since, before);
        // TODO: test validations
    }

    /**
     * List all comments and events on an issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueGetCommentsAndTimelineTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        OffsetDateTime since = null;
        Integer page = null;
        Integer limit = null;
        OffsetDateTime before = null;
        List<TimelineComment> response = api.issueGetCommentsAndTimeline(owner, repo, index, since, page, limit, before);
        // TODO: test validations
    }

    /**
     * Get an issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueGetIssueTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Issue response = api.issueGetIssue(owner, repo, index);
        // TODO: test validations
    }

    /**
     * Get an issue attachment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueGetIssueAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long attachmentId = null;
        Attachment response = api.issueGetIssueAttachment(owner, repo, index, attachmentId);
        // TODO: test validations
    }

    /**
     * Get a comment attachment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueGetIssueCommentAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Long attachmentId = null;
        Attachment response = api.issueGetIssueCommentAttachment(owner, repo, id, attachmentId);
        // TODO: test validations
    }

    /**
     * Get a list reactions of an issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueGetIssueReactionsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Integer page = null;
        Integer limit = null;
        List<Reaction> response = api.issueGetIssueReactions(owner, repo, index, page, limit);
        // TODO: test validations
    }

    /**
     * Get a single label
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueGetLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Label response = api.issueGetLabel(owner, repo, id);
        // TODO: test validations
    }

    /**
     * Get an issue&#39;s labels
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueGetLabelsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        List<Label> response = api.issueGetLabels(owner, repo, index);
        // TODO: test validations
    }

    /**
     * Get a milestone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueGetMilestoneTest() throws ApiException {
        String owner = null;
        String repo = null;
        String id = null;
        Milestone response = api.issueGetMilestone(owner, repo, id);
        // TODO: test validations
    }

    /**
     * Get all of a repository&#39;s opened milestones
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueGetMilestonesListTest() throws ApiException {
        String owner = null;
        String repo = null;
        String state = null;
        String name = null;
        Integer page = null;
        Integer limit = null;
        List<Milestone> response = api.issueGetMilestonesList(owner, repo, state, name, page, limit);
        // TODO: test validations
    }

    /**
     * List all comments in a repository
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueGetRepoCommentsTest() throws ApiException {
        String owner = null;
        String repo = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        Integer page = null;
        Integer limit = null;
        List<Comment> response = api.issueGetRepoComments(owner, repo, since, before, page, limit);
        // TODO: test validations
    }

    /**
     * List issues that are blocked by this issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueListBlocksTest() throws ApiException {
        String owner = null;
        String repo = null;
        String index = null;
        Integer page = null;
        Integer limit = null;
        List<Issue> response = api.issueListBlocks(owner, repo, index, page, limit);
        // TODO: test validations
    }

    /**
     * List issue&#39;s attachments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueListIssueAttachmentsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        List<Attachment> response = api.issueListIssueAttachments(owner, repo, index);
        // TODO: test validations
    }

    /**
     * List comment&#39;s attachments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueListIssueCommentAttachmentsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        List<Attachment> response = api.issueListIssueCommentAttachments(owner, repo, id);
        // TODO: test validations
    }

    /**
     * List an issue&#39;s dependencies, i.e all issues that block this issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueListIssueDependenciesTest() throws ApiException {
        String owner = null;
        String repo = null;
        String index = null;
        Integer page = null;
        Integer limit = null;
        List<Issue> response = api.issueListIssueDependencies(owner, repo, index, page, limit);
        // TODO: test validations
    }

    /**
     * List a repository&#39;s issues
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueListIssuesTest() throws ApiException {
        String owner = null;
        String repo = null;
        String state = null;
        String labels = null;
        String q = null;
        String type = null;
        String milestones = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        String createdBy = null;
        String assignedBy = null;
        String mentionedBy = null;
        Integer page = null;
        Integer limit = null;
        List<Issue> response = api.issueListIssues(owner, repo, state, labels, q, type, milestones, since, before, createdBy, assignedBy, mentionedBy, page, limit);
        // TODO: test validations
    }

    /**
     * Get all of a repository&#39;s labels
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueListLabelsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer page = null;
        Integer limit = null;
        List<Label> response = api.issueListLabels(owner, repo, page, limit);
        // TODO: test validations
    }

    /**
     * Add a reaction to a comment of an issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuePostCommentReactionTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        EditReactionOption editReactionOption = null;
        Reaction response = api.issuePostCommentReaction(owner, repo, id, editReactionOption);
        // TODO: test validations
    }

    /**
     * Add a reaction to an issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuePostIssueReactionTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        EditReactionOption editReactionOption = null;
        Reaction response = api.issuePostIssueReaction(owner, repo, index, editReactionOption);
        // TODO: test validations
    }

    /**
     * Unblock the issue given in the body by the issue in path
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueRemoveIssueBlockingTest() throws ApiException {
        String owner = null;
        String repo = null;
        String index = null;
        IssueMeta issueMeta = null;
        Issue response = api.issueRemoveIssueBlocking(owner, repo, index, issueMeta);
        // TODO: test validations
    }

    /**
     * Remove an issue dependency
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueRemoveIssueDependenciesTest() throws ApiException {
        String owner = null;
        String repo = null;
        String index = null;
        IssueMeta issueMeta = null;
        Issue response = api.issueRemoveIssueDependencies(owner, repo, index, issueMeta);
        // TODO: test validations
    }

    /**
     * Remove a label from an issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueRemoveLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long id = null;
        api.issueRemoveLabel(owner, repo, index, id);
        // TODO: test validations
    }

    /**
     * Replace an issue&#39;s labels
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueReplaceLabelsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        IssueLabelsOption issueLabelsOption = null;
        List<Label> response = api.issueReplaceLabels(owner, repo, index, issueLabelsOption);
        // TODO: test validations
    }

    /**
     * Reset a tracked time of an issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueResetTimeTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        api.issueResetTime(owner, repo, index);
        // TODO: test validations
    }

    /**
     * Search for issues across the repositories that the user has access to
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueSearchIssuesTest() throws ApiException {
        String state = null;
        String labels = null;
        String milestones = null;
        String q = null;
        Long priorityRepoId = null;
        String type = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        Boolean assigned = null;
        Boolean created = null;
        Boolean mentioned = null;
        Boolean reviewRequested = null;
        Boolean reviewed = null;
        String owner = null;
        String team = null;
        Integer page = null;
        Integer limit = null;
        List<Issue> response = api.issueSearchIssues(state, labels, milestones, q, priorityRepoId, type, since, before, assigned, created, mentioned, reviewRequested, reviewed, owner, team, page, limit);
        // TODO: test validations
    }

    /**
     * Start stopwatch on an issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueStartStopWatchTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        api.issueStartStopWatch(owner, repo, index);
        // TODO: test validations
    }

    /**
     * Stop an issue&#39;s existing stopwatch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueStopStopWatchTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        api.issueStopStopWatch(owner, repo, index);
        // TODO: test validations
    }

    /**
     * Get users who subscribed on an issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueSubscriptionsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Integer page = null;
        Integer limit = null;
        List<User> response = api.issueSubscriptions(owner, repo, index, page, limit);
        // TODO: test validations
    }

    /**
     * List an issue&#39;s tracked times
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueTrackedTimesTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        String user = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        Integer page = null;
        Integer limit = null;
        List<TrackedTime> response = api.issueTrackedTimes(owner, repo, index, user, since, before, page, limit);
        // TODO: test validations
    }

}
