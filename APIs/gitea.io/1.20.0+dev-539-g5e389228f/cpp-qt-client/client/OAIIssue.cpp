/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssue::OAIIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssue::OAIIssue() {
    this->initializeModel();
}

OAIIssue::~OAIIssue() {}

void OAIIssue::initializeModel() {

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_assignees_isSet = false;
    m_assignees_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_closed_at_isSet = false;
    m_closed_at_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_locked_isSet = false;
    m_is_locked_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_milestone_isSet = false;
    m_milestone_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_original_author_isSet = false;
    m_original_author_isValid = false;

    m_original_author_id_isSet = false;
    m_original_author_id_isValid = false;

    m_pull_request_isSet = false;
    m_pull_request_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIIssue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssue::fromJsonObject(QJsonObject json) {

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_assignees_isValid = ::OpenAPI::fromJsonValue(m_assignees, json[QString("assignees")]);
    m_assignees_isSet = !json[QString("assignees")].isNull() && m_assignees_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_closed_at_isValid = ::OpenAPI::fromJsonValue(m_closed_at, json[QString("closed_at")]);
    m_closed_at_isSet = !json[QString("closed_at")].isNull() && m_closed_at_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("due_date")]);
    m_due_date_isSet = !json[QString("due_date")].isNull() && m_due_date_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_locked_isValid = ::OpenAPI::fromJsonValue(m_is_locked, json[QString("is_locked")]);
    m_is_locked_isSet = !json[QString("is_locked")].isNull() && m_is_locked_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_milestone_isValid = ::OpenAPI::fromJsonValue(m_milestone, json[QString("milestone")]);
    m_milestone_isSet = !json[QString("milestone")].isNull() && m_milestone_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_original_author_isValid = ::OpenAPI::fromJsonValue(m_original_author, json[QString("original_author")]);
    m_original_author_isSet = !json[QString("original_author")].isNull() && m_original_author_isValid;

    m_original_author_id_isValid = ::OpenAPI::fromJsonValue(m_original_author_id, json[QString("original_author_id")]);
    m_original_author_id_isSet = !json[QString("original_author_id")].isNull() && m_original_author_id_isValid;

    m_pull_request_isValid = ::OpenAPI::fromJsonValue(m_pull_request, json[QString("pull_request")]);
    m_pull_request_isSet = !json[QString("pull_request")].isNull() && m_pull_request_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIIssue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssue::asJsonObject() const {
    QJsonObject obj;
    if (m_assets.size() > 0) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_assignee.isSet()) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_assignees.size() > 0) {
        obj.insert(QString("assignees"), ::OpenAPI::toJsonValue(m_assignees));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_closed_at_isSet) {
        obj.insert(QString("closed_at"), ::OpenAPI::toJsonValue(m_closed_at));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("due_date"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_locked_isSet) {
        obj.insert(QString("is_locked"), ::OpenAPI::toJsonValue(m_is_locked));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_milestone.isSet()) {
        obj.insert(QString("milestone"), ::OpenAPI::toJsonValue(m_milestone));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_original_author_isSet) {
        obj.insert(QString("original_author"), ::OpenAPI::toJsonValue(m_original_author));
    }
    if (m_original_author_id_isSet) {
        obj.insert(QString("original_author_id"), ::OpenAPI::toJsonValue(m_original_author_id));
    }
    if (m_pull_request.isSet()) {
        obj.insert(QString("pull_request"), ::OpenAPI::toJsonValue(m_pull_request));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<OAIAttachment> OAIIssue::getAssets() const {
    return m_assets;
}
void OAIIssue::setAssets(const QList<OAIAttachment> &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIIssue::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIIssue::is_assets_Valid() const{
    return m_assets_isValid;
}

OAIUser OAIIssue::getAssignee() const {
    return m_assignee;
}
void OAIIssue::setAssignee(const OAIUser &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAIIssue::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAIIssue::is_assignee_Valid() const{
    return m_assignee_isValid;
}

QList<OAIUser> OAIIssue::getAssignees() const {
    return m_assignees;
}
void OAIIssue::setAssignees(const QList<OAIUser> &assignees) {
    m_assignees = assignees;
    m_assignees_isSet = true;
}

bool OAIIssue::is_assignees_Set() const{
    return m_assignees_isSet;
}

bool OAIIssue::is_assignees_Valid() const{
    return m_assignees_isValid;
}

QString OAIIssue::getBody() const {
    return m_body;
}
void OAIIssue::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIIssue::is_body_Set() const{
    return m_body_isSet;
}

bool OAIIssue::is_body_Valid() const{
    return m_body_isValid;
}

QDateTime OAIIssue::getClosedAt() const {
    return m_closed_at;
}
void OAIIssue::setClosedAt(const QDateTime &closed_at) {
    m_closed_at = closed_at;
    m_closed_at_isSet = true;
}

bool OAIIssue::is_closed_at_Set() const{
    return m_closed_at_isSet;
}

bool OAIIssue::is_closed_at_Valid() const{
    return m_closed_at_isValid;
}

qint64 OAIIssue::getComments() const {
    return m_comments;
}
void OAIIssue::setComments(const qint64 &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIIssue::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIIssue::is_comments_Valid() const{
    return m_comments_isValid;
}

QDateTime OAIIssue::getCreatedAt() const {
    return m_created_at;
}
void OAIIssue::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIIssue::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIIssue::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIIssue::getDueDate() const {
    return m_due_date;
}
void OAIIssue::setDueDate(const QDateTime &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIIssue::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIIssue::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAIIssue::getHtmlUrl() const {
    return m_html_url;
}
void OAIIssue::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIIssue::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIIssue::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint64 OAIIssue::getId() const {
    return m_id;
}
void OAIIssue::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIssue::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIssue::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIIssue::isIsLocked() const {
    return m_is_locked;
}
void OAIIssue::setIsLocked(const bool &is_locked) {
    m_is_locked = is_locked;
    m_is_locked_isSet = true;
}

bool OAIIssue::is_is_locked_Set() const{
    return m_is_locked_isSet;
}

bool OAIIssue::is_is_locked_Valid() const{
    return m_is_locked_isValid;
}

QList<OAILabel> OAIIssue::getLabels() const {
    return m_labels;
}
void OAIIssue::setLabels(const QList<OAILabel> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIIssue::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIIssue::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIMilestone OAIIssue::getMilestone() const {
    return m_milestone;
}
void OAIIssue::setMilestone(const OAIMilestone &milestone) {
    m_milestone = milestone;
    m_milestone_isSet = true;
}

bool OAIIssue::is_milestone_Set() const{
    return m_milestone_isSet;
}

bool OAIIssue::is_milestone_Valid() const{
    return m_milestone_isValid;
}

qint64 OAIIssue::getNumber() const {
    return m_number;
}
void OAIIssue::setNumber(const qint64 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIIssue::is_number_Set() const{
    return m_number_isSet;
}

bool OAIIssue::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIIssue::getOriginalAuthor() const {
    return m_original_author;
}
void OAIIssue::setOriginalAuthor(const QString &original_author) {
    m_original_author = original_author;
    m_original_author_isSet = true;
}

bool OAIIssue::is_original_author_Set() const{
    return m_original_author_isSet;
}

bool OAIIssue::is_original_author_Valid() const{
    return m_original_author_isValid;
}

qint64 OAIIssue::getOriginalAuthorId() const {
    return m_original_author_id;
}
void OAIIssue::setOriginalAuthorId(const qint64 &original_author_id) {
    m_original_author_id = original_author_id;
    m_original_author_id_isSet = true;
}

bool OAIIssue::is_original_author_id_Set() const{
    return m_original_author_id_isSet;
}

bool OAIIssue::is_original_author_id_Valid() const{
    return m_original_author_id_isValid;
}

OAIPullRequestMeta OAIIssue::getPullRequest() const {
    return m_pull_request;
}
void OAIIssue::setPullRequest(const OAIPullRequestMeta &pull_request) {
    m_pull_request = pull_request;
    m_pull_request_isSet = true;
}

bool OAIIssue::is_pull_request_Set() const{
    return m_pull_request_isSet;
}

bool OAIIssue::is_pull_request_Valid() const{
    return m_pull_request_isValid;
}

QString OAIIssue::getRef() const {
    return m_ref;
}
void OAIIssue::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAIIssue::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAIIssue::is_ref_Valid() const{
    return m_ref_isValid;
}

OAIRepositoryMeta OAIIssue::getRepository() const {
    return m_repository;
}
void OAIIssue::setRepository(const OAIRepositoryMeta &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIIssue::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIIssue::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAIIssue::getState() const {
    return m_state;
}
void OAIIssue::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIIssue::is_state_Set() const{
    return m_state_isSet;
}

bool OAIIssue::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIIssue::getTitle() const {
    return m_title;
}
void OAIIssue::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIIssue::is_title_Set() const{
    return m_title_isSet;
}

bool OAIIssue::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIIssue::getUpdatedAt() const {
    return m_updated_at;
}
void OAIIssue::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIIssue::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIIssue::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIIssue::getUrl() const {
    return m_url;
}
void OAIIssue::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIIssue::is_url_Set() const{
    return m_url_isSet;
}

bool OAIIssue::is_url_Valid() const{
    return m_url_isValid;
}

OAIUser OAIIssue::getUser() const {
    return m_user;
}
void OAIIssue::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIIssue::is_user_Set() const{
    return m_user_isSet;
}

bool OAIIssue::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIIssue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_author_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
