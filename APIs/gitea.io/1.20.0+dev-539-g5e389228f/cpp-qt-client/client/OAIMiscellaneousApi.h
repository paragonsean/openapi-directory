/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMiscellaneousApi_H
#define OAI_OAIMiscellaneousApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMarkdownOption.h"
#include "OAIMarkupOption.h"
#include "OAINodeInfo.h"
#include "OAIServerVersion.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMiscellaneousApi : public QObject {
    Q_OBJECT

public:
    OAIMiscellaneousApi(const int timeOut = 0);
    ~OAIMiscellaneousApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getNodeInfo();


    virtual void getSigningKey();


    virtual void getVersion();

    /**
    * @param[in]  oai_markdown_option OAIMarkdownOption [optional]
    */
    virtual void renderMarkdown(const ::OpenAPI::OptionalParam<OAIMarkdownOption> &oai_markdown_option = ::OpenAPI::OptionalParam<OAIMarkdownOption>());

    /**
    * @param[in]  body QString [required]
    */
    virtual void renderMarkdownRaw(const QString &body);

    /**
    * @param[in]  oai_markup_option OAIMarkupOption [optional]
    */
    virtual void renderMarkup(const ::OpenAPI::OptionalParam<OAIMarkupOption> &oai_markup_option = ::OpenAPI::OptionalParam<OAIMarkupOption>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getNodeInfoCallback(OAIHttpRequestWorker *worker);
    void getSigningKeyCallback(OAIHttpRequestWorker *worker);
    void getVersionCallback(OAIHttpRequestWorker *worker);
    void renderMarkdownCallback(OAIHttpRequestWorker *worker);
    void renderMarkdownRawCallback(OAIHttpRequestWorker *worker);
    void renderMarkupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getNodeInfoSignal(OAINodeInfo summary);
    void getSigningKeySignal(QString summary);
    void getVersionSignal(OAIServerVersion summary);
    void renderMarkdownSignal(QString summary);
    void renderMarkdownRawSignal(QString summary);
    void renderMarkupSignal(QString summary);


    void getNodeInfoSignalFull(OAIHttpRequestWorker *worker, OAINodeInfo summary);
    void getSigningKeySignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getVersionSignalFull(OAIHttpRequestWorker *worker, OAIServerVersion summary);
    void renderMarkdownSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void renderMarkdownRawSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void renderMarkupSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use getNodeInfoSignalError() instead")
    void getNodeInfoSignalE(OAINodeInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeInfoSignalError(OAINodeInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSigningKeySignalError() instead")
    void getSigningKeySignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSigningKeySignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionSignalError() instead")
    void getVersionSignalE(OAIServerVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionSignalError(OAIServerVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renderMarkdownSignalError() instead")
    void renderMarkdownSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void renderMarkdownSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renderMarkdownRawSignalError() instead")
    void renderMarkdownRawSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void renderMarkdownRawSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renderMarkupSignalError() instead")
    void renderMarkupSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void renderMarkupSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getNodeInfoSignalErrorFull() instead")
    void getNodeInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSigningKeySignalErrorFull() instead")
    void getSigningKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSigningKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionSignalErrorFull() instead")
    void getVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renderMarkdownSignalErrorFull() instead")
    void renderMarkdownSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renderMarkdownSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renderMarkdownRawSignalErrorFull() instead")
    void renderMarkdownRawSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renderMarkdownRawSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renderMarkupSignalErrorFull() instead")
    void renderMarkupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renderMarkupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
