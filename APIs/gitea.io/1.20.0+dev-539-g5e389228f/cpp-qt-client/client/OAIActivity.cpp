/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivity::OAIActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivity::OAIActivity() {
    this->initializeModel();
}

OAIActivity::~OAIActivity() {}

void OAIActivity::initializeModel() {

    m_act_user_isSet = false;
    m_act_user_isValid = false;

    m_act_user_id_isSet = false;
    m_act_user_id_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_comment_id_isSet = false;
    m_comment_id_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_private_isSet = false;
    m_is_private_isValid = false;

    m_op_type_isSet = false;
    m_op_type_isValid = false;

    m_ref_name_isSet = false;
    m_ref_name_isValid = false;

    m_repo_isSet = false;
    m_repo_isValid = false;

    m_repo_id_isSet = false;
    m_repo_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivity::fromJsonObject(QJsonObject json) {

    m_act_user_isValid = ::OpenAPI::fromJsonValue(m_act_user, json[QString("act_user")]);
    m_act_user_isSet = !json[QString("act_user")].isNull() && m_act_user_isValid;

    m_act_user_id_isValid = ::OpenAPI::fromJsonValue(m_act_user_id, json[QString("act_user_id")]);
    m_act_user_id_isSet = !json[QString("act_user_id")].isNull() && m_act_user_id_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_comment_id_isValid = ::OpenAPI::fromJsonValue(m_comment_id, json[QString("comment_id")]);
    m_comment_id_isSet = !json[QString("comment_id")].isNull() && m_comment_id_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_private_isValid = ::OpenAPI::fromJsonValue(m_is_private, json[QString("is_private")]);
    m_is_private_isSet = !json[QString("is_private")].isNull() && m_is_private_isValid;

    m_op_type_isValid = ::OpenAPI::fromJsonValue(m_op_type, json[QString("op_type")]);
    m_op_type_isSet = !json[QString("op_type")].isNull() && m_op_type_isValid;

    m_ref_name_isValid = ::OpenAPI::fromJsonValue(m_ref_name, json[QString("ref_name")]);
    m_ref_name_isSet = !json[QString("ref_name")].isNull() && m_ref_name_isValid;

    m_repo_isValid = ::OpenAPI::fromJsonValue(m_repo, json[QString("repo")]);
    m_repo_isSet = !json[QString("repo")].isNull() && m_repo_isValid;

    m_repo_id_isValid = ::OpenAPI::fromJsonValue(m_repo_id, json[QString("repo_id")]);
    m_repo_id_isSet = !json[QString("repo_id")].isNull() && m_repo_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_act_user.isSet()) {
        obj.insert(QString("act_user"), ::OpenAPI::toJsonValue(m_act_user));
    }
    if (m_act_user_id_isSet) {
        obj.insert(QString("act_user_id"), ::OpenAPI::toJsonValue(m_act_user_id));
    }
    if (m_comment.isSet()) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_comment_id_isSet) {
        obj.insert(QString("comment_id"), ::OpenAPI::toJsonValue(m_comment_id));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_private_isSet) {
        obj.insert(QString("is_private"), ::OpenAPI::toJsonValue(m_is_private));
    }
    if (m_op_type_isSet) {
        obj.insert(QString("op_type"), ::OpenAPI::toJsonValue(m_op_type));
    }
    if (m_ref_name_isSet) {
        obj.insert(QString("ref_name"), ::OpenAPI::toJsonValue(m_ref_name));
    }
    if (m_repo.isSet()) {
        obj.insert(QString("repo"), ::OpenAPI::toJsonValue(m_repo));
    }
    if (m_repo_id_isSet) {
        obj.insert(QString("repo_id"), ::OpenAPI::toJsonValue(m_repo_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

OAIUser OAIActivity::getActUser() const {
    return m_act_user;
}
void OAIActivity::setActUser(const OAIUser &act_user) {
    m_act_user = act_user;
    m_act_user_isSet = true;
}

bool OAIActivity::is_act_user_Set() const{
    return m_act_user_isSet;
}

bool OAIActivity::is_act_user_Valid() const{
    return m_act_user_isValid;
}

qint64 OAIActivity::getActUserId() const {
    return m_act_user_id;
}
void OAIActivity::setActUserId(const qint64 &act_user_id) {
    m_act_user_id = act_user_id;
    m_act_user_id_isSet = true;
}

bool OAIActivity::is_act_user_id_Set() const{
    return m_act_user_id_isSet;
}

bool OAIActivity::is_act_user_id_Valid() const{
    return m_act_user_id_isValid;
}

OAIComment OAIActivity::getComment() const {
    return m_comment;
}
void OAIActivity::setComment(const OAIComment &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIActivity::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIActivity::is_comment_Valid() const{
    return m_comment_isValid;
}

qint64 OAIActivity::getCommentId() const {
    return m_comment_id;
}
void OAIActivity::setCommentId(const qint64 &comment_id) {
    m_comment_id = comment_id;
    m_comment_id_isSet = true;
}

bool OAIActivity::is_comment_id_Set() const{
    return m_comment_id_isSet;
}

bool OAIActivity::is_comment_id_Valid() const{
    return m_comment_id_isValid;
}

QString OAIActivity::getContent() const {
    return m_content;
}
void OAIActivity::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIActivity::is_content_Set() const{
    return m_content_isSet;
}

bool OAIActivity::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAIActivity::getCreated() const {
    return m_created;
}
void OAIActivity::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIActivity::is_created_Set() const{
    return m_created_isSet;
}

bool OAIActivity::is_created_Valid() const{
    return m_created_isValid;
}

qint64 OAIActivity::getId() const {
    return m_id;
}
void OAIActivity::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIActivity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIActivity::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIActivity::isIsPrivate() const {
    return m_is_private;
}
void OAIActivity::setIsPrivate(const bool &is_private) {
    m_is_private = is_private;
    m_is_private_isSet = true;
}

bool OAIActivity::is_is_private_Set() const{
    return m_is_private_isSet;
}

bool OAIActivity::is_is_private_Valid() const{
    return m_is_private_isValid;
}

QString OAIActivity::getOpType() const {
    return m_op_type;
}
void OAIActivity::setOpType(const QString &op_type) {
    m_op_type = op_type;
    m_op_type_isSet = true;
}

bool OAIActivity::is_op_type_Set() const{
    return m_op_type_isSet;
}

bool OAIActivity::is_op_type_Valid() const{
    return m_op_type_isValid;
}

QString OAIActivity::getRefName() const {
    return m_ref_name;
}
void OAIActivity::setRefName(const QString &ref_name) {
    m_ref_name = ref_name;
    m_ref_name_isSet = true;
}

bool OAIActivity::is_ref_name_Set() const{
    return m_ref_name_isSet;
}

bool OAIActivity::is_ref_name_Valid() const{
    return m_ref_name_isValid;
}

OAIRepository OAIActivity::getRepo() const {
    return m_repo;
}
void OAIActivity::setRepo(const OAIRepository &repo) {
    m_repo = repo;
    m_repo_isSet = true;
}

bool OAIActivity::is_repo_Set() const{
    return m_repo_isSet;
}

bool OAIActivity::is_repo_Valid() const{
    return m_repo_isValid;
}

qint64 OAIActivity::getRepoId() const {
    return m_repo_id;
}
void OAIActivity::setRepoId(const qint64 &repo_id) {
    m_repo_id = repo_id;
    m_repo_id_isSet = true;
}

bool OAIActivity::is_repo_id_Set() const{
    return m_repo_id_isSet;
}

bool OAIActivity::is_repo_id_Valid() const{
    return m_repo_id_isValid;
}

qint64 OAIActivity::getUserId() const {
    return m_user_id;
}
void OAIActivity::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIActivity::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIActivity::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_act_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_act_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_op_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
