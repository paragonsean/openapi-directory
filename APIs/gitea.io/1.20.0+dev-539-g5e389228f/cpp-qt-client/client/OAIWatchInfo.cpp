/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWatchInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWatchInfo::OAIWatchInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWatchInfo::OAIWatchInfo() {
    this->initializeModel();
}

OAIWatchInfo::~OAIWatchInfo() {}

void OAIWatchInfo::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_ignored_isSet = false;
    m_ignored_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_repository_url_isSet = false;
    m_repository_url_isValid = false;

    m_subscribed_isSet = false;
    m_subscribed_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWatchInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWatchInfo::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_ignored_isValid = ::OpenAPI::fromJsonValue(m_ignored, json[QString("ignored")]);
    m_ignored_isSet = !json[QString("ignored")].isNull() && m_ignored_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_repository_url_isValid = ::OpenAPI::fromJsonValue(m_repository_url, json[QString("repository_url")]);
    m_repository_url_isSet = !json[QString("repository_url")].isNull() && m_repository_url_isValid;

    m_subscribed_isValid = ::OpenAPI::fromJsonValue(m_subscribed, json[QString("subscribed")]);
    m_subscribed_isSet = !json[QString("subscribed")].isNull() && m_subscribed_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWatchInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWatchInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_ignored_isSet) {
        obj.insert(QString("ignored"), ::OpenAPI::toJsonValue(m_ignored));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_repository_url_isSet) {
        obj.insert(QString("repository_url"), ::OpenAPI::toJsonValue(m_repository_url));
    }
    if (m_subscribed_isSet) {
        obj.insert(QString("subscribed"), ::OpenAPI::toJsonValue(m_subscribed));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDateTime OAIWatchInfo::getCreatedAt() const {
    return m_created_at;
}
void OAIWatchInfo::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIWatchInfo::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIWatchInfo::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIWatchInfo::isIgnored() const {
    return m_ignored;
}
void OAIWatchInfo::setIgnored(const bool &ignored) {
    m_ignored = ignored;
    m_ignored_isSet = true;
}

bool OAIWatchInfo::is_ignored_Set() const{
    return m_ignored_isSet;
}

bool OAIWatchInfo::is_ignored_Valid() const{
    return m_ignored_isValid;
}

QJsonValue OAIWatchInfo::getReason() const {
    return m_reason;
}
void OAIWatchInfo::setReason(const QJsonValue &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIWatchInfo::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIWatchInfo::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIWatchInfo::getRepositoryUrl() const {
    return m_repository_url;
}
void OAIWatchInfo::setRepositoryUrl(const QString &repository_url) {
    m_repository_url = repository_url;
    m_repository_url_isSet = true;
}

bool OAIWatchInfo::is_repository_url_Set() const{
    return m_repository_url_isSet;
}

bool OAIWatchInfo::is_repository_url_Valid() const{
    return m_repository_url_isValid;
}

bool OAIWatchInfo::isSubscribed() const {
    return m_subscribed;
}
void OAIWatchInfo::setSubscribed(const bool &subscribed) {
    m_subscribed = subscribed;
    m_subscribed_isSet = true;
}

bool OAIWatchInfo::is_subscribed_Set() const{
    return m_subscribed_isSet;
}

bool OAIWatchInfo::is_subscribed_Valid() const{
    return m_subscribed_isValid;
}

QString OAIWatchInfo::getUrl() const {
    return m_url;
}
void OAIWatchInfo::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWatchInfo::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWatchInfo::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWatchInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignored_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscribed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWatchInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
