/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINodeInfo.h
 *
 * NodeInfo contains standardized way of exposing metadata about a server running one of the distributed social networks
 */

#ifndef OAINodeInfo_H
#define OAINodeInfo_H

#include <QJsonObject>

#include "OAINodeInfoServices.h"
#include "OAINodeInfoSoftware.h"
#include "OAINodeInfoUsage.h"
#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINodeInfoServices;
class OAINodeInfoSoftware;
class OAINodeInfoUsage;

class OAINodeInfo : public OAIObject {
public:
    OAINodeInfo();
    OAINodeInfo(QString json);
    ~OAINodeInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIObject getMetadata() const;
    void setMetadata(const OAIObject &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    bool isOpenRegistrations() const;
    void setOpenRegistrations(const bool &open_registrations);
    bool is_open_registrations_Set() const;
    bool is_open_registrations_Valid() const;

    QList<QString> getProtocols() const;
    void setProtocols(const QList<QString> &protocols);
    bool is_protocols_Set() const;
    bool is_protocols_Valid() const;

    OAINodeInfoServices getServices() const;
    void setServices(const OAINodeInfoServices &services);
    bool is_services_Set() const;
    bool is_services_Valid() const;

    OAINodeInfoSoftware getSoftware() const;
    void setSoftware(const OAINodeInfoSoftware &software);
    bool is_software_Set() const;
    bool is_software_Valid() const;

    OAINodeInfoUsage getUsage() const;
    void setUsage(const OAINodeInfoUsage &usage);
    bool is_usage_Set() const;
    bool is_usage_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIObject m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    bool m_open_registrations;
    bool m_open_registrations_isSet;
    bool m_open_registrations_isValid;

    QList<QString> m_protocols;
    bool m_protocols_isSet;
    bool m_protocols_isValid;

    OAINodeInfoServices m_services;
    bool m_services_isSet;
    bool m_services_isValid;

    OAINodeInfoSoftware m_software;
    bool m_software_isSet;
    bool m_software_isValid;

    OAINodeInfoUsage m_usage;
    bool m_usage_isSet;
    bool m_usage_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINodeInfo)

#endif // OAINodeInfo_H
