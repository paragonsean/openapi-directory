/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateRepoOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateRepoOption::OAIGenerateRepoOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateRepoOption::OAIGenerateRepoOption() {
    this->initializeModel();
}

OAIGenerateRepoOption::~OAIGenerateRepoOption() {}

void OAIGenerateRepoOption::initializeModel() {

    m_avatar_isSet = false;
    m_avatar_isValid = false;

    m_default_branch_isSet = false;
    m_default_branch_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_git_content_isSet = false;
    m_git_content_isValid = false;

    m_git_hooks_isSet = false;
    m_git_hooks_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_r_private_isSet = false;
    m_r_private_isValid = false;

    m_topics_isSet = false;
    m_topics_isValid = false;

    m_webhooks_isSet = false;
    m_webhooks_isValid = false;
}

void OAIGenerateRepoOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateRepoOption::fromJsonObject(QJsonObject json) {

    m_avatar_isValid = ::OpenAPI::fromJsonValue(m_avatar, json[QString("avatar")]);
    m_avatar_isSet = !json[QString("avatar")].isNull() && m_avatar_isValid;

    m_default_branch_isValid = ::OpenAPI::fromJsonValue(m_default_branch, json[QString("default_branch")]);
    m_default_branch_isSet = !json[QString("default_branch")].isNull() && m_default_branch_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_git_content_isValid = ::OpenAPI::fromJsonValue(m_git_content, json[QString("git_content")]);
    m_git_content_isSet = !json[QString("git_content")].isNull() && m_git_content_isValid;

    m_git_hooks_isValid = ::OpenAPI::fromJsonValue(m_git_hooks, json[QString("git_hooks")]);
    m_git_hooks_isSet = !json[QString("git_hooks")].isNull() && m_git_hooks_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_r_private_isValid = ::OpenAPI::fromJsonValue(m_r_private, json[QString("private")]);
    m_r_private_isSet = !json[QString("private")].isNull() && m_r_private_isValid;

    m_topics_isValid = ::OpenAPI::fromJsonValue(m_topics, json[QString("topics")]);
    m_topics_isSet = !json[QString("topics")].isNull() && m_topics_isValid;

    m_webhooks_isValid = ::OpenAPI::fromJsonValue(m_webhooks, json[QString("webhooks")]);
    m_webhooks_isSet = !json[QString("webhooks")].isNull() && m_webhooks_isValid;
}

QString OAIGenerateRepoOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateRepoOption::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_isSet) {
        obj.insert(QString("avatar"), ::OpenAPI::toJsonValue(m_avatar));
    }
    if (m_default_branch_isSet) {
        obj.insert(QString("default_branch"), ::OpenAPI::toJsonValue(m_default_branch));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_git_content_isSet) {
        obj.insert(QString("git_content"), ::OpenAPI::toJsonValue(m_git_content));
    }
    if (m_git_hooks_isSet) {
        obj.insert(QString("git_hooks"), ::OpenAPI::toJsonValue(m_git_hooks));
    }
    if (m_labels_isSet) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_r_private_isSet) {
        obj.insert(QString("private"), ::OpenAPI::toJsonValue(m_r_private));
    }
    if (m_topics_isSet) {
        obj.insert(QString("topics"), ::OpenAPI::toJsonValue(m_topics));
    }
    if (m_webhooks_isSet) {
        obj.insert(QString("webhooks"), ::OpenAPI::toJsonValue(m_webhooks));
    }
    return obj;
}

bool OAIGenerateRepoOption::isAvatar() const {
    return m_avatar;
}
void OAIGenerateRepoOption::setAvatar(const bool &avatar) {
    m_avatar = avatar;
    m_avatar_isSet = true;
}

bool OAIGenerateRepoOption::is_avatar_Set() const{
    return m_avatar_isSet;
}

bool OAIGenerateRepoOption::is_avatar_Valid() const{
    return m_avatar_isValid;
}

QString OAIGenerateRepoOption::getDefaultBranch() const {
    return m_default_branch;
}
void OAIGenerateRepoOption::setDefaultBranch(const QString &default_branch) {
    m_default_branch = default_branch;
    m_default_branch_isSet = true;
}

bool OAIGenerateRepoOption::is_default_branch_Set() const{
    return m_default_branch_isSet;
}

bool OAIGenerateRepoOption::is_default_branch_Valid() const{
    return m_default_branch_isValid;
}

QString OAIGenerateRepoOption::getDescription() const {
    return m_description;
}
void OAIGenerateRepoOption::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGenerateRepoOption::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGenerateRepoOption::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIGenerateRepoOption::isGitContent() const {
    return m_git_content;
}
void OAIGenerateRepoOption::setGitContent(const bool &git_content) {
    m_git_content = git_content;
    m_git_content_isSet = true;
}

bool OAIGenerateRepoOption::is_git_content_Set() const{
    return m_git_content_isSet;
}

bool OAIGenerateRepoOption::is_git_content_Valid() const{
    return m_git_content_isValid;
}

bool OAIGenerateRepoOption::isGitHooks() const {
    return m_git_hooks;
}
void OAIGenerateRepoOption::setGitHooks(const bool &git_hooks) {
    m_git_hooks = git_hooks;
    m_git_hooks_isSet = true;
}

bool OAIGenerateRepoOption::is_git_hooks_Set() const{
    return m_git_hooks_isSet;
}

bool OAIGenerateRepoOption::is_git_hooks_Valid() const{
    return m_git_hooks_isValid;
}

bool OAIGenerateRepoOption::isLabels() const {
    return m_labels;
}
void OAIGenerateRepoOption::setLabels(const bool &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGenerateRepoOption::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGenerateRepoOption::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGenerateRepoOption::getName() const {
    return m_name;
}
void OAIGenerateRepoOption::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGenerateRepoOption::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGenerateRepoOption::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGenerateRepoOption::getOwner() const {
    return m_owner;
}
void OAIGenerateRepoOption::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIGenerateRepoOption::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIGenerateRepoOption::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAIGenerateRepoOption::isRPrivate() const {
    return m_r_private;
}
void OAIGenerateRepoOption::setRPrivate(const bool &r_private) {
    m_r_private = r_private;
    m_r_private_isSet = true;
}

bool OAIGenerateRepoOption::is_r_private_Set() const{
    return m_r_private_isSet;
}

bool OAIGenerateRepoOption::is_r_private_Valid() const{
    return m_r_private_isValid;
}

bool OAIGenerateRepoOption::isTopics() const {
    return m_topics;
}
void OAIGenerateRepoOption::setTopics(const bool &topics) {
    m_topics = topics;
    m_topics_isSet = true;
}

bool OAIGenerateRepoOption::is_topics_Set() const{
    return m_topics_isSet;
}

bool OAIGenerateRepoOption::is_topics_Valid() const{
    return m_topics_isValid;
}

bool OAIGenerateRepoOption::isWebhooks() const {
    return m_webhooks;
}
void OAIGenerateRepoOption::setWebhooks(const bool &webhooks) {
    m_webhooks = webhooks;
    m_webhooks_isSet = true;
}

bool OAIGenerateRepoOption::is_webhooks_Set() const{
    return m_webhooks_isSet;
}

bool OAIGenerateRepoOption::is_webhooks_Valid() const{
    return m_webhooks_isValid;
}

bool OAIGenerateRepoOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_hooks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhooks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateRepoOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_owner_isValid && true;
}

} // namespace OpenAPI
