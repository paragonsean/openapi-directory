/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueApi_H
#define OAI_OAIIssueApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddTimeOption.h"
#include "OAIAttachment.h"
#include "OAIComment.h"
#include "OAICreateIssueCommentOption.h"
#include "OAICreateIssueOption.h"
#include "OAICreateLabelOption.h"
#include "OAICreateMilestoneOption.h"
#include "OAIEditAttachmentOptions.h"
#include "OAIEditDeadlineOption.h"
#include "OAIEditIssueCommentOption.h"
#include "OAIEditIssueOption.h"
#include "OAIEditLabelOption.h"
#include "OAIEditMilestoneOption.h"
#include "OAIEditReactionOption.h"
#include "OAIHttpFileElement.h"
#include "OAIIssue.h"
#include "OAIIssueDeadline.h"
#include "OAIIssueLabelsOption.h"
#include "OAIIssueMeta.h"
#include "OAILabel.h"
#include "OAIMilestone.h"
#include "OAIReaction.h"
#include "OAITimelineComment.h"
#include "OAITrackedTime.h"
#include "OAIUser.h"
#include "OAIWatchInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueApi : public QObject {
    Q_OBJECT

public:
    OAIIssueApi(const int timeOut = 0);
    ~OAIIssueApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  oai_issue_labels_option OAIIssueLabelsOption [optional]
    */
    virtual void issueAddLabel(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<OAIIssueLabelsOption> &oai_issue_labels_option = ::OpenAPI::OptionalParam<OAIIssueLabelsOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  user QString [required]
    */
    virtual void issueAddSubscription(const QString &owner, const QString &repo, const qint64 &index, const QString &user);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  oai_add_time_option OAIAddTimeOption [optional]
    */
    virtual void issueAddTime(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<OAIAddTimeOption> &oai_add_time_option = ::OpenAPI::OptionalParam<OAIAddTimeOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    */
    virtual void issueCheckSubscription(const QString &owner, const QString &repo, const qint64 &index);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    */
    virtual void issueClearLabels(const QString &owner, const QString &repo, const qint64 &index);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  oai_create_issue_comment_option OAICreateIssueCommentOption [optional]
    */
    virtual void issueCreateComment(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<OAICreateIssueCommentOption> &oai_create_issue_comment_option = ::OpenAPI::OptionalParam<OAICreateIssueCommentOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_create_issue_option OAICreateIssueOption [optional]
    */
    virtual void issueCreateIssue(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAICreateIssueOption> &oai_create_issue_option = ::OpenAPI::OptionalParam<OAICreateIssueOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  attachment OAIHttpFileElement [required]
    * @param[in]  name QString [optional]
    */
    virtual void issueCreateIssueAttachment(const QString &owner, const QString &repo, const qint64 &index, const OAIHttpFileElement &attachment, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index QString [required]
    * @param[in]  oai_issue_meta OAIIssueMeta [optional]
    */
    virtual void issueCreateIssueBlocking(const QString &owner, const QString &repo, const QString &index, const ::OpenAPI::OptionalParam<OAIIssueMeta> &oai_issue_meta = ::OpenAPI::OptionalParam<OAIIssueMeta>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  attachment OAIHttpFileElement [required]
    * @param[in]  name QString [optional]
    */
    virtual void issueCreateIssueCommentAttachment(const QString &owner, const QString &repo, const qint64 &id, const OAIHttpFileElement &attachment, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index QString [required]
    * @param[in]  oai_issue_meta OAIIssueMeta [optional]
    */
    virtual void issueCreateIssueDependencies(const QString &owner, const QString &repo, const QString &index, const ::OpenAPI::OptionalParam<OAIIssueMeta> &oai_issue_meta = ::OpenAPI::OptionalParam<OAIIssueMeta>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_create_label_option OAICreateLabelOption [optional]
    */
    virtual void issueCreateLabel(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAICreateLabelOption> &oai_create_label_option = ::OpenAPI::OptionalParam<OAICreateLabelOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_create_milestone_option OAICreateMilestoneOption [optional]
    */
    virtual void issueCreateMilestone(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAICreateMilestoneOption> &oai_create_milestone_option = ::OpenAPI::OptionalParam<OAICreateMilestoneOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    */
    virtual void issueDelete(const QString &owner, const QString &repo, const qint64 &index);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void issueDeleteComment(const QString &owner, const QString &repo, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint32 [required]
    * @param[in]  id qint64 [required]
    */
    Q_DECL_DEPRECATED virtual void issueDeleteCommentDeprecated(const QString &owner, const QString &repo, const qint32 &index, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  oai_edit_reaction_option OAIEditReactionOption [optional]
    */
    virtual void issueDeleteCommentReaction(const QString &owner, const QString &repo, const qint64 &id, const ::OpenAPI::OptionalParam<OAIEditReactionOption> &oai_edit_reaction_option = ::OpenAPI::OptionalParam<OAIEditReactionOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  attachment_id qint64 [required]
    */
    virtual void issueDeleteIssueAttachment(const QString &owner, const QString &repo, const qint64 &index, const qint64 &attachment_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  attachment_id qint64 [required]
    */
    virtual void issueDeleteIssueCommentAttachment(const QString &owner, const QString &repo, const qint64 &id, const qint64 &attachment_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  oai_edit_reaction_option OAIEditReactionOption [optional]
    */
    virtual void issueDeleteIssueReaction(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<OAIEditReactionOption> &oai_edit_reaction_option = ::OpenAPI::OptionalParam<OAIEditReactionOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void issueDeleteLabel(const QString &owner, const QString &repo, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id QString [required]
    */
    virtual void issueDeleteMilestone(const QString &owner, const QString &repo, const QString &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    */
    virtual void issueDeleteStopWatch(const QString &owner, const QString &repo, const qint64 &index);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  user QString [required]
    */
    virtual void issueDeleteSubscription(const QString &owner, const QString &repo, const qint64 &index, const QString &user);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  id qint64 [required]
    */
    virtual void issueDeleteTime(const QString &owner, const QString &repo, const qint64 &index, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  oai_edit_issue_comment_option OAIEditIssueCommentOption [optional]
    */
    virtual void issueEditComment(const QString &owner, const QString &repo, const qint64 &id, const ::OpenAPI::OptionalParam<OAIEditIssueCommentOption> &oai_edit_issue_comment_option = ::OpenAPI::OptionalParam<OAIEditIssueCommentOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint32 [required]
    * @param[in]  id qint64 [required]
    * @param[in]  oai_edit_issue_comment_option OAIEditIssueCommentOption [optional]
    */
    Q_DECL_DEPRECATED virtual void issueEditCommentDeprecated(const QString &owner, const QString &repo, const qint32 &index, const qint64 &id, const ::OpenAPI::OptionalParam<OAIEditIssueCommentOption> &oai_edit_issue_comment_option = ::OpenAPI::OptionalParam<OAIEditIssueCommentOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  oai_edit_issue_option OAIEditIssueOption [optional]
    */
    virtual void issueEditIssue(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<OAIEditIssueOption> &oai_edit_issue_option = ::OpenAPI::OptionalParam<OAIEditIssueOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  attachment_id qint64 [required]
    * @param[in]  oai_edit_attachment_options OAIEditAttachmentOptions [optional]
    */
    virtual void issueEditIssueAttachment(const QString &owner, const QString &repo, const qint64 &index, const qint64 &attachment_id, const ::OpenAPI::OptionalParam<OAIEditAttachmentOptions> &oai_edit_attachment_options = ::OpenAPI::OptionalParam<OAIEditAttachmentOptions>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  attachment_id qint64 [required]
    * @param[in]  oai_edit_attachment_options OAIEditAttachmentOptions [optional]
    */
    virtual void issueEditIssueCommentAttachment(const QString &owner, const QString &repo, const qint64 &id, const qint64 &attachment_id, const ::OpenAPI::OptionalParam<OAIEditAttachmentOptions> &oai_edit_attachment_options = ::OpenAPI::OptionalParam<OAIEditAttachmentOptions>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  oai_edit_deadline_option OAIEditDeadlineOption [optional]
    */
    virtual void issueEditIssueDeadline(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<OAIEditDeadlineOption> &oai_edit_deadline_option = ::OpenAPI::OptionalParam<OAIEditDeadlineOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  oai_edit_label_option OAIEditLabelOption [optional]
    */
    virtual void issueEditLabel(const QString &owner, const QString &repo, const qint64 &id, const ::OpenAPI::OptionalParam<OAIEditLabelOption> &oai_edit_label_option = ::OpenAPI::OptionalParam<OAIEditLabelOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_edit_milestone_option OAIEditMilestoneOption [optional]
    */
    virtual void issueEditMilestone(const QString &owner, const QString &repo, const QString &id, const ::OpenAPI::OptionalParam<OAIEditMilestoneOption> &oai_edit_milestone_option = ::OpenAPI::OptionalParam<OAIEditMilestoneOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void issueGetComment(const QString &owner, const QString &repo, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void issueGetCommentReactions(const QString &owner, const QString &repo, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  since QDateTime [optional]
    * @param[in]  before QDateTime [optional]
    */
    virtual void issueGetComments(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  since QDateTime [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  before QDateTime [optional]
    */
    virtual void issueGetCommentsAndTimeline(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    */
    virtual void issueGetIssue(const QString &owner, const QString &repo, const qint64 &index);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  attachment_id qint64 [required]
    */
    virtual void issueGetIssueAttachment(const QString &owner, const QString &repo, const qint64 &index, const qint64 &attachment_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  attachment_id qint64 [required]
    */
    virtual void issueGetIssueCommentAttachment(const QString &owner, const QString &repo, const qint64 &id, const qint64 &attachment_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void issueGetIssueReactions(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void issueGetLabel(const QString &owner, const QString &repo, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    */
    virtual void issueGetLabels(const QString &owner, const QString &repo, const qint64 &index);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id QString [required]
    */
    virtual void issueGetMilestone(const QString &owner, const QString &repo, const QString &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  state QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void issueGetMilestonesList(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  since QDateTime [optional]
    * @param[in]  before QDateTime [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void issueGetRepoComments(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void issueListBlocks(const QString &owner, const QString &repo, const QString &index, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    */
    virtual void issueListIssueAttachments(const QString &owner, const QString &repo, const qint64 &index);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void issueListIssueCommentAttachments(const QString &owner, const QString &repo, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void issueListIssueDependencies(const QString &owner, const QString &repo, const QString &index, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  state QString [optional]
    * @param[in]  labels QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  milestones QString [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  before QDateTime [optional]
    * @param[in]  created_by QString [optional]
    * @param[in]  assigned_by QString [optional]
    * @param[in]  mentioned_by QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void issueListIssues(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &milestones = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &created_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assigned_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mentioned_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void issueListLabels(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  oai_edit_reaction_option OAIEditReactionOption [optional]
    */
    virtual void issuePostCommentReaction(const QString &owner, const QString &repo, const qint64 &id, const ::OpenAPI::OptionalParam<OAIEditReactionOption> &oai_edit_reaction_option = ::OpenAPI::OptionalParam<OAIEditReactionOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  oai_edit_reaction_option OAIEditReactionOption [optional]
    */
    virtual void issuePostIssueReaction(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<OAIEditReactionOption> &oai_edit_reaction_option = ::OpenAPI::OptionalParam<OAIEditReactionOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index QString [required]
    * @param[in]  oai_issue_meta OAIIssueMeta [optional]
    */
    virtual void issueRemoveIssueBlocking(const QString &owner, const QString &repo, const QString &index, const ::OpenAPI::OptionalParam<OAIIssueMeta> &oai_issue_meta = ::OpenAPI::OptionalParam<OAIIssueMeta>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index QString [required]
    * @param[in]  oai_issue_meta OAIIssueMeta [optional]
    */
    virtual void issueRemoveIssueDependencies(const QString &owner, const QString &repo, const QString &index, const ::OpenAPI::OptionalParam<OAIIssueMeta> &oai_issue_meta = ::OpenAPI::OptionalParam<OAIIssueMeta>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  id qint64 [required]
    */
    virtual void issueRemoveLabel(const QString &owner, const QString &repo, const qint64 &index, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  oai_issue_labels_option OAIIssueLabelsOption [optional]
    */
    virtual void issueReplaceLabels(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<OAIIssueLabelsOption> &oai_issue_labels_option = ::OpenAPI::OptionalParam<OAIIssueLabelsOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    */
    virtual void issueResetTime(const QString &owner, const QString &repo, const qint64 &index);

    /**
    * @param[in]  state QString [optional]
    * @param[in]  labels QString [optional]
    * @param[in]  milestones QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  priority_repo_id qint64 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  before QDateTime [optional]
    * @param[in]  assigned bool [optional]
    * @param[in]  created bool [optional]
    * @param[in]  mentioned bool [optional]
    * @param[in]  review_requested bool [optional]
    * @param[in]  reviewed bool [optional]
    * @param[in]  owner QString [optional]
    * @param[in]  team QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void issueSearchIssues(const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &milestones = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &priority_repo_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &assigned = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &created = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &mentioned = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &review_requested = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &reviewed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    */
    virtual void issueStartStopWatch(const QString &owner, const QString &repo, const qint64 &index);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    */
    virtual void issueStopStopWatch(const QString &owner, const QString &repo, const qint64 &index);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void issueSubscriptions(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  user QString [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  before QDateTime [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void issueTrackedTimes(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void issueAddLabelCallback(OAIHttpRequestWorker *worker);
    void issueAddSubscriptionCallback(OAIHttpRequestWorker *worker);
    void issueAddTimeCallback(OAIHttpRequestWorker *worker);
    void issueCheckSubscriptionCallback(OAIHttpRequestWorker *worker);
    void issueClearLabelsCallback(OAIHttpRequestWorker *worker);
    void issueCreateCommentCallback(OAIHttpRequestWorker *worker);
    void issueCreateIssueCallback(OAIHttpRequestWorker *worker);
    void issueCreateIssueAttachmentCallback(OAIHttpRequestWorker *worker);
    void issueCreateIssueBlockingCallback(OAIHttpRequestWorker *worker);
    void issueCreateIssueCommentAttachmentCallback(OAIHttpRequestWorker *worker);
    void issueCreateIssueDependenciesCallback(OAIHttpRequestWorker *worker);
    void issueCreateLabelCallback(OAIHttpRequestWorker *worker);
    void issueCreateMilestoneCallback(OAIHttpRequestWorker *worker);
    void issueDeleteCallback(OAIHttpRequestWorker *worker);
    void issueDeleteCommentCallback(OAIHttpRequestWorker *worker);
    void issueDeleteCommentDeprecatedCallback(OAIHttpRequestWorker *worker);
    void issueDeleteCommentReactionCallback(OAIHttpRequestWorker *worker);
    void issueDeleteIssueAttachmentCallback(OAIHttpRequestWorker *worker);
    void issueDeleteIssueCommentAttachmentCallback(OAIHttpRequestWorker *worker);
    void issueDeleteIssueReactionCallback(OAIHttpRequestWorker *worker);
    void issueDeleteLabelCallback(OAIHttpRequestWorker *worker);
    void issueDeleteMilestoneCallback(OAIHttpRequestWorker *worker);
    void issueDeleteStopWatchCallback(OAIHttpRequestWorker *worker);
    void issueDeleteSubscriptionCallback(OAIHttpRequestWorker *worker);
    void issueDeleteTimeCallback(OAIHttpRequestWorker *worker);
    void issueEditCommentCallback(OAIHttpRequestWorker *worker);
    void issueEditCommentDeprecatedCallback(OAIHttpRequestWorker *worker);
    void issueEditIssueCallback(OAIHttpRequestWorker *worker);
    void issueEditIssueAttachmentCallback(OAIHttpRequestWorker *worker);
    void issueEditIssueCommentAttachmentCallback(OAIHttpRequestWorker *worker);
    void issueEditIssueDeadlineCallback(OAIHttpRequestWorker *worker);
    void issueEditLabelCallback(OAIHttpRequestWorker *worker);
    void issueEditMilestoneCallback(OAIHttpRequestWorker *worker);
    void issueGetCommentCallback(OAIHttpRequestWorker *worker);
    void issueGetCommentReactionsCallback(OAIHttpRequestWorker *worker);
    void issueGetCommentsCallback(OAIHttpRequestWorker *worker);
    void issueGetCommentsAndTimelineCallback(OAIHttpRequestWorker *worker);
    void issueGetIssueCallback(OAIHttpRequestWorker *worker);
    void issueGetIssueAttachmentCallback(OAIHttpRequestWorker *worker);
    void issueGetIssueCommentAttachmentCallback(OAIHttpRequestWorker *worker);
    void issueGetIssueReactionsCallback(OAIHttpRequestWorker *worker);
    void issueGetLabelCallback(OAIHttpRequestWorker *worker);
    void issueGetLabelsCallback(OAIHttpRequestWorker *worker);
    void issueGetMilestoneCallback(OAIHttpRequestWorker *worker);
    void issueGetMilestonesListCallback(OAIHttpRequestWorker *worker);
    void issueGetRepoCommentsCallback(OAIHttpRequestWorker *worker);
    void issueListBlocksCallback(OAIHttpRequestWorker *worker);
    void issueListIssueAttachmentsCallback(OAIHttpRequestWorker *worker);
    void issueListIssueCommentAttachmentsCallback(OAIHttpRequestWorker *worker);
    void issueListIssueDependenciesCallback(OAIHttpRequestWorker *worker);
    void issueListIssuesCallback(OAIHttpRequestWorker *worker);
    void issueListLabelsCallback(OAIHttpRequestWorker *worker);
    void issuePostCommentReactionCallback(OAIHttpRequestWorker *worker);
    void issuePostIssueReactionCallback(OAIHttpRequestWorker *worker);
    void issueRemoveIssueBlockingCallback(OAIHttpRequestWorker *worker);
    void issueRemoveIssueDependenciesCallback(OAIHttpRequestWorker *worker);
    void issueRemoveLabelCallback(OAIHttpRequestWorker *worker);
    void issueReplaceLabelsCallback(OAIHttpRequestWorker *worker);
    void issueResetTimeCallback(OAIHttpRequestWorker *worker);
    void issueSearchIssuesCallback(OAIHttpRequestWorker *worker);
    void issueStartStopWatchCallback(OAIHttpRequestWorker *worker);
    void issueStopStopWatchCallback(OAIHttpRequestWorker *worker);
    void issueSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void issueTrackedTimesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void issueAddLabelSignal(QList<OAILabel> summary);
    void issueAddSubscriptionSignal();
    void issueAddTimeSignal(OAITrackedTime summary);
    void issueCheckSubscriptionSignal(OAIWatchInfo summary);
    void issueClearLabelsSignal();
    void issueCreateCommentSignal(OAIComment summary);
    void issueCreateIssueSignal(OAIIssue summary);
    void issueCreateIssueAttachmentSignal(OAIAttachment summary);
    void issueCreateIssueBlockingSignal(OAIIssue summary);
    void issueCreateIssueCommentAttachmentSignal(OAIAttachment summary);
    void issueCreateIssueDependenciesSignal(OAIIssue summary);
    void issueCreateLabelSignal(OAILabel summary);
    void issueCreateMilestoneSignal(OAIMilestone summary);
    void issueDeleteSignal();
    void issueDeleteCommentSignal();
    void issueDeleteCommentDeprecatedSignal();
    void issueDeleteCommentReactionSignal();
    void issueDeleteIssueAttachmentSignal();
    void issueDeleteIssueCommentAttachmentSignal();
    void issueDeleteIssueReactionSignal();
    void issueDeleteLabelSignal();
    void issueDeleteMilestoneSignal();
    void issueDeleteStopWatchSignal();
    void issueDeleteSubscriptionSignal();
    void issueDeleteTimeSignal();
    void issueEditCommentSignal(OAIComment summary);
    void issueEditCommentDeprecatedSignal(OAIComment summary);
    void issueEditIssueSignal(OAIIssue summary);
    void issueEditIssueAttachmentSignal(OAIAttachment summary);
    void issueEditIssueCommentAttachmentSignal(OAIAttachment summary);
    void issueEditIssueDeadlineSignal(OAIIssueDeadline summary);
    void issueEditLabelSignal(OAILabel summary);
    void issueEditMilestoneSignal(OAIMilestone summary);
    void issueGetCommentSignal(OAIComment summary);
    void issueGetCommentReactionsSignal(QList<OAIReaction> summary);
    void issueGetCommentsSignal(QList<OAIComment> summary);
    void issueGetCommentsAndTimelineSignal(QList<OAITimelineComment> summary);
    void issueGetIssueSignal(OAIIssue summary);
    void issueGetIssueAttachmentSignal(OAIAttachment summary);
    void issueGetIssueCommentAttachmentSignal(OAIAttachment summary);
    void issueGetIssueReactionsSignal(QList<OAIReaction> summary);
    void issueGetLabelSignal(OAILabel summary);
    void issueGetLabelsSignal(QList<OAILabel> summary);
    void issueGetMilestoneSignal(OAIMilestone summary);
    void issueGetMilestonesListSignal(QList<OAIMilestone> summary);
    void issueGetRepoCommentsSignal(QList<OAIComment> summary);
    void issueListBlocksSignal(QList<OAIIssue> summary);
    void issueListIssueAttachmentsSignal(QList<OAIAttachment> summary);
    void issueListIssueCommentAttachmentsSignal(QList<OAIAttachment> summary);
    void issueListIssueDependenciesSignal(QList<OAIIssue> summary);
    void issueListIssuesSignal(QList<OAIIssue> summary);
    void issueListLabelsSignal(QList<OAILabel> summary);
    void issuePostCommentReactionSignal(OAIReaction summary);
    void issuePostIssueReactionSignal(OAIReaction summary);
    void issueRemoveIssueBlockingSignal(OAIIssue summary);
    void issueRemoveIssueDependenciesSignal(OAIIssue summary);
    void issueRemoveLabelSignal();
    void issueReplaceLabelsSignal(QList<OAILabel> summary);
    void issueResetTimeSignal();
    void issueSearchIssuesSignal(QList<OAIIssue> summary);
    void issueStartStopWatchSignal();
    void issueStopStopWatchSignal();
    void issueSubscriptionsSignal(QList<OAIUser> summary);
    void issueTrackedTimesSignal(QList<OAITrackedTime> summary);


    void issueAddLabelSignalFull(OAIHttpRequestWorker *worker, QList<OAILabel> summary);
    void issueAddSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void issueAddTimeSignalFull(OAIHttpRequestWorker *worker, OAITrackedTime summary);
    void issueCheckSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIWatchInfo summary);
    void issueClearLabelsSignalFull(OAIHttpRequestWorker *worker);
    void issueCreateCommentSignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void issueCreateIssueSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void issueCreateIssueAttachmentSignalFull(OAIHttpRequestWorker *worker, OAIAttachment summary);
    void issueCreateIssueBlockingSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void issueCreateIssueCommentAttachmentSignalFull(OAIHttpRequestWorker *worker, OAIAttachment summary);
    void issueCreateIssueDependenciesSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void issueCreateLabelSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void issueCreateMilestoneSignalFull(OAIHttpRequestWorker *worker, OAIMilestone summary);
    void issueDeleteSignalFull(OAIHttpRequestWorker *worker);
    void issueDeleteCommentSignalFull(OAIHttpRequestWorker *worker);
    void issueDeleteCommentDeprecatedSignalFull(OAIHttpRequestWorker *worker);
    void issueDeleteCommentReactionSignalFull(OAIHttpRequestWorker *worker);
    void issueDeleteIssueAttachmentSignalFull(OAIHttpRequestWorker *worker);
    void issueDeleteIssueCommentAttachmentSignalFull(OAIHttpRequestWorker *worker);
    void issueDeleteIssueReactionSignalFull(OAIHttpRequestWorker *worker);
    void issueDeleteLabelSignalFull(OAIHttpRequestWorker *worker);
    void issueDeleteMilestoneSignalFull(OAIHttpRequestWorker *worker);
    void issueDeleteStopWatchSignalFull(OAIHttpRequestWorker *worker);
    void issueDeleteSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void issueDeleteTimeSignalFull(OAIHttpRequestWorker *worker);
    void issueEditCommentSignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void issueEditCommentDeprecatedSignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void issueEditIssueSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void issueEditIssueAttachmentSignalFull(OAIHttpRequestWorker *worker, OAIAttachment summary);
    void issueEditIssueCommentAttachmentSignalFull(OAIHttpRequestWorker *worker, OAIAttachment summary);
    void issueEditIssueDeadlineSignalFull(OAIHttpRequestWorker *worker, OAIIssueDeadline summary);
    void issueEditLabelSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void issueEditMilestoneSignalFull(OAIHttpRequestWorker *worker, OAIMilestone summary);
    void issueGetCommentSignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void issueGetCommentReactionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIReaction> summary);
    void issueGetCommentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIComment> summary);
    void issueGetCommentsAndTimelineSignalFull(OAIHttpRequestWorker *worker, QList<OAITimelineComment> summary);
    void issueGetIssueSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void issueGetIssueAttachmentSignalFull(OAIHttpRequestWorker *worker, OAIAttachment summary);
    void issueGetIssueCommentAttachmentSignalFull(OAIHttpRequestWorker *worker, OAIAttachment summary);
    void issueGetIssueReactionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIReaction> summary);
    void issueGetLabelSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void issueGetLabelsSignalFull(OAIHttpRequestWorker *worker, QList<OAILabel> summary);
    void issueGetMilestoneSignalFull(OAIHttpRequestWorker *worker, OAIMilestone summary);
    void issueGetMilestonesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIMilestone> summary);
    void issueGetRepoCommentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIComment> summary);
    void issueListBlocksSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssue> summary);
    void issueListIssueAttachmentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAttachment> summary);
    void issueListIssueCommentAttachmentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAttachment> summary);
    void issueListIssueDependenciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssue> summary);
    void issueListIssuesSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssue> summary);
    void issueListLabelsSignalFull(OAIHttpRequestWorker *worker, QList<OAILabel> summary);
    void issuePostCommentReactionSignalFull(OAIHttpRequestWorker *worker, OAIReaction summary);
    void issuePostIssueReactionSignalFull(OAIHttpRequestWorker *worker, OAIReaction summary);
    void issueRemoveIssueBlockingSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void issueRemoveIssueDependenciesSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void issueRemoveLabelSignalFull(OAIHttpRequestWorker *worker);
    void issueReplaceLabelsSignalFull(OAIHttpRequestWorker *worker, QList<OAILabel> summary);
    void issueResetTimeSignalFull(OAIHttpRequestWorker *worker);
    void issueSearchIssuesSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssue> summary);
    void issueStartStopWatchSignalFull(OAIHttpRequestWorker *worker);
    void issueStopStopWatchSignalFull(OAIHttpRequestWorker *worker);
    void issueSubscriptionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void issueTrackedTimesSignalFull(OAIHttpRequestWorker *worker, QList<OAITrackedTime> summary);

    Q_DECL_DEPRECATED_X("Use issueAddLabelSignalError() instead")
    void issueAddLabelSignalE(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueAddLabelSignalError(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueAddSubscriptionSignalError() instead")
    void issueAddSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueAddSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueAddTimeSignalError() instead")
    void issueAddTimeSignalE(OAITrackedTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueAddTimeSignalError(OAITrackedTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCheckSubscriptionSignalError() instead")
    void issueCheckSubscriptionSignalE(OAIWatchInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCheckSubscriptionSignalError(OAIWatchInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueClearLabelsSignalError() instead")
    void issueClearLabelsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueClearLabelsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCreateCommentSignalError() instead")
    void issueCreateCommentSignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCreateCommentSignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCreateIssueSignalError() instead")
    void issueCreateIssueSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCreateIssueSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCreateIssueAttachmentSignalError() instead")
    void issueCreateIssueAttachmentSignalE(OAIAttachment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCreateIssueAttachmentSignalError(OAIAttachment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCreateIssueBlockingSignalError() instead")
    void issueCreateIssueBlockingSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCreateIssueBlockingSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCreateIssueCommentAttachmentSignalError() instead")
    void issueCreateIssueCommentAttachmentSignalE(OAIAttachment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCreateIssueCommentAttachmentSignalError(OAIAttachment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCreateIssueDependenciesSignalError() instead")
    void issueCreateIssueDependenciesSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCreateIssueDependenciesSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCreateLabelSignalError() instead")
    void issueCreateLabelSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCreateLabelSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCreateMilestoneSignalError() instead")
    void issueCreateMilestoneSignalE(OAIMilestone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCreateMilestoneSignalError(OAIMilestone summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteSignalError() instead")
    void issueDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteCommentSignalError() instead")
    void issueDeleteCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteCommentDeprecatedSignalError() instead")
    void issueDeleteCommentDeprecatedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteCommentDeprecatedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteCommentReactionSignalError() instead")
    void issueDeleteCommentReactionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteCommentReactionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteIssueAttachmentSignalError() instead")
    void issueDeleteIssueAttachmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteIssueAttachmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteIssueCommentAttachmentSignalError() instead")
    void issueDeleteIssueCommentAttachmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteIssueCommentAttachmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteIssueReactionSignalError() instead")
    void issueDeleteIssueReactionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteIssueReactionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteLabelSignalError() instead")
    void issueDeleteLabelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteLabelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteMilestoneSignalError() instead")
    void issueDeleteMilestoneSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteMilestoneSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteStopWatchSignalError() instead")
    void issueDeleteStopWatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteStopWatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteSubscriptionSignalError() instead")
    void issueDeleteSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteTimeSignalError() instead")
    void issueDeleteTimeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteTimeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueEditCommentSignalError() instead")
    void issueEditCommentSignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueEditCommentSignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueEditCommentDeprecatedSignalError() instead")
    void issueEditCommentDeprecatedSignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueEditCommentDeprecatedSignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueEditIssueSignalError() instead")
    void issueEditIssueSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueEditIssueSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueEditIssueAttachmentSignalError() instead")
    void issueEditIssueAttachmentSignalE(OAIAttachment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueEditIssueAttachmentSignalError(OAIAttachment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueEditIssueCommentAttachmentSignalError() instead")
    void issueEditIssueCommentAttachmentSignalE(OAIAttachment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueEditIssueCommentAttachmentSignalError(OAIAttachment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueEditIssueDeadlineSignalError() instead")
    void issueEditIssueDeadlineSignalE(OAIIssueDeadline summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueEditIssueDeadlineSignalError(OAIIssueDeadline summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueEditLabelSignalError() instead")
    void issueEditLabelSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueEditLabelSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueEditMilestoneSignalError() instead")
    void issueEditMilestoneSignalE(OAIMilestone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueEditMilestoneSignalError(OAIMilestone summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetCommentSignalError() instead")
    void issueGetCommentSignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetCommentSignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetCommentReactionsSignalError() instead")
    void issueGetCommentReactionsSignalE(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetCommentReactionsSignalError(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetCommentsSignalError() instead")
    void issueGetCommentsSignalE(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetCommentsSignalError(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetCommentsAndTimelineSignalError() instead")
    void issueGetCommentsAndTimelineSignalE(QList<OAITimelineComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetCommentsAndTimelineSignalError(QList<OAITimelineComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetIssueSignalError() instead")
    void issueGetIssueSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetIssueSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetIssueAttachmentSignalError() instead")
    void issueGetIssueAttachmentSignalE(OAIAttachment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetIssueAttachmentSignalError(OAIAttachment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetIssueCommentAttachmentSignalError() instead")
    void issueGetIssueCommentAttachmentSignalE(OAIAttachment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetIssueCommentAttachmentSignalError(OAIAttachment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetIssueReactionsSignalError() instead")
    void issueGetIssueReactionsSignalE(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetIssueReactionsSignalError(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetLabelSignalError() instead")
    void issueGetLabelSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetLabelSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetLabelsSignalError() instead")
    void issueGetLabelsSignalE(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetLabelsSignalError(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetMilestoneSignalError() instead")
    void issueGetMilestoneSignalE(OAIMilestone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetMilestoneSignalError(OAIMilestone summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetMilestonesListSignalError() instead")
    void issueGetMilestonesListSignalE(QList<OAIMilestone> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetMilestonesListSignalError(QList<OAIMilestone> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetRepoCommentsSignalError() instead")
    void issueGetRepoCommentsSignalE(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetRepoCommentsSignalError(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueListBlocksSignalError() instead")
    void issueListBlocksSignalE(QList<OAIIssue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueListBlocksSignalError(QList<OAIIssue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueListIssueAttachmentsSignalError() instead")
    void issueListIssueAttachmentsSignalE(QList<OAIAttachment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueListIssueAttachmentsSignalError(QList<OAIAttachment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueListIssueCommentAttachmentsSignalError() instead")
    void issueListIssueCommentAttachmentsSignalE(QList<OAIAttachment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueListIssueCommentAttachmentsSignalError(QList<OAIAttachment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueListIssueDependenciesSignalError() instead")
    void issueListIssueDependenciesSignalE(QList<OAIIssue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueListIssueDependenciesSignalError(QList<OAIIssue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueListIssuesSignalError() instead")
    void issueListIssuesSignalE(QList<OAIIssue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueListIssuesSignalError(QList<OAIIssue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueListLabelsSignalError() instead")
    void issueListLabelsSignalE(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueListLabelsSignalError(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issuePostCommentReactionSignalError() instead")
    void issuePostCommentReactionSignalE(OAIReaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issuePostCommentReactionSignalError(OAIReaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issuePostIssueReactionSignalError() instead")
    void issuePostIssueReactionSignalE(OAIReaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issuePostIssueReactionSignalError(OAIReaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueRemoveIssueBlockingSignalError() instead")
    void issueRemoveIssueBlockingSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueRemoveIssueBlockingSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueRemoveIssueDependenciesSignalError() instead")
    void issueRemoveIssueDependenciesSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueRemoveIssueDependenciesSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueRemoveLabelSignalError() instead")
    void issueRemoveLabelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueRemoveLabelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueReplaceLabelsSignalError() instead")
    void issueReplaceLabelsSignalE(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueReplaceLabelsSignalError(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueResetTimeSignalError() instead")
    void issueResetTimeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueResetTimeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueSearchIssuesSignalError() instead")
    void issueSearchIssuesSignalE(QList<OAIIssue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueSearchIssuesSignalError(QList<OAIIssue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueStartStopWatchSignalError() instead")
    void issueStartStopWatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueStartStopWatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueStopStopWatchSignalError() instead")
    void issueStopStopWatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issueStopStopWatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueSubscriptionsSignalError() instead")
    void issueSubscriptionsSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueSubscriptionsSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueTrackedTimesSignalError() instead")
    void issueTrackedTimesSignalE(QList<OAITrackedTime> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueTrackedTimesSignalError(QList<OAITrackedTime> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use issueAddLabelSignalErrorFull() instead")
    void issueAddLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueAddLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueAddSubscriptionSignalErrorFull() instead")
    void issueAddSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueAddSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueAddTimeSignalErrorFull() instead")
    void issueAddTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueAddTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCheckSubscriptionSignalErrorFull() instead")
    void issueCheckSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCheckSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueClearLabelsSignalErrorFull() instead")
    void issueClearLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueClearLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCreateCommentSignalErrorFull() instead")
    void issueCreateCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCreateCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCreateIssueSignalErrorFull() instead")
    void issueCreateIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCreateIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCreateIssueAttachmentSignalErrorFull() instead")
    void issueCreateIssueAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCreateIssueAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCreateIssueBlockingSignalErrorFull() instead")
    void issueCreateIssueBlockingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCreateIssueBlockingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCreateIssueCommentAttachmentSignalErrorFull() instead")
    void issueCreateIssueCommentAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCreateIssueCommentAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCreateIssueDependenciesSignalErrorFull() instead")
    void issueCreateIssueDependenciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCreateIssueDependenciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCreateLabelSignalErrorFull() instead")
    void issueCreateLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCreateLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueCreateMilestoneSignalErrorFull() instead")
    void issueCreateMilestoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueCreateMilestoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteSignalErrorFull() instead")
    void issueDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteCommentSignalErrorFull() instead")
    void issueDeleteCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteCommentDeprecatedSignalErrorFull() instead")
    void issueDeleteCommentDeprecatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteCommentDeprecatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteCommentReactionSignalErrorFull() instead")
    void issueDeleteCommentReactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteCommentReactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteIssueAttachmentSignalErrorFull() instead")
    void issueDeleteIssueAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteIssueAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteIssueCommentAttachmentSignalErrorFull() instead")
    void issueDeleteIssueCommentAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteIssueCommentAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteIssueReactionSignalErrorFull() instead")
    void issueDeleteIssueReactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteIssueReactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteLabelSignalErrorFull() instead")
    void issueDeleteLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteMilestoneSignalErrorFull() instead")
    void issueDeleteMilestoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteMilestoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteStopWatchSignalErrorFull() instead")
    void issueDeleteStopWatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteStopWatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteSubscriptionSignalErrorFull() instead")
    void issueDeleteSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueDeleteTimeSignalErrorFull() instead")
    void issueDeleteTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueDeleteTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueEditCommentSignalErrorFull() instead")
    void issueEditCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueEditCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueEditCommentDeprecatedSignalErrorFull() instead")
    void issueEditCommentDeprecatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueEditCommentDeprecatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueEditIssueSignalErrorFull() instead")
    void issueEditIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueEditIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueEditIssueAttachmentSignalErrorFull() instead")
    void issueEditIssueAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueEditIssueAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueEditIssueCommentAttachmentSignalErrorFull() instead")
    void issueEditIssueCommentAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueEditIssueCommentAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueEditIssueDeadlineSignalErrorFull() instead")
    void issueEditIssueDeadlineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueEditIssueDeadlineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueEditLabelSignalErrorFull() instead")
    void issueEditLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueEditLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueEditMilestoneSignalErrorFull() instead")
    void issueEditMilestoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueEditMilestoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetCommentSignalErrorFull() instead")
    void issueGetCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetCommentReactionsSignalErrorFull() instead")
    void issueGetCommentReactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetCommentReactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetCommentsSignalErrorFull() instead")
    void issueGetCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetCommentsAndTimelineSignalErrorFull() instead")
    void issueGetCommentsAndTimelineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetCommentsAndTimelineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetIssueSignalErrorFull() instead")
    void issueGetIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetIssueAttachmentSignalErrorFull() instead")
    void issueGetIssueAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetIssueAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetIssueCommentAttachmentSignalErrorFull() instead")
    void issueGetIssueCommentAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetIssueCommentAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetIssueReactionsSignalErrorFull() instead")
    void issueGetIssueReactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetIssueReactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetLabelSignalErrorFull() instead")
    void issueGetLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetLabelsSignalErrorFull() instead")
    void issueGetLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetMilestoneSignalErrorFull() instead")
    void issueGetMilestoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetMilestoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetMilestonesListSignalErrorFull() instead")
    void issueGetMilestonesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetMilestonesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueGetRepoCommentsSignalErrorFull() instead")
    void issueGetRepoCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueGetRepoCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueListBlocksSignalErrorFull() instead")
    void issueListBlocksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueListBlocksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueListIssueAttachmentsSignalErrorFull() instead")
    void issueListIssueAttachmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueListIssueAttachmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueListIssueCommentAttachmentsSignalErrorFull() instead")
    void issueListIssueCommentAttachmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueListIssueCommentAttachmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueListIssueDependenciesSignalErrorFull() instead")
    void issueListIssueDependenciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueListIssueDependenciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueListIssuesSignalErrorFull() instead")
    void issueListIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueListIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueListLabelsSignalErrorFull() instead")
    void issueListLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueListLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issuePostCommentReactionSignalErrorFull() instead")
    void issuePostCommentReactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issuePostCommentReactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issuePostIssueReactionSignalErrorFull() instead")
    void issuePostIssueReactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issuePostIssueReactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueRemoveIssueBlockingSignalErrorFull() instead")
    void issueRemoveIssueBlockingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueRemoveIssueBlockingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueRemoveIssueDependenciesSignalErrorFull() instead")
    void issueRemoveIssueDependenciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueRemoveIssueDependenciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueRemoveLabelSignalErrorFull() instead")
    void issueRemoveLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueRemoveLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueReplaceLabelsSignalErrorFull() instead")
    void issueReplaceLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueReplaceLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueResetTimeSignalErrorFull() instead")
    void issueResetTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueResetTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueSearchIssuesSignalErrorFull() instead")
    void issueSearchIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueSearchIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueStartStopWatchSignalErrorFull() instead")
    void issueStartStopWatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueStartStopWatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueStopStopWatchSignalErrorFull() instead")
    void issueStopStopWatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueStopStopWatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueSubscriptionsSignalErrorFull() instead")
    void issueSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueTrackedTimesSignalErrorFull() instead")
    void issueTrackedTimesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueTrackedTimesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
