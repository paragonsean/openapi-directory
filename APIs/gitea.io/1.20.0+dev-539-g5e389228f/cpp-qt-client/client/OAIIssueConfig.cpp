/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueConfig::OAIIssueConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueConfig::OAIIssueConfig() {
    this->initializeModel();
}

OAIIssueConfig::~OAIIssueConfig() {}

void OAIIssueConfig::initializeModel() {

    m_blank_issues_enabled_isSet = false;
    m_blank_issues_enabled_isValid = false;

    m_contact_links_isSet = false;
    m_contact_links_isValid = false;
}

void OAIIssueConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueConfig::fromJsonObject(QJsonObject json) {

    m_blank_issues_enabled_isValid = ::OpenAPI::fromJsonValue(m_blank_issues_enabled, json[QString("blank_issues_enabled")]);
    m_blank_issues_enabled_isSet = !json[QString("blank_issues_enabled")].isNull() && m_blank_issues_enabled_isValid;

    m_contact_links_isValid = ::OpenAPI::fromJsonValue(m_contact_links, json[QString("contact_links")]);
    m_contact_links_isSet = !json[QString("contact_links")].isNull() && m_contact_links_isValid;
}

QString OAIIssueConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_blank_issues_enabled_isSet) {
        obj.insert(QString("blank_issues_enabled"), ::OpenAPI::toJsonValue(m_blank_issues_enabled));
    }
    if (m_contact_links.size() > 0) {
        obj.insert(QString("contact_links"), ::OpenAPI::toJsonValue(m_contact_links));
    }
    return obj;
}

bool OAIIssueConfig::isBlankIssuesEnabled() const {
    return m_blank_issues_enabled;
}
void OAIIssueConfig::setBlankIssuesEnabled(const bool &blank_issues_enabled) {
    m_blank_issues_enabled = blank_issues_enabled;
    m_blank_issues_enabled_isSet = true;
}

bool OAIIssueConfig::is_blank_issues_enabled_Set() const{
    return m_blank_issues_enabled_isSet;
}

bool OAIIssueConfig::is_blank_issues_enabled_Valid() const{
    return m_blank_issues_enabled_isValid;
}

QList<OAIIssueConfigContactLink> OAIIssueConfig::getContactLinks() const {
    return m_contact_links;
}
void OAIIssueConfig::setContactLinks(const QList<OAIIssueConfigContactLink> &contact_links) {
    m_contact_links = contact_links;
    m_contact_links_isSet = true;
}

bool OAIIssueConfig::is_contact_links_Set() const{
    return m_contact_links_isSet;
}

bool OAIIssueConfig::is_contact_links_Valid() const{
    return m_contact_links_isValid;
}

bool OAIIssueConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blank_issues_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
