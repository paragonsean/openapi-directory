/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMergePullRequestOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMergePullRequestOption::OAIMergePullRequestOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMergePullRequestOption::OAIMergePullRequestOption() {
    this->initializeModel();
}

OAIMergePullRequestOption::~OAIMergePullRequestOption() {}

void OAIMergePullRequestOption::initializeModel() {

    m_r_do_isSet = false;
    m_r_do_isValid = false;

    m_merge_commit_id_isSet = false;
    m_merge_commit_id_isValid = false;

    m_merge_message_field_isSet = false;
    m_merge_message_field_isValid = false;

    m_merge_title_field_isSet = false;
    m_merge_title_field_isValid = false;

    m_delete_branch_after_merge_isSet = false;
    m_delete_branch_after_merge_isValid = false;

    m_force_merge_isSet = false;
    m_force_merge_isValid = false;

    m_head_commit_id_isSet = false;
    m_head_commit_id_isValid = false;

    m_merge_when_checks_succeed_isSet = false;
    m_merge_when_checks_succeed_isValid = false;
}

void OAIMergePullRequestOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMergePullRequestOption::fromJsonObject(QJsonObject json) {

    m_r_do_isValid = ::OpenAPI::fromJsonValue(m_r_do, json[QString("Do")]);
    m_r_do_isSet = !json[QString("Do")].isNull() && m_r_do_isValid;

    m_merge_commit_id_isValid = ::OpenAPI::fromJsonValue(m_merge_commit_id, json[QString("MergeCommitID")]);
    m_merge_commit_id_isSet = !json[QString("MergeCommitID")].isNull() && m_merge_commit_id_isValid;

    m_merge_message_field_isValid = ::OpenAPI::fromJsonValue(m_merge_message_field, json[QString("MergeMessageField")]);
    m_merge_message_field_isSet = !json[QString("MergeMessageField")].isNull() && m_merge_message_field_isValid;

    m_merge_title_field_isValid = ::OpenAPI::fromJsonValue(m_merge_title_field, json[QString("MergeTitleField")]);
    m_merge_title_field_isSet = !json[QString("MergeTitleField")].isNull() && m_merge_title_field_isValid;

    m_delete_branch_after_merge_isValid = ::OpenAPI::fromJsonValue(m_delete_branch_after_merge, json[QString("delete_branch_after_merge")]);
    m_delete_branch_after_merge_isSet = !json[QString("delete_branch_after_merge")].isNull() && m_delete_branch_after_merge_isValid;

    m_force_merge_isValid = ::OpenAPI::fromJsonValue(m_force_merge, json[QString("force_merge")]);
    m_force_merge_isSet = !json[QString("force_merge")].isNull() && m_force_merge_isValid;

    m_head_commit_id_isValid = ::OpenAPI::fromJsonValue(m_head_commit_id, json[QString("head_commit_id")]);
    m_head_commit_id_isSet = !json[QString("head_commit_id")].isNull() && m_head_commit_id_isValid;

    m_merge_when_checks_succeed_isValid = ::OpenAPI::fromJsonValue(m_merge_when_checks_succeed, json[QString("merge_when_checks_succeed")]);
    m_merge_when_checks_succeed_isSet = !json[QString("merge_when_checks_succeed")].isNull() && m_merge_when_checks_succeed_isValid;
}

QString OAIMergePullRequestOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMergePullRequestOption::asJsonObject() const {
    QJsonObject obj;
    if (m_r_do_isSet) {
        obj.insert(QString("Do"), ::OpenAPI::toJsonValue(m_r_do));
    }
    if (m_merge_commit_id_isSet) {
        obj.insert(QString("MergeCommitID"), ::OpenAPI::toJsonValue(m_merge_commit_id));
    }
    if (m_merge_message_field_isSet) {
        obj.insert(QString("MergeMessageField"), ::OpenAPI::toJsonValue(m_merge_message_field));
    }
    if (m_merge_title_field_isSet) {
        obj.insert(QString("MergeTitleField"), ::OpenAPI::toJsonValue(m_merge_title_field));
    }
    if (m_delete_branch_after_merge_isSet) {
        obj.insert(QString("delete_branch_after_merge"), ::OpenAPI::toJsonValue(m_delete_branch_after_merge));
    }
    if (m_force_merge_isSet) {
        obj.insert(QString("force_merge"), ::OpenAPI::toJsonValue(m_force_merge));
    }
    if (m_head_commit_id_isSet) {
        obj.insert(QString("head_commit_id"), ::OpenAPI::toJsonValue(m_head_commit_id));
    }
    if (m_merge_when_checks_succeed_isSet) {
        obj.insert(QString("merge_when_checks_succeed"), ::OpenAPI::toJsonValue(m_merge_when_checks_succeed));
    }
    return obj;
}

QString OAIMergePullRequestOption::getRDo() const {
    return m_r_do;
}
void OAIMergePullRequestOption::setRDo(const QString &r_do) {
    m_r_do = r_do;
    m_r_do_isSet = true;
}

bool OAIMergePullRequestOption::is_r_do_Set() const{
    return m_r_do_isSet;
}

bool OAIMergePullRequestOption::is_r_do_Valid() const{
    return m_r_do_isValid;
}

QString OAIMergePullRequestOption::getMergeCommitId() const {
    return m_merge_commit_id;
}
void OAIMergePullRequestOption::setMergeCommitId(const QString &merge_commit_id) {
    m_merge_commit_id = merge_commit_id;
    m_merge_commit_id_isSet = true;
}

bool OAIMergePullRequestOption::is_merge_commit_id_Set() const{
    return m_merge_commit_id_isSet;
}

bool OAIMergePullRequestOption::is_merge_commit_id_Valid() const{
    return m_merge_commit_id_isValid;
}

QString OAIMergePullRequestOption::getMergeMessageField() const {
    return m_merge_message_field;
}
void OAIMergePullRequestOption::setMergeMessageField(const QString &merge_message_field) {
    m_merge_message_field = merge_message_field;
    m_merge_message_field_isSet = true;
}

bool OAIMergePullRequestOption::is_merge_message_field_Set() const{
    return m_merge_message_field_isSet;
}

bool OAIMergePullRequestOption::is_merge_message_field_Valid() const{
    return m_merge_message_field_isValid;
}

QString OAIMergePullRequestOption::getMergeTitleField() const {
    return m_merge_title_field;
}
void OAIMergePullRequestOption::setMergeTitleField(const QString &merge_title_field) {
    m_merge_title_field = merge_title_field;
    m_merge_title_field_isSet = true;
}

bool OAIMergePullRequestOption::is_merge_title_field_Set() const{
    return m_merge_title_field_isSet;
}

bool OAIMergePullRequestOption::is_merge_title_field_Valid() const{
    return m_merge_title_field_isValid;
}

bool OAIMergePullRequestOption::isDeleteBranchAfterMerge() const {
    return m_delete_branch_after_merge;
}
void OAIMergePullRequestOption::setDeleteBranchAfterMerge(const bool &delete_branch_after_merge) {
    m_delete_branch_after_merge = delete_branch_after_merge;
    m_delete_branch_after_merge_isSet = true;
}

bool OAIMergePullRequestOption::is_delete_branch_after_merge_Set() const{
    return m_delete_branch_after_merge_isSet;
}

bool OAIMergePullRequestOption::is_delete_branch_after_merge_Valid() const{
    return m_delete_branch_after_merge_isValid;
}

bool OAIMergePullRequestOption::isForceMerge() const {
    return m_force_merge;
}
void OAIMergePullRequestOption::setForceMerge(const bool &force_merge) {
    m_force_merge = force_merge;
    m_force_merge_isSet = true;
}

bool OAIMergePullRequestOption::is_force_merge_Set() const{
    return m_force_merge_isSet;
}

bool OAIMergePullRequestOption::is_force_merge_Valid() const{
    return m_force_merge_isValid;
}

QString OAIMergePullRequestOption::getHeadCommitId() const {
    return m_head_commit_id;
}
void OAIMergePullRequestOption::setHeadCommitId(const QString &head_commit_id) {
    m_head_commit_id = head_commit_id;
    m_head_commit_id_isSet = true;
}

bool OAIMergePullRequestOption::is_head_commit_id_Set() const{
    return m_head_commit_id_isSet;
}

bool OAIMergePullRequestOption::is_head_commit_id_Valid() const{
    return m_head_commit_id_isValid;
}

bool OAIMergePullRequestOption::isMergeWhenChecksSucceed() const {
    return m_merge_when_checks_succeed;
}
void OAIMergePullRequestOption::setMergeWhenChecksSucceed(const bool &merge_when_checks_succeed) {
    m_merge_when_checks_succeed = merge_when_checks_succeed;
    m_merge_when_checks_succeed_isSet = true;
}

bool OAIMergePullRequestOption::is_merge_when_checks_succeed_Set() const{
    return m_merge_when_checks_succeed_isSet;
}

bool OAIMergePullRequestOption::is_merge_when_checks_succeed_Valid() const{
    return m_merge_when_checks_succeed_isValid;
}

bool OAIMergePullRequestOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_do_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_message_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_title_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_branch_after_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_when_checks_succeed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMergePullRequestOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_do_isValid && true;
}

} // namespace OpenAPI
