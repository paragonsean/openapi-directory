/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPullRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPullRequest::OAIPullRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPullRequest::OAIPullRequest() {
    this->initializeModel();
}

OAIPullRequest::~OAIPullRequest() {}

void OAIPullRequest::initializeModel() {

    m_allow_maintainer_edit_isSet = false;
    m_allow_maintainer_edit_isValid = false;

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_assignees_isSet = false;
    m_assignees_isValid = false;

    m_base_isSet = false;
    m_base_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_closed_at_isSet = false;
    m_closed_at_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_diff_url_isSet = false;
    m_diff_url_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_head_isSet = false;
    m_head_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_locked_isSet = false;
    m_is_locked_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_merge_base_isSet = false;
    m_merge_base_isValid = false;

    m_merge_commit_sha_isSet = false;
    m_merge_commit_sha_isValid = false;

    m_mergeable_isSet = false;
    m_mergeable_isValid = false;

    m_merged_isSet = false;
    m_merged_isValid = false;

    m_merged_at_isSet = false;
    m_merged_at_isValid = false;

    m_merged_by_isSet = false;
    m_merged_by_isValid = false;

    m_milestone_isSet = false;
    m_milestone_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_patch_url_isSet = false;
    m_patch_url_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIPullRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPullRequest::fromJsonObject(QJsonObject json) {

    m_allow_maintainer_edit_isValid = ::OpenAPI::fromJsonValue(m_allow_maintainer_edit, json[QString("allow_maintainer_edit")]);
    m_allow_maintainer_edit_isSet = !json[QString("allow_maintainer_edit")].isNull() && m_allow_maintainer_edit_isValid;

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_assignees_isValid = ::OpenAPI::fromJsonValue(m_assignees, json[QString("assignees")]);
    m_assignees_isSet = !json[QString("assignees")].isNull() && m_assignees_isValid;

    m_base_isValid = ::OpenAPI::fromJsonValue(m_base, json[QString("base")]);
    m_base_isSet = !json[QString("base")].isNull() && m_base_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_closed_at_isValid = ::OpenAPI::fromJsonValue(m_closed_at, json[QString("closed_at")]);
    m_closed_at_isSet = !json[QString("closed_at")].isNull() && m_closed_at_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_diff_url_isValid = ::OpenAPI::fromJsonValue(m_diff_url, json[QString("diff_url")]);
    m_diff_url_isSet = !json[QString("diff_url")].isNull() && m_diff_url_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("due_date")]);
    m_due_date_isSet = !json[QString("due_date")].isNull() && m_due_date_isValid;

    m_head_isValid = ::OpenAPI::fromJsonValue(m_head, json[QString("head")]);
    m_head_isSet = !json[QString("head")].isNull() && m_head_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_locked_isValid = ::OpenAPI::fromJsonValue(m_is_locked, json[QString("is_locked")]);
    m_is_locked_isSet = !json[QString("is_locked")].isNull() && m_is_locked_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_merge_base_isValid = ::OpenAPI::fromJsonValue(m_merge_base, json[QString("merge_base")]);
    m_merge_base_isSet = !json[QString("merge_base")].isNull() && m_merge_base_isValid;

    m_merge_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_merge_commit_sha, json[QString("merge_commit_sha")]);
    m_merge_commit_sha_isSet = !json[QString("merge_commit_sha")].isNull() && m_merge_commit_sha_isValid;

    m_mergeable_isValid = ::OpenAPI::fromJsonValue(m_mergeable, json[QString("mergeable")]);
    m_mergeable_isSet = !json[QString("mergeable")].isNull() && m_mergeable_isValid;

    m_merged_isValid = ::OpenAPI::fromJsonValue(m_merged, json[QString("merged")]);
    m_merged_isSet = !json[QString("merged")].isNull() && m_merged_isValid;

    m_merged_at_isValid = ::OpenAPI::fromJsonValue(m_merged_at, json[QString("merged_at")]);
    m_merged_at_isSet = !json[QString("merged_at")].isNull() && m_merged_at_isValid;

    m_merged_by_isValid = ::OpenAPI::fromJsonValue(m_merged_by, json[QString("merged_by")]);
    m_merged_by_isSet = !json[QString("merged_by")].isNull() && m_merged_by_isValid;

    m_milestone_isValid = ::OpenAPI::fromJsonValue(m_milestone, json[QString("milestone")]);
    m_milestone_isSet = !json[QString("milestone")].isNull() && m_milestone_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_patch_url_isValid = ::OpenAPI::fromJsonValue(m_patch_url, json[QString("patch_url")]);
    m_patch_url_isSet = !json[QString("patch_url")].isNull() && m_patch_url_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIPullRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPullRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_maintainer_edit_isSet) {
        obj.insert(QString("allow_maintainer_edit"), ::OpenAPI::toJsonValue(m_allow_maintainer_edit));
    }
    if (m_assignee.isSet()) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_assignees.size() > 0) {
        obj.insert(QString("assignees"), ::OpenAPI::toJsonValue(m_assignees));
    }
    if (m_base.isSet()) {
        obj.insert(QString("base"), ::OpenAPI::toJsonValue(m_base));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_closed_at_isSet) {
        obj.insert(QString("closed_at"), ::OpenAPI::toJsonValue(m_closed_at));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_diff_url_isSet) {
        obj.insert(QString("diff_url"), ::OpenAPI::toJsonValue(m_diff_url));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("due_date"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_head.isSet()) {
        obj.insert(QString("head"), ::OpenAPI::toJsonValue(m_head));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_locked_isSet) {
        obj.insert(QString("is_locked"), ::OpenAPI::toJsonValue(m_is_locked));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_merge_base_isSet) {
        obj.insert(QString("merge_base"), ::OpenAPI::toJsonValue(m_merge_base));
    }
    if (m_merge_commit_sha_isSet) {
        obj.insert(QString("merge_commit_sha"), ::OpenAPI::toJsonValue(m_merge_commit_sha));
    }
    if (m_mergeable_isSet) {
        obj.insert(QString("mergeable"), ::OpenAPI::toJsonValue(m_mergeable));
    }
    if (m_merged_isSet) {
        obj.insert(QString("merged"), ::OpenAPI::toJsonValue(m_merged));
    }
    if (m_merged_at_isSet) {
        obj.insert(QString("merged_at"), ::OpenAPI::toJsonValue(m_merged_at));
    }
    if (m_merged_by.isSet()) {
        obj.insert(QString("merged_by"), ::OpenAPI::toJsonValue(m_merged_by));
    }
    if (m_milestone.isSet()) {
        obj.insert(QString("milestone"), ::OpenAPI::toJsonValue(m_milestone));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_patch_url_isSet) {
        obj.insert(QString("patch_url"), ::OpenAPI::toJsonValue(m_patch_url));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

bool OAIPullRequest::isAllowMaintainerEdit() const {
    return m_allow_maintainer_edit;
}
void OAIPullRequest::setAllowMaintainerEdit(const bool &allow_maintainer_edit) {
    m_allow_maintainer_edit = allow_maintainer_edit;
    m_allow_maintainer_edit_isSet = true;
}

bool OAIPullRequest::is_allow_maintainer_edit_Set() const{
    return m_allow_maintainer_edit_isSet;
}

bool OAIPullRequest::is_allow_maintainer_edit_Valid() const{
    return m_allow_maintainer_edit_isValid;
}

OAIUser OAIPullRequest::getAssignee() const {
    return m_assignee;
}
void OAIPullRequest::setAssignee(const OAIUser &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAIPullRequest::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAIPullRequest::is_assignee_Valid() const{
    return m_assignee_isValid;
}

QList<OAIUser> OAIPullRequest::getAssignees() const {
    return m_assignees;
}
void OAIPullRequest::setAssignees(const QList<OAIUser> &assignees) {
    m_assignees = assignees;
    m_assignees_isSet = true;
}

bool OAIPullRequest::is_assignees_Set() const{
    return m_assignees_isSet;
}

bool OAIPullRequest::is_assignees_Valid() const{
    return m_assignees_isValid;
}

OAIPRBranchInfo OAIPullRequest::getBase() const {
    return m_base;
}
void OAIPullRequest::setBase(const OAIPRBranchInfo &base) {
    m_base = base;
    m_base_isSet = true;
}

bool OAIPullRequest::is_base_Set() const{
    return m_base_isSet;
}

bool OAIPullRequest::is_base_Valid() const{
    return m_base_isValid;
}

QString OAIPullRequest::getBody() const {
    return m_body;
}
void OAIPullRequest::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIPullRequest::is_body_Set() const{
    return m_body_isSet;
}

bool OAIPullRequest::is_body_Valid() const{
    return m_body_isValid;
}

QDateTime OAIPullRequest::getClosedAt() const {
    return m_closed_at;
}
void OAIPullRequest::setClosedAt(const QDateTime &closed_at) {
    m_closed_at = closed_at;
    m_closed_at_isSet = true;
}

bool OAIPullRequest::is_closed_at_Set() const{
    return m_closed_at_isSet;
}

bool OAIPullRequest::is_closed_at_Valid() const{
    return m_closed_at_isValid;
}

qint64 OAIPullRequest::getComments() const {
    return m_comments;
}
void OAIPullRequest::setComments(const qint64 &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIPullRequest::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIPullRequest::is_comments_Valid() const{
    return m_comments_isValid;
}

QDateTime OAIPullRequest::getCreatedAt() const {
    return m_created_at;
}
void OAIPullRequest::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPullRequest::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPullRequest::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPullRequest::getDiffUrl() const {
    return m_diff_url;
}
void OAIPullRequest::setDiffUrl(const QString &diff_url) {
    m_diff_url = diff_url;
    m_diff_url_isSet = true;
}

bool OAIPullRequest::is_diff_url_Set() const{
    return m_diff_url_isSet;
}

bool OAIPullRequest::is_diff_url_Valid() const{
    return m_diff_url_isValid;
}

QDateTime OAIPullRequest::getDueDate() const {
    return m_due_date;
}
void OAIPullRequest::setDueDate(const QDateTime &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIPullRequest::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIPullRequest::is_due_date_Valid() const{
    return m_due_date_isValid;
}

OAIPRBranchInfo OAIPullRequest::getHead() const {
    return m_head;
}
void OAIPullRequest::setHead(const OAIPRBranchInfo &head) {
    m_head = head;
    m_head_isSet = true;
}

bool OAIPullRequest::is_head_Set() const{
    return m_head_isSet;
}

bool OAIPullRequest::is_head_Valid() const{
    return m_head_isValid;
}

QString OAIPullRequest::getHtmlUrl() const {
    return m_html_url;
}
void OAIPullRequest::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIPullRequest::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIPullRequest::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint64 OAIPullRequest::getId() const {
    return m_id;
}
void OAIPullRequest::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPullRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPullRequest::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPullRequest::isIsLocked() const {
    return m_is_locked;
}
void OAIPullRequest::setIsLocked(const bool &is_locked) {
    m_is_locked = is_locked;
    m_is_locked_isSet = true;
}

bool OAIPullRequest::is_is_locked_Set() const{
    return m_is_locked_isSet;
}

bool OAIPullRequest::is_is_locked_Valid() const{
    return m_is_locked_isValid;
}

QList<OAILabel> OAIPullRequest::getLabels() const {
    return m_labels;
}
void OAIPullRequest::setLabels(const QList<OAILabel> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIPullRequest::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIPullRequest::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIPullRequest::getMergeBase() const {
    return m_merge_base;
}
void OAIPullRequest::setMergeBase(const QString &merge_base) {
    m_merge_base = merge_base;
    m_merge_base_isSet = true;
}

bool OAIPullRequest::is_merge_base_Set() const{
    return m_merge_base_isSet;
}

bool OAIPullRequest::is_merge_base_Valid() const{
    return m_merge_base_isValid;
}

QString OAIPullRequest::getMergeCommitSha() const {
    return m_merge_commit_sha;
}
void OAIPullRequest::setMergeCommitSha(const QString &merge_commit_sha) {
    m_merge_commit_sha = merge_commit_sha;
    m_merge_commit_sha_isSet = true;
}

bool OAIPullRequest::is_merge_commit_sha_Set() const{
    return m_merge_commit_sha_isSet;
}

bool OAIPullRequest::is_merge_commit_sha_Valid() const{
    return m_merge_commit_sha_isValid;
}

bool OAIPullRequest::isMergeable() const {
    return m_mergeable;
}
void OAIPullRequest::setMergeable(const bool &mergeable) {
    m_mergeable = mergeable;
    m_mergeable_isSet = true;
}

bool OAIPullRequest::is_mergeable_Set() const{
    return m_mergeable_isSet;
}

bool OAIPullRequest::is_mergeable_Valid() const{
    return m_mergeable_isValid;
}

bool OAIPullRequest::isMerged() const {
    return m_merged;
}
void OAIPullRequest::setMerged(const bool &merged) {
    m_merged = merged;
    m_merged_isSet = true;
}

bool OAIPullRequest::is_merged_Set() const{
    return m_merged_isSet;
}

bool OAIPullRequest::is_merged_Valid() const{
    return m_merged_isValid;
}

QDateTime OAIPullRequest::getMergedAt() const {
    return m_merged_at;
}
void OAIPullRequest::setMergedAt(const QDateTime &merged_at) {
    m_merged_at = merged_at;
    m_merged_at_isSet = true;
}

bool OAIPullRequest::is_merged_at_Set() const{
    return m_merged_at_isSet;
}

bool OAIPullRequest::is_merged_at_Valid() const{
    return m_merged_at_isValid;
}

OAIUser OAIPullRequest::getMergedBy() const {
    return m_merged_by;
}
void OAIPullRequest::setMergedBy(const OAIUser &merged_by) {
    m_merged_by = merged_by;
    m_merged_by_isSet = true;
}

bool OAIPullRequest::is_merged_by_Set() const{
    return m_merged_by_isSet;
}

bool OAIPullRequest::is_merged_by_Valid() const{
    return m_merged_by_isValid;
}

OAIMilestone OAIPullRequest::getMilestone() const {
    return m_milestone;
}
void OAIPullRequest::setMilestone(const OAIMilestone &milestone) {
    m_milestone = milestone;
    m_milestone_isSet = true;
}

bool OAIPullRequest::is_milestone_Set() const{
    return m_milestone_isSet;
}

bool OAIPullRequest::is_milestone_Valid() const{
    return m_milestone_isValid;
}

qint64 OAIPullRequest::getNumber() const {
    return m_number;
}
void OAIPullRequest::setNumber(const qint64 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPullRequest::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPullRequest::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIPullRequest::getPatchUrl() const {
    return m_patch_url;
}
void OAIPullRequest::setPatchUrl(const QString &patch_url) {
    m_patch_url = patch_url;
    m_patch_url_isSet = true;
}

bool OAIPullRequest::is_patch_url_Set() const{
    return m_patch_url_isSet;
}

bool OAIPullRequest::is_patch_url_Valid() const{
    return m_patch_url_isValid;
}

QString OAIPullRequest::getState() const {
    return m_state;
}
void OAIPullRequest::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPullRequest::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPullRequest::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIPullRequest::getTitle() const {
    return m_title;
}
void OAIPullRequest::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPullRequest::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPullRequest::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIPullRequest::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPullRequest::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPullRequest::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPullRequest::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIPullRequest::getUrl() const {
    return m_url;
}
void OAIPullRequest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPullRequest::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPullRequest::is_url_Valid() const{
    return m_url_isValid;
}

OAIUser OAIPullRequest::getUser() const {
    return m_user;
}
void OAIPullRequest::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIPullRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIPullRequest::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIPullRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_maintainer_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_base.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diff_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mergeable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPullRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
