/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitMeta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitMeta::OAICommitMeta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitMeta::OAICommitMeta() {
    this->initializeModel();
}

OAICommitMeta::~OAICommitMeta() {}

void OAICommitMeta::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICommitMeta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitMeta::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICommitMeta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitMeta::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDateTime OAICommitMeta::getCreated() const {
    return m_created;
}
void OAICommitMeta::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAICommitMeta::is_created_Set() const{
    return m_created_isSet;
}

bool OAICommitMeta::is_created_Valid() const{
    return m_created_isValid;
}

QString OAICommitMeta::getSha() const {
    return m_sha;
}
void OAICommitMeta::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAICommitMeta::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAICommitMeta::is_sha_Valid() const{
    return m_sha_isValid;
}

QString OAICommitMeta::getUrl() const {
    return m_url;
}
void OAICommitMeta::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICommitMeta::is_url_Set() const{
    return m_url_isSet;
}

bool OAICommitMeta::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICommitMeta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitMeta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
