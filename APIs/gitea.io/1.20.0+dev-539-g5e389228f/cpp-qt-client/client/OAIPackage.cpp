/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackage::OAIPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackage::OAIPackage() {
    this->initializeModel();
}

OAIPackage::~OAIPackage() {}

void OAIPackage::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackage::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creator.isSet()) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QDateTime OAIPackage::getCreatedAt() const {
    return m_created_at;
}
void OAIPackage::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPackage::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPackage::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIUser OAIPackage::getCreator() const {
    return m_creator;
}
void OAIPackage::setCreator(const OAIUser &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIPackage::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIPackage::is_creator_Valid() const{
    return m_creator_isValid;
}

qint64 OAIPackage::getId() const {
    return m_id;
}
void OAIPackage::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPackage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPackage::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPackage::getName() const {
    return m_name;
}
void OAIPackage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPackage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPackage::is_name_Valid() const{
    return m_name_isValid;
}

OAIUser OAIPackage::getOwner() const {
    return m_owner;
}
void OAIPackage::setOwner(const OAIUser &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIPackage::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIPackage::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIRepository OAIPackage::getRepository() const {
    return m_repository;
}
void OAIPackage::setRepository(const OAIRepository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIPackage::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIPackage::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAIPackage::getType() const {
    return m_type;
}
void OAIPackage::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPackage::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPackage::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPackage::getVersion() const {
    return m_version;
}
void OAIPackage::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPackage::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPackage::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
