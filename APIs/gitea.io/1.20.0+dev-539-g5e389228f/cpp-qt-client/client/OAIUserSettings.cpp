/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserSettings::OAIUserSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserSettings::OAIUserSettings() {
    this->initializeModel();
}

OAIUserSettings::~OAIUserSettings() {}

void OAIUserSettings::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_diff_view_style_isSet = false;
    m_diff_view_style_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_hide_activity_isSet = false;
    m_hide_activity_isValid = false;

    m_hide_email_isSet = false;
    m_hide_email_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_theme_isSet = false;
    m_theme_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIUserSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserSettings::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_diff_view_style_isValid = ::OpenAPI::fromJsonValue(m_diff_view_style, json[QString("diff_view_style")]);
    m_diff_view_style_isSet = !json[QString("diff_view_style")].isNull() && m_diff_view_style_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_hide_activity_isValid = ::OpenAPI::fromJsonValue(m_hide_activity, json[QString("hide_activity")]);
    m_hide_activity_isSet = !json[QString("hide_activity")].isNull() && m_hide_activity_isValid;

    m_hide_email_isValid = ::OpenAPI::fromJsonValue(m_hide_email, json[QString("hide_email")]);
    m_hide_email_isSet = !json[QString("hide_email")].isNull() && m_hide_email_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_theme_isValid = ::OpenAPI::fromJsonValue(m_theme, json[QString("theme")]);
    m_theme_isSet = !json[QString("theme")].isNull() && m_theme_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIUserSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_diff_view_style_isSet) {
        obj.insert(QString("diff_view_style"), ::OpenAPI::toJsonValue(m_diff_view_style));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_hide_activity_isSet) {
        obj.insert(QString("hide_activity"), ::OpenAPI::toJsonValue(m_hide_activity));
    }
    if (m_hide_email_isSet) {
        obj.insert(QString("hide_email"), ::OpenAPI::toJsonValue(m_hide_email));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_theme_isSet) {
        obj.insert(QString("theme"), ::OpenAPI::toJsonValue(m_theme));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAIUserSettings::getDescription() const {
    return m_description;
}
void OAIUserSettings::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUserSettings::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUserSettings::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUserSettings::getDiffViewStyle() const {
    return m_diff_view_style;
}
void OAIUserSettings::setDiffViewStyle(const QString &diff_view_style) {
    m_diff_view_style = diff_view_style;
    m_diff_view_style_isSet = true;
}

bool OAIUserSettings::is_diff_view_style_Set() const{
    return m_diff_view_style_isSet;
}

bool OAIUserSettings::is_diff_view_style_Valid() const{
    return m_diff_view_style_isValid;
}

QString OAIUserSettings::getFullName() const {
    return m_full_name;
}
void OAIUserSettings::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIUserSettings::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIUserSettings::is_full_name_Valid() const{
    return m_full_name_isValid;
}

bool OAIUserSettings::isHideActivity() const {
    return m_hide_activity;
}
void OAIUserSettings::setHideActivity(const bool &hide_activity) {
    m_hide_activity = hide_activity;
    m_hide_activity_isSet = true;
}

bool OAIUserSettings::is_hide_activity_Set() const{
    return m_hide_activity_isSet;
}

bool OAIUserSettings::is_hide_activity_Valid() const{
    return m_hide_activity_isValid;
}

bool OAIUserSettings::isHideEmail() const {
    return m_hide_email;
}
void OAIUserSettings::setHideEmail(const bool &hide_email) {
    m_hide_email = hide_email;
    m_hide_email_isSet = true;
}

bool OAIUserSettings::is_hide_email_Set() const{
    return m_hide_email_isSet;
}

bool OAIUserSettings::is_hide_email_Valid() const{
    return m_hide_email_isValid;
}

QString OAIUserSettings::getLanguage() const {
    return m_language;
}
void OAIUserSettings::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIUserSettings::is_language_Set() const{
    return m_language_isSet;
}

bool OAIUserSettings::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIUserSettings::getLocation() const {
    return m_location;
}
void OAIUserSettings::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIUserSettings::is_location_Set() const{
    return m_location_isSet;
}

bool OAIUserSettings::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIUserSettings::getTheme() const {
    return m_theme;
}
void OAIUserSettings::setTheme(const QString &theme) {
    m_theme = theme;
    m_theme_isSet = true;
}

bool OAIUserSettings::is_theme_Set() const{
    return m_theme_isSet;
}

bool OAIUserSettings::is_theme_Valid() const{
    return m_theme_isValid;
}

QString OAIUserSettings::getWebsite() const {
    return m_website;
}
void OAIUserSettings::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIUserSettings::is_website_Set() const{
    return m_website_isSet;
}

bool OAIUserSettings::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIUserSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diff_view_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
