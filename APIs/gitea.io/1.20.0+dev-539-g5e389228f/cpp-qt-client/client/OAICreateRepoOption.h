/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateRepoOption.h
 *
 * CreateRepoOption options when creating repository
 */

#ifndef OAICreateRepoOption_H
#define OAICreateRepoOption_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateRepoOption : public OAIObject {
public:
    OAICreateRepoOption();
    OAICreateRepoOption(QString json);
    ~OAICreateRepoOption() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAutoInit() const;
    void setAutoInit(const bool &auto_init);
    bool is_auto_init_Set() const;
    bool is_auto_init_Valid() const;

    QString getDefaultBranch() const;
    void setDefaultBranch(const QString &default_branch);
    bool is_default_branch_Set() const;
    bool is_default_branch_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getGitignores() const;
    void setGitignores(const QString &gitignores);
    bool is_gitignores_Set() const;
    bool is_gitignores_Valid() const;

    QString getIssueLabels() const;
    void setIssueLabels(const QString &issue_labels);
    bool is_issue_labels_Set() const;
    bool is_issue_labels_Valid() const;

    QString getLicense() const;
    void setLicense(const QString &license);
    bool is_license_Set() const;
    bool is_license_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isRPrivate() const;
    void setRPrivate(const bool &r_private);
    bool is_r_private_Set() const;
    bool is_r_private_Valid() const;

    QString getReadme() const;
    void setReadme(const QString &readme);
    bool is_readme_Set() const;
    bool is_readme_Valid() const;

    bool isRTemplate() const;
    void setRTemplate(const bool &r_template);
    bool is_r_template_Set() const;
    bool is_r_template_Valid() const;

    QString getTrustModel() const;
    void setTrustModel(const QString &trust_model);
    bool is_trust_model_Set() const;
    bool is_trust_model_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_auto_init;
    bool m_auto_init_isSet;
    bool m_auto_init_isValid;

    QString m_default_branch;
    bool m_default_branch_isSet;
    bool m_default_branch_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_gitignores;
    bool m_gitignores_isSet;
    bool m_gitignores_isValid;

    QString m_issue_labels;
    bool m_issue_labels_isSet;
    bool m_issue_labels_isValid;

    QString m_license;
    bool m_license_isSet;
    bool m_license_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_r_private;
    bool m_r_private_isSet;
    bool m_r_private_isValid;

    QString m_readme;
    bool m_readme_isSet;
    bool m_readme_isValid;

    bool m_r_template;
    bool m_r_template_isSet;
    bool m_r_template_isValid;

    QString m_trust_model;
    bool m_trust_model_isSet;
    bool m_trust_model_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateRepoOption)

#endif // OAICreateRepoOption_H
