/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotificationApi_H
#define OAI_OAINotificationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINotificationCount.h"
#include "OAINotificationThread.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotificationApi : public QObject {
    Q_OBJECT

public:
    OAINotificationApi(const int timeOut = 0);
    ~OAINotificationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  all bool [optional]
    * @param[in]  status_types QList<QString> [optional]
    * @param[in]  subject_type QList<QString> [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  before QDateTime [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void notifyGetList(const ::OpenAPI::OptionalParam<bool> &all = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &status_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &subject_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  all bool [optional]
    * @param[in]  status_types QList<QString> [optional]
    * @param[in]  subject_type QList<QString> [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  before QDateTime [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void notifyGetRepoList(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<bool> &all = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &status_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &subject_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void notifyGetThread(const QString &id);


    virtual void notifyNewAvailable();

    /**
    * @param[in]  last_read_at QDateTime [optional]
    * @param[in]  all QString [optional]
    * @param[in]  status_types QList<QString> [optional]
    * @param[in]  to_status QString [optional]
    */
    virtual void notifyReadList(const ::OpenAPI::OptionalParam<QDateTime> &last_read_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &all = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &status_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &to_status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  all QString [optional]
    * @param[in]  status_types QList<QString> [optional]
    * @param[in]  to_status QString [optional]
    * @param[in]  last_read_at QDateTime [optional]
    */
    virtual void notifyReadRepoList(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &all = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &status_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &to_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &last_read_at = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  to_status QString [optional]
    */
    virtual void notifyReadThread(const QString &id, const ::OpenAPI::OptionalParam<QString> &to_status = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void notifyGetListCallback(OAIHttpRequestWorker *worker);
    void notifyGetRepoListCallback(OAIHttpRequestWorker *worker);
    void notifyGetThreadCallback(OAIHttpRequestWorker *worker);
    void notifyNewAvailableCallback(OAIHttpRequestWorker *worker);
    void notifyReadListCallback(OAIHttpRequestWorker *worker);
    void notifyReadRepoListCallback(OAIHttpRequestWorker *worker);
    void notifyReadThreadCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void notifyGetListSignal(QList<OAINotificationThread> summary);
    void notifyGetRepoListSignal(QList<OAINotificationThread> summary);
    void notifyGetThreadSignal(OAINotificationThread summary);
    void notifyNewAvailableSignal(OAINotificationCount summary);
    void notifyReadListSignal(QList<OAINotificationThread> summary);
    void notifyReadRepoListSignal(QList<OAINotificationThread> summary);
    void notifyReadThreadSignal(OAINotificationThread summary);


    void notifyGetListSignalFull(OAIHttpRequestWorker *worker, QList<OAINotificationThread> summary);
    void notifyGetRepoListSignalFull(OAIHttpRequestWorker *worker, QList<OAINotificationThread> summary);
    void notifyGetThreadSignalFull(OAIHttpRequestWorker *worker, OAINotificationThread summary);
    void notifyNewAvailableSignalFull(OAIHttpRequestWorker *worker, OAINotificationCount summary);
    void notifyReadListSignalFull(OAIHttpRequestWorker *worker, QList<OAINotificationThread> summary);
    void notifyReadRepoListSignalFull(OAIHttpRequestWorker *worker, QList<OAINotificationThread> summary);
    void notifyReadThreadSignalFull(OAIHttpRequestWorker *worker, OAINotificationThread summary);

    Q_DECL_DEPRECATED_X("Use notifyGetListSignalError() instead")
    void notifyGetListSignalE(QList<OAINotificationThread> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyGetListSignalError(QList<OAINotificationThread> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyGetRepoListSignalError() instead")
    void notifyGetRepoListSignalE(QList<OAINotificationThread> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyGetRepoListSignalError(QList<OAINotificationThread> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyGetThreadSignalError() instead")
    void notifyGetThreadSignalE(OAINotificationThread summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyGetThreadSignalError(OAINotificationThread summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyNewAvailableSignalError() instead")
    void notifyNewAvailableSignalE(OAINotificationCount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyNewAvailableSignalError(OAINotificationCount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyReadListSignalError() instead")
    void notifyReadListSignalE(QList<OAINotificationThread> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyReadListSignalError(QList<OAINotificationThread> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyReadRepoListSignalError() instead")
    void notifyReadRepoListSignalE(QList<OAINotificationThread> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyReadRepoListSignalError(QList<OAINotificationThread> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyReadThreadSignalError() instead")
    void notifyReadThreadSignalE(OAINotificationThread summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyReadThreadSignalError(OAINotificationThread summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use notifyGetListSignalErrorFull() instead")
    void notifyGetListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyGetListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyGetRepoListSignalErrorFull() instead")
    void notifyGetRepoListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyGetRepoListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyGetThreadSignalErrorFull() instead")
    void notifyGetThreadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyGetThreadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyNewAvailableSignalErrorFull() instead")
    void notifyNewAvailableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyNewAvailableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyReadListSignalErrorFull() instead")
    void notifyReadListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyReadListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyReadRepoListSignalErrorFull() instead")
    void notifyReadRepoListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyReadRepoListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyReadThreadSignalErrorFull() instead")
    void notifyReadThreadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyReadThreadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
