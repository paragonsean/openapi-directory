/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueMeta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueMeta::OAIIssueMeta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueMeta::OAIIssueMeta() {
    this->initializeModel();
}

OAIIssueMeta::~OAIIssueMeta() {}

void OAIIssueMeta::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_repo_isSet = false;
    m_repo_isValid = false;
}

void OAIIssueMeta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueMeta::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_repo_isValid = ::OpenAPI::fromJsonValue(m_repo, json[QString("repo")]);
    m_repo_isSet = !json[QString("repo")].isNull() && m_repo_isValid;
}

QString OAIIssueMeta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueMeta::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_repo_isSet) {
        obj.insert(QString("repo"), ::OpenAPI::toJsonValue(m_repo));
    }
    return obj;
}

qint64 OAIIssueMeta::getIndex() const {
    return m_index;
}
void OAIIssueMeta::setIndex(const qint64 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIIssueMeta::is_index_Set() const{
    return m_index_isSet;
}

bool OAIIssueMeta::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIIssueMeta::getOwner() const {
    return m_owner;
}
void OAIIssueMeta::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIIssueMeta::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIIssueMeta::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIIssueMeta::getRepo() const {
    return m_repo;
}
void OAIIssueMeta::setRepo(const QString &repo) {
    m_repo = repo;
    m_repo_isSet = true;
}

bool OAIIssueMeta::is_repo_Set() const{
    return m_repo_isSet;
}

bool OAIIssueMeta::is_repo_Valid() const{
    return m_repo_isValid;
}

bool OAIIssueMeta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueMeta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
