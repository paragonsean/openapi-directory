/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeInfo::OAINodeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeInfo::OAINodeInfo() {
    this->initializeModel();
}

OAINodeInfo::~OAINodeInfo() {}

void OAINodeInfo::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_open_registrations_isSet = false;
    m_open_registrations_isValid = false;

    m_protocols_isSet = false;
    m_protocols_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_software_isSet = false;
    m_software_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAINodeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeInfo::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_open_registrations_isValid = ::OpenAPI::fromJsonValue(m_open_registrations, json[QString("openRegistrations")]);
    m_open_registrations_isSet = !json[QString("openRegistrations")].isNull() && m_open_registrations_isValid;

    m_protocols_isValid = ::OpenAPI::fromJsonValue(m_protocols, json[QString("protocols")]);
    m_protocols_isSet = !json[QString("protocols")].isNull() && m_protocols_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_software_isValid = ::OpenAPI::fromJsonValue(m_software, json[QString("software")]);
    m_software_isSet = !json[QString("software")].isNull() && m_software_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAINodeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_open_registrations_isSet) {
        obj.insert(QString("openRegistrations"), ::OpenAPI::toJsonValue(m_open_registrations));
    }
    if (m_protocols.size() > 0) {
        obj.insert(QString("protocols"), ::OpenAPI::toJsonValue(m_protocols));
    }
    if (m_services.isSet()) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_software.isSet()) {
        obj.insert(QString("software"), ::OpenAPI::toJsonValue(m_software));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIObject OAINodeInfo::getMetadata() const {
    return m_metadata;
}
void OAINodeInfo::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAINodeInfo::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAINodeInfo::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAINodeInfo::isOpenRegistrations() const {
    return m_open_registrations;
}
void OAINodeInfo::setOpenRegistrations(const bool &open_registrations) {
    m_open_registrations = open_registrations;
    m_open_registrations_isSet = true;
}

bool OAINodeInfo::is_open_registrations_Set() const{
    return m_open_registrations_isSet;
}

bool OAINodeInfo::is_open_registrations_Valid() const{
    return m_open_registrations_isValid;
}

QList<QString> OAINodeInfo::getProtocols() const {
    return m_protocols;
}
void OAINodeInfo::setProtocols(const QList<QString> &protocols) {
    m_protocols = protocols;
    m_protocols_isSet = true;
}

bool OAINodeInfo::is_protocols_Set() const{
    return m_protocols_isSet;
}

bool OAINodeInfo::is_protocols_Valid() const{
    return m_protocols_isValid;
}

OAINodeInfoServices OAINodeInfo::getServices() const {
    return m_services;
}
void OAINodeInfo::setServices(const OAINodeInfoServices &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAINodeInfo::is_services_Set() const{
    return m_services_isSet;
}

bool OAINodeInfo::is_services_Valid() const{
    return m_services_isValid;
}

OAINodeInfoSoftware OAINodeInfo::getSoftware() const {
    return m_software;
}
void OAINodeInfo::setSoftware(const OAINodeInfoSoftware &software) {
    m_software = software;
    m_software_isSet = true;
}

bool OAINodeInfo::is_software_Set() const{
    return m_software_isSet;
}

bool OAINodeInfo::is_software_Valid() const{
    return m_software_isValid;
}

OAINodeInfoUsage OAINodeInfo::getUsage() const {
    return m_usage;
}
void OAINodeInfo::setUsage(const OAINodeInfoUsage &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAINodeInfo::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAINodeInfo::is_usage_Valid() const{
    return m_usage_isValid;
}

QString OAINodeInfo::getVersion() const {
    return m_version;
}
void OAINodeInfo::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAINodeInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAINodeInfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAINodeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_registrations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_software.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
