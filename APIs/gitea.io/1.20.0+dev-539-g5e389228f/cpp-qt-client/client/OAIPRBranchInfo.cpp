/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPRBranchInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPRBranchInfo::OAIPRBranchInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPRBranchInfo::OAIPRBranchInfo() {
    this->initializeModel();
}

OAIPRBranchInfo::~OAIPRBranchInfo() {}

void OAIPRBranchInfo::initializeModel() {

    m_label_isSet = false;
    m_label_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_repo_isSet = false;
    m_repo_isValid = false;

    m_repo_id_isSet = false;
    m_repo_id_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;
}

void OAIPRBranchInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPRBranchInfo::fromJsonObject(QJsonObject json) {

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_repo_isValid = ::OpenAPI::fromJsonValue(m_repo, json[QString("repo")]);
    m_repo_isSet = !json[QString("repo")].isNull() && m_repo_isValid;

    m_repo_id_isValid = ::OpenAPI::fromJsonValue(m_repo_id, json[QString("repo_id")]);
    m_repo_id_isSet = !json[QString("repo_id")].isNull() && m_repo_id_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;
}

QString OAIPRBranchInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPRBranchInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_repo.isSet()) {
        obj.insert(QString("repo"), ::OpenAPI::toJsonValue(m_repo));
    }
    if (m_repo_id_isSet) {
        obj.insert(QString("repo_id"), ::OpenAPI::toJsonValue(m_repo_id));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    return obj;
}

QString OAIPRBranchInfo::getLabel() const {
    return m_label;
}
void OAIPRBranchInfo::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIPRBranchInfo::is_label_Set() const{
    return m_label_isSet;
}

bool OAIPRBranchInfo::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIPRBranchInfo::getRef() const {
    return m_ref;
}
void OAIPRBranchInfo::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAIPRBranchInfo::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAIPRBranchInfo::is_ref_Valid() const{
    return m_ref_isValid;
}

OAIRepository OAIPRBranchInfo::getRepo() const {
    return m_repo;
}
void OAIPRBranchInfo::setRepo(const OAIRepository &repo) {
    m_repo = repo;
    m_repo_isSet = true;
}

bool OAIPRBranchInfo::is_repo_Set() const{
    return m_repo_isSet;
}

bool OAIPRBranchInfo::is_repo_Valid() const{
    return m_repo_isValid;
}

qint64 OAIPRBranchInfo::getRepoId() const {
    return m_repo_id;
}
void OAIPRBranchInfo::setRepoId(const qint64 &repo_id) {
    m_repo_id = repo_id;
    m_repo_id_isSet = true;
}

bool OAIPRBranchInfo::is_repo_id_Set() const{
    return m_repo_id_isSet;
}

bool OAIPRBranchInfo::is_repo_id_Valid() const{
    return m_repo_id_isValid;
}

QString OAIPRBranchInfo::getSha() const {
    return m_sha;
}
void OAIPRBranchInfo::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAIPRBranchInfo::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAIPRBranchInfo::is_sha_Valid() const{
    return m_sha_isValid;
}

bool OAIPRBranchInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPRBranchInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
