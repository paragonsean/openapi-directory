/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotatedTag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotatedTag::OAIAnnotatedTag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotatedTag::OAIAnnotatedTag() {
    this->initializeModel();
}

OAIAnnotatedTag::~OAIAnnotatedTag() {}

void OAIAnnotatedTag::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_tagger_isSet = false;
    m_tagger_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_verification_isSet = false;
    m_verification_isValid = false;
}

void OAIAnnotatedTag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnotatedTag::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_tagger_isValid = ::OpenAPI::fromJsonValue(m_tagger, json[QString("tagger")]);
    m_tagger_isSet = !json[QString("tagger")].isNull() && m_tagger_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_verification_isValid = ::OpenAPI::fromJsonValue(m_verification, json[QString("verification")]);
    m_verification_isSet = !json[QString("verification")].isNull() && m_verification_isValid;
}

QString OAIAnnotatedTag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnotatedTag::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_object.isSet()) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_tagger.isSet()) {
        obj.insert(QString("tagger"), ::OpenAPI::toJsonValue(m_tagger));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_verification.isSet()) {
        obj.insert(QString("verification"), ::OpenAPI::toJsonValue(m_verification));
    }
    return obj;
}

QString OAIAnnotatedTag::getMessage() const {
    return m_message;
}
void OAIAnnotatedTag::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAnnotatedTag::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAnnotatedTag::is_message_Valid() const{
    return m_message_isValid;
}

OAIAnnotatedTagObject OAIAnnotatedTag::getObject() const {
    return m_object;
}
void OAIAnnotatedTag::setObject(const OAIAnnotatedTagObject &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIAnnotatedTag::is_object_Set() const{
    return m_object_isSet;
}

bool OAIAnnotatedTag::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIAnnotatedTag::getSha() const {
    return m_sha;
}
void OAIAnnotatedTag::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAIAnnotatedTag::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAIAnnotatedTag::is_sha_Valid() const{
    return m_sha_isValid;
}

QString OAIAnnotatedTag::getTag() const {
    return m_tag;
}
void OAIAnnotatedTag::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIAnnotatedTag::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIAnnotatedTag::is_tag_Valid() const{
    return m_tag_isValid;
}

OAICommitUser OAIAnnotatedTag::getTagger() const {
    return m_tagger;
}
void OAIAnnotatedTag::setTagger(const OAICommitUser &tagger) {
    m_tagger = tagger;
    m_tagger_isSet = true;
}

bool OAIAnnotatedTag::is_tagger_Set() const{
    return m_tagger_isSet;
}

bool OAIAnnotatedTag::is_tagger_Valid() const{
    return m_tagger_isValid;
}

QString OAIAnnotatedTag::getUrl() const {
    return m_url;
}
void OAIAnnotatedTag::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAnnotatedTag::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAnnotatedTag::is_url_Valid() const{
    return m_url_isValid;
}

OAIPayloadCommitVerification OAIAnnotatedTag::getVerification() const {
    return m_verification;
}
void OAIAnnotatedTag::setVerification(const OAIPayloadCommitVerification &verification) {
    m_verification = verification;
    m_verification_isSet = true;
}

bool OAIAnnotatedTag::is_verification_Set() const{
    return m_verification_isSet;
}

bool OAIAnnotatedTag::is_verification_Valid() const{
    return m_verification_isValid;
}

bool OAIAnnotatedTag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnotatedTag::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
