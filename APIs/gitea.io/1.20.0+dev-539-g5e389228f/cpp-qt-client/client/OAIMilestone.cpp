/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMilestone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMilestone::OAIMilestone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMilestone::OAIMilestone() {
    this->initializeModel();
}

OAIMilestone::~OAIMilestone() {}

void OAIMilestone::initializeModel() {

    m_closed_at_isSet = false;
    m_closed_at_isValid = false;

    m_closed_issues_isSet = false;
    m_closed_issues_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_due_on_isSet = false;
    m_due_on_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_open_issues_isSet = false;
    m_open_issues_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIMilestone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMilestone::fromJsonObject(QJsonObject json) {

    m_closed_at_isValid = ::OpenAPI::fromJsonValue(m_closed_at, json[QString("closed_at")]);
    m_closed_at_isSet = !json[QString("closed_at")].isNull() && m_closed_at_isValid;

    m_closed_issues_isValid = ::OpenAPI::fromJsonValue(m_closed_issues, json[QString("closed_issues")]);
    m_closed_issues_isSet = !json[QString("closed_issues")].isNull() && m_closed_issues_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_due_on_isValid = ::OpenAPI::fromJsonValue(m_due_on, json[QString("due_on")]);
    m_due_on_isSet = !json[QString("due_on")].isNull() && m_due_on_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_open_issues_isValid = ::OpenAPI::fromJsonValue(m_open_issues, json[QString("open_issues")]);
    m_open_issues_isSet = !json[QString("open_issues")].isNull() && m_open_issues_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIMilestone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMilestone::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_at_isSet) {
        obj.insert(QString("closed_at"), ::OpenAPI::toJsonValue(m_closed_at));
    }
    if (m_closed_issues_isSet) {
        obj.insert(QString("closed_issues"), ::OpenAPI::toJsonValue(m_closed_issues));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_due_on_isSet) {
        obj.insert(QString("due_on"), ::OpenAPI::toJsonValue(m_due_on));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_open_issues_isSet) {
        obj.insert(QString("open_issues"), ::OpenAPI::toJsonValue(m_open_issues));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAIMilestone::getClosedAt() const {
    return m_closed_at;
}
void OAIMilestone::setClosedAt(const QDateTime &closed_at) {
    m_closed_at = closed_at;
    m_closed_at_isSet = true;
}

bool OAIMilestone::is_closed_at_Set() const{
    return m_closed_at_isSet;
}

bool OAIMilestone::is_closed_at_Valid() const{
    return m_closed_at_isValid;
}

qint64 OAIMilestone::getClosedIssues() const {
    return m_closed_issues;
}
void OAIMilestone::setClosedIssues(const qint64 &closed_issues) {
    m_closed_issues = closed_issues;
    m_closed_issues_isSet = true;
}

bool OAIMilestone::is_closed_issues_Set() const{
    return m_closed_issues_isSet;
}

bool OAIMilestone::is_closed_issues_Valid() const{
    return m_closed_issues_isValid;
}

QDateTime OAIMilestone::getCreatedAt() const {
    return m_created_at;
}
void OAIMilestone::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMilestone::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMilestone::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIMilestone::getDescription() const {
    return m_description;
}
void OAIMilestone::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMilestone::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMilestone::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIMilestone::getDueOn() const {
    return m_due_on;
}
void OAIMilestone::setDueOn(const QDateTime &due_on) {
    m_due_on = due_on;
    m_due_on_isSet = true;
}

bool OAIMilestone::is_due_on_Set() const{
    return m_due_on_isSet;
}

bool OAIMilestone::is_due_on_Valid() const{
    return m_due_on_isValid;
}

qint64 OAIMilestone::getId() const {
    return m_id;
}
void OAIMilestone::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMilestone::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMilestone::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIMilestone::getOpenIssues() const {
    return m_open_issues;
}
void OAIMilestone::setOpenIssues(const qint64 &open_issues) {
    m_open_issues = open_issues;
    m_open_issues_isSet = true;
}

bool OAIMilestone::is_open_issues_Set() const{
    return m_open_issues_isSet;
}

bool OAIMilestone::is_open_issues_Valid() const{
    return m_open_issues_isValid;
}

QString OAIMilestone::getState() const {
    return m_state;
}
void OAIMilestone::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMilestone::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMilestone::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIMilestone::getTitle() const {
    return m_title;
}
void OAIMilestone::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMilestone::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMilestone::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIMilestone::getUpdatedAt() const {
    return m_updated_at;
}
void OAIMilestone::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIMilestone::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIMilestone::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIMilestone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_issues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_issues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMilestone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
