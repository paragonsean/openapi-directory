/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployKey::OAIDeployKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployKey::OAIDeployKey() {
    this->initializeModel();
}

OAIDeployKey::~OAIDeployKey() {}

void OAIDeployKey::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_key_id_isSet = false;
    m_key_id_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIDeployKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployKey::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_key_id_isValid = ::OpenAPI::fromJsonValue(m_key_id, json[QString("key_id")]);
    m_key_id_isSet = !json[QString("key_id")].isNull() && m_key_id_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("read_only")]);
    m_read_only_isSet = !json[QString("read_only")].isNull() && m_read_only_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIDeployKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployKey::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_key_id_isSet) {
        obj.insert(QString("key_id"), ::OpenAPI::toJsonValue(m_key_id));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("read_only"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDateTime OAIDeployKey::getCreatedAt() const {
    return m_created_at;
}
void OAIDeployKey::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDeployKey::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDeployKey::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDeployKey::getFingerprint() const {
    return m_fingerprint;
}
void OAIDeployKey::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIDeployKey::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIDeployKey::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

qint64 OAIDeployKey::getId() const {
    return m_id;
}
void OAIDeployKey::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeployKey::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeployKey::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeployKey::getKey() const {
    return m_key;
}
void OAIDeployKey::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIDeployKey::is_key_Set() const{
    return m_key_isSet;
}

bool OAIDeployKey::is_key_Valid() const{
    return m_key_isValid;
}

qint64 OAIDeployKey::getKeyId() const {
    return m_key_id;
}
void OAIDeployKey::setKeyId(const qint64 &key_id) {
    m_key_id = key_id;
    m_key_id_isSet = true;
}

bool OAIDeployKey::is_key_id_Set() const{
    return m_key_id_isSet;
}

bool OAIDeployKey::is_key_id_Valid() const{
    return m_key_id_isValid;
}

bool OAIDeployKey::isReadOnly() const {
    return m_read_only;
}
void OAIDeployKey::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIDeployKey::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIDeployKey::is_read_only_Valid() const{
    return m_read_only_isValid;
}

OAIRepository OAIDeployKey::getRepository() const {
    return m_repository;
}
void OAIDeployKey::setRepository(const OAIRepository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIDeployKey::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIDeployKey::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAIDeployKey::getTitle() const {
    return m_title;
}
void OAIDeployKey::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDeployKey::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDeployKey::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIDeployKey::getUrl() const {
    return m_url;
}
void OAIDeployKey::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDeployKey::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDeployKey::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIDeployKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
