/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEditUserOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEditUserOption::OAIEditUserOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEditUserOption::OAIEditUserOption() {
    this->initializeModel();
}

OAIEditUserOption::~OAIEditUserOption() {}

void OAIEditUserOption::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_allow_create_organization_isSet = false;
    m_allow_create_organization_isValid = false;

    m_allow_git_hook_isSet = false;
    m_allow_git_hook_isValid = false;

    m_allow_import_local_isSet = false;
    m_allow_import_local_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_login_name_isSet = false;
    m_login_name_isValid = false;

    m_max_repo_creation_isSet = false;
    m_max_repo_creation_isValid = false;

    m_must_change_password_isSet = false;
    m_must_change_password_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_prohibit_login_isSet = false;
    m_prohibit_login_isValid = false;

    m_restricted_isSet = false;
    m_restricted_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIEditUserOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEditUserOption::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_allow_create_organization_isValid = ::OpenAPI::fromJsonValue(m_allow_create_organization, json[QString("allow_create_organization")]);
    m_allow_create_organization_isSet = !json[QString("allow_create_organization")].isNull() && m_allow_create_organization_isValid;

    m_allow_git_hook_isValid = ::OpenAPI::fromJsonValue(m_allow_git_hook, json[QString("allow_git_hook")]);
    m_allow_git_hook_isSet = !json[QString("allow_git_hook")].isNull() && m_allow_git_hook_isValid;

    m_allow_import_local_isValid = ::OpenAPI::fromJsonValue(m_allow_import_local, json[QString("allow_import_local")]);
    m_allow_import_local_isSet = !json[QString("allow_import_local")].isNull() && m_allow_import_local_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_login_name_isValid = ::OpenAPI::fromJsonValue(m_login_name, json[QString("login_name")]);
    m_login_name_isSet = !json[QString("login_name")].isNull() && m_login_name_isValid;

    m_max_repo_creation_isValid = ::OpenAPI::fromJsonValue(m_max_repo_creation, json[QString("max_repo_creation")]);
    m_max_repo_creation_isSet = !json[QString("max_repo_creation")].isNull() && m_max_repo_creation_isValid;

    m_must_change_password_isValid = ::OpenAPI::fromJsonValue(m_must_change_password, json[QString("must_change_password")]);
    m_must_change_password_isSet = !json[QString("must_change_password")].isNull() && m_must_change_password_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_prohibit_login_isValid = ::OpenAPI::fromJsonValue(m_prohibit_login, json[QString("prohibit_login")]);
    m_prohibit_login_isSet = !json[QString("prohibit_login")].isNull() && m_prohibit_login_isValid;

    m_restricted_isValid = ::OpenAPI::fromJsonValue(m_restricted, json[QString("restricted")]);
    m_restricted_isSet = !json[QString("restricted")].isNull() && m_restricted_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("source_id")]);
    m_source_id_isSet = !json[QString("source_id")].isNull() && m_source_id_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIEditUserOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEditUserOption::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_allow_create_organization_isSet) {
        obj.insert(QString("allow_create_organization"), ::OpenAPI::toJsonValue(m_allow_create_organization));
    }
    if (m_allow_git_hook_isSet) {
        obj.insert(QString("allow_git_hook"), ::OpenAPI::toJsonValue(m_allow_git_hook));
    }
    if (m_allow_import_local_isSet) {
        obj.insert(QString("allow_import_local"), ::OpenAPI::toJsonValue(m_allow_import_local));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_login_name_isSet) {
        obj.insert(QString("login_name"), ::OpenAPI::toJsonValue(m_login_name));
    }
    if (m_max_repo_creation_isSet) {
        obj.insert(QString("max_repo_creation"), ::OpenAPI::toJsonValue(m_max_repo_creation));
    }
    if (m_must_change_password_isSet) {
        obj.insert(QString("must_change_password"), ::OpenAPI::toJsonValue(m_must_change_password));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_prohibit_login_isSet) {
        obj.insert(QString("prohibit_login"), ::OpenAPI::toJsonValue(m_prohibit_login));
    }
    if (m_restricted_isSet) {
        obj.insert(QString("restricted"), ::OpenAPI::toJsonValue(m_restricted));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("source_id"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

bool OAIEditUserOption::isActive() const {
    return m_active;
}
void OAIEditUserOption::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIEditUserOption::is_active_Set() const{
    return m_active_isSet;
}

bool OAIEditUserOption::is_active_Valid() const{
    return m_active_isValid;
}

bool OAIEditUserOption::isAdmin() const {
    return m_admin;
}
void OAIEditUserOption::setAdmin(const bool &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAIEditUserOption::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAIEditUserOption::is_admin_Valid() const{
    return m_admin_isValid;
}

bool OAIEditUserOption::isAllowCreateOrganization() const {
    return m_allow_create_organization;
}
void OAIEditUserOption::setAllowCreateOrganization(const bool &allow_create_organization) {
    m_allow_create_organization = allow_create_organization;
    m_allow_create_organization_isSet = true;
}

bool OAIEditUserOption::is_allow_create_organization_Set() const{
    return m_allow_create_organization_isSet;
}

bool OAIEditUserOption::is_allow_create_organization_Valid() const{
    return m_allow_create_organization_isValid;
}

bool OAIEditUserOption::isAllowGitHook() const {
    return m_allow_git_hook;
}
void OAIEditUserOption::setAllowGitHook(const bool &allow_git_hook) {
    m_allow_git_hook = allow_git_hook;
    m_allow_git_hook_isSet = true;
}

bool OAIEditUserOption::is_allow_git_hook_Set() const{
    return m_allow_git_hook_isSet;
}

bool OAIEditUserOption::is_allow_git_hook_Valid() const{
    return m_allow_git_hook_isValid;
}

bool OAIEditUserOption::isAllowImportLocal() const {
    return m_allow_import_local;
}
void OAIEditUserOption::setAllowImportLocal(const bool &allow_import_local) {
    m_allow_import_local = allow_import_local;
    m_allow_import_local_isSet = true;
}

bool OAIEditUserOption::is_allow_import_local_Set() const{
    return m_allow_import_local_isSet;
}

bool OAIEditUserOption::is_allow_import_local_Valid() const{
    return m_allow_import_local_isValid;
}

QString OAIEditUserOption::getDescription() const {
    return m_description;
}
void OAIEditUserOption::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEditUserOption::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEditUserOption::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEditUserOption::getEmail() const {
    return m_email;
}
void OAIEditUserOption::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIEditUserOption::is_email_Set() const{
    return m_email_isSet;
}

bool OAIEditUserOption::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIEditUserOption::getFullName() const {
    return m_full_name;
}
void OAIEditUserOption::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIEditUserOption::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIEditUserOption::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIEditUserOption::getLocation() const {
    return m_location;
}
void OAIEditUserOption::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIEditUserOption::is_location_Set() const{
    return m_location_isSet;
}

bool OAIEditUserOption::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIEditUserOption::getLoginName() const {
    return m_login_name;
}
void OAIEditUserOption::setLoginName(const QString &login_name) {
    m_login_name = login_name;
    m_login_name_isSet = true;
}

bool OAIEditUserOption::is_login_name_Set() const{
    return m_login_name_isSet;
}

bool OAIEditUserOption::is_login_name_Valid() const{
    return m_login_name_isValid;
}

qint64 OAIEditUserOption::getMaxRepoCreation() const {
    return m_max_repo_creation;
}
void OAIEditUserOption::setMaxRepoCreation(const qint64 &max_repo_creation) {
    m_max_repo_creation = max_repo_creation;
    m_max_repo_creation_isSet = true;
}

bool OAIEditUserOption::is_max_repo_creation_Set() const{
    return m_max_repo_creation_isSet;
}

bool OAIEditUserOption::is_max_repo_creation_Valid() const{
    return m_max_repo_creation_isValid;
}

bool OAIEditUserOption::isMustChangePassword() const {
    return m_must_change_password;
}
void OAIEditUserOption::setMustChangePassword(const bool &must_change_password) {
    m_must_change_password = must_change_password;
    m_must_change_password_isSet = true;
}

bool OAIEditUserOption::is_must_change_password_Set() const{
    return m_must_change_password_isSet;
}

bool OAIEditUserOption::is_must_change_password_Valid() const{
    return m_must_change_password_isValid;
}

QString OAIEditUserOption::getPassword() const {
    return m_password;
}
void OAIEditUserOption::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIEditUserOption::is_password_Set() const{
    return m_password_isSet;
}

bool OAIEditUserOption::is_password_Valid() const{
    return m_password_isValid;
}

bool OAIEditUserOption::isProhibitLogin() const {
    return m_prohibit_login;
}
void OAIEditUserOption::setProhibitLogin(const bool &prohibit_login) {
    m_prohibit_login = prohibit_login;
    m_prohibit_login_isSet = true;
}

bool OAIEditUserOption::is_prohibit_login_Set() const{
    return m_prohibit_login_isSet;
}

bool OAIEditUserOption::is_prohibit_login_Valid() const{
    return m_prohibit_login_isValid;
}

bool OAIEditUserOption::isRestricted() const {
    return m_restricted;
}
void OAIEditUserOption::setRestricted(const bool &restricted) {
    m_restricted = restricted;
    m_restricted_isSet = true;
}

bool OAIEditUserOption::is_restricted_Set() const{
    return m_restricted_isSet;
}

bool OAIEditUserOption::is_restricted_Valid() const{
    return m_restricted_isValid;
}

qint64 OAIEditUserOption::getSourceId() const {
    return m_source_id;
}
void OAIEditUserOption::setSourceId(const qint64 &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIEditUserOption::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIEditUserOption::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIEditUserOption::getVisibility() const {
    return m_visibility;
}
void OAIEditUserOption::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIEditUserOption::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIEditUserOption::is_visibility_Valid() const{
    return m_visibility_isValid;
}

QString OAIEditUserOption::getWebsite() const {
    return m_website;
}
void OAIEditUserOption::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIEditUserOption::is_website_Set() const{
    return m_website_isSet;
}

bool OAIEditUserOption::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIEditUserOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_create_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_git_hook_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_import_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_repo_creation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_must_change_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prohibit_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEditUserOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_login_name_isValid && m_source_id_isValid && true;
}

} // namespace OpenAPI
