/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganizationPermissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganizationPermissions::OAIOrganizationPermissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganizationPermissions::OAIOrganizationPermissions() {
    this->initializeModel();
}

OAIOrganizationPermissions::~OAIOrganizationPermissions() {}

void OAIOrganizationPermissions::initializeModel() {

    m_can_create_repository_isSet = false;
    m_can_create_repository_isValid = false;

    m_can_read_isSet = false;
    m_can_read_isValid = false;

    m_can_write_isSet = false;
    m_can_write_isValid = false;

    m_is_admin_isSet = false;
    m_is_admin_isValid = false;

    m_is_owner_isSet = false;
    m_is_owner_isValid = false;
}

void OAIOrganizationPermissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganizationPermissions::fromJsonObject(QJsonObject json) {

    m_can_create_repository_isValid = ::OpenAPI::fromJsonValue(m_can_create_repository, json[QString("can_create_repository")]);
    m_can_create_repository_isSet = !json[QString("can_create_repository")].isNull() && m_can_create_repository_isValid;

    m_can_read_isValid = ::OpenAPI::fromJsonValue(m_can_read, json[QString("can_read")]);
    m_can_read_isSet = !json[QString("can_read")].isNull() && m_can_read_isValid;

    m_can_write_isValid = ::OpenAPI::fromJsonValue(m_can_write, json[QString("can_write")]);
    m_can_write_isSet = !json[QString("can_write")].isNull() && m_can_write_isValid;

    m_is_admin_isValid = ::OpenAPI::fromJsonValue(m_is_admin, json[QString("is_admin")]);
    m_is_admin_isSet = !json[QString("is_admin")].isNull() && m_is_admin_isValid;

    m_is_owner_isValid = ::OpenAPI::fromJsonValue(m_is_owner, json[QString("is_owner")]);
    m_is_owner_isSet = !json[QString("is_owner")].isNull() && m_is_owner_isValid;
}

QString OAIOrganizationPermissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganizationPermissions::asJsonObject() const {
    QJsonObject obj;
    if (m_can_create_repository_isSet) {
        obj.insert(QString("can_create_repository"), ::OpenAPI::toJsonValue(m_can_create_repository));
    }
    if (m_can_read_isSet) {
        obj.insert(QString("can_read"), ::OpenAPI::toJsonValue(m_can_read));
    }
    if (m_can_write_isSet) {
        obj.insert(QString("can_write"), ::OpenAPI::toJsonValue(m_can_write));
    }
    if (m_is_admin_isSet) {
        obj.insert(QString("is_admin"), ::OpenAPI::toJsonValue(m_is_admin));
    }
    if (m_is_owner_isSet) {
        obj.insert(QString("is_owner"), ::OpenAPI::toJsonValue(m_is_owner));
    }
    return obj;
}

bool OAIOrganizationPermissions::isCanCreateRepository() const {
    return m_can_create_repository;
}
void OAIOrganizationPermissions::setCanCreateRepository(const bool &can_create_repository) {
    m_can_create_repository = can_create_repository;
    m_can_create_repository_isSet = true;
}

bool OAIOrganizationPermissions::is_can_create_repository_Set() const{
    return m_can_create_repository_isSet;
}

bool OAIOrganizationPermissions::is_can_create_repository_Valid() const{
    return m_can_create_repository_isValid;
}

bool OAIOrganizationPermissions::isCanRead() const {
    return m_can_read;
}
void OAIOrganizationPermissions::setCanRead(const bool &can_read) {
    m_can_read = can_read;
    m_can_read_isSet = true;
}

bool OAIOrganizationPermissions::is_can_read_Set() const{
    return m_can_read_isSet;
}

bool OAIOrganizationPermissions::is_can_read_Valid() const{
    return m_can_read_isValid;
}

bool OAIOrganizationPermissions::isCanWrite() const {
    return m_can_write;
}
void OAIOrganizationPermissions::setCanWrite(const bool &can_write) {
    m_can_write = can_write;
    m_can_write_isSet = true;
}

bool OAIOrganizationPermissions::is_can_write_Set() const{
    return m_can_write_isSet;
}

bool OAIOrganizationPermissions::is_can_write_Valid() const{
    return m_can_write_isValid;
}

bool OAIOrganizationPermissions::isIsAdmin() const {
    return m_is_admin;
}
void OAIOrganizationPermissions::setIsAdmin(const bool &is_admin) {
    m_is_admin = is_admin;
    m_is_admin_isSet = true;
}

bool OAIOrganizationPermissions::is_is_admin_Set() const{
    return m_is_admin_isSet;
}

bool OAIOrganizationPermissions::is_is_admin_Valid() const{
    return m_is_admin_isValid;
}

bool OAIOrganizationPermissions::isIsOwner() const {
    return m_is_owner;
}
void OAIOrganizationPermissions::setIsOwner(const bool &is_owner) {
    m_is_owner = is_owner;
    m_is_owner_isSet = true;
}

bool OAIOrganizationPermissions::is_is_owner_Set() const{
    return m_is_owner_isSet;
}

bool OAIOrganizationPermissions::is_is_owner_Valid() const{
    return m_is_owner_isValid;
}

bool OAIOrganizationPermissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_create_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_write_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_owner_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganizationPermissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
