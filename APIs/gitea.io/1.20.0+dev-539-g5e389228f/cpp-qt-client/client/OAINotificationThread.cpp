/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationThread.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationThread::OAINotificationThread(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationThread::OAINotificationThread() {
    this->initializeModel();
}

OAINotificationThread::~OAINotificationThread() {}

void OAINotificationThread::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_pinned_isSet = false;
    m_pinned_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_unread_isSet = false;
    m_unread_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINotificationThread::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationThread::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_pinned_isValid = ::OpenAPI::fromJsonValue(m_pinned, json[QString("pinned")]);
    m_pinned_isSet = !json[QString("pinned")].isNull() && m_pinned_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_unread_isValid = ::OpenAPI::fromJsonValue(m_unread, json[QString("unread")]);
    m_unread_isSet = !json[QString("unread")].isNull() && m_unread_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINotificationThread::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationThread::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_pinned_isSet) {
        obj.insert(QString("pinned"), ::OpenAPI::toJsonValue(m_pinned));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_subject.isSet()) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_unread_isSet) {
        obj.insert(QString("unread"), ::OpenAPI::toJsonValue(m_unread));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint64 OAINotificationThread::getId() const {
    return m_id;
}
void OAINotificationThread::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINotificationThread::is_id_Set() const{
    return m_id_isSet;
}

bool OAINotificationThread::is_id_Valid() const{
    return m_id_isValid;
}

bool OAINotificationThread::isPinned() const {
    return m_pinned;
}
void OAINotificationThread::setPinned(const bool &pinned) {
    m_pinned = pinned;
    m_pinned_isSet = true;
}

bool OAINotificationThread::is_pinned_Set() const{
    return m_pinned_isSet;
}

bool OAINotificationThread::is_pinned_Valid() const{
    return m_pinned_isValid;
}

OAIRepository OAINotificationThread::getRepository() const {
    return m_repository;
}
void OAINotificationThread::setRepository(const OAIRepository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAINotificationThread::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAINotificationThread::is_repository_Valid() const{
    return m_repository_isValid;
}

OAINotificationSubject OAINotificationThread::getSubject() const {
    return m_subject;
}
void OAINotificationThread::setSubject(const OAINotificationSubject &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAINotificationThread::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAINotificationThread::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAINotificationThread::isUnread() const {
    return m_unread;
}
void OAINotificationThread::setUnread(const bool &unread) {
    m_unread = unread;
    m_unread_isSet = true;
}

bool OAINotificationThread::is_unread_Set() const{
    return m_unread_isSet;
}

bool OAINotificationThread::is_unread_Valid() const{
    return m_unread_isValid;
}

QDateTime OAINotificationThread::getUpdatedAt() const {
    return m_updated_at;
}
void OAINotificationThread::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAINotificationThread::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAINotificationThread::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAINotificationThread::getUrl() const {
    return m_url;
}
void OAINotificationThread::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINotificationThread::is_url_Set() const{
    return m_url_isSet;
}

bool OAINotificationThread::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINotificationThread::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationThread::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
