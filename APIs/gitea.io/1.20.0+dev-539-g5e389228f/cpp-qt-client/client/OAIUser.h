/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUser.h
 *
 * User represents a user
 */

#ifndef OAIUser_H
#define OAIUser_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUser : public OAIObject {
public:
    OAIUser();
    OAIUser(QString json);
    ~OAIUser() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isActive() const;
    void setActive(const bool &active);
    bool is_active_Set() const;
    bool is_active_Valid() const;

    QString getAvatarUrl() const;
    void setAvatarUrl(const QString &avatar_url);
    bool is_avatar_url_Set() const;
    bool is_avatar_url_Valid() const;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    qint64 getFollowersCount() const;
    void setFollowersCount(const qint64 &followers_count);
    bool is_followers_count_Set() const;
    bool is_followers_count_Valid() const;

    qint64 getFollowingCount() const;
    void setFollowingCount(const qint64 &following_count);
    bool is_following_count_Set() const;
    bool is_following_count_Valid() const;

    QString getFullName() const;
    void setFullName(const QString &full_name);
    bool is_full_name_Set() const;
    bool is_full_name_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsAdmin() const;
    void setIsAdmin(const bool &is_admin);
    bool is_is_admin_Set() const;
    bool is_is_admin_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QDateTime getLastLogin() const;
    void setLastLogin(const QDateTime &last_login);
    bool is_last_login_Set() const;
    bool is_last_login_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getLogin() const;
    void setLogin(const QString &login);
    bool is_login_Set() const;
    bool is_login_Valid() const;

    QString getLoginName() const;
    void setLoginName(const QString &login_name);
    bool is_login_name_Set() const;
    bool is_login_name_Valid() const;

    bool isProhibitLogin() const;
    void setProhibitLogin(const bool &prohibit_login);
    bool is_prohibit_login_Set() const;
    bool is_prohibit_login_Valid() const;

    bool isRestricted() const;
    void setRestricted(const bool &restricted);
    bool is_restricted_Set() const;
    bool is_restricted_Valid() const;

    qint64 getStarredReposCount() const;
    void setStarredReposCount(const qint64 &starred_repos_count);
    bool is_starred_repos_count_Set() const;
    bool is_starred_repos_count_Valid() const;

    QString getVisibility() const;
    void setVisibility(const QString &visibility);
    bool is_visibility_Set() const;
    bool is_visibility_Valid() const;

    QString getWebsite() const;
    void setWebsite(const QString &website);
    bool is_website_Set() const;
    bool is_website_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_active;
    bool m_active_isSet;
    bool m_active_isValid;

    QString m_avatar_url;
    bool m_avatar_url_isSet;
    bool m_avatar_url_isValid;

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    qint64 m_followers_count;
    bool m_followers_count_isSet;
    bool m_followers_count_isValid;

    qint64 m_following_count;
    bool m_following_count_isSet;
    bool m_following_count_isValid;

    QString m_full_name;
    bool m_full_name_isSet;
    bool m_full_name_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_admin;
    bool m_is_admin_isSet;
    bool m_is_admin_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QDateTime m_last_login;
    bool m_last_login_isSet;
    bool m_last_login_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_login;
    bool m_login_isSet;
    bool m_login_isValid;

    QString m_login_name;
    bool m_login_name_isSet;
    bool m_login_name_isValid;

    bool m_prohibit_login;
    bool m_prohibit_login_isSet;
    bool m_prohibit_login_isValid;

    bool m_restricted;
    bool m_restricted_isSet;
    bool m_restricted_isValid;

    qint64 m_starred_repos_count;
    bool m_starred_repos_count_isSet;
    bool m_starred_repos_count_isValid;

    QString m_visibility;
    bool m_visibility_isSet;
    bool m_visibility_isValid;

    QString m_website;
    bool m_website_isSet;
    bool m_website_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUser)

#endif // OAIUser_H
