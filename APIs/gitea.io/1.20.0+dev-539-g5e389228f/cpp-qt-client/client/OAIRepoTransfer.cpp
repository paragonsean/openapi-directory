/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepoTransfer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepoTransfer::OAIRepoTransfer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepoTransfer::OAIRepoTransfer() {
    this->initializeModel();
}

OAIRepoTransfer::~OAIRepoTransfer() {}

void OAIRepoTransfer::initializeModel() {

    m_doer_isSet = false;
    m_doer_isValid = false;

    m_recipient_isSet = false;
    m_recipient_isValid = false;

    m_teams_isSet = false;
    m_teams_isValid = false;
}

void OAIRepoTransfer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepoTransfer::fromJsonObject(QJsonObject json) {

    m_doer_isValid = ::OpenAPI::fromJsonValue(m_doer, json[QString("doer")]);
    m_doer_isSet = !json[QString("doer")].isNull() && m_doer_isValid;

    m_recipient_isValid = ::OpenAPI::fromJsonValue(m_recipient, json[QString("recipient")]);
    m_recipient_isSet = !json[QString("recipient")].isNull() && m_recipient_isValid;

    m_teams_isValid = ::OpenAPI::fromJsonValue(m_teams, json[QString("teams")]);
    m_teams_isSet = !json[QString("teams")].isNull() && m_teams_isValid;
}

QString OAIRepoTransfer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepoTransfer::asJsonObject() const {
    QJsonObject obj;
    if (m_doer.isSet()) {
        obj.insert(QString("doer"), ::OpenAPI::toJsonValue(m_doer));
    }
    if (m_recipient.isSet()) {
        obj.insert(QString("recipient"), ::OpenAPI::toJsonValue(m_recipient));
    }
    if (m_teams.size() > 0) {
        obj.insert(QString("teams"), ::OpenAPI::toJsonValue(m_teams));
    }
    return obj;
}

OAIUser OAIRepoTransfer::getDoer() const {
    return m_doer;
}
void OAIRepoTransfer::setDoer(const OAIUser &doer) {
    m_doer = doer;
    m_doer_isSet = true;
}

bool OAIRepoTransfer::is_doer_Set() const{
    return m_doer_isSet;
}

bool OAIRepoTransfer::is_doer_Valid() const{
    return m_doer_isValid;
}

OAIUser OAIRepoTransfer::getRecipient() const {
    return m_recipient;
}
void OAIRepoTransfer::setRecipient(const OAIUser &recipient) {
    m_recipient = recipient;
    m_recipient_isSet = true;
}

bool OAIRepoTransfer::is_recipient_Set() const{
    return m_recipient_isSet;
}

bool OAIRepoTransfer::is_recipient_Valid() const{
    return m_recipient_isValid;
}

QList<OAITeam> OAIRepoTransfer::getTeams() const {
    return m_teams;
}
void OAIRepoTransfer::setTeams(const QList<OAITeam> &teams) {
    m_teams = teams;
    m_teams_isSet = true;
}

bool OAIRepoTransfer::is_teams_Set() const{
    return m_teams_isSet;
}

bool OAIRepoTransfer::is_teams_Valid() const{
    return m_teams_isValid;
}

bool OAIRepoTransfer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_doer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepoTransfer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
