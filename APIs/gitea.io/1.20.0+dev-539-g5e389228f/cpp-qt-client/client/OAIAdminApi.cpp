/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdminApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAdminApi::OAIAdminApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIAdminApi::~OAIAdminApi() {
}

void OAIAdminApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/api/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("adminAdoptRepository", defaultConf);
    _serverIndices.insert("adminAdoptRepository", 0);
    _serverConfigs.insert("adminCreateHook", defaultConf);
    _serverIndices.insert("adminCreateHook", 0);
    _serverConfigs.insert("adminCreateOrg", defaultConf);
    _serverIndices.insert("adminCreateOrg", 0);
    _serverConfigs.insert("adminCreatePublicKey", defaultConf);
    _serverIndices.insert("adminCreatePublicKey", 0);
    _serverConfigs.insert("adminCreateRepo", defaultConf);
    _serverIndices.insert("adminCreateRepo", 0);
    _serverConfigs.insert("adminCreateUser", defaultConf);
    _serverIndices.insert("adminCreateUser", 0);
    _serverConfigs.insert("adminCronList", defaultConf);
    _serverIndices.insert("adminCronList", 0);
    _serverConfigs.insert("adminCronRun", defaultConf);
    _serverIndices.insert("adminCronRun", 0);
    _serverConfigs.insert("adminDeleteHook", defaultConf);
    _serverIndices.insert("adminDeleteHook", 0);
    _serverConfigs.insert("adminDeleteUnadoptedRepository", defaultConf);
    _serverIndices.insert("adminDeleteUnadoptedRepository", 0);
    _serverConfigs.insert("adminDeleteUser", defaultConf);
    _serverIndices.insert("adminDeleteUser", 0);
    _serverConfigs.insert("adminDeleteUserPublicKey", defaultConf);
    _serverIndices.insert("adminDeleteUserPublicKey", 0);
    _serverConfigs.insert("adminEditHook", defaultConf);
    _serverIndices.insert("adminEditHook", 0);
    _serverConfigs.insert("adminEditUser", defaultConf);
    _serverIndices.insert("adminEditUser", 0);
    _serverConfigs.insert("adminGetAllEmails", defaultConf);
    _serverIndices.insert("adminGetAllEmails", 0);
    _serverConfigs.insert("adminGetAllOrgs", defaultConf);
    _serverIndices.insert("adminGetAllOrgs", 0);
    _serverConfigs.insert("adminGetHook", defaultConf);
    _serverIndices.insert("adminGetHook", 0);
    _serverConfigs.insert("adminListHooks", defaultConf);
    _serverIndices.insert("adminListHooks", 0);
    _serverConfigs.insert("adminRenameUser", defaultConf);
    _serverIndices.insert("adminRenameUser", 0);
    _serverConfigs.insert("adminSearchEmails", defaultConf);
    _serverIndices.insert("adminSearchEmails", 0);
    _serverConfigs.insert("adminSearchUsers", defaultConf);
    _serverIndices.insert("adminSearchUsers", 0);
    _serverConfigs.insert("adminUnadoptedList", defaultConf);
    _serverIndices.insert("adminUnadoptedList", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIAdminApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIAdminApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIAdminApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIAdminApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIAdminApi::setUsername(const QString &username) {
    _username = username;
}

void OAIAdminApi::setPassword(const QString &password) {
    _password = password;
}


void OAIAdminApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIAdminApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIAdminApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIAdminApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAdminApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAdminApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIAdminApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIAdminApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIAdminApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIAdminApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIAdminApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIAdminApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIAdminApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIAdminApi::adminAdoptRepository(const QString &owner, const QString &repo) {
    QString fullPath = QString(_serverConfigs["adminAdoptRepository"][_serverIndices.value("adminAdoptRepository")].URL()+"/admin/unadopted/{owner}/{repo}");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    
    {
        QString ownerPathParam("{");
        ownerPathParam.append("owner").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner"+pathSuffix : pathPrefix;
        fullPath.replace(ownerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner)));
    }
    
    {
        QString repoPathParam("{");
        repoPathParam.append("repo").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo"+pathSuffix : pathPrefix;
        fullPath.replace(repoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminAdoptRepositoryCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminAdoptRepositoryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminAdoptRepositorySignal();
        Q_EMIT adminAdoptRepositorySignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminAdoptRepositorySignalE(error_type, error_str);
        Q_EMIT adminAdoptRepositorySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminAdoptRepositorySignalError(error_type, error_str);
        Q_EMIT adminAdoptRepositorySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminCreateHook(const OAICreateHookOption &oai_create_hook_option) {
    QString fullPath = QString(_serverConfigs["adminCreateHook"][_serverIndices.value("adminCreateHook")].URL()+"/admin/hooks");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_create_hook_option.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminCreateHookCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminCreateHookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminCreateHookSignal(output);
        Q_EMIT adminCreateHookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminCreateHookSignalE(output, error_type, error_str);
        Q_EMIT adminCreateHookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminCreateHookSignalError(output, error_type, error_str);
        Q_EMIT adminCreateHookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminCreateOrg(const QString &username, const OAICreateOrgOption &oai_create_org_option) {
    QString fullPath = QString(_serverConfigs["adminCreateOrg"][_serverIndices.value("adminCreateOrg")].URL()+"/admin/users/{username}/orgs");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_create_org_option.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminCreateOrgCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminCreateOrgCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOrganization output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminCreateOrgSignal(output);
        Q_EMIT adminCreateOrgSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminCreateOrgSignalE(output, error_type, error_str);
        Q_EMIT adminCreateOrgSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminCreateOrgSignalError(output, error_type, error_str);
        Q_EMIT adminCreateOrgSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminCreatePublicKey(const QString &username, const ::OpenAPI::OptionalParam<OAICreateKeyOption> &oai_create_key_option) {
    QString fullPath = QString(_serverConfigs["adminCreatePublicKey"][_serverIndices.value("adminCreatePublicKey")].URL()+"/admin/users/{username}/keys");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_create_key_option.hasValue()){

        
        QByteArray output = oai_create_key_option.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminCreatePublicKeyCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminCreatePublicKeyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPublicKey output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminCreatePublicKeySignal(output);
        Q_EMIT adminCreatePublicKeySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminCreatePublicKeySignalE(output, error_type, error_str);
        Q_EMIT adminCreatePublicKeySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminCreatePublicKeySignalError(output, error_type, error_str);
        Q_EMIT adminCreatePublicKeySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminCreateRepo(const QString &username, const OAICreateRepoOption &oai_create_repo_option) {
    QString fullPath = QString(_serverConfigs["adminCreateRepo"][_serverIndices.value("adminCreateRepo")].URL()+"/admin/users/{username}/repos");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_create_repo_option.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminCreateRepoCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminCreateRepoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRepository output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminCreateRepoSignal(output);
        Q_EMIT adminCreateRepoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminCreateRepoSignalE(output, error_type, error_str);
        Q_EMIT adminCreateRepoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminCreateRepoSignalError(output, error_type, error_str);
        Q_EMIT adminCreateRepoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminCreateUser(const ::OpenAPI::OptionalParam<OAICreateUserOption> &oai_create_user_option) {
    QString fullPath = QString(_serverConfigs["adminCreateUser"][_serverIndices.value("adminCreateUser")].URL()+"/admin/users");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_create_user_option.hasValue()){

        
        QByteArray output = oai_create_user_option.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminCreateUserCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminCreateUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUser output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminCreateUserSignal(output);
        Q_EMIT adminCreateUserSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminCreateUserSignalE(output, error_type, error_str);
        Q_EMIT adminCreateUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminCreateUserSignalError(output, error_type, error_str);
        Q_EMIT adminCreateUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminCronList(const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["adminCronList"][_serverIndices.value("adminCronList")].URL()+"/admin/cron");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminCronListCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminCronListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICron> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICron val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminCronListSignal(output);
        Q_EMIT adminCronListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminCronListSignalE(output, error_type, error_str);
        Q_EMIT adminCronListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminCronListSignalError(output, error_type, error_str);
        Q_EMIT adminCronListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminCronRun(const QString &task) {
    QString fullPath = QString(_serverConfigs["adminCronRun"][_serverIndices.value("adminCronRun")].URL()+"/admin/cron/{task}");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    
    {
        QString taskPathParam("{");
        taskPathParam.append("task").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task"+pathSuffix : pathPrefix;
        fullPath.replace(taskPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminCronRunCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminCronRunCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminCronRunSignal();
        Q_EMIT adminCronRunSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminCronRunSignalE(error_type, error_str);
        Q_EMIT adminCronRunSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminCronRunSignalError(error_type, error_str);
        Q_EMIT adminCronRunSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminDeleteHook(const qint64 &id) {
    QString fullPath = QString(_serverConfigs["adminDeleteHook"][_serverIndices.value("adminDeleteHook")].URL()+"/amdin/hooks/{id}");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminDeleteHookCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminDeleteHookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminDeleteHookSignal();
        Q_EMIT adminDeleteHookSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminDeleteHookSignalE(error_type, error_str);
        Q_EMIT adminDeleteHookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminDeleteHookSignalError(error_type, error_str);
        Q_EMIT adminDeleteHookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminDeleteUnadoptedRepository(const QString &owner, const QString &repo) {
    QString fullPath = QString(_serverConfigs["adminDeleteUnadoptedRepository"][_serverIndices.value("adminDeleteUnadoptedRepository")].URL()+"/admin/unadopted/{owner}/{repo}");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    
    {
        QString ownerPathParam("{");
        ownerPathParam.append("owner").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner"+pathSuffix : pathPrefix;
        fullPath.replace(ownerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner)));
    }
    
    {
        QString repoPathParam("{");
        repoPathParam.append("repo").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo"+pathSuffix : pathPrefix;
        fullPath.replace(repoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminDeleteUnadoptedRepositoryCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminDeleteUnadoptedRepositoryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminDeleteUnadoptedRepositorySignal();
        Q_EMIT adminDeleteUnadoptedRepositorySignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminDeleteUnadoptedRepositorySignalE(error_type, error_str);
        Q_EMIT adminDeleteUnadoptedRepositorySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminDeleteUnadoptedRepositorySignalError(error_type, error_str);
        Q_EMIT adminDeleteUnadoptedRepositorySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminDeleteUser(const QString &username, const ::OpenAPI::OptionalParam<bool> &purge) {
    QString fullPath = QString(_serverConfigs["adminDeleteUser"][_serverIndices.value("adminDeleteUser")].URL()+"/admin/users/{username}");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (purge.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "purge", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("purge")).append(querySuffix).append(QUrl::toPercentEncoding(purge.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminDeleteUserCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminDeleteUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminDeleteUserSignal();
        Q_EMIT adminDeleteUserSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminDeleteUserSignalE(error_type, error_str);
        Q_EMIT adminDeleteUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminDeleteUserSignalError(error_type, error_str);
        Q_EMIT adminDeleteUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminDeleteUserPublicKey(const QString &username, const qint64 &id) {
    QString fullPath = QString(_serverConfigs["adminDeleteUserPublicKey"][_serverIndices.value("adminDeleteUserPublicKey")].URL()+"/admin/users/{username}/keys/{id}");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminDeleteUserPublicKeyCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminDeleteUserPublicKeyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminDeleteUserPublicKeySignal();
        Q_EMIT adminDeleteUserPublicKeySignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminDeleteUserPublicKeySignalE(error_type, error_str);
        Q_EMIT adminDeleteUserPublicKeySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminDeleteUserPublicKeySignalError(error_type, error_str);
        Q_EMIT adminDeleteUserPublicKeySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminEditHook(const qint64 &id, const ::OpenAPI::OptionalParam<OAIEditHookOption> &oai_edit_hook_option) {
    QString fullPath = QString(_serverConfigs["adminEditHook"][_serverIndices.value("adminEditHook")].URL()+"/admin/hooks/{id}");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (oai_edit_hook_option.hasValue()){

        
        QByteArray output = oai_edit_hook_option.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminEditHookCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminEditHookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminEditHookSignal(output);
        Q_EMIT adminEditHookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminEditHookSignalE(output, error_type, error_str);
        Q_EMIT adminEditHookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminEditHookSignalError(output, error_type, error_str);
        Q_EMIT adminEditHookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminEditUser(const QString &username, const ::OpenAPI::OptionalParam<OAIEditUserOption> &oai_edit_user_option) {
    QString fullPath = QString(_serverConfigs["adminEditUser"][_serverIndices.value("adminEditUser")].URL()+"/admin/users/{username}");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (oai_edit_user_option.hasValue()){

        
        QByteArray output = oai_edit_user_option.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminEditUserCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminEditUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUser output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminEditUserSignal(output);
        Q_EMIT adminEditUserSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminEditUserSignalE(output, error_type, error_str);
        Q_EMIT adminEditUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminEditUserSignalError(output, error_type, error_str);
        Q_EMIT adminEditUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminGetAllEmails(const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["adminGetAllEmails"][_serverIndices.value("adminGetAllEmails")].URL()+"/admin/emails");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminGetAllEmailsCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminGetAllEmailsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIEmail> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIEmail val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminGetAllEmailsSignal(output);
        Q_EMIT adminGetAllEmailsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminGetAllEmailsSignalE(output, error_type, error_str);
        Q_EMIT adminGetAllEmailsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminGetAllEmailsSignalError(output, error_type, error_str);
        Q_EMIT adminGetAllEmailsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminGetAllOrgs(const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["adminGetAllOrgs"][_serverIndices.value("adminGetAllOrgs")].URL()+"/admin/orgs");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminGetAllOrgsCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminGetAllOrgsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIOrganization> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIOrganization val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminGetAllOrgsSignal(output);
        Q_EMIT adminGetAllOrgsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminGetAllOrgsSignalE(output, error_type, error_str);
        Q_EMIT adminGetAllOrgsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminGetAllOrgsSignalError(output, error_type, error_str);
        Q_EMIT adminGetAllOrgsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminGetHook(const qint64 &id) {
    QString fullPath = QString(_serverConfigs["adminGetHook"][_serverIndices.value("adminGetHook")].URL()+"/admin/hooks/{id}");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminGetHookCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminGetHookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminGetHookSignal(output);
        Q_EMIT adminGetHookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminGetHookSignalE(output, error_type, error_str);
        Q_EMIT adminGetHookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminGetHookSignalError(output, error_type, error_str);
        Q_EMIT adminGetHookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminListHooks(const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["adminListHooks"][_serverIndices.value("adminListHooks")].URL()+"/admin/hooks");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminListHooksCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminListHooksCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIHook> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIHook val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminListHooksSignal(output);
        Q_EMIT adminListHooksSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminListHooksSignalE(output, error_type, error_str);
        Q_EMIT adminListHooksSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminListHooksSignalError(output, error_type, error_str);
        Q_EMIT adminListHooksSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminRenameUser(const QString &username, const OAIRenameUserOption &oai_rename_user_option) {
    QString fullPath = QString(_serverConfigs["adminRenameUser"][_serverIndices.value("adminRenameUser")].URL()+"/admin/users/{username}/rename");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_rename_user_option.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminRenameUserCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminRenameUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminRenameUserSignal();
        Q_EMIT adminRenameUserSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminRenameUserSignalE(error_type, error_str);
        Q_EMIT adminRenameUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminRenameUserSignalError(error_type, error_str);
        Q_EMIT adminRenameUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminSearchEmails(const ::OpenAPI::OptionalParam<QString> &q, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["adminSearchEmails"][_serverIndices.value("adminSearchEmails")].URL()+"/admin/emails/search");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (q.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q")).append(querySuffix).append(QUrl::toPercentEncoding(q.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminSearchEmailsCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminSearchEmailsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIEmail> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIEmail val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminSearchEmailsSignal(output);
        Q_EMIT adminSearchEmailsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminSearchEmailsSignalE(output, error_type, error_str);
        Q_EMIT adminSearchEmailsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminSearchEmailsSignalError(output, error_type, error_str);
        Q_EMIT adminSearchEmailsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminSearchUsers(const ::OpenAPI::OptionalParam<qint64> &source_id, const ::OpenAPI::OptionalParam<QString> &login_name, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["adminSearchUsers"][_serverIndices.value("adminSearchUsers")].URL()+"/admin/users");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (source_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "source_id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("source_id")).append(querySuffix).append(QUrl::toPercentEncoding(source_id.stringValue()));
    }
    if (login_name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "login_name", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("login_name")).append(querySuffix).append(QUrl::toPercentEncoding(login_name.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminSearchUsersCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminSearchUsersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIUser> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIUser val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminSearchUsersSignal(output);
        Q_EMIT adminSearchUsersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminSearchUsersSignalE(output, error_type, error_str);
        Q_EMIT adminSearchUsersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminSearchUsersSignalError(output, error_type, error_str);
        Q_EMIT adminSearchUsersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::adminUnadoptedList(const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<qint32> &limit, const ::OpenAPI::OptionalParam<QString> &pattern) {
    QString fullPath = QString(_serverConfigs["adminUnadoptedList"][_serverIndices.value("adminUnadoptedList")].URL()+"/admin/unadopted");
    
    if (_apiKeys.contains("TOTPHeader")) {
        addHeaders("TOTPHeader",_apiKeys.find("TOTPHeader").value());
    }
    
    if (_apiKeys.contains("AuthorizationHeaderToken")) {
        addHeaders("AuthorizationHeaderToken",_apiKeys.find("AuthorizationHeaderToken").value());
    }
    
    if (_apiKeys.contains("SudoHeader")) {
        addHeaders("SudoHeader",_apiKeys.find("SudoHeader").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("AccessToken")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("AccessToken=").append(_apiKeys.find("AccessToken").value());
    }
    
    if (_apiKeys.contains("SudoParam")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("SudoParam=").append(_apiKeys.find("SudoParam").value());
    }
    
    if (_apiKeys.contains("Token")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("Token=").append(_apiKeys.find("Token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (pattern.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pattern", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pattern")).append(querySuffix).append(QUrl::toPercentEncoding(pattern.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdminApi::adminUnadoptedListCallback);
    connect(this, &OAIAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdminApi::adminUnadoptedListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT adminUnadoptedListSignal(output);
        Q_EMIT adminUnadoptedListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT adminUnadoptedListSignalE(output, error_type, error_str);
        Q_EMIT adminUnadoptedListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT adminUnadoptedListSignalError(output, error_type, error_str);
        Q_EMIT adminUnadoptedListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdminApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
