/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueFormField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueFormField::OAIIssueFormField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueFormField::OAIIssueFormField() {
    this->initializeModel();
}

OAIIssueFormField::~OAIIssueFormField() {}

void OAIIssueFormField::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_validations_isSet = false;
    m_validations_isValid = false;
}

void OAIIssueFormField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueFormField::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_validations_isValid = ::OpenAPI::fromJsonValue(m_validations, json[QString("validations")]);
    m_validations_isSet = !json[QString("validations")].isNull() && m_validations_isValid;
}

QString OAIIssueFormField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueFormField::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_validations.size() > 0) {
        obj.insert(QString("validations"), ::OpenAPI::toJsonValue(m_validations));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIIssueFormField::getAttributes() const {
    return m_attributes;
}
void OAIIssueFormField::setAttributes(const QMap<QString, QJsonValue> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIIssueFormField::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIIssueFormField::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIIssueFormField::getId() const {
    return m_id;
}
void OAIIssueFormField::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIssueFormField::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIssueFormField::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIIssueFormField::getType() const {
    return m_type;
}
void OAIIssueFormField::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIssueFormField::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIssueFormField::is_type_Valid() const{
    return m_type_isValid;
}

QMap<QString, QJsonValue> OAIIssueFormField::getValidations() const {
    return m_validations;
}
void OAIIssueFormField::setValidations(const QMap<QString, QJsonValue> &validations) {
    m_validations = validations;
    m_validations_isSet = true;
}

bool OAIIssueFormField::is_validations_Set() const{
    return m_validations_isSet;
}

bool OAIIssueFormField::is_validations_Valid() const{
    return m_validations_isValid;
}

bool OAIIssueFormField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueFormField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
