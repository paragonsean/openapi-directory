/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeInfoUsageUsers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeInfoUsageUsers::OAINodeInfoUsageUsers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeInfoUsageUsers::OAINodeInfoUsageUsers() {
    this->initializeModel();
}

OAINodeInfoUsageUsers::~OAINodeInfoUsageUsers() {}

void OAINodeInfoUsageUsers::initializeModel() {

    m_active_halfyear_isSet = false;
    m_active_halfyear_isValid = false;

    m_active_month_isSet = false;
    m_active_month_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAINodeInfoUsageUsers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeInfoUsageUsers::fromJsonObject(QJsonObject json) {

    m_active_halfyear_isValid = ::OpenAPI::fromJsonValue(m_active_halfyear, json[QString("activeHalfyear")]);
    m_active_halfyear_isSet = !json[QString("activeHalfyear")].isNull() && m_active_halfyear_isValid;

    m_active_month_isValid = ::OpenAPI::fromJsonValue(m_active_month, json[QString("activeMonth")]);
    m_active_month_isSet = !json[QString("activeMonth")].isNull() && m_active_month_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAINodeInfoUsageUsers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeInfoUsageUsers::asJsonObject() const {
    QJsonObject obj;
    if (m_active_halfyear_isSet) {
        obj.insert(QString("activeHalfyear"), ::OpenAPI::toJsonValue(m_active_halfyear));
    }
    if (m_active_month_isSet) {
        obj.insert(QString("activeMonth"), ::OpenAPI::toJsonValue(m_active_month));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint64 OAINodeInfoUsageUsers::getActiveHalfyear() const {
    return m_active_halfyear;
}
void OAINodeInfoUsageUsers::setActiveHalfyear(const qint64 &active_halfyear) {
    m_active_halfyear = active_halfyear;
    m_active_halfyear_isSet = true;
}

bool OAINodeInfoUsageUsers::is_active_halfyear_Set() const{
    return m_active_halfyear_isSet;
}

bool OAINodeInfoUsageUsers::is_active_halfyear_Valid() const{
    return m_active_halfyear_isValid;
}

qint64 OAINodeInfoUsageUsers::getActiveMonth() const {
    return m_active_month;
}
void OAINodeInfoUsageUsers::setActiveMonth(const qint64 &active_month) {
    m_active_month = active_month;
    m_active_month_isSet = true;
}

bool OAINodeInfoUsageUsers::is_active_month_Set() const{
    return m_active_month_isSet;
}

bool OAINodeInfoUsageUsers::is_active_month_Valid() const{
    return m_active_month_isValid;
}

qint64 OAINodeInfoUsageUsers::getTotal() const {
    return m_total;
}
void OAINodeInfoUsageUsers::setTotal(const qint64 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAINodeInfoUsageUsers::is_total_Set() const{
    return m_total_isSet;
}

bool OAINodeInfoUsageUsers::is_total_Valid() const{
    return m_total_isValid;
}

bool OAINodeInfoUsageUsers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_halfyear_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeInfoUsageUsers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
