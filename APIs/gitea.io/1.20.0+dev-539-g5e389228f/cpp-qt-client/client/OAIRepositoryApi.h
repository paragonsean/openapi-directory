/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRepositoryApi_H
#define OAI_OAIRepositoryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIActivity.h"
#include "OAIAddCollaboratorOption.h"
#include "OAIAnnotatedTag.h"
#include "OAIAttachment.h"
#include "OAIBranch.h"
#include "OAIBranchProtection.h"
#include "OAIChangedFile.h"
#include "OAICombinedStatus.h"
#include "OAICommit.h"
#include "OAICommitStatus.h"
#include "OAIContentsResponse.h"
#include "OAICreateBranchProtectionOption.h"
#include "OAICreateBranchRepoOption.h"
#include "OAICreateFileOptions.h"
#include "OAICreateForkOption.h"
#include "OAICreateHookOption.h"
#include "OAICreateKeyOption.h"
#include "OAICreatePullRequestOption.h"
#include "OAICreatePullReviewOptions.h"
#include "OAICreatePushMirrorOption.h"
#include "OAICreateReleaseOption.h"
#include "OAICreateRepoOption.h"
#include "OAICreateStatusOption.h"
#include "OAICreateTagOption.h"
#include "OAICreateWikiPageOptions.h"
#include "OAIDeleteFileOptions.h"
#include "OAIDeployKey.h"
#include "OAIDismissPullReviewOptions.h"
#include "OAIEditAttachmentOptions.h"
#include "OAIEditBranchProtectionOption.h"
#include "OAIEditGitHookOption.h"
#include "OAIEditHookOption.h"
#include "OAIEditPullRequestOption.h"
#include "OAIEditReleaseOption.h"
#include "OAIEditRepoOption.h"
#include "OAIFileDeleteResponse.h"
#include "OAIFileResponse.h"
#include "OAIGenerateRepoOption.h"
#include "OAIGitBlobResponse.h"
#include "OAIGitHook.h"
#include "OAIGitTreeResponse.h"
#include "OAIHook.h"
#include "OAIHttpFileElement.h"
#include "OAIIssueConfig.h"
#include "OAIIssueConfigValidation.h"
#include "OAIIssueTemplate.h"
#include "OAIMergePullRequestOption.h"
#include "OAIMigrateRepoOptions.h"
#include "OAINote.h"
#include "OAIPullRequest.h"
#include "OAIPullReview.h"
#include "OAIPullReviewComment.h"
#include "OAIPullReviewRequestOptions.h"
#include "OAIPushMirror.h"
#include "OAIReference.h"
#include "OAIRelease.h"
#include "OAIRepoCollaboratorPermission.h"
#include "OAIRepoTopicOptions.h"
#include "OAIRepository.h"
#include "OAISearchResults.h"
#include "OAISubmitPullReviewOptions.h"
#include "OAITag.h"
#include "OAITeam.h"
#include "OAITopicName.h"
#include "OAITopicResponse.h"
#include "OAITrackedTime.h"
#include "OAITransferRepoOption.h"
#include "OAIUpdateFileOptions.h"
#include "OAIUser.h"
#include "OAIWatchInfo.h"
#include "OAIWikiCommitList.h"
#include "OAIWikiPage.h"
#include "OAIWikiPageMetaData.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRepositoryApi : public QObject {
    Q_OBJECT

public:
    OAIRepositoryApi(const int timeOut = 0);
    ~OAIRepositoryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void acceptRepoTransfer(const QString &owner, const QString &repo);

    /**
    * @param[in]  oai_create_repo_option OAICreateRepoOption [optional]
    */
    virtual void createCurrentUserRepo(const ::OpenAPI::OptionalParam<OAICreateRepoOption> &oai_create_repo_option = ::OpenAPI::OptionalParam<OAICreateRepoOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_create_fork_option OAICreateForkOption [optional]
    */
    virtual void createFork(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAICreateForkOption> &oai_create_fork_option = ::OpenAPI::OptionalParam<OAICreateForkOption>());

    /**
    * @param[in]  template_owner QString [required]
    * @param[in]  template_repo QString [required]
    * @param[in]  oai_generate_repo_option OAIGenerateRepoOption [optional]
    */
    virtual void generateRepo(const QString &template_owner, const QString &template_repo, const ::OpenAPI::OptionalParam<OAIGenerateRepoOption> &oai_generate_repo_option = ::OpenAPI::OptionalParam<OAIGenerateRepoOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  sha QString [required]
    */
    virtual void getAnnotatedTag(const QString &owner, const QString &repo, const QString &sha);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  sha QString [required]
    */
    virtual void getBlob(const QString &owner, const QString &repo, const QString &sha);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  sha QString [required]
    * @param[in]  recursive bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getTree(const QString &owner, const QString &repo, const QString &sha, const ::OpenAPI::OptionalParam<bool> &recursive = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listForks(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void rejectRepoTransfer(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  collaborator QString [required]
    * @param[in]  oai_add_collaborator_option OAIAddCollaboratorOption [optional]
    */
    virtual void repoAddCollaborator(const QString &owner, const QString &repo, const QString &collaborator, const ::OpenAPI::OptionalParam<OAIAddCollaboratorOption> &oai_add_collaborator_option = ::OpenAPI::OptionalParam<OAIAddCollaboratorOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_create_push_mirror_option OAICreatePushMirrorOption [optional]
    */
    virtual void repoAddPushMirror(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAICreatePushMirrorOption> &oai_create_push_mirror_option = ::OpenAPI::OptionalParam<OAICreatePushMirrorOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  team QString [required]
    */
    virtual void repoAddTeam(const QString &owner, const QString &repo, const QString &team);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  topic QString [required]
    */
    virtual void repoAddTopic(const QString &owner, const QString &repo, const QString &topic);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_update_file_options OAIUpdateFileOptions [required]
    */
    virtual void repoApplyDiffPatch(const QString &owner, const QString &repo, const OAIUpdateFileOptions &oai_update_file_options);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    */
    virtual void repoCancelScheduledAutoMerge(const QString &owner, const QString &repo, const qint64 &index);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  collaborator QString [required]
    */
    virtual void repoCheckCollaborator(const QString &owner, const QString &repo, const QString &collaborator);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  team QString [required]
    */
    virtual void repoCheckTeam(const QString &owner, const QString &repo, const QString &team);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_create_branch_repo_option OAICreateBranchRepoOption [optional]
    */
    virtual void repoCreateBranch(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAICreateBranchRepoOption> &oai_create_branch_repo_option = ::OpenAPI::OptionalParam<OAICreateBranchRepoOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_create_branch_protection_option OAICreateBranchProtectionOption [optional]
    */
    virtual void repoCreateBranchProtection(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAICreateBranchProtectionOption> &oai_create_branch_protection_option = ::OpenAPI::OptionalParam<OAICreateBranchProtectionOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  filepath QString [required]
    * @param[in]  oai_create_file_options OAICreateFileOptions [required]
    */
    virtual void repoCreateFile(const QString &owner, const QString &repo, const QString &filepath, const OAICreateFileOptions &oai_create_file_options);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_create_hook_option OAICreateHookOption [optional]
    */
    virtual void repoCreateHook(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAICreateHookOption> &oai_create_hook_option = ::OpenAPI::OptionalParam<OAICreateHookOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_create_key_option OAICreateKeyOption [optional]
    */
    virtual void repoCreateKey(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAICreateKeyOption> &oai_create_key_option = ::OpenAPI::OptionalParam<OAICreateKeyOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_create_pull_request_option OAICreatePullRequestOption [optional]
    */
    virtual void repoCreatePullRequest(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAICreatePullRequestOption> &oai_create_pull_request_option = ::OpenAPI::OptionalParam<OAICreatePullRequestOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  oai_create_pull_review_options OAICreatePullReviewOptions [required]
    */
    virtual void repoCreatePullReview(const QString &owner, const QString &repo, const qint64 &index, const OAICreatePullReviewOptions &oai_create_pull_review_options);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  oai_pull_review_request_options OAIPullReviewRequestOptions [required]
    */
    virtual void repoCreatePullReviewRequests(const QString &owner, const QString &repo, const qint64 &index, const OAIPullReviewRequestOptions &oai_pull_review_request_options);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_create_release_option OAICreateReleaseOption [optional]
    */
    virtual void repoCreateRelease(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAICreateReleaseOption> &oai_create_release_option = ::OpenAPI::OptionalParam<OAICreateReleaseOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  attachment OAIHttpFileElement [required]
    * @param[in]  name QString [optional]
    */
    virtual void repoCreateReleaseAttachment(const QString &owner, const QString &repo, const qint64 &id, const OAIHttpFileElement &attachment, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  sha QString [required]
    * @param[in]  oai_create_status_option OAICreateStatusOption [optional]
    */
    virtual void repoCreateStatus(const QString &owner, const QString &repo, const QString &sha, const ::OpenAPI::OptionalParam<OAICreateStatusOption> &oai_create_status_option = ::OpenAPI::OptionalParam<OAICreateStatusOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_create_tag_option OAICreateTagOption [optional]
    */
    virtual void repoCreateTag(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAICreateTagOption> &oai_create_tag_option = ::OpenAPI::OptionalParam<OAICreateTagOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_create_wiki_page_options OAICreateWikiPageOptions [optional]
    */
    virtual void repoCreateWikiPage(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAICreateWikiPageOptions> &oai_create_wiki_page_options = ::OpenAPI::OptionalParam<OAICreateWikiPageOptions>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repoDelete(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repoDeleteBranch(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  name QString [required]
    */
    virtual void repoDeleteBranchProtection(const QString &owner, const QString &repo, const QString &name);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  collaborator QString [required]
    */
    virtual void repoDeleteCollaborator(const QString &owner, const QString &repo, const QString &collaborator);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  filepath QString [required]
    * @param[in]  oai_delete_file_options OAIDeleteFileOptions [required]
    */
    virtual void repoDeleteFile(const QString &owner, const QString &repo, const QString &filepath, const OAIDeleteFileOptions &oai_delete_file_options);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id QString [required]
    */
    virtual void repoDeleteGitHook(const QString &owner, const QString &repo, const QString &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void repoDeleteHook(const QString &owner, const QString &repo, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void repoDeleteKey(const QString &owner, const QString &repo, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  id qint64 [required]
    */
    virtual void repoDeletePullReview(const QString &owner, const QString &repo, const qint64 &index, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  oai_pull_review_request_options OAIPullReviewRequestOptions [required]
    */
    virtual void repoDeletePullReviewRequests(const QString &owner, const QString &repo, const qint64 &index, const OAIPullReviewRequestOptions &oai_pull_review_request_options);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  name QString [required]
    */
    virtual void repoDeletePushMirror(const QString &owner, const QString &repo, const QString &name);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void repoDeleteRelease(const QString &owner, const QString &repo, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  attachment_id qint64 [required]
    */
    virtual void repoDeleteReleaseAttachment(const QString &owner, const QString &repo, const qint64 &id, const qint64 &attachment_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  tag QString [required]
    */
    virtual void repoDeleteReleaseByTag(const QString &owner, const QString &repo, const QString &tag);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  tag QString [required]
    */
    virtual void repoDeleteTag(const QString &owner, const QString &repo, const QString &tag);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  team QString [required]
    */
    virtual void repoDeleteTeam(const QString &owner, const QString &repo, const QString &team);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  topic QString [required]
    */
    virtual void repoDeleteTopic(const QString &owner, const QString &repo, const QString &topic);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  page_name QString [required]
    */
    virtual void repoDeleteWikiPage(const QString &owner, const QString &repo, const QString &page_name);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  id qint64 [required]
    * @param[in]  oai_dismiss_pull_review_options OAIDismissPullReviewOptions [required]
    */
    virtual void repoDismissPullReview(const QString &owner, const QString &repo, const qint64 &index, const qint64 &id, const OAIDismissPullReviewOptions &oai_dismiss_pull_review_options);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  sha QString [required]
    * @param[in]  diff_type QString [required]
    */
    virtual void repoDownloadCommitDiffOrPatch(const QString &owner, const QString &repo, const QString &sha, const QString &diff_type);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  diff_type QString [required]
    * @param[in]  binary bool [optional]
    */
    virtual void repoDownloadPullDiffOrPatch(const QString &owner, const QString &repo, const qint64 &index, const QString &diff_type, const ::OpenAPI::OptionalParam<bool> &binary = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_edit_repo_option OAIEditRepoOption [optional]
    */
    virtual void repoEdit(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAIEditRepoOption> &oai_edit_repo_option = ::OpenAPI::OptionalParam<OAIEditRepoOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  name QString [required]
    * @param[in]  oai_edit_branch_protection_option OAIEditBranchProtectionOption [optional]
    */
    virtual void repoEditBranchProtection(const QString &owner, const QString &repo, const QString &name, const ::OpenAPI::OptionalParam<OAIEditBranchProtectionOption> &oai_edit_branch_protection_option = ::OpenAPI::OptionalParam<OAIEditBranchProtectionOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_edit_git_hook_option OAIEditGitHookOption [optional]
    */
    virtual void repoEditGitHook(const QString &owner, const QString &repo, const QString &id, const ::OpenAPI::OptionalParam<OAIEditGitHookOption> &oai_edit_git_hook_option = ::OpenAPI::OptionalParam<OAIEditGitHookOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  oai_edit_hook_option OAIEditHookOption [optional]
    */
    virtual void repoEditHook(const QString &owner, const QString &repo, const qint64 &id, const ::OpenAPI::OptionalParam<OAIEditHookOption> &oai_edit_hook_option = ::OpenAPI::OptionalParam<OAIEditHookOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  oai_edit_pull_request_option OAIEditPullRequestOption [optional]
    */
    virtual void repoEditPullRequest(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<OAIEditPullRequestOption> &oai_edit_pull_request_option = ::OpenAPI::OptionalParam<OAIEditPullRequestOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  oai_edit_release_option OAIEditReleaseOption [optional]
    */
    virtual void repoEditRelease(const QString &owner, const QString &repo, const qint64 &id, const ::OpenAPI::OptionalParam<OAIEditReleaseOption> &oai_edit_release_option = ::OpenAPI::OptionalParam<OAIEditReleaseOption>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  attachment_id qint64 [required]
    * @param[in]  oai_edit_attachment_options OAIEditAttachmentOptions [optional]
    */
    virtual void repoEditReleaseAttachment(const QString &owner, const QString &repo, const qint64 &id, const qint64 &attachment_id, const ::OpenAPI::OptionalParam<OAIEditAttachmentOptions> &oai_edit_attachment_options = ::OpenAPI::OptionalParam<OAIEditAttachmentOptions>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  page_name QString [required]
    * @param[in]  oai_create_wiki_page_options OAICreateWikiPageOptions [optional]
    */
    virtual void repoEditWikiPage(const QString &owner, const QString &repo, const QString &page_name, const ::OpenAPI::OptionalParam<OAICreateWikiPageOptions> &oai_create_wiki_page_options = ::OpenAPI::OptionalParam<OAICreateWikiPageOptions>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repoGet(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  sha QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  stat bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoGetAllCommits(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &sha = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &stat = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  archive QString [required]
    */
    virtual void repoGetArchive(const QString &owner, const QString &repo, const QString &archive);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repoGetAssignees(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repoGetBranch(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  name QString [required]
    */
    virtual void repoGetBranchProtection(const QString &owner, const QString &repo, const QString &name);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void repoGetByID(const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  ref QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoGetCombinedStatusByRef(const QString &owner, const QString &repo, const QString &ref, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  filepath QString [required]
    * @param[in]  ref QString [optional]
    */
    virtual void repoGetContents(const QString &owner, const QString &repo, const QString &filepath, const ::OpenAPI::OptionalParam<QString> &ref = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  ref QString [optional]
    */
    virtual void repoGetContentsList(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &ref = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  filepath QString [required]
    * @param[in]  ref QString [optional]
    */
    virtual void repoGetEditorConfig(const QString &owner, const QString &repo, const QString &filepath, const ::OpenAPI::OptionalParam<QString> &ref = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id QString [required]
    */
    virtual void repoGetGitHook(const QString &owner, const QString &repo, const QString &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void repoGetHook(const QString &owner, const QString &repo, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repoGetIssueConfig(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repoGetIssueTemplates(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void repoGetKey(const QString &owner, const QString &repo, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repoGetLanguages(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repoGetLatestRelease(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  sha QString [required]
    */
    virtual void repoGetNote(const QString &owner, const QString &repo, const QString &sha);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    */
    virtual void repoGetPullRequest(const QString &owner, const QString &repo, const qint64 &index);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoGetPullRequestCommits(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  skip_to QString [optional]
    * @param[in]  whitespace QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoGetPullRequestFiles(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<QString> &skip_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &whitespace = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  id qint64 [required]
    */
    virtual void repoGetPullReview(const QString &owner, const QString &repo, const qint64 &index, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  id qint64 [required]
    */
    virtual void repoGetPullReviewComments(const QString &owner, const QString &repo, const qint64 &index, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  name QString [required]
    */
    virtual void repoGetPushMirrorByRemoteName(const QString &owner, const QString &repo, const QString &name);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  filepath QString [required]
    * @param[in]  ref QString [optional]
    */
    virtual void repoGetRawFile(const QString &owner, const QString &repo, const QString &filepath, const ::OpenAPI::OptionalParam<QString> &ref = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  filepath QString [required]
    * @param[in]  ref QString [optional]
    */
    virtual void repoGetRawFileOrLFS(const QString &owner, const QString &repo, const QString &filepath, const ::OpenAPI::OptionalParam<QString> &ref = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void repoGetRelease(const QString &owner, const QString &repo, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  attachment_id qint64 [required]
    */
    virtual void repoGetReleaseAttachment(const QString &owner, const QString &repo, const qint64 &id, const qint64 &attachment_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  tag QString [required]
    */
    virtual void repoGetReleaseByTag(const QString &owner, const QString &repo, const QString &tag);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  collaborator QString [required]
    */
    virtual void repoGetRepoPermissions(const QString &owner, const QString &repo, const QString &collaborator);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repoGetReviewers(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  sha QString [required]
    */
    virtual void repoGetSingleCommit(const QString &owner, const QString &repo, const QString &sha);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  tag QString [required]
    */
    virtual void repoGetTag(const QString &owner, const QString &repo, const QString &tag);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  page_name QString [required]
    */
    virtual void repoGetWikiPage(const QString &owner, const QString &repo, const QString &page_name);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  page_name QString [required]
    * @param[in]  page qint32 [optional]
    */
    virtual void repoGetWikiPageRevisions(const QString &owner, const QString &repo, const QString &page_name, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoGetWikiPages(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  date QDate [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoListActivityFeeds(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QDate> &date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repoListAllGitRefs(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repoListBranchProtection(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoListBranches(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoListCollaborators(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repoListGitHooks(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  ref QString [required]
    */
    virtual void repoListGitRefs(const QString &owner, const QString &repo, const QString &ref);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoListHooks(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  key_id qint32 [optional]
    * @param[in]  fingerprint QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoListKeys(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &key_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &fingerprint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  state QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  milestone qint64 [optional]
    * @param[in]  labels QList<qint64> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoListPullRequests(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &milestone = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QList<qint64>> &labels = ::OpenAPI::OptionalParam<QList<qint64>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoListPullReviews(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoListPushMirrors(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void repoListReleaseAttachments(const QString &owner, const QString &repo, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  draft bool [optional]
    * @param[in]  pre_release bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoListReleases(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<bool> &draft = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pre_release = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoListStargazers(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  sha QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoListStatuses(const QString &owner, const QString &repo, const QString &sha, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  ref QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoListStatusesByRef(const QString &owner, const QString &repo, const QString &ref, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoListSubscribers(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoListTags(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repoListTeams(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoListTopics(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  oai_merge_pull_request_option OAIMergePullRequestOption [optional]
    */
    virtual void repoMergePullRequest(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<OAIMergePullRequestOption> &oai_merge_pull_request_option = ::OpenAPI::OptionalParam<OAIMergePullRequestOption>());

    /**
    * @param[in]  oai_migrate_repo_options OAIMigrateRepoOptions [optional]
    */
    virtual void repoMigrate(const ::OpenAPI::OptionalParam<OAIMigrateRepoOptions> &oai_migrate_repo_options = ::OpenAPI::OptionalParam<OAIMigrateRepoOptions>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repoMirrorSync(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    */
    virtual void repoPullRequestIsMerged(const QString &owner, const QString &repo, const qint64 &index);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repoPushMirrorSync(const QString &owner, const QString &repo);

    /**
    * @param[in]  q QString [optional]
    * @param[in]  topic bool [optional]
    * @param[in]  include_desc bool [optional]
    * @param[in]  uid qint64 [optional]
    * @param[in]  priority_owner_id qint64 [optional]
    * @param[in]  team_id qint64 [optional]
    * @param[in]  starred_by qint64 [optional]
    * @param[in]  r_private bool [optional]
    * @param[in]  is_private bool [optional]
    * @param[in]  r_template bool [optional]
    * @param[in]  archived bool [optional]
    * @param[in]  mode QString [optional]
    * @param[in]  exclusive bool [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoSearch(const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &topic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_desc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &uid = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &priority_owner_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &team_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &starred_by = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<bool> &r_private = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_private = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &r_template = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &archived = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclusive = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repoSigningKey(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  id qint64 [required]
    * @param[in]  oai_submit_pull_review_options OAISubmitPullReviewOptions [required]
    */
    virtual void repoSubmitPullReview(const QString &owner, const QString &repo, const qint64 &index, const qint64 &id, const OAISubmitPullReviewOptions &oai_submit_pull_review_options);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  ref QString [optional]
    */
    virtual void repoTestHook(const QString &owner, const QString &repo, const qint64 &id, const ::OpenAPI::OptionalParam<QString> &ref = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  user QString [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  before QDateTime [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void repoTrackedTimes(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_transfer_repo_option OAITransferRepoOption [required]
    */
    virtual void repoTransfer(const QString &owner, const QString &repo, const OAITransferRepoOption &oai_transfer_repo_option);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  id qint64 [required]
    */
    virtual void repoUnDismissPullReview(const QString &owner, const QString &repo, const qint64 &index, const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  filepath QString [required]
    * @param[in]  oai_update_file_options OAIUpdateFileOptions [required]
    */
    virtual void repoUpdateFile(const QString &owner, const QString &repo, const QString &filepath, const OAIUpdateFileOptions &oai_update_file_options);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  index qint64 [required]
    * @param[in]  style QString [optional]
    */
    virtual void repoUpdatePullRequest(const QString &owner, const QString &repo, const qint64 &index, const ::OpenAPI::OptionalParam<QString> &style = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_repo_topic_options OAIRepoTopicOptions [optional]
    */
    virtual void repoUpdateTopics(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAIRepoTopicOptions> &oai_repo_topic_options = ::OpenAPI::OptionalParam<OAIRepoTopicOptions>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repoValidateIssueConfig(const QString &owner, const QString &repo);

    /**
    * @param[in]  q QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void topicSearch(const QString &q, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void userCurrentCheckSubscription(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void userCurrentDeleteSubscription(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void userCurrentPutSubscription(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  user QString [required]
    */
    Q_DECL_DEPRECATED virtual void userTrackedTimes(const QString &owner, const QString &repo, const QString &user);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void acceptRepoTransferCallback(OAIHttpRequestWorker *worker);
    void createCurrentUserRepoCallback(OAIHttpRequestWorker *worker);
    void createForkCallback(OAIHttpRequestWorker *worker);
    void generateRepoCallback(OAIHttpRequestWorker *worker);
    void getAnnotatedTagCallback(OAIHttpRequestWorker *worker);
    void getBlobCallback(OAIHttpRequestWorker *worker);
    void getTreeCallback(OAIHttpRequestWorker *worker);
    void listForksCallback(OAIHttpRequestWorker *worker);
    void rejectRepoTransferCallback(OAIHttpRequestWorker *worker);
    void repoAddCollaboratorCallback(OAIHttpRequestWorker *worker);
    void repoAddPushMirrorCallback(OAIHttpRequestWorker *worker);
    void repoAddTeamCallback(OAIHttpRequestWorker *worker);
    void repoAddTopicCallback(OAIHttpRequestWorker *worker);
    void repoApplyDiffPatchCallback(OAIHttpRequestWorker *worker);
    void repoCancelScheduledAutoMergeCallback(OAIHttpRequestWorker *worker);
    void repoCheckCollaboratorCallback(OAIHttpRequestWorker *worker);
    void repoCheckTeamCallback(OAIHttpRequestWorker *worker);
    void repoCreateBranchCallback(OAIHttpRequestWorker *worker);
    void repoCreateBranchProtectionCallback(OAIHttpRequestWorker *worker);
    void repoCreateFileCallback(OAIHttpRequestWorker *worker);
    void repoCreateHookCallback(OAIHttpRequestWorker *worker);
    void repoCreateKeyCallback(OAIHttpRequestWorker *worker);
    void repoCreatePullRequestCallback(OAIHttpRequestWorker *worker);
    void repoCreatePullReviewCallback(OAIHttpRequestWorker *worker);
    void repoCreatePullReviewRequestsCallback(OAIHttpRequestWorker *worker);
    void repoCreateReleaseCallback(OAIHttpRequestWorker *worker);
    void repoCreateReleaseAttachmentCallback(OAIHttpRequestWorker *worker);
    void repoCreateStatusCallback(OAIHttpRequestWorker *worker);
    void repoCreateTagCallback(OAIHttpRequestWorker *worker);
    void repoCreateWikiPageCallback(OAIHttpRequestWorker *worker);
    void repoDeleteCallback(OAIHttpRequestWorker *worker);
    void repoDeleteBranchCallback(OAIHttpRequestWorker *worker);
    void repoDeleteBranchProtectionCallback(OAIHttpRequestWorker *worker);
    void repoDeleteCollaboratorCallback(OAIHttpRequestWorker *worker);
    void repoDeleteFileCallback(OAIHttpRequestWorker *worker);
    void repoDeleteGitHookCallback(OAIHttpRequestWorker *worker);
    void repoDeleteHookCallback(OAIHttpRequestWorker *worker);
    void repoDeleteKeyCallback(OAIHttpRequestWorker *worker);
    void repoDeletePullReviewCallback(OAIHttpRequestWorker *worker);
    void repoDeletePullReviewRequestsCallback(OAIHttpRequestWorker *worker);
    void repoDeletePushMirrorCallback(OAIHttpRequestWorker *worker);
    void repoDeleteReleaseCallback(OAIHttpRequestWorker *worker);
    void repoDeleteReleaseAttachmentCallback(OAIHttpRequestWorker *worker);
    void repoDeleteReleaseByTagCallback(OAIHttpRequestWorker *worker);
    void repoDeleteTagCallback(OAIHttpRequestWorker *worker);
    void repoDeleteTeamCallback(OAIHttpRequestWorker *worker);
    void repoDeleteTopicCallback(OAIHttpRequestWorker *worker);
    void repoDeleteWikiPageCallback(OAIHttpRequestWorker *worker);
    void repoDismissPullReviewCallback(OAIHttpRequestWorker *worker);
    void repoDownloadCommitDiffOrPatchCallback(OAIHttpRequestWorker *worker);
    void repoDownloadPullDiffOrPatchCallback(OAIHttpRequestWorker *worker);
    void repoEditCallback(OAIHttpRequestWorker *worker);
    void repoEditBranchProtectionCallback(OAIHttpRequestWorker *worker);
    void repoEditGitHookCallback(OAIHttpRequestWorker *worker);
    void repoEditHookCallback(OAIHttpRequestWorker *worker);
    void repoEditPullRequestCallback(OAIHttpRequestWorker *worker);
    void repoEditReleaseCallback(OAIHttpRequestWorker *worker);
    void repoEditReleaseAttachmentCallback(OAIHttpRequestWorker *worker);
    void repoEditWikiPageCallback(OAIHttpRequestWorker *worker);
    void repoGetCallback(OAIHttpRequestWorker *worker);
    void repoGetAllCommitsCallback(OAIHttpRequestWorker *worker);
    void repoGetArchiveCallback(OAIHttpRequestWorker *worker);
    void repoGetAssigneesCallback(OAIHttpRequestWorker *worker);
    void repoGetBranchCallback(OAIHttpRequestWorker *worker);
    void repoGetBranchProtectionCallback(OAIHttpRequestWorker *worker);
    void repoGetByIDCallback(OAIHttpRequestWorker *worker);
    void repoGetCombinedStatusByRefCallback(OAIHttpRequestWorker *worker);
    void repoGetContentsCallback(OAIHttpRequestWorker *worker);
    void repoGetContentsListCallback(OAIHttpRequestWorker *worker);
    void repoGetEditorConfigCallback(OAIHttpRequestWorker *worker);
    void repoGetGitHookCallback(OAIHttpRequestWorker *worker);
    void repoGetHookCallback(OAIHttpRequestWorker *worker);
    void repoGetIssueConfigCallback(OAIHttpRequestWorker *worker);
    void repoGetIssueTemplatesCallback(OAIHttpRequestWorker *worker);
    void repoGetKeyCallback(OAIHttpRequestWorker *worker);
    void repoGetLanguagesCallback(OAIHttpRequestWorker *worker);
    void repoGetLatestReleaseCallback(OAIHttpRequestWorker *worker);
    void repoGetNoteCallback(OAIHttpRequestWorker *worker);
    void repoGetPullRequestCallback(OAIHttpRequestWorker *worker);
    void repoGetPullRequestCommitsCallback(OAIHttpRequestWorker *worker);
    void repoGetPullRequestFilesCallback(OAIHttpRequestWorker *worker);
    void repoGetPullReviewCallback(OAIHttpRequestWorker *worker);
    void repoGetPullReviewCommentsCallback(OAIHttpRequestWorker *worker);
    void repoGetPushMirrorByRemoteNameCallback(OAIHttpRequestWorker *worker);
    void repoGetRawFileCallback(OAIHttpRequestWorker *worker);
    void repoGetRawFileOrLFSCallback(OAIHttpRequestWorker *worker);
    void repoGetReleaseCallback(OAIHttpRequestWorker *worker);
    void repoGetReleaseAttachmentCallback(OAIHttpRequestWorker *worker);
    void repoGetReleaseByTagCallback(OAIHttpRequestWorker *worker);
    void repoGetRepoPermissionsCallback(OAIHttpRequestWorker *worker);
    void repoGetReviewersCallback(OAIHttpRequestWorker *worker);
    void repoGetSingleCommitCallback(OAIHttpRequestWorker *worker);
    void repoGetTagCallback(OAIHttpRequestWorker *worker);
    void repoGetWikiPageCallback(OAIHttpRequestWorker *worker);
    void repoGetWikiPageRevisionsCallback(OAIHttpRequestWorker *worker);
    void repoGetWikiPagesCallback(OAIHttpRequestWorker *worker);
    void repoListActivityFeedsCallback(OAIHttpRequestWorker *worker);
    void repoListAllGitRefsCallback(OAIHttpRequestWorker *worker);
    void repoListBranchProtectionCallback(OAIHttpRequestWorker *worker);
    void repoListBranchesCallback(OAIHttpRequestWorker *worker);
    void repoListCollaboratorsCallback(OAIHttpRequestWorker *worker);
    void repoListGitHooksCallback(OAIHttpRequestWorker *worker);
    void repoListGitRefsCallback(OAIHttpRequestWorker *worker);
    void repoListHooksCallback(OAIHttpRequestWorker *worker);
    void repoListKeysCallback(OAIHttpRequestWorker *worker);
    void repoListPullRequestsCallback(OAIHttpRequestWorker *worker);
    void repoListPullReviewsCallback(OAIHttpRequestWorker *worker);
    void repoListPushMirrorsCallback(OAIHttpRequestWorker *worker);
    void repoListReleaseAttachmentsCallback(OAIHttpRequestWorker *worker);
    void repoListReleasesCallback(OAIHttpRequestWorker *worker);
    void repoListStargazersCallback(OAIHttpRequestWorker *worker);
    void repoListStatusesCallback(OAIHttpRequestWorker *worker);
    void repoListStatusesByRefCallback(OAIHttpRequestWorker *worker);
    void repoListSubscribersCallback(OAIHttpRequestWorker *worker);
    void repoListTagsCallback(OAIHttpRequestWorker *worker);
    void repoListTeamsCallback(OAIHttpRequestWorker *worker);
    void repoListTopicsCallback(OAIHttpRequestWorker *worker);
    void repoMergePullRequestCallback(OAIHttpRequestWorker *worker);
    void repoMigrateCallback(OAIHttpRequestWorker *worker);
    void repoMirrorSyncCallback(OAIHttpRequestWorker *worker);
    void repoPullRequestIsMergedCallback(OAIHttpRequestWorker *worker);
    void repoPushMirrorSyncCallback(OAIHttpRequestWorker *worker);
    void repoSearchCallback(OAIHttpRequestWorker *worker);
    void repoSigningKeyCallback(OAIHttpRequestWorker *worker);
    void repoSubmitPullReviewCallback(OAIHttpRequestWorker *worker);
    void repoTestHookCallback(OAIHttpRequestWorker *worker);
    void repoTrackedTimesCallback(OAIHttpRequestWorker *worker);
    void repoTransferCallback(OAIHttpRequestWorker *worker);
    void repoUnDismissPullReviewCallback(OAIHttpRequestWorker *worker);
    void repoUpdateFileCallback(OAIHttpRequestWorker *worker);
    void repoUpdatePullRequestCallback(OAIHttpRequestWorker *worker);
    void repoUpdateTopicsCallback(OAIHttpRequestWorker *worker);
    void repoValidateIssueConfigCallback(OAIHttpRequestWorker *worker);
    void topicSearchCallback(OAIHttpRequestWorker *worker);
    void userCurrentCheckSubscriptionCallback(OAIHttpRequestWorker *worker);
    void userCurrentDeleteSubscriptionCallback(OAIHttpRequestWorker *worker);
    void userCurrentPutSubscriptionCallback(OAIHttpRequestWorker *worker);
    void userTrackedTimesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void acceptRepoTransferSignal(OAIRepository summary);
    void createCurrentUserRepoSignal(OAIRepository summary);
    void createForkSignal(OAIRepository summary);
    void generateRepoSignal(OAIRepository summary);
    void getAnnotatedTagSignal(OAIAnnotatedTag summary);
    void getBlobSignal(OAIGitBlobResponse summary);
    void getTreeSignal(OAIGitTreeResponse summary);
    void listForksSignal(QList<OAIRepository> summary);
    void rejectRepoTransferSignal(OAIRepository summary);
    void repoAddCollaboratorSignal();
    void repoAddPushMirrorSignal(OAIPushMirror summary);
    void repoAddTeamSignal();
    void repoAddTopicSignal();
    void repoApplyDiffPatchSignal(OAIFileResponse summary);
    void repoCancelScheduledAutoMergeSignal();
    void repoCheckCollaboratorSignal();
    void repoCheckTeamSignal(OAITeam summary);
    void repoCreateBranchSignal(OAIBranch summary);
    void repoCreateBranchProtectionSignal(OAIBranchProtection summary);
    void repoCreateFileSignal(OAIFileResponse summary);
    void repoCreateHookSignal(OAIHook summary);
    void repoCreateKeySignal(OAIDeployKey summary);
    void repoCreatePullRequestSignal(OAIPullRequest summary);
    void repoCreatePullReviewSignal(OAIPullReview summary);
    void repoCreatePullReviewRequestsSignal(QList<OAIPullReview> summary);
    void repoCreateReleaseSignal(OAIRelease summary);
    void repoCreateReleaseAttachmentSignal(OAIAttachment summary);
    void repoCreateStatusSignal(OAICommitStatus summary);
    void repoCreateTagSignal(OAITag summary);
    void repoCreateWikiPageSignal(OAIWikiPage summary);
    void repoDeleteSignal();
    void repoDeleteBranchSignal();
    void repoDeleteBranchProtectionSignal();
    void repoDeleteCollaboratorSignal();
    void repoDeleteFileSignal(OAIFileDeleteResponse summary);
    void repoDeleteGitHookSignal();
    void repoDeleteHookSignal();
    void repoDeleteKeySignal();
    void repoDeletePullReviewSignal();
    void repoDeletePullReviewRequestsSignal();
    void repoDeletePushMirrorSignal();
    void repoDeleteReleaseSignal();
    void repoDeleteReleaseAttachmentSignal();
    void repoDeleteReleaseByTagSignal();
    void repoDeleteTagSignal();
    void repoDeleteTeamSignal();
    void repoDeleteTopicSignal();
    void repoDeleteWikiPageSignal();
    void repoDismissPullReviewSignal(OAIPullReview summary);
    void repoDownloadCommitDiffOrPatchSignal(QString summary);
    void repoDownloadPullDiffOrPatchSignal(QString summary);
    void repoEditSignal(OAIRepository summary);
    void repoEditBranchProtectionSignal(OAIBranchProtection summary);
    void repoEditGitHookSignal(OAIGitHook summary);
    void repoEditHookSignal(OAIHook summary);
    void repoEditPullRequestSignal(OAIPullRequest summary);
    void repoEditReleaseSignal(OAIRelease summary);
    void repoEditReleaseAttachmentSignal(OAIAttachment summary);
    void repoEditWikiPageSignal(OAIWikiPage summary);
    void repoGetSignal(OAIRepository summary);
    void repoGetAllCommitsSignal(QList<OAICommit> summary);
    void repoGetArchiveSignal();
    void repoGetAssigneesSignal(QList<OAIUser> summary);
    void repoGetBranchSignal(OAIBranch summary);
    void repoGetBranchProtectionSignal(OAIBranchProtection summary);
    void repoGetByIDSignal(OAIRepository summary);
    void repoGetCombinedStatusByRefSignal(OAICombinedStatus summary);
    void repoGetContentsSignal(OAIContentsResponse summary);
    void repoGetContentsListSignal(QList<OAIContentsResponse> summary);
    void repoGetEditorConfigSignal();
    void repoGetGitHookSignal(OAIGitHook summary);
    void repoGetHookSignal(OAIHook summary);
    void repoGetIssueConfigSignal(OAIIssueConfig summary);
    void repoGetIssueTemplatesSignal(QList<OAIIssueTemplate> summary);
    void repoGetKeySignal(OAIDeployKey summary);
    void repoGetLanguagesSignal(QMap<QString, qint64> summary);
    void repoGetLatestReleaseSignal(OAIRelease summary);
    void repoGetNoteSignal(OAINote summary);
    void repoGetPullRequestSignal(OAIPullRequest summary);
    void repoGetPullRequestCommitsSignal(QList<OAICommit> summary);
    void repoGetPullRequestFilesSignal(QList<OAIChangedFile> summary);
    void repoGetPullReviewSignal(OAIPullReview summary);
    void repoGetPullReviewCommentsSignal(QList<OAIPullReviewComment> summary);
    void repoGetPushMirrorByRemoteNameSignal(OAIPushMirror summary);
    void repoGetRawFileSignal();
    void repoGetRawFileOrLFSSignal();
    void repoGetReleaseSignal(OAIRelease summary);
    void repoGetReleaseAttachmentSignal(OAIAttachment summary);
    void repoGetReleaseByTagSignal(OAIRelease summary);
    void repoGetRepoPermissionsSignal(OAIRepoCollaboratorPermission summary);
    void repoGetReviewersSignal(QList<OAIUser> summary);
    void repoGetSingleCommitSignal(OAICommit summary);
    void repoGetTagSignal(OAITag summary);
    void repoGetWikiPageSignal(OAIWikiPage summary);
    void repoGetWikiPageRevisionsSignal(OAIWikiCommitList summary);
    void repoGetWikiPagesSignal(QList<OAIWikiPageMetaData> summary);
    void repoListActivityFeedsSignal(QList<OAIActivity> summary);
    void repoListAllGitRefsSignal(QList<OAIReference> summary);
    void repoListBranchProtectionSignal(QList<OAIBranchProtection> summary);
    void repoListBranchesSignal(QList<OAIBranch> summary);
    void repoListCollaboratorsSignal(QList<OAIUser> summary);
    void repoListGitHooksSignal(QList<OAIGitHook> summary);
    void repoListGitRefsSignal(QList<OAIReference> summary);
    void repoListHooksSignal(QList<OAIHook> summary);
    void repoListKeysSignal(QList<OAIDeployKey> summary);
    void repoListPullRequestsSignal(QList<OAIPullRequest> summary);
    void repoListPullReviewsSignal(QList<OAIPullReview> summary);
    void repoListPushMirrorsSignal(QList<OAIPushMirror> summary);
    void repoListReleaseAttachmentsSignal(QList<OAIAttachment> summary);
    void repoListReleasesSignal(QList<OAIRelease> summary);
    void repoListStargazersSignal(QList<OAIUser> summary);
    void repoListStatusesSignal(QList<OAICommitStatus> summary);
    void repoListStatusesByRefSignal(QList<OAICommitStatus> summary);
    void repoListSubscribersSignal(QList<OAIUser> summary);
    void repoListTagsSignal(QList<OAITag> summary);
    void repoListTeamsSignal(QList<OAITeam> summary);
    void repoListTopicsSignal(OAITopicName summary);
    void repoMergePullRequestSignal();
    void repoMigrateSignal(OAIRepository summary);
    void repoMirrorSyncSignal();
    void repoPullRequestIsMergedSignal();
    void repoPushMirrorSyncSignal();
    void repoSearchSignal(OAISearchResults summary);
    void repoSigningKeySignal(QString summary);
    void repoSubmitPullReviewSignal(OAIPullReview summary);
    void repoTestHookSignal();
    void repoTrackedTimesSignal(QList<OAITrackedTime> summary);
    void repoTransferSignal(OAIRepository summary);
    void repoUnDismissPullReviewSignal(OAIPullReview summary);
    void repoUpdateFileSignal(OAIFileResponse summary);
    void repoUpdatePullRequestSignal();
    void repoUpdateTopicsSignal();
    void repoValidateIssueConfigSignal(OAIIssueConfigValidation summary);
    void topicSearchSignal(QList<OAITopicResponse> summary);
    void userCurrentCheckSubscriptionSignal(OAIWatchInfo summary);
    void userCurrentDeleteSubscriptionSignal();
    void userCurrentPutSubscriptionSignal(OAIWatchInfo summary);
    void userTrackedTimesSignal(QList<OAITrackedTime> summary);


    void acceptRepoTransferSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void createCurrentUserRepoSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void createForkSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void generateRepoSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void getAnnotatedTagSignalFull(OAIHttpRequestWorker *worker, OAIAnnotatedTag summary);
    void getBlobSignalFull(OAIHttpRequestWorker *worker, OAIGitBlobResponse summary);
    void getTreeSignalFull(OAIHttpRequestWorker *worker, OAIGitTreeResponse summary);
    void listForksSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepository> summary);
    void rejectRepoTransferSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void repoAddCollaboratorSignalFull(OAIHttpRequestWorker *worker);
    void repoAddPushMirrorSignalFull(OAIHttpRequestWorker *worker, OAIPushMirror summary);
    void repoAddTeamSignalFull(OAIHttpRequestWorker *worker);
    void repoAddTopicSignalFull(OAIHttpRequestWorker *worker);
    void repoApplyDiffPatchSignalFull(OAIHttpRequestWorker *worker, OAIFileResponse summary);
    void repoCancelScheduledAutoMergeSignalFull(OAIHttpRequestWorker *worker);
    void repoCheckCollaboratorSignalFull(OAIHttpRequestWorker *worker);
    void repoCheckTeamSignalFull(OAIHttpRequestWorker *worker, OAITeam summary);
    void repoCreateBranchSignalFull(OAIHttpRequestWorker *worker, OAIBranch summary);
    void repoCreateBranchProtectionSignalFull(OAIHttpRequestWorker *worker, OAIBranchProtection summary);
    void repoCreateFileSignalFull(OAIHttpRequestWorker *worker, OAIFileResponse summary);
    void repoCreateHookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void repoCreateKeySignalFull(OAIHttpRequestWorker *worker, OAIDeployKey summary);
    void repoCreatePullRequestSignalFull(OAIHttpRequestWorker *worker, OAIPullRequest summary);
    void repoCreatePullReviewSignalFull(OAIHttpRequestWorker *worker, OAIPullReview summary);
    void repoCreatePullReviewRequestsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPullReview> summary);
    void repoCreateReleaseSignalFull(OAIHttpRequestWorker *worker, OAIRelease summary);
    void repoCreateReleaseAttachmentSignalFull(OAIHttpRequestWorker *worker, OAIAttachment summary);
    void repoCreateStatusSignalFull(OAIHttpRequestWorker *worker, OAICommitStatus summary);
    void repoCreateTagSignalFull(OAIHttpRequestWorker *worker, OAITag summary);
    void repoCreateWikiPageSignalFull(OAIHttpRequestWorker *worker, OAIWikiPage summary);
    void repoDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repoDeleteBranchSignalFull(OAIHttpRequestWorker *worker);
    void repoDeleteBranchProtectionSignalFull(OAIHttpRequestWorker *worker);
    void repoDeleteCollaboratorSignalFull(OAIHttpRequestWorker *worker);
    void repoDeleteFileSignalFull(OAIHttpRequestWorker *worker, OAIFileDeleteResponse summary);
    void repoDeleteGitHookSignalFull(OAIHttpRequestWorker *worker);
    void repoDeleteHookSignalFull(OAIHttpRequestWorker *worker);
    void repoDeleteKeySignalFull(OAIHttpRequestWorker *worker);
    void repoDeletePullReviewSignalFull(OAIHttpRequestWorker *worker);
    void repoDeletePullReviewRequestsSignalFull(OAIHttpRequestWorker *worker);
    void repoDeletePushMirrorSignalFull(OAIHttpRequestWorker *worker);
    void repoDeleteReleaseSignalFull(OAIHttpRequestWorker *worker);
    void repoDeleteReleaseAttachmentSignalFull(OAIHttpRequestWorker *worker);
    void repoDeleteReleaseByTagSignalFull(OAIHttpRequestWorker *worker);
    void repoDeleteTagSignalFull(OAIHttpRequestWorker *worker);
    void repoDeleteTeamSignalFull(OAIHttpRequestWorker *worker);
    void repoDeleteTopicSignalFull(OAIHttpRequestWorker *worker);
    void repoDeleteWikiPageSignalFull(OAIHttpRequestWorker *worker);
    void repoDismissPullReviewSignalFull(OAIHttpRequestWorker *worker, OAIPullReview summary);
    void repoDownloadCommitDiffOrPatchSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void repoDownloadPullDiffOrPatchSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void repoEditSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void repoEditBranchProtectionSignalFull(OAIHttpRequestWorker *worker, OAIBranchProtection summary);
    void repoEditGitHookSignalFull(OAIHttpRequestWorker *worker, OAIGitHook summary);
    void repoEditHookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void repoEditPullRequestSignalFull(OAIHttpRequestWorker *worker, OAIPullRequest summary);
    void repoEditReleaseSignalFull(OAIHttpRequestWorker *worker, OAIRelease summary);
    void repoEditReleaseAttachmentSignalFull(OAIHttpRequestWorker *worker, OAIAttachment summary);
    void repoEditWikiPageSignalFull(OAIHttpRequestWorker *worker, OAIWikiPage summary);
    void repoGetSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void repoGetAllCommitsSignalFull(OAIHttpRequestWorker *worker, QList<OAICommit> summary);
    void repoGetArchiveSignalFull(OAIHttpRequestWorker *worker);
    void repoGetAssigneesSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void repoGetBranchSignalFull(OAIHttpRequestWorker *worker, OAIBranch summary);
    void repoGetBranchProtectionSignalFull(OAIHttpRequestWorker *worker, OAIBranchProtection summary);
    void repoGetByIDSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void repoGetCombinedStatusByRefSignalFull(OAIHttpRequestWorker *worker, OAICombinedStatus summary);
    void repoGetContentsSignalFull(OAIHttpRequestWorker *worker, OAIContentsResponse summary);
    void repoGetContentsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIContentsResponse> summary);
    void repoGetEditorConfigSignalFull(OAIHttpRequestWorker *worker);
    void repoGetGitHookSignalFull(OAIHttpRequestWorker *worker, OAIGitHook summary);
    void repoGetHookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void repoGetIssueConfigSignalFull(OAIHttpRequestWorker *worker, OAIIssueConfig summary);
    void repoGetIssueTemplatesSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssueTemplate> summary);
    void repoGetKeySignalFull(OAIHttpRequestWorker *worker, OAIDeployKey summary);
    void repoGetLanguagesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint64> summary);
    void repoGetLatestReleaseSignalFull(OAIHttpRequestWorker *worker, OAIRelease summary);
    void repoGetNoteSignalFull(OAIHttpRequestWorker *worker, OAINote summary);
    void repoGetPullRequestSignalFull(OAIHttpRequestWorker *worker, OAIPullRequest summary);
    void repoGetPullRequestCommitsSignalFull(OAIHttpRequestWorker *worker, QList<OAICommit> summary);
    void repoGetPullRequestFilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIChangedFile> summary);
    void repoGetPullReviewSignalFull(OAIHttpRequestWorker *worker, OAIPullReview summary);
    void repoGetPullReviewCommentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPullReviewComment> summary);
    void repoGetPushMirrorByRemoteNameSignalFull(OAIHttpRequestWorker *worker, OAIPushMirror summary);
    void repoGetRawFileSignalFull(OAIHttpRequestWorker *worker);
    void repoGetRawFileOrLFSSignalFull(OAIHttpRequestWorker *worker);
    void repoGetReleaseSignalFull(OAIHttpRequestWorker *worker, OAIRelease summary);
    void repoGetReleaseAttachmentSignalFull(OAIHttpRequestWorker *worker, OAIAttachment summary);
    void repoGetReleaseByTagSignalFull(OAIHttpRequestWorker *worker, OAIRelease summary);
    void repoGetRepoPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIRepoCollaboratorPermission summary);
    void repoGetReviewersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void repoGetSingleCommitSignalFull(OAIHttpRequestWorker *worker, OAICommit summary);
    void repoGetTagSignalFull(OAIHttpRequestWorker *worker, OAITag summary);
    void repoGetWikiPageSignalFull(OAIHttpRequestWorker *worker, OAIWikiPage summary);
    void repoGetWikiPageRevisionsSignalFull(OAIHttpRequestWorker *worker, OAIWikiCommitList summary);
    void repoGetWikiPagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIWikiPageMetaData> summary);
    void repoListActivityFeedsSignalFull(OAIHttpRequestWorker *worker, QList<OAIActivity> summary);
    void repoListAllGitRefsSignalFull(OAIHttpRequestWorker *worker, QList<OAIReference> summary);
    void repoListBranchProtectionSignalFull(OAIHttpRequestWorker *worker, QList<OAIBranchProtection> summary);
    void repoListBranchesSignalFull(OAIHttpRequestWorker *worker, QList<OAIBranch> summary);
    void repoListCollaboratorsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void repoListGitHooksSignalFull(OAIHttpRequestWorker *worker, QList<OAIGitHook> summary);
    void repoListGitRefsSignalFull(OAIHttpRequestWorker *worker, QList<OAIReference> summary);
    void repoListHooksSignalFull(OAIHttpRequestWorker *worker, QList<OAIHook> summary);
    void repoListKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployKey> summary);
    void repoListPullRequestsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPullRequest> summary);
    void repoListPullReviewsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPullReview> summary);
    void repoListPushMirrorsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPushMirror> summary);
    void repoListReleaseAttachmentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAttachment> summary);
    void repoListReleasesSignalFull(OAIHttpRequestWorker *worker, QList<OAIRelease> summary);
    void repoListStargazersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void repoListStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAICommitStatus> summary);
    void repoListStatusesByRefSignalFull(OAIHttpRequestWorker *worker, QList<OAICommitStatus> summary);
    void repoListSubscribersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void repoListTagsSignalFull(OAIHttpRequestWorker *worker, QList<OAITag> summary);
    void repoListTeamsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void repoListTopicsSignalFull(OAIHttpRequestWorker *worker, OAITopicName summary);
    void repoMergePullRequestSignalFull(OAIHttpRequestWorker *worker);
    void repoMigrateSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void repoMirrorSyncSignalFull(OAIHttpRequestWorker *worker);
    void repoPullRequestIsMergedSignalFull(OAIHttpRequestWorker *worker);
    void repoPushMirrorSyncSignalFull(OAIHttpRequestWorker *worker);
    void repoSearchSignalFull(OAIHttpRequestWorker *worker, OAISearchResults summary);
    void repoSigningKeySignalFull(OAIHttpRequestWorker *worker, QString summary);
    void repoSubmitPullReviewSignalFull(OAIHttpRequestWorker *worker, OAIPullReview summary);
    void repoTestHookSignalFull(OAIHttpRequestWorker *worker);
    void repoTrackedTimesSignalFull(OAIHttpRequestWorker *worker, QList<OAITrackedTime> summary);
    void repoTransferSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void repoUnDismissPullReviewSignalFull(OAIHttpRequestWorker *worker, OAIPullReview summary);
    void repoUpdateFileSignalFull(OAIHttpRequestWorker *worker, OAIFileResponse summary);
    void repoUpdatePullRequestSignalFull(OAIHttpRequestWorker *worker);
    void repoUpdateTopicsSignalFull(OAIHttpRequestWorker *worker);
    void repoValidateIssueConfigSignalFull(OAIHttpRequestWorker *worker, OAIIssueConfigValidation summary);
    void topicSearchSignalFull(OAIHttpRequestWorker *worker, QList<OAITopicResponse> summary);
    void userCurrentCheckSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIWatchInfo summary);
    void userCurrentDeleteSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void userCurrentPutSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIWatchInfo summary);
    void userTrackedTimesSignalFull(OAIHttpRequestWorker *worker, QList<OAITrackedTime> summary);

    Q_DECL_DEPRECATED_X("Use acceptRepoTransferSignalError() instead")
    void acceptRepoTransferSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void acceptRepoTransferSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCurrentUserRepoSignalError() instead")
    void createCurrentUserRepoSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCurrentUserRepoSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createForkSignalError() instead")
    void createForkSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createForkSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateRepoSignalError() instead")
    void generateRepoSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateRepoSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotatedTagSignalError() instead")
    void getAnnotatedTagSignalE(OAIAnnotatedTag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotatedTagSignalError(OAIAnnotatedTag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBlobSignalError() instead")
    void getBlobSignalE(OAIGitBlobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBlobSignalError(OAIGitBlobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTreeSignalError() instead")
    void getTreeSignalE(OAIGitTreeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTreeSignalError(OAIGitTreeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listForksSignalError() instead")
    void listForksSignalE(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listForksSignalError(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectRepoTransferSignalError() instead")
    void rejectRepoTransferSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectRepoTransferSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoAddCollaboratorSignalError() instead")
    void repoAddCollaboratorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoAddCollaboratorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoAddPushMirrorSignalError() instead")
    void repoAddPushMirrorSignalE(OAIPushMirror summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoAddPushMirrorSignalError(OAIPushMirror summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoAddTeamSignalError() instead")
    void repoAddTeamSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoAddTeamSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoAddTopicSignalError() instead")
    void repoAddTopicSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoAddTopicSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoApplyDiffPatchSignalError() instead")
    void repoApplyDiffPatchSignalE(OAIFileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoApplyDiffPatchSignalError(OAIFileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCancelScheduledAutoMergeSignalError() instead")
    void repoCancelScheduledAutoMergeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoCancelScheduledAutoMergeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCheckCollaboratorSignalError() instead")
    void repoCheckCollaboratorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoCheckCollaboratorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCheckTeamSignalError() instead")
    void repoCheckTeamSignalE(OAITeam summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCheckTeamSignalError(OAITeam summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateBranchSignalError() instead")
    void repoCreateBranchSignalE(OAIBranch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateBranchSignalError(OAIBranch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateBranchProtectionSignalError() instead")
    void repoCreateBranchProtectionSignalE(OAIBranchProtection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateBranchProtectionSignalError(OAIBranchProtection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateFileSignalError() instead")
    void repoCreateFileSignalE(OAIFileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateFileSignalError(OAIFileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateHookSignalError() instead")
    void repoCreateHookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateHookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateKeySignalError() instead")
    void repoCreateKeySignalE(OAIDeployKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateKeySignalError(OAIDeployKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreatePullRequestSignalError() instead")
    void repoCreatePullRequestSignalE(OAIPullRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreatePullRequestSignalError(OAIPullRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreatePullReviewSignalError() instead")
    void repoCreatePullReviewSignalE(OAIPullReview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreatePullReviewSignalError(OAIPullReview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreatePullReviewRequestsSignalError() instead")
    void repoCreatePullReviewRequestsSignalE(QList<OAIPullReview> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreatePullReviewRequestsSignalError(QList<OAIPullReview> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateReleaseSignalError() instead")
    void repoCreateReleaseSignalE(OAIRelease summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateReleaseSignalError(OAIRelease summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateReleaseAttachmentSignalError() instead")
    void repoCreateReleaseAttachmentSignalE(OAIAttachment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateReleaseAttachmentSignalError(OAIAttachment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateStatusSignalError() instead")
    void repoCreateStatusSignalE(OAICommitStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateStatusSignalError(OAICommitStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateTagSignalError() instead")
    void repoCreateTagSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateTagSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateWikiPageSignalError() instead")
    void repoCreateWikiPageSignalE(OAIWikiPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateWikiPageSignalError(OAIWikiPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteSignalError() instead")
    void repoDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteBranchSignalError() instead")
    void repoDeleteBranchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteBranchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteBranchProtectionSignalError() instead")
    void repoDeleteBranchProtectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteBranchProtectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteCollaboratorSignalError() instead")
    void repoDeleteCollaboratorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteCollaboratorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteFileSignalError() instead")
    void repoDeleteFileSignalE(OAIFileDeleteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteFileSignalError(OAIFileDeleteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteGitHookSignalError() instead")
    void repoDeleteGitHookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteGitHookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteHookSignalError() instead")
    void repoDeleteHookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteHookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteKeySignalError() instead")
    void repoDeleteKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeletePullReviewSignalError() instead")
    void repoDeletePullReviewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeletePullReviewSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeletePullReviewRequestsSignalError() instead")
    void repoDeletePullReviewRequestsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeletePullReviewRequestsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeletePushMirrorSignalError() instead")
    void repoDeletePushMirrorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeletePushMirrorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteReleaseSignalError() instead")
    void repoDeleteReleaseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteReleaseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteReleaseAttachmentSignalError() instead")
    void repoDeleteReleaseAttachmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteReleaseAttachmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteReleaseByTagSignalError() instead")
    void repoDeleteReleaseByTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteReleaseByTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteTagSignalError() instead")
    void repoDeleteTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteTeamSignalError() instead")
    void repoDeleteTeamSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteTeamSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteTopicSignalError() instead")
    void repoDeleteTopicSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteTopicSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteWikiPageSignalError() instead")
    void repoDeleteWikiPageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteWikiPageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDismissPullReviewSignalError() instead")
    void repoDismissPullReviewSignalE(OAIPullReview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDismissPullReviewSignalError(OAIPullReview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDownloadCommitDiffOrPatchSignalError() instead")
    void repoDownloadCommitDiffOrPatchSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDownloadCommitDiffOrPatchSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDownloadPullDiffOrPatchSignalError() instead")
    void repoDownloadPullDiffOrPatchSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDownloadPullDiffOrPatchSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoEditSignalError() instead")
    void repoEditSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoEditSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoEditBranchProtectionSignalError() instead")
    void repoEditBranchProtectionSignalE(OAIBranchProtection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoEditBranchProtectionSignalError(OAIBranchProtection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoEditGitHookSignalError() instead")
    void repoEditGitHookSignalE(OAIGitHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoEditGitHookSignalError(OAIGitHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoEditHookSignalError() instead")
    void repoEditHookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoEditHookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoEditPullRequestSignalError() instead")
    void repoEditPullRequestSignalE(OAIPullRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoEditPullRequestSignalError(OAIPullRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoEditReleaseSignalError() instead")
    void repoEditReleaseSignalE(OAIRelease summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoEditReleaseSignalError(OAIRelease summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoEditReleaseAttachmentSignalError() instead")
    void repoEditReleaseAttachmentSignalE(OAIAttachment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoEditReleaseAttachmentSignalError(OAIAttachment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoEditWikiPageSignalError() instead")
    void repoEditWikiPageSignalE(OAIWikiPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoEditWikiPageSignalError(OAIWikiPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetSignalError() instead")
    void repoGetSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetAllCommitsSignalError() instead")
    void repoGetAllCommitsSignalE(QList<OAICommit> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetAllCommitsSignalError(QList<OAICommit> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetArchiveSignalError() instead")
    void repoGetArchiveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetArchiveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetAssigneesSignalError() instead")
    void repoGetAssigneesSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetAssigneesSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetBranchSignalError() instead")
    void repoGetBranchSignalE(OAIBranch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetBranchSignalError(OAIBranch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetBranchProtectionSignalError() instead")
    void repoGetBranchProtectionSignalE(OAIBranchProtection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetBranchProtectionSignalError(OAIBranchProtection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetByIDSignalError() instead")
    void repoGetByIDSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetByIDSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetCombinedStatusByRefSignalError() instead")
    void repoGetCombinedStatusByRefSignalE(OAICombinedStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetCombinedStatusByRefSignalError(OAICombinedStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetContentsSignalError() instead")
    void repoGetContentsSignalE(OAIContentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetContentsSignalError(OAIContentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetContentsListSignalError() instead")
    void repoGetContentsListSignalE(QList<OAIContentsResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetContentsListSignalError(QList<OAIContentsResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetEditorConfigSignalError() instead")
    void repoGetEditorConfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetEditorConfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetGitHookSignalError() instead")
    void repoGetGitHookSignalE(OAIGitHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetGitHookSignalError(OAIGitHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetHookSignalError() instead")
    void repoGetHookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetHookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetIssueConfigSignalError() instead")
    void repoGetIssueConfigSignalE(OAIIssueConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetIssueConfigSignalError(OAIIssueConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetIssueTemplatesSignalError() instead")
    void repoGetIssueTemplatesSignalE(QList<OAIIssueTemplate> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetIssueTemplatesSignalError(QList<OAIIssueTemplate> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetKeySignalError() instead")
    void repoGetKeySignalE(OAIDeployKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetKeySignalError(OAIDeployKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetLanguagesSignalError() instead")
    void repoGetLanguagesSignalE(QMap<QString, qint64> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetLanguagesSignalError(QMap<QString, qint64> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetLatestReleaseSignalError() instead")
    void repoGetLatestReleaseSignalE(OAIRelease summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetLatestReleaseSignalError(OAIRelease summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetNoteSignalError() instead")
    void repoGetNoteSignalE(OAINote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetNoteSignalError(OAINote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetPullRequestSignalError() instead")
    void repoGetPullRequestSignalE(OAIPullRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetPullRequestSignalError(OAIPullRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetPullRequestCommitsSignalError() instead")
    void repoGetPullRequestCommitsSignalE(QList<OAICommit> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetPullRequestCommitsSignalError(QList<OAICommit> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetPullRequestFilesSignalError() instead")
    void repoGetPullRequestFilesSignalE(QList<OAIChangedFile> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetPullRequestFilesSignalError(QList<OAIChangedFile> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetPullReviewSignalError() instead")
    void repoGetPullReviewSignalE(OAIPullReview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetPullReviewSignalError(OAIPullReview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetPullReviewCommentsSignalError() instead")
    void repoGetPullReviewCommentsSignalE(QList<OAIPullReviewComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetPullReviewCommentsSignalError(QList<OAIPullReviewComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetPushMirrorByRemoteNameSignalError() instead")
    void repoGetPushMirrorByRemoteNameSignalE(OAIPushMirror summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetPushMirrorByRemoteNameSignalError(OAIPushMirror summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetRawFileSignalError() instead")
    void repoGetRawFileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetRawFileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetRawFileOrLFSSignalError() instead")
    void repoGetRawFileOrLFSSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetRawFileOrLFSSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetReleaseSignalError() instead")
    void repoGetReleaseSignalE(OAIRelease summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetReleaseSignalError(OAIRelease summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetReleaseAttachmentSignalError() instead")
    void repoGetReleaseAttachmentSignalE(OAIAttachment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetReleaseAttachmentSignalError(OAIAttachment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetReleaseByTagSignalError() instead")
    void repoGetReleaseByTagSignalE(OAIRelease summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetReleaseByTagSignalError(OAIRelease summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetRepoPermissionsSignalError() instead")
    void repoGetRepoPermissionsSignalE(OAIRepoCollaboratorPermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetRepoPermissionsSignalError(OAIRepoCollaboratorPermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetReviewersSignalError() instead")
    void repoGetReviewersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetReviewersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetSingleCommitSignalError() instead")
    void repoGetSingleCommitSignalE(OAICommit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetSingleCommitSignalError(OAICommit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetTagSignalError() instead")
    void repoGetTagSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetTagSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetWikiPageSignalError() instead")
    void repoGetWikiPageSignalE(OAIWikiPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetWikiPageSignalError(OAIWikiPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetWikiPageRevisionsSignalError() instead")
    void repoGetWikiPageRevisionsSignalE(OAIWikiCommitList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetWikiPageRevisionsSignalError(OAIWikiCommitList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetWikiPagesSignalError() instead")
    void repoGetWikiPagesSignalE(QList<OAIWikiPageMetaData> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetWikiPagesSignalError(QList<OAIWikiPageMetaData> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListActivityFeedsSignalError() instead")
    void repoListActivityFeedsSignalE(QList<OAIActivity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListActivityFeedsSignalError(QList<OAIActivity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListAllGitRefsSignalError() instead")
    void repoListAllGitRefsSignalE(QList<OAIReference> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListAllGitRefsSignalError(QList<OAIReference> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListBranchProtectionSignalError() instead")
    void repoListBranchProtectionSignalE(QList<OAIBranchProtection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListBranchProtectionSignalError(QList<OAIBranchProtection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListBranchesSignalError() instead")
    void repoListBranchesSignalE(QList<OAIBranch> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListBranchesSignalError(QList<OAIBranch> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListCollaboratorsSignalError() instead")
    void repoListCollaboratorsSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListCollaboratorsSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListGitHooksSignalError() instead")
    void repoListGitHooksSignalE(QList<OAIGitHook> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListGitHooksSignalError(QList<OAIGitHook> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListGitRefsSignalError() instead")
    void repoListGitRefsSignalE(QList<OAIReference> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListGitRefsSignalError(QList<OAIReference> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListHooksSignalError() instead")
    void repoListHooksSignalE(QList<OAIHook> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListHooksSignalError(QList<OAIHook> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListKeysSignalError() instead")
    void repoListKeysSignalE(QList<OAIDeployKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListKeysSignalError(QList<OAIDeployKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListPullRequestsSignalError() instead")
    void repoListPullRequestsSignalE(QList<OAIPullRequest> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListPullRequestsSignalError(QList<OAIPullRequest> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListPullReviewsSignalError() instead")
    void repoListPullReviewsSignalE(QList<OAIPullReview> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListPullReviewsSignalError(QList<OAIPullReview> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListPushMirrorsSignalError() instead")
    void repoListPushMirrorsSignalE(QList<OAIPushMirror> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListPushMirrorsSignalError(QList<OAIPushMirror> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListReleaseAttachmentsSignalError() instead")
    void repoListReleaseAttachmentsSignalE(QList<OAIAttachment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListReleaseAttachmentsSignalError(QList<OAIAttachment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListReleasesSignalError() instead")
    void repoListReleasesSignalE(QList<OAIRelease> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListReleasesSignalError(QList<OAIRelease> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListStargazersSignalError() instead")
    void repoListStargazersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListStargazersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListStatusesSignalError() instead")
    void repoListStatusesSignalE(QList<OAICommitStatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListStatusesSignalError(QList<OAICommitStatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListStatusesByRefSignalError() instead")
    void repoListStatusesByRefSignalE(QList<OAICommitStatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListStatusesByRefSignalError(QList<OAICommitStatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListSubscribersSignalError() instead")
    void repoListSubscribersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListSubscribersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListTagsSignalError() instead")
    void repoListTagsSignalE(QList<OAITag> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListTagsSignalError(QList<OAITag> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListTeamsSignalError() instead")
    void repoListTeamsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListTeamsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListTopicsSignalError() instead")
    void repoListTopicsSignalE(OAITopicName summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListTopicsSignalError(OAITopicName summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoMergePullRequestSignalError() instead")
    void repoMergePullRequestSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoMergePullRequestSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoMigrateSignalError() instead")
    void repoMigrateSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoMigrateSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoMirrorSyncSignalError() instead")
    void repoMirrorSyncSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoMirrorSyncSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoPullRequestIsMergedSignalError() instead")
    void repoPullRequestIsMergedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoPullRequestIsMergedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoPushMirrorSyncSignalError() instead")
    void repoPushMirrorSyncSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoPushMirrorSyncSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoSearchSignalError() instead")
    void repoSearchSignalE(OAISearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoSearchSignalError(OAISearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoSigningKeySignalError() instead")
    void repoSigningKeySignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoSigningKeySignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoSubmitPullReviewSignalError() instead")
    void repoSubmitPullReviewSignalE(OAIPullReview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoSubmitPullReviewSignalError(OAIPullReview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoTestHookSignalError() instead")
    void repoTestHookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoTestHookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoTrackedTimesSignalError() instead")
    void repoTrackedTimesSignalE(QList<OAITrackedTime> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoTrackedTimesSignalError(QList<OAITrackedTime> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoTransferSignalError() instead")
    void repoTransferSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoTransferSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoUnDismissPullReviewSignalError() instead")
    void repoUnDismissPullReviewSignalE(OAIPullReview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoUnDismissPullReviewSignalError(OAIPullReview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoUpdateFileSignalError() instead")
    void repoUpdateFileSignalE(OAIFileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoUpdateFileSignalError(OAIFileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoUpdatePullRequestSignalError() instead")
    void repoUpdatePullRequestSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoUpdatePullRequestSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoUpdateTopicsSignalError() instead")
    void repoUpdateTopicsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repoUpdateTopicsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoValidateIssueConfigSignalError() instead")
    void repoValidateIssueConfigSignalE(OAIIssueConfigValidation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repoValidateIssueConfigSignalError(OAIIssueConfigValidation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicSearchSignalError() instead")
    void topicSearchSignalE(QList<OAITopicResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicSearchSignalError(QList<OAITopicResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentCheckSubscriptionSignalError() instead")
    void userCurrentCheckSubscriptionSignalE(OAIWatchInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentCheckSubscriptionSignalError(OAIWatchInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentDeleteSubscriptionSignalError() instead")
    void userCurrentDeleteSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentDeleteSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentPutSubscriptionSignalError() instead")
    void userCurrentPutSubscriptionSignalE(OAIWatchInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentPutSubscriptionSignalError(OAIWatchInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userTrackedTimesSignalError() instead")
    void userTrackedTimesSignalE(QList<OAITrackedTime> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userTrackedTimesSignalError(QList<OAITrackedTime> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use acceptRepoTransferSignalErrorFull() instead")
    void acceptRepoTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void acceptRepoTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCurrentUserRepoSignalErrorFull() instead")
    void createCurrentUserRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCurrentUserRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createForkSignalErrorFull() instead")
    void createForkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createForkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateRepoSignalErrorFull() instead")
    void generateRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotatedTagSignalErrorFull() instead")
    void getAnnotatedTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotatedTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBlobSignalErrorFull() instead")
    void getBlobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBlobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTreeSignalErrorFull() instead")
    void getTreeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTreeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listForksSignalErrorFull() instead")
    void listForksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listForksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectRepoTransferSignalErrorFull() instead")
    void rejectRepoTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectRepoTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoAddCollaboratorSignalErrorFull() instead")
    void repoAddCollaboratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoAddCollaboratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoAddPushMirrorSignalErrorFull() instead")
    void repoAddPushMirrorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoAddPushMirrorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoAddTeamSignalErrorFull() instead")
    void repoAddTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoAddTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoAddTopicSignalErrorFull() instead")
    void repoAddTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoAddTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoApplyDiffPatchSignalErrorFull() instead")
    void repoApplyDiffPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoApplyDiffPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCancelScheduledAutoMergeSignalErrorFull() instead")
    void repoCancelScheduledAutoMergeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCancelScheduledAutoMergeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCheckCollaboratorSignalErrorFull() instead")
    void repoCheckCollaboratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCheckCollaboratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCheckTeamSignalErrorFull() instead")
    void repoCheckTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCheckTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateBranchSignalErrorFull() instead")
    void repoCreateBranchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateBranchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateBranchProtectionSignalErrorFull() instead")
    void repoCreateBranchProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateBranchProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateFileSignalErrorFull() instead")
    void repoCreateFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateHookSignalErrorFull() instead")
    void repoCreateHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateKeySignalErrorFull() instead")
    void repoCreateKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreatePullRequestSignalErrorFull() instead")
    void repoCreatePullRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreatePullRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreatePullReviewSignalErrorFull() instead")
    void repoCreatePullReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreatePullReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreatePullReviewRequestsSignalErrorFull() instead")
    void repoCreatePullReviewRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreatePullReviewRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateReleaseSignalErrorFull() instead")
    void repoCreateReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateReleaseAttachmentSignalErrorFull() instead")
    void repoCreateReleaseAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateReleaseAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateStatusSignalErrorFull() instead")
    void repoCreateStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateTagSignalErrorFull() instead")
    void repoCreateTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoCreateWikiPageSignalErrorFull() instead")
    void repoCreateWikiPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoCreateWikiPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteSignalErrorFull() instead")
    void repoDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteBranchSignalErrorFull() instead")
    void repoDeleteBranchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteBranchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteBranchProtectionSignalErrorFull() instead")
    void repoDeleteBranchProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteBranchProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteCollaboratorSignalErrorFull() instead")
    void repoDeleteCollaboratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteCollaboratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteFileSignalErrorFull() instead")
    void repoDeleteFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteGitHookSignalErrorFull() instead")
    void repoDeleteGitHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteGitHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteHookSignalErrorFull() instead")
    void repoDeleteHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteKeySignalErrorFull() instead")
    void repoDeleteKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeletePullReviewSignalErrorFull() instead")
    void repoDeletePullReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeletePullReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeletePullReviewRequestsSignalErrorFull() instead")
    void repoDeletePullReviewRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeletePullReviewRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeletePushMirrorSignalErrorFull() instead")
    void repoDeletePushMirrorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeletePushMirrorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteReleaseSignalErrorFull() instead")
    void repoDeleteReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteReleaseAttachmentSignalErrorFull() instead")
    void repoDeleteReleaseAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteReleaseAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteReleaseByTagSignalErrorFull() instead")
    void repoDeleteReleaseByTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteReleaseByTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteTagSignalErrorFull() instead")
    void repoDeleteTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteTeamSignalErrorFull() instead")
    void repoDeleteTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteTopicSignalErrorFull() instead")
    void repoDeleteTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDeleteWikiPageSignalErrorFull() instead")
    void repoDeleteWikiPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDeleteWikiPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDismissPullReviewSignalErrorFull() instead")
    void repoDismissPullReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDismissPullReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDownloadCommitDiffOrPatchSignalErrorFull() instead")
    void repoDownloadCommitDiffOrPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDownloadCommitDiffOrPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoDownloadPullDiffOrPatchSignalErrorFull() instead")
    void repoDownloadPullDiffOrPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoDownloadPullDiffOrPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoEditSignalErrorFull() instead")
    void repoEditSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoEditSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoEditBranchProtectionSignalErrorFull() instead")
    void repoEditBranchProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoEditBranchProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoEditGitHookSignalErrorFull() instead")
    void repoEditGitHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoEditGitHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoEditHookSignalErrorFull() instead")
    void repoEditHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoEditHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoEditPullRequestSignalErrorFull() instead")
    void repoEditPullRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoEditPullRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoEditReleaseSignalErrorFull() instead")
    void repoEditReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoEditReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoEditReleaseAttachmentSignalErrorFull() instead")
    void repoEditReleaseAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoEditReleaseAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoEditWikiPageSignalErrorFull() instead")
    void repoEditWikiPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoEditWikiPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetSignalErrorFull() instead")
    void repoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetAllCommitsSignalErrorFull() instead")
    void repoGetAllCommitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetAllCommitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetArchiveSignalErrorFull() instead")
    void repoGetArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetAssigneesSignalErrorFull() instead")
    void repoGetAssigneesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetAssigneesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetBranchSignalErrorFull() instead")
    void repoGetBranchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetBranchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetBranchProtectionSignalErrorFull() instead")
    void repoGetBranchProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetBranchProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetByIDSignalErrorFull() instead")
    void repoGetByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetCombinedStatusByRefSignalErrorFull() instead")
    void repoGetCombinedStatusByRefSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetCombinedStatusByRefSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetContentsSignalErrorFull() instead")
    void repoGetContentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetContentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetContentsListSignalErrorFull() instead")
    void repoGetContentsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetContentsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetEditorConfigSignalErrorFull() instead")
    void repoGetEditorConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetEditorConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetGitHookSignalErrorFull() instead")
    void repoGetGitHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetGitHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetHookSignalErrorFull() instead")
    void repoGetHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetIssueConfigSignalErrorFull() instead")
    void repoGetIssueConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetIssueConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetIssueTemplatesSignalErrorFull() instead")
    void repoGetIssueTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetIssueTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetKeySignalErrorFull() instead")
    void repoGetKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetLanguagesSignalErrorFull() instead")
    void repoGetLanguagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetLanguagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetLatestReleaseSignalErrorFull() instead")
    void repoGetLatestReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetLatestReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetNoteSignalErrorFull() instead")
    void repoGetNoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetNoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetPullRequestSignalErrorFull() instead")
    void repoGetPullRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetPullRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetPullRequestCommitsSignalErrorFull() instead")
    void repoGetPullRequestCommitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetPullRequestCommitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetPullRequestFilesSignalErrorFull() instead")
    void repoGetPullRequestFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetPullRequestFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetPullReviewSignalErrorFull() instead")
    void repoGetPullReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetPullReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetPullReviewCommentsSignalErrorFull() instead")
    void repoGetPullReviewCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetPullReviewCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetPushMirrorByRemoteNameSignalErrorFull() instead")
    void repoGetPushMirrorByRemoteNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetPushMirrorByRemoteNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetRawFileSignalErrorFull() instead")
    void repoGetRawFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetRawFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetRawFileOrLFSSignalErrorFull() instead")
    void repoGetRawFileOrLFSSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetRawFileOrLFSSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetReleaseSignalErrorFull() instead")
    void repoGetReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetReleaseAttachmentSignalErrorFull() instead")
    void repoGetReleaseAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetReleaseAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetReleaseByTagSignalErrorFull() instead")
    void repoGetReleaseByTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetReleaseByTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetRepoPermissionsSignalErrorFull() instead")
    void repoGetRepoPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetRepoPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetReviewersSignalErrorFull() instead")
    void repoGetReviewersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetReviewersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetSingleCommitSignalErrorFull() instead")
    void repoGetSingleCommitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetSingleCommitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetTagSignalErrorFull() instead")
    void repoGetTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetWikiPageSignalErrorFull() instead")
    void repoGetWikiPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetWikiPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetWikiPageRevisionsSignalErrorFull() instead")
    void repoGetWikiPageRevisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetWikiPageRevisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoGetWikiPagesSignalErrorFull() instead")
    void repoGetWikiPagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoGetWikiPagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListActivityFeedsSignalErrorFull() instead")
    void repoListActivityFeedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListActivityFeedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListAllGitRefsSignalErrorFull() instead")
    void repoListAllGitRefsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListAllGitRefsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListBranchProtectionSignalErrorFull() instead")
    void repoListBranchProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListBranchProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListBranchesSignalErrorFull() instead")
    void repoListBranchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListBranchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListCollaboratorsSignalErrorFull() instead")
    void repoListCollaboratorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListCollaboratorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListGitHooksSignalErrorFull() instead")
    void repoListGitHooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListGitHooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListGitRefsSignalErrorFull() instead")
    void repoListGitRefsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListGitRefsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListHooksSignalErrorFull() instead")
    void repoListHooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListHooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListKeysSignalErrorFull() instead")
    void repoListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListPullRequestsSignalErrorFull() instead")
    void repoListPullRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListPullRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListPullReviewsSignalErrorFull() instead")
    void repoListPullReviewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListPullReviewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListPushMirrorsSignalErrorFull() instead")
    void repoListPushMirrorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListPushMirrorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListReleaseAttachmentsSignalErrorFull() instead")
    void repoListReleaseAttachmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListReleaseAttachmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListReleasesSignalErrorFull() instead")
    void repoListReleasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListReleasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListStargazersSignalErrorFull() instead")
    void repoListStargazersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListStargazersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListStatusesSignalErrorFull() instead")
    void repoListStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListStatusesByRefSignalErrorFull() instead")
    void repoListStatusesByRefSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListStatusesByRefSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListSubscribersSignalErrorFull() instead")
    void repoListSubscribersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListSubscribersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListTagsSignalErrorFull() instead")
    void repoListTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListTeamsSignalErrorFull() instead")
    void repoListTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoListTopicsSignalErrorFull() instead")
    void repoListTopicsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoListTopicsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoMergePullRequestSignalErrorFull() instead")
    void repoMergePullRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoMergePullRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoMigrateSignalErrorFull() instead")
    void repoMigrateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoMigrateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoMirrorSyncSignalErrorFull() instead")
    void repoMirrorSyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoMirrorSyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoPullRequestIsMergedSignalErrorFull() instead")
    void repoPullRequestIsMergedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoPullRequestIsMergedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoPushMirrorSyncSignalErrorFull() instead")
    void repoPushMirrorSyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoPushMirrorSyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoSearchSignalErrorFull() instead")
    void repoSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoSigningKeySignalErrorFull() instead")
    void repoSigningKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoSigningKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoSubmitPullReviewSignalErrorFull() instead")
    void repoSubmitPullReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoSubmitPullReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoTestHookSignalErrorFull() instead")
    void repoTestHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoTestHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoTrackedTimesSignalErrorFull() instead")
    void repoTrackedTimesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoTrackedTimesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoTransferSignalErrorFull() instead")
    void repoTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoUnDismissPullReviewSignalErrorFull() instead")
    void repoUnDismissPullReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoUnDismissPullReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoUpdateFileSignalErrorFull() instead")
    void repoUpdateFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoUpdateFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoUpdatePullRequestSignalErrorFull() instead")
    void repoUpdatePullRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoUpdatePullRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoUpdateTopicsSignalErrorFull() instead")
    void repoUpdateTopicsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoUpdateTopicsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repoValidateIssueConfigSignalErrorFull() instead")
    void repoValidateIssueConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repoValidateIssueConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicSearchSignalErrorFull() instead")
    void topicSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentCheckSubscriptionSignalErrorFull() instead")
    void userCurrentCheckSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentCheckSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentDeleteSubscriptionSignalErrorFull() instead")
    void userCurrentDeleteSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentDeleteSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentPutSubscriptionSignalErrorFull() instead")
    void userCurrentPutSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentPutSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userTrackedTimesSignalErrorFull() instead")
    void userTrackedTimesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userTrackedTimesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
