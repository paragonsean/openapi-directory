/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopicResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopicResponse::OAITopicResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopicResponse::OAITopicResponse() {
    this->initializeModel();
}

OAITopicResponse::~OAITopicResponse() {}

void OAITopicResponse::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_repo_count_isSet = false;
    m_repo_count_isValid = false;

    m_topic_name_isSet = false;
    m_topic_name_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAITopicResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopicResponse::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_repo_count_isValid = ::OpenAPI::fromJsonValue(m_repo_count, json[QString("repo_count")]);
    m_repo_count_isSet = !json[QString("repo_count")].isNull() && m_repo_count_isValid;

    m_topic_name_isValid = ::OpenAPI::fromJsonValue(m_topic_name, json[QString("topic_name")]);
    m_topic_name_isSet = !json[QString("topic_name")].isNull() && m_topic_name_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAITopicResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopicResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_repo_count_isSet) {
        obj.insert(QString("repo_count"), ::OpenAPI::toJsonValue(m_repo_count));
    }
    if (m_topic_name_isSet) {
        obj.insert(QString("topic_name"), ::OpenAPI::toJsonValue(m_topic_name));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

QDateTime OAITopicResponse::getCreated() const {
    return m_created;
}
void OAITopicResponse::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAITopicResponse::is_created_Set() const{
    return m_created_isSet;
}

bool OAITopicResponse::is_created_Valid() const{
    return m_created_isValid;
}

qint64 OAITopicResponse::getId() const {
    return m_id;
}
void OAITopicResponse::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITopicResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAITopicResponse::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAITopicResponse::getRepoCount() const {
    return m_repo_count;
}
void OAITopicResponse::setRepoCount(const qint64 &repo_count) {
    m_repo_count = repo_count;
    m_repo_count_isSet = true;
}

bool OAITopicResponse::is_repo_count_Set() const{
    return m_repo_count_isSet;
}

bool OAITopicResponse::is_repo_count_Valid() const{
    return m_repo_count_isValid;
}

QString OAITopicResponse::getTopicName() const {
    return m_topic_name;
}
void OAITopicResponse::setTopicName(const QString &topic_name) {
    m_topic_name = topic_name;
    m_topic_name_isSet = true;
}

bool OAITopicResponse::is_topic_name_Set() const{
    return m_topic_name_isSet;
}

bool OAITopicResponse::is_topic_name_Valid() const{
    return m_topic_name_isValid;
}

QDateTime OAITopicResponse::getUpdated() const {
    return m_updated;
}
void OAITopicResponse::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAITopicResponse::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAITopicResponse::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAITopicResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopicResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
