/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimelineComment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimelineComment::OAITimelineComment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimelineComment::OAITimelineComment() {
    this->initializeModel();
}

OAITimelineComment::~OAITimelineComment() {}

void OAITimelineComment::initializeModel() {

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_assignee_team_isSet = false;
    m_assignee_team_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_dependent_issue_isSet = false;
    m_dependent_issue_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issue_url_isSet = false;
    m_issue_url_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_milestone_isSet = false;
    m_milestone_isValid = false;

    m_new_ref_isSet = false;
    m_new_ref_isValid = false;

    m_new_title_isSet = false;
    m_new_title_isValid = false;

    m_old_milestone_isSet = false;
    m_old_milestone_isValid = false;

    m_old_project_id_isSet = false;
    m_old_project_id_isValid = false;

    m_old_ref_isSet = false;
    m_old_ref_isValid = false;

    m_old_title_isSet = false;
    m_old_title_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_pull_request_url_isSet = false;
    m_pull_request_url_isValid = false;

    m_ref_action_isSet = false;
    m_ref_action_isValid = false;

    m_ref_comment_isSet = false;
    m_ref_comment_isValid = false;

    m_ref_commit_sha_isSet = false;
    m_ref_commit_sha_isValid = false;

    m_ref_issue_isSet = false;
    m_ref_issue_isValid = false;

    m_removed_assignee_isSet = false;
    m_removed_assignee_isValid = false;

    m_resolve_doer_isSet = false;
    m_resolve_doer_isValid = false;

    m_review_id_isSet = false;
    m_review_id_isValid = false;

    m_tracked_time_isSet = false;
    m_tracked_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAITimelineComment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimelineComment::fromJsonObject(QJsonObject json) {

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_assignee_team_isValid = ::OpenAPI::fromJsonValue(m_assignee_team, json[QString("assignee_team")]);
    m_assignee_team_isSet = !json[QString("assignee_team")].isNull() && m_assignee_team_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_dependent_issue_isValid = ::OpenAPI::fromJsonValue(m_dependent_issue, json[QString("dependent_issue")]);
    m_dependent_issue_isSet = !json[QString("dependent_issue")].isNull() && m_dependent_issue_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issue_url_isValid = ::OpenAPI::fromJsonValue(m_issue_url, json[QString("issue_url")]);
    m_issue_url_isSet = !json[QString("issue_url")].isNull() && m_issue_url_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_milestone_isValid = ::OpenAPI::fromJsonValue(m_milestone, json[QString("milestone")]);
    m_milestone_isSet = !json[QString("milestone")].isNull() && m_milestone_isValid;

    m_new_ref_isValid = ::OpenAPI::fromJsonValue(m_new_ref, json[QString("new_ref")]);
    m_new_ref_isSet = !json[QString("new_ref")].isNull() && m_new_ref_isValid;

    m_new_title_isValid = ::OpenAPI::fromJsonValue(m_new_title, json[QString("new_title")]);
    m_new_title_isSet = !json[QString("new_title")].isNull() && m_new_title_isValid;

    m_old_milestone_isValid = ::OpenAPI::fromJsonValue(m_old_milestone, json[QString("old_milestone")]);
    m_old_milestone_isSet = !json[QString("old_milestone")].isNull() && m_old_milestone_isValid;

    m_old_project_id_isValid = ::OpenAPI::fromJsonValue(m_old_project_id, json[QString("old_project_id")]);
    m_old_project_id_isSet = !json[QString("old_project_id")].isNull() && m_old_project_id_isValid;

    m_old_ref_isValid = ::OpenAPI::fromJsonValue(m_old_ref, json[QString("old_ref")]);
    m_old_ref_isSet = !json[QString("old_ref")].isNull() && m_old_ref_isValid;

    m_old_title_isValid = ::OpenAPI::fromJsonValue(m_old_title, json[QString("old_title")]);
    m_old_title_isSet = !json[QString("old_title")].isNull() && m_old_title_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;

    m_pull_request_url_isValid = ::OpenAPI::fromJsonValue(m_pull_request_url, json[QString("pull_request_url")]);
    m_pull_request_url_isSet = !json[QString("pull_request_url")].isNull() && m_pull_request_url_isValid;

    m_ref_action_isValid = ::OpenAPI::fromJsonValue(m_ref_action, json[QString("ref_action")]);
    m_ref_action_isSet = !json[QString("ref_action")].isNull() && m_ref_action_isValid;

    m_ref_comment_isValid = ::OpenAPI::fromJsonValue(m_ref_comment, json[QString("ref_comment")]);
    m_ref_comment_isSet = !json[QString("ref_comment")].isNull() && m_ref_comment_isValid;

    m_ref_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_ref_commit_sha, json[QString("ref_commit_sha")]);
    m_ref_commit_sha_isSet = !json[QString("ref_commit_sha")].isNull() && m_ref_commit_sha_isValid;

    m_ref_issue_isValid = ::OpenAPI::fromJsonValue(m_ref_issue, json[QString("ref_issue")]);
    m_ref_issue_isSet = !json[QString("ref_issue")].isNull() && m_ref_issue_isValid;

    m_removed_assignee_isValid = ::OpenAPI::fromJsonValue(m_removed_assignee, json[QString("removed_assignee")]);
    m_removed_assignee_isSet = !json[QString("removed_assignee")].isNull() && m_removed_assignee_isValid;

    m_resolve_doer_isValid = ::OpenAPI::fromJsonValue(m_resolve_doer, json[QString("resolve_doer")]);
    m_resolve_doer_isSet = !json[QString("resolve_doer")].isNull() && m_resolve_doer_isValid;

    m_review_id_isValid = ::OpenAPI::fromJsonValue(m_review_id, json[QString("review_id")]);
    m_review_id_isSet = !json[QString("review_id")].isNull() && m_review_id_isValid;

    m_tracked_time_isValid = ::OpenAPI::fromJsonValue(m_tracked_time, json[QString("tracked_time")]);
    m_tracked_time_isSet = !json[QString("tracked_time")].isNull() && m_tracked_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAITimelineComment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimelineComment::asJsonObject() const {
    QJsonObject obj;
    if (m_assignee.isSet()) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_assignee_team.isSet()) {
        obj.insert(QString("assignee_team"), ::OpenAPI::toJsonValue(m_assignee_team));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_dependent_issue.isSet()) {
        obj.insert(QString("dependent_issue"), ::OpenAPI::toJsonValue(m_dependent_issue));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issue_url_isSet) {
        obj.insert(QString("issue_url"), ::OpenAPI::toJsonValue(m_issue_url));
    }
    if (m_label.isSet()) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_milestone.isSet()) {
        obj.insert(QString("milestone"), ::OpenAPI::toJsonValue(m_milestone));
    }
    if (m_new_ref_isSet) {
        obj.insert(QString("new_ref"), ::OpenAPI::toJsonValue(m_new_ref));
    }
    if (m_new_title_isSet) {
        obj.insert(QString("new_title"), ::OpenAPI::toJsonValue(m_new_title));
    }
    if (m_old_milestone.isSet()) {
        obj.insert(QString("old_milestone"), ::OpenAPI::toJsonValue(m_old_milestone));
    }
    if (m_old_project_id_isSet) {
        obj.insert(QString("old_project_id"), ::OpenAPI::toJsonValue(m_old_project_id));
    }
    if (m_old_ref_isSet) {
        obj.insert(QString("old_ref"), ::OpenAPI::toJsonValue(m_old_ref));
    }
    if (m_old_title_isSet) {
        obj.insert(QString("old_title"), ::OpenAPI::toJsonValue(m_old_title));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_pull_request_url_isSet) {
        obj.insert(QString("pull_request_url"), ::OpenAPI::toJsonValue(m_pull_request_url));
    }
    if (m_ref_action_isSet) {
        obj.insert(QString("ref_action"), ::OpenAPI::toJsonValue(m_ref_action));
    }
    if (m_ref_comment.isSet()) {
        obj.insert(QString("ref_comment"), ::OpenAPI::toJsonValue(m_ref_comment));
    }
    if (m_ref_commit_sha_isSet) {
        obj.insert(QString("ref_commit_sha"), ::OpenAPI::toJsonValue(m_ref_commit_sha));
    }
    if (m_ref_issue.isSet()) {
        obj.insert(QString("ref_issue"), ::OpenAPI::toJsonValue(m_ref_issue));
    }
    if (m_removed_assignee_isSet) {
        obj.insert(QString("removed_assignee"), ::OpenAPI::toJsonValue(m_removed_assignee));
    }
    if (m_resolve_doer.isSet()) {
        obj.insert(QString("resolve_doer"), ::OpenAPI::toJsonValue(m_resolve_doer));
    }
    if (m_review_id_isSet) {
        obj.insert(QString("review_id"), ::OpenAPI::toJsonValue(m_review_id));
    }
    if (m_tracked_time.isSet()) {
        obj.insert(QString("tracked_time"), ::OpenAPI::toJsonValue(m_tracked_time));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIUser OAITimelineComment::getAssignee() const {
    return m_assignee;
}
void OAITimelineComment::setAssignee(const OAIUser &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAITimelineComment::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAITimelineComment::is_assignee_Valid() const{
    return m_assignee_isValid;
}

OAITeam OAITimelineComment::getAssigneeTeam() const {
    return m_assignee_team;
}
void OAITimelineComment::setAssigneeTeam(const OAITeam &assignee_team) {
    m_assignee_team = assignee_team;
    m_assignee_team_isSet = true;
}

bool OAITimelineComment::is_assignee_team_Set() const{
    return m_assignee_team_isSet;
}

bool OAITimelineComment::is_assignee_team_Valid() const{
    return m_assignee_team_isValid;
}

QString OAITimelineComment::getBody() const {
    return m_body;
}
void OAITimelineComment::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAITimelineComment::is_body_Set() const{
    return m_body_isSet;
}

bool OAITimelineComment::is_body_Valid() const{
    return m_body_isValid;
}

QDateTime OAITimelineComment::getCreatedAt() const {
    return m_created_at;
}
void OAITimelineComment::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITimelineComment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITimelineComment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIIssue OAITimelineComment::getDependentIssue() const {
    return m_dependent_issue;
}
void OAITimelineComment::setDependentIssue(const OAIIssue &dependent_issue) {
    m_dependent_issue = dependent_issue;
    m_dependent_issue_isSet = true;
}

bool OAITimelineComment::is_dependent_issue_Set() const{
    return m_dependent_issue_isSet;
}

bool OAITimelineComment::is_dependent_issue_Valid() const{
    return m_dependent_issue_isValid;
}

QString OAITimelineComment::getHtmlUrl() const {
    return m_html_url;
}
void OAITimelineComment::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAITimelineComment::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAITimelineComment::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint64 OAITimelineComment::getId() const {
    return m_id;
}
void OAITimelineComment::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITimelineComment::is_id_Set() const{
    return m_id_isSet;
}

bool OAITimelineComment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITimelineComment::getIssueUrl() const {
    return m_issue_url;
}
void OAITimelineComment::setIssueUrl(const QString &issue_url) {
    m_issue_url = issue_url;
    m_issue_url_isSet = true;
}

bool OAITimelineComment::is_issue_url_Set() const{
    return m_issue_url_isSet;
}

bool OAITimelineComment::is_issue_url_Valid() const{
    return m_issue_url_isValid;
}

OAILabel OAITimelineComment::getLabel() const {
    return m_label;
}
void OAITimelineComment::setLabel(const OAILabel &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAITimelineComment::is_label_Set() const{
    return m_label_isSet;
}

bool OAITimelineComment::is_label_Valid() const{
    return m_label_isValid;
}

OAIMilestone OAITimelineComment::getMilestone() const {
    return m_milestone;
}
void OAITimelineComment::setMilestone(const OAIMilestone &milestone) {
    m_milestone = milestone;
    m_milestone_isSet = true;
}

bool OAITimelineComment::is_milestone_Set() const{
    return m_milestone_isSet;
}

bool OAITimelineComment::is_milestone_Valid() const{
    return m_milestone_isValid;
}

QString OAITimelineComment::getNewRef() const {
    return m_new_ref;
}
void OAITimelineComment::setNewRef(const QString &new_ref) {
    m_new_ref = new_ref;
    m_new_ref_isSet = true;
}

bool OAITimelineComment::is_new_ref_Set() const{
    return m_new_ref_isSet;
}

bool OAITimelineComment::is_new_ref_Valid() const{
    return m_new_ref_isValid;
}

QString OAITimelineComment::getNewTitle() const {
    return m_new_title;
}
void OAITimelineComment::setNewTitle(const QString &new_title) {
    m_new_title = new_title;
    m_new_title_isSet = true;
}

bool OAITimelineComment::is_new_title_Set() const{
    return m_new_title_isSet;
}

bool OAITimelineComment::is_new_title_Valid() const{
    return m_new_title_isValid;
}

OAIMilestone OAITimelineComment::getOldMilestone() const {
    return m_old_milestone;
}
void OAITimelineComment::setOldMilestone(const OAIMilestone &old_milestone) {
    m_old_milestone = old_milestone;
    m_old_milestone_isSet = true;
}

bool OAITimelineComment::is_old_milestone_Set() const{
    return m_old_milestone_isSet;
}

bool OAITimelineComment::is_old_milestone_Valid() const{
    return m_old_milestone_isValid;
}

qint64 OAITimelineComment::getOldProjectId() const {
    return m_old_project_id;
}
void OAITimelineComment::setOldProjectId(const qint64 &old_project_id) {
    m_old_project_id = old_project_id;
    m_old_project_id_isSet = true;
}

bool OAITimelineComment::is_old_project_id_Set() const{
    return m_old_project_id_isSet;
}

bool OAITimelineComment::is_old_project_id_Valid() const{
    return m_old_project_id_isValid;
}

QString OAITimelineComment::getOldRef() const {
    return m_old_ref;
}
void OAITimelineComment::setOldRef(const QString &old_ref) {
    m_old_ref = old_ref;
    m_old_ref_isSet = true;
}

bool OAITimelineComment::is_old_ref_Set() const{
    return m_old_ref_isSet;
}

bool OAITimelineComment::is_old_ref_Valid() const{
    return m_old_ref_isValid;
}

QString OAITimelineComment::getOldTitle() const {
    return m_old_title;
}
void OAITimelineComment::setOldTitle(const QString &old_title) {
    m_old_title = old_title;
    m_old_title_isSet = true;
}

bool OAITimelineComment::is_old_title_Set() const{
    return m_old_title_isSet;
}

bool OAITimelineComment::is_old_title_Valid() const{
    return m_old_title_isValid;
}

qint64 OAITimelineComment::getProjectId() const {
    return m_project_id;
}
void OAITimelineComment::setProjectId(const qint64 &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAITimelineComment::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAITimelineComment::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAITimelineComment::getPullRequestUrl() const {
    return m_pull_request_url;
}
void OAITimelineComment::setPullRequestUrl(const QString &pull_request_url) {
    m_pull_request_url = pull_request_url;
    m_pull_request_url_isSet = true;
}

bool OAITimelineComment::is_pull_request_url_Set() const{
    return m_pull_request_url_isSet;
}

bool OAITimelineComment::is_pull_request_url_Valid() const{
    return m_pull_request_url_isValid;
}

QString OAITimelineComment::getRefAction() const {
    return m_ref_action;
}
void OAITimelineComment::setRefAction(const QString &ref_action) {
    m_ref_action = ref_action;
    m_ref_action_isSet = true;
}

bool OAITimelineComment::is_ref_action_Set() const{
    return m_ref_action_isSet;
}

bool OAITimelineComment::is_ref_action_Valid() const{
    return m_ref_action_isValid;
}

OAIComment OAITimelineComment::getRefComment() const {
    return m_ref_comment;
}
void OAITimelineComment::setRefComment(const OAIComment &ref_comment) {
    m_ref_comment = ref_comment;
    m_ref_comment_isSet = true;
}

bool OAITimelineComment::is_ref_comment_Set() const{
    return m_ref_comment_isSet;
}

bool OAITimelineComment::is_ref_comment_Valid() const{
    return m_ref_comment_isValid;
}

QString OAITimelineComment::getRefCommitSha() const {
    return m_ref_commit_sha;
}
void OAITimelineComment::setRefCommitSha(const QString &ref_commit_sha) {
    m_ref_commit_sha = ref_commit_sha;
    m_ref_commit_sha_isSet = true;
}

bool OAITimelineComment::is_ref_commit_sha_Set() const{
    return m_ref_commit_sha_isSet;
}

bool OAITimelineComment::is_ref_commit_sha_Valid() const{
    return m_ref_commit_sha_isValid;
}

OAIIssue OAITimelineComment::getRefIssue() const {
    return m_ref_issue;
}
void OAITimelineComment::setRefIssue(const OAIIssue &ref_issue) {
    m_ref_issue = ref_issue;
    m_ref_issue_isSet = true;
}

bool OAITimelineComment::is_ref_issue_Set() const{
    return m_ref_issue_isSet;
}

bool OAITimelineComment::is_ref_issue_Valid() const{
    return m_ref_issue_isValid;
}

bool OAITimelineComment::isRemovedAssignee() const {
    return m_removed_assignee;
}
void OAITimelineComment::setRemovedAssignee(const bool &removed_assignee) {
    m_removed_assignee = removed_assignee;
    m_removed_assignee_isSet = true;
}

bool OAITimelineComment::is_removed_assignee_Set() const{
    return m_removed_assignee_isSet;
}

bool OAITimelineComment::is_removed_assignee_Valid() const{
    return m_removed_assignee_isValid;
}

OAIUser OAITimelineComment::getResolveDoer() const {
    return m_resolve_doer;
}
void OAITimelineComment::setResolveDoer(const OAIUser &resolve_doer) {
    m_resolve_doer = resolve_doer;
    m_resolve_doer_isSet = true;
}

bool OAITimelineComment::is_resolve_doer_Set() const{
    return m_resolve_doer_isSet;
}

bool OAITimelineComment::is_resolve_doer_Valid() const{
    return m_resolve_doer_isValid;
}

qint64 OAITimelineComment::getReviewId() const {
    return m_review_id;
}
void OAITimelineComment::setReviewId(const qint64 &review_id) {
    m_review_id = review_id;
    m_review_id_isSet = true;
}

bool OAITimelineComment::is_review_id_Set() const{
    return m_review_id_isSet;
}

bool OAITimelineComment::is_review_id_Valid() const{
    return m_review_id_isValid;
}

OAITrackedTime OAITimelineComment::getTrackedTime() const {
    return m_tracked_time;
}
void OAITimelineComment::setTrackedTime(const OAITrackedTime &tracked_time) {
    m_tracked_time = tracked_time;
    m_tracked_time_isSet = true;
}

bool OAITimelineComment::is_tracked_time_Set() const{
    return m_tracked_time_isSet;
}

bool OAITimelineComment::is_tracked_time_Valid() const{
    return m_tracked_time_isValid;
}

QString OAITimelineComment::getType() const {
    return m_type;
}
void OAITimelineComment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITimelineComment::is_type_Set() const{
    return m_type_isSet;
}

bool OAITimelineComment::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAITimelineComment::getUpdatedAt() const {
    return m_updated_at;
}
void OAITimelineComment::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITimelineComment::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITimelineComment::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUser OAITimelineComment::getUser() const {
    return m_user;
}
void OAITimelineComment::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAITimelineComment::is_user_Set() const{
    return m_user_isSet;
}

bool OAITimelineComment::is_user_Valid() const{
    return m_user_isValid;
}

bool OAITimelineComment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee_team.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dependent_issue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_milestone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_request_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_issue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_removed_assignee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolve_doer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracked_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimelineComment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
