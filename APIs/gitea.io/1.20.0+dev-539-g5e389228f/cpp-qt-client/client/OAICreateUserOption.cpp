/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUserOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUserOption::OAICreateUserOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUserOption::OAICreateUserOption() {
    this->initializeModel();
}

OAICreateUserOption::~OAICreateUserOption() {}

void OAICreateUserOption::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_login_name_isSet = false;
    m_login_name_isValid = false;

    m_must_change_password_isSet = false;
    m_must_change_password_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_restricted_isSet = false;
    m_restricted_isValid = false;

    m_send_notify_isSet = false;
    m_send_notify_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAICreateUserOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUserOption::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_login_name_isValid = ::OpenAPI::fromJsonValue(m_login_name, json[QString("login_name")]);
    m_login_name_isSet = !json[QString("login_name")].isNull() && m_login_name_isValid;

    m_must_change_password_isValid = ::OpenAPI::fromJsonValue(m_must_change_password, json[QString("must_change_password")]);
    m_must_change_password_isSet = !json[QString("must_change_password")].isNull() && m_must_change_password_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_restricted_isValid = ::OpenAPI::fromJsonValue(m_restricted, json[QString("restricted")]);
    m_restricted_isSet = !json[QString("restricted")].isNull() && m_restricted_isValid;

    m_send_notify_isValid = ::OpenAPI::fromJsonValue(m_send_notify, json[QString("send_notify")]);
    m_send_notify_isSet = !json[QString("send_notify")].isNull() && m_send_notify_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("source_id")]);
    m_source_id_isSet = !json[QString("source_id")].isNull() && m_source_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAICreateUserOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUserOption::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_login_name_isSet) {
        obj.insert(QString("login_name"), ::OpenAPI::toJsonValue(m_login_name));
    }
    if (m_must_change_password_isSet) {
        obj.insert(QString("must_change_password"), ::OpenAPI::toJsonValue(m_must_change_password));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_restricted_isSet) {
        obj.insert(QString("restricted"), ::OpenAPI::toJsonValue(m_restricted));
    }
    if (m_send_notify_isSet) {
        obj.insert(QString("send_notify"), ::OpenAPI::toJsonValue(m_send_notify));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("source_id"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QDateTime OAICreateUserOption::getCreatedAt() const {
    return m_created_at;
}
void OAICreateUserOption::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICreateUserOption::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICreateUserOption::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICreateUserOption::getEmail() const {
    return m_email;
}
void OAICreateUserOption::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICreateUserOption::is_email_Set() const{
    return m_email_isSet;
}

bool OAICreateUserOption::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICreateUserOption::getFullName() const {
    return m_full_name;
}
void OAICreateUserOption::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAICreateUserOption::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAICreateUserOption::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAICreateUserOption::getLoginName() const {
    return m_login_name;
}
void OAICreateUserOption::setLoginName(const QString &login_name) {
    m_login_name = login_name;
    m_login_name_isSet = true;
}

bool OAICreateUserOption::is_login_name_Set() const{
    return m_login_name_isSet;
}

bool OAICreateUserOption::is_login_name_Valid() const{
    return m_login_name_isValid;
}

bool OAICreateUserOption::isMustChangePassword() const {
    return m_must_change_password;
}
void OAICreateUserOption::setMustChangePassword(const bool &must_change_password) {
    m_must_change_password = must_change_password;
    m_must_change_password_isSet = true;
}

bool OAICreateUserOption::is_must_change_password_Set() const{
    return m_must_change_password_isSet;
}

bool OAICreateUserOption::is_must_change_password_Valid() const{
    return m_must_change_password_isValid;
}

QString OAICreateUserOption::getPassword() const {
    return m_password;
}
void OAICreateUserOption::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAICreateUserOption::is_password_Set() const{
    return m_password_isSet;
}

bool OAICreateUserOption::is_password_Valid() const{
    return m_password_isValid;
}

bool OAICreateUserOption::isRestricted() const {
    return m_restricted;
}
void OAICreateUserOption::setRestricted(const bool &restricted) {
    m_restricted = restricted;
    m_restricted_isSet = true;
}

bool OAICreateUserOption::is_restricted_Set() const{
    return m_restricted_isSet;
}

bool OAICreateUserOption::is_restricted_Valid() const{
    return m_restricted_isValid;
}

bool OAICreateUserOption::isSendNotify() const {
    return m_send_notify;
}
void OAICreateUserOption::setSendNotify(const bool &send_notify) {
    m_send_notify = send_notify;
    m_send_notify_isSet = true;
}

bool OAICreateUserOption::is_send_notify_Set() const{
    return m_send_notify_isSet;
}

bool OAICreateUserOption::is_send_notify_Valid() const{
    return m_send_notify_isValid;
}

qint64 OAICreateUserOption::getSourceId() const {
    return m_source_id;
}
void OAICreateUserOption::setSourceId(const qint64 &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAICreateUserOption::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAICreateUserOption::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAICreateUserOption::getUsername() const {
    return m_username;
}
void OAICreateUserOption::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAICreateUserOption::is_username_Set() const{
    return m_username_isSet;
}

bool OAICreateUserOption::is_username_Valid() const{
    return m_username_isValid;
}

QString OAICreateUserOption::getVisibility() const {
    return m_visibility;
}
void OAICreateUserOption::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAICreateUserOption::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAICreateUserOption::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAICreateUserOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_must_change_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_notify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUserOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_password_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
