/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOAuth2ApplicationOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOAuth2ApplicationOptions::OAICreateOAuth2ApplicationOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOAuth2ApplicationOptions::OAICreateOAuth2ApplicationOptions() {
    this->initializeModel();
}

OAICreateOAuth2ApplicationOptions::~OAICreateOAuth2ApplicationOptions() {}

void OAICreateOAuth2ApplicationOptions::initializeModel() {

    m_confidential_client_isSet = false;
    m_confidential_client_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_redirect_uris_isSet = false;
    m_redirect_uris_isValid = false;
}

void OAICreateOAuth2ApplicationOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOAuth2ApplicationOptions::fromJsonObject(QJsonObject json) {

    m_confidential_client_isValid = ::OpenAPI::fromJsonValue(m_confidential_client, json[QString("confidential_client")]);
    m_confidential_client_isSet = !json[QString("confidential_client")].isNull() && m_confidential_client_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_redirect_uris_isValid = ::OpenAPI::fromJsonValue(m_redirect_uris, json[QString("redirect_uris")]);
    m_redirect_uris_isSet = !json[QString("redirect_uris")].isNull() && m_redirect_uris_isValid;
}

QString OAICreateOAuth2ApplicationOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOAuth2ApplicationOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_confidential_client_isSet) {
        obj.insert(QString("confidential_client"), ::OpenAPI::toJsonValue(m_confidential_client));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_redirect_uris.size() > 0) {
        obj.insert(QString("redirect_uris"), ::OpenAPI::toJsonValue(m_redirect_uris));
    }
    return obj;
}

bool OAICreateOAuth2ApplicationOptions::isConfidentialClient() const {
    return m_confidential_client;
}
void OAICreateOAuth2ApplicationOptions::setConfidentialClient(const bool &confidential_client) {
    m_confidential_client = confidential_client;
    m_confidential_client_isSet = true;
}

bool OAICreateOAuth2ApplicationOptions::is_confidential_client_Set() const{
    return m_confidential_client_isSet;
}

bool OAICreateOAuth2ApplicationOptions::is_confidential_client_Valid() const{
    return m_confidential_client_isValid;
}

QString OAICreateOAuth2ApplicationOptions::getName() const {
    return m_name;
}
void OAICreateOAuth2ApplicationOptions::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateOAuth2ApplicationOptions::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateOAuth2ApplicationOptions::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAICreateOAuth2ApplicationOptions::getRedirectUris() const {
    return m_redirect_uris;
}
void OAICreateOAuth2ApplicationOptions::setRedirectUris(const QList<QString> &redirect_uris) {
    m_redirect_uris = redirect_uris;
    m_redirect_uris_isSet = true;
}

bool OAICreateOAuth2ApplicationOptions::is_redirect_uris_Set() const{
    return m_redirect_uris_isSet;
}

bool OAICreateOAuth2ApplicationOptions::is_redirect_uris_Valid() const{
    return m_redirect_uris_isValid;
}

bool OAICreateOAuth2ApplicationOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidential_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOAuth2ApplicationOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
