/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteFileOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteFileOptions::OAIDeleteFileOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteFileOptions::OAIDeleteFileOptions() {
    this->initializeModel();
}

OAIDeleteFileOptions::~OAIDeleteFileOptions() {}

void OAIDeleteFileOptions::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_committer_isSet = false;
    m_committer_isValid = false;

    m_dates_isSet = false;
    m_dates_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_new_branch_isSet = false;
    m_new_branch_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_signoff_isSet = false;
    m_signoff_isValid = false;
}

void OAIDeleteFileOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteFileOptions::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_committer_isValid = ::OpenAPI::fromJsonValue(m_committer, json[QString("committer")]);
    m_committer_isSet = !json[QString("committer")].isNull() && m_committer_isValid;

    m_dates_isValid = ::OpenAPI::fromJsonValue(m_dates, json[QString("dates")]);
    m_dates_isSet = !json[QString("dates")].isNull() && m_dates_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_new_branch_isValid = ::OpenAPI::fromJsonValue(m_new_branch, json[QString("new_branch")]);
    m_new_branch_isSet = !json[QString("new_branch")].isNull() && m_new_branch_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_signoff_isValid = ::OpenAPI::fromJsonValue(m_signoff, json[QString("signoff")]);
    m_signoff_isSet = !json[QString("signoff")].isNull() && m_signoff_isValid;
}

QString OAIDeleteFileOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteFileOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_committer.isSet()) {
        obj.insert(QString("committer"), ::OpenAPI::toJsonValue(m_committer));
    }
    if (m_dates.isSet()) {
        obj.insert(QString("dates"), ::OpenAPI::toJsonValue(m_dates));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_new_branch_isSet) {
        obj.insert(QString("new_branch"), ::OpenAPI::toJsonValue(m_new_branch));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_signoff_isSet) {
        obj.insert(QString("signoff"), ::OpenAPI::toJsonValue(m_signoff));
    }
    return obj;
}

OAIIdentity OAIDeleteFileOptions::getAuthor() const {
    return m_author;
}
void OAIDeleteFileOptions::setAuthor(const OAIIdentity &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIDeleteFileOptions::is_author_Set() const{
    return m_author_isSet;
}

bool OAIDeleteFileOptions::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIDeleteFileOptions::getBranch() const {
    return m_branch;
}
void OAIDeleteFileOptions::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIDeleteFileOptions::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIDeleteFileOptions::is_branch_Valid() const{
    return m_branch_isValid;
}

OAIIdentity OAIDeleteFileOptions::getCommitter() const {
    return m_committer;
}
void OAIDeleteFileOptions::setCommitter(const OAIIdentity &committer) {
    m_committer = committer;
    m_committer_isSet = true;
}

bool OAIDeleteFileOptions::is_committer_Set() const{
    return m_committer_isSet;
}

bool OAIDeleteFileOptions::is_committer_Valid() const{
    return m_committer_isValid;
}

OAICommitDateOptions OAIDeleteFileOptions::getDates() const {
    return m_dates;
}
void OAIDeleteFileOptions::setDates(const OAICommitDateOptions &dates) {
    m_dates = dates;
    m_dates_isSet = true;
}

bool OAIDeleteFileOptions::is_dates_Set() const{
    return m_dates_isSet;
}

bool OAIDeleteFileOptions::is_dates_Valid() const{
    return m_dates_isValid;
}

QString OAIDeleteFileOptions::getMessage() const {
    return m_message;
}
void OAIDeleteFileOptions::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDeleteFileOptions::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDeleteFileOptions::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIDeleteFileOptions::getNewBranch() const {
    return m_new_branch;
}
void OAIDeleteFileOptions::setNewBranch(const QString &new_branch) {
    m_new_branch = new_branch;
    m_new_branch_isSet = true;
}

bool OAIDeleteFileOptions::is_new_branch_Set() const{
    return m_new_branch_isSet;
}

bool OAIDeleteFileOptions::is_new_branch_Valid() const{
    return m_new_branch_isValid;
}

QString OAIDeleteFileOptions::getSha() const {
    return m_sha;
}
void OAIDeleteFileOptions::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAIDeleteFileOptions::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAIDeleteFileOptions::is_sha_Valid() const{
    return m_sha_isValid;
}

bool OAIDeleteFileOptions::isSignoff() const {
    return m_signoff;
}
void OAIDeleteFileOptions::setSignoff(const bool &signoff) {
    m_signoff = signoff;
    m_signoff_isSet = true;
}

bool OAIDeleteFileOptions::is_signoff_Set() const{
    return m_signoff_isSet;
}

bool OAIDeleteFileOptions::is_signoff_Valid() const{
    return m_signoff_isValid;
}

bool OAIDeleteFileOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signoff_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteFileOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sha_isValid && true;
}

} // namespace OpenAPI
