/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPushMirror.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPushMirror::OAIPushMirror(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPushMirror::OAIPushMirror() {
    this->initializeModel();
}

OAIPushMirror::~OAIPushMirror() {}

void OAIPushMirror::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_last_error_isSet = false;
    m_last_error_isValid = false;

    m_last_update_isSet = false;
    m_last_update_isValid = false;

    m_remote_address_isSet = false;
    m_remote_address_isValid = false;

    m_remote_name_isSet = false;
    m_remote_name_isValid = false;

    m_repo_name_isSet = false;
    m_repo_name_isValid = false;

    m_sync_on_commit_isSet = false;
    m_sync_on_commit_isValid = false;
}

void OAIPushMirror::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPushMirror::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_last_error_isValid = ::OpenAPI::fromJsonValue(m_last_error, json[QString("last_error")]);
    m_last_error_isSet = !json[QString("last_error")].isNull() && m_last_error_isValid;

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("last_update")]);
    m_last_update_isSet = !json[QString("last_update")].isNull() && m_last_update_isValid;

    m_remote_address_isValid = ::OpenAPI::fromJsonValue(m_remote_address, json[QString("remote_address")]);
    m_remote_address_isSet = !json[QString("remote_address")].isNull() && m_remote_address_isValid;

    m_remote_name_isValid = ::OpenAPI::fromJsonValue(m_remote_name, json[QString("remote_name")]);
    m_remote_name_isSet = !json[QString("remote_name")].isNull() && m_remote_name_isValid;

    m_repo_name_isValid = ::OpenAPI::fromJsonValue(m_repo_name, json[QString("repo_name")]);
    m_repo_name_isSet = !json[QString("repo_name")].isNull() && m_repo_name_isValid;

    m_sync_on_commit_isValid = ::OpenAPI::fromJsonValue(m_sync_on_commit, json[QString("sync_on_commit")]);
    m_sync_on_commit_isSet = !json[QString("sync_on_commit")].isNull() && m_sync_on_commit_isValid;
}

QString OAIPushMirror::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPushMirror::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_last_error_isSet) {
        obj.insert(QString("last_error"), ::OpenAPI::toJsonValue(m_last_error));
    }
    if (m_last_update_isSet) {
        obj.insert(QString("last_update"), ::OpenAPI::toJsonValue(m_last_update));
    }
    if (m_remote_address_isSet) {
        obj.insert(QString("remote_address"), ::OpenAPI::toJsonValue(m_remote_address));
    }
    if (m_remote_name_isSet) {
        obj.insert(QString("remote_name"), ::OpenAPI::toJsonValue(m_remote_name));
    }
    if (m_repo_name_isSet) {
        obj.insert(QString("repo_name"), ::OpenAPI::toJsonValue(m_repo_name));
    }
    if (m_sync_on_commit_isSet) {
        obj.insert(QString("sync_on_commit"), ::OpenAPI::toJsonValue(m_sync_on_commit));
    }
    return obj;
}

QString OAIPushMirror::getCreated() const {
    return m_created;
}
void OAIPushMirror::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIPushMirror::is_created_Set() const{
    return m_created_isSet;
}

bool OAIPushMirror::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIPushMirror::getInterval() const {
    return m_interval;
}
void OAIPushMirror::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIPushMirror::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIPushMirror::is_interval_Valid() const{
    return m_interval_isValid;
}

QString OAIPushMirror::getLastError() const {
    return m_last_error;
}
void OAIPushMirror::setLastError(const QString &last_error) {
    m_last_error = last_error;
    m_last_error_isSet = true;
}

bool OAIPushMirror::is_last_error_Set() const{
    return m_last_error_isSet;
}

bool OAIPushMirror::is_last_error_Valid() const{
    return m_last_error_isValid;
}

QString OAIPushMirror::getLastUpdate() const {
    return m_last_update;
}
void OAIPushMirror::setLastUpdate(const QString &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAIPushMirror::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAIPushMirror::is_last_update_Valid() const{
    return m_last_update_isValid;
}

QString OAIPushMirror::getRemoteAddress() const {
    return m_remote_address;
}
void OAIPushMirror::setRemoteAddress(const QString &remote_address) {
    m_remote_address = remote_address;
    m_remote_address_isSet = true;
}

bool OAIPushMirror::is_remote_address_Set() const{
    return m_remote_address_isSet;
}

bool OAIPushMirror::is_remote_address_Valid() const{
    return m_remote_address_isValid;
}

QString OAIPushMirror::getRemoteName() const {
    return m_remote_name;
}
void OAIPushMirror::setRemoteName(const QString &remote_name) {
    m_remote_name = remote_name;
    m_remote_name_isSet = true;
}

bool OAIPushMirror::is_remote_name_Set() const{
    return m_remote_name_isSet;
}

bool OAIPushMirror::is_remote_name_Valid() const{
    return m_remote_name_isValid;
}

QString OAIPushMirror::getRepoName() const {
    return m_repo_name;
}
void OAIPushMirror::setRepoName(const QString &repo_name) {
    m_repo_name = repo_name;
    m_repo_name_isSet = true;
}

bool OAIPushMirror::is_repo_name_Set() const{
    return m_repo_name_isSet;
}

bool OAIPushMirror::is_repo_name_Valid() const{
    return m_repo_name_isValid;
}

bool OAIPushMirror::isSyncOnCommit() const {
    return m_sync_on_commit;
}
void OAIPushMirror::setSyncOnCommit(const bool &sync_on_commit) {
    m_sync_on_commit = sync_on_commit;
    m_sync_on_commit_isSet = true;
}

bool OAIPushMirror::is_sync_on_commit_Set() const{
    return m_sync_on_commit_isSet;
}

bool OAIPushMirror::is_sync_on_commit_Valid() const{
    return m_sync_on_commit_isValid;
}

bool OAIPushMirror::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_on_commit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPushMirror::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
