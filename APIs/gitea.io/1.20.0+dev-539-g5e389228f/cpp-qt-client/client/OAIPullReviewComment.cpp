/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPullReviewComment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPullReviewComment::OAIPullReviewComment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPullReviewComment::OAIPullReviewComment() {
    this->initializeModel();
}

OAIPullReviewComment::~OAIPullReviewComment() {}

void OAIPullReviewComment::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_diff_hunk_isSet = false;
    m_diff_hunk_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_original_commit_id_isSet = false;
    m_original_commit_id_isValid = false;

    m_original_position_isSet = false;
    m_original_position_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_pull_request_review_id_isSet = false;
    m_pull_request_review_id_isValid = false;

    m_pull_request_url_isSet = false;
    m_pull_request_url_isValid = false;

    m_resolver_isSet = false;
    m_resolver_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIPullReviewComment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPullReviewComment::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("commit_id")]);
    m_commit_id_isSet = !json[QString("commit_id")].isNull() && m_commit_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_diff_hunk_isValid = ::OpenAPI::fromJsonValue(m_diff_hunk, json[QString("diff_hunk")]);
    m_diff_hunk_isSet = !json[QString("diff_hunk")].isNull() && m_diff_hunk_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_original_commit_id_isValid = ::OpenAPI::fromJsonValue(m_original_commit_id, json[QString("original_commit_id")]);
    m_original_commit_id_isSet = !json[QString("original_commit_id")].isNull() && m_original_commit_id_isValid;

    m_original_position_isValid = ::OpenAPI::fromJsonValue(m_original_position, json[QString("original_position")]);
    m_original_position_isSet = !json[QString("original_position")].isNull() && m_original_position_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_pull_request_review_id_isValid = ::OpenAPI::fromJsonValue(m_pull_request_review_id, json[QString("pull_request_review_id")]);
    m_pull_request_review_id_isSet = !json[QString("pull_request_review_id")].isNull() && m_pull_request_review_id_isValid;

    m_pull_request_url_isValid = ::OpenAPI::fromJsonValue(m_pull_request_url, json[QString("pull_request_url")]);
    m_pull_request_url_isSet = !json[QString("pull_request_url")].isNull() && m_pull_request_url_isValid;

    m_resolver_isValid = ::OpenAPI::fromJsonValue(m_resolver, json[QString("resolver")]);
    m_resolver_isSet = !json[QString("resolver")].isNull() && m_resolver_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIPullReviewComment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPullReviewComment::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_commit_id_isSet) {
        obj.insert(QString("commit_id"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_diff_hunk_isSet) {
        obj.insert(QString("diff_hunk"), ::OpenAPI::toJsonValue(m_diff_hunk));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_original_commit_id_isSet) {
        obj.insert(QString("original_commit_id"), ::OpenAPI::toJsonValue(m_original_commit_id));
    }
    if (m_original_position_isSet) {
        obj.insert(QString("original_position"), ::OpenAPI::toJsonValue(m_original_position));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_pull_request_review_id_isSet) {
        obj.insert(QString("pull_request_review_id"), ::OpenAPI::toJsonValue(m_pull_request_review_id));
    }
    if (m_pull_request_url_isSet) {
        obj.insert(QString("pull_request_url"), ::OpenAPI::toJsonValue(m_pull_request_url));
    }
    if (m_resolver.isSet()) {
        obj.insert(QString("resolver"), ::OpenAPI::toJsonValue(m_resolver));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIPullReviewComment::getBody() const {
    return m_body;
}
void OAIPullReviewComment::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIPullReviewComment::is_body_Set() const{
    return m_body_isSet;
}

bool OAIPullReviewComment::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIPullReviewComment::getCommitId() const {
    return m_commit_id;
}
void OAIPullReviewComment::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAIPullReviewComment::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAIPullReviewComment::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

QDateTime OAIPullReviewComment::getCreatedAt() const {
    return m_created_at;
}
void OAIPullReviewComment::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPullReviewComment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPullReviewComment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPullReviewComment::getDiffHunk() const {
    return m_diff_hunk;
}
void OAIPullReviewComment::setDiffHunk(const QString &diff_hunk) {
    m_diff_hunk = diff_hunk;
    m_diff_hunk_isSet = true;
}

bool OAIPullReviewComment::is_diff_hunk_Set() const{
    return m_diff_hunk_isSet;
}

bool OAIPullReviewComment::is_diff_hunk_Valid() const{
    return m_diff_hunk_isValid;
}

QString OAIPullReviewComment::getHtmlUrl() const {
    return m_html_url;
}
void OAIPullReviewComment::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIPullReviewComment::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIPullReviewComment::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint64 OAIPullReviewComment::getId() const {
    return m_id;
}
void OAIPullReviewComment::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPullReviewComment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPullReviewComment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPullReviewComment::getOriginalCommitId() const {
    return m_original_commit_id;
}
void OAIPullReviewComment::setOriginalCommitId(const QString &original_commit_id) {
    m_original_commit_id = original_commit_id;
    m_original_commit_id_isSet = true;
}

bool OAIPullReviewComment::is_original_commit_id_Set() const{
    return m_original_commit_id_isSet;
}

bool OAIPullReviewComment::is_original_commit_id_Valid() const{
    return m_original_commit_id_isValid;
}

qint32 OAIPullReviewComment::getOriginalPosition() const {
    return m_original_position;
}
void OAIPullReviewComment::setOriginalPosition(const qint32 &original_position) {
    m_original_position = original_position;
    m_original_position_isSet = true;
}

bool OAIPullReviewComment::is_original_position_Set() const{
    return m_original_position_isSet;
}

bool OAIPullReviewComment::is_original_position_Valid() const{
    return m_original_position_isValid;
}

QString OAIPullReviewComment::getPath() const {
    return m_path;
}
void OAIPullReviewComment::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIPullReviewComment::is_path_Set() const{
    return m_path_isSet;
}

bool OAIPullReviewComment::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIPullReviewComment::getPosition() const {
    return m_position;
}
void OAIPullReviewComment::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPullReviewComment::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPullReviewComment::is_position_Valid() const{
    return m_position_isValid;
}

qint64 OAIPullReviewComment::getPullRequestReviewId() const {
    return m_pull_request_review_id;
}
void OAIPullReviewComment::setPullRequestReviewId(const qint64 &pull_request_review_id) {
    m_pull_request_review_id = pull_request_review_id;
    m_pull_request_review_id_isSet = true;
}

bool OAIPullReviewComment::is_pull_request_review_id_Set() const{
    return m_pull_request_review_id_isSet;
}

bool OAIPullReviewComment::is_pull_request_review_id_Valid() const{
    return m_pull_request_review_id_isValid;
}

QString OAIPullReviewComment::getPullRequestUrl() const {
    return m_pull_request_url;
}
void OAIPullReviewComment::setPullRequestUrl(const QString &pull_request_url) {
    m_pull_request_url = pull_request_url;
    m_pull_request_url_isSet = true;
}

bool OAIPullReviewComment::is_pull_request_url_Set() const{
    return m_pull_request_url_isSet;
}

bool OAIPullReviewComment::is_pull_request_url_Valid() const{
    return m_pull_request_url_isValid;
}

OAIUser OAIPullReviewComment::getResolver() const {
    return m_resolver;
}
void OAIPullReviewComment::setResolver(const OAIUser &resolver) {
    m_resolver = resolver;
    m_resolver_isSet = true;
}

bool OAIPullReviewComment::is_resolver_Set() const{
    return m_resolver_isSet;
}

bool OAIPullReviewComment::is_resolver_Valid() const{
    return m_resolver_isValid;
}

QDateTime OAIPullReviewComment::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPullReviewComment::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPullReviewComment::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPullReviewComment::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUser OAIPullReviewComment::getUser() const {
    return m_user;
}
void OAIPullReviewComment::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIPullReviewComment::is_user_Set() const{
    return m_user_isSet;
}

bool OAIPullReviewComment::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIPullReviewComment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diff_hunk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_request_review_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_request_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolver.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPullReviewComment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
