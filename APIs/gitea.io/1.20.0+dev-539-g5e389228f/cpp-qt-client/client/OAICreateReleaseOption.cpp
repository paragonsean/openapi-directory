/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateReleaseOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateReleaseOption::OAICreateReleaseOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateReleaseOption::OAICreateReleaseOption() {
    this->initializeModel();
}

OAICreateReleaseOption::~OAICreateReleaseOption() {}

void OAICreateReleaseOption::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_draft_isSet = false;
    m_draft_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_prerelease_isSet = false;
    m_prerelease_isValid = false;

    m_tag_name_isSet = false;
    m_tag_name_isValid = false;

    m_target_commitish_isSet = false;
    m_target_commitish_isValid = false;
}

void OAICreateReleaseOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateReleaseOption::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_draft_isValid = ::OpenAPI::fromJsonValue(m_draft, json[QString("draft")]);
    m_draft_isSet = !json[QString("draft")].isNull() && m_draft_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_prerelease_isValid = ::OpenAPI::fromJsonValue(m_prerelease, json[QString("prerelease")]);
    m_prerelease_isSet = !json[QString("prerelease")].isNull() && m_prerelease_isValid;

    m_tag_name_isValid = ::OpenAPI::fromJsonValue(m_tag_name, json[QString("tag_name")]);
    m_tag_name_isSet = !json[QString("tag_name")].isNull() && m_tag_name_isValid;

    m_target_commitish_isValid = ::OpenAPI::fromJsonValue(m_target_commitish, json[QString("target_commitish")]);
    m_target_commitish_isSet = !json[QString("target_commitish")].isNull() && m_target_commitish_isValid;
}

QString OAICreateReleaseOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateReleaseOption::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_draft_isSet) {
        obj.insert(QString("draft"), ::OpenAPI::toJsonValue(m_draft));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_prerelease_isSet) {
        obj.insert(QString("prerelease"), ::OpenAPI::toJsonValue(m_prerelease));
    }
    if (m_tag_name_isSet) {
        obj.insert(QString("tag_name"), ::OpenAPI::toJsonValue(m_tag_name));
    }
    if (m_target_commitish_isSet) {
        obj.insert(QString("target_commitish"), ::OpenAPI::toJsonValue(m_target_commitish));
    }
    return obj;
}

QString OAICreateReleaseOption::getBody() const {
    return m_body;
}
void OAICreateReleaseOption::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAICreateReleaseOption::is_body_Set() const{
    return m_body_isSet;
}

bool OAICreateReleaseOption::is_body_Valid() const{
    return m_body_isValid;
}

bool OAICreateReleaseOption::isDraft() const {
    return m_draft;
}
void OAICreateReleaseOption::setDraft(const bool &draft) {
    m_draft = draft;
    m_draft_isSet = true;
}

bool OAICreateReleaseOption::is_draft_Set() const{
    return m_draft_isSet;
}

bool OAICreateReleaseOption::is_draft_Valid() const{
    return m_draft_isValid;
}

QString OAICreateReleaseOption::getName() const {
    return m_name;
}
void OAICreateReleaseOption::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateReleaseOption::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateReleaseOption::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICreateReleaseOption::isPrerelease() const {
    return m_prerelease;
}
void OAICreateReleaseOption::setPrerelease(const bool &prerelease) {
    m_prerelease = prerelease;
    m_prerelease_isSet = true;
}

bool OAICreateReleaseOption::is_prerelease_Set() const{
    return m_prerelease_isSet;
}

bool OAICreateReleaseOption::is_prerelease_Valid() const{
    return m_prerelease_isValid;
}

QString OAICreateReleaseOption::getTagName() const {
    return m_tag_name;
}
void OAICreateReleaseOption::setTagName(const QString &tag_name) {
    m_tag_name = tag_name;
    m_tag_name_isSet = true;
}

bool OAICreateReleaseOption::is_tag_name_Set() const{
    return m_tag_name_isSet;
}

bool OAICreateReleaseOption::is_tag_name_Valid() const{
    return m_tag_name_isValid;
}

QString OAICreateReleaseOption::getTargetCommitish() const {
    return m_target_commitish;
}
void OAICreateReleaseOption::setTargetCommitish(const QString &target_commitish) {
    m_target_commitish = target_commitish;
    m_target_commitish_isSet = true;
}

bool OAICreateReleaseOption::is_target_commitish_Set() const{
    return m_target_commitish_isSet;
}

bool OAICreateReleaseOption::is_target_commitish_Valid() const{
    return m_target_commitish_isValid;
}

bool OAICreateReleaseOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prerelease_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_commitish_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateReleaseOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tag_name_isValid && true;
}

} // namespace OpenAPI
