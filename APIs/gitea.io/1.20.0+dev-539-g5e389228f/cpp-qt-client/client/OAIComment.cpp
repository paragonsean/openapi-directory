/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComment::OAIComment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComment::OAIComment() {
    this->initializeModel();
}

OAIComment::~OAIComment() {}

void OAIComment::initializeModel() {

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issue_url_isSet = false;
    m_issue_url_isValid = false;

    m_original_author_isSet = false;
    m_original_author_isValid = false;

    m_original_author_id_isSet = false;
    m_original_author_id_isValid = false;

    m_pull_request_url_isSet = false;
    m_pull_request_url_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIComment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComment::fromJsonObject(QJsonObject json) {

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issue_url_isValid = ::OpenAPI::fromJsonValue(m_issue_url, json[QString("issue_url")]);
    m_issue_url_isSet = !json[QString("issue_url")].isNull() && m_issue_url_isValid;

    m_original_author_isValid = ::OpenAPI::fromJsonValue(m_original_author, json[QString("original_author")]);
    m_original_author_isSet = !json[QString("original_author")].isNull() && m_original_author_isValid;

    m_original_author_id_isValid = ::OpenAPI::fromJsonValue(m_original_author_id, json[QString("original_author_id")]);
    m_original_author_id_isSet = !json[QString("original_author_id")].isNull() && m_original_author_id_isValid;

    m_pull_request_url_isValid = ::OpenAPI::fromJsonValue(m_pull_request_url, json[QString("pull_request_url")]);
    m_pull_request_url_isSet = !json[QString("pull_request_url")].isNull() && m_pull_request_url_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIComment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComment::asJsonObject() const {
    QJsonObject obj;
    if (m_assets.size() > 0) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issue_url_isSet) {
        obj.insert(QString("issue_url"), ::OpenAPI::toJsonValue(m_issue_url));
    }
    if (m_original_author_isSet) {
        obj.insert(QString("original_author"), ::OpenAPI::toJsonValue(m_original_author));
    }
    if (m_original_author_id_isSet) {
        obj.insert(QString("original_author_id"), ::OpenAPI::toJsonValue(m_original_author_id));
    }
    if (m_pull_request_url_isSet) {
        obj.insert(QString("pull_request_url"), ::OpenAPI::toJsonValue(m_pull_request_url));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<OAIAttachment> OAIComment::getAssets() const {
    return m_assets;
}
void OAIComment::setAssets(const QList<OAIAttachment> &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIComment::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIComment::is_assets_Valid() const{
    return m_assets_isValid;
}

QString OAIComment::getBody() const {
    return m_body;
}
void OAIComment::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIComment::is_body_Set() const{
    return m_body_isSet;
}

bool OAIComment::is_body_Valid() const{
    return m_body_isValid;
}

QDateTime OAIComment::getCreatedAt() const {
    return m_created_at;
}
void OAIComment::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIComment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIComment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIComment::getHtmlUrl() const {
    return m_html_url;
}
void OAIComment::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIComment::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIComment::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint64 OAIComment::getId() const {
    return m_id;
}
void OAIComment::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIComment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIComment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIComment::getIssueUrl() const {
    return m_issue_url;
}
void OAIComment::setIssueUrl(const QString &issue_url) {
    m_issue_url = issue_url;
    m_issue_url_isSet = true;
}

bool OAIComment::is_issue_url_Set() const{
    return m_issue_url_isSet;
}

bool OAIComment::is_issue_url_Valid() const{
    return m_issue_url_isValid;
}

QString OAIComment::getOriginalAuthor() const {
    return m_original_author;
}
void OAIComment::setOriginalAuthor(const QString &original_author) {
    m_original_author = original_author;
    m_original_author_isSet = true;
}

bool OAIComment::is_original_author_Set() const{
    return m_original_author_isSet;
}

bool OAIComment::is_original_author_Valid() const{
    return m_original_author_isValid;
}

qint64 OAIComment::getOriginalAuthorId() const {
    return m_original_author_id;
}
void OAIComment::setOriginalAuthorId(const qint64 &original_author_id) {
    m_original_author_id = original_author_id;
    m_original_author_id_isSet = true;
}

bool OAIComment::is_original_author_id_Set() const{
    return m_original_author_id_isSet;
}

bool OAIComment::is_original_author_id_Valid() const{
    return m_original_author_id_isValid;
}

QString OAIComment::getPullRequestUrl() const {
    return m_pull_request_url;
}
void OAIComment::setPullRequestUrl(const QString &pull_request_url) {
    m_pull_request_url = pull_request_url;
    m_pull_request_url_isSet = true;
}

bool OAIComment::is_pull_request_url_Set() const{
    return m_pull_request_url_isSet;
}

bool OAIComment::is_pull_request_url_Valid() const{
    return m_pull_request_url_isValid;
}

QDateTime OAIComment::getUpdatedAt() const {
    return m_updated_at;
}
void OAIComment::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIComment::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIComment::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUser OAIComment::getUser() const {
    return m_user;
}
void OAIComment::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIComment::is_user_Set() const{
    return m_user_isSet;
}

bool OAIComment::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIComment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_author_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_request_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
