/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepository::OAIRepository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepository::OAIRepository() {
    this->initializeModel();
}

OAIRepository::~OAIRepository() {}

void OAIRepository::initializeModel() {

    m_allow_merge_commits_isSet = false;
    m_allow_merge_commits_isValid = false;

    m_allow_rebase_isSet = false;
    m_allow_rebase_isValid = false;

    m_allow_rebase_explicit_isSet = false;
    m_allow_rebase_explicit_isValid = false;

    m_allow_rebase_update_isSet = false;
    m_allow_rebase_update_isValid = false;

    m_allow_squash_merge_isSet = false;
    m_allow_squash_merge_isValid = false;

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_clone_url_isSet = false;
    m_clone_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_default_allow_maintainer_edit_isSet = false;
    m_default_allow_maintainer_edit_isValid = false;

    m_default_branch_isSet = false;
    m_default_branch_isValid = false;

    m_default_delete_branch_after_merge_isSet = false;
    m_default_delete_branch_after_merge_isValid = false;

    m_default_merge_style_isSet = false;
    m_default_merge_style_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_empty_isSet = false;
    m_empty_isValid = false;

    m_external_tracker_isSet = false;
    m_external_tracker_isValid = false;

    m_external_wiki_isSet = false;
    m_external_wiki_isValid = false;

    m_fork_isSet = false;
    m_fork_isValid = false;

    m_forks_count_isSet = false;
    m_forks_count_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_has_actions_isSet = false;
    m_has_actions_isValid = false;

    m_has_issues_isSet = false;
    m_has_issues_isValid = false;

    m_has_packages_isSet = false;
    m_has_packages_isValid = false;

    m_has_projects_isSet = false;
    m_has_projects_isValid = false;

    m_has_pull_requests_isSet = false;
    m_has_pull_requests_isValid = false;

    m_has_releases_isSet = false;
    m_has_releases_isValid = false;

    m_has_wiki_isSet = false;
    m_has_wiki_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ignore_whitespace_conflicts_isSet = false;
    m_ignore_whitespace_conflicts_isValid = false;

    m_internal_isSet = false;
    m_internal_isValid = false;

    m_internal_tracker_isSet = false;
    m_internal_tracker_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_languages_url_isSet = false;
    m_languages_url_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_mirror_isSet = false;
    m_mirror_isValid = false;

    m_mirror_interval_isSet = false;
    m_mirror_interval_isValid = false;

    m_mirror_updated_isSet = false;
    m_mirror_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_open_issues_count_isSet = false;
    m_open_issues_count_isValid = false;

    m_open_pr_counter_isSet = false;
    m_open_pr_counter_isValid = false;

    m_original_url_isSet = false;
    m_original_url_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_r_private_isSet = false;
    m_r_private_isValid = false;

    m_release_counter_isSet = false;
    m_release_counter_isValid = false;

    m_repo_transfer_isSet = false;
    m_repo_transfer_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_ssh_url_isSet = false;
    m_ssh_url_isValid = false;

    m_stars_count_isSet = false;
    m_stars_count_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_watchers_count_isSet = false;
    m_watchers_count_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIRepository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepository::fromJsonObject(QJsonObject json) {

    m_allow_merge_commits_isValid = ::OpenAPI::fromJsonValue(m_allow_merge_commits, json[QString("allow_merge_commits")]);
    m_allow_merge_commits_isSet = !json[QString("allow_merge_commits")].isNull() && m_allow_merge_commits_isValid;

    m_allow_rebase_isValid = ::OpenAPI::fromJsonValue(m_allow_rebase, json[QString("allow_rebase")]);
    m_allow_rebase_isSet = !json[QString("allow_rebase")].isNull() && m_allow_rebase_isValid;

    m_allow_rebase_explicit_isValid = ::OpenAPI::fromJsonValue(m_allow_rebase_explicit, json[QString("allow_rebase_explicit")]);
    m_allow_rebase_explicit_isSet = !json[QString("allow_rebase_explicit")].isNull() && m_allow_rebase_explicit_isValid;

    m_allow_rebase_update_isValid = ::OpenAPI::fromJsonValue(m_allow_rebase_update, json[QString("allow_rebase_update")]);
    m_allow_rebase_update_isSet = !json[QString("allow_rebase_update")].isNull() && m_allow_rebase_update_isValid;

    m_allow_squash_merge_isValid = ::OpenAPI::fromJsonValue(m_allow_squash_merge, json[QString("allow_squash_merge")]);
    m_allow_squash_merge_isSet = !json[QString("allow_squash_merge")].isNull() && m_allow_squash_merge_isValid;

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_clone_url_isValid = ::OpenAPI::fromJsonValue(m_clone_url, json[QString("clone_url")]);
    m_clone_url_isSet = !json[QString("clone_url")].isNull() && m_clone_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_default_allow_maintainer_edit_isValid = ::OpenAPI::fromJsonValue(m_default_allow_maintainer_edit, json[QString("default_allow_maintainer_edit")]);
    m_default_allow_maintainer_edit_isSet = !json[QString("default_allow_maintainer_edit")].isNull() && m_default_allow_maintainer_edit_isValid;

    m_default_branch_isValid = ::OpenAPI::fromJsonValue(m_default_branch, json[QString("default_branch")]);
    m_default_branch_isSet = !json[QString("default_branch")].isNull() && m_default_branch_isValid;

    m_default_delete_branch_after_merge_isValid = ::OpenAPI::fromJsonValue(m_default_delete_branch_after_merge, json[QString("default_delete_branch_after_merge")]);
    m_default_delete_branch_after_merge_isSet = !json[QString("default_delete_branch_after_merge")].isNull() && m_default_delete_branch_after_merge_isValid;

    m_default_merge_style_isValid = ::OpenAPI::fromJsonValue(m_default_merge_style, json[QString("default_merge_style")]);
    m_default_merge_style_isSet = !json[QString("default_merge_style")].isNull() && m_default_merge_style_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_empty_isValid = ::OpenAPI::fromJsonValue(m_empty, json[QString("empty")]);
    m_empty_isSet = !json[QString("empty")].isNull() && m_empty_isValid;

    m_external_tracker_isValid = ::OpenAPI::fromJsonValue(m_external_tracker, json[QString("external_tracker")]);
    m_external_tracker_isSet = !json[QString("external_tracker")].isNull() && m_external_tracker_isValid;

    m_external_wiki_isValid = ::OpenAPI::fromJsonValue(m_external_wiki, json[QString("external_wiki")]);
    m_external_wiki_isSet = !json[QString("external_wiki")].isNull() && m_external_wiki_isValid;

    m_fork_isValid = ::OpenAPI::fromJsonValue(m_fork, json[QString("fork")]);
    m_fork_isSet = !json[QString("fork")].isNull() && m_fork_isValid;

    m_forks_count_isValid = ::OpenAPI::fromJsonValue(m_forks_count, json[QString("forks_count")]);
    m_forks_count_isSet = !json[QString("forks_count")].isNull() && m_forks_count_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_has_actions_isValid = ::OpenAPI::fromJsonValue(m_has_actions, json[QString("has_actions")]);
    m_has_actions_isSet = !json[QString("has_actions")].isNull() && m_has_actions_isValid;

    m_has_issues_isValid = ::OpenAPI::fromJsonValue(m_has_issues, json[QString("has_issues")]);
    m_has_issues_isSet = !json[QString("has_issues")].isNull() && m_has_issues_isValid;

    m_has_packages_isValid = ::OpenAPI::fromJsonValue(m_has_packages, json[QString("has_packages")]);
    m_has_packages_isSet = !json[QString("has_packages")].isNull() && m_has_packages_isValid;

    m_has_projects_isValid = ::OpenAPI::fromJsonValue(m_has_projects, json[QString("has_projects")]);
    m_has_projects_isSet = !json[QString("has_projects")].isNull() && m_has_projects_isValid;

    m_has_pull_requests_isValid = ::OpenAPI::fromJsonValue(m_has_pull_requests, json[QString("has_pull_requests")]);
    m_has_pull_requests_isSet = !json[QString("has_pull_requests")].isNull() && m_has_pull_requests_isValid;

    m_has_releases_isValid = ::OpenAPI::fromJsonValue(m_has_releases, json[QString("has_releases")]);
    m_has_releases_isSet = !json[QString("has_releases")].isNull() && m_has_releases_isValid;

    m_has_wiki_isValid = ::OpenAPI::fromJsonValue(m_has_wiki, json[QString("has_wiki")]);
    m_has_wiki_isSet = !json[QString("has_wiki")].isNull() && m_has_wiki_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ignore_whitespace_conflicts_isValid = ::OpenAPI::fromJsonValue(m_ignore_whitespace_conflicts, json[QString("ignore_whitespace_conflicts")]);
    m_ignore_whitespace_conflicts_isSet = !json[QString("ignore_whitespace_conflicts")].isNull() && m_ignore_whitespace_conflicts_isValid;

    m_internal_isValid = ::OpenAPI::fromJsonValue(m_internal, json[QString("internal")]);
    m_internal_isSet = !json[QString("internal")].isNull() && m_internal_isValid;

    m_internal_tracker_isValid = ::OpenAPI::fromJsonValue(m_internal_tracker, json[QString("internal_tracker")]);
    m_internal_tracker_isSet = !json[QString("internal_tracker")].isNull() && m_internal_tracker_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_languages_url_isValid = ::OpenAPI::fromJsonValue(m_languages_url, json[QString("languages_url")]);
    m_languages_url_isSet = !json[QString("languages_url")].isNull() && m_languages_url_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_mirror_isValid = ::OpenAPI::fromJsonValue(m_mirror, json[QString("mirror")]);
    m_mirror_isSet = !json[QString("mirror")].isNull() && m_mirror_isValid;

    m_mirror_interval_isValid = ::OpenAPI::fromJsonValue(m_mirror_interval, json[QString("mirror_interval")]);
    m_mirror_interval_isSet = !json[QString("mirror_interval")].isNull() && m_mirror_interval_isValid;

    m_mirror_updated_isValid = ::OpenAPI::fromJsonValue(m_mirror_updated, json[QString("mirror_updated")]);
    m_mirror_updated_isSet = !json[QString("mirror_updated")].isNull() && m_mirror_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_open_issues_count_isValid = ::OpenAPI::fromJsonValue(m_open_issues_count, json[QString("open_issues_count")]);
    m_open_issues_count_isSet = !json[QString("open_issues_count")].isNull() && m_open_issues_count_isValid;

    m_open_pr_counter_isValid = ::OpenAPI::fromJsonValue(m_open_pr_counter, json[QString("open_pr_counter")]);
    m_open_pr_counter_isSet = !json[QString("open_pr_counter")].isNull() && m_open_pr_counter_isValid;

    m_original_url_isValid = ::OpenAPI::fromJsonValue(m_original_url, json[QString("original_url")]);
    m_original_url_isSet = !json[QString("original_url")].isNull() && m_original_url_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_r_private_isValid = ::OpenAPI::fromJsonValue(m_r_private, json[QString("private")]);
    m_r_private_isSet = !json[QString("private")].isNull() && m_r_private_isValid;

    m_release_counter_isValid = ::OpenAPI::fromJsonValue(m_release_counter, json[QString("release_counter")]);
    m_release_counter_isSet = !json[QString("release_counter")].isNull() && m_release_counter_isValid;

    m_repo_transfer_isValid = ::OpenAPI::fromJsonValue(m_repo_transfer, json[QString("repo_transfer")]);
    m_repo_transfer_isSet = !json[QString("repo_transfer")].isNull() && m_repo_transfer_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_ssh_url_isValid = ::OpenAPI::fromJsonValue(m_ssh_url, json[QString("ssh_url")]);
    m_ssh_url_isSet = !json[QString("ssh_url")].isNull() && m_ssh_url_isValid;

    m_stars_count_isValid = ::OpenAPI::fromJsonValue(m_stars_count, json[QString("stars_count")]);
    m_stars_count_isSet = !json[QString("stars_count")].isNull() && m_stars_count_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_watchers_count_isValid = ::OpenAPI::fromJsonValue(m_watchers_count, json[QString("watchers_count")]);
    m_watchers_count_isSet = !json[QString("watchers_count")].isNull() && m_watchers_count_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIRepository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepository::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_merge_commits_isSet) {
        obj.insert(QString("allow_merge_commits"), ::OpenAPI::toJsonValue(m_allow_merge_commits));
    }
    if (m_allow_rebase_isSet) {
        obj.insert(QString("allow_rebase"), ::OpenAPI::toJsonValue(m_allow_rebase));
    }
    if (m_allow_rebase_explicit_isSet) {
        obj.insert(QString("allow_rebase_explicit"), ::OpenAPI::toJsonValue(m_allow_rebase_explicit));
    }
    if (m_allow_rebase_update_isSet) {
        obj.insert(QString("allow_rebase_update"), ::OpenAPI::toJsonValue(m_allow_rebase_update));
    }
    if (m_allow_squash_merge_isSet) {
        obj.insert(QString("allow_squash_merge"), ::OpenAPI::toJsonValue(m_allow_squash_merge));
    }
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_clone_url_isSet) {
        obj.insert(QString("clone_url"), ::OpenAPI::toJsonValue(m_clone_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_default_allow_maintainer_edit_isSet) {
        obj.insert(QString("default_allow_maintainer_edit"), ::OpenAPI::toJsonValue(m_default_allow_maintainer_edit));
    }
    if (m_default_branch_isSet) {
        obj.insert(QString("default_branch"), ::OpenAPI::toJsonValue(m_default_branch));
    }
    if (m_default_delete_branch_after_merge_isSet) {
        obj.insert(QString("default_delete_branch_after_merge"), ::OpenAPI::toJsonValue(m_default_delete_branch_after_merge));
    }
    if (m_default_merge_style_isSet) {
        obj.insert(QString("default_merge_style"), ::OpenAPI::toJsonValue(m_default_merge_style));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_empty_isSet) {
        obj.insert(QString("empty"), ::OpenAPI::toJsonValue(m_empty));
    }
    if (m_external_tracker.isSet()) {
        obj.insert(QString("external_tracker"), ::OpenAPI::toJsonValue(m_external_tracker));
    }
    if (m_external_wiki.isSet()) {
        obj.insert(QString("external_wiki"), ::OpenAPI::toJsonValue(m_external_wiki));
    }
    if (m_fork_isSet) {
        obj.insert(QString("fork"), ::OpenAPI::toJsonValue(m_fork));
    }
    if (m_forks_count_isSet) {
        obj.insert(QString("forks_count"), ::OpenAPI::toJsonValue(m_forks_count));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_has_actions_isSet) {
        obj.insert(QString("has_actions"), ::OpenAPI::toJsonValue(m_has_actions));
    }
    if (m_has_issues_isSet) {
        obj.insert(QString("has_issues"), ::OpenAPI::toJsonValue(m_has_issues));
    }
    if (m_has_packages_isSet) {
        obj.insert(QString("has_packages"), ::OpenAPI::toJsonValue(m_has_packages));
    }
    if (m_has_projects_isSet) {
        obj.insert(QString("has_projects"), ::OpenAPI::toJsonValue(m_has_projects));
    }
    if (m_has_pull_requests_isSet) {
        obj.insert(QString("has_pull_requests"), ::OpenAPI::toJsonValue(m_has_pull_requests));
    }
    if (m_has_releases_isSet) {
        obj.insert(QString("has_releases"), ::OpenAPI::toJsonValue(m_has_releases));
    }
    if (m_has_wiki_isSet) {
        obj.insert(QString("has_wiki"), ::OpenAPI::toJsonValue(m_has_wiki));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ignore_whitespace_conflicts_isSet) {
        obj.insert(QString("ignore_whitespace_conflicts"), ::OpenAPI::toJsonValue(m_ignore_whitespace_conflicts));
    }
    if (m_internal_isSet) {
        obj.insert(QString("internal"), ::OpenAPI::toJsonValue(m_internal));
    }
    if (m_internal_tracker.isSet()) {
        obj.insert(QString("internal_tracker"), ::OpenAPI::toJsonValue(m_internal_tracker));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_languages_url_isSet) {
        obj.insert(QString("languages_url"), ::OpenAPI::toJsonValue(m_languages_url));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_mirror_isSet) {
        obj.insert(QString("mirror"), ::OpenAPI::toJsonValue(m_mirror));
    }
    if (m_mirror_interval_isSet) {
        obj.insert(QString("mirror_interval"), ::OpenAPI::toJsonValue(m_mirror_interval));
    }
    if (m_mirror_updated_isSet) {
        obj.insert(QString("mirror_updated"), ::OpenAPI::toJsonValue(m_mirror_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_open_issues_count_isSet) {
        obj.insert(QString("open_issues_count"), ::OpenAPI::toJsonValue(m_open_issues_count));
    }
    if (m_open_pr_counter_isSet) {
        obj.insert(QString("open_pr_counter"), ::OpenAPI::toJsonValue(m_open_pr_counter));
    }
    if (m_original_url_isSet) {
        obj.insert(QString("original_url"), ::OpenAPI::toJsonValue(m_original_url));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_r_private_isSet) {
        obj.insert(QString("private"), ::OpenAPI::toJsonValue(m_r_private));
    }
    if (m_release_counter_isSet) {
        obj.insert(QString("release_counter"), ::OpenAPI::toJsonValue(m_release_counter));
    }
    if (m_repo_transfer.isSet()) {
        obj.insert(QString("repo_transfer"), ::OpenAPI::toJsonValue(m_repo_transfer));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_ssh_url_isSet) {
        obj.insert(QString("ssh_url"), ::OpenAPI::toJsonValue(m_ssh_url));
    }
    if (m_stars_count_isSet) {
        obj.insert(QString("stars_count"), ::OpenAPI::toJsonValue(m_stars_count));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_watchers_count_isSet) {
        obj.insert(QString("watchers_count"), ::OpenAPI::toJsonValue(m_watchers_count));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

bool OAIRepository::isAllowMergeCommits() const {
    return m_allow_merge_commits;
}
void OAIRepository::setAllowMergeCommits(const bool &allow_merge_commits) {
    m_allow_merge_commits = allow_merge_commits;
    m_allow_merge_commits_isSet = true;
}

bool OAIRepository::is_allow_merge_commits_Set() const{
    return m_allow_merge_commits_isSet;
}

bool OAIRepository::is_allow_merge_commits_Valid() const{
    return m_allow_merge_commits_isValid;
}

bool OAIRepository::isAllowRebase() const {
    return m_allow_rebase;
}
void OAIRepository::setAllowRebase(const bool &allow_rebase) {
    m_allow_rebase = allow_rebase;
    m_allow_rebase_isSet = true;
}

bool OAIRepository::is_allow_rebase_Set() const{
    return m_allow_rebase_isSet;
}

bool OAIRepository::is_allow_rebase_Valid() const{
    return m_allow_rebase_isValid;
}

bool OAIRepository::isAllowRebaseExplicit() const {
    return m_allow_rebase_explicit;
}
void OAIRepository::setAllowRebaseExplicit(const bool &allow_rebase_explicit) {
    m_allow_rebase_explicit = allow_rebase_explicit;
    m_allow_rebase_explicit_isSet = true;
}

bool OAIRepository::is_allow_rebase_explicit_Set() const{
    return m_allow_rebase_explicit_isSet;
}

bool OAIRepository::is_allow_rebase_explicit_Valid() const{
    return m_allow_rebase_explicit_isValid;
}

bool OAIRepository::isAllowRebaseUpdate() const {
    return m_allow_rebase_update;
}
void OAIRepository::setAllowRebaseUpdate(const bool &allow_rebase_update) {
    m_allow_rebase_update = allow_rebase_update;
    m_allow_rebase_update_isSet = true;
}

bool OAIRepository::is_allow_rebase_update_Set() const{
    return m_allow_rebase_update_isSet;
}

bool OAIRepository::is_allow_rebase_update_Valid() const{
    return m_allow_rebase_update_isValid;
}

bool OAIRepository::isAllowSquashMerge() const {
    return m_allow_squash_merge;
}
void OAIRepository::setAllowSquashMerge(const bool &allow_squash_merge) {
    m_allow_squash_merge = allow_squash_merge;
    m_allow_squash_merge_isSet = true;
}

bool OAIRepository::is_allow_squash_merge_Set() const{
    return m_allow_squash_merge_isSet;
}

bool OAIRepository::is_allow_squash_merge_Valid() const{
    return m_allow_squash_merge_isValid;
}

bool OAIRepository::isArchived() const {
    return m_archived;
}
void OAIRepository::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIRepository::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIRepository::is_archived_Valid() const{
    return m_archived_isValid;
}

QString OAIRepository::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIRepository::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIRepository::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIRepository::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAIRepository::getCloneUrl() const {
    return m_clone_url;
}
void OAIRepository::setCloneUrl(const QString &clone_url) {
    m_clone_url = clone_url;
    m_clone_url_isSet = true;
}

bool OAIRepository::is_clone_url_Set() const{
    return m_clone_url_isSet;
}

bool OAIRepository::is_clone_url_Valid() const{
    return m_clone_url_isValid;
}

QDateTime OAIRepository::getCreatedAt() const {
    return m_created_at;
}
void OAIRepository::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRepository::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRepository::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIRepository::isDefaultAllowMaintainerEdit() const {
    return m_default_allow_maintainer_edit;
}
void OAIRepository::setDefaultAllowMaintainerEdit(const bool &default_allow_maintainer_edit) {
    m_default_allow_maintainer_edit = default_allow_maintainer_edit;
    m_default_allow_maintainer_edit_isSet = true;
}

bool OAIRepository::is_default_allow_maintainer_edit_Set() const{
    return m_default_allow_maintainer_edit_isSet;
}

bool OAIRepository::is_default_allow_maintainer_edit_Valid() const{
    return m_default_allow_maintainer_edit_isValid;
}

QString OAIRepository::getDefaultBranch() const {
    return m_default_branch;
}
void OAIRepository::setDefaultBranch(const QString &default_branch) {
    m_default_branch = default_branch;
    m_default_branch_isSet = true;
}

bool OAIRepository::is_default_branch_Set() const{
    return m_default_branch_isSet;
}

bool OAIRepository::is_default_branch_Valid() const{
    return m_default_branch_isValid;
}

bool OAIRepository::isDefaultDeleteBranchAfterMerge() const {
    return m_default_delete_branch_after_merge;
}
void OAIRepository::setDefaultDeleteBranchAfterMerge(const bool &default_delete_branch_after_merge) {
    m_default_delete_branch_after_merge = default_delete_branch_after_merge;
    m_default_delete_branch_after_merge_isSet = true;
}

bool OAIRepository::is_default_delete_branch_after_merge_Set() const{
    return m_default_delete_branch_after_merge_isSet;
}

bool OAIRepository::is_default_delete_branch_after_merge_Valid() const{
    return m_default_delete_branch_after_merge_isValid;
}

QString OAIRepository::getDefaultMergeStyle() const {
    return m_default_merge_style;
}
void OAIRepository::setDefaultMergeStyle(const QString &default_merge_style) {
    m_default_merge_style = default_merge_style;
    m_default_merge_style_isSet = true;
}

bool OAIRepository::is_default_merge_style_Set() const{
    return m_default_merge_style_isSet;
}

bool OAIRepository::is_default_merge_style_Valid() const{
    return m_default_merge_style_isValid;
}

QString OAIRepository::getDescription() const {
    return m_description;
}
void OAIRepository::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRepository::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRepository::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIRepository::isEmpty() const {
    return m_empty;
}
void OAIRepository::setEmpty(const bool &empty) {
    m_empty = empty;
    m_empty_isSet = true;
}

bool OAIRepository::is_empty_Set() const{
    return m_empty_isSet;
}

bool OAIRepository::is_empty_Valid() const{
    return m_empty_isValid;
}

OAIExternalTracker OAIRepository::getExternalTracker() const {
    return m_external_tracker;
}
void OAIRepository::setExternalTracker(const OAIExternalTracker &external_tracker) {
    m_external_tracker = external_tracker;
    m_external_tracker_isSet = true;
}

bool OAIRepository::is_external_tracker_Set() const{
    return m_external_tracker_isSet;
}

bool OAIRepository::is_external_tracker_Valid() const{
    return m_external_tracker_isValid;
}

OAIExternalWiki OAIRepository::getExternalWiki() const {
    return m_external_wiki;
}
void OAIRepository::setExternalWiki(const OAIExternalWiki &external_wiki) {
    m_external_wiki = external_wiki;
    m_external_wiki_isSet = true;
}

bool OAIRepository::is_external_wiki_Set() const{
    return m_external_wiki_isSet;
}

bool OAIRepository::is_external_wiki_Valid() const{
    return m_external_wiki_isValid;
}

bool OAIRepository::isFork() const {
    return m_fork;
}
void OAIRepository::setFork(const bool &fork) {
    m_fork = fork;
    m_fork_isSet = true;
}

bool OAIRepository::is_fork_Set() const{
    return m_fork_isSet;
}

bool OAIRepository::is_fork_Valid() const{
    return m_fork_isValid;
}

qint64 OAIRepository::getForksCount() const {
    return m_forks_count;
}
void OAIRepository::setForksCount(const qint64 &forks_count) {
    m_forks_count = forks_count;
    m_forks_count_isSet = true;
}

bool OAIRepository::is_forks_count_Set() const{
    return m_forks_count_isSet;
}

bool OAIRepository::is_forks_count_Valid() const{
    return m_forks_count_isValid;
}

QString OAIRepository::getFullName() const {
    return m_full_name;
}
void OAIRepository::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIRepository::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIRepository::is_full_name_Valid() const{
    return m_full_name_isValid;
}

bool OAIRepository::isHasActions() const {
    return m_has_actions;
}
void OAIRepository::setHasActions(const bool &has_actions) {
    m_has_actions = has_actions;
    m_has_actions_isSet = true;
}

bool OAIRepository::is_has_actions_Set() const{
    return m_has_actions_isSet;
}

bool OAIRepository::is_has_actions_Valid() const{
    return m_has_actions_isValid;
}

bool OAIRepository::isHasIssues() const {
    return m_has_issues;
}
void OAIRepository::setHasIssues(const bool &has_issues) {
    m_has_issues = has_issues;
    m_has_issues_isSet = true;
}

bool OAIRepository::is_has_issues_Set() const{
    return m_has_issues_isSet;
}

bool OAIRepository::is_has_issues_Valid() const{
    return m_has_issues_isValid;
}

bool OAIRepository::isHasPackages() const {
    return m_has_packages;
}
void OAIRepository::setHasPackages(const bool &has_packages) {
    m_has_packages = has_packages;
    m_has_packages_isSet = true;
}

bool OAIRepository::is_has_packages_Set() const{
    return m_has_packages_isSet;
}

bool OAIRepository::is_has_packages_Valid() const{
    return m_has_packages_isValid;
}

bool OAIRepository::isHasProjects() const {
    return m_has_projects;
}
void OAIRepository::setHasProjects(const bool &has_projects) {
    m_has_projects = has_projects;
    m_has_projects_isSet = true;
}

bool OAIRepository::is_has_projects_Set() const{
    return m_has_projects_isSet;
}

bool OAIRepository::is_has_projects_Valid() const{
    return m_has_projects_isValid;
}

bool OAIRepository::isHasPullRequests() const {
    return m_has_pull_requests;
}
void OAIRepository::setHasPullRequests(const bool &has_pull_requests) {
    m_has_pull_requests = has_pull_requests;
    m_has_pull_requests_isSet = true;
}

bool OAIRepository::is_has_pull_requests_Set() const{
    return m_has_pull_requests_isSet;
}

bool OAIRepository::is_has_pull_requests_Valid() const{
    return m_has_pull_requests_isValid;
}

bool OAIRepository::isHasReleases() const {
    return m_has_releases;
}
void OAIRepository::setHasReleases(const bool &has_releases) {
    m_has_releases = has_releases;
    m_has_releases_isSet = true;
}

bool OAIRepository::is_has_releases_Set() const{
    return m_has_releases_isSet;
}

bool OAIRepository::is_has_releases_Valid() const{
    return m_has_releases_isValid;
}

bool OAIRepository::isHasWiki() const {
    return m_has_wiki;
}
void OAIRepository::setHasWiki(const bool &has_wiki) {
    m_has_wiki = has_wiki;
    m_has_wiki_isSet = true;
}

bool OAIRepository::is_has_wiki_Set() const{
    return m_has_wiki_isSet;
}

bool OAIRepository::is_has_wiki_Valid() const{
    return m_has_wiki_isValid;
}

QString OAIRepository::getHtmlUrl() const {
    return m_html_url;
}
void OAIRepository::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIRepository::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIRepository::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint64 OAIRepository::getId() const {
    return m_id;
}
void OAIRepository::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRepository::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRepository::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIRepository::isIgnoreWhitespaceConflicts() const {
    return m_ignore_whitespace_conflicts;
}
void OAIRepository::setIgnoreWhitespaceConflicts(const bool &ignore_whitespace_conflicts) {
    m_ignore_whitespace_conflicts = ignore_whitespace_conflicts;
    m_ignore_whitespace_conflicts_isSet = true;
}

bool OAIRepository::is_ignore_whitespace_conflicts_Set() const{
    return m_ignore_whitespace_conflicts_isSet;
}

bool OAIRepository::is_ignore_whitespace_conflicts_Valid() const{
    return m_ignore_whitespace_conflicts_isValid;
}

bool OAIRepository::isInternal() const {
    return m_internal;
}
void OAIRepository::setInternal(const bool &internal) {
    m_internal = internal;
    m_internal_isSet = true;
}

bool OAIRepository::is_internal_Set() const{
    return m_internal_isSet;
}

bool OAIRepository::is_internal_Valid() const{
    return m_internal_isValid;
}

OAIInternalTracker OAIRepository::getInternalTracker() const {
    return m_internal_tracker;
}
void OAIRepository::setInternalTracker(const OAIInternalTracker &internal_tracker) {
    m_internal_tracker = internal_tracker;
    m_internal_tracker_isSet = true;
}

bool OAIRepository::is_internal_tracker_Set() const{
    return m_internal_tracker_isSet;
}

bool OAIRepository::is_internal_tracker_Valid() const{
    return m_internal_tracker_isValid;
}

QString OAIRepository::getLanguage() const {
    return m_language;
}
void OAIRepository::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIRepository::is_language_Set() const{
    return m_language_isSet;
}

bool OAIRepository::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIRepository::getLanguagesUrl() const {
    return m_languages_url;
}
void OAIRepository::setLanguagesUrl(const QString &languages_url) {
    m_languages_url = languages_url;
    m_languages_url_isSet = true;
}

bool OAIRepository::is_languages_url_Set() const{
    return m_languages_url_isSet;
}

bool OAIRepository::is_languages_url_Valid() const{
    return m_languages_url_isValid;
}

QString OAIRepository::getLink() const {
    return m_link;
}
void OAIRepository::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIRepository::is_link_Set() const{
    return m_link_isSet;
}

bool OAIRepository::is_link_Valid() const{
    return m_link_isValid;
}

bool OAIRepository::isMirror() const {
    return m_mirror;
}
void OAIRepository::setMirror(const bool &mirror) {
    m_mirror = mirror;
    m_mirror_isSet = true;
}

bool OAIRepository::is_mirror_Set() const{
    return m_mirror_isSet;
}

bool OAIRepository::is_mirror_Valid() const{
    return m_mirror_isValid;
}

QString OAIRepository::getMirrorInterval() const {
    return m_mirror_interval;
}
void OAIRepository::setMirrorInterval(const QString &mirror_interval) {
    m_mirror_interval = mirror_interval;
    m_mirror_interval_isSet = true;
}

bool OAIRepository::is_mirror_interval_Set() const{
    return m_mirror_interval_isSet;
}

bool OAIRepository::is_mirror_interval_Valid() const{
    return m_mirror_interval_isValid;
}

QDateTime OAIRepository::getMirrorUpdated() const {
    return m_mirror_updated;
}
void OAIRepository::setMirrorUpdated(const QDateTime &mirror_updated) {
    m_mirror_updated = mirror_updated;
    m_mirror_updated_isSet = true;
}

bool OAIRepository::is_mirror_updated_Set() const{
    return m_mirror_updated_isSet;
}

bool OAIRepository::is_mirror_updated_Valid() const{
    return m_mirror_updated_isValid;
}

QString OAIRepository::getName() const {
    return m_name;
}
void OAIRepository::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRepository::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRepository::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIRepository::getOpenIssuesCount() const {
    return m_open_issues_count;
}
void OAIRepository::setOpenIssuesCount(const qint64 &open_issues_count) {
    m_open_issues_count = open_issues_count;
    m_open_issues_count_isSet = true;
}

bool OAIRepository::is_open_issues_count_Set() const{
    return m_open_issues_count_isSet;
}

bool OAIRepository::is_open_issues_count_Valid() const{
    return m_open_issues_count_isValid;
}

qint64 OAIRepository::getOpenPrCounter() const {
    return m_open_pr_counter;
}
void OAIRepository::setOpenPrCounter(const qint64 &open_pr_counter) {
    m_open_pr_counter = open_pr_counter;
    m_open_pr_counter_isSet = true;
}

bool OAIRepository::is_open_pr_counter_Set() const{
    return m_open_pr_counter_isSet;
}

bool OAIRepository::is_open_pr_counter_Valid() const{
    return m_open_pr_counter_isValid;
}

QString OAIRepository::getOriginalUrl() const {
    return m_original_url;
}
void OAIRepository::setOriginalUrl(const QString &original_url) {
    m_original_url = original_url;
    m_original_url_isSet = true;
}

bool OAIRepository::is_original_url_Set() const{
    return m_original_url_isSet;
}

bool OAIRepository::is_original_url_Valid() const{
    return m_original_url_isValid;
}

OAIUser OAIRepository::getOwner() const {
    return m_owner;
}
void OAIRepository::setOwner(const OAIUser &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIRepository::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIRepository::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIRepository OAIRepository::getParent() const {
    return m_parent;
}
void OAIRepository::setParent(const OAIRepository &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIRepository::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIRepository::is_parent_Valid() const{
    return m_parent_isValid;
}

OAIPermission OAIRepository::getPermissions() const {
    return m_permissions;
}
void OAIRepository::setPermissions(const OAIPermission &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIRepository::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIRepository::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAIRepository::isRPrivate() const {
    return m_r_private;
}
void OAIRepository::setRPrivate(const bool &r_private) {
    m_r_private = r_private;
    m_r_private_isSet = true;
}

bool OAIRepository::is_r_private_Set() const{
    return m_r_private_isSet;
}

bool OAIRepository::is_r_private_Valid() const{
    return m_r_private_isValid;
}

qint64 OAIRepository::getReleaseCounter() const {
    return m_release_counter;
}
void OAIRepository::setReleaseCounter(const qint64 &release_counter) {
    m_release_counter = release_counter;
    m_release_counter_isSet = true;
}

bool OAIRepository::is_release_counter_Set() const{
    return m_release_counter_isSet;
}

bool OAIRepository::is_release_counter_Valid() const{
    return m_release_counter_isValid;
}

OAIRepoTransfer OAIRepository::getRepoTransfer() const {
    return m_repo_transfer;
}
void OAIRepository::setRepoTransfer(const OAIRepoTransfer &repo_transfer) {
    m_repo_transfer = repo_transfer;
    m_repo_transfer_isSet = true;
}

bool OAIRepository::is_repo_transfer_Set() const{
    return m_repo_transfer_isSet;
}

bool OAIRepository::is_repo_transfer_Valid() const{
    return m_repo_transfer_isValid;
}

qint64 OAIRepository::getSize() const {
    return m_size;
}
void OAIRepository::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIRepository::is_size_Set() const{
    return m_size_isSet;
}

bool OAIRepository::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIRepository::getSshUrl() const {
    return m_ssh_url;
}
void OAIRepository::setSshUrl(const QString &ssh_url) {
    m_ssh_url = ssh_url;
    m_ssh_url_isSet = true;
}

bool OAIRepository::is_ssh_url_Set() const{
    return m_ssh_url_isSet;
}

bool OAIRepository::is_ssh_url_Valid() const{
    return m_ssh_url_isValid;
}

qint64 OAIRepository::getStarsCount() const {
    return m_stars_count;
}
void OAIRepository::setStarsCount(const qint64 &stars_count) {
    m_stars_count = stars_count;
    m_stars_count_isSet = true;
}

bool OAIRepository::is_stars_count_Set() const{
    return m_stars_count_isSet;
}

bool OAIRepository::is_stars_count_Valid() const{
    return m_stars_count_isValid;
}

bool OAIRepository::isRTemplate() const {
    return m_r_template;
}
void OAIRepository::setRTemplate(const bool &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIRepository::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIRepository::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QDateTime OAIRepository::getUpdatedAt() const {
    return m_updated_at;
}
void OAIRepository::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIRepository::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIRepository::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

qint64 OAIRepository::getWatchersCount() const {
    return m_watchers_count;
}
void OAIRepository::setWatchersCount(const qint64 &watchers_count) {
    m_watchers_count = watchers_count;
    m_watchers_count_isSet = true;
}

bool OAIRepository::is_watchers_count_Set() const{
    return m_watchers_count_isSet;
}

bool OAIRepository::is_watchers_count_Valid() const{
    return m_watchers_count_isValid;
}

QString OAIRepository::getWebsite() const {
    return m_website;
}
void OAIRepository::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIRepository::is_website_Set() const{
    return m_website_isSet;
}

bool OAIRepository::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIRepository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_merge_commits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_rebase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_rebase_explicit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_rebase_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_squash_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clone_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_allow_maintainer_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_delete_branch_after_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_merge_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_empty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_tracker.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_wiki.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forks_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_issues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_packages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_pull_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_releases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_wiki_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_whitespace_conflicts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_tracker.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mirror_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mirror_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mirror_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_issues_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_pr_counter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_counter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_transfer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stars_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchers_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepository::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
