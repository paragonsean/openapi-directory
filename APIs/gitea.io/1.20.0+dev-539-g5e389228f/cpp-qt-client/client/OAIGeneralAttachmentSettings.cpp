/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeneralAttachmentSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeneralAttachmentSettings::OAIGeneralAttachmentSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeneralAttachmentSettings::OAIGeneralAttachmentSettings() {
    this->initializeModel();
}

OAIGeneralAttachmentSettings::~OAIGeneralAttachmentSettings() {}

void OAIGeneralAttachmentSettings::initializeModel() {

    m_allowed_types_isSet = false;
    m_allowed_types_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_max_files_isSet = false;
    m_max_files_isValid = false;

    m_max_size_isSet = false;
    m_max_size_isValid = false;
}

void OAIGeneralAttachmentSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeneralAttachmentSettings::fromJsonObject(QJsonObject json) {

    m_allowed_types_isValid = ::OpenAPI::fromJsonValue(m_allowed_types, json[QString("allowed_types")]);
    m_allowed_types_isSet = !json[QString("allowed_types")].isNull() && m_allowed_types_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_max_files_isValid = ::OpenAPI::fromJsonValue(m_max_files, json[QString("max_files")]);
    m_max_files_isSet = !json[QString("max_files")].isNull() && m_max_files_isValid;

    m_max_size_isValid = ::OpenAPI::fromJsonValue(m_max_size, json[QString("max_size")]);
    m_max_size_isSet = !json[QString("max_size")].isNull() && m_max_size_isValid;
}

QString OAIGeneralAttachmentSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeneralAttachmentSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_types_isSet) {
        obj.insert(QString("allowed_types"), ::OpenAPI::toJsonValue(m_allowed_types));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_max_files_isSet) {
        obj.insert(QString("max_files"), ::OpenAPI::toJsonValue(m_max_files));
    }
    if (m_max_size_isSet) {
        obj.insert(QString("max_size"), ::OpenAPI::toJsonValue(m_max_size));
    }
    return obj;
}

QString OAIGeneralAttachmentSettings::getAllowedTypes() const {
    return m_allowed_types;
}
void OAIGeneralAttachmentSettings::setAllowedTypes(const QString &allowed_types) {
    m_allowed_types = allowed_types;
    m_allowed_types_isSet = true;
}

bool OAIGeneralAttachmentSettings::is_allowed_types_Set() const{
    return m_allowed_types_isSet;
}

bool OAIGeneralAttachmentSettings::is_allowed_types_Valid() const{
    return m_allowed_types_isValid;
}

bool OAIGeneralAttachmentSettings::isEnabled() const {
    return m_enabled;
}
void OAIGeneralAttachmentSettings::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIGeneralAttachmentSettings::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIGeneralAttachmentSettings::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint64 OAIGeneralAttachmentSettings::getMaxFiles() const {
    return m_max_files;
}
void OAIGeneralAttachmentSettings::setMaxFiles(const qint64 &max_files) {
    m_max_files = max_files;
    m_max_files_isSet = true;
}

bool OAIGeneralAttachmentSettings::is_max_files_Set() const{
    return m_max_files_isSet;
}

bool OAIGeneralAttachmentSettings::is_max_files_Valid() const{
    return m_max_files_isValid;
}

qint64 OAIGeneralAttachmentSettings::getMaxSize() const {
    return m_max_size;
}
void OAIGeneralAttachmentSettings::setMaxSize(const qint64 &max_size) {
    m_max_size = max_size;
    m_max_size_isSet = true;
}

bool OAIGeneralAttachmentSettings::is_max_size_Set() const{
    return m_max_size_isSet;
}

bool OAIGeneralAttachmentSettings::is_max_size_Valid() const{
    return m_max_size_isValid;
}

bool OAIGeneralAttachmentSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeneralAttachmentSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
