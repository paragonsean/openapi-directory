/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrackedTime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrackedTime::OAITrackedTime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrackedTime::OAITrackedTime() {
    this->initializeModel();
}

OAITrackedTime::~OAITrackedTime() {}

void OAITrackedTime::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issue_isSet = false;
    m_issue_isValid = false;

    m_issue_id_isSet = false;
    m_issue_id_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAITrackedTime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrackedTime::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issue_isValid = ::OpenAPI::fromJsonValue(m_issue, json[QString("issue")]);
    m_issue_isSet = !json[QString("issue")].isNull() && m_issue_isValid;

    m_issue_id_isValid = ::OpenAPI::fromJsonValue(m_issue_id, json[QString("issue_id")]);
    m_issue_id_isSet = !json[QString("issue_id")].isNull() && m_issue_id_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("user_name")]);
    m_user_name_isSet = !json[QString("user_name")].isNull() && m_user_name_isValid;
}

QString OAITrackedTime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrackedTime::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issue.isSet()) {
        obj.insert(QString("issue"), ::OpenAPI::toJsonValue(m_issue));
    }
    if (m_issue_id_isSet) {
        obj.insert(QString("issue_id"), ::OpenAPI::toJsonValue(m_issue_id));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("user_name"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QDateTime OAITrackedTime::getCreated() const {
    return m_created;
}
void OAITrackedTime::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAITrackedTime::is_created_Set() const{
    return m_created_isSet;
}

bool OAITrackedTime::is_created_Valid() const{
    return m_created_isValid;
}

qint64 OAITrackedTime::getId() const {
    return m_id;
}
void OAITrackedTime::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITrackedTime::is_id_Set() const{
    return m_id_isSet;
}

bool OAITrackedTime::is_id_Valid() const{
    return m_id_isValid;
}

OAIIssue OAITrackedTime::getIssue() const {
    return m_issue;
}
void OAITrackedTime::setIssue(const OAIIssue &issue) {
    m_issue = issue;
    m_issue_isSet = true;
}

bool OAITrackedTime::is_issue_Set() const{
    return m_issue_isSet;
}

bool OAITrackedTime::is_issue_Valid() const{
    return m_issue_isValid;
}

qint64 OAITrackedTime::getIssueId() const {
    return m_issue_id;
}
void OAITrackedTime::setIssueId(const qint64 &issue_id) {
    m_issue_id = issue_id;
    m_issue_id_isSet = true;
}

bool OAITrackedTime::is_issue_id_Set() const{
    return m_issue_id_isSet;
}

bool OAITrackedTime::is_issue_id_Valid() const{
    return m_issue_id_isValid;
}

qint64 OAITrackedTime::getTime() const {
    return m_time;
}
void OAITrackedTime::setTime(const qint64 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAITrackedTime::is_time_Set() const{
    return m_time_isSet;
}

bool OAITrackedTime::is_time_Valid() const{
    return m_time_isValid;
}

qint64 OAITrackedTime::getUserId() const {
    return m_user_id;
}
void OAITrackedTime::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAITrackedTime::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAITrackedTime::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAITrackedTime::getUserName() const {
    return m_user_name;
}
void OAITrackedTime::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAITrackedTime::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAITrackedTime::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAITrackedTime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrackedTime::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
