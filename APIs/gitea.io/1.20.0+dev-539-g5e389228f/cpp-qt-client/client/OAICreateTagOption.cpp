/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTagOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTagOption::OAICreateTagOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTagOption::OAICreateTagOption() {
    this->initializeModel();
}

OAICreateTagOption::~OAICreateTagOption() {}

void OAICreateTagOption::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_tag_name_isSet = false;
    m_tag_name_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAICreateTagOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTagOption::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_tag_name_isValid = ::OpenAPI::fromJsonValue(m_tag_name, json[QString("tag_name")]);
    m_tag_name_isSet = !json[QString("tag_name")].isNull() && m_tag_name_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAICreateTagOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTagOption::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_tag_name_isSet) {
        obj.insert(QString("tag_name"), ::OpenAPI::toJsonValue(m_tag_name));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QString OAICreateTagOption::getMessage() const {
    return m_message;
}
void OAICreateTagOption::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICreateTagOption::is_message_Set() const{
    return m_message_isSet;
}

bool OAICreateTagOption::is_message_Valid() const{
    return m_message_isValid;
}

QString OAICreateTagOption::getTagName() const {
    return m_tag_name;
}
void OAICreateTagOption::setTagName(const QString &tag_name) {
    m_tag_name = tag_name;
    m_tag_name_isSet = true;
}

bool OAICreateTagOption::is_tag_name_Set() const{
    return m_tag_name_isSet;
}

bool OAICreateTagOption::is_tag_name_Valid() const{
    return m_tag_name_isValid;
}

QString OAICreateTagOption::getTarget() const {
    return m_target;
}
void OAICreateTagOption::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAICreateTagOption::is_target_Set() const{
    return m_target_isSet;
}

bool OAICreateTagOption::is_target_Valid() const{
    return m_target_isValid;
}

bool OAICreateTagOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTagOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tag_name_isValid && true;
}

} // namespace OpenAPI
