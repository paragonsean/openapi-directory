/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeneralAPISettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeneralAPISettings::OAIGeneralAPISettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeneralAPISettings::OAIGeneralAPISettings() {
    this->initializeModel();
}

OAIGeneralAPISettings::~OAIGeneralAPISettings() {}

void OAIGeneralAPISettings::initializeModel() {

    m_default_git_trees_per_page_isSet = false;
    m_default_git_trees_per_page_isValid = false;

    m_default_max_blob_size_isSet = false;
    m_default_max_blob_size_isValid = false;

    m_default_paging_num_isSet = false;
    m_default_paging_num_isValid = false;

    m_max_response_items_isSet = false;
    m_max_response_items_isValid = false;
}

void OAIGeneralAPISettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeneralAPISettings::fromJsonObject(QJsonObject json) {

    m_default_git_trees_per_page_isValid = ::OpenAPI::fromJsonValue(m_default_git_trees_per_page, json[QString("default_git_trees_per_page")]);
    m_default_git_trees_per_page_isSet = !json[QString("default_git_trees_per_page")].isNull() && m_default_git_trees_per_page_isValid;

    m_default_max_blob_size_isValid = ::OpenAPI::fromJsonValue(m_default_max_blob_size, json[QString("default_max_blob_size")]);
    m_default_max_blob_size_isSet = !json[QString("default_max_blob_size")].isNull() && m_default_max_blob_size_isValid;

    m_default_paging_num_isValid = ::OpenAPI::fromJsonValue(m_default_paging_num, json[QString("default_paging_num")]);
    m_default_paging_num_isSet = !json[QString("default_paging_num")].isNull() && m_default_paging_num_isValid;

    m_max_response_items_isValid = ::OpenAPI::fromJsonValue(m_max_response_items, json[QString("max_response_items")]);
    m_max_response_items_isSet = !json[QString("max_response_items")].isNull() && m_max_response_items_isValid;
}

QString OAIGeneralAPISettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeneralAPISettings::asJsonObject() const {
    QJsonObject obj;
    if (m_default_git_trees_per_page_isSet) {
        obj.insert(QString("default_git_trees_per_page"), ::OpenAPI::toJsonValue(m_default_git_trees_per_page));
    }
    if (m_default_max_blob_size_isSet) {
        obj.insert(QString("default_max_blob_size"), ::OpenAPI::toJsonValue(m_default_max_blob_size));
    }
    if (m_default_paging_num_isSet) {
        obj.insert(QString("default_paging_num"), ::OpenAPI::toJsonValue(m_default_paging_num));
    }
    if (m_max_response_items_isSet) {
        obj.insert(QString("max_response_items"), ::OpenAPI::toJsonValue(m_max_response_items));
    }
    return obj;
}

qint64 OAIGeneralAPISettings::getDefaultGitTreesPerPage() const {
    return m_default_git_trees_per_page;
}
void OAIGeneralAPISettings::setDefaultGitTreesPerPage(const qint64 &default_git_trees_per_page) {
    m_default_git_trees_per_page = default_git_trees_per_page;
    m_default_git_trees_per_page_isSet = true;
}

bool OAIGeneralAPISettings::is_default_git_trees_per_page_Set() const{
    return m_default_git_trees_per_page_isSet;
}

bool OAIGeneralAPISettings::is_default_git_trees_per_page_Valid() const{
    return m_default_git_trees_per_page_isValid;
}

qint64 OAIGeneralAPISettings::getDefaultMaxBlobSize() const {
    return m_default_max_blob_size;
}
void OAIGeneralAPISettings::setDefaultMaxBlobSize(const qint64 &default_max_blob_size) {
    m_default_max_blob_size = default_max_blob_size;
    m_default_max_blob_size_isSet = true;
}

bool OAIGeneralAPISettings::is_default_max_blob_size_Set() const{
    return m_default_max_blob_size_isSet;
}

bool OAIGeneralAPISettings::is_default_max_blob_size_Valid() const{
    return m_default_max_blob_size_isValid;
}

qint64 OAIGeneralAPISettings::getDefaultPagingNum() const {
    return m_default_paging_num;
}
void OAIGeneralAPISettings::setDefaultPagingNum(const qint64 &default_paging_num) {
    m_default_paging_num = default_paging_num;
    m_default_paging_num_isSet = true;
}

bool OAIGeneralAPISettings::is_default_paging_num_Set() const{
    return m_default_paging_num_isSet;
}

bool OAIGeneralAPISettings::is_default_paging_num_Valid() const{
    return m_default_paging_num_isValid;
}

qint64 OAIGeneralAPISettings::getMaxResponseItems() const {
    return m_max_response_items;
}
void OAIGeneralAPISettings::setMaxResponseItems(const qint64 &max_response_items) {
    m_max_response_items = max_response_items;
    m_max_response_items_isSet = true;
}

bool OAIGeneralAPISettings::is_max_response_items_Set() const{
    return m_max_response_items_isSet;
}

bool OAIGeneralAPISettings::is_max_response_items_Valid() const{
    return m_max_response_items_isValid;
}

bool OAIGeneralAPISettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_git_trees_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_max_blob_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_paging_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_response_items_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeneralAPISettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
