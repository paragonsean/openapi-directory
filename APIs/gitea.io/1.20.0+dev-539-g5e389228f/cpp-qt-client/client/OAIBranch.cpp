/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBranch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBranch::OAIBranch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBranch::OAIBranch() {
    this->initializeModel();
}

OAIBranch::~OAIBranch() {}

void OAIBranch::initializeModel() {

    m_commit_isSet = false;
    m_commit_isValid = false;

    m_effective_branch_protection_name_isSet = false;
    m_effective_branch_protection_name_isValid = false;

    m_enable_status_check_isSet = false;
    m_enable_status_check_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_protected_isSet = false;
    m_r_protected_isValid = false;

    m_required_approvals_isSet = false;
    m_required_approvals_isValid = false;

    m_status_check_contexts_isSet = false;
    m_status_check_contexts_isValid = false;

    m_user_can_merge_isSet = false;
    m_user_can_merge_isValid = false;

    m_user_can_push_isSet = false;
    m_user_can_push_isValid = false;
}

void OAIBranch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBranch::fromJsonObject(QJsonObject json) {

    m_commit_isValid = ::OpenAPI::fromJsonValue(m_commit, json[QString("commit")]);
    m_commit_isSet = !json[QString("commit")].isNull() && m_commit_isValid;

    m_effective_branch_protection_name_isValid = ::OpenAPI::fromJsonValue(m_effective_branch_protection_name, json[QString("effective_branch_protection_name")]);
    m_effective_branch_protection_name_isSet = !json[QString("effective_branch_protection_name")].isNull() && m_effective_branch_protection_name_isValid;

    m_enable_status_check_isValid = ::OpenAPI::fromJsonValue(m_enable_status_check, json[QString("enable_status_check")]);
    m_enable_status_check_isSet = !json[QString("enable_status_check")].isNull() && m_enable_status_check_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_protected_isValid = ::OpenAPI::fromJsonValue(m_r_protected, json[QString("protected")]);
    m_r_protected_isSet = !json[QString("protected")].isNull() && m_r_protected_isValid;

    m_required_approvals_isValid = ::OpenAPI::fromJsonValue(m_required_approvals, json[QString("required_approvals")]);
    m_required_approvals_isSet = !json[QString("required_approvals")].isNull() && m_required_approvals_isValid;

    m_status_check_contexts_isValid = ::OpenAPI::fromJsonValue(m_status_check_contexts, json[QString("status_check_contexts")]);
    m_status_check_contexts_isSet = !json[QString("status_check_contexts")].isNull() && m_status_check_contexts_isValid;

    m_user_can_merge_isValid = ::OpenAPI::fromJsonValue(m_user_can_merge, json[QString("user_can_merge")]);
    m_user_can_merge_isSet = !json[QString("user_can_merge")].isNull() && m_user_can_merge_isValid;

    m_user_can_push_isValid = ::OpenAPI::fromJsonValue(m_user_can_push, json[QString("user_can_push")]);
    m_user_can_push_isSet = !json[QString("user_can_push")].isNull() && m_user_can_push_isValid;
}

QString OAIBranch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBranch::asJsonObject() const {
    QJsonObject obj;
    if (m_commit.isSet()) {
        obj.insert(QString("commit"), ::OpenAPI::toJsonValue(m_commit));
    }
    if (m_effective_branch_protection_name_isSet) {
        obj.insert(QString("effective_branch_protection_name"), ::OpenAPI::toJsonValue(m_effective_branch_protection_name));
    }
    if (m_enable_status_check_isSet) {
        obj.insert(QString("enable_status_check"), ::OpenAPI::toJsonValue(m_enable_status_check));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_protected_isSet) {
        obj.insert(QString("protected"), ::OpenAPI::toJsonValue(m_r_protected));
    }
    if (m_required_approvals_isSet) {
        obj.insert(QString("required_approvals"), ::OpenAPI::toJsonValue(m_required_approvals));
    }
    if (m_status_check_contexts.size() > 0) {
        obj.insert(QString("status_check_contexts"), ::OpenAPI::toJsonValue(m_status_check_contexts));
    }
    if (m_user_can_merge_isSet) {
        obj.insert(QString("user_can_merge"), ::OpenAPI::toJsonValue(m_user_can_merge));
    }
    if (m_user_can_push_isSet) {
        obj.insert(QString("user_can_push"), ::OpenAPI::toJsonValue(m_user_can_push));
    }
    return obj;
}

OAIPayloadCommit OAIBranch::getCommit() const {
    return m_commit;
}
void OAIBranch::setCommit(const OAIPayloadCommit &commit) {
    m_commit = commit;
    m_commit_isSet = true;
}

bool OAIBranch::is_commit_Set() const{
    return m_commit_isSet;
}

bool OAIBranch::is_commit_Valid() const{
    return m_commit_isValid;
}

QString OAIBranch::getEffectiveBranchProtectionName() const {
    return m_effective_branch_protection_name;
}
void OAIBranch::setEffectiveBranchProtectionName(const QString &effective_branch_protection_name) {
    m_effective_branch_protection_name = effective_branch_protection_name;
    m_effective_branch_protection_name_isSet = true;
}

bool OAIBranch::is_effective_branch_protection_name_Set() const{
    return m_effective_branch_protection_name_isSet;
}

bool OAIBranch::is_effective_branch_protection_name_Valid() const{
    return m_effective_branch_protection_name_isValid;
}

bool OAIBranch::isEnableStatusCheck() const {
    return m_enable_status_check;
}
void OAIBranch::setEnableStatusCheck(const bool &enable_status_check) {
    m_enable_status_check = enable_status_check;
    m_enable_status_check_isSet = true;
}

bool OAIBranch::is_enable_status_check_Set() const{
    return m_enable_status_check_isSet;
}

bool OAIBranch::is_enable_status_check_Valid() const{
    return m_enable_status_check_isValid;
}

QString OAIBranch::getName() const {
    return m_name;
}
void OAIBranch::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBranch::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBranch::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIBranch::isRProtected() const {
    return m_r_protected;
}
void OAIBranch::setRProtected(const bool &r_protected) {
    m_r_protected = r_protected;
    m_r_protected_isSet = true;
}

bool OAIBranch::is_r_protected_Set() const{
    return m_r_protected_isSet;
}

bool OAIBranch::is_r_protected_Valid() const{
    return m_r_protected_isValid;
}

qint64 OAIBranch::getRequiredApprovals() const {
    return m_required_approvals;
}
void OAIBranch::setRequiredApprovals(const qint64 &required_approvals) {
    m_required_approvals = required_approvals;
    m_required_approvals_isSet = true;
}

bool OAIBranch::is_required_approvals_Set() const{
    return m_required_approvals_isSet;
}

bool OAIBranch::is_required_approvals_Valid() const{
    return m_required_approvals_isValid;
}

QList<QString> OAIBranch::getStatusCheckContexts() const {
    return m_status_check_contexts;
}
void OAIBranch::setStatusCheckContexts(const QList<QString> &status_check_contexts) {
    m_status_check_contexts = status_check_contexts;
    m_status_check_contexts_isSet = true;
}

bool OAIBranch::is_status_check_contexts_Set() const{
    return m_status_check_contexts_isSet;
}

bool OAIBranch::is_status_check_contexts_Valid() const{
    return m_status_check_contexts_isValid;
}

bool OAIBranch::isUserCanMerge() const {
    return m_user_can_merge;
}
void OAIBranch::setUserCanMerge(const bool &user_can_merge) {
    m_user_can_merge = user_can_merge;
    m_user_can_merge_isSet = true;
}

bool OAIBranch::is_user_can_merge_Set() const{
    return m_user_can_merge_isSet;
}

bool OAIBranch::is_user_can_merge_Valid() const{
    return m_user_can_merge_isValid;
}

bool OAIBranch::isUserCanPush() const {
    return m_user_can_push;
}
void OAIBranch::setUserCanPush(const bool &user_can_push) {
    m_user_can_push = user_can_push;
    m_user_can_push_isSet = true;
}

bool OAIBranch::is_user_can_push_Set() const{
    return m_user_can_push_isSet;
}

bool OAIBranch::is_user_can_push_Valid() const{
    return m_user_can_push_isValid;
}

bool OAIBranch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_branch_protection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_status_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_protected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_approvals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_check_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_can_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_can_push_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBranch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
