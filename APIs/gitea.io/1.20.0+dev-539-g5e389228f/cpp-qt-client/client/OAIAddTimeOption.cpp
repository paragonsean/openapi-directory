/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddTimeOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddTimeOption::OAIAddTimeOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddTimeOption::OAIAddTimeOption() {
    this->initializeModel();
}

OAIAddTimeOption::~OAIAddTimeOption() {}

void OAIAddTimeOption::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIAddTimeOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddTimeOption::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("user_name")]);
    m_user_name_isSet = !json[QString("user_name")].isNull() && m_user_name_isValid;
}

QString OAIAddTimeOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddTimeOption::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("user_name"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QDateTime OAIAddTimeOption::getCreated() const {
    return m_created;
}
void OAIAddTimeOption::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIAddTimeOption::is_created_Set() const{
    return m_created_isSet;
}

bool OAIAddTimeOption::is_created_Valid() const{
    return m_created_isValid;
}

qint64 OAIAddTimeOption::getTime() const {
    return m_time;
}
void OAIAddTimeOption::setTime(const qint64 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIAddTimeOption::is_time_Set() const{
    return m_time_isSet;
}

bool OAIAddTimeOption::is_time_Valid() const{
    return m_time_isValid;
}

QString OAIAddTimeOption::getUserName() const {
    return m_user_name;
}
void OAIAddTimeOption::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIAddTimeOption::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIAddTimeOption::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIAddTimeOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddTimeOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_time_isValid && true;
}

} // namespace OpenAPI
