/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeneralUISettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeneralUISettings::OAIGeneralUISettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeneralUISettings::OAIGeneralUISettings() {
    this->initializeModel();
}

OAIGeneralUISettings::~OAIGeneralUISettings() {}

void OAIGeneralUISettings::initializeModel() {

    m_allowed_reactions_isSet = false;
    m_allowed_reactions_isValid = false;

    m_custom_emojis_isSet = false;
    m_custom_emojis_isValid = false;

    m_default_theme_isSet = false;
    m_default_theme_isValid = false;
}

void OAIGeneralUISettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeneralUISettings::fromJsonObject(QJsonObject json) {

    m_allowed_reactions_isValid = ::OpenAPI::fromJsonValue(m_allowed_reactions, json[QString("allowed_reactions")]);
    m_allowed_reactions_isSet = !json[QString("allowed_reactions")].isNull() && m_allowed_reactions_isValid;

    m_custom_emojis_isValid = ::OpenAPI::fromJsonValue(m_custom_emojis, json[QString("custom_emojis")]);
    m_custom_emojis_isSet = !json[QString("custom_emojis")].isNull() && m_custom_emojis_isValid;

    m_default_theme_isValid = ::OpenAPI::fromJsonValue(m_default_theme, json[QString("default_theme")]);
    m_default_theme_isSet = !json[QString("default_theme")].isNull() && m_default_theme_isValid;
}

QString OAIGeneralUISettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeneralUISettings::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_reactions.size() > 0) {
        obj.insert(QString("allowed_reactions"), ::OpenAPI::toJsonValue(m_allowed_reactions));
    }
    if (m_custom_emojis.size() > 0) {
        obj.insert(QString("custom_emojis"), ::OpenAPI::toJsonValue(m_custom_emojis));
    }
    if (m_default_theme_isSet) {
        obj.insert(QString("default_theme"), ::OpenAPI::toJsonValue(m_default_theme));
    }
    return obj;
}

QList<QString> OAIGeneralUISettings::getAllowedReactions() const {
    return m_allowed_reactions;
}
void OAIGeneralUISettings::setAllowedReactions(const QList<QString> &allowed_reactions) {
    m_allowed_reactions = allowed_reactions;
    m_allowed_reactions_isSet = true;
}

bool OAIGeneralUISettings::is_allowed_reactions_Set() const{
    return m_allowed_reactions_isSet;
}

bool OAIGeneralUISettings::is_allowed_reactions_Valid() const{
    return m_allowed_reactions_isValid;
}

QList<QString> OAIGeneralUISettings::getCustomEmojis() const {
    return m_custom_emojis;
}
void OAIGeneralUISettings::setCustomEmojis(const QList<QString> &custom_emojis) {
    m_custom_emojis = custom_emojis;
    m_custom_emojis_isSet = true;
}

bool OAIGeneralUISettings::is_custom_emojis_Set() const{
    return m_custom_emojis_isSet;
}

bool OAIGeneralUISettings::is_custom_emojis_Valid() const{
    return m_custom_emojis_isValid;
}

QString OAIGeneralUISettings::getDefaultTheme() const {
    return m_default_theme;
}
void OAIGeneralUISettings::setDefaultTheme(const QString &default_theme) {
    m_default_theme = default_theme;
    m_default_theme_isSet = true;
}

bool OAIGeneralUISettings::is_default_theme_Set() const{
    return m_default_theme_isSet;
}

bool OAIGeneralUISettings::is_default_theme_Valid() const{
    return m_default_theme_isValid;
}

bool OAIGeneralUISettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_reactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_emojis.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_theme_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeneralUISettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
