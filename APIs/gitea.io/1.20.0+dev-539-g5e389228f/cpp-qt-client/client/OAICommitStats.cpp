/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitStats::OAICommitStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitStats::OAICommitStats() {
    this->initializeModel();
}

OAICommitStats::~OAICommitStats() {}

void OAICommitStats::initializeModel() {

    m_additions_isSet = false;
    m_additions_isValid = false;

    m_deletions_isSet = false;
    m_deletions_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAICommitStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitStats::fromJsonObject(QJsonObject json) {

    m_additions_isValid = ::OpenAPI::fromJsonValue(m_additions, json[QString("additions")]);
    m_additions_isSet = !json[QString("additions")].isNull() && m_additions_isValid;

    m_deletions_isValid = ::OpenAPI::fromJsonValue(m_deletions, json[QString("deletions")]);
    m_deletions_isSet = !json[QString("deletions")].isNull() && m_deletions_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAICommitStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitStats::asJsonObject() const {
    QJsonObject obj;
    if (m_additions_isSet) {
        obj.insert(QString("additions"), ::OpenAPI::toJsonValue(m_additions));
    }
    if (m_deletions_isSet) {
        obj.insert(QString("deletions"), ::OpenAPI::toJsonValue(m_deletions));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint64 OAICommitStats::getAdditions() const {
    return m_additions;
}
void OAICommitStats::setAdditions(const qint64 &additions) {
    m_additions = additions;
    m_additions_isSet = true;
}

bool OAICommitStats::is_additions_Set() const{
    return m_additions_isSet;
}

bool OAICommitStats::is_additions_Valid() const{
    return m_additions_isValid;
}

qint64 OAICommitStats::getDeletions() const {
    return m_deletions;
}
void OAICommitStats::setDeletions(const qint64 &deletions) {
    m_deletions = deletions;
    m_deletions_isSet = true;
}

bool OAICommitStats::is_deletions_Set() const{
    return m_deletions_isSet;
}

bool OAICommitStats::is_deletions_Valid() const{
    return m_deletions_isValid;
}

qint64 OAICommitStats::getTotal() const {
    return m_total;
}
void OAICommitStats::setTotal(const qint64 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAICommitStats::is_total_Set() const{
    return m_total_isSet;
}

bool OAICommitStats::is_total_Valid() const{
    return m_total_isValid;
}

bool OAICommitStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
