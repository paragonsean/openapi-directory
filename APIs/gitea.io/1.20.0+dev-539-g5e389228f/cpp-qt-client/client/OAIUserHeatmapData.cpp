/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserHeatmapData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserHeatmapData::OAIUserHeatmapData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserHeatmapData::OAIUserHeatmapData() {
    this->initializeModel();
}

OAIUserHeatmapData::~OAIUserHeatmapData() {}

void OAIUserHeatmapData::initializeModel() {

    m_contributions_isSet = false;
    m_contributions_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIUserHeatmapData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserHeatmapData::fromJsonObject(QJsonObject json) {

    m_contributions_isValid = ::OpenAPI::fromJsonValue(m_contributions, json[QString("contributions")]);
    m_contributions_isSet = !json[QString("contributions")].isNull() && m_contributions_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIUserHeatmapData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserHeatmapData::asJsonObject() const {
    QJsonObject obj;
    if (m_contributions_isSet) {
        obj.insert(QString("contributions"), ::OpenAPI::toJsonValue(m_contributions));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

qint64 OAIUserHeatmapData::getContributions() const {
    return m_contributions;
}
void OAIUserHeatmapData::setContributions(const qint64 &contributions) {
    m_contributions = contributions;
    m_contributions_isSet = true;
}

bool OAIUserHeatmapData::is_contributions_Set() const{
    return m_contributions_isSet;
}

bool OAIUserHeatmapData::is_contributions_Valid() const{
    return m_contributions_isValid;
}

qint64 OAIUserHeatmapData::getTimestamp() const {
    return m_timestamp;
}
void OAIUserHeatmapData::setTimestamp(const qint64 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIUserHeatmapData::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIUserHeatmapData::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIUserHeatmapData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserHeatmapData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
