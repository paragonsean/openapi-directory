/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISettingsApi_H
#define OAI_OAISettingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGeneralAPISettings.h"
#include "OAIGeneralAttachmentSettings.h"
#include "OAIGeneralRepoSettings.h"
#include "OAIGeneralUISettings.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISettingsApi : public QObject {
    Q_OBJECT

public:
    OAISettingsApi(const int timeOut = 0);
    ~OAISettingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getGeneralAPISettings();


    virtual void getGeneralAttachmentSettings();


    virtual void getGeneralRepositorySettings();


    virtual void getGeneralUISettings();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getGeneralAPISettingsCallback(OAIHttpRequestWorker *worker);
    void getGeneralAttachmentSettingsCallback(OAIHttpRequestWorker *worker);
    void getGeneralRepositorySettingsCallback(OAIHttpRequestWorker *worker);
    void getGeneralUISettingsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getGeneralAPISettingsSignal(OAIGeneralAPISettings summary);
    void getGeneralAttachmentSettingsSignal(OAIGeneralAttachmentSettings summary);
    void getGeneralRepositorySettingsSignal(OAIGeneralRepoSettings summary);
    void getGeneralUISettingsSignal(OAIGeneralUISettings summary);


    void getGeneralAPISettingsSignalFull(OAIHttpRequestWorker *worker, OAIGeneralAPISettings summary);
    void getGeneralAttachmentSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGeneralAttachmentSettings summary);
    void getGeneralRepositorySettingsSignalFull(OAIHttpRequestWorker *worker, OAIGeneralRepoSettings summary);
    void getGeneralUISettingsSignalFull(OAIHttpRequestWorker *worker, OAIGeneralUISettings summary);

    Q_DECL_DEPRECATED_X("Use getGeneralAPISettingsSignalError() instead")
    void getGeneralAPISettingsSignalE(OAIGeneralAPISettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneralAPISettingsSignalError(OAIGeneralAPISettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneralAttachmentSettingsSignalError() instead")
    void getGeneralAttachmentSettingsSignalE(OAIGeneralAttachmentSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneralAttachmentSettingsSignalError(OAIGeneralAttachmentSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneralRepositorySettingsSignalError() instead")
    void getGeneralRepositorySettingsSignalE(OAIGeneralRepoSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneralRepositorySettingsSignalError(OAIGeneralRepoSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneralUISettingsSignalError() instead")
    void getGeneralUISettingsSignalE(OAIGeneralUISettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneralUISettingsSignalError(OAIGeneralUISettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getGeneralAPISettingsSignalErrorFull() instead")
    void getGeneralAPISettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneralAPISettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneralAttachmentSettingsSignalErrorFull() instead")
    void getGeneralAttachmentSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneralAttachmentSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneralRepositorySettingsSignalErrorFull() instead")
    void getGeneralRepositorySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneralRepositorySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneralUISettingsSignalErrorFull() instead")
    void getGeneralUISettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneralUISettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
