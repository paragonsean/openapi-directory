/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueTemplate::OAIIssueTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueTemplate::OAIIssueTemplate() {
    this->initializeModel();
}

OAIIssueTemplate::~OAIIssueTemplate() {}

void OAIIssueTemplate::initializeModel() {

    m_about_isSet = false;
    m_about_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIIssueTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueTemplate::fromJsonObject(QJsonObject json) {

    m_about_isValid = ::OpenAPI::fromJsonValue(m_about, json[QString("about")]);
    m_about_isSet = !json[QString("about")].isNull() && m_about_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("file_name")]);
    m_file_name_isSet = !json[QString("file_name")].isNull() && m_file_name_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIIssueTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_about_isSet) {
        obj.insert(QString("about"), ::OpenAPI::toJsonValue(m_about));
    }
    if (m_body.size() > 0) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("file_name"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIIssueTemplate::getAbout() const {
    return m_about;
}
void OAIIssueTemplate::setAbout(const QString &about) {
    m_about = about;
    m_about_isSet = true;
}

bool OAIIssueTemplate::is_about_Set() const{
    return m_about_isSet;
}

bool OAIIssueTemplate::is_about_Valid() const{
    return m_about_isValid;
}

QList<OAIIssueFormField> OAIIssueTemplate::getBody() const {
    return m_body;
}
void OAIIssueTemplate::setBody(const QList<OAIIssueFormField> &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIIssueTemplate::is_body_Set() const{
    return m_body_isSet;
}

bool OAIIssueTemplate::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIIssueTemplate::getContent() const {
    return m_content;
}
void OAIIssueTemplate::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIIssueTemplate::is_content_Set() const{
    return m_content_isSet;
}

bool OAIIssueTemplate::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIIssueTemplate::getFileName() const {
    return m_file_name;
}
void OAIIssueTemplate::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIIssueTemplate::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIIssueTemplate::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QList<QString> OAIIssueTemplate::getLabels() const {
    return m_labels;
}
void OAIIssueTemplate::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIIssueTemplate::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIIssueTemplate::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIIssueTemplate::getName() const {
    return m_name;
}
void OAIIssueTemplate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIssueTemplate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIssueTemplate::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIIssueTemplate::getRef() const {
    return m_ref;
}
void OAIIssueTemplate::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAIIssueTemplate::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAIIssueTemplate::is_ref_Valid() const{
    return m_ref_isValid;
}

QString OAIIssueTemplate::getTitle() const {
    return m_title;
}
void OAIIssueTemplate::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIIssueTemplate::is_title_Set() const{
    return m_title_isSet;
}

bool OAIIssueTemplate::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIIssueTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_about_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
