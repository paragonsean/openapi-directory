/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRepoOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRepoOption::OAICreateRepoOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRepoOption::OAICreateRepoOption() {
    this->initializeModel();
}

OAICreateRepoOption::~OAICreateRepoOption() {}

void OAICreateRepoOption::initializeModel() {

    m_auto_init_isSet = false;
    m_auto_init_isValid = false;

    m_default_branch_isSet = false;
    m_default_branch_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_gitignores_isSet = false;
    m_gitignores_isValid = false;

    m_issue_labels_isSet = false;
    m_issue_labels_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_private_isSet = false;
    m_r_private_isValid = false;

    m_readme_isSet = false;
    m_readme_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_trust_model_isSet = false;
    m_trust_model_isValid = false;
}

void OAICreateRepoOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRepoOption::fromJsonObject(QJsonObject json) {

    m_auto_init_isValid = ::OpenAPI::fromJsonValue(m_auto_init, json[QString("auto_init")]);
    m_auto_init_isSet = !json[QString("auto_init")].isNull() && m_auto_init_isValid;

    m_default_branch_isValid = ::OpenAPI::fromJsonValue(m_default_branch, json[QString("default_branch")]);
    m_default_branch_isSet = !json[QString("default_branch")].isNull() && m_default_branch_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_gitignores_isValid = ::OpenAPI::fromJsonValue(m_gitignores, json[QString("gitignores")]);
    m_gitignores_isSet = !json[QString("gitignores")].isNull() && m_gitignores_isValid;

    m_issue_labels_isValid = ::OpenAPI::fromJsonValue(m_issue_labels, json[QString("issue_labels")]);
    m_issue_labels_isSet = !json[QString("issue_labels")].isNull() && m_issue_labels_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_private_isValid = ::OpenAPI::fromJsonValue(m_r_private, json[QString("private")]);
    m_r_private_isSet = !json[QString("private")].isNull() && m_r_private_isValid;

    m_readme_isValid = ::OpenAPI::fromJsonValue(m_readme, json[QString("readme")]);
    m_readme_isSet = !json[QString("readme")].isNull() && m_readme_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_trust_model_isValid = ::OpenAPI::fromJsonValue(m_trust_model, json[QString("trust_model")]);
    m_trust_model_isSet = !json[QString("trust_model")].isNull() && m_trust_model_isValid;
}

QString OAICreateRepoOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRepoOption::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_init_isSet) {
        obj.insert(QString("auto_init"), ::OpenAPI::toJsonValue(m_auto_init));
    }
    if (m_default_branch_isSet) {
        obj.insert(QString("default_branch"), ::OpenAPI::toJsonValue(m_default_branch));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_gitignores_isSet) {
        obj.insert(QString("gitignores"), ::OpenAPI::toJsonValue(m_gitignores));
    }
    if (m_issue_labels_isSet) {
        obj.insert(QString("issue_labels"), ::OpenAPI::toJsonValue(m_issue_labels));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_private_isSet) {
        obj.insert(QString("private"), ::OpenAPI::toJsonValue(m_r_private));
    }
    if (m_readme_isSet) {
        obj.insert(QString("readme"), ::OpenAPI::toJsonValue(m_readme));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_trust_model_isSet) {
        obj.insert(QString("trust_model"), ::OpenAPI::toJsonValue(m_trust_model));
    }
    return obj;
}

bool OAICreateRepoOption::isAutoInit() const {
    return m_auto_init;
}
void OAICreateRepoOption::setAutoInit(const bool &auto_init) {
    m_auto_init = auto_init;
    m_auto_init_isSet = true;
}

bool OAICreateRepoOption::is_auto_init_Set() const{
    return m_auto_init_isSet;
}

bool OAICreateRepoOption::is_auto_init_Valid() const{
    return m_auto_init_isValid;
}

QString OAICreateRepoOption::getDefaultBranch() const {
    return m_default_branch;
}
void OAICreateRepoOption::setDefaultBranch(const QString &default_branch) {
    m_default_branch = default_branch;
    m_default_branch_isSet = true;
}

bool OAICreateRepoOption::is_default_branch_Set() const{
    return m_default_branch_isSet;
}

bool OAICreateRepoOption::is_default_branch_Valid() const{
    return m_default_branch_isValid;
}

QString OAICreateRepoOption::getDescription() const {
    return m_description;
}
void OAICreateRepoOption::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateRepoOption::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateRepoOption::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateRepoOption::getGitignores() const {
    return m_gitignores;
}
void OAICreateRepoOption::setGitignores(const QString &gitignores) {
    m_gitignores = gitignores;
    m_gitignores_isSet = true;
}

bool OAICreateRepoOption::is_gitignores_Set() const{
    return m_gitignores_isSet;
}

bool OAICreateRepoOption::is_gitignores_Valid() const{
    return m_gitignores_isValid;
}

QString OAICreateRepoOption::getIssueLabels() const {
    return m_issue_labels;
}
void OAICreateRepoOption::setIssueLabels(const QString &issue_labels) {
    m_issue_labels = issue_labels;
    m_issue_labels_isSet = true;
}

bool OAICreateRepoOption::is_issue_labels_Set() const{
    return m_issue_labels_isSet;
}

bool OAICreateRepoOption::is_issue_labels_Valid() const{
    return m_issue_labels_isValid;
}

QString OAICreateRepoOption::getLicense() const {
    return m_license;
}
void OAICreateRepoOption::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAICreateRepoOption::is_license_Set() const{
    return m_license_isSet;
}

bool OAICreateRepoOption::is_license_Valid() const{
    return m_license_isValid;
}

QString OAICreateRepoOption::getName() const {
    return m_name;
}
void OAICreateRepoOption::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRepoOption::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRepoOption::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICreateRepoOption::isRPrivate() const {
    return m_r_private;
}
void OAICreateRepoOption::setRPrivate(const bool &r_private) {
    m_r_private = r_private;
    m_r_private_isSet = true;
}

bool OAICreateRepoOption::is_r_private_Set() const{
    return m_r_private_isSet;
}

bool OAICreateRepoOption::is_r_private_Valid() const{
    return m_r_private_isValid;
}

QString OAICreateRepoOption::getReadme() const {
    return m_readme;
}
void OAICreateRepoOption::setReadme(const QString &readme) {
    m_readme = readme;
    m_readme_isSet = true;
}

bool OAICreateRepoOption::is_readme_Set() const{
    return m_readme_isSet;
}

bool OAICreateRepoOption::is_readme_Valid() const{
    return m_readme_isValid;
}

bool OAICreateRepoOption::isRTemplate() const {
    return m_r_template;
}
void OAICreateRepoOption::setRTemplate(const bool &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAICreateRepoOption::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAICreateRepoOption::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAICreateRepoOption::getTrustModel() const {
    return m_trust_model;
}
void OAICreateRepoOption::setTrustModel(const QString &trust_model) {
    m_trust_model = trust_model;
    m_trust_model_isSet = true;
}

bool OAICreateRepoOption::is_trust_model_Set() const{
    return m_trust_model_isSet;
}

bool OAICreateRepoOption::is_trust_model_Valid() const{
    return m_trust_model_isValid;
}

bool OAICreateRepoOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_init_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gitignores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_labels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust_model_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRepoOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
