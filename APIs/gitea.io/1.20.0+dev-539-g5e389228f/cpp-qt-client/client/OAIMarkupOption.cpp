/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarkupOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarkupOption::OAIMarkupOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarkupOption::OAIMarkupOption() {
    this->initializeModel();
}

OAIMarkupOption::~OAIMarkupOption() {}

void OAIMarkupOption::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_file_path_isSet = false;
    m_file_path_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_wiki_isSet = false;
    m_wiki_isValid = false;
}

void OAIMarkupOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarkupOption::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("Context")]);
    m_context_isSet = !json[QString("Context")].isNull() && m_context_isValid;

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("FilePath")]);
    m_file_path_isSet = !json[QString("FilePath")].isNull() && m_file_path_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("Mode")]);
    m_mode_isSet = !json[QString("Mode")].isNull() && m_mode_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;

    m_wiki_isValid = ::OpenAPI::fromJsonValue(m_wiki, json[QString("Wiki")]);
    m_wiki_isSet = !json[QString("Wiki")].isNull() && m_wiki_isValid;
}

QString OAIMarkupOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarkupOption::asJsonObject() const {
    QJsonObject obj;
    if (m_context_isSet) {
        obj.insert(QString("Context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_file_path_isSet) {
        obj.insert(QString("FilePath"), ::OpenAPI::toJsonValue(m_file_path));
    }
    if (m_mode_isSet) {
        obj.insert(QString("Mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_wiki_isSet) {
        obj.insert(QString("Wiki"), ::OpenAPI::toJsonValue(m_wiki));
    }
    return obj;
}

QString OAIMarkupOption::getContext() const {
    return m_context;
}
void OAIMarkupOption::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIMarkupOption::is_context_Set() const{
    return m_context_isSet;
}

bool OAIMarkupOption::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIMarkupOption::getFilePath() const {
    return m_file_path;
}
void OAIMarkupOption::setFilePath(const QString &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAIMarkupOption::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAIMarkupOption::is_file_path_Valid() const{
    return m_file_path_isValid;
}

QString OAIMarkupOption::getMode() const {
    return m_mode;
}
void OAIMarkupOption::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIMarkupOption::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIMarkupOption::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIMarkupOption::getText() const {
    return m_text;
}
void OAIMarkupOption::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIMarkupOption::is_text_Set() const{
    return m_text_isSet;
}

bool OAIMarkupOption::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIMarkupOption::isWiki() const {
    return m_wiki;
}
void OAIMarkupOption::setWiki(const bool &wiki) {
    m_wiki = wiki;
    m_wiki_isSet = true;
}

bool OAIMarkupOption::is_wiki_Set() const{
    return m_wiki_isSet;
}

bool OAIMarkupOption::is_wiki_Valid() const{
    return m_wiki_isValid;
}

bool OAIMarkupOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wiki_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarkupOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
