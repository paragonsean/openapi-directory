/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganization::OAIOrganization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganization::OAIOrganization() {
    this->initializeModel();
}

OAIOrganization::~OAIOrganization() {}

void OAIOrganization::initializeModel() {

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_repo_admin_change_team_access_isSet = false;
    m_repo_admin_change_team_access_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIOrganization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganization::fromJsonObject(QJsonObject json) {

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_repo_admin_change_team_access_isValid = ::OpenAPI::fromJsonValue(m_repo_admin_change_team_access, json[QString("repo_admin_change_team_access")]);
    m_repo_admin_change_team_access_isSet = !json[QString("repo_admin_change_team_access")].isNull() && m_repo_admin_change_team_access_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIOrganization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganization::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_repo_admin_change_team_access_isSet) {
        obj.insert(QString("repo_admin_change_team_access"), ::OpenAPI::toJsonValue(m_repo_admin_change_team_access));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAIOrganization::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIOrganization::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIOrganization::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIOrganization::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAIOrganization::getDescription() const {
    return m_description;
}
void OAIOrganization::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOrganization::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOrganization::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOrganization::getFullName() const {
    return m_full_name;
}
void OAIOrganization::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIOrganization::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIOrganization::is_full_name_Valid() const{
    return m_full_name_isValid;
}

qint64 OAIOrganization::getId() const {
    return m_id;
}
void OAIOrganization::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrganization::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrganization::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrganization::getLocation() const {
    return m_location;
}
void OAIOrganization::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIOrganization::is_location_Set() const{
    return m_location_isSet;
}

bool OAIOrganization::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIOrganization::getName() const {
    return m_name;
}
void OAIOrganization::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrganization::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrganization::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIOrganization::isRepoAdminChangeTeamAccess() const {
    return m_repo_admin_change_team_access;
}
void OAIOrganization::setRepoAdminChangeTeamAccess(const bool &repo_admin_change_team_access) {
    m_repo_admin_change_team_access = repo_admin_change_team_access;
    m_repo_admin_change_team_access_isSet = true;
}

bool OAIOrganization::is_repo_admin_change_team_access_Set() const{
    return m_repo_admin_change_team_access_isSet;
}

bool OAIOrganization::is_repo_admin_change_team_access_Valid() const{
    return m_repo_admin_change_team_access_isValid;
}

QString OAIOrganization::getUsername() const {
    return m_username;
}
void OAIOrganization::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIOrganization::is_username_Set() const{
    return m_username_isSet;
}

bool OAIOrganization::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIOrganization::getVisibility() const {
    return m_visibility;
}
void OAIOrganization::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIOrganization::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIOrganization::is_visibility_Valid() const{
    return m_visibility_isValid;
}

QString OAIOrganization::getWebsite() const {
    return m_website;
}
void OAIOrganization::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIOrganization::is_website_Set() const{
    return m_website_isSet;
}

bool OAIOrganization::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIOrganization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_admin_change_team_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
