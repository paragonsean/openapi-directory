/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdminApi_H
#define OAI_OAIAdminApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateHookOption.h"
#include "OAICreateKeyOption.h"
#include "OAICreateOrgOption.h"
#include "OAICreateRepoOption.h"
#include "OAICreateUserOption.h"
#include "OAICron.h"
#include "OAIEditHookOption.h"
#include "OAIEditUserOption.h"
#include "OAIEmail.h"
#include "OAIHook.h"
#include "OAIOrganization.h"
#include "OAIPublicKey.h"
#include "OAIRenameUserOption.h"
#include "OAIRepository.h"
#include "OAIUser.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAdminApi : public QObject {
    Q_OBJECT

public:
    OAIAdminApi(const int timeOut = 0);
    ~OAIAdminApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void adminAdoptRepository(const QString &owner, const QString &repo);

    /**
    * @param[in]  oai_create_hook_option OAICreateHookOption [required]
    */
    virtual void adminCreateHook(const OAICreateHookOption &oai_create_hook_option);

    /**
    * @param[in]  username QString [required]
    * @param[in]  oai_create_org_option OAICreateOrgOption [required]
    */
    virtual void adminCreateOrg(const QString &username, const OAICreateOrgOption &oai_create_org_option);

    /**
    * @param[in]  username QString [required]
    * @param[in]  oai_create_key_option OAICreateKeyOption [optional]
    */
    virtual void adminCreatePublicKey(const QString &username, const ::OpenAPI::OptionalParam<OAICreateKeyOption> &oai_create_key_option = ::OpenAPI::OptionalParam<OAICreateKeyOption>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  oai_create_repo_option OAICreateRepoOption [required]
    */
    virtual void adminCreateRepo(const QString &username, const OAICreateRepoOption &oai_create_repo_option);

    /**
    * @param[in]  oai_create_user_option OAICreateUserOption [optional]
    */
    virtual void adminCreateUser(const ::OpenAPI::OptionalParam<OAICreateUserOption> &oai_create_user_option = ::OpenAPI::OptionalParam<OAICreateUserOption>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void adminCronList(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  task QString [required]
    */
    virtual void adminCronRun(const QString &task);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void adminDeleteHook(const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void adminDeleteUnadoptedRepository(const QString &owner, const QString &repo);

    /**
    * @param[in]  username QString [required]
    * @param[in]  purge bool [optional]
    */
    virtual void adminDeleteUser(const QString &username, const ::OpenAPI::OptionalParam<bool> &purge = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void adminDeleteUserPublicKey(const QString &username, const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_edit_hook_option OAIEditHookOption [optional]
    */
    virtual void adminEditHook(const qint64 &id, const ::OpenAPI::OptionalParam<OAIEditHookOption> &oai_edit_hook_option = ::OpenAPI::OptionalParam<OAIEditHookOption>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  oai_edit_user_option OAIEditUserOption [optional]
    */
    virtual void adminEditUser(const QString &username, const ::OpenAPI::OptionalParam<OAIEditUserOption> &oai_edit_user_option = ::OpenAPI::OptionalParam<OAIEditUserOption>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void adminGetAllEmails(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void adminGetAllOrgs(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void adminGetHook(const qint64 &id);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void adminListHooks(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  oai_rename_user_option OAIRenameUserOption [required]
    */
    virtual void adminRenameUser(const QString &username, const OAIRenameUserOption &oai_rename_user_option);

    /**
    * @param[in]  q QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void adminSearchEmails(const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  source_id qint64 [optional]
    * @param[in]  login_name QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void adminSearchUsers(const ::OpenAPI::OptionalParam<qint64> &source_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &login_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  pattern QString [optional]
    */
    virtual void adminUnadoptedList(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pattern = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adminAdoptRepositoryCallback(OAIHttpRequestWorker *worker);
    void adminCreateHookCallback(OAIHttpRequestWorker *worker);
    void adminCreateOrgCallback(OAIHttpRequestWorker *worker);
    void adminCreatePublicKeyCallback(OAIHttpRequestWorker *worker);
    void adminCreateRepoCallback(OAIHttpRequestWorker *worker);
    void adminCreateUserCallback(OAIHttpRequestWorker *worker);
    void adminCronListCallback(OAIHttpRequestWorker *worker);
    void adminCronRunCallback(OAIHttpRequestWorker *worker);
    void adminDeleteHookCallback(OAIHttpRequestWorker *worker);
    void adminDeleteUnadoptedRepositoryCallback(OAIHttpRequestWorker *worker);
    void adminDeleteUserCallback(OAIHttpRequestWorker *worker);
    void adminDeleteUserPublicKeyCallback(OAIHttpRequestWorker *worker);
    void adminEditHookCallback(OAIHttpRequestWorker *worker);
    void adminEditUserCallback(OAIHttpRequestWorker *worker);
    void adminGetAllEmailsCallback(OAIHttpRequestWorker *worker);
    void adminGetAllOrgsCallback(OAIHttpRequestWorker *worker);
    void adminGetHookCallback(OAIHttpRequestWorker *worker);
    void adminListHooksCallback(OAIHttpRequestWorker *worker);
    void adminRenameUserCallback(OAIHttpRequestWorker *worker);
    void adminSearchEmailsCallback(OAIHttpRequestWorker *worker);
    void adminSearchUsersCallback(OAIHttpRequestWorker *worker);
    void adminUnadoptedListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adminAdoptRepositorySignal();
    void adminCreateHookSignal(OAIHook summary);
    void adminCreateOrgSignal(OAIOrganization summary);
    void adminCreatePublicKeySignal(OAIPublicKey summary);
    void adminCreateRepoSignal(OAIRepository summary);
    void adminCreateUserSignal(OAIUser summary);
    void adminCronListSignal(QList<OAICron> summary);
    void adminCronRunSignal();
    void adminDeleteHookSignal();
    void adminDeleteUnadoptedRepositorySignal();
    void adminDeleteUserSignal();
    void adminDeleteUserPublicKeySignal();
    void adminEditHookSignal(OAIHook summary);
    void adminEditUserSignal(OAIUser summary);
    void adminGetAllEmailsSignal(QList<OAIEmail> summary);
    void adminGetAllOrgsSignal(QList<OAIOrganization> summary);
    void adminGetHookSignal(OAIHook summary);
    void adminListHooksSignal(QList<OAIHook> summary);
    void adminRenameUserSignal();
    void adminSearchEmailsSignal(QList<OAIEmail> summary);
    void adminSearchUsersSignal(QList<OAIUser> summary);
    void adminUnadoptedListSignal(QList<QString> summary);


    void adminAdoptRepositorySignalFull(OAIHttpRequestWorker *worker);
    void adminCreateHookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void adminCreateOrgSignalFull(OAIHttpRequestWorker *worker, OAIOrganization summary);
    void adminCreatePublicKeySignalFull(OAIHttpRequestWorker *worker, OAIPublicKey summary);
    void adminCreateRepoSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void adminCreateUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void adminCronListSignalFull(OAIHttpRequestWorker *worker, QList<OAICron> summary);
    void adminCronRunSignalFull(OAIHttpRequestWorker *worker);
    void adminDeleteHookSignalFull(OAIHttpRequestWorker *worker);
    void adminDeleteUnadoptedRepositorySignalFull(OAIHttpRequestWorker *worker);
    void adminDeleteUserSignalFull(OAIHttpRequestWorker *worker);
    void adminDeleteUserPublicKeySignalFull(OAIHttpRequestWorker *worker);
    void adminEditHookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void adminEditUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void adminGetAllEmailsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEmail> summary);
    void adminGetAllOrgsSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganization> summary);
    void adminGetHookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void adminListHooksSignalFull(OAIHttpRequestWorker *worker, QList<OAIHook> summary);
    void adminRenameUserSignalFull(OAIHttpRequestWorker *worker);
    void adminSearchEmailsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEmail> summary);
    void adminSearchUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void adminUnadoptedListSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);

    Q_DECL_DEPRECATED_X("Use adminAdoptRepositorySignalError() instead")
    void adminAdoptRepositorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminAdoptRepositorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminCreateHookSignalError() instead")
    void adminCreateHookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminCreateHookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminCreateOrgSignalError() instead")
    void adminCreateOrgSignalE(OAIOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminCreateOrgSignalError(OAIOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminCreatePublicKeySignalError() instead")
    void adminCreatePublicKeySignalE(OAIPublicKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminCreatePublicKeySignalError(OAIPublicKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminCreateRepoSignalError() instead")
    void adminCreateRepoSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminCreateRepoSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminCreateUserSignalError() instead")
    void adminCreateUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminCreateUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminCronListSignalError() instead")
    void adminCronListSignalE(QList<OAICron> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminCronListSignalError(QList<OAICron> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminCronRunSignalError() instead")
    void adminCronRunSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminCronRunSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminDeleteHookSignalError() instead")
    void adminDeleteHookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminDeleteHookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminDeleteUnadoptedRepositorySignalError() instead")
    void adminDeleteUnadoptedRepositorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminDeleteUnadoptedRepositorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminDeleteUserSignalError() instead")
    void adminDeleteUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminDeleteUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminDeleteUserPublicKeySignalError() instead")
    void adminDeleteUserPublicKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminDeleteUserPublicKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEditHookSignalError() instead")
    void adminEditHookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEditHookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEditUserSignalError() instead")
    void adminEditUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEditUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminGetAllEmailsSignalError() instead")
    void adminGetAllEmailsSignalE(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminGetAllEmailsSignalError(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminGetAllOrgsSignalError() instead")
    void adminGetAllOrgsSignalE(QList<OAIOrganization> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminGetAllOrgsSignalError(QList<OAIOrganization> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminGetHookSignalError() instead")
    void adminGetHookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminGetHookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminListHooksSignalError() instead")
    void adminListHooksSignalE(QList<OAIHook> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminListHooksSignalError(QList<OAIHook> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRenameUserSignalError() instead")
    void adminRenameUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminRenameUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminSearchEmailsSignalError() instead")
    void adminSearchEmailsSignalE(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminSearchEmailsSignalError(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminSearchUsersSignalError() instead")
    void adminSearchUsersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminSearchUsersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUnadoptedListSignalError() instead")
    void adminUnadoptedListSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUnadoptedListSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adminAdoptRepositorySignalErrorFull() instead")
    void adminAdoptRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminAdoptRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminCreateHookSignalErrorFull() instead")
    void adminCreateHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminCreateHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminCreateOrgSignalErrorFull() instead")
    void adminCreateOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminCreateOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminCreatePublicKeySignalErrorFull() instead")
    void adminCreatePublicKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminCreatePublicKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminCreateRepoSignalErrorFull() instead")
    void adminCreateRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminCreateRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminCreateUserSignalErrorFull() instead")
    void adminCreateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminCreateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminCronListSignalErrorFull() instead")
    void adminCronListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminCronListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminCronRunSignalErrorFull() instead")
    void adminCronRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminCronRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminDeleteHookSignalErrorFull() instead")
    void adminDeleteHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminDeleteHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminDeleteUnadoptedRepositorySignalErrorFull() instead")
    void adminDeleteUnadoptedRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminDeleteUnadoptedRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminDeleteUserSignalErrorFull() instead")
    void adminDeleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminDeleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminDeleteUserPublicKeySignalErrorFull() instead")
    void adminDeleteUserPublicKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminDeleteUserPublicKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEditHookSignalErrorFull() instead")
    void adminEditHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEditHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEditUserSignalErrorFull() instead")
    void adminEditUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEditUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminGetAllEmailsSignalErrorFull() instead")
    void adminGetAllEmailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminGetAllEmailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminGetAllOrgsSignalErrorFull() instead")
    void adminGetAllOrgsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminGetAllOrgsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminGetHookSignalErrorFull() instead")
    void adminGetHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminGetHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminListHooksSignalErrorFull() instead")
    void adminListHooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminListHooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRenameUserSignalErrorFull() instead")
    void adminRenameUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRenameUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminSearchEmailsSignalErrorFull() instead")
    void adminSearchEmailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminSearchEmailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminSearchUsersSignalErrorFull() instead")
    void adminSearchUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminSearchUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUnadoptedListSignalErrorFull() instead")
    void adminUnadoptedListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUnadoptedListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
