/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWikiPage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWikiPage::OAIWikiPage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWikiPage::OAIWikiPage() {
    this->initializeModel();
}

OAIWikiPage::~OAIWikiPage() {}

void OAIWikiPage::initializeModel() {

    m_commit_count_isSet = false;
    m_commit_count_isValid = false;

    m_content_base64_isSet = false;
    m_content_base64_isValid = false;

    m_footer_isSet = false;
    m_footer_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_last_commit_isSet = false;
    m_last_commit_isValid = false;

    m_sidebar_isSet = false;
    m_sidebar_isValid = false;

    m_sub_url_isSet = false;
    m_sub_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIWikiPage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWikiPage::fromJsonObject(QJsonObject json) {

    m_commit_count_isValid = ::OpenAPI::fromJsonValue(m_commit_count, json[QString("commit_count")]);
    m_commit_count_isSet = !json[QString("commit_count")].isNull() && m_commit_count_isValid;

    m_content_base64_isValid = ::OpenAPI::fromJsonValue(m_content_base64, json[QString("content_base64")]);
    m_content_base64_isSet = !json[QString("content_base64")].isNull() && m_content_base64_isValid;

    m_footer_isValid = ::OpenAPI::fromJsonValue(m_footer, json[QString("footer")]);
    m_footer_isSet = !json[QString("footer")].isNull() && m_footer_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_last_commit_isValid = ::OpenAPI::fromJsonValue(m_last_commit, json[QString("last_commit")]);
    m_last_commit_isSet = !json[QString("last_commit")].isNull() && m_last_commit_isValid;

    m_sidebar_isValid = ::OpenAPI::fromJsonValue(m_sidebar, json[QString("sidebar")]);
    m_sidebar_isSet = !json[QString("sidebar")].isNull() && m_sidebar_isValid;

    m_sub_url_isValid = ::OpenAPI::fromJsonValue(m_sub_url, json[QString("sub_url")]);
    m_sub_url_isSet = !json[QString("sub_url")].isNull() && m_sub_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIWikiPage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWikiPage::asJsonObject() const {
    QJsonObject obj;
    if (m_commit_count_isSet) {
        obj.insert(QString("commit_count"), ::OpenAPI::toJsonValue(m_commit_count));
    }
    if (m_content_base64_isSet) {
        obj.insert(QString("content_base64"), ::OpenAPI::toJsonValue(m_content_base64));
    }
    if (m_footer_isSet) {
        obj.insert(QString("footer"), ::OpenAPI::toJsonValue(m_footer));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_last_commit.isSet()) {
        obj.insert(QString("last_commit"), ::OpenAPI::toJsonValue(m_last_commit));
    }
    if (m_sidebar_isSet) {
        obj.insert(QString("sidebar"), ::OpenAPI::toJsonValue(m_sidebar));
    }
    if (m_sub_url_isSet) {
        obj.insert(QString("sub_url"), ::OpenAPI::toJsonValue(m_sub_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint64 OAIWikiPage::getCommitCount() const {
    return m_commit_count;
}
void OAIWikiPage::setCommitCount(const qint64 &commit_count) {
    m_commit_count = commit_count;
    m_commit_count_isSet = true;
}

bool OAIWikiPage::is_commit_count_Set() const{
    return m_commit_count_isSet;
}

bool OAIWikiPage::is_commit_count_Valid() const{
    return m_commit_count_isValid;
}

QString OAIWikiPage::getContentBase64() const {
    return m_content_base64;
}
void OAIWikiPage::setContentBase64(const QString &content_base64) {
    m_content_base64 = content_base64;
    m_content_base64_isSet = true;
}

bool OAIWikiPage::is_content_base64_Set() const{
    return m_content_base64_isSet;
}

bool OAIWikiPage::is_content_base64_Valid() const{
    return m_content_base64_isValid;
}

QString OAIWikiPage::getFooter() const {
    return m_footer;
}
void OAIWikiPage::setFooter(const QString &footer) {
    m_footer = footer;
    m_footer_isSet = true;
}

bool OAIWikiPage::is_footer_Set() const{
    return m_footer_isSet;
}

bool OAIWikiPage::is_footer_Valid() const{
    return m_footer_isValid;
}

QString OAIWikiPage::getHtmlUrl() const {
    return m_html_url;
}
void OAIWikiPage::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIWikiPage::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIWikiPage::is_html_url_Valid() const{
    return m_html_url_isValid;
}

OAIWikiCommit OAIWikiPage::getLastCommit() const {
    return m_last_commit;
}
void OAIWikiPage::setLastCommit(const OAIWikiCommit &last_commit) {
    m_last_commit = last_commit;
    m_last_commit_isSet = true;
}

bool OAIWikiPage::is_last_commit_Set() const{
    return m_last_commit_isSet;
}

bool OAIWikiPage::is_last_commit_Valid() const{
    return m_last_commit_isValid;
}

QString OAIWikiPage::getSidebar() const {
    return m_sidebar;
}
void OAIWikiPage::setSidebar(const QString &sidebar) {
    m_sidebar = sidebar;
    m_sidebar_isSet = true;
}

bool OAIWikiPage::is_sidebar_Set() const{
    return m_sidebar_isSet;
}

bool OAIWikiPage::is_sidebar_Valid() const{
    return m_sidebar_isValid;
}

QString OAIWikiPage::getSubUrl() const {
    return m_sub_url;
}
void OAIWikiPage::setSubUrl(const QString &sub_url) {
    m_sub_url = sub_url;
    m_sub_url_isSet = true;
}

bool OAIWikiPage::is_sub_url_Set() const{
    return m_sub_url_isSet;
}

bool OAIWikiPage::is_sub_url_Valid() const{
    return m_sub_url_isValid;
}

QString OAIWikiPage::getTitle() const {
    return m_title;
}
void OAIWikiPage::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIWikiPage::is_title_Set() const{
    return m_title_isSet;
}

bool OAIWikiPage::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIWikiPage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commit_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_base64_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_commit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sidebar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWikiPage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
