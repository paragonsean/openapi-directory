/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateGPGKeyOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateGPGKeyOption::OAICreateGPGKeyOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateGPGKeyOption::OAICreateGPGKeyOption() {
    this->initializeModel();
}

OAICreateGPGKeyOption::~OAICreateGPGKeyOption() {}

void OAICreateGPGKeyOption::initializeModel() {

    m_armored_public_key_isSet = false;
    m_armored_public_key_isValid = false;

    m_armored_signature_isSet = false;
    m_armored_signature_isValid = false;
}

void OAICreateGPGKeyOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateGPGKeyOption::fromJsonObject(QJsonObject json) {

    m_armored_public_key_isValid = ::OpenAPI::fromJsonValue(m_armored_public_key, json[QString("armored_public_key")]);
    m_armored_public_key_isSet = !json[QString("armored_public_key")].isNull() && m_armored_public_key_isValid;

    m_armored_signature_isValid = ::OpenAPI::fromJsonValue(m_armored_signature, json[QString("armored_signature")]);
    m_armored_signature_isSet = !json[QString("armored_signature")].isNull() && m_armored_signature_isValid;
}

QString OAICreateGPGKeyOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateGPGKeyOption::asJsonObject() const {
    QJsonObject obj;
    if (m_armored_public_key_isSet) {
        obj.insert(QString("armored_public_key"), ::OpenAPI::toJsonValue(m_armored_public_key));
    }
    if (m_armored_signature_isSet) {
        obj.insert(QString("armored_signature"), ::OpenAPI::toJsonValue(m_armored_signature));
    }
    return obj;
}

QString OAICreateGPGKeyOption::getArmoredPublicKey() const {
    return m_armored_public_key;
}
void OAICreateGPGKeyOption::setArmoredPublicKey(const QString &armored_public_key) {
    m_armored_public_key = armored_public_key;
    m_armored_public_key_isSet = true;
}

bool OAICreateGPGKeyOption::is_armored_public_key_Set() const{
    return m_armored_public_key_isSet;
}

bool OAICreateGPGKeyOption::is_armored_public_key_Valid() const{
    return m_armored_public_key_isValid;
}

QString OAICreateGPGKeyOption::getArmoredSignature() const {
    return m_armored_signature;
}
void OAICreateGPGKeyOption::setArmoredSignature(const QString &armored_signature) {
    m_armored_signature = armored_signature;
    m_armored_signature_isSet = true;
}

bool OAICreateGPGKeyOption::is_armored_signature_Set() const{
    return m_armored_signature_isSet;
}

bool OAICreateGPGKeyOption::is_armored_signature_Valid() const{
    return m_armored_signature_isValid;
}

bool OAICreateGPGKeyOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_armored_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_armored_signature_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateGPGKeyOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_armored_public_key_isValid && true;
}

} // namespace OpenAPI
