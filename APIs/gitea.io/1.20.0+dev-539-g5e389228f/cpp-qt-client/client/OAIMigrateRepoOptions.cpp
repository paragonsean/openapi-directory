/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMigrateRepoOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMigrateRepoOptions::OAIMigrateRepoOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMigrateRepoOptions::OAIMigrateRepoOptions() {
    this->initializeModel();
}

OAIMigrateRepoOptions::~OAIMigrateRepoOptions() {}

void OAIMigrateRepoOptions::initializeModel() {

    m_auth_password_isSet = false;
    m_auth_password_isValid = false;

    m_auth_token_isSet = false;
    m_auth_token_isValid = false;

    m_auth_username_isSet = false;
    m_auth_username_isValid = false;

    m_clone_addr_isSet = false;
    m_clone_addr_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_lfs_isSet = false;
    m_lfs_isValid = false;

    m_lfs_endpoint_isSet = false;
    m_lfs_endpoint_isValid = false;

    m_milestones_isSet = false;
    m_milestones_isValid = false;

    m_mirror_isSet = false;
    m_mirror_isValid = false;

    m_mirror_interval_isSet = false;
    m_mirror_interval_isValid = false;

    m_r_private_isSet = false;
    m_r_private_isValid = false;

    m_pull_requests_isSet = false;
    m_pull_requests_isValid = false;

    m_releases_isSet = false;
    m_releases_isValid = false;

    m_repo_name_isSet = false;
    m_repo_name_isValid = false;

    m_repo_owner_isSet = false;
    m_repo_owner_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_wiki_isSet = false;
    m_wiki_isValid = false;
}

void OAIMigrateRepoOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMigrateRepoOptions::fromJsonObject(QJsonObject json) {

    m_auth_password_isValid = ::OpenAPI::fromJsonValue(m_auth_password, json[QString("auth_password")]);
    m_auth_password_isSet = !json[QString("auth_password")].isNull() && m_auth_password_isValid;

    m_auth_token_isValid = ::OpenAPI::fromJsonValue(m_auth_token, json[QString("auth_token")]);
    m_auth_token_isSet = !json[QString("auth_token")].isNull() && m_auth_token_isValid;

    m_auth_username_isValid = ::OpenAPI::fromJsonValue(m_auth_username, json[QString("auth_username")]);
    m_auth_username_isSet = !json[QString("auth_username")].isNull() && m_auth_username_isValid;

    m_clone_addr_isValid = ::OpenAPI::fromJsonValue(m_clone_addr, json[QString("clone_addr")]);
    m_clone_addr_isSet = !json[QString("clone_addr")].isNull() && m_clone_addr_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_lfs_isValid = ::OpenAPI::fromJsonValue(m_lfs, json[QString("lfs")]);
    m_lfs_isSet = !json[QString("lfs")].isNull() && m_lfs_isValid;

    m_lfs_endpoint_isValid = ::OpenAPI::fromJsonValue(m_lfs_endpoint, json[QString("lfs_endpoint")]);
    m_lfs_endpoint_isSet = !json[QString("lfs_endpoint")].isNull() && m_lfs_endpoint_isValid;

    m_milestones_isValid = ::OpenAPI::fromJsonValue(m_milestones, json[QString("milestones")]);
    m_milestones_isSet = !json[QString("milestones")].isNull() && m_milestones_isValid;

    m_mirror_isValid = ::OpenAPI::fromJsonValue(m_mirror, json[QString("mirror")]);
    m_mirror_isSet = !json[QString("mirror")].isNull() && m_mirror_isValid;

    m_mirror_interval_isValid = ::OpenAPI::fromJsonValue(m_mirror_interval, json[QString("mirror_interval")]);
    m_mirror_interval_isSet = !json[QString("mirror_interval")].isNull() && m_mirror_interval_isValid;

    m_r_private_isValid = ::OpenAPI::fromJsonValue(m_r_private, json[QString("private")]);
    m_r_private_isSet = !json[QString("private")].isNull() && m_r_private_isValid;

    m_pull_requests_isValid = ::OpenAPI::fromJsonValue(m_pull_requests, json[QString("pull_requests")]);
    m_pull_requests_isSet = !json[QString("pull_requests")].isNull() && m_pull_requests_isValid;

    m_releases_isValid = ::OpenAPI::fromJsonValue(m_releases, json[QString("releases")]);
    m_releases_isSet = !json[QString("releases")].isNull() && m_releases_isValid;

    m_repo_name_isValid = ::OpenAPI::fromJsonValue(m_repo_name, json[QString("repo_name")]);
    m_repo_name_isSet = !json[QString("repo_name")].isNull() && m_repo_name_isValid;

    m_repo_owner_isValid = ::OpenAPI::fromJsonValue(m_repo_owner, json[QString("repo_owner")]);
    m_repo_owner_isSet = !json[QString("repo_owner")].isNull() && m_repo_owner_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_wiki_isValid = ::OpenAPI::fromJsonValue(m_wiki, json[QString("wiki")]);
    m_wiki_isSet = !json[QString("wiki")].isNull() && m_wiki_isValid;
}

QString OAIMigrateRepoOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMigrateRepoOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_password_isSet) {
        obj.insert(QString("auth_password"), ::OpenAPI::toJsonValue(m_auth_password));
    }
    if (m_auth_token_isSet) {
        obj.insert(QString("auth_token"), ::OpenAPI::toJsonValue(m_auth_token));
    }
    if (m_auth_username_isSet) {
        obj.insert(QString("auth_username"), ::OpenAPI::toJsonValue(m_auth_username));
    }
    if (m_clone_addr_isSet) {
        obj.insert(QString("clone_addr"), ::OpenAPI::toJsonValue(m_clone_addr));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_issues_isSet) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_labels_isSet) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_lfs_isSet) {
        obj.insert(QString("lfs"), ::OpenAPI::toJsonValue(m_lfs));
    }
    if (m_lfs_endpoint_isSet) {
        obj.insert(QString("lfs_endpoint"), ::OpenAPI::toJsonValue(m_lfs_endpoint));
    }
    if (m_milestones_isSet) {
        obj.insert(QString("milestones"), ::OpenAPI::toJsonValue(m_milestones));
    }
    if (m_mirror_isSet) {
        obj.insert(QString("mirror"), ::OpenAPI::toJsonValue(m_mirror));
    }
    if (m_mirror_interval_isSet) {
        obj.insert(QString("mirror_interval"), ::OpenAPI::toJsonValue(m_mirror_interval));
    }
    if (m_r_private_isSet) {
        obj.insert(QString("private"), ::OpenAPI::toJsonValue(m_r_private));
    }
    if (m_pull_requests_isSet) {
        obj.insert(QString("pull_requests"), ::OpenAPI::toJsonValue(m_pull_requests));
    }
    if (m_releases_isSet) {
        obj.insert(QString("releases"), ::OpenAPI::toJsonValue(m_releases));
    }
    if (m_repo_name_isSet) {
        obj.insert(QString("repo_name"), ::OpenAPI::toJsonValue(m_repo_name));
    }
    if (m_repo_owner_isSet) {
        obj.insert(QString("repo_owner"), ::OpenAPI::toJsonValue(m_repo_owner));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_wiki_isSet) {
        obj.insert(QString("wiki"), ::OpenAPI::toJsonValue(m_wiki));
    }
    return obj;
}

QString OAIMigrateRepoOptions::getAuthPassword() const {
    return m_auth_password;
}
void OAIMigrateRepoOptions::setAuthPassword(const QString &auth_password) {
    m_auth_password = auth_password;
    m_auth_password_isSet = true;
}

bool OAIMigrateRepoOptions::is_auth_password_Set() const{
    return m_auth_password_isSet;
}

bool OAIMigrateRepoOptions::is_auth_password_Valid() const{
    return m_auth_password_isValid;
}

QString OAIMigrateRepoOptions::getAuthToken() const {
    return m_auth_token;
}
void OAIMigrateRepoOptions::setAuthToken(const QString &auth_token) {
    m_auth_token = auth_token;
    m_auth_token_isSet = true;
}

bool OAIMigrateRepoOptions::is_auth_token_Set() const{
    return m_auth_token_isSet;
}

bool OAIMigrateRepoOptions::is_auth_token_Valid() const{
    return m_auth_token_isValid;
}

QString OAIMigrateRepoOptions::getAuthUsername() const {
    return m_auth_username;
}
void OAIMigrateRepoOptions::setAuthUsername(const QString &auth_username) {
    m_auth_username = auth_username;
    m_auth_username_isSet = true;
}

bool OAIMigrateRepoOptions::is_auth_username_Set() const{
    return m_auth_username_isSet;
}

bool OAIMigrateRepoOptions::is_auth_username_Valid() const{
    return m_auth_username_isValid;
}

QString OAIMigrateRepoOptions::getCloneAddr() const {
    return m_clone_addr;
}
void OAIMigrateRepoOptions::setCloneAddr(const QString &clone_addr) {
    m_clone_addr = clone_addr;
    m_clone_addr_isSet = true;
}

bool OAIMigrateRepoOptions::is_clone_addr_Set() const{
    return m_clone_addr_isSet;
}

bool OAIMigrateRepoOptions::is_clone_addr_Valid() const{
    return m_clone_addr_isValid;
}

QString OAIMigrateRepoOptions::getDescription() const {
    return m_description;
}
void OAIMigrateRepoOptions::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMigrateRepoOptions::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMigrateRepoOptions::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIMigrateRepoOptions::isIssues() const {
    return m_issues;
}
void OAIMigrateRepoOptions::setIssues(const bool &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAIMigrateRepoOptions::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAIMigrateRepoOptions::is_issues_Valid() const{
    return m_issues_isValid;
}

bool OAIMigrateRepoOptions::isLabels() const {
    return m_labels;
}
void OAIMigrateRepoOptions::setLabels(const bool &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIMigrateRepoOptions::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIMigrateRepoOptions::is_labels_Valid() const{
    return m_labels_isValid;
}

bool OAIMigrateRepoOptions::isLfs() const {
    return m_lfs;
}
void OAIMigrateRepoOptions::setLfs(const bool &lfs) {
    m_lfs = lfs;
    m_lfs_isSet = true;
}

bool OAIMigrateRepoOptions::is_lfs_Set() const{
    return m_lfs_isSet;
}

bool OAIMigrateRepoOptions::is_lfs_Valid() const{
    return m_lfs_isValid;
}

QString OAIMigrateRepoOptions::getLfsEndpoint() const {
    return m_lfs_endpoint;
}
void OAIMigrateRepoOptions::setLfsEndpoint(const QString &lfs_endpoint) {
    m_lfs_endpoint = lfs_endpoint;
    m_lfs_endpoint_isSet = true;
}

bool OAIMigrateRepoOptions::is_lfs_endpoint_Set() const{
    return m_lfs_endpoint_isSet;
}

bool OAIMigrateRepoOptions::is_lfs_endpoint_Valid() const{
    return m_lfs_endpoint_isValid;
}

bool OAIMigrateRepoOptions::isMilestones() const {
    return m_milestones;
}
void OAIMigrateRepoOptions::setMilestones(const bool &milestones) {
    m_milestones = milestones;
    m_milestones_isSet = true;
}

bool OAIMigrateRepoOptions::is_milestones_Set() const{
    return m_milestones_isSet;
}

bool OAIMigrateRepoOptions::is_milestones_Valid() const{
    return m_milestones_isValid;
}

bool OAIMigrateRepoOptions::isMirror() const {
    return m_mirror;
}
void OAIMigrateRepoOptions::setMirror(const bool &mirror) {
    m_mirror = mirror;
    m_mirror_isSet = true;
}

bool OAIMigrateRepoOptions::is_mirror_Set() const{
    return m_mirror_isSet;
}

bool OAIMigrateRepoOptions::is_mirror_Valid() const{
    return m_mirror_isValid;
}

QString OAIMigrateRepoOptions::getMirrorInterval() const {
    return m_mirror_interval;
}
void OAIMigrateRepoOptions::setMirrorInterval(const QString &mirror_interval) {
    m_mirror_interval = mirror_interval;
    m_mirror_interval_isSet = true;
}

bool OAIMigrateRepoOptions::is_mirror_interval_Set() const{
    return m_mirror_interval_isSet;
}

bool OAIMigrateRepoOptions::is_mirror_interval_Valid() const{
    return m_mirror_interval_isValid;
}

bool OAIMigrateRepoOptions::isRPrivate() const {
    return m_r_private;
}
void OAIMigrateRepoOptions::setRPrivate(const bool &r_private) {
    m_r_private = r_private;
    m_r_private_isSet = true;
}

bool OAIMigrateRepoOptions::is_r_private_Set() const{
    return m_r_private_isSet;
}

bool OAIMigrateRepoOptions::is_r_private_Valid() const{
    return m_r_private_isValid;
}

bool OAIMigrateRepoOptions::isPullRequests() const {
    return m_pull_requests;
}
void OAIMigrateRepoOptions::setPullRequests(const bool &pull_requests) {
    m_pull_requests = pull_requests;
    m_pull_requests_isSet = true;
}

bool OAIMigrateRepoOptions::is_pull_requests_Set() const{
    return m_pull_requests_isSet;
}

bool OAIMigrateRepoOptions::is_pull_requests_Valid() const{
    return m_pull_requests_isValid;
}

bool OAIMigrateRepoOptions::isReleases() const {
    return m_releases;
}
void OAIMigrateRepoOptions::setReleases(const bool &releases) {
    m_releases = releases;
    m_releases_isSet = true;
}

bool OAIMigrateRepoOptions::is_releases_Set() const{
    return m_releases_isSet;
}

bool OAIMigrateRepoOptions::is_releases_Valid() const{
    return m_releases_isValid;
}

QString OAIMigrateRepoOptions::getRepoName() const {
    return m_repo_name;
}
void OAIMigrateRepoOptions::setRepoName(const QString &repo_name) {
    m_repo_name = repo_name;
    m_repo_name_isSet = true;
}

bool OAIMigrateRepoOptions::is_repo_name_Set() const{
    return m_repo_name_isSet;
}

bool OAIMigrateRepoOptions::is_repo_name_Valid() const{
    return m_repo_name_isValid;
}

QString OAIMigrateRepoOptions::getRepoOwner() const {
    return m_repo_owner;
}
void OAIMigrateRepoOptions::setRepoOwner(const QString &repo_owner) {
    m_repo_owner = repo_owner;
    m_repo_owner_isSet = true;
}

bool OAIMigrateRepoOptions::is_repo_owner_Set() const{
    return m_repo_owner_isSet;
}

bool OAIMigrateRepoOptions::is_repo_owner_Valid() const{
    return m_repo_owner_isValid;
}

QString OAIMigrateRepoOptions::getService() const {
    return m_service;
}
void OAIMigrateRepoOptions::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIMigrateRepoOptions::is_service_Set() const{
    return m_service_isSet;
}

bool OAIMigrateRepoOptions::is_service_Valid() const{
    return m_service_isValid;
}

qint64 OAIMigrateRepoOptions::getUid() const {
    return m_uid;
}
void OAIMigrateRepoOptions::setUid(const qint64 &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIMigrateRepoOptions::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIMigrateRepoOptions::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIMigrateRepoOptions::isWiki() const {
    return m_wiki;
}
void OAIMigrateRepoOptions::setWiki(const bool &wiki) {
    m_wiki = wiki;
    m_wiki_isSet = true;
}

bool OAIMigrateRepoOptions::is_wiki_Set() const{
    return m_wiki_isSet;
}

bool OAIMigrateRepoOptions::is_wiki_Valid() const{
    return m_wiki_isValid;
}

bool OAIMigrateRepoOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clone_addr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lfs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lfs_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestones_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mirror_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mirror_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_releases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wiki_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMigrateRepoOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_clone_addr_isValid && m_repo_name_isValid && true;
}

} // namespace OpenAPI
