/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateHookOption.h
 *
 * CreateHookOption options when create a hook
 */

#ifndef OAICreateHookOption_H
#define OAICreateHookOption_H

#include <QJsonObject>

#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateHookOption : public OAIObject {
public:
    OAICreateHookOption();
    OAICreateHookOption(QString json);
    ~OAICreateHookOption() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isActive() const;
    void setActive(const bool &active);
    bool is_active_Set() const;
    bool is_active_Valid() const;

    QString getAuthorizationHeader() const;
    void setAuthorizationHeader(const QString &authorization_header);
    bool is_authorization_header_Set() const;
    bool is_authorization_header_Valid() const;

    QString getBranchFilter() const;
    void setBranchFilter(const QString &branch_filter);
    bool is_branch_filter_Set() const;
    bool is_branch_filter_Valid() const;

    QMap<QString, QString> getConfig() const;
    void setConfig(const QMap<QString, QString> &config);
    bool is_config_Set() const;
    bool is_config_Valid() const;

    QList<QString> getEvents() const;
    void setEvents(const QList<QString> &events);
    bool is_events_Set() const;
    bool is_events_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_active;
    bool m_active_isSet;
    bool m_active_isValid;

    QString m_authorization_header;
    bool m_authorization_header_isSet;
    bool m_authorization_header_isValid;

    QString m_branch_filter;
    bool m_branch_filter_isSet;
    bool m_branch_filter_isValid;

    QMap<QString, QString> m_config;
    bool m_config_isSet;
    bool m_config_isValid;

    QList<QString> m_events;
    bool m_events_isSet;
    bool m_events_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateHookOption)

#endif // OAICreateHookOption_H
