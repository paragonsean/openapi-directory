/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachment::OAIAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachment::OAIAttachment() {
    this->initializeModel();
}

OAIAttachment::~OAIAttachment() {}

void OAIAttachment::initializeModel() {

    m_browser_download_url_isSet = false;
    m_browser_download_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_download_count_isSet = false;
    m_download_count_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachment::fromJsonObject(QJsonObject json) {

    m_browser_download_url_isValid = ::OpenAPI::fromJsonValue(m_browser_download_url, json[QString("browser_download_url")]);
    m_browser_download_url_isSet = !json[QString("browser_download_url")].isNull() && m_browser_download_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_download_count_isValid = ::OpenAPI::fromJsonValue(m_download_count, json[QString("download_count")]);
    m_download_count_isSet = !json[QString("download_count")].isNull() && m_download_count_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_browser_download_url_isSet) {
        obj.insert(QString("browser_download_url"), ::OpenAPI::toJsonValue(m_browser_download_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_download_count_isSet) {
        obj.insert(QString("download_count"), ::OpenAPI::toJsonValue(m_download_count));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIAttachment::getBrowserDownloadUrl() const {
    return m_browser_download_url;
}
void OAIAttachment::setBrowserDownloadUrl(const QString &browser_download_url) {
    m_browser_download_url = browser_download_url;
    m_browser_download_url_isSet = true;
}

bool OAIAttachment::is_browser_download_url_Set() const{
    return m_browser_download_url_isSet;
}

bool OAIAttachment::is_browser_download_url_Valid() const{
    return m_browser_download_url_isValid;
}

QDateTime OAIAttachment::getCreatedAt() const {
    return m_created_at;
}
void OAIAttachment::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAttachment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAttachment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint64 OAIAttachment::getDownloadCount() const {
    return m_download_count;
}
void OAIAttachment::setDownloadCount(const qint64 &download_count) {
    m_download_count = download_count;
    m_download_count_isSet = true;
}

bool OAIAttachment::is_download_count_Set() const{
    return m_download_count_isSet;
}

bool OAIAttachment::is_download_count_Valid() const{
    return m_download_count_isValid;
}

qint64 OAIAttachment::getId() const {
    return m_id;
}
void OAIAttachment::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAttachment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAttachment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAttachment::getName() const {
    return m_name;
}
void OAIAttachment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAttachment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAttachment::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIAttachment::getSize() const {
    return m_size;
}
void OAIAttachment::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIAttachment::is_size_Set() const{
    return m_size_isSet;
}

bool OAIAttachment::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIAttachment::getUuid() const {
    return m_uuid;
}
void OAIAttachment::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIAttachment::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIAttachment::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_browser_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
