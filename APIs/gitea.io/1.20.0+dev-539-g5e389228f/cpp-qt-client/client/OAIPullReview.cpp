/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPullReview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPullReview::OAIPullReview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPullReview::OAIPullReview() {
    this->initializeModel();
}

OAIPullReview::~OAIPullReview() {}

void OAIPullReview::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_comments_count_isSet = false;
    m_comments_count_isValid = false;

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_dismissed_isSet = false;
    m_dismissed_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_official_isSet = false;
    m_official_isValid = false;

    m_pull_request_url_isSet = false;
    m_pull_request_url_isValid = false;

    m_stale_isSet = false;
    m_stale_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_submitted_at_isSet = false;
    m_submitted_at_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIPullReview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPullReview::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_comments_count_isValid = ::OpenAPI::fromJsonValue(m_comments_count, json[QString("comments_count")]);
    m_comments_count_isSet = !json[QString("comments_count")].isNull() && m_comments_count_isValid;

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("commit_id")]);
    m_commit_id_isSet = !json[QString("commit_id")].isNull() && m_commit_id_isValid;

    m_dismissed_isValid = ::OpenAPI::fromJsonValue(m_dismissed, json[QString("dismissed")]);
    m_dismissed_isSet = !json[QString("dismissed")].isNull() && m_dismissed_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_official_isValid = ::OpenAPI::fromJsonValue(m_official, json[QString("official")]);
    m_official_isSet = !json[QString("official")].isNull() && m_official_isValid;

    m_pull_request_url_isValid = ::OpenAPI::fromJsonValue(m_pull_request_url, json[QString("pull_request_url")]);
    m_pull_request_url_isSet = !json[QString("pull_request_url")].isNull() && m_pull_request_url_isValid;

    m_stale_isValid = ::OpenAPI::fromJsonValue(m_stale, json[QString("stale")]);
    m_stale_isSet = !json[QString("stale")].isNull() && m_stale_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_submitted_at_isValid = ::OpenAPI::fromJsonValue(m_submitted_at, json[QString("submitted_at")]);
    m_submitted_at_isSet = !json[QString("submitted_at")].isNull() && m_submitted_at_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIPullReview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPullReview::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_comments_count_isSet) {
        obj.insert(QString("comments_count"), ::OpenAPI::toJsonValue(m_comments_count));
    }
    if (m_commit_id_isSet) {
        obj.insert(QString("commit_id"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_dismissed_isSet) {
        obj.insert(QString("dismissed"), ::OpenAPI::toJsonValue(m_dismissed));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_official_isSet) {
        obj.insert(QString("official"), ::OpenAPI::toJsonValue(m_official));
    }
    if (m_pull_request_url_isSet) {
        obj.insert(QString("pull_request_url"), ::OpenAPI::toJsonValue(m_pull_request_url));
    }
    if (m_stale_isSet) {
        obj.insert(QString("stale"), ::OpenAPI::toJsonValue(m_stale));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_submitted_at_isSet) {
        obj.insert(QString("submitted_at"), ::OpenAPI::toJsonValue(m_submitted_at));
    }
    if (m_team.isSet()) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIPullReview::getBody() const {
    return m_body;
}
void OAIPullReview::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIPullReview::is_body_Set() const{
    return m_body_isSet;
}

bool OAIPullReview::is_body_Valid() const{
    return m_body_isValid;
}

qint64 OAIPullReview::getCommentsCount() const {
    return m_comments_count;
}
void OAIPullReview::setCommentsCount(const qint64 &comments_count) {
    m_comments_count = comments_count;
    m_comments_count_isSet = true;
}

bool OAIPullReview::is_comments_count_Set() const{
    return m_comments_count_isSet;
}

bool OAIPullReview::is_comments_count_Valid() const{
    return m_comments_count_isValid;
}

QString OAIPullReview::getCommitId() const {
    return m_commit_id;
}
void OAIPullReview::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAIPullReview::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAIPullReview::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

bool OAIPullReview::isDismissed() const {
    return m_dismissed;
}
void OAIPullReview::setDismissed(const bool &dismissed) {
    m_dismissed = dismissed;
    m_dismissed_isSet = true;
}

bool OAIPullReview::is_dismissed_Set() const{
    return m_dismissed_isSet;
}

bool OAIPullReview::is_dismissed_Valid() const{
    return m_dismissed_isValid;
}

QString OAIPullReview::getHtmlUrl() const {
    return m_html_url;
}
void OAIPullReview::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIPullReview::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIPullReview::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint64 OAIPullReview::getId() const {
    return m_id;
}
void OAIPullReview::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPullReview::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPullReview::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPullReview::isOfficial() const {
    return m_official;
}
void OAIPullReview::setOfficial(const bool &official) {
    m_official = official;
    m_official_isSet = true;
}

bool OAIPullReview::is_official_Set() const{
    return m_official_isSet;
}

bool OAIPullReview::is_official_Valid() const{
    return m_official_isValid;
}

QString OAIPullReview::getPullRequestUrl() const {
    return m_pull_request_url;
}
void OAIPullReview::setPullRequestUrl(const QString &pull_request_url) {
    m_pull_request_url = pull_request_url;
    m_pull_request_url_isSet = true;
}

bool OAIPullReview::is_pull_request_url_Set() const{
    return m_pull_request_url_isSet;
}

bool OAIPullReview::is_pull_request_url_Valid() const{
    return m_pull_request_url_isValid;
}

bool OAIPullReview::isStale() const {
    return m_stale;
}
void OAIPullReview::setStale(const bool &stale) {
    m_stale = stale;
    m_stale_isSet = true;
}

bool OAIPullReview::is_stale_Set() const{
    return m_stale_isSet;
}

bool OAIPullReview::is_stale_Valid() const{
    return m_stale_isValid;
}

QString OAIPullReview::getState() const {
    return m_state;
}
void OAIPullReview::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPullReview::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPullReview::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIPullReview::getSubmittedAt() const {
    return m_submitted_at;
}
void OAIPullReview::setSubmittedAt(const QDateTime &submitted_at) {
    m_submitted_at = submitted_at;
    m_submitted_at_isSet = true;
}

bool OAIPullReview::is_submitted_at_Set() const{
    return m_submitted_at_isSet;
}

bool OAIPullReview::is_submitted_at_Valid() const{
    return m_submitted_at_isValid;
}

OAITeam OAIPullReview::getTeam() const {
    return m_team;
}
void OAIPullReview::setTeam(const OAITeam &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPullReview::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPullReview::is_team_Valid() const{
    return m_team_isValid;
}

QDateTime OAIPullReview::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPullReview::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPullReview::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPullReview::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUser OAIPullReview::getUser() const {
    return m_user;
}
void OAIPullReview::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIPullReview::is_user_Set() const{
    return m_user_isSet;
}

bool OAIPullReview::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIPullReview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dismissed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_official_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_request_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPullReview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
