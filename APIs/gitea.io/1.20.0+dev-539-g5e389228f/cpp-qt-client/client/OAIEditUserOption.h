/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEditUserOption.h
 *
 * EditUserOption edit user options
 */

#ifndef OAIEditUserOption_H
#define OAIEditUserOption_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEditUserOption : public OAIObject {
public:
    OAIEditUserOption();
    OAIEditUserOption(QString json);
    ~OAIEditUserOption() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isActive() const;
    void setActive(const bool &active);
    bool is_active_Set() const;
    bool is_active_Valid() const;

    bool isAdmin() const;
    void setAdmin(const bool &admin);
    bool is_admin_Set() const;
    bool is_admin_Valid() const;

    bool isAllowCreateOrganization() const;
    void setAllowCreateOrganization(const bool &allow_create_organization);
    bool is_allow_create_organization_Set() const;
    bool is_allow_create_organization_Valid() const;

    bool isAllowGitHook() const;
    void setAllowGitHook(const bool &allow_git_hook);
    bool is_allow_git_hook_Set() const;
    bool is_allow_git_hook_Valid() const;

    bool isAllowImportLocal() const;
    void setAllowImportLocal(const bool &allow_import_local);
    bool is_allow_import_local_Set() const;
    bool is_allow_import_local_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QString getFullName() const;
    void setFullName(const QString &full_name);
    bool is_full_name_Set() const;
    bool is_full_name_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getLoginName() const;
    void setLoginName(const QString &login_name);
    bool is_login_name_Set() const;
    bool is_login_name_Valid() const;

    qint64 getMaxRepoCreation() const;
    void setMaxRepoCreation(const qint64 &max_repo_creation);
    bool is_max_repo_creation_Set() const;
    bool is_max_repo_creation_Valid() const;

    bool isMustChangePassword() const;
    void setMustChangePassword(const bool &must_change_password);
    bool is_must_change_password_Set() const;
    bool is_must_change_password_Valid() const;

    QString getPassword() const;
    void setPassword(const QString &password);
    bool is_password_Set() const;
    bool is_password_Valid() const;

    bool isProhibitLogin() const;
    void setProhibitLogin(const bool &prohibit_login);
    bool is_prohibit_login_Set() const;
    bool is_prohibit_login_Valid() const;

    bool isRestricted() const;
    void setRestricted(const bool &restricted);
    bool is_restricted_Set() const;
    bool is_restricted_Valid() const;

    qint64 getSourceId() const;
    void setSourceId(const qint64 &source_id);
    bool is_source_id_Set() const;
    bool is_source_id_Valid() const;

    QString getVisibility() const;
    void setVisibility(const QString &visibility);
    bool is_visibility_Set() const;
    bool is_visibility_Valid() const;

    QString getWebsite() const;
    void setWebsite(const QString &website);
    bool is_website_Set() const;
    bool is_website_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_active;
    bool m_active_isSet;
    bool m_active_isValid;

    bool m_admin;
    bool m_admin_isSet;
    bool m_admin_isValid;

    bool m_allow_create_organization;
    bool m_allow_create_organization_isSet;
    bool m_allow_create_organization_isValid;

    bool m_allow_git_hook;
    bool m_allow_git_hook_isSet;
    bool m_allow_git_hook_isValid;

    bool m_allow_import_local;
    bool m_allow_import_local_isSet;
    bool m_allow_import_local_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QString m_full_name;
    bool m_full_name_isSet;
    bool m_full_name_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_login_name;
    bool m_login_name_isSet;
    bool m_login_name_isValid;

    qint64 m_max_repo_creation;
    bool m_max_repo_creation_isSet;
    bool m_max_repo_creation_isValid;

    bool m_must_change_password;
    bool m_must_change_password_isSet;
    bool m_must_change_password_isValid;

    QString m_password;
    bool m_password_isSet;
    bool m_password_isValid;

    bool m_prohibit_login;
    bool m_prohibit_login_isSet;
    bool m_prohibit_login_isValid;

    bool m_restricted;
    bool m_restricted_isSet;
    bool m_restricted_isValid;

    qint64 m_source_id;
    bool m_source_id_isSet;
    bool m_source_id_isValid;

    QString m_visibility;
    bool m_visibility_isSet;
    bool m_visibility_isValid;

    QString m_website;
    bool m_website_isSet;
    bool m_website_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEditUserOption)

#endif // OAIEditUserOption_H
