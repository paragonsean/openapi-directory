/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEditRepoOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEditRepoOption::OAIEditRepoOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEditRepoOption::OAIEditRepoOption() {
    this->initializeModel();
}

OAIEditRepoOption::~OAIEditRepoOption() {}

void OAIEditRepoOption::initializeModel() {

    m_allow_manual_merge_isSet = false;
    m_allow_manual_merge_isValid = false;

    m_allow_merge_commits_isSet = false;
    m_allow_merge_commits_isValid = false;

    m_allow_rebase_isSet = false;
    m_allow_rebase_isValid = false;

    m_allow_rebase_explicit_isSet = false;
    m_allow_rebase_explicit_isValid = false;

    m_allow_rebase_update_isSet = false;
    m_allow_rebase_update_isValid = false;

    m_allow_squash_merge_isSet = false;
    m_allow_squash_merge_isValid = false;

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_autodetect_manual_merge_isSet = false;
    m_autodetect_manual_merge_isValid = false;

    m_default_allow_maintainer_edit_isSet = false;
    m_default_allow_maintainer_edit_isValid = false;

    m_default_branch_isSet = false;
    m_default_branch_isValid = false;

    m_default_delete_branch_after_merge_isSet = false;
    m_default_delete_branch_after_merge_isValid = false;

    m_default_merge_style_isSet = false;
    m_default_merge_style_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enable_prune_isSet = false;
    m_enable_prune_isValid = false;

    m_external_tracker_isSet = false;
    m_external_tracker_isValid = false;

    m_external_wiki_isSet = false;
    m_external_wiki_isValid = false;

    m_has_actions_isSet = false;
    m_has_actions_isValid = false;

    m_has_issues_isSet = false;
    m_has_issues_isValid = false;

    m_has_packages_isSet = false;
    m_has_packages_isValid = false;

    m_has_projects_isSet = false;
    m_has_projects_isValid = false;

    m_has_pull_requests_isSet = false;
    m_has_pull_requests_isValid = false;

    m_has_releases_isSet = false;
    m_has_releases_isValid = false;

    m_has_wiki_isSet = false;
    m_has_wiki_isValid = false;

    m_ignore_whitespace_conflicts_isSet = false;
    m_ignore_whitespace_conflicts_isValid = false;

    m_internal_tracker_isSet = false;
    m_internal_tracker_isValid = false;

    m_mirror_interval_isSet = false;
    m_mirror_interval_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_private_isSet = false;
    m_r_private_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIEditRepoOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEditRepoOption::fromJsonObject(QJsonObject json) {

    m_allow_manual_merge_isValid = ::OpenAPI::fromJsonValue(m_allow_manual_merge, json[QString("allow_manual_merge")]);
    m_allow_manual_merge_isSet = !json[QString("allow_manual_merge")].isNull() && m_allow_manual_merge_isValid;

    m_allow_merge_commits_isValid = ::OpenAPI::fromJsonValue(m_allow_merge_commits, json[QString("allow_merge_commits")]);
    m_allow_merge_commits_isSet = !json[QString("allow_merge_commits")].isNull() && m_allow_merge_commits_isValid;

    m_allow_rebase_isValid = ::OpenAPI::fromJsonValue(m_allow_rebase, json[QString("allow_rebase")]);
    m_allow_rebase_isSet = !json[QString("allow_rebase")].isNull() && m_allow_rebase_isValid;

    m_allow_rebase_explicit_isValid = ::OpenAPI::fromJsonValue(m_allow_rebase_explicit, json[QString("allow_rebase_explicit")]);
    m_allow_rebase_explicit_isSet = !json[QString("allow_rebase_explicit")].isNull() && m_allow_rebase_explicit_isValid;

    m_allow_rebase_update_isValid = ::OpenAPI::fromJsonValue(m_allow_rebase_update, json[QString("allow_rebase_update")]);
    m_allow_rebase_update_isSet = !json[QString("allow_rebase_update")].isNull() && m_allow_rebase_update_isValid;

    m_allow_squash_merge_isValid = ::OpenAPI::fromJsonValue(m_allow_squash_merge, json[QString("allow_squash_merge")]);
    m_allow_squash_merge_isSet = !json[QString("allow_squash_merge")].isNull() && m_allow_squash_merge_isValid;

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_autodetect_manual_merge_isValid = ::OpenAPI::fromJsonValue(m_autodetect_manual_merge, json[QString("autodetect_manual_merge")]);
    m_autodetect_manual_merge_isSet = !json[QString("autodetect_manual_merge")].isNull() && m_autodetect_manual_merge_isValid;

    m_default_allow_maintainer_edit_isValid = ::OpenAPI::fromJsonValue(m_default_allow_maintainer_edit, json[QString("default_allow_maintainer_edit")]);
    m_default_allow_maintainer_edit_isSet = !json[QString("default_allow_maintainer_edit")].isNull() && m_default_allow_maintainer_edit_isValid;

    m_default_branch_isValid = ::OpenAPI::fromJsonValue(m_default_branch, json[QString("default_branch")]);
    m_default_branch_isSet = !json[QString("default_branch")].isNull() && m_default_branch_isValid;

    m_default_delete_branch_after_merge_isValid = ::OpenAPI::fromJsonValue(m_default_delete_branch_after_merge, json[QString("default_delete_branch_after_merge")]);
    m_default_delete_branch_after_merge_isSet = !json[QString("default_delete_branch_after_merge")].isNull() && m_default_delete_branch_after_merge_isValid;

    m_default_merge_style_isValid = ::OpenAPI::fromJsonValue(m_default_merge_style, json[QString("default_merge_style")]);
    m_default_merge_style_isSet = !json[QString("default_merge_style")].isNull() && m_default_merge_style_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enable_prune_isValid = ::OpenAPI::fromJsonValue(m_enable_prune, json[QString("enable_prune")]);
    m_enable_prune_isSet = !json[QString("enable_prune")].isNull() && m_enable_prune_isValid;

    m_external_tracker_isValid = ::OpenAPI::fromJsonValue(m_external_tracker, json[QString("external_tracker")]);
    m_external_tracker_isSet = !json[QString("external_tracker")].isNull() && m_external_tracker_isValid;

    m_external_wiki_isValid = ::OpenAPI::fromJsonValue(m_external_wiki, json[QString("external_wiki")]);
    m_external_wiki_isSet = !json[QString("external_wiki")].isNull() && m_external_wiki_isValid;

    m_has_actions_isValid = ::OpenAPI::fromJsonValue(m_has_actions, json[QString("has_actions")]);
    m_has_actions_isSet = !json[QString("has_actions")].isNull() && m_has_actions_isValid;

    m_has_issues_isValid = ::OpenAPI::fromJsonValue(m_has_issues, json[QString("has_issues")]);
    m_has_issues_isSet = !json[QString("has_issues")].isNull() && m_has_issues_isValid;

    m_has_packages_isValid = ::OpenAPI::fromJsonValue(m_has_packages, json[QString("has_packages")]);
    m_has_packages_isSet = !json[QString("has_packages")].isNull() && m_has_packages_isValid;

    m_has_projects_isValid = ::OpenAPI::fromJsonValue(m_has_projects, json[QString("has_projects")]);
    m_has_projects_isSet = !json[QString("has_projects")].isNull() && m_has_projects_isValid;

    m_has_pull_requests_isValid = ::OpenAPI::fromJsonValue(m_has_pull_requests, json[QString("has_pull_requests")]);
    m_has_pull_requests_isSet = !json[QString("has_pull_requests")].isNull() && m_has_pull_requests_isValid;

    m_has_releases_isValid = ::OpenAPI::fromJsonValue(m_has_releases, json[QString("has_releases")]);
    m_has_releases_isSet = !json[QString("has_releases")].isNull() && m_has_releases_isValid;

    m_has_wiki_isValid = ::OpenAPI::fromJsonValue(m_has_wiki, json[QString("has_wiki")]);
    m_has_wiki_isSet = !json[QString("has_wiki")].isNull() && m_has_wiki_isValid;

    m_ignore_whitespace_conflicts_isValid = ::OpenAPI::fromJsonValue(m_ignore_whitespace_conflicts, json[QString("ignore_whitespace_conflicts")]);
    m_ignore_whitespace_conflicts_isSet = !json[QString("ignore_whitespace_conflicts")].isNull() && m_ignore_whitespace_conflicts_isValid;

    m_internal_tracker_isValid = ::OpenAPI::fromJsonValue(m_internal_tracker, json[QString("internal_tracker")]);
    m_internal_tracker_isSet = !json[QString("internal_tracker")].isNull() && m_internal_tracker_isValid;

    m_mirror_interval_isValid = ::OpenAPI::fromJsonValue(m_mirror_interval, json[QString("mirror_interval")]);
    m_mirror_interval_isSet = !json[QString("mirror_interval")].isNull() && m_mirror_interval_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_private_isValid = ::OpenAPI::fromJsonValue(m_r_private, json[QString("private")]);
    m_r_private_isSet = !json[QString("private")].isNull() && m_r_private_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIEditRepoOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEditRepoOption::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_manual_merge_isSet) {
        obj.insert(QString("allow_manual_merge"), ::OpenAPI::toJsonValue(m_allow_manual_merge));
    }
    if (m_allow_merge_commits_isSet) {
        obj.insert(QString("allow_merge_commits"), ::OpenAPI::toJsonValue(m_allow_merge_commits));
    }
    if (m_allow_rebase_isSet) {
        obj.insert(QString("allow_rebase"), ::OpenAPI::toJsonValue(m_allow_rebase));
    }
    if (m_allow_rebase_explicit_isSet) {
        obj.insert(QString("allow_rebase_explicit"), ::OpenAPI::toJsonValue(m_allow_rebase_explicit));
    }
    if (m_allow_rebase_update_isSet) {
        obj.insert(QString("allow_rebase_update"), ::OpenAPI::toJsonValue(m_allow_rebase_update));
    }
    if (m_allow_squash_merge_isSet) {
        obj.insert(QString("allow_squash_merge"), ::OpenAPI::toJsonValue(m_allow_squash_merge));
    }
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_autodetect_manual_merge_isSet) {
        obj.insert(QString("autodetect_manual_merge"), ::OpenAPI::toJsonValue(m_autodetect_manual_merge));
    }
    if (m_default_allow_maintainer_edit_isSet) {
        obj.insert(QString("default_allow_maintainer_edit"), ::OpenAPI::toJsonValue(m_default_allow_maintainer_edit));
    }
    if (m_default_branch_isSet) {
        obj.insert(QString("default_branch"), ::OpenAPI::toJsonValue(m_default_branch));
    }
    if (m_default_delete_branch_after_merge_isSet) {
        obj.insert(QString("default_delete_branch_after_merge"), ::OpenAPI::toJsonValue(m_default_delete_branch_after_merge));
    }
    if (m_default_merge_style_isSet) {
        obj.insert(QString("default_merge_style"), ::OpenAPI::toJsonValue(m_default_merge_style));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enable_prune_isSet) {
        obj.insert(QString("enable_prune"), ::OpenAPI::toJsonValue(m_enable_prune));
    }
    if (m_external_tracker.isSet()) {
        obj.insert(QString("external_tracker"), ::OpenAPI::toJsonValue(m_external_tracker));
    }
    if (m_external_wiki.isSet()) {
        obj.insert(QString("external_wiki"), ::OpenAPI::toJsonValue(m_external_wiki));
    }
    if (m_has_actions_isSet) {
        obj.insert(QString("has_actions"), ::OpenAPI::toJsonValue(m_has_actions));
    }
    if (m_has_issues_isSet) {
        obj.insert(QString("has_issues"), ::OpenAPI::toJsonValue(m_has_issues));
    }
    if (m_has_packages_isSet) {
        obj.insert(QString("has_packages"), ::OpenAPI::toJsonValue(m_has_packages));
    }
    if (m_has_projects_isSet) {
        obj.insert(QString("has_projects"), ::OpenAPI::toJsonValue(m_has_projects));
    }
    if (m_has_pull_requests_isSet) {
        obj.insert(QString("has_pull_requests"), ::OpenAPI::toJsonValue(m_has_pull_requests));
    }
    if (m_has_releases_isSet) {
        obj.insert(QString("has_releases"), ::OpenAPI::toJsonValue(m_has_releases));
    }
    if (m_has_wiki_isSet) {
        obj.insert(QString("has_wiki"), ::OpenAPI::toJsonValue(m_has_wiki));
    }
    if (m_ignore_whitespace_conflicts_isSet) {
        obj.insert(QString("ignore_whitespace_conflicts"), ::OpenAPI::toJsonValue(m_ignore_whitespace_conflicts));
    }
    if (m_internal_tracker.isSet()) {
        obj.insert(QString("internal_tracker"), ::OpenAPI::toJsonValue(m_internal_tracker));
    }
    if (m_mirror_interval_isSet) {
        obj.insert(QString("mirror_interval"), ::OpenAPI::toJsonValue(m_mirror_interval));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_private_isSet) {
        obj.insert(QString("private"), ::OpenAPI::toJsonValue(m_r_private));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

bool OAIEditRepoOption::isAllowManualMerge() const {
    return m_allow_manual_merge;
}
void OAIEditRepoOption::setAllowManualMerge(const bool &allow_manual_merge) {
    m_allow_manual_merge = allow_manual_merge;
    m_allow_manual_merge_isSet = true;
}

bool OAIEditRepoOption::is_allow_manual_merge_Set() const{
    return m_allow_manual_merge_isSet;
}

bool OAIEditRepoOption::is_allow_manual_merge_Valid() const{
    return m_allow_manual_merge_isValid;
}

bool OAIEditRepoOption::isAllowMergeCommits() const {
    return m_allow_merge_commits;
}
void OAIEditRepoOption::setAllowMergeCommits(const bool &allow_merge_commits) {
    m_allow_merge_commits = allow_merge_commits;
    m_allow_merge_commits_isSet = true;
}

bool OAIEditRepoOption::is_allow_merge_commits_Set() const{
    return m_allow_merge_commits_isSet;
}

bool OAIEditRepoOption::is_allow_merge_commits_Valid() const{
    return m_allow_merge_commits_isValid;
}

bool OAIEditRepoOption::isAllowRebase() const {
    return m_allow_rebase;
}
void OAIEditRepoOption::setAllowRebase(const bool &allow_rebase) {
    m_allow_rebase = allow_rebase;
    m_allow_rebase_isSet = true;
}

bool OAIEditRepoOption::is_allow_rebase_Set() const{
    return m_allow_rebase_isSet;
}

bool OAIEditRepoOption::is_allow_rebase_Valid() const{
    return m_allow_rebase_isValid;
}

bool OAIEditRepoOption::isAllowRebaseExplicit() const {
    return m_allow_rebase_explicit;
}
void OAIEditRepoOption::setAllowRebaseExplicit(const bool &allow_rebase_explicit) {
    m_allow_rebase_explicit = allow_rebase_explicit;
    m_allow_rebase_explicit_isSet = true;
}

bool OAIEditRepoOption::is_allow_rebase_explicit_Set() const{
    return m_allow_rebase_explicit_isSet;
}

bool OAIEditRepoOption::is_allow_rebase_explicit_Valid() const{
    return m_allow_rebase_explicit_isValid;
}

bool OAIEditRepoOption::isAllowRebaseUpdate() const {
    return m_allow_rebase_update;
}
void OAIEditRepoOption::setAllowRebaseUpdate(const bool &allow_rebase_update) {
    m_allow_rebase_update = allow_rebase_update;
    m_allow_rebase_update_isSet = true;
}

bool OAIEditRepoOption::is_allow_rebase_update_Set() const{
    return m_allow_rebase_update_isSet;
}

bool OAIEditRepoOption::is_allow_rebase_update_Valid() const{
    return m_allow_rebase_update_isValid;
}

bool OAIEditRepoOption::isAllowSquashMerge() const {
    return m_allow_squash_merge;
}
void OAIEditRepoOption::setAllowSquashMerge(const bool &allow_squash_merge) {
    m_allow_squash_merge = allow_squash_merge;
    m_allow_squash_merge_isSet = true;
}

bool OAIEditRepoOption::is_allow_squash_merge_Set() const{
    return m_allow_squash_merge_isSet;
}

bool OAIEditRepoOption::is_allow_squash_merge_Valid() const{
    return m_allow_squash_merge_isValid;
}

bool OAIEditRepoOption::isArchived() const {
    return m_archived;
}
void OAIEditRepoOption::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIEditRepoOption::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIEditRepoOption::is_archived_Valid() const{
    return m_archived_isValid;
}

bool OAIEditRepoOption::isAutodetectManualMerge() const {
    return m_autodetect_manual_merge;
}
void OAIEditRepoOption::setAutodetectManualMerge(const bool &autodetect_manual_merge) {
    m_autodetect_manual_merge = autodetect_manual_merge;
    m_autodetect_manual_merge_isSet = true;
}

bool OAIEditRepoOption::is_autodetect_manual_merge_Set() const{
    return m_autodetect_manual_merge_isSet;
}

bool OAIEditRepoOption::is_autodetect_manual_merge_Valid() const{
    return m_autodetect_manual_merge_isValid;
}

bool OAIEditRepoOption::isDefaultAllowMaintainerEdit() const {
    return m_default_allow_maintainer_edit;
}
void OAIEditRepoOption::setDefaultAllowMaintainerEdit(const bool &default_allow_maintainer_edit) {
    m_default_allow_maintainer_edit = default_allow_maintainer_edit;
    m_default_allow_maintainer_edit_isSet = true;
}

bool OAIEditRepoOption::is_default_allow_maintainer_edit_Set() const{
    return m_default_allow_maintainer_edit_isSet;
}

bool OAIEditRepoOption::is_default_allow_maintainer_edit_Valid() const{
    return m_default_allow_maintainer_edit_isValid;
}

QString OAIEditRepoOption::getDefaultBranch() const {
    return m_default_branch;
}
void OAIEditRepoOption::setDefaultBranch(const QString &default_branch) {
    m_default_branch = default_branch;
    m_default_branch_isSet = true;
}

bool OAIEditRepoOption::is_default_branch_Set() const{
    return m_default_branch_isSet;
}

bool OAIEditRepoOption::is_default_branch_Valid() const{
    return m_default_branch_isValid;
}

bool OAIEditRepoOption::isDefaultDeleteBranchAfterMerge() const {
    return m_default_delete_branch_after_merge;
}
void OAIEditRepoOption::setDefaultDeleteBranchAfterMerge(const bool &default_delete_branch_after_merge) {
    m_default_delete_branch_after_merge = default_delete_branch_after_merge;
    m_default_delete_branch_after_merge_isSet = true;
}

bool OAIEditRepoOption::is_default_delete_branch_after_merge_Set() const{
    return m_default_delete_branch_after_merge_isSet;
}

bool OAIEditRepoOption::is_default_delete_branch_after_merge_Valid() const{
    return m_default_delete_branch_after_merge_isValid;
}

QString OAIEditRepoOption::getDefaultMergeStyle() const {
    return m_default_merge_style;
}
void OAIEditRepoOption::setDefaultMergeStyle(const QString &default_merge_style) {
    m_default_merge_style = default_merge_style;
    m_default_merge_style_isSet = true;
}

bool OAIEditRepoOption::is_default_merge_style_Set() const{
    return m_default_merge_style_isSet;
}

bool OAIEditRepoOption::is_default_merge_style_Valid() const{
    return m_default_merge_style_isValid;
}

QString OAIEditRepoOption::getDescription() const {
    return m_description;
}
void OAIEditRepoOption::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEditRepoOption::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEditRepoOption::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIEditRepoOption::isEnablePrune() const {
    return m_enable_prune;
}
void OAIEditRepoOption::setEnablePrune(const bool &enable_prune) {
    m_enable_prune = enable_prune;
    m_enable_prune_isSet = true;
}

bool OAIEditRepoOption::is_enable_prune_Set() const{
    return m_enable_prune_isSet;
}

bool OAIEditRepoOption::is_enable_prune_Valid() const{
    return m_enable_prune_isValid;
}

OAIExternalTracker OAIEditRepoOption::getExternalTracker() const {
    return m_external_tracker;
}
void OAIEditRepoOption::setExternalTracker(const OAIExternalTracker &external_tracker) {
    m_external_tracker = external_tracker;
    m_external_tracker_isSet = true;
}

bool OAIEditRepoOption::is_external_tracker_Set() const{
    return m_external_tracker_isSet;
}

bool OAIEditRepoOption::is_external_tracker_Valid() const{
    return m_external_tracker_isValid;
}

OAIExternalWiki OAIEditRepoOption::getExternalWiki() const {
    return m_external_wiki;
}
void OAIEditRepoOption::setExternalWiki(const OAIExternalWiki &external_wiki) {
    m_external_wiki = external_wiki;
    m_external_wiki_isSet = true;
}

bool OAIEditRepoOption::is_external_wiki_Set() const{
    return m_external_wiki_isSet;
}

bool OAIEditRepoOption::is_external_wiki_Valid() const{
    return m_external_wiki_isValid;
}

bool OAIEditRepoOption::isHasActions() const {
    return m_has_actions;
}
void OAIEditRepoOption::setHasActions(const bool &has_actions) {
    m_has_actions = has_actions;
    m_has_actions_isSet = true;
}

bool OAIEditRepoOption::is_has_actions_Set() const{
    return m_has_actions_isSet;
}

bool OAIEditRepoOption::is_has_actions_Valid() const{
    return m_has_actions_isValid;
}

bool OAIEditRepoOption::isHasIssues() const {
    return m_has_issues;
}
void OAIEditRepoOption::setHasIssues(const bool &has_issues) {
    m_has_issues = has_issues;
    m_has_issues_isSet = true;
}

bool OAIEditRepoOption::is_has_issues_Set() const{
    return m_has_issues_isSet;
}

bool OAIEditRepoOption::is_has_issues_Valid() const{
    return m_has_issues_isValid;
}

bool OAIEditRepoOption::isHasPackages() const {
    return m_has_packages;
}
void OAIEditRepoOption::setHasPackages(const bool &has_packages) {
    m_has_packages = has_packages;
    m_has_packages_isSet = true;
}

bool OAIEditRepoOption::is_has_packages_Set() const{
    return m_has_packages_isSet;
}

bool OAIEditRepoOption::is_has_packages_Valid() const{
    return m_has_packages_isValid;
}

bool OAIEditRepoOption::isHasProjects() const {
    return m_has_projects;
}
void OAIEditRepoOption::setHasProjects(const bool &has_projects) {
    m_has_projects = has_projects;
    m_has_projects_isSet = true;
}

bool OAIEditRepoOption::is_has_projects_Set() const{
    return m_has_projects_isSet;
}

bool OAIEditRepoOption::is_has_projects_Valid() const{
    return m_has_projects_isValid;
}

bool OAIEditRepoOption::isHasPullRequests() const {
    return m_has_pull_requests;
}
void OAIEditRepoOption::setHasPullRequests(const bool &has_pull_requests) {
    m_has_pull_requests = has_pull_requests;
    m_has_pull_requests_isSet = true;
}

bool OAIEditRepoOption::is_has_pull_requests_Set() const{
    return m_has_pull_requests_isSet;
}

bool OAIEditRepoOption::is_has_pull_requests_Valid() const{
    return m_has_pull_requests_isValid;
}

bool OAIEditRepoOption::isHasReleases() const {
    return m_has_releases;
}
void OAIEditRepoOption::setHasReleases(const bool &has_releases) {
    m_has_releases = has_releases;
    m_has_releases_isSet = true;
}

bool OAIEditRepoOption::is_has_releases_Set() const{
    return m_has_releases_isSet;
}

bool OAIEditRepoOption::is_has_releases_Valid() const{
    return m_has_releases_isValid;
}

bool OAIEditRepoOption::isHasWiki() const {
    return m_has_wiki;
}
void OAIEditRepoOption::setHasWiki(const bool &has_wiki) {
    m_has_wiki = has_wiki;
    m_has_wiki_isSet = true;
}

bool OAIEditRepoOption::is_has_wiki_Set() const{
    return m_has_wiki_isSet;
}

bool OAIEditRepoOption::is_has_wiki_Valid() const{
    return m_has_wiki_isValid;
}

bool OAIEditRepoOption::isIgnoreWhitespaceConflicts() const {
    return m_ignore_whitespace_conflicts;
}
void OAIEditRepoOption::setIgnoreWhitespaceConflicts(const bool &ignore_whitespace_conflicts) {
    m_ignore_whitespace_conflicts = ignore_whitespace_conflicts;
    m_ignore_whitespace_conflicts_isSet = true;
}

bool OAIEditRepoOption::is_ignore_whitespace_conflicts_Set() const{
    return m_ignore_whitespace_conflicts_isSet;
}

bool OAIEditRepoOption::is_ignore_whitespace_conflicts_Valid() const{
    return m_ignore_whitespace_conflicts_isValid;
}

OAIInternalTracker OAIEditRepoOption::getInternalTracker() const {
    return m_internal_tracker;
}
void OAIEditRepoOption::setInternalTracker(const OAIInternalTracker &internal_tracker) {
    m_internal_tracker = internal_tracker;
    m_internal_tracker_isSet = true;
}

bool OAIEditRepoOption::is_internal_tracker_Set() const{
    return m_internal_tracker_isSet;
}

bool OAIEditRepoOption::is_internal_tracker_Valid() const{
    return m_internal_tracker_isValid;
}

QString OAIEditRepoOption::getMirrorInterval() const {
    return m_mirror_interval;
}
void OAIEditRepoOption::setMirrorInterval(const QString &mirror_interval) {
    m_mirror_interval = mirror_interval;
    m_mirror_interval_isSet = true;
}

bool OAIEditRepoOption::is_mirror_interval_Set() const{
    return m_mirror_interval_isSet;
}

bool OAIEditRepoOption::is_mirror_interval_Valid() const{
    return m_mirror_interval_isValid;
}

QString OAIEditRepoOption::getName() const {
    return m_name;
}
void OAIEditRepoOption::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEditRepoOption::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEditRepoOption::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIEditRepoOption::isRPrivate() const {
    return m_r_private;
}
void OAIEditRepoOption::setRPrivate(const bool &r_private) {
    m_r_private = r_private;
    m_r_private_isSet = true;
}

bool OAIEditRepoOption::is_r_private_Set() const{
    return m_r_private_isSet;
}

bool OAIEditRepoOption::is_r_private_Valid() const{
    return m_r_private_isValid;
}

bool OAIEditRepoOption::isRTemplate() const {
    return m_r_template;
}
void OAIEditRepoOption::setRTemplate(const bool &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIEditRepoOption::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIEditRepoOption::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAIEditRepoOption::getWebsite() const {
    return m_website;
}
void OAIEditRepoOption::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIEditRepoOption::is_website_Set() const{
    return m_website_isSet;
}

bool OAIEditRepoOption::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIEditRepoOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_manual_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_merge_commits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_rebase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_rebase_explicit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_rebase_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_squash_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_autodetect_manual_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_allow_maintainer_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_delete_branch_after_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_merge_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_prune_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_tracker.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_wiki.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_issues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_packages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_pull_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_releases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_wiki_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_whitespace_conflicts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_tracker.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mirror_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEditRepoOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
