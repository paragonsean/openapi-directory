/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInternalTracker.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInternalTracker::OAIInternalTracker(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInternalTracker::OAIInternalTracker() {
    this->initializeModel();
}

OAIInternalTracker::~OAIInternalTracker() {}

void OAIInternalTracker::initializeModel() {

    m_allow_only_contributors_to_track_time_isSet = false;
    m_allow_only_contributors_to_track_time_isValid = false;

    m_enable_issue_dependencies_isSet = false;
    m_enable_issue_dependencies_isValid = false;

    m_enable_time_tracker_isSet = false;
    m_enable_time_tracker_isValid = false;
}

void OAIInternalTracker::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInternalTracker::fromJsonObject(QJsonObject json) {

    m_allow_only_contributors_to_track_time_isValid = ::OpenAPI::fromJsonValue(m_allow_only_contributors_to_track_time, json[QString("allow_only_contributors_to_track_time")]);
    m_allow_only_contributors_to_track_time_isSet = !json[QString("allow_only_contributors_to_track_time")].isNull() && m_allow_only_contributors_to_track_time_isValid;

    m_enable_issue_dependencies_isValid = ::OpenAPI::fromJsonValue(m_enable_issue_dependencies, json[QString("enable_issue_dependencies")]);
    m_enable_issue_dependencies_isSet = !json[QString("enable_issue_dependencies")].isNull() && m_enable_issue_dependencies_isValid;

    m_enable_time_tracker_isValid = ::OpenAPI::fromJsonValue(m_enable_time_tracker, json[QString("enable_time_tracker")]);
    m_enable_time_tracker_isSet = !json[QString("enable_time_tracker")].isNull() && m_enable_time_tracker_isValid;
}

QString OAIInternalTracker::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInternalTracker::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_only_contributors_to_track_time_isSet) {
        obj.insert(QString("allow_only_contributors_to_track_time"), ::OpenAPI::toJsonValue(m_allow_only_contributors_to_track_time));
    }
    if (m_enable_issue_dependencies_isSet) {
        obj.insert(QString("enable_issue_dependencies"), ::OpenAPI::toJsonValue(m_enable_issue_dependencies));
    }
    if (m_enable_time_tracker_isSet) {
        obj.insert(QString("enable_time_tracker"), ::OpenAPI::toJsonValue(m_enable_time_tracker));
    }
    return obj;
}

bool OAIInternalTracker::isAllowOnlyContributorsToTrackTime() const {
    return m_allow_only_contributors_to_track_time;
}
void OAIInternalTracker::setAllowOnlyContributorsToTrackTime(const bool &allow_only_contributors_to_track_time) {
    m_allow_only_contributors_to_track_time = allow_only_contributors_to_track_time;
    m_allow_only_contributors_to_track_time_isSet = true;
}

bool OAIInternalTracker::is_allow_only_contributors_to_track_time_Set() const{
    return m_allow_only_contributors_to_track_time_isSet;
}

bool OAIInternalTracker::is_allow_only_contributors_to_track_time_Valid() const{
    return m_allow_only_contributors_to_track_time_isValid;
}

bool OAIInternalTracker::isEnableIssueDependencies() const {
    return m_enable_issue_dependencies;
}
void OAIInternalTracker::setEnableIssueDependencies(const bool &enable_issue_dependencies) {
    m_enable_issue_dependencies = enable_issue_dependencies;
    m_enable_issue_dependencies_isSet = true;
}

bool OAIInternalTracker::is_enable_issue_dependencies_Set() const{
    return m_enable_issue_dependencies_isSet;
}

bool OAIInternalTracker::is_enable_issue_dependencies_Valid() const{
    return m_enable_issue_dependencies_isValid;
}

bool OAIInternalTracker::isEnableTimeTracker() const {
    return m_enable_time_tracker;
}
void OAIInternalTracker::setEnableTimeTracker(const bool &enable_time_tracker) {
    m_enable_time_tracker = enable_time_tracker;
    m_enable_time_tracker_isSet = true;
}

bool OAIInternalTracker::is_enable_time_tracker_Set() const{
    return m_enable_time_tracker_isSet;
}

bool OAIInternalTracker::is_enable_time_tracker_Valid() const{
    return m_enable_time_tracker_isValid;
}

bool OAIInternalTracker::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_only_contributors_to_track_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_issue_dependencies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_time_tracker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInternalTracker::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
