/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPackageApi_H
#define OAI_OAIPackageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPackage.h"
#include "OAIPackageFile.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPackageApi : public QObject {
    Q_OBJECT

public:
    OAIPackageApi(const int timeOut = 0);
    ~OAIPackageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  type QString [required]
    * @param[in]  name QString [required]
    * @param[in]  version QString [required]
    */
    virtual void deletePackage(const QString &owner, const QString &type, const QString &name, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  type QString [required]
    * @param[in]  name QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getPackage(const QString &owner, const QString &type, const QString &name, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  type QString [required]
    * @param[in]  name QString [required]
    * @param[in]  version QString [required]
    */
    virtual void listPackageFiles(const QString &owner, const QString &type, const QString &name, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void listPackages(const QString &owner, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deletePackageCallback(OAIHttpRequestWorker *worker);
    void getPackageCallback(OAIHttpRequestWorker *worker);
    void listPackageFilesCallback(OAIHttpRequestWorker *worker);
    void listPackagesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deletePackageSignal();
    void getPackageSignal(OAIPackage summary);
    void listPackageFilesSignal(QList<OAIPackageFile> summary);
    void listPackagesSignal(QList<OAIPackage> summary);


    void deletePackageSignalFull(OAIHttpRequestWorker *worker);
    void getPackageSignalFull(OAIHttpRequestWorker *worker, OAIPackage summary);
    void listPackageFilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPackageFile> summary);
    void listPackagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPackage> summary);

    Q_DECL_DEPRECATED_X("Use deletePackageSignalError() instead")
    void deletePackageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePackageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPackageSignalError() instead")
    void getPackageSignalE(OAIPackage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPackageSignalError(OAIPackage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPackageFilesSignalError() instead")
    void listPackageFilesSignalE(QList<OAIPackageFile> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPackageFilesSignalError(QList<OAIPackageFile> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPackagesSignalError() instead")
    void listPackagesSignalE(QList<OAIPackage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPackagesSignalError(QList<OAIPackage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deletePackageSignalErrorFull() instead")
    void deletePackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPackageSignalErrorFull() instead")
    void getPackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPackageFilesSignalErrorFull() instead")
    void listPackageFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPackageFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPackagesSignalErrorFull() instead")
    void listPackagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPackagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
