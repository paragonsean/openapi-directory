/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangedFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangedFile::OAIChangedFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangedFile::OAIChangedFile() {
    this->initializeModel();
}

OAIChangedFile::~OAIChangedFile() {}

void OAIChangedFile::initializeModel() {

    m_additions_isSet = false;
    m_additions_isValid = false;

    m_changes_isSet = false;
    m_changes_isValid = false;

    m_contents_url_isSet = false;
    m_contents_url_isValid = false;

    m_deletions_isSet = false;
    m_deletions_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_previous_filename_isSet = false;
    m_previous_filename_isValid = false;

    m_raw_url_isSet = false;
    m_raw_url_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIChangedFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangedFile::fromJsonObject(QJsonObject json) {

    m_additions_isValid = ::OpenAPI::fromJsonValue(m_additions, json[QString("additions")]);
    m_additions_isSet = !json[QString("additions")].isNull() && m_additions_isValid;

    m_changes_isValid = ::OpenAPI::fromJsonValue(m_changes, json[QString("changes")]);
    m_changes_isSet = !json[QString("changes")].isNull() && m_changes_isValid;

    m_contents_url_isValid = ::OpenAPI::fromJsonValue(m_contents_url, json[QString("contents_url")]);
    m_contents_url_isSet = !json[QString("contents_url")].isNull() && m_contents_url_isValid;

    m_deletions_isValid = ::OpenAPI::fromJsonValue(m_deletions, json[QString("deletions")]);
    m_deletions_isSet = !json[QString("deletions")].isNull() && m_deletions_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_previous_filename_isValid = ::OpenAPI::fromJsonValue(m_previous_filename, json[QString("previous_filename")]);
    m_previous_filename_isSet = !json[QString("previous_filename")].isNull() && m_previous_filename_isValid;

    m_raw_url_isValid = ::OpenAPI::fromJsonValue(m_raw_url, json[QString("raw_url")]);
    m_raw_url_isSet = !json[QString("raw_url")].isNull() && m_raw_url_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIChangedFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangedFile::asJsonObject() const {
    QJsonObject obj;
    if (m_additions_isSet) {
        obj.insert(QString("additions"), ::OpenAPI::toJsonValue(m_additions));
    }
    if (m_changes_isSet) {
        obj.insert(QString("changes"), ::OpenAPI::toJsonValue(m_changes));
    }
    if (m_contents_url_isSet) {
        obj.insert(QString("contents_url"), ::OpenAPI::toJsonValue(m_contents_url));
    }
    if (m_deletions_isSet) {
        obj.insert(QString("deletions"), ::OpenAPI::toJsonValue(m_deletions));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_previous_filename_isSet) {
        obj.insert(QString("previous_filename"), ::OpenAPI::toJsonValue(m_previous_filename));
    }
    if (m_raw_url_isSet) {
        obj.insert(QString("raw_url"), ::OpenAPI::toJsonValue(m_raw_url));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint64 OAIChangedFile::getAdditions() const {
    return m_additions;
}
void OAIChangedFile::setAdditions(const qint64 &additions) {
    m_additions = additions;
    m_additions_isSet = true;
}

bool OAIChangedFile::is_additions_Set() const{
    return m_additions_isSet;
}

bool OAIChangedFile::is_additions_Valid() const{
    return m_additions_isValid;
}

qint64 OAIChangedFile::getChanges() const {
    return m_changes;
}
void OAIChangedFile::setChanges(const qint64 &changes) {
    m_changes = changes;
    m_changes_isSet = true;
}

bool OAIChangedFile::is_changes_Set() const{
    return m_changes_isSet;
}

bool OAIChangedFile::is_changes_Valid() const{
    return m_changes_isValid;
}

QString OAIChangedFile::getContentsUrl() const {
    return m_contents_url;
}
void OAIChangedFile::setContentsUrl(const QString &contents_url) {
    m_contents_url = contents_url;
    m_contents_url_isSet = true;
}

bool OAIChangedFile::is_contents_url_Set() const{
    return m_contents_url_isSet;
}

bool OAIChangedFile::is_contents_url_Valid() const{
    return m_contents_url_isValid;
}

qint64 OAIChangedFile::getDeletions() const {
    return m_deletions;
}
void OAIChangedFile::setDeletions(const qint64 &deletions) {
    m_deletions = deletions;
    m_deletions_isSet = true;
}

bool OAIChangedFile::is_deletions_Set() const{
    return m_deletions_isSet;
}

bool OAIChangedFile::is_deletions_Valid() const{
    return m_deletions_isValid;
}

QString OAIChangedFile::getFilename() const {
    return m_filename;
}
void OAIChangedFile::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIChangedFile::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIChangedFile::is_filename_Valid() const{
    return m_filename_isValid;
}

QString OAIChangedFile::getHtmlUrl() const {
    return m_html_url;
}
void OAIChangedFile::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIChangedFile::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIChangedFile::is_html_url_Valid() const{
    return m_html_url_isValid;
}

QString OAIChangedFile::getPreviousFilename() const {
    return m_previous_filename;
}
void OAIChangedFile::setPreviousFilename(const QString &previous_filename) {
    m_previous_filename = previous_filename;
    m_previous_filename_isSet = true;
}

bool OAIChangedFile::is_previous_filename_Set() const{
    return m_previous_filename_isSet;
}

bool OAIChangedFile::is_previous_filename_Valid() const{
    return m_previous_filename_isValid;
}

QString OAIChangedFile::getRawUrl() const {
    return m_raw_url;
}
void OAIChangedFile::setRawUrl(const QString &raw_url) {
    m_raw_url = raw_url;
    m_raw_url_isSet = true;
}

bool OAIChangedFile::is_raw_url_Set() const{
    return m_raw_url_isSet;
}

bool OAIChangedFile::is_raw_url_Valid() const{
    return m_raw_url_isValid;
}

QString OAIChangedFile::getStatus() const {
    return m_status;
}
void OAIChangedFile::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIChangedFile::is_status_Set() const{
    return m_status_isSet;
}

bool OAIChangedFile::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIChangedFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contents_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangedFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
