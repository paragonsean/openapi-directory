/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBranchProtection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBranchProtection::OAIBranchProtection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBranchProtection::OAIBranchProtection() {
    this->initializeModel();
}

OAIBranchProtection::~OAIBranchProtection() {}

void OAIBranchProtection::initializeModel() {

    m_approvals_whitelist_teams_isSet = false;
    m_approvals_whitelist_teams_isValid = false;

    m_approvals_whitelist_username_isSet = false;
    m_approvals_whitelist_username_isValid = false;

    m_block_on_official_review_requests_isSet = false;
    m_block_on_official_review_requests_isValid = false;

    m_block_on_outdated_branch_isSet = false;
    m_block_on_outdated_branch_isValid = false;

    m_block_on_rejected_reviews_isSet = false;
    m_block_on_rejected_reviews_isValid = false;

    m_branch_name_isSet = false;
    m_branch_name_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_dismiss_stale_approvals_isSet = false;
    m_dismiss_stale_approvals_isValid = false;

    m_enable_approvals_whitelist_isSet = false;
    m_enable_approvals_whitelist_isValid = false;

    m_enable_merge_whitelist_isSet = false;
    m_enable_merge_whitelist_isValid = false;

    m_enable_push_isSet = false;
    m_enable_push_isValid = false;

    m_enable_push_whitelist_isSet = false;
    m_enable_push_whitelist_isValid = false;

    m_enable_status_check_isSet = false;
    m_enable_status_check_isValid = false;

    m_merge_whitelist_teams_isSet = false;
    m_merge_whitelist_teams_isValid = false;

    m_merge_whitelist_usernames_isSet = false;
    m_merge_whitelist_usernames_isValid = false;

    m_protected_file_patterns_isSet = false;
    m_protected_file_patterns_isValid = false;

    m_push_whitelist_deploy_keys_isSet = false;
    m_push_whitelist_deploy_keys_isValid = false;

    m_push_whitelist_teams_isSet = false;
    m_push_whitelist_teams_isValid = false;

    m_push_whitelist_usernames_isSet = false;
    m_push_whitelist_usernames_isValid = false;

    m_require_signed_commits_isSet = false;
    m_require_signed_commits_isValid = false;

    m_required_approvals_isSet = false;
    m_required_approvals_isValid = false;

    m_rule_name_isSet = false;
    m_rule_name_isValid = false;

    m_status_check_contexts_isSet = false;
    m_status_check_contexts_isValid = false;

    m_unprotected_file_patterns_isSet = false;
    m_unprotected_file_patterns_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIBranchProtection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBranchProtection::fromJsonObject(QJsonObject json) {

    m_approvals_whitelist_teams_isValid = ::OpenAPI::fromJsonValue(m_approvals_whitelist_teams, json[QString("approvals_whitelist_teams")]);
    m_approvals_whitelist_teams_isSet = !json[QString("approvals_whitelist_teams")].isNull() && m_approvals_whitelist_teams_isValid;

    m_approvals_whitelist_username_isValid = ::OpenAPI::fromJsonValue(m_approvals_whitelist_username, json[QString("approvals_whitelist_username")]);
    m_approvals_whitelist_username_isSet = !json[QString("approvals_whitelist_username")].isNull() && m_approvals_whitelist_username_isValid;

    m_block_on_official_review_requests_isValid = ::OpenAPI::fromJsonValue(m_block_on_official_review_requests, json[QString("block_on_official_review_requests")]);
    m_block_on_official_review_requests_isSet = !json[QString("block_on_official_review_requests")].isNull() && m_block_on_official_review_requests_isValid;

    m_block_on_outdated_branch_isValid = ::OpenAPI::fromJsonValue(m_block_on_outdated_branch, json[QString("block_on_outdated_branch")]);
    m_block_on_outdated_branch_isSet = !json[QString("block_on_outdated_branch")].isNull() && m_block_on_outdated_branch_isValid;

    m_block_on_rejected_reviews_isValid = ::OpenAPI::fromJsonValue(m_block_on_rejected_reviews, json[QString("block_on_rejected_reviews")]);
    m_block_on_rejected_reviews_isSet = !json[QString("block_on_rejected_reviews")].isNull() && m_block_on_rejected_reviews_isValid;

    m_branch_name_isValid = ::OpenAPI::fromJsonValue(m_branch_name, json[QString("branch_name")]);
    m_branch_name_isSet = !json[QString("branch_name")].isNull() && m_branch_name_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_dismiss_stale_approvals_isValid = ::OpenAPI::fromJsonValue(m_dismiss_stale_approvals, json[QString("dismiss_stale_approvals")]);
    m_dismiss_stale_approvals_isSet = !json[QString("dismiss_stale_approvals")].isNull() && m_dismiss_stale_approvals_isValid;

    m_enable_approvals_whitelist_isValid = ::OpenAPI::fromJsonValue(m_enable_approvals_whitelist, json[QString("enable_approvals_whitelist")]);
    m_enable_approvals_whitelist_isSet = !json[QString("enable_approvals_whitelist")].isNull() && m_enable_approvals_whitelist_isValid;

    m_enable_merge_whitelist_isValid = ::OpenAPI::fromJsonValue(m_enable_merge_whitelist, json[QString("enable_merge_whitelist")]);
    m_enable_merge_whitelist_isSet = !json[QString("enable_merge_whitelist")].isNull() && m_enable_merge_whitelist_isValid;

    m_enable_push_isValid = ::OpenAPI::fromJsonValue(m_enable_push, json[QString("enable_push")]);
    m_enable_push_isSet = !json[QString("enable_push")].isNull() && m_enable_push_isValid;

    m_enable_push_whitelist_isValid = ::OpenAPI::fromJsonValue(m_enable_push_whitelist, json[QString("enable_push_whitelist")]);
    m_enable_push_whitelist_isSet = !json[QString("enable_push_whitelist")].isNull() && m_enable_push_whitelist_isValid;

    m_enable_status_check_isValid = ::OpenAPI::fromJsonValue(m_enable_status_check, json[QString("enable_status_check")]);
    m_enable_status_check_isSet = !json[QString("enable_status_check")].isNull() && m_enable_status_check_isValid;

    m_merge_whitelist_teams_isValid = ::OpenAPI::fromJsonValue(m_merge_whitelist_teams, json[QString("merge_whitelist_teams")]);
    m_merge_whitelist_teams_isSet = !json[QString("merge_whitelist_teams")].isNull() && m_merge_whitelist_teams_isValid;

    m_merge_whitelist_usernames_isValid = ::OpenAPI::fromJsonValue(m_merge_whitelist_usernames, json[QString("merge_whitelist_usernames")]);
    m_merge_whitelist_usernames_isSet = !json[QString("merge_whitelist_usernames")].isNull() && m_merge_whitelist_usernames_isValid;

    m_protected_file_patterns_isValid = ::OpenAPI::fromJsonValue(m_protected_file_patterns, json[QString("protected_file_patterns")]);
    m_protected_file_patterns_isSet = !json[QString("protected_file_patterns")].isNull() && m_protected_file_patterns_isValid;

    m_push_whitelist_deploy_keys_isValid = ::OpenAPI::fromJsonValue(m_push_whitelist_deploy_keys, json[QString("push_whitelist_deploy_keys")]);
    m_push_whitelist_deploy_keys_isSet = !json[QString("push_whitelist_deploy_keys")].isNull() && m_push_whitelist_deploy_keys_isValid;

    m_push_whitelist_teams_isValid = ::OpenAPI::fromJsonValue(m_push_whitelist_teams, json[QString("push_whitelist_teams")]);
    m_push_whitelist_teams_isSet = !json[QString("push_whitelist_teams")].isNull() && m_push_whitelist_teams_isValid;

    m_push_whitelist_usernames_isValid = ::OpenAPI::fromJsonValue(m_push_whitelist_usernames, json[QString("push_whitelist_usernames")]);
    m_push_whitelist_usernames_isSet = !json[QString("push_whitelist_usernames")].isNull() && m_push_whitelist_usernames_isValid;

    m_require_signed_commits_isValid = ::OpenAPI::fromJsonValue(m_require_signed_commits, json[QString("require_signed_commits")]);
    m_require_signed_commits_isSet = !json[QString("require_signed_commits")].isNull() && m_require_signed_commits_isValid;

    m_required_approvals_isValid = ::OpenAPI::fromJsonValue(m_required_approvals, json[QString("required_approvals")]);
    m_required_approvals_isSet = !json[QString("required_approvals")].isNull() && m_required_approvals_isValid;

    m_rule_name_isValid = ::OpenAPI::fromJsonValue(m_rule_name, json[QString("rule_name")]);
    m_rule_name_isSet = !json[QString("rule_name")].isNull() && m_rule_name_isValid;

    m_status_check_contexts_isValid = ::OpenAPI::fromJsonValue(m_status_check_contexts, json[QString("status_check_contexts")]);
    m_status_check_contexts_isSet = !json[QString("status_check_contexts")].isNull() && m_status_check_contexts_isValid;

    m_unprotected_file_patterns_isValid = ::OpenAPI::fromJsonValue(m_unprotected_file_patterns, json[QString("unprotected_file_patterns")]);
    m_unprotected_file_patterns_isSet = !json[QString("unprotected_file_patterns")].isNull() && m_unprotected_file_patterns_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIBranchProtection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBranchProtection::asJsonObject() const {
    QJsonObject obj;
    if (m_approvals_whitelist_teams.size() > 0) {
        obj.insert(QString("approvals_whitelist_teams"), ::OpenAPI::toJsonValue(m_approvals_whitelist_teams));
    }
    if (m_approvals_whitelist_username.size() > 0) {
        obj.insert(QString("approvals_whitelist_username"), ::OpenAPI::toJsonValue(m_approvals_whitelist_username));
    }
    if (m_block_on_official_review_requests_isSet) {
        obj.insert(QString("block_on_official_review_requests"), ::OpenAPI::toJsonValue(m_block_on_official_review_requests));
    }
    if (m_block_on_outdated_branch_isSet) {
        obj.insert(QString("block_on_outdated_branch"), ::OpenAPI::toJsonValue(m_block_on_outdated_branch));
    }
    if (m_block_on_rejected_reviews_isSet) {
        obj.insert(QString("block_on_rejected_reviews"), ::OpenAPI::toJsonValue(m_block_on_rejected_reviews));
    }
    if (m_branch_name_isSet) {
        obj.insert(QString("branch_name"), ::OpenAPI::toJsonValue(m_branch_name));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_dismiss_stale_approvals_isSet) {
        obj.insert(QString("dismiss_stale_approvals"), ::OpenAPI::toJsonValue(m_dismiss_stale_approvals));
    }
    if (m_enable_approvals_whitelist_isSet) {
        obj.insert(QString("enable_approvals_whitelist"), ::OpenAPI::toJsonValue(m_enable_approvals_whitelist));
    }
    if (m_enable_merge_whitelist_isSet) {
        obj.insert(QString("enable_merge_whitelist"), ::OpenAPI::toJsonValue(m_enable_merge_whitelist));
    }
    if (m_enable_push_isSet) {
        obj.insert(QString("enable_push"), ::OpenAPI::toJsonValue(m_enable_push));
    }
    if (m_enable_push_whitelist_isSet) {
        obj.insert(QString("enable_push_whitelist"), ::OpenAPI::toJsonValue(m_enable_push_whitelist));
    }
    if (m_enable_status_check_isSet) {
        obj.insert(QString("enable_status_check"), ::OpenAPI::toJsonValue(m_enable_status_check));
    }
    if (m_merge_whitelist_teams.size() > 0) {
        obj.insert(QString("merge_whitelist_teams"), ::OpenAPI::toJsonValue(m_merge_whitelist_teams));
    }
    if (m_merge_whitelist_usernames.size() > 0) {
        obj.insert(QString("merge_whitelist_usernames"), ::OpenAPI::toJsonValue(m_merge_whitelist_usernames));
    }
    if (m_protected_file_patterns_isSet) {
        obj.insert(QString("protected_file_patterns"), ::OpenAPI::toJsonValue(m_protected_file_patterns));
    }
    if (m_push_whitelist_deploy_keys_isSet) {
        obj.insert(QString("push_whitelist_deploy_keys"), ::OpenAPI::toJsonValue(m_push_whitelist_deploy_keys));
    }
    if (m_push_whitelist_teams.size() > 0) {
        obj.insert(QString("push_whitelist_teams"), ::OpenAPI::toJsonValue(m_push_whitelist_teams));
    }
    if (m_push_whitelist_usernames.size() > 0) {
        obj.insert(QString("push_whitelist_usernames"), ::OpenAPI::toJsonValue(m_push_whitelist_usernames));
    }
    if (m_require_signed_commits_isSet) {
        obj.insert(QString("require_signed_commits"), ::OpenAPI::toJsonValue(m_require_signed_commits));
    }
    if (m_required_approvals_isSet) {
        obj.insert(QString("required_approvals"), ::OpenAPI::toJsonValue(m_required_approvals));
    }
    if (m_rule_name_isSet) {
        obj.insert(QString("rule_name"), ::OpenAPI::toJsonValue(m_rule_name));
    }
    if (m_status_check_contexts.size() > 0) {
        obj.insert(QString("status_check_contexts"), ::OpenAPI::toJsonValue(m_status_check_contexts));
    }
    if (m_unprotected_file_patterns_isSet) {
        obj.insert(QString("unprotected_file_patterns"), ::OpenAPI::toJsonValue(m_unprotected_file_patterns));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QList<QString> OAIBranchProtection::getApprovalsWhitelistTeams() const {
    return m_approvals_whitelist_teams;
}
void OAIBranchProtection::setApprovalsWhitelistTeams(const QList<QString> &approvals_whitelist_teams) {
    m_approvals_whitelist_teams = approvals_whitelist_teams;
    m_approvals_whitelist_teams_isSet = true;
}

bool OAIBranchProtection::is_approvals_whitelist_teams_Set() const{
    return m_approvals_whitelist_teams_isSet;
}

bool OAIBranchProtection::is_approvals_whitelist_teams_Valid() const{
    return m_approvals_whitelist_teams_isValid;
}

QList<QString> OAIBranchProtection::getApprovalsWhitelistUsername() const {
    return m_approvals_whitelist_username;
}
void OAIBranchProtection::setApprovalsWhitelistUsername(const QList<QString> &approvals_whitelist_username) {
    m_approvals_whitelist_username = approvals_whitelist_username;
    m_approvals_whitelist_username_isSet = true;
}

bool OAIBranchProtection::is_approvals_whitelist_username_Set() const{
    return m_approvals_whitelist_username_isSet;
}

bool OAIBranchProtection::is_approvals_whitelist_username_Valid() const{
    return m_approvals_whitelist_username_isValid;
}

bool OAIBranchProtection::isBlockOnOfficialReviewRequests() const {
    return m_block_on_official_review_requests;
}
void OAIBranchProtection::setBlockOnOfficialReviewRequests(const bool &block_on_official_review_requests) {
    m_block_on_official_review_requests = block_on_official_review_requests;
    m_block_on_official_review_requests_isSet = true;
}

bool OAIBranchProtection::is_block_on_official_review_requests_Set() const{
    return m_block_on_official_review_requests_isSet;
}

bool OAIBranchProtection::is_block_on_official_review_requests_Valid() const{
    return m_block_on_official_review_requests_isValid;
}

bool OAIBranchProtection::isBlockOnOutdatedBranch() const {
    return m_block_on_outdated_branch;
}
void OAIBranchProtection::setBlockOnOutdatedBranch(const bool &block_on_outdated_branch) {
    m_block_on_outdated_branch = block_on_outdated_branch;
    m_block_on_outdated_branch_isSet = true;
}

bool OAIBranchProtection::is_block_on_outdated_branch_Set() const{
    return m_block_on_outdated_branch_isSet;
}

bool OAIBranchProtection::is_block_on_outdated_branch_Valid() const{
    return m_block_on_outdated_branch_isValid;
}

bool OAIBranchProtection::isBlockOnRejectedReviews() const {
    return m_block_on_rejected_reviews;
}
void OAIBranchProtection::setBlockOnRejectedReviews(const bool &block_on_rejected_reviews) {
    m_block_on_rejected_reviews = block_on_rejected_reviews;
    m_block_on_rejected_reviews_isSet = true;
}

bool OAIBranchProtection::is_block_on_rejected_reviews_Set() const{
    return m_block_on_rejected_reviews_isSet;
}

bool OAIBranchProtection::is_block_on_rejected_reviews_Valid() const{
    return m_block_on_rejected_reviews_isValid;
}

QString OAIBranchProtection::getBranchName() const {
    return m_branch_name;
}
void OAIBranchProtection::setBranchName(const QString &branch_name) {
    m_branch_name = branch_name;
    m_branch_name_isSet = true;
}

bool OAIBranchProtection::is_branch_name_Set() const{
    return m_branch_name_isSet;
}

bool OAIBranchProtection::is_branch_name_Valid() const{
    return m_branch_name_isValid;
}

QDateTime OAIBranchProtection::getCreatedAt() const {
    return m_created_at;
}
void OAIBranchProtection::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIBranchProtection::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIBranchProtection::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIBranchProtection::isDismissStaleApprovals() const {
    return m_dismiss_stale_approvals;
}
void OAIBranchProtection::setDismissStaleApprovals(const bool &dismiss_stale_approvals) {
    m_dismiss_stale_approvals = dismiss_stale_approvals;
    m_dismiss_stale_approvals_isSet = true;
}

bool OAIBranchProtection::is_dismiss_stale_approvals_Set() const{
    return m_dismiss_stale_approvals_isSet;
}

bool OAIBranchProtection::is_dismiss_stale_approvals_Valid() const{
    return m_dismiss_stale_approvals_isValid;
}

bool OAIBranchProtection::isEnableApprovalsWhitelist() const {
    return m_enable_approvals_whitelist;
}
void OAIBranchProtection::setEnableApprovalsWhitelist(const bool &enable_approvals_whitelist) {
    m_enable_approvals_whitelist = enable_approvals_whitelist;
    m_enable_approvals_whitelist_isSet = true;
}

bool OAIBranchProtection::is_enable_approvals_whitelist_Set() const{
    return m_enable_approvals_whitelist_isSet;
}

bool OAIBranchProtection::is_enable_approvals_whitelist_Valid() const{
    return m_enable_approvals_whitelist_isValid;
}

bool OAIBranchProtection::isEnableMergeWhitelist() const {
    return m_enable_merge_whitelist;
}
void OAIBranchProtection::setEnableMergeWhitelist(const bool &enable_merge_whitelist) {
    m_enable_merge_whitelist = enable_merge_whitelist;
    m_enable_merge_whitelist_isSet = true;
}

bool OAIBranchProtection::is_enable_merge_whitelist_Set() const{
    return m_enable_merge_whitelist_isSet;
}

bool OAIBranchProtection::is_enable_merge_whitelist_Valid() const{
    return m_enable_merge_whitelist_isValid;
}

bool OAIBranchProtection::isEnablePush() const {
    return m_enable_push;
}
void OAIBranchProtection::setEnablePush(const bool &enable_push) {
    m_enable_push = enable_push;
    m_enable_push_isSet = true;
}

bool OAIBranchProtection::is_enable_push_Set() const{
    return m_enable_push_isSet;
}

bool OAIBranchProtection::is_enable_push_Valid() const{
    return m_enable_push_isValid;
}

bool OAIBranchProtection::isEnablePushWhitelist() const {
    return m_enable_push_whitelist;
}
void OAIBranchProtection::setEnablePushWhitelist(const bool &enable_push_whitelist) {
    m_enable_push_whitelist = enable_push_whitelist;
    m_enable_push_whitelist_isSet = true;
}

bool OAIBranchProtection::is_enable_push_whitelist_Set() const{
    return m_enable_push_whitelist_isSet;
}

bool OAIBranchProtection::is_enable_push_whitelist_Valid() const{
    return m_enable_push_whitelist_isValid;
}

bool OAIBranchProtection::isEnableStatusCheck() const {
    return m_enable_status_check;
}
void OAIBranchProtection::setEnableStatusCheck(const bool &enable_status_check) {
    m_enable_status_check = enable_status_check;
    m_enable_status_check_isSet = true;
}

bool OAIBranchProtection::is_enable_status_check_Set() const{
    return m_enable_status_check_isSet;
}

bool OAIBranchProtection::is_enable_status_check_Valid() const{
    return m_enable_status_check_isValid;
}

QList<QString> OAIBranchProtection::getMergeWhitelistTeams() const {
    return m_merge_whitelist_teams;
}
void OAIBranchProtection::setMergeWhitelistTeams(const QList<QString> &merge_whitelist_teams) {
    m_merge_whitelist_teams = merge_whitelist_teams;
    m_merge_whitelist_teams_isSet = true;
}

bool OAIBranchProtection::is_merge_whitelist_teams_Set() const{
    return m_merge_whitelist_teams_isSet;
}

bool OAIBranchProtection::is_merge_whitelist_teams_Valid() const{
    return m_merge_whitelist_teams_isValid;
}

QList<QString> OAIBranchProtection::getMergeWhitelistUsernames() const {
    return m_merge_whitelist_usernames;
}
void OAIBranchProtection::setMergeWhitelistUsernames(const QList<QString> &merge_whitelist_usernames) {
    m_merge_whitelist_usernames = merge_whitelist_usernames;
    m_merge_whitelist_usernames_isSet = true;
}

bool OAIBranchProtection::is_merge_whitelist_usernames_Set() const{
    return m_merge_whitelist_usernames_isSet;
}

bool OAIBranchProtection::is_merge_whitelist_usernames_Valid() const{
    return m_merge_whitelist_usernames_isValid;
}

QString OAIBranchProtection::getProtectedFilePatterns() const {
    return m_protected_file_patterns;
}
void OAIBranchProtection::setProtectedFilePatterns(const QString &protected_file_patterns) {
    m_protected_file_patterns = protected_file_patterns;
    m_protected_file_patterns_isSet = true;
}

bool OAIBranchProtection::is_protected_file_patterns_Set() const{
    return m_protected_file_patterns_isSet;
}

bool OAIBranchProtection::is_protected_file_patterns_Valid() const{
    return m_protected_file_patterns_isValid;
}

bool OAIBranchProtection::isPushWhitelistDeployKeys() const {
    return m_push_whitelist_deploy_keys;
}
void OAIBranchProtection::setPushWhitelistDeployKeys(const bool &push_whitelist_deploy_keys) {
    m_push_whitelist_deploy_keys = push_whitelist_deploy_keys;
    m_push_whitelist_deploy_keys_isSet = true;
}

bool OAIBranchProtection::is_push_whitelist_deploy_keys_Set() const{
    return m_push_whitelist_deploy_keys_isSet;
}

bool OAIBranchProtection::is_push_whitelist_deploy_keys_Valid() const{
    return m_push_whitelist_deploy_keys_isValid;
}

QList<QString> OAIBranchProtection::getPushWhitelistTeams() const {
    return m_push_whitelist_teams;
}
void OAIBranchProtection::setPushWhitelistTeams(const QList<QString> &push_whitelist_teams) {
    m_push_whitelist_teams = push_whitelist_teams;
    m_push_whitelist_teams_isSet = true;
}

bool OAIBranchProtection::is_push_whitelist_teams_Set() const{
    return m_push_whitelist_teams_isSet;
}

bool OAIBranchProtection::is_push_whitelist_teams_Valid() const{
    return m_push_whitelist_teams_isValid;
}

QList<QString> OAIBranchProtection::getPushWhitelistUsernames() const {
    return m_push_whitelist_usernames;
}
void OAIBranchProtection::setPushWhitelistUsernames(const QList<QString> &push_whitelist_usernames) {
    m_push_whitelist_usernames = push_whitelist_usernames;
    m_push_whitelist_usernames_isSet = true;
}

bool OAIBranchProtection::is_push_whitelist_usernames_Set() const{
    return m_push_whitelist_usernames_isSet;
}

bool OAIBranchProtection::is_push_whitelist_usernames_Valid() const{
    return m_push_whitelist_usernames_isValid;
}

bool OAIBranchProtection::isRequireSignedCommits() const {
    return m_require_signed_commits;
}
void OAIBranchProtection::setRequireSignedCommits(const bool &require_signed_commits) {
    m_require_signed_commits = require_signed_commits;
    m_require_signed_commits_isSet = true;
}

bool OAIBranchProtection::is_require_signed_commits_Set() const{
    return m_require_signed_commits_isSet;
}

bool OAIBranchProtection::is_require_signed_commits_Valid() const{
    return m_require_signed_commits_isValid;
}

qint64 OAIBranchProtection::getRequiredApprovals() const {
    return m_required_approvals;
}
void OAIBranchProtection::setRequiredApprovals(const qint64 &required_approvals) {
    m_required_approvals = required_approvals;
    m_required_approvals_isSet = true;
}

bool OAIBranchProtection::is_required_approvals_Set() const{
    return m_required_approvals_isSet;
}

bool OAIBranchProtection::is_required_approvals_Valid() const{
    return m_required_approvals_isValid;
}

QString OAIBranchProtection::getRuleName() const {
    return m_rule_name;
}
void OAIBranchProtection::setRuleName(const QString &rule_name) {
    m_rule_name = rule_name;
    m_rule_name_isSet = true;
}

bool OAIBranchProtection::is_rule_name_Set() const{
    return m_rule_name_isSet;
}

bool OAIBranchProtection::is_rule_name_Valid() const{
    return m_rule_name_isValid;
}

QList<QString> OAIBranchProtection::getStatusCheckContexts() const {
    return m_status_check_contexts;
}
void OAIBranchProtection::setStatusCheckContexts(const QList<QString> &status_check_contexts) {
    m_status_check_contexts = status_check_contexts;
    m_status_check_contexts_isSet = true;
}

bool OAIBranchProtection::is_status_check_contexts_Set() const{
    return m_status_check_contexts_isSet;
}

bool OAIBranchProtection::is_status_check_contexts_Valid() const{
    return m_status_check_contexts_isValid;
}

QString OAIBranchProtection::getUnprotectedFilePatterns() const {
    return m_unprotected_file_patterns;
}
void OAIBranchProtection::setUnprotectedFilePatterns(const QString &unprotected_file_patterns) {
    m_unprotected_file_patterns = unprotected_file_patterns;
    m_unprotected_file_patterns_isSet = true;
}

bool OAIBranchProtection::is_unprotected_file_patterns_Set() const{
    return m_unprotected_file_patterns_isSet;
}

bool OAIBranchProtection::is_unprotected_file_patterns_Valid() const{
    return m_unprotected_file_patterns_isValid;
}

QDateTime OAIBranchProtection::getUpdatedAt() const {
    return m_updated_at;
}
void OAIBranchProtection::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIBranchProtection::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIBranchProtection::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIBranchProtection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approvals_whitelist_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_approvals_whitelist_username.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_on_official_review_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_on_outdated_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_on_rejected_reviews_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dismiss_stale_approvals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_approvals_whitelist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_merge_whitelist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_push_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_push_whitelist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_status_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_whitelist_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_whitelist_usernames.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_file_patterns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_whitelist_deploy_keys_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_whitelist_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_whitelist_usernames.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_signed_commits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_approvals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_check_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unprotected_file_patterns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBranchProtection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
