/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWikiCommit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWikiCommit::OAIWikiCommit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWikiCommit::OAIWikiCommit() {
    this->initializeModel();
}

OAIWikiCommit::~OAIWikiCommit() {}

void OAIWikiCommit::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_commiter_isSet = false;
    m_commiter_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;
}

void OAIWikiCommit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWikiCommit::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_commiter_isValid = ::OpenAPI::fromJsonValue(m_commiter, json[QString("commiter")]);
    m_commiter_isSet = !json[QString("commiter")].isNull() && m_commiter_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;
}

QString OAIWikiCommit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWikiCommit::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_commiter.isSet()) {
        obj.insert(QString("commiter"), ::OpenAPI::toJsonValue(m_commiter));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    return obj;
}

OAICommitUser OAIWikiCommit::getAuthor() const {
    return m_author;
}
void OAIWikiCommit::setAuthor(const OAICommitUser &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIWikiCommit::is_author_Set() const{
    return m_author_isSet;
}

bool OAIWikiCommit::is_author_Valid() const{
    return m_author_isValid;
}

OAICommitUser OAIWikiCommit::getCommiter() const {
    return m_commiter;
}
void OAIWikiCommit::setCommiter(const OAICommitUser &commiter) {
    m_commiter = commiter;
    m_commiter_isSet = true;
}

bool OAIWikiCommit::is_commiter_Set() const{
    return m_commiter_isSet;
}

bool OAIWikiCommit::is_commiter_Valid() const{
    return m_commiter_isValid;
}

QString OAIWikiCommit::getMessage() const {
    return m_message;
}
void OAIWikiCommit::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIWikiCommit::is_message_Set() const{
    return m_message_isSet;
}

bool OAIWikiCommit::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIWikiCommit::getSha() const {
    return m_sha;
}
void OAIWikiCommit::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAIWikiCommit::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAIWikiCommit::is_sha_Valid() const{
    return m_sha_isValid;
}

bool OAIWikiCommit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commiter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWikiCommit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
