/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferRepoOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferRepoOption::OAITransferRepoOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferRepoOption::OAITransferRepoOption() {
    this->initializeModel();
}

OAITransferRepoOption::~OAITransferRepoOption() {}

void OAITransferRepoOption::initializeModel() {

    m_new_owner_isSet = false;
    m_new_owner_isValid = false;

    m_team_ids_isSet = false;
    m_team_ids_isValid = false;
}

void OAITransferRepoOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferRepoOption::fromJsonObject(QJsonObject json) {

    m_new_owner_isValid = ::OpenAPI::fromJsonValue(m_new_owner, json[QString("new_owner")]);
    m_new_owner_isSet = !json[QString("new_owner")].isNull() && m_new_owner_isValid;

    m_team_ids_isValid = ::OpenAPI::fromJsonValue(m_team_ids, json[QString("team_ids")]);
    m_team_ids_isSet = !json[QString("team_ids")].isNull() && m_team_ids_isValid;
}

QString OAITransferRepoOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferRepoOption::asJsonObject() const {
    QJsonObject obj;
    if (m_new_owner_isSet) {
        obj.insert(QString("new_owner"), ::OpenAPI::toJsonValue(m_new_owner));
    }
    if (m_team_ids.size() > 0) {
        obj.insert(QString("team_ids"), ::OpenAPI::toJsonValue(m_team_ids));
    }
    return obj;
}

QString OAITransferRepoOption::getNewOwner() const {
    return m_new_owner;
}
void OAITransferRepoOption::setNewOwner(const QString &new_owner) {
    m_new_owner = new_owner;
    m_new_owner_isSet = true;
}

bool OAITransferRepoOption::is_new_owner_Set() const{
    return m_new_owner_isSet;
}

bool OAITransferRepoOption::is_new_owner_Valid() const{
    return m_new_owner_isValid;
}

QList<qint64> OAITransferRepoOption::getTeamIds() const {
    return m_team_ids;
}
void OAITransferRepoOption::setTeamIds(const QList<qint64> &team_ids) {
    m_team_ids = team_ids;
    m_team_ids_isSet = true;
}

bool OAITransferRepoOption::is_team_ids_Set() const{
    return m_team_ids_isSet;
}

bool OAITransferRepoOption::is_team_ids_Valid() const{
    return m_team_ids_isValid;
}

bool OAITransferRepoOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferRepoOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_new_owner_isValid && true;
}

} // namespace OpenAPI
