/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_followers_count_isSet = false;
    m_followers_count_isValid = false;

    m_following_count_isSet = false;
    m_following_count_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_admin_isSet = false;
    m_is_admin_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_login_isSet = false;
    m_last_login_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_login_name_isSet = false;
    m_login_name_isValid = false;

    m_prohibit_login_isSet = false;
    m_prohibit_login_isValid = false;

    m_restricted_isSet = false;
    m_restricted_isValid = false;

    m_starred_repos_count_isSet = false;
    m_starred_repos_count_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_followers_count_isValid = ::OpenAPI::fromJsonValue(m_followers_count, json[QString("followers_count")]);
    m_followers_count_isSet = !json[QString("followers_count")].isNull() && m_followers_count_isValid;

    m_following_count_isValid = ::OpenAPI::fromJsonValue(m_following_count, json[QString("following_count")]);
    m_following_count_isSet = !json[QString("following_count")].isNull() && m_following_count_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_admin_isValid = ::OpenAPI::fromJsonValue(m_is_admin, json[QString("is_admin")]);
    m_is_admin_isSet = !json[QString("is_admin")].isNull() && m_is_admin_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_login_isValid = ::OpenAPI::fromJsonValue(m_last_login, json[QString("last_login")]);
    m_last_login_isSet = !json[QString("last_login")].isNull() && m_last_login_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_login_name_isValid = ::OpenAPI::fromJsonValue(m_login_name, json[QString("login_name")]);
    m_login_name_isSet = !json[QString("login_name")].isNull() && m_login_name_isValid;

    m_prohibit_login_isValid = ::OpenAPI::fromJsonValue(m_prohibit_login, json[QString("prohibit_login")]);
    m_prohibit_login_isSet = !json[QString("prohibit_login")].isNull() && m_prohibit_login_isValid;

    m_restricted_isValid = ::OpenAPI::fromJsonValue(m_restricted, json[QString("restricted")]);
    m_restricted_isSet = !json[QString("restricted")].isNull() && m_restricted_isValid;

    m_starred_repos_count_isValid = ::OpenAPI::fromJsonValue(m_starred_repos_count, json[QString("starred_repos_count")]);
    m_starred_repos_count_isSet = !json[QString("starred_repos_count")].isNull() && m_starred_repos_count_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_followers_count_isSet) {
        obj.insert(QString("followers_count"), ::OpenAPI::toJsonValue(m_followers_count));
    }
    if (m_following_count_isSet) {
        obj.insert(QString("following_count"), ::OpenAPI::toJsonValue(m_following_count));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_admin_isSet) {
        obj.insert(QString("is_admin"), ::OpenAPI::toJsonValue(m_is_admin));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_login_isSet) {
        obj.insert(QString("last_login"), ::OpenAPI::toJsonValue(m_last_login));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_login_name_isSet) {
        obj.insert(QString("login_name"), ::OpenAPI::toJsonValue(m_login_name));
    }
    if (m_prohibit_login_isSet) {
        obj.insert(QString("prohibit_login"), ::OpenAPI::toJsonValue(m_prohibit_login));
    }
    if (m_restricted_isSet) {
        obj.insert(QString("restricted"), ::OpenAPI::toJsonValue(m_restricted));
    }
    if (m_starred_repos_count_isSet) {
        obj.insert(QString("starred_repos_count"), ::OpenAPI::toJsonValue(m_starred_repos_count));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

bool OAIUser::isActive() const {
    return m_active;
}
void OAIUser::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIUser::is_active_Set() const{
    return m_active_isSet;
}

bool OAIUser::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIUser::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIUser::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIUser::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIUser::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QDateTime OAIUser::getCreated() const {
    return m_created;
}
void OAIUser::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIUser::is_created_Set() const{
    return m_created_isSet;
}

bool OAIUser::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIUser::getDescription() const {
    return m_description;
}
void OAIUser::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUser::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUser::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

qint64 OAIUser::getFollowersCount() const {
    return m_followers_count;
}
void OAIUser::setFollowersCount(const qint64 &followers_count) {
    m_followers_count = followers_count;
    m_followers_count_isSet = true;
}

bool OAIUser::is_followers_count_Set() const{
    return m_followers_count_isSet;
}

bool OAIUser::is_followers_count_Valid() const{
    return m_followers_count_isValid;
}

qint64 OAIUser::getFollowingCount() const {
    return m_following_count;
}
void OAIUser::setFollowingCount(const qint64 &following_count) {
    m_following_count = following_count;
    m_following_count_isSet = true;
}

bool OAIUser::is_following_count_Set() const{
    return m_following_count_isSet;
}

bool OAIUser::is_following_count_Valid() const{
    return m_following_count_isValid;
}

QString OAIUser::getFullName() const {
    return m_full_name;
}
void OAIUser::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIUser::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIUser::is_full_name_Valid() const{
    return m_full_name_isValid;
}

qint64 OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUser::isIsAdmin() const {
    return m_is_admin;
}
void OAIUser::setIsAdmin(const bool &is_admin) {
    m_is_admin = is_admin;
    m_is_admin_isSet = true;
}

bool OAIUser::is_is_admin_Set() const{
    return m_is_admin_isSet;
}

bool OAIUser::is_is_admin_Valid() const{
    return m_is_admin_isValid;
}

QString OAIUser::getLanguage() const {
    return m_language;
}
void OAIUser::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIUser::is_language_Set() const{
    return m_language_isSet;
}

bool OAIUser::is_language_Valid() const{
    return m_language_isValid;
}

QDateTime OAIUser::getLastLogin() const {
    return m_last_login;
}
void OAIUser::setLastLogin(const QDateTime &last_login) {
    m_last_login = last_login;
    m_last_login_isSet = true;
}

bool OAIUser::is_last_login_Set() const{
    return m_last_login_isSet;
}

bool OAIUser::is_last_login_Valid() const{
    return m_last_login_isValid;
}

QString OAIUser::getLocation() const {
    return m_location;
}
void OAIUser::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIUser::is_location_Set() const{
    return m_location_isSet;
}

bool OAIUser::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIUser::getLogin() const {
    return m_login;
}
void OAIUser::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAIUser::is_login_Set() const{
    return m_login_isSet;
}

bool OAIUser::is_login_Valid() const{
    return m_login_isValid;
}

QString OAIUser::getLoginName() const {
    return m_login_name;
}
void OAIUser::setLoginName(const QString &login_name) {
    m_login_name = login_name;
    m_login_name_isSet = true;
}

bool OAIUser::is_login_name_Set() const{
    return m_login_name_isSet;
}

bool OAIUser::is_login_name_Valid() const{
    return m_login_name_isValid;
}

bool OAIUser::isProhibitLogin() const {
    return m_prohibit_login;
}
void OAIUser::setProhibitLogin(const bool &prohibit_login) {
    m_prohibit_login = prohibit_login;
    m_prohibit_login_isSet = true;
}

bool OAIUser::is_prohibit_login_Set() const{
    return m_prohibit_login_isSet;
}

bool OAIUser::is_prohibit_login_Valid() const{
    return m_prohibit_login_isValid;
}

bool OAIUser::isRestricted() const {
    return m_restricted;
}
void OAIUser::setRestricted(const bool &restricted) {
    m_restricted = restricted;
    m_restricted_isSet = true;
}

bool OAIUser::is_restricted_Set() const{
    return m_restricted_isSet;
}

bool OAIUser::is_restricted_Valid() const{
    return m_restricted_isValid;
}

qint64 OAIUser::getStarredReposCount() const {
    return m_starred_repos_count;
}
void OAIUser::setStarredReposCount(const qint64 &starred_repos_count) {
    m_starred_repos_count = starred_repos_count;
    m_starred_repos_count_isSet = true;
}

bool OAIUser::is_starred_repos_count_Set() const{
    return m_starred_repos_count_isSet;
}

bool OAIUser::is_starred_repos_count_Valid() const{
    return m_starred_repos_count_isValid;
}

QString OAIUser::getVisibility() const {
    return m_visibility;
}
void OAIUser::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIUser::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIUser::is_visibility_Valid() const{
    return m_visibility_isValid;
}

QString OAIUser::getWebsite() const {
    return m_website;
}
void OAIUser::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIUser::is_website_Set() const{
    return m_website_isSet;
}

bool OAIUser::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_followers_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_following_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prohibit_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starred_repos_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
