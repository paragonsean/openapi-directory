/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStopWatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStopWatch::OAIStopWatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStopWatch::OAIStopWatch() {
    this->initializeModel();
}

OAIStopWatch::~OAIStopWatch() {}

void OAIStopWatch::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_issue_index_isSet = false;
    m_issue_index_isValid = false;

    m_issue_title_isSet = false;
    m_issue_title_isValid = false;

    m_repo_name_isSet = false;
    m_repo_name_isValid = false;

    m_repo_owner_name_isSet = false;
    m_repo_owner_name_isValid = false;

    m_seconds_isSet = false;
    m_seconds_isValid = false;
}

void OAIStopWatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStopWatch::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_issue_index_isValid = ::OpenAPI::fromJsonValue(m_issue_index, json[QString("issue_index")]);
    m_issue_index_isSet = !json[QString("issue_index")].isNull() && m_issue_index_isValid;

    m_issue_title_isValid = ::OpenAPI::fromJsonValue(m_issue_title, json[QString("issue_title")]);
    m_issue_title_isSet = !json[QString("issue_title")].isNull() && m_issue_title_isValid;

    m_repo_name_isValid = ::OpenAPI::fromJsonValue(m_repo_name, json[QString("repo_name")]);
    m_repo_name_isSet = !json[QString("repo_name")].isNull() && m_repo_name_isValid;

    m_repo_owner_name_isValid = ::OpenAPI::fromJsonValue(m_repo_owner_name, json[QString("repo_owner_name")]);
    m_repo_owner_name_isSet = !json[QString("repo_owner_name")].isNull() && m_repo_owner_name_isValid;

    m_seconds_isValid = ::OpenAPI::fromJsonValue(m_seconds, json[QString("seconds")]);
    m_seconds_isSet = !json[QString("seconds")].isNull() && m_seconds_isValid;
}

QString OAIStopWatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStopWatch::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_issue_index_isSet) {
        obj.insert(QString("issue_index"), ::OpenAPI::toJsonValue(m_issue_index));
    }
    if (m_issue_title_isSet) {
        obj.insert(QString("issue_title"), ::OpenAPI::toJsonValue(m_issue_title));
    }
    if (m_repo_name_isSet) {
        obj.insert(QString("repo_name"), ::OpenAPI::toJsonValue(m_repo_name));
    }
    if (m_repo_owner_name_isSet) {
        obj.insert(QString("repo_owner_name"), ::OpenAPI::toJsonValue(m_repo_owner_name));
    }
    if (m_seconds_isSet) {
        obj.insert(QString("seconds"), ::OpenAPI::toJsonValue(m_seconds));
    }
    return obj;
}

QDateTime OAIStopWatch::getCreated() const {
    return m_created;
}
void OAIStopWatch::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIStopWatch::is_created_Set() const{
    return m_created_isSet;
}

bool OAIStopWatch::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIStopWatch::getDuration() const {
    return m_duration;
}
void OAIStopWatch::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIStopWatch::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIStopWatch::is_duration_Valid() const{
    return m_duration_isValid;
}

qint64 OAIStopWatch::getIssueIndex() const {
    return m_issue_index;
}
void OAIStopWatch::setIssueIndex(const qint64 &issue_index) {
    m_issue_index = issue_index;
    m_issue_index_isSet = true;
}

bool OAIStopWatch::is_issue_index_Set() const{
    return m_issue_index_isSet;
}

bool OAIStopWatch::is_issue_index_Valid() const{
    return m_issue_index_isValid;
}

QString OAIStopWatch::getIssueTitle() const {
    return m_issue_title;
}
void OAIStopWatch::setIssueTitle(const QString &issue_title) {
    m_issue_title = issue_title;
    m_issue_title_isSet = true;
}

bool OAIStopWatch::is_issue_title_Set() const{
    return m_issue_title_isSet;
}

bool OAIStopWatch::is_issue_title_Valid() const{
    return m_issue_title_isValid;
}

QString OAIStopWatch::getRepoName() const {
    return m_repo_name;
}
void OAIStopWatch::setRepoName(const QString &repo_name) {
    m_repo_name = repo_name;
    m_repo_name_isSet = true;
}

bool OAIStopWatch::is_repo_name_Set() const{
    return m_repo_name_isSet;
}

bool OAIStopWatch::is_repo_name_Valid() const{
    return m_repo_name_isValid;
}

QString OAIStopWatch::getRepoOwnerName() const {
    return m_repo_owner_name;
}
void OAIStopWatch::setRepoOwnerName(const QString &repo_owner_name) {
    m_repo_owner_name = repo_owner_name;
    m_repo_owner_name_isSet = true;
}

bool OAIStopWatch::is_repo_owner_name_Set() const{
    return m_repo_owner_name_isSet;
}

bool OAIStopWatch::is_repo_owner_name_Valid() const{
    return m_repo_owner_name_isValid;
}

qint64 OAIStopWatch::getSeconds() const {
    return m_seconds;
}
void OAIStopWatch::setSeconds(const qint64 &seconds) {
    m_seconds = seconds;
    m_seconds_isSet = true;
}

bool OAIStopWatch::is_seconds_Set() const{
    return m_seconds_isSet;
}

bool OAIStopWatch::is_seconds_Valid() const{
    return m_seconds_isValid;
}

bool OAIStopWatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStopWatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
