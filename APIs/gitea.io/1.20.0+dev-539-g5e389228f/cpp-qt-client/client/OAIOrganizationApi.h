/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrganizationApi_H
#define OAI_OAIOrganizationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivity.h"
#include "OAICreateHookOption.h"
#include "OAICreateLabelOption.h"
#include "OAICreateOrgOption.h"
#include "OAICreateRepoOption.h"
#include "OAICreateTeamOption.h"
#include "OAIEditHookOption.h"
#include "OAIEditLabelOption.h"
#include "OAIEditOrgOption.h"
#include "OAIEditTeamOption.h"
#include "OAIHook.h"
#include "OAILabel.h"
#include "OAIOrganization.h"
#include "OAIOrganizationPermissions.h"
#include "OAIRepository.h"
#include "OAITeam.h"
#include "OAITeamSearch_200_response.h"
#include "OAIUser.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrganizationApi : public QObject {
    Q_OBJECT

public:
    OAIOrganizationApi(const int timeOut = 0);
    ~OAIOrganizationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_create_repo_option OAICreateRepoOption [optional]
    */
    virtual void createOrgRepo(const QString &org, const ::OpenAPI::OptionalParam<OAICreateRepoOption> &oai_create_repo_option = ::OpenAPI::OptionalParam<OAICreateRepoOption>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_create_repo_option OAICreateRepoOption [optional]
    */
    Q_DECL_DEPRECATED virtual void createOrgRepoDeprecated(const QString &org, const ::OpenAPI::OptionalParam<OAICreateRepoOption> &oai_create_repo_option = ::OpenAPI::OptionalParam<OAICreateRepoOption>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  username QString [required]
    */
    virtual void orgAddTeamMember(const qint64 &id, const QString &username);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  org QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void orgAddTeamRepository(const qint64 &id, const QString &org, const QString &repo);

    /**
    * @param[in]  org QString [required]
    * @param[in]  username QString [required]
    */
    virtual void orgConcealMember(const QString &org, const QString &username);

    /**
    * @param[in]  oai_create_org_option OAICreateOrgOption [required]
    */
    virtual void orgCreate(const OAICreateOrgOption &oai_create_org_option);

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_create_hook_option OAICreateHookOption [required]
    */
    virtual void orgCreateHook(const QString &org, const OAICreateHookOption &oai_create_hook_option);

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_create_label_option OAICreateLabelOption [optional]
    */
    virtual void orgCreateLabel(const QString &org, const ::OpenAPI::OptionalParam<OAICreateLabelOption> &oai_create_label_option = ::OpenAPI::OptionalParam<OAICreateLabelOption>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_create_team_option OAICreateTeamOption [optional]
    */
    virtual void orgCreateTeam(const QString &org, const ::OpenAPI::OptionalParam<OAICreateTeamOption> &oai_create_team_option = ::OpenAPI::OptionalParam<OAICreateTeamOption>());

    /**
    * @param[in]  org QString [required]
    */
    virtual void orgDelete(const QString &org);

    /**
    * @param[in]  org QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void orgDeleteHook(const QString &org, const qint64 &id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void orgDeleteLabel(const QString &org, const qint64 &id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  username QString [required]
    */
    virtual void orgDeleteMember(const QString &org, const QString &username);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void orgDeleteTeam(const qint64 &id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_edit_org_option OAIEditOrgOption [required]
    */
    virtual void orgEdit(const QString &org, const OAIEditOrgOption &oai_edit_org_option);

    /**
    * @param[in]  org QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  oai_edit_hook_option OAIEditHookOption [optional]
    */
    virtual void orgEditHook(const QString &org, const qint64 &id, const ::OpenAPI::OptionalParam<OAIEditHookOption> &oai_edit_hook_option = ::OpenAPI::OptionalParam<OAIEditHookOption>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  oai_edit_label_option OAIEditLabelOption [optional]
    */
    virtual void orgEditLabel(const QString &org, const qint64 &id, const ::OpenAPI::OptionalParam<OAIEditLabelOption> &oai_edit_label_option = ::OpenAPI::OptionalParam<OAIEditLabelOption>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_edit_team_option OAIEditTeamOption [optional]
    */
    virtual void orgEditTeam(const qint32 &id, const ::OpenAPI::OptionalParam<OAIEditTeamOption> &oai_edit_team_option = ::OpenAPI::OptionalParam<OAIEditTeamOption>());

    /**
    * @param[in]  org QString [required]
    */
    virtual void orgGet(const QString &org);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void orgGetAll(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void orgGetHook(const QString &org, const qint64 &id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void orgGetLabel(const QString &org, const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void orgGetTeam(const qint64 &id);

    /**
    * @param[in]  username QString [required]
    * @param[in]  org QString [required]
    */
    virtual void orgGetUserPermissions(const QString &username, const QString &org);

    /**
    * @param[in]  org QString [required]
    * @param[in]  username QString [required]
    */
    virtual void orgIsMember(const QString &org, const QString &username);

    /**
    * @param[in]  org QString [required]
    * @param[in]  username QString [required]
    */
    virtual void orgIsPublicMember(const QString &org, const QString &username);

    /**
    * @param[in]  org QString [required]
    * @param[in]  date QDate [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void orgListActivityFeeds(const QString &org, const ::OpenAPI::OptionalParam<QDate> &date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void orgListCurrentUserOrgs(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void orgListHooks(const QString &org, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void orgListLabels(const QString &org, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void orgListMembers(const QString &org, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void orgListPublicMembers(const QString &org, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void orgListRepos(const QString &org, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  date QDate [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void orgListTeamActivityFeeds(const qint64 &id, const ::OpenAPI::OptionalParam<QDate> &date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  username QString [required]
    */
    virtual void orgListTeamMember(const qint64 &id, const QString &username);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void orgListTeamMembers(const qint64 &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  org QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void orgListTeamRepo(const qint64 &id, const QString &org, const QString &repo);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void orgListTeamRepos(const qint64 &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void orgListTeams(const QString &org, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void orgListUserOrgs(const QString &username, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  username QString [required]
    */
    virtual void orgPublicizeMember(const QString &org, const QString &username);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  username QString [required]
    */
    virtual void orgRemoveTeamMember(const qint64 &id, const QString &username);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  org QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void orgRemoveTeamRepository(const qint64 &id, const QString &org, const QString &repo);

    /**
    * @param[in]  org QString [required]
    * @param[in]  q QString [optional]
    * @param[in]  include_desc bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void teamSearch(const QString &org, const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_desc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createOrgRepoCallback(OAIHttpRequestWorker *worker);
    void createOrgRepoDeprecatedCallback(OAIHttpRequestWorker *worker);
    void orgAddTeamMemberCallback(OAIHttpRequestWorker *worker);
    void orgAddTeamRepositoryCallback(OAIHttpRequestWorker *worker);
    void orgConcealMemberCallback(OAIHttpRequestWorker *worker);
    void orgCreateCallback(OAIHttpRequestWorker *worker);
    void orgCreateHookCallback(OAIHttpRequestWorker *worker);
    void orgCreateLabelCallback(OAIHttpRequestWorker *worker);
    void orgCreateTeamCallback(OAIHttpRequestWorker *worker);
    void orgDeleteCallback(OAIHttpRequestWorker *worker);
    void orgDeleteHookCallback(OAIHttpRequestWorker *worker);
    void orgDeleteLabelCallback(OAIHttpRequestWorker *worker);
    void orgDeleteMemberCallback(OAIHttpRequestWorker *worker);
    void orgDeleteTeamCallback(OAIHttpRequestWorker *worker);
    void orgEditCallback(OAIHttpRequestWorker *worker);
    void orgEditHookCallback(OAIHttpRequestWorker *worker);
    void orgEditLabelCallback(OAIHttpRequestWorker *worker);
    void orgEditTeamCallback(OAIHttpRequestWorker *worker);
    void orgGetCallback(OAIHttpRequestWorker *worker);
    void orgGetAllCallback(OAIHttpRequestWorker *worker);
    void orgGetHookCallback(OAIHttpRequestWorker *worker);
    void orgGetLabelCallback(OAIHttpRequestWorker *worker);
    void orgGetTeamCallback(OAIHttpRequestWorker *worker);
    void orgGetUserPermissionsCallback(OAIHttpRequestWorker *worker);
    void orgIsMemberCallback(OAIHttpRequestWorker *worker);
    void orgIsPublicMemberCallback(OAIHttpRequestWorker *worker);
    void orgListActivityFeedsCallback(OAIHttpRequestWorker *worker);
    void orgListCurrentUserOrgsCallback(OAIHttpRequestWorker *worker);
    void orgListHooksCallback(OAIHttpRequestWorker *worker);
    void orgListLabelsCallback(OAIHttpRequestWorker *worker);
    void orgListMembersCallback(OAIHttpRequestWorker *worker);
    void orgListPublicMembersCallback(OAIHttpRequestWorker *worker);
    void orgListReposCallback(OAIHttpRequestWorker *worker);
    void orgListTeamActivityFeedsCallback(OAIHttpRequestWorker *worker);
    void orgListTeamMemberCallback(OAIHttpRequestWorker *worker);
    void orgListTeamMembersCallback(OAIHttpRequestWorker *worker);
    void orgListTeamRepoCallback(OAIHttpRequestWorker *worker);
    void orgListTeamReposCallback(OAIHttpRequestWorker *worker);
    void orgListTeamsCallback(OAIHttpRequestWorker *worker);
    void orgListUserOrgsCallback(OAIHttpRequestWorker *worker);
    void orgPublicizeMemberCallback(OAIHttpRequestWorker *worker);
    void orgRemoveTeamMemberCallback(OAIHttpRequestWorker *worker);
    void orgRemoveTeamRepositoryCallback(OAIHttpRequestWorker *worker);
    void teamSearchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createOrgRepoSignal(OAIRepository summary);
    void createOrgRepoDeprecatedSignal(OAIRepository summary);
    void orgAddTeamMemberSignal();
    void orgAddTeamRepositorySignal();
    void orgConcealMemberSignal();
    void orgCreateSignal(OAIOrganization summary);
    void orgCreateHookSignal(OAIHook summary);
    void orgCreateLabelSignal(OAILabel summary);
    void orgCreateTeamSignal(OAITeam summary);
    void orgDeleteSignal();
    void orgDeleteHookSignal();
    void orgDeleteLabelSignal();
    void orgDeleteMemberSignal();
    void orgDeleteTeamSignal();
    void orgEditSignal(OAIOrganization summary);
    void orgEditHookSignal(OAIHook summary);
    void orgEditLabelSignal(OAILabel summary);
    void orgEditTeamSignal(OAITeam summary);
    void orgGetSignal(OAIOrganization summary);
    void orgGetAllSignal(QList<OAIOrganization> summary);
    void orgGetHookSignal(OAIHook summary);
    void orgGetLabelSignal(OAILabel summary);
    void orgGetTeamSignal(OAITeam summary);
    void orgGetUserPermissionsSignal(OAIOrganizationPermissions summary);
    void orgIsMemberSignal();
    void orgIsPublicMemberSignal();
    void orgListActivityFeedsSignal(QList<OAIActivity> summary);
    void orgListCurrentUserOrgsSignal(QList<OAIOrganization> summary);
    void orgListHooksSignal(QList<OAIHook> summary);
    void orgListLabelsSignal(QList<OAILabel> summary);
    void orgListMembersSignal(QList<OAIUser> summary);
    void orgListPublicMembersSignal(QList<OAIUser> summary);
    void orgListReposSignal(QList<OAIRepository> summary);
    void orgListTeamActivityFeedsSignal(QList<OAIActivity> summary);
    void orgListTeamMemberSignal(OAIUser summary);
    void orgListTeamMembersSignal(QList<OAIUser> summary);
    void orgListTeamRepoSignal(OAIRepository summary);
    void orgListTeamReposSignal(QList<OAIRepository> summary);
    void orgListTeamsSignal(QList<OAITeam> summary);
    void orgListUserOrgsSignal(QList<OAIOrganization> summary);
    void orgPublicizeMemberSignal();
    void orgRemoveTeamMemberSignal();
    void orgRemoveTeamRepositorySignal();
    void teamSearchSignal(OAITeamSearch_200_response summary);


    void createOrgRepoSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void createOrgRepoDeprecatedSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void orgAddTeamMemberSignalFull(OAIHttpRequestWorker *worker);
    void orgAddTeamRepositorySignalFull(OAIHttpRequestWorker *worker);
    void orgConcealMemberSignalFull(OAIHttpRequestWorker *worker);
    void orgCreateSignalFull(OAIHttpRequestWorker *worker, OAIOrganization summary);
    void orgCreateHookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void orgCreateLabelSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void orgCreateTeamSignalFull(OAIHttpRequestWorker *worker, OAITeam summary);
    void orgDeleteSignalFull(OAIHttpRequestWorker *worker);
    void orgDeleteHookSignalFull(OAIHttpRequestWorker *worker);
    void orgDeleteLabelSignalFull(OAIHttpRequestWorker *worker);
    void orgDeleteMemberSignalFull(OAIHttpRequestWorker *worker);
    void orgDeleteTeamSignalFull(OAIHttpRequestWorker *worker);
    void orgEditSignalFull(OAIHttpRequestWorker *worker, OAIOrganization summary);
    void orgEditHookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void orgEditLabelSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void orgEditTeamSignalFull(OAIHttpRequestWorker *worker, OAITeam summary);
    void orgGetSignalFull(OAIHttpRequestWorker *worker, OAIOrganization summary);
    void orgGetAllSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganization> summary);
    void orgGetHookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void orgGetLabelSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void orgGetTeamSignalFull(OAIHttpRequestWorker *worker, OAITeam summary);
    void orgGetUserPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIOrganizationPermissions summary);
    void orgIsMemberSignalFull(OAIHttpRequestWorker *worker);
    void orgIsPublicMemberSignalFull(OAIHttpRequestWorker *worker);
    void orgListActivityFeedsSignalFull(OAIHttpRequestWorker *worker, QList<OAIActivity> summary);
    void orgListCurrentUserOrgsSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganization> summary);
    void orgListHooksSignalFull(OAIHttpRequestWorker *worker, QList<OAIHook> summary);
    void orgListLabelsSignalFull(OAIHttpRequestWorker *worker, QList<OAILabel> summary);
    void orgListMembersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void orgListPublicMembersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void orgListReposSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepository> summary);
    void orgListTeamActivityFeedsSignalFull(OAIHttpRequestWorker *worker, QList<OAIActivity> summary);
    void orgListTeamMemberSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void orgListTeamMembersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void orgListTeamRepoSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void orgListTeamReposSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepository> summary);
    void orgListTeamsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void orgListUserOrgsSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganization> summary);
    void orgPublicizeMemberSignalFull(OAIHttpRequestWorker *worker);
    void orgRemoveTeamMemberSignalFull(OAIHttpRequestWorker *worker);
    void orgRemoveTeamRepositorySignalFull(OAIHttpRequestWorker *worker);
    void teamSearchSignalFull(OAIHttpRequestWorker *worker, OAITeamSearch_200_response summary);

    Q_DECL_DEPRECATED_X("Use createOrgRepoSignalError() instead")
    void createOrgRepoSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrgRepoSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrgRepoDeprecatedSignalError() instead")
    void createOrgRepoDeprecatedSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrgRepoDeprecatedSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgAddTeamMemberSignalError() instead")
    void orgAddTeamMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgAddTeamMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgAddTeamRepositorySignalError() instead")
    void orgAddTeamRepositorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgAddTeamRepositorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgConcealMemberSignalError() instead")
    void orgConcealMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgConcealMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgCreateSignalError() instead")
    void orgCreateSignalE(OAIOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgCreateSignalError(OAIOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgCreateHookSignalError() instead")
    void orgCreateHookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgCreateHookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgCreateLabelSignalError() instead")
    void orgCreateLabelSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgCreateLabelSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgCreateTeamSignalError() instead")
    void orgCreateTeamSignalE(OAITeam summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgCreateTeamSignalError(OAITeam summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgDeleteSignalError() instead")
    void orgDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgDeleteHookSignalError() instead")
    void orgDeleteHookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgDeleteHookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgDeleteLabelSignalError() instead")
    void orgDeleteLabelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgDeleteLabelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgDeleteMemberSignalError() instead")
    void orgDeleteMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgDeleteMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgDeleteTeamSignalError() instead")
    void orgDeleteTeamSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgDeleteTeamSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgEditSignalError() instead")
    void orgEditSignalE(OAIOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgEditSignalError(OAIOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgEditHookSignalError() instead")
    void orgEditHookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgEditHookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgEditLabelSignalError() instead")
    void orgEditLabelSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgEditLabelSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgEditTeamSignalError() instead")
    void orgEditTeamSignalE(OAITeam summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgEditTeamSignalError(OAITeam summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgGetSignalError() instead")
    void orgGetSignalE(OAIOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgGetSignalError(OAIOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgGetAllSignalError() instead")
    void orgGetAllSignalE(QList<OAIOrganization> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgGetAllSignalError(QList<OAIOrganization> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgGetHookSignalError() instead")
    void orgGetHookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgGetHookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgGetLabelSignalError() instead")
    void orgGetLabelSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgGetLabelSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgGetTeamSignalError() instead")
    void orgGetTeamSignalE(OAITeam summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgGetTeamSignalError(OAITeam summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgGetUserPermissionsSignalError() instead")
    void orgGetUserPermissionsSignalE(OAIOrganizationPermissions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgGetUserPermissionsSignalError(OAIOrganizationPermissions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgIsMemberSignalError() instead")
    void orgIsMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgIsMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgIsPublicMemberSignalError() instead")
    void orgIsPublicMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgIsPublicMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListActivityFeedsSignalError() instead")
    void orgListActivityFeedsSignalE(QList<OAIActivity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListActivityFeedsSignalError(QList<OAIActivity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListCurrentUserOrgsSignalError() instead")
    void orgListCurrentUserOrgsSignalE(QList<OAIOrganization> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListCurrentUserOrgsSignalError(QList<OAIOrganization> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListHooksSignalError() instead")
    void orgListHooksSignalE(QList<OAIHook> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListHooksSignalError(QList<OAIHook> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListLabelsSignalError() instead")
    void orgListLabelsSignalE(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListLabelsSignalError(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListMembersSignalError() instead")
    void orgListMembersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListMembersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListPublicMembersSignalError() instead")
    void orgListPublicMembersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListPublicMembersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListReposSignalError() instead")
    void orgListReposSignalE(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListReposSignalError(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListTeamActivityFeedsSignalError() instead")
    void orgListTeamActivityFeedsSignalE(QList<OAIActivity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListTeamActivityFeedsSignalError(QList<OAIActivity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListTeamMemberSignalError() instead")
    void orgListTeamMemberSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListTeamMemberSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListTeamMembersSignalError() instead")
    void orgListTeamMembersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListTeamMembersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListTeamRepoSignalError() instead")
    void orgListTeamRepoSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListTeamRepoSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListTeamReposSignalError() instead")
    void orgListTeamReposSignalE(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListTeamReposSignalError(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListTeamsSignalError() instead")
    void orgListTeamsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListTeamsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListUserOrgsSignalError() instead")
    void orgListUserOrgsSignalE(QList<OAIOrganization> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListUserOrgsSignalError(QList<OAIOrganization> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgPublicizeMemberSignalError() instead")
    void orgPublicizeMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgPublicizeMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgRemoveTeamMemberSignalError() instead")
    void orgRemoveTeamMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgRemoveTeamMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgRemoveTeamRepositorySignalError() instead")
    void orgRemoveTeamRepositorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgRemoveTeamRepositorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamSearchSignalError() instead")
    void teamSearchSignalE(OAITeamSearch_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamSearchSignalError(OAITeamSearch_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createOrgRepoSignalErrorFull() instead")
    void createOrgRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrgRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrgRepoDeprecatedSignalErrorFull() instead")
    void createOrgRepoDeprecatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrgRepoDeprecatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgAddTeamMemberSignalErrorFull() instead")
    void orgAddTeamMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgAddTeamMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgAddTeamRepositorySignalErrorFull() instead")
    void orgAddTeamRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgAddTeamRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgConcealMemberSignalErrorFull() instead")
    void orgConcealMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgConcealMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgCreateSignalErrorFull() instead")
    void orgCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgCreateHookSignalErrorFull() instead")
    void orgCreateHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgCreateHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgCreateLabelSignalErrorFull() instead")
    void orgCreateLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgCreateLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgCreateTeamSignalErrorFull() instead")
    void orgCreateTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgCreateTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgDeleteSignalErrorFull() instead")
    void orgDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgDeleteHookSignalErrorFull() instead")
    void orgDeleteHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgDeleteHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgDeleteLabelSignalErrorFull() instead")
    void orgDeleteLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgDeleteLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgDeleteMemberSignalErrorFull() instead")
    void orgDeleteMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgDeleteMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgDeleteTeamSignalErrorFull() instead")
    void orgDeleteTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgDeleteTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgEditSignalErrorFull() instead")
    void orgEditSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgEditSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgEditHookSignalErrorFull() instead")
    void orgEditHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgEditHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgEditLabelSignalErrorFull() instead")
    void orgEditLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgEditLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgEditTeamSignalErrorFull() instead")
    void orgEditTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgEditTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgGetSignalErrorFull() instead")
    void orgGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgGetAllSignalErrorFull() instead")
    void orgGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgGetHookSignalErrorFull() instead")
    void orgGetHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgGetHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgGetLabelSignalErrorFull() instead")
    void orgGetLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgGetLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgGetTeamSignalErrorFull() instead")
    void orgGetTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgGetTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgGetUserPermissionsSignalErrorFull() instead")
    void orgGetUserPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgGetUserPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgIsMemberSignalErrorFull() instead")
    void orgIsMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgIsMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgIsPublicMemberSignalErrorFull() instead")
    void orgIsPublicMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgIsPublicMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListActivityFeedsSignalErrorFull() instead")
    void orgListActivityFeedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListActivityFeedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListCurrentUserOrgsSignalErrorFull() instead")
    void orgListCurrentUserOrgsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListCurrentUserOrgsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListHooksSignalErrorFull() instead")
    void orgListHooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListHooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListLabelsSignalErrorFull() instead")
    void orgListLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListMembersSignalErrorFull() instead")
    void orgListMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListPublicMembersSignalErrorFull() instead")
    void orgListPublicMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListPublicMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListReposSignalErrorFull() instead")
    void orgListReposSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListReposSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListTeamActivityFeedsSignalErrorFull() instead")
    void orgListTeamActivityFeedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListTeamActivityFeedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListTeamMemberSignalErrorFull() instead")
    void orgListTeamMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListTeamMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListTeamMembersSignalErrorFull() instead")
    void orgListTeamMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListTeamMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListTeamRepoSignalErrorFull() instead")
    void orgListTeamRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListTeamRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListTeamReposSignalErrorFull() instead")
    void orgListTeamReposSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListTeamReposSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListTeamsSignalErrorFull() instead")
    void orgListTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgListUserOrgsSignalErrorFull() instead")
    void orgListUserOrgsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgListUserOrgsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgPublicizeMemberSignalErrorFull() instead")
    void orgPublicizeMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgPublicizeMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgRemoveTeamMemberSignalErrorFull() instead")
    void orgRemoveTeamMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgRemoveTeamMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgRemoveTeamRepositorySignalErrorFull() instead")
    void orgRemoveTeamRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgRemoveTeamRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamSearchSignalErrorFull() instead")
    void teamSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
