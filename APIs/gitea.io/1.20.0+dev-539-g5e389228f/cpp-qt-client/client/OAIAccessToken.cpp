/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessToken::OAIAccessToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessToken::OAIAccessToken() {
    this->initializeModel();
}

OAIAccessToken::~OAIAccessToken() {}

void OAIAccessToken::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_sha1_isSet = false;
    m_sha1_isValid = false;

    m_token_last_eight_isSet = false;
    m_token_last_eight_isValid = false;
}

void OAIAccessToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessToken::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_sha1_isValid = ::OpenAPI::fromJsonValue(m_sha1, json[QString("sha1")]);
    m_sha1_isSet = !json[QString("sha1")].isNull() && m_sha1_isValid;

    m_token_last_eight_isValid = ::OpenAPI::fromJsonValue(m_token_last_eight, json[QString("token_last_eight")]);
    m_token_last_eight_isSet = !json[QString("token_last_eight")].isNull() && m_token_last_eight_isValid;
}

QString OAIAccessToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessToken::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_sha1_isSet) {
        obj.insert(QString("sha1"), ::OpenAPI::toJsonValue(m_sha1));
    }
    if (m_token_last_eight_isSet) {
        obj.insert(QString("token_last_eight"), ::OpenAPI::toJsonValue(m_token_last_eight));
    }
    return obj;
}

qint64 OAIAccessToken::getId() const {
    return m_id;
}
void OAIAccessToken::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccessToken::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccessToken::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAccessToken::getName() const {
    return m_name;
}
void OAIAccessToken::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccessToken::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccessToken::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIAccessToken::getScopes() const {
    return m_scopes;
}
void OAIAccessToken::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIAccessToken::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIAccessToken::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QString OAIAccessToken::getSha1() const {
    return m_sha1;
}
void OAIAccessToken::setSha1(const QString &sha1) {
    m_sha1 = sha1;
    m_sha1_isSet = true;
}

bool OAIAccessToken::is_sha1_Set() const{
    return m_sha1_isSet;
}

bool OAIAccessToken::is_sha1_Valid() const{
    return m_sha1_isValid;
}

QString OAIAccessToken::getTokenLastEight() const {
    return m_token_last_eight;
}
void OAIAccessToken::setTokenLastEight(const QString &token_last_eight) {
    m_token_last_eight = token_last_eight;
    m_token_last_eight_isSet = true;
}

bool OAIAccessToken::is_token_last_eight_Set() const{
    return m_token_last_eight_isSet;
}

bool OAIAccessToken::is_token_last_eight_Valid() const{
    return m_token_last_eight_isValid;
}

bool OAIAccessToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_last_eight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
