/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGitTreeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGitTreeResponse::OAIGitTreeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGitTreeResponse::OAIGitTreeResponse() {
    this->initializeModel();
}

OAIGitTreeResponse::~OAIGitTreeResponse() {}

void OAIGitTreeResponse::initializeModel() {

    m_page_isSet = false;
    m_page_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;

    m_tree_isSet = false;
    m_tree_isValid = false;

    m_truncated_isSet = false;
    m_truncated_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIGitTreeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGitTreeResponse::fromJsonObject(QJsonObject json) {

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("total_count")]);
    m_total_count_isSet = !json[QString("total_count")].isNull() && m_total_count_isValid;

    m_tree_isValid = ::OpenAPI::fromJsonValue(m_tree, json[QString("tree")]);
    m_tree_isSet = !json[QString("tree")].isNull() && m_tree_isValid;

    m_truncated_isValid = ::OpenAPI::fromJsonValue(m_truncated, json[QString("truncated")]);
    m_truncated_isSet = !json[QString("truncated")].isNull() && m_truncated_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIGitTreeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGitTreeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("total_count"), ::OpenAPI::toJsonValue(m_total_count));
    }
    if (m_tree.size() > 0) {
        obj.insert(QString("tree"), ::OpenAPI::toJsonValue(m_tree));
    }
    if (m_truncated_isSet) {
        obj.insert(QString("truncated"), ::OpenAPI::toJsonValue(m_truncated));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint64 OAIGitTreeResponse::getPage() const {
    return m_page;
}
void OAIGitTreeResponse::setPage(const qint64 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIGitTreeResponse::is_page_Set() const{
    return m_page_isSet;
}

bool OAIGitTreeResponse::is_page_Valid() const{
    return m_page_isValid;
}

QString OAIGitTreeResponse::getSha() const {
    return m_sha;
}
void OAIGitTreeResponse::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAIGitTreeResponse::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAIGitTreeResponse::is_sha_Valid() const{
    return m_sha_isValid;
}

qint64 OAIGitTreeResponse::getTotalCount() const {
    return m_total_count;
}
void OAIGitTreeResponse::setTotalCount(const qint64 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIGitTreeResponse::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIGitTreeResponse::is_total_count_Valid() const{
    return m_total_count_isValid;
}

QList<OAIGitEntry> OAIGitTreeResponse::getTree() const {
    return m_tree;
}
void OAIGitTreeResponse::setTree(const QList<OAIGitEntry> &tree) {
    m_tree = tree;
    m_tree_isSet = true;
}

bool OAIGitTreeResponse::is_tree_Set() const{
    return m_tree_isSet;
}

bool OAIGitTreeResponse::is_tree_Valid() const{
    return m_tree_isValid;
}

bool OAIGitTreeResponse::isTruncated() const {
    return m_truncated;
}
void OAIGitTreeResponse::setTruncated(const bool &truncated) {
    m_truncated = truncated;
    m_truncated_isSet = true;
}

bool OAIGitTreeResponse::is_truncated_Set() const{
    return m_truncated_isSet;
}

bool OAIGitTreeResponse::is_truncated_Valid() const{
    return m_truncated_isValid;
}

QString OAIGitTreeResponse::getUrl() const {
    return m_url;
}
void OAIGitTreeResponse::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGitTreeResponse::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGitTreeResponse::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIGitTreeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tree.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGitTreeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
