/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEditTeamOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEditTeamOption::OAIEditTeamOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEditTeamOption::OAIEditTeamOption() {
    this->initializeModel();
}

OAIEditTeamOption::~OAIEditTeamOption() {}

void OAIEditTeamOption::initializeModel() {

    m_can_create_org_repo_isSet = false;
    m_can_create_org_repo_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_includes_all_repositories_isSet = false;
    m_includes_all_repositories_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;

    m_units_map_isSet = false;
    m_units_map_isValid = false;
}

void OAIEditTeamOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEditTeamOption::fromJsonObject(QJsonObject json) {

    m_can_create_org_repo_isValid = ::OpenAPI::fromJsonValue(m_can_create_org_repo, json[QString("can_create_org_repo")]);
    m_can_create_org_repo_isSet = !json[QString("can_create_org_repo")].isNull() && m_can_create_org_repo_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_includes_all_repositories_isValid = ::OpenAPI::fromJsonValue(m_includes_all_repositories, json[QString("includes_all_repositories")]);
    m_includes_all_repositories_isSet = !json[QString("includes_all_repositories")].isNull() && m_includes_all_repositories_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;

    m_units_map_isValid = ::OpenAPI::fromJsonValue(m_units_map, json[QString("units_map")]);
    m_units_map_isSet = !json[QString("units_map")].isNull() && m_units_map_isValid;
}

QString OAIEditTeamOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEditTeamOption::asJsonObject() const {
    QJsonObject obj;
    if (m_can_create_org_repo_isSet) {
        obj.insert(QString("can_create_org_repo"), ::OpenAPI::toJsonValue(m_can_create_org_repo));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_includes_all_repositories_isSet) {
        obj.insert(QString("includes_all_repositories"), ::OpenAPI::toJsonValue(m_includes_all_repositories));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permission_isSet) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_units.size() > 0) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    if (m_units_map.size() > 0) {
        obj.insert(QString("units_map"), ::OpenAPI::toJsonValue(m_units_map));
    }
    return obj;
}

bool OAIEditTeamOption::isCanCreateOrgRepo() const {
    return m_can_create_org_repo;
}
void OAIEditTeamOption::setCanCreateOrgRepo(const bool &can_create_org_repo) {
    m_can_create_org_repo = can_create_org_repo;
    m_can_create_org_repo_isSet = true;
}

bool OAIEditTeamOption::is_can_create_org_repo_Set() const{
    return m_can_create_org_repo_isSet;
}

bool OAIEditTeamOption::is_can_create_org_repo_Valid() const{
    return m_can_create_org_repo_isValid;
}

QString OAIEditTeamOption::getDescription() const {
    return m_description;
}
void OAIEditTeamOption::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEditTeamOption::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEditTeamOption::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIEditTeamOption::isIncludesAllRepositories() const {
    return m_includes_all_repositories;
}
void OAIEditTeamOption::setIncludesAllRepositories(const bool &includes_all_repositories) {
    m_includes_all_repositories = includes_all_repositories;
    m_includes_all_repositories_isSet = true;
}

bool OAIEditTeamOption::is_includes_all_repositories_Set() const{
    return m_includes_all_repositories_isSet;
}

bool OAIEditTeamOption::is_includes_all_repositories_Valid() const{
    return m_includes_all_repositories_isValid;
}

QString OAIEditTeamOption::getName() const {
    return m_name;
}
void OAIEditTeamOption::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEditTeamOption::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEditTeamOption::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEditTeamOption::getPermission() const {
    return m_permission;
}
void OAIEditTeamOption::setPermission(const QString &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIEditTeamOption::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIEditTeamOption::is_permission_Valid() const{
    return m_permission_isValid;
}

QList<QString> OAIEditTeamOption::getUnits() const {
    return m_units;
}
void OAIEditTeamOption::setUnits(const QList<QString> &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAIEditTeamOption::is_units_Set() const{
    return m_units_isSet;
}

bool OAIEditTeamOption::is_units_Valid() const{
    return m_units_isValid;
}

QMap<QString, QString> OAIEditTeamOption::getUnitsMap() const {
    return m_units_map;
}
void OAIEditTeamOption::setUnitsMap(const QMap<QString, QString> &units_map) {
    m_units_map = units_map;
    m_units_map_isSet = true;
}

bool OAIEditTeamOption::is_units_map_Set() const{
    return m_units_map_isSet;
}

bool OAIEditTeamOption::is_units_map_Valid() const{
    return m_units_map_isValid;
}

bool OAIEditTeamOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_create_org_repo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_includes_all_repositories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEditTeamOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
