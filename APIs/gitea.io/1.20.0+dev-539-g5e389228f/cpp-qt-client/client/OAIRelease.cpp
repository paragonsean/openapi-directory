/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelease.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelease::OAIRelease(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelease::OAIRelease() {
    this->initializeModel();
}

OAIRelease::~OAIRelease() {}

void OAIRelease::initializeModel() {

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_draft_isSet = false;
    m_draft_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_prerelease_isSet = false;
    m_prerelease_isValid = false;

    m_published_at_isSet = false;
    m_published_at_isValid = false;

    m_tag_name_isSet = false;
    m_tag_name_isValid = false;

    m_tarball_url_isSet = false;
    m_tarball_url_isValid = false;

    m_target_commitish_isSet = false;
    m_target_commitish_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_zipball_url_isSet = false;
    m_zipball_url_isValid = false;
}

void OAIRelease::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelease::fromJsonObject(QJsonObject json) {

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_draft_isValid = ::OpenAPI::fromJsonValue(m_draft, json[QString("draft")]);
    m_draft_isSet = !json[QString("draft")].isNull() && m_draft_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_prerelease_isValid = ::OpenAPI::fromJsonValue(m_prerelease, json[QString("prerelease")]);
    m_prerelease_isSet = !json[QString("prerelease")].isNull() && m_prerelease_isValid;

    m_published_at_isValid = ::OpenAPI::fromJsonValue(m_published_at, json[QString("published_at")]);
    m_published_at_isSet = !json[QString("published_at")].isNull() && m_published_at_isValid;

    m_tag_name_isValid = ::OpenAPI::fromJsonValue(m_tag_name, json[QString("tag_name")]);
    m_tag_name_isSet = !json[QString("tag_name")].isNull() && m_tag_name_isValid;

    m_tarball_url_isValid = ::OpenAPI::fromJsonValue(m_tarball_url, json[QString("tarball_url")]);
    m_tarball_url_isSet = !json[QString("tarball_url")].isNull() && m_tarball_url_isValid;

    m_target_commitish_isValid = ::OpenAPI::fromJsonValue(m_target_commitish, json[QString("target_commitish")]);
    m_target_commitish_isSet = !json[QString("target_commitish")].isNull() && m_target_commitish_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_zipball_url_isValid = ::OpenAPI::fromJsonValue(m_zipball_url, json[QString("zipball_url")]);
    m_zipball_url_isSet = !json[QString("zipball_url")].isNull() && m_zipball_url_isValid;
}

QString OAIRelease::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelease::asJsonObject() const {
    QJsonObject obj;
    if (m_assets.size() > 0) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_draft_isSet) {
        obj.insert(QString("draft"), ::OpenAPI::toJsonValue(m_draft));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_prerelease_isSet) {
        obj.insert(QString("prerelease"), ::OpenAPI::toJsonValue(m_prerelease));
    }
    if (m_published_at_isSet) {
        obj.insert(QString("published_at"), ::OpenAPI::toJsonValue(m_published_at));
    }
    if (m_tag_name_isSet) {
        obj.insert(QString("tag_name"), ::OpenAPI::toJsonValue(m_tag_name));
    }
    if (m_tarball_url_isSet) {
        obj.insert(QString("tarball_url"), ::OpenAPI::toJsonValue(m_tarball_url));
    }
    if (m_target_commitish_isSet) {
        obj.insert(QString("target_commitish"), ::OpenAPI::toJsonValue(m_target_commitish));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_zipball_url_isSet) {
        obj.insert(QString("zipball_url"), ::OpenAPI::toJsonValue(m_zipball_url));
    }
    return obj;
}

QList<OAIAttachment> OAIRelease::getAssets() const {
    return m_assets;
}
void OAIRelease::setAssets(const QList<OAIAttachment> &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIRelease::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIRelease::is_assets_Valid() const{
    return m_assets_isValid;
}

OAIUser OAIRelease::getAuthor() const {
    return m_author;
}
void OAIRelease::setAuthor(const OAIUser &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIRelease::is_author_Set() const{
    return m_author_isSet;
}

bool OAIRelease::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIRelease::getBody() const {
    return m_body;
}
void OAIRelease::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIRelease::is_body_Set() const{
    return m_body_isSet;
}

bool OAIRelease::is_body_Valid() const{
    return m_body_isValid;
}

QDateTime OAIRelease::getCreatedAt() const {
    return m_created_at;
}
void OAIRelease::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRelease::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRelease::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIRelease::isDraft() const {
    return m_draft;
}
void OAIRelease::setDraft(const bool &draft) {
    m_draft = draft;
    m_draft_isSet = true;
}

bool OAIRelease::is_draft_Set() const{
    return m_draft_isSet;
}

bool OAIRelease::is_draft_Valid() const{
    return m_draft_isValid;
}

QString OAIRelease::getHtmlUrl() const {
    return m_html_url;
}
void OAIRelease::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIRelease::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIRelease::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint64 OAIRelease::getId() const {
    return m_id;
}
void OAIRelease::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRelease::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRelease::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRelease::getName() const {
    return m_name;
}
void OAIRelease::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRelease::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRelease::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIRelease::isPrerelease() const {
    return m_prerelease;
}
void OAIRelease::setPrerelease(const bool &prerelease) {
    m_prerelease = prerelease;
    m_prerelease_isSet = true;
}

bool OAIRelease::is_prerelease_Set() const{
    return m_prerelease_isSet;
}

bool OAIRelease::is_prerelease_Valid() const{
    return m_prerelease_isValid;
}

QDateTime OAIRelease::getPublishedAt() const {
    return m_published_at;
}
void OAIRelease::setPublishedAt(const QDateTime &published_at) {
    m_published_at = published_at;
    m_published_at_isSet = true;
}

bool OAIRelease::is_published_at_Set() const{
    return m_published_at_isSet;
}

bool OAIRelease::is_published_at_Valid() const{
    return m_published_at_isValid;
}

QString OAIRelease::getTagName() const {
    return m_tag_name;
}
void OAIRelease::setTagName(const QString &tag_name) {
    m_tag_name = tag_name;
    m_tag_name_isSet = true;
}

bool OAIRelease::is_tag_name_Set() const{
    return m_tag_name_isSet;
}

bool OAIRelease::is_tag_name_Valid() const{
    return m_tag_name_isValid;
}

QString OAIRelease::getTarballUrl() const {
    return m_tarball_url;
}
void OAIRelease::setTarballUrl(const QString &tarball_url) {
    m_tarball_url = tarball_url;
    m_tarball_url_isSet = true;
}

bool OAIRelease::is_tarball_url_Set() const{
    return m_tarball_url_isSet;
}

bool OAIRelease::is_tarball_url_Valid() const{
    return m_tarball_url_isValid;
}

QString OAIRelease::getTargetCommitish() const {
    return m_target_commitish;
}
void OAIRelease::setTargetCommitish(const QString &target_commitish) {
    m_target_commitish = target_commitish;
    m_target_commitish_isSet = true;
}

bool OAIRelease::is_target_commitish_Set() const{
    return m_target_commitish_isSet;
}

bool OAIRelease::is_target_commitish_Valid() const{
    return m_target_commitish_isValid;
}

QString OAIRelease::getUrl() const {
    return m_url;
}
void OAIRelease::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIRelease::is_url_Set() const{
    return m_url_isSet;
}

bool OAIRelease::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIRelease::getZipballUrl() const {
    return m_zipball_url;
}
void OAIRelease::setZipballUrl(const QString &zipball_url) {
    m_zipball_url = zipball_url;
    m_zipball_url_isSet = true;
}

bool OAIRelease::is_zipball_url_Set() const{
    return m_zipball_url_isSet;
}

bool OAIRelease::is_zipball_url_Valid() const{
    return m_zipball_url_isValid;
}

bool OAIRelease::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prerelease_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tarball_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_commitish_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zipball_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelease::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
