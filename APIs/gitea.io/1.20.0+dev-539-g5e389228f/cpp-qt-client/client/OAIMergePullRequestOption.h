/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMergePullRequestOption.h
 *
 * MergePullRequestForm form for merging Pull Request
 */

#ifndef OAIMergePullRequestOption_H
#define OAIMergePullRequestOption_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMergePullRequestOption : public OAIObject {
public:
    OAIMergePullRequestOption();
    OAIMergePullRequestOption(QString json);
    ~OAIMergePullRequestOption() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRDo() const;
    void setRDo(const QString &r_do);
    bool is_r_do_Set() const;
    bool is_r_do_Valid() const;

    QString getMergeCommitId() const;
    void setMergeCommitId(const QString &merge_commit_id);
    bool is_merge_commit_id_Set() const;
    bool is_merge_commit_id_Valid() const;

    QString getMergeMessageField() const;
    void setMergeMessageField(const QString &merge_message_field);
    bool is_merge_message_field_Set() const;
    bool is_merge_message_field_Valid() const;

    QString getMergeTitleField() const;
    void setMergeTitleField(const QString &merge_title_field);
    bool is_merge_title_field_Set() const;
    bool is_merge_title_field_Valid() const;

    bool isDeleteBranchAfterMerge() const;
    void setDeleteBranchAfterMerge(const bool &delete_branch_after_merge);
    bool is_delete_branch_after_merge_Set() const;
    bool is_delete_branch_after_merge_Valid() const;

    bool isForceMerge() const;
    void setForceMerge(const bool &force_merge);
    bool is_force_merge_Set() const;
    bool is_force_merge_Valid() const;

    QString getHeadCommitId() const;
    void setHeadCommitId(const QString &head_commit_id);
    bool is_head_commit_id_Set() const;
    bool is_head_commit_id_Valid() const;

    bool isMergeWhenChecksSucceed() const;
    void setMergeWhenChecksSucceed(const bool &merge_when_checks_succeed);
    bool is_merge_when_checks_succeed_Set() const;
    bool is_merge_when_checks_succeed_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_r_do;
    bool m_r_do_isSet;
    bool m_r_do_isValid;

    QString m_merge_commit_id;
    bool m_merge_commit_id_isSet;
    bool m_merge_commit_id_isValid;

    QString m_merge_message_field;
    bool m_merge_message_field_isSet;
    bool m_merge_message_field_isValid;

    QString m_merge_title_field;
    bool m_merge_title_field_isSet;
    bool m_merge_title_field_isValid;

    bool m_delete_branch_after_merge;
    bool m_delete_branch_after_merge_isSet;
    bool m_delete_branch_after_merge_isValid;

    bool m_force_merge;
    bool m_force_merge_isSet;
    bool m_force_merge_isValid;

    QString m_head_commit_id;
    bool m_head_commit_id_isSet;
    bool m_head_commit_id_isValid;

    bool m_merge_when_checks_succeed;
    bool m_merge_when_checks_succeed_isSet;
    bool m_merge_when_checks_succeed_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMergePullRequestOption)

#endif // OAIMergePullRequestOption_H
