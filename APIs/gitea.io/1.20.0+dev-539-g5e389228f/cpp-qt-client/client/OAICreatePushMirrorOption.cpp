/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePushMirrorOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePushMirrorOption::OAICreatePushMirrorOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePushMirrorOption::OAICreatePushMirrorOption() {
    this->initializeModel();
}

OAICreatePushMirrorOption::~OAICreatePushMirrorOption() {}

void OAICreatePushMirrorOption::initializeModel() {

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_remote_address_isSet = false;
    m_remote_address_isValid = false;

    m_remote_password_isSet = false;
    m_remote_password_isValid = false;

    m_remote_username_isSet = false;
    m_remote_username_isValid = false;

    m_sync_on_commit_isSet = false;
    m_sync_on_commit_isValid = false;
}

void OAICreatePushMirrorOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePushMirrorOption::fromJsonObject(QJsonObject json) {

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_remote_address_isValid = ::OpenAPI::fromJsonValue(m_remote_address, json[QString("remote_address")]);
    m_remote_address_isSet = !json[QString("remote_address")].isNull() && m_remote_address_isValid;

    m_remote_password_isValid = ::OpenAPI::fromJsonValue(m_remote_password, json[QString("remote_password")]);
    m_remote_password_isSet = !json[QString("remote_password")].isNull() && m_remote_password_isValid;

    m_remote_username_isValid = ::OpenAPI::fromJsonValue(m_remote_username, json[QString("remote_username")]);
    m_remote_username_isSet = !json[QString("remote_username")].isNull() && m_remote_username_isValid;

    m_sync_on_commit_isValid = ::OpenAPI::fromJsonValue(m_sync_on_commit, json[QString("sync_on_commit")]);
    m_sync_on_commit_isSet = !json[QString("sync_on_commit")].isNull() && m_sync_on_commit_isValid;
}

QString OAICreatePushMirrorOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePushMirrorOption::asJsonObject() const {
    QJsonObject obj;
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_remote_address_isSet) {
        obj.insert(QString("remote_address"), ::OpenAPI::toJsonValue(m_remote_address));
    }
    if (m_remote_password_isSet) {
        obj.insert(QString("remote_password"), ::OpenAPI::toJsonValue(m_remote_password));
    }
    if (m_remote_username_isSet) {
        obj.insert(QString("remote_username"), ::OpenAPI::toJsonValue(m_remote_username));
    }
    if (m_sync_on_commit_isSet) {
        obj.insert(QString("sync_on_commit"), ::OpenAPI::toJsonValue(m_sync_on_commit));
    }
    return obj;
}

QString OAICreatePushMirrorOption::getInterval() const {
    return m_interval;
}
void OAICreatePushMirrorOption::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAICreatePushMirrorOption::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAICreatePushMirrorOption::is_interval_Valid() const{
    return m_interval_isValid;
}

QString OAICreatePushMirrorOption::getRemoteAddress() const {
    return m_remote_address;
}
void OAICreatePushMirrorOption::setRemoteAddress(const QString &remote_address) {
    m_remote_address = remote_address;
    m_remote_address_isSet = true;
}

bool OAICreatePushMirrorOption::is_remote_address_Set() const{
    return m_remote_address_isSet;
}

bool OAICreatePushMirrorOption::is_remote_address_Valid() const{
    return m_remote_address_isValid;
}

QString OAICreatePushMirrorOption::getRemotePassword() const {
    return m_remote_password;
}
void OAICreatePushMirrorOption::setRemotePassword(const QString &remote_password) {
    m_remote_password = remote_password;
    m_remote_password_isSet = true;
}

bool OAICreatePushMirrorOption::is_remote_password_Set() const{
    return m_remote_password_isSet;
}

bool OAICreatePushMirrorOption::is_remote_password_Valid() const{
    return m_remote_password_isValid;
}

QString OAICreatePushMirrorOption::getRemoteUsername() const {
    return m_remote_username;
}
void OAICreatePushMirrorOption::setRemoteUsername(const QString &remote_username) {
    m_remote_username = remote_username;
    m_remote_username_isSet = true;
}

bool OAICreatePushMirrorOption::is_remote_username_Set() const{
    return m_remote_username_isSet;
}

bool OAICreatePushMirrorOption::is_remote_username_Valid() const{
    return m_remote_username_isValid;
}

bool OAICreatePushMirrorOption::isSyncOnCommit() const {
    return m_sync_on_commit;
}
void OAICreatePushMirrorOption::setSyncOnCommit(const bool &sync_on_commit) {
    m_sync_on_commit = sync_on_commit;
    m_sync_on_commit_isSet = true;
}

bool OAICreatePushMirrorOption::is_sync_on_commit_Set() const{
    return m_sync_on_commit_isSet;
}

bool OAICreatePushMirrorOption::is_sync_on_commit_Valid() const{
    return m_sync_on_commit_isValid;
}

bool OAICreatePushMirrorOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_on_commit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePushMirrorOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
