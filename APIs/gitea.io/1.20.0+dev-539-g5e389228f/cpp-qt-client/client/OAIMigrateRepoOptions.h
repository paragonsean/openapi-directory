/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMigrateRepoOptions.h
 *
 * MigrateRepoOptions options for migrating repository&#39;s this is used to interact with api v1
 */

#ifndef OAIMigrateRepoOptions_H
#define OAIMigrateRepoOptions_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMigrateRepoOptions : public OAIObject {
public:
    OAIMigrateRepoOptions();
    OAIMigrateRepoOptions(QString json);
    ~OAIMigrateRepoOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthPassword() const;
    void setAuthPassword(const QString &auth_password);
    bool is_auth_password_Set() const;
    bool is_auth_password_Valid() const;

    QString getAuthToken() const;
    void setAuthToken(const QString &auth_token);
    bool is_auth_token_Set() const;
    bool is_auth_token_Valid() const;

    QString getAuthUsername() const;
    void setAuthUsername(const QString &auth_username);
    bool is_auth_username_Set() const;
    bool is_auth_username_Valid() const;

    QString getCloneAddr() const;
    void setCloneAddr(const QString &clone_addr);
    bool is_clone_addr_Set() const;
    bool is_clone_addr_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isIssues() const;
    void setIssues(const bool &issues);
    bool is_issues_Set() const;
    bool is_issues_Valid() const;

    bool isLabels() const;
    void setLabels(const bool &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    bool isLfs() const;
    void setLfs(const bool &lfs);
    bool is_lfs_Set() const;
    bool is_lfs_Valid() const;

    QString getLfsEndpoint() const;
    void setLfsEndpoint(const QString &lfs_endpoint);
    bool is_lfs_endpoint_Set() const;
    bool is_lfs_endpoint_Valid() const;

    bool isMilestones() const;
    void setMilestones(const bool &milestones);
    bool is_milestones_Set() const;
    bool is_milestones_Valid() const;

    bool isMirror() const;
    void setMirror(const bool &mirror);
    bool is_mirror_Set() const;
    bool is_mirror_Valid() const;

    QString getMirrorInterval() const;
    void setMirrorInterval(const QString &mirror_interval);
    bool is_mirror_interval_Set() const;
    bool is_mirror_interval_Valid() const;

    bool isRPrivate() const;
    void setRPrivate(const bool &r_private);
    bool is_r_private_Set() const;
    bool is_r_private_Valid() const;

    bool isPullRequests() const;
    void setPullRequests(const bool &pull_requests);
    bool is_pull_requests_Set() const;
    bool is_pull_requests_Valid() const;

    bool isReleases() const;
    void setReleases(const bool &releases);
    bool is_releases_Set() const;
    bool is_releases_Valid() const;

    QString getRepoName() const;
    void setRepoName(const QString &repo_name);
    bool is_repo_name_Set() const;
    bool is_repo_name_Valid() const;

    QString getRepoOwner() const;
    void setRepoOwner(const QString &repo_owner);
    bool is_repo_owner_Set() const;
    bool is_repo_owner_Valid() const;

    QString getService() const;
    void setService(const QString &service);
    bool is_service_Set() const;
    bool is_service_Valid() const;

    qint64 getUid() const;
    void setUid(const qint64 &uid);
    bool is_uid_Set() const;
    bool is_uid_Valid() const;

    bool isWiki() const;
    void setWiki(const bool &wiki);
    bool is_wiki_Set() const;
    bool is_wiki_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_auth_password;
    bool m_auth_password_isSet;
    bool m_auth_password_isValid;

    QString m_auth_token;
    bool m_auth_token_isSet;
    bool m_auth_token_isValid;

    QString m_auth_username;
    bool m_auth_username_isSet;
    bool m_auth_username_isValid;

    QString m_clone_addr;
    bool m_clone_addr_isSet;
    bool m_clone_addr_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_issues;
    bool m_issues_isSet;
    bool m_issues_isValid;

    bool m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    bool m_lfs;
    bool m_lfs_isSet;
    bool m_lfs_isValid;

    QString m_lfs_endpoint;
    bool m_lfs_endpoint_isSet;
    bool m_lfs_endpoint_isValid;

    bool m_milestones;
    bool m_milestones_isSet;
    bool m_milestones_isValid;

    bool m_mirror;
    bool m_mirror_isSet;
    bool m_mirror_isValid;

    QString m_mirror_interval;
    bool m_mirror_interval_isSet;
    bool m_mirror_interval_isValid;

    bool m_r_private;
    bool m_r_private_isSet;
    bool m_r_private_isValid;

    bool m_pull_requests;
    bool m_pull_requests_isSet;
    bool m_pull_requests_isValid;

    bool m_releases;
    bool m_releases_isSet;
    bool m_releases_isValid;

    QString m_repo_name;
    bool m_repo_name_isSet;
    bool m_repo_name_isValid;

    QString m_repo_owner;
    bool m_repo_owner_isSet;
    bool m_repo_owner_isValid;

    QString m_service;
    bool m_service_isSet;
    bool m_service_isValid;

    qint64 m_uid;
    bool m_uid_isSet;
    bool m_uid_isValid;

    bool m_wiki;
    bool m_wiki_isSet;
    bool m_wiki_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMigrateRepoOptions)

#endif // OAIMigrateRepoOptions_H
