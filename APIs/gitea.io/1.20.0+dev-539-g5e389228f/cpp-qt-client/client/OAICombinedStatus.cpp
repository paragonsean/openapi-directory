/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICombinedStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICombinedStatus::OAICombinedStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICombinedStatus::OAICombinedStatus() {
    this->initializeModel();
}

OAICombinedStatus::~OAICombinedStatus() {}

void OAICombinedStatus::initializeModel() {

    m_commit_url_isSet = false;
    m_commit_url_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_statuses_isSet = false;
    m_statuses_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICombinedStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICombinedStatus::fromJsonObject(QJsonObject json) {

    m_commit_url_isValid = ::OpenAPI::fromJsonValue(m_commit_url, json[QString("commit_url")]);
    m_commit_url_isSet = !json[QString("commit_url")].isNull() && m_commit_url_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_statuses_isValid = ::OpenAPI::fromJsonValue(m_statuses, json[QString("statuses")]);
    m_statuses_isSet = !json[QString("statuses")].isNull() && m_statuses_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("total_count")]);
    m_total_count_isSet = !json[QString("total_count")].isNull() && m_total_count_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICombinedStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICombinedStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_commit_url_isSet) {
        obj.insert(QString("commit_url"), ::OpenAPI::toJsonValue(m_commit_url));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_statuses.size() > 0) {
        obj.insert(QString("statuses"), ::OpenAPI::toJsonValue(m_statuses));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("total_count"), ::OpenAPI::toJsonValue(m_total_count));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAICombinedStatus::getCommitUrl() const {
    return m_commit_url;
}
void OAICombinedStatus::setCommitUrl(const QString &commit_url) {
    m_commit_url = commit_url;
    m_commit_url_isSet = true;
}

bool OAICombinedStatus::is_commit_url_Set() const{
    return m_commit_url_isSet;
}

bool OAICombinedStatus::is_commit_url_Valid() const{
    return m_commit_url_isValid;
}

OAIRepository OAICombinedStatus::getRepository() const {
    return m_repository;
}
void OAICombinedStatus::setRepository(const OAIRepository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAICombinedStatus::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAICombinedStatus::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAICombinedStatus::getSha() const {
    return m_sha;
}
void OAICombinedStatus::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAICombinedStatus::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAICombinedStatus::is_sha_Valid() const{
    return m_sha_isValid;
}

QString OAICombinedStatus::getState() const {
    return m_state;
}
void OAICombinedStatus::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICombinedStatus::is_state_Set() const{
    return m_state_isSet;
}

bool OAICombinedStatus::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAICommitStatus> OAICombinedStatus::getStatuses() const {
    return m_statuses;
}
void OAICombinedStatus::setStatuses(const QList<OAICommitStatus> &statuses) {
    m_statuses = statuses;
    m_statuses_isSet = true;
}

bool OAICombinedStatus::is_statuses_Set() const{
    return m_statuses_isSet;
}

bool OAICombinedStatus::is_statuses_Valid() const{
    return m_statuses_isValid;
}

qint64 OAICombinedStatus::getTotalCount() const {
    return m_total_count;
}
void OAICombinedStatus::setTotalCount(const qint64 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAICombinedStatus::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAICombinedStatus::is_total_count_Valid() const{
    return m_total_count_isValid;
}

QString OAICombinedStatus::getUrl() const {
    return m_url;
}
void OAICombinedStatus::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICombinedStatus::is_url_Set() const{
    return m_url_isSet;
}

bool OAICombinedStatus::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICombinedStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commit_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICombinedStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
