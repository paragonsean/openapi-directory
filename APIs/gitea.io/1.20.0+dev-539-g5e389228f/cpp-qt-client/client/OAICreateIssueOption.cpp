/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateIssueOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateIssueOption::OAICreateIssueOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateIssueOption::OAICreateIssueOption() {
    this->initializeModel();
}

OAICreateIssueOption::~OAICreateIssueOption() {}

void OAICreateIssueOption::initializeModel() {

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_assignees_isSet = false;
    m_assignees_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_milestone_isSet = false;
    m_milestone_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAICreateIssueOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateIssueOption::fromJsonObject(QJsonObject json) {

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_assignees_isValid = ::OpenAPI::fromJsonValue(m_assignees, json[QString("assignees")]);
    m_assignees_isSet = !json[QString("assignees")].isNull() && m_assignees_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("due_date")]);
    m_due_date_isSet = !json[QString("due_date")].isNull() && m_due_date_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_milestone_isValid = ::OpenAPI::fromJsonValue(m_milestone, json[QString("milestone")]);
    m_milestone_isSet = !json[QString("milestone")].isNull() && m_milestone_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAICreateIssueOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateIssueOption::asJsonObject() const {
    QJsonObject obj;
    if (m_assignee_isSet) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_assignees.size() > 0) {
        obj.insert(QString("assignees"), ::OpenAPI::toJsonValue(m_assignees));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("due_date"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_milestone_isSet) {
        obj.insert(QString("milestone"), ::OpenAPI::toJsonValue(m_milestone));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAICreateIssueOption::getAssignee() const {
    return m_assignee;
}
void OAICreateIssueOption::setAssignee(const QString &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAICreateIssueOption::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAICreateIssueOption::is_assignee_Valid() const{
    return m_assignee_isValid;
}

QList<QString> OAICreateIssueOption::getAssignees() const {
    return m_assignees;
}
void OAICreateIssueOption::setAssignees(const QList<QString> &assignees) {
    m_assignees = assignees;
    m_assignees_isSet = true;
}

bool OAICreateIssueOption::is_assignees_Set() const{
    return m_assignees_isSet;
}

bool OAICreateIssueOption::is_assignees_Valid() const{
    return m_assignees_isValid;
}

QString OAICreateIssueOption::getBody() const {
    return m_body;
}
void OAICreateIssueOption::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAICreateIssueOption::is_body_Set() const{
    return m_body_isSet;
}

bool OAICreateIssueOption::is_body_Valid() const{
    return m_body_isValid;
}

bool OAICreateIssueOption::isClosed() const {
    return m_closed;
}
void OAICreateIssueOption::setClosed(const bool &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAICreateIssueOption::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAICreateIssueOption::is_closed_Valid() const{
    return m_closed_isValid;
}

QDateTime OAICreateIssueOption::getDueDate() const {
    return m_due_date;
}
void OAICreateIssueOption::setDueDate(const QDateTime &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAICreateIssueOption::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAICreateIssueOption::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QList<qint64> OAICreateIssueOption::getLabels() const {
    return m_labels;
}
void OAICreateIssueOption::setLabels(const QList<qint64> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICreateIssueOption::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICreateIssueOption::is_labels_Valid() const{
    return m_labels_isValid;
}

qint64 OAICreateIssueOption::getMilestone() const {
    return m_milestone;
}
void OAICreateIssueOption::setMilestone(const qint64 &milestone) {
    m_milestone = milestone;
    m_milestone_isSet = true;
}

bool OAICreateIssueOption::is_milestone_Set() const{
    return m_milestone_isSet;
}

bool OAICreateIssueOption::is_milestone_Valid() const{
    return m_milestone_isValid;
}

QString OAICreateIssueOption::getRef() const {
    return m_ref;
}
void OAICreateIssueOption::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAICreateIssueOption::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAICreateIssueOption::is_ref_Valid() const{
    return m_ref_isValid;
}

QString OAICreateIssueOption::getTitle() const {
    return m_title;
}
void OAICreateIssueOption::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICreateIssueOption::is_title_Set() const{
    return m_title_isSet;
}

bool OAICreateIssueOption::is_title_Valid() const{
    return m_title_isValid;
}

bool OAICreateIssueOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateIssueOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_title_isValid && true;
}

} // namespace OpenAPI
