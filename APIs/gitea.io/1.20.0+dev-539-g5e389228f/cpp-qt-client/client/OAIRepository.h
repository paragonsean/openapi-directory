/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRepository.h
 *
 * Repository represents a repository
 */

#ifndef OAIRepository_H
#define OAIRepository_H

#include <QJsonObject>

#include "OAIExternalTracker.h"
#include "OAIExternalWiki.h"
#include "OAIInternalTracker.h"
#include "OAIPermission.h"
#include "OAIRepoTransfer.h"
#include "OAIUser.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExternalTracker;
class OAIExternalWiki;
class OAIInternalTracker;
class OAIUser;
class OAIPermission;
class OAIRepoTransfer;

class OAIRepository : public OAIObject {
public:
    OAIRepository();
    OAIRepository(QString json);
    ~OAIRepository() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowMergeCommits() const;
    void setAllowMergeCommits(const bool &allow_merge_commits);
    bool is_allow_merge_commits_Set() const;
    bool is_allow_merge_commits_Valid() const;

    bool isAllowRebase() const;
    void setAllowRebase(const bool &allow_rebase);
    bool is_allow_rebase_Set() const;
    bool is_allow_rebase_Valid() const;

    bool isAllowRebaseExplicit() const;
    void setAllowRebaseExplicit(const bool &allow_rebase_explicit);
    bool is_allow_rebase_explicit_Set() const;
    bool is_allow_rebase_explicit_Valid() const;

    bool isAllowRebaseUpdate() const;
    void setAllowRebaseUpdate(const bool &allow_rebase_update);
    bool is_allow_rebase_update_Set() const;
    bool is_allow_rebase_update_Valid() const;

    bool isAllowSquashMerge() const;
    void setAllowSquashMerge(const bool &allow_squash_merge);
    bool is_allow_squash_merge_Set() const;
    bool is_allow_squash_merge_Valid() const;

    bool isArchived() const;
    void setArchived(const bool &archived);
    bool is_archived_Set() const;
    bool is_archived_Valid() const;

    QString getAvatarUrl() const;
    void setAvatarUrl(const QString &avatar_url);
    bool is_avatar_url_Set() const;
    bool is_avatar_url_Valid() const;

    QString getCloneUrl() const;
    void setCloneUrl(const QString &clone_url);
    bool is_clone_url_Set() const;
    bool is_clone_url_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    bool isDefaultAllowMaintainerEdit() const;
    void setDefaultAllowMaintainerEdit(const bool &default_allow_maintainer_edit);
    bool is_default_allow_maintainer_edit_Set() const;
    bool is_default_allow_maintainer_edit_Valid() const;

    QString getDefaultBranch() const;
    void setDefaultBranch(const QString &default_branch);
    bool is_default_branch_Set() const;
    bool is_default_branch_Valid() const;

    bool isDefaultDeleteBranchAfterMerge() const;
    void setDefaultDeleteBranchAfterMerge(const bool &default_delete_branch_after_merge);
    bool is_default_delete_branch_after_merge_Set() const;
    bool is_default_delete_branch_after_merge_Valid() const;

    QString getDefaultMergeStyle() const;
    void setDefaultMergeStyle(const QString &default_merge_style);
    bool is_default_merge_style_Set() const;
    bool is_default_merge_style_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isEmpty() const;
    void setEmpty(const bool &empty);
    bool is_empty_Set() const;
    bool is_empty_Valid() const;

    OAIExternalTracker getExternalTracker() const;
    void setExternalTracker(const OAIExternalTracker &external_tracker);
    bool is_external_tracker_Set() const;
    bool is_external_tracker_Valid() const;

    OAIExternalWiki getExternalWiki() const;
    void setExternalWiki(const OAIExternalWiki &external_wiki);
    bool is_external_wiki_Set() const;
    bool is_external_wiki_Valid() const;

    bool isFork() const;
    void setFork(const bool &fork);
    bool is_fork_Set() const;
    bool is_fork_Valid() const;

    qint64 getForksCount() const;
    void setForksCount(const qint64 &forks_count);
    bool is_forks_count_Set() const;
    bool is_forks_count_Valid() const;

    QString getFullName() const;
    void setFullName(const QString &full_name);
    bool is_full_name_Set() const;
    bool is_full_name_Valid() const;

    bool isHasActions() const;
    void setHasActions(const bool &has_actions);
    bool is_has_actions_Set() const;
    bool is_has_actions_Valid() const;

    bool isHasIssues() const;
    void setHasIssues(const bool &has_issues);
    bool is_has_issues_Set() const;
    bool is_has_issues_Valid() const;

    bool isHasPackages() const;
    void setHasPackages(const bool &has_packages);
    bool is_has_packages_Set() const;
    bool is_has_packages_Valid() const;

    bool isHasProjects() const;
    void setHasProjects(const bool &has_projects);
    bool is_has_projects_Set() const;
    bool is_has_projects_Valid() const;

    bool isHasPullRequests() const;
    void setHasPullRequests(const bool &has_pull_requests);
    bool is_has_pull_requests_Set() const;
    bool is_has_pull_requests_Valid() const;

    bool isHasReleases() const;
    void setHasReleases(const bool &has_releases);
    bool is_has_releases_Set() const;
    bool is_has_releases_Valid() const;

    bool isHasWiki() const;
    void setHasWiki(const bool &has_wiki);
    bool is_has_wiki_Set() const;
    bool is_has_wiki_Valid() const;

    QString getHtmlUrl() const;
    void setHtmlUrl(const QString &html_url);
    bool is_html_url_Set() const;
    bool is_html_url_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIgnoreWhitespaceConflicts() const;
    void setIgnoreWhitespaceConflicts(const bool &ignore_whitespace_conflicts);
    bool is_ignore_whitespace_conflicts_Set() const;
    bool is_ignore_whitespace_conflicts_Valid() const;

    bool isInternal() const;
    void setInternal(const bool &internal);
    bool is_internal_Set() const;
    bool is_internal_Valid() const;

    OAIInternalTracker getInternalTracker() const;
    void setInternalTracker(const OAIInternalTracker &internal_tracker);
    bool is_internal_tracker_Set() const;
    bool is_internal_tracker_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QString getLanguagesUrl() const;
    void setLanguagesUrl(const QString &languages_url);
    bool is_languages_url_Set() const;
    bool is_languages_url_Valid() const;

    QString getLink() const;
    void setLink(const QString &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    bool isMirror() const;
    void setMirror(const bool &mirror);
    bool is_mirror_Set() const;
    bool is_mirror_Valid() const;

    QString getMirrorInterval() const;
    void setMirrorInterval(const QString &mirror_interval);
    bool is_mirror_interval_Set() const;
    bool is_mirror_interval_Valid() const;

    QDateTime getMirrorUpdated() const;
    void setMirrorUpdated(const QDateTime &mirror_updated);
    bool is_mirror_updated_Set() const;
    bool is_mirror_updated_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint64 getOpenIssuesCount() const;
    void setOpenIssuesCount(const qint64 &open_issues_count);
    bool is_open_issues_count_Set() const;
    bool is_open_issues_count_Valid() const;

    qint64 getOpenPrCounter() const;
    void setOpenPrCounter(const qint64 &open_pr_counter);
    bool is_open_pr_counter_Set() const;
    bool is_open_pr_counter_Valid() const;

    QString getOriginalUrl() const;
    void setOriginalUrl(const QString &original_url);
    bool is_original_url_Set() const;
    bool is_original_url_Valid() const;

    OAIUser getOwner() const;
    void setOwner(const OAIUser &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    OAIRepository getParent() const;
    void setParent(const OAIRepository &parent);
    bool is_parent_Set() const;
    bool is_parent_Valid() const;

    OAIPermission getPermissions() const;
    void setPermissions(const OAIPermission &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    bool isRPrivate() const;
    void setRPrivate(const bool &r_private);
    bool is_r_private_Set() const;
    bool is_r_private_Valid() const;

    qint64 getReleaseCounter() const;
    void setReleaseCounter(const qint64 &release_counter);
    bool is_release_counter_Set() const;
    bool is_release_counter_Valid() const;

    OAIRepoTransfer getRepoTransfer() const;
    void setRepoTransfer(const OAIRepoTransfer &repo_transfer);
    bool is_repo_transfer_Set() const;
    bool is_repo_transfer_Valid() const;

    qint64 getSize() const;
    void setSize(const qint64 &size);
    bool is_size_Set() const;
    bool is_size_Valid() const;

    QString getSshUrl() const;
    void setSshUrl(const QString &ssh_url);
    bool is_ssh_url_Set() const;
    bool is_ssh_url_Valid() const;

    qint64 getStarsCount() const;
    void setStarsCount(const qint64 &stars_count);
    bool is_stars_count_Set() const;
    bool is_stars_count_Valid() const;

    bool isRTemplate() const;
    void setRTemplate(const bool &r_template);
    bool is_r_template_Set() const;
    bool is_r_template_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    qint64 getWatchersCount() const;
    void setWatchersCount(const qint64 &watchers_count);
    bool is_watchers_count_Set() const;
    bool is_watchers_count_Valid() const;

    QString getWebsite() const;
    void setWebsite(const QString &website);
    bool is_website_Set() const;
    bool is_website_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_merge_commits;
    bool m_allow_merge_commits_isSet;
    bool m_allow_merge_commits_isValid;

    bool m_allow_rebase;
    bool m_allow_rebase_isSet;
    bool m_allow_rebase_isValid;

    bool m_allow_rebase_explicit;
    bool m_allow_rebase_explicit_isSet;
    bool m_allow_rebase_explicit_isValid;

    bool m_allow_rebase_update;
    bool m_allow_rebase_update_isSet;
    bool m_allow_rebase_update_isValid;

    bool m_allow_squash_merge;
    bool m_allow_squash_merge_isSet;
    bool m_allow_squash_merge_isValid;

    bool m_archived;
    bool m_archived_isSet;
    bool m_archived_isValid;

    QString m_avatar_url;
    bool m_avatar_url_isSet;
    bool m_avatar_url_isValid;

    QString m_clone_url;
    bool m_clone_url_isSet;
    bool m_clone_url_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    bool m_default_allow_maintainer_edit;
    bool m_default_allow_maintainer_edit_isSet;
    bool m_default_allow_maintainer_edit_isValid;

    QString m_default_branch;
    bool m_default_branch_isSet;
    bool m_default_branch_isValid;

    bool m_default_delete_branch_after_merge;
    bool m_default_delete_branch_after_merge_isSet;
    bool m_default_delete_branch_after_merge_isValid;

    QString m_default_merge_style;
    bool m_default_merge_style_isSet;
    bool m_default_merge_style_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_empty;
    bool m_empty_isSet;
    bool m_empty_isValid;

    OAIExternalTracker m_external_tracker;
    bool m_external_tracker_isSet;
    bool m_external_tracker_isValid;

    OAIExternalWiki m_external_wiki;
    bool m_external_wiki_isSet;
    bool m_external_wiki_isValid;

    bool m_fork;
    bool m_fork_isSet;
    bool m_fork_isValid;

    qint64 m_forks_count;
    bool m_forks_count_isSet;
    bool m_forks_count_isValid;

    QString m_full_name;
    bool m_full_name_isSet;
    bool m_full_name_isValid;

    bool m_has_actions;
    bool m_has_actions_isSet;
    bool m_has_actions_isValid;

    bool m_has_issues;
    bool m_has_issues_isSet;
    bool m_has_issues_isValid;

    bool m_has_packages;
    bool m_has_packages_isSet;
    bool m_has_packages_isValid;

    bool m_has_projects;
    bool m_has_projects_isSet;
    bool m_has_projects_isValid;

    bool m_has_pull_requests;
    bool m_has_pull_requests_isSet;
    bool m_has_pull_requests_isValid;

    bool m_has_releases;
    bool m_has_releases_isSet;
    bool m_has_releases_isValid;

    bool m_has_wiki;
    bool m_has_wiki_isSet;
    bool m_has_wiki_isValid;

    QString m_html_url;
    bool m_html_url_isSet;
    bool m_html_url_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_ignore_whitespace_conflicts;
    bool m_ignore_whitespace_conflicts_isSet;
    bool m_ignore_whitespace_conflicts_isValid;

    bool m_internal;
    bool m_internal_isSet;
    bool m_internal_isValid;

    OAIInternalTracker m_internal_tracker;
    bool m_internal_tracker_isSet;
    bool m_internal_tracker_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QString m_languages_url;
    bool m_languages_url_isSet;
    bool m_languages_url_isValid;

    QString m_link;
    bool m_link_isSet;
    bool m_link_isValid;

    bool m_mirror;
    bool m_mirror_isSet;
    bool m_mirror_isValid;

    QString m_mirror_interval;
    bool m_mirror_interval_isSet;
    bool m_mirror_interval_isValid;

    QDateTime m_mirror_updated;
    bool m_mirror_updated_isSet;
    bool m_mirror_updated_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint64 m_open_issues_count;
    bool m_open_issues_count_isSet;
    bool m_open_issues_count_isValid;

    qint64 m_open_pr_counter;
    bool m_open_pr_counter_isSet;
    bool m_open_pr_counter_isValid;

    QString m_original_url;
    bool m_original_url_isSet;
    bool m_original_url_isValid;

    OAIUser m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    OAIRepository m_parent;
    bool m_parent_isSet;
    bool m_parent_isValid;

    OAIPermission m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    bool m_r_private;
    bool m_r_private_isSet;
    bool m_r_private_isValid;

    qint64 m_release_counter;
    bool m_release_counter_isSet;
    bool m_release_counter_isValid;

    OAIRepoTransfer m_repo_transfer;
    bool m_repo_transfer_isSet;
    bool m_repo_transfer_isValid;

    qint64 m_size;
    bool m_size_isSet;
    bool m_size_isValid;

    QString m_ssh_url;
    bool m_ssh_url_isSet;
    bool m_ssh_url_isValid;

    qint64 m_stars_count;
    bool m_stars_count_isSet;
    bool m_stars_count_isValid;

    bool m_r_template;
    bool m_r_template_isSet;
    bool m_r_template_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    qint64 m_watchers_count;
    bool m_watchers_count_isSet;
    bool m_watchers_count_isValid;

    QString m_website;
    bool m_website_isSet;
    bool m_website_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRepository)

#endif // OAIRepository_H
