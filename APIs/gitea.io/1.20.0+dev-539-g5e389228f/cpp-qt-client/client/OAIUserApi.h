/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.20.0+dev-539-g5e389228f
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserApi_H
#define OAI_OAIUserApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessToken.h"
#include "OAIActivity.h"
#include "OAICreateAccessTokenOption.h"
#include "OAICreateEmailOption.h"
#include "OAICreateGPGKeyOption.h"
#include "OAICreateHookOption.h"
#include "OAICreateKeyOption.h"
#include "OAICreateOAuth2ApplicationOptions.h"
#include "OAICreateRepoOption.h"
#include "OAIDeleteEmailOption.h"
#include "OAIEditHookOption.h"
#include "OAIEmail.h"
#include "OAIGPGKey.h"
#include "OAIHook.h"
#include "OAIOAuth2Application.h"
#include "OAIPublicKey.h"
#include "OAIRepository.h"
#include "OAIStopWatch.h"
#include "OAITeam.h"
#include "OAITrackedTime.h"
#include "OAIUser.h"
#include "OAIUserHeatmapData.h"
#include "OAIUserSearch_200_response.h"
#include "OAIUserSettings.h"
#include "OAIUserSettingsOptions.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserApi : public QObject {
    Q_OBJECT

public:
    OAIUserApi(const int timeOut = 0);
    ~OAIUserApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_repo_option OAICreateRepoOption [optional]
    */
    virtual void createCurrentUserRepo(const ::OpenAPI::OptionalParam<OAICreateRepoOption> &oai_create_repo_option = ::OpenAPI::OptionalParam<OAICreateRepoOption>());


    virtual void getUserSettings();


    virtual void getVerificationToken();

    /**
    * @param[in]  oai_user_settings_options OAIUserSettingsOptions [optional]
    */
    virtual void updateUserSettings(const ::OpenAPI::OptionalParam<OAIUserSettingsOptions> &oai_user_settings_options = ::OpenAPI::OptionalParam<OAIUserSettingsOptions>());

    /**
    * @param[in]  oai_create_email_option OAICreateEmailOption [optional]
    */
    virtual void userAddEmail(const ::OpenAPI::OptionalParam<OAICreateEmailOption> &oai_create_email_option = ::OpenAPI::OptionalParam<OAICreateEmailOption>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  target QString [required]
    */
    virtual void userCheckFollowing(const QString &username, const QString &target);

    /**
    * @param[in]  oai_create_hook_option OAICreateHookOption [required]
    */
    virtual void userCreateHook(const OAICreateHookOption &oai_create_hook_option);

    /**
    * @param[in]  oai_create_o_auth2_application_options OAICreateOAuth2ApplicationOptions [required]
    */
    virtual void userCreateOAuth2Application(const OAICreateOAuth2ApplicationOptions &oai_create_o_auth2_application_options);

    /**
    * @param[in]  username QString [required]
    * @param[in]  oai_create_access_token_option OAICreateAccessTokenOption [optional]
    */
    virtual void userCreateToken(const QString &username, const ::OpenAPI::OptionalParam<OAICreateAccessTokenOption> &oai_create_access_token_option = ::OpenAPI::OptionalParam<OAICreateAccessTokenOption>());

    /**
    * @param[in]  username QString [required]
    */
    virtual void userCurrentCheckFollowing(const QString &username);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void userCurrentCheckStarring(const QString &owner, const QString &repo);

    /**
    * @param[in]  username QString [required]
    */
    virtual void userCurrentDeleteFollow(const QString &username);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void userCurrentDeleteGPGKey(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void userCurrentDeleteKey(const qint64 &id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void userCurrentDeleteStar(const QString &owner, const QString &repo);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void userCurrentGetGPGKey(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void userCurrentGetKey(const qint64 &id);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userCurrentListFollowers(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userCurrentListFollowing(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userCurrentListGPGKeys(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  fingerprint QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userCurrentListKeys(const ::OpenAPI::OptionalParam<QString> &fingerprint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userCurrentListRepos(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userCurrentListStarred(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userCurrentListSubscriptions(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_create_gpg_key_option OAICreateGPGKeyOption [optional]
    */
    virtual void userCurrentPostGPGKey(const ::OpenAPI::OptionalParam<OAICreateGPGKeyOption> &oai_create_gpg_key_option = ::OpenAPI::OptionalParam<OAICreateGPGKeyOption>());

    /**
    * @param[in]  oai_create_key_option OAICreateKeyOption [optional]
    */
    virtual void userCurrentPostKey(const ::OpenAPI::OptionalParam<OAICreateKeyOption> &oai_create_key_option = ::OpenAPI::OptionalParam<OAICreateKeyOption>());

    /**
    * @param[in]  username QString [required]
    */
    virtual void userCurrentPutFollow(const QString &username);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void userCurrentPutStar(const QString &owner, const QString &repo);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  before QDateTime [optional]
    */
    virtual void userCurrentTrackedTimes(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  token QString [required]
    */
    virtual void userDeleteAccessToken(const QString &username, const QString &token);

    /**
    * @param[in]  oai_delete_email_option OAIDeleteEmailOption [optional]
    */
    virtual void userDeleteEmail(const ::OpenAPI::OptionalParam<OAIDeleteEmailOption> &oai_delete_email_option = ::OpenAPI::OptionalParam<OAIDeleteEmailOption>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void userDeleteHook(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void userDeleteOAuth2Application(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_edit_hook_option OAIEditHookOption [optional]
    */
    virtual void userEditHook(const qint64 &id, const ::OpenAPI::OptionalParam<OAIEditHookOption> &oai_edit_hook_option = ::OpenAPI::OptionalParam<OAIEditHookOption>());

    /**
    * @param[in]  username QString [required]
    */
    virtual void userGet(const QString &username);


    virtual void userGetCurrent();

    /**
    * @param[in]  username QString [required]
    */
    virtual void userGetHeatmapData(const QString &username);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void userGetHook(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void userGetOAuth2Application(const qint64 &id);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userGetOauth2Application(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userGetStopWatches(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userGetTokens(const QString &username, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  only_performed_by bool [optional]
    * @param[in]  date QDate [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userListActivityFeeds(const QString &username, const ::OpenAPI::OptionalParam<bool> &only_performed_by = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


    virtual void userListEmails();

    /**
    * @param[in]  username QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userListFollowers(const QString &username, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userListFollowing(const QString &username, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userListGPGKeys(const QString &username, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userListHooks(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  fingerprint QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userListKeys(const QString &username, const ::OpenAPI::OptionalParam<QString> &fingerprint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userListRepos(const QString &username, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userListStarred(const QString &username, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userListSubscriptions(const QString &username, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userListTeams(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  q QString [optional]
    * @param[in]  uid qint64 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userSearch(const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &uid = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_create_o_auth2_application_options OAICreateOAuth2ApplicationOptions [required]
    */
    virtual void userUpdateOAuth2Application(const qint64 &id, const OAICreateOAuth2ApplicationOptions &oai_create_o_auth2_application_options);


    virtual void userVerifyGPGKey();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCurrentUserRepoCallback(OAIHttpRequestWorker *worker);
    void getUserSettingsCallback(OAIHttpRequestWorker *worker);
    void getVerificationTokenCallback(OAIHttpRequestWorker *worker);
    void updateUserSettingsCallback(OAIHttpRequestWorker *worker);
    void userAddEmailCallback(OAIHttpRequestWorker *worker);
    void userCheckFollowingCallback(OAIHttpRequestWorker *worker);
    void userCreateHookCallback(OAIHttpRequestWorker *worker);
    void userCreateOAuth2ApplicationCallback(OAIHttpRequestWorker *worker);
    void userCreateTokenCallback(OAIHttpRequestWorker *worker);
    void userCurrentCheckFollowingCallback(OAIHttpRequestWorker *worker);
    void userCurrentCheckStarringCallback(OAIHttpRequestWorker *worker);
    void userCurrentDeleteFollowCallback(OAIHttpRequestWorker *worker);
    void userCurrentDeleteGPGKeyCallback(OAIHttpRequestWorker *worker);
    void userCurrentDeleteKeyCallback(OAIHttpRequestWorker *worker);
    void userCurrentDeleteStarCallback(OAIHttpRequestWorker *worker);
    void userCurrentGetGPGKeyCallback(OAIHttpRequestWorker *worker);
    void userCurrentGetKeyCallback(OAIHttpRequestWorker *worker);
    void userCurrentListFollowersCallback(OAIHttpRequestWorker *worker);
    void userCurrentListFollowingCallback(OAIHttpRequestWorker *worker);
    void userCurrentListGPGKeysCallback(OAIHttpRequestWorker *worker);
    void userCurrentListKeysCallback(OAIHttpRequestWorker *worker);
    void userCurrentListReposCallback(OAIHttpRequestWorker *worker);
    void userCurrentListStarredCallback(OAIHttpRequestWorker *worker);
    void userCurrentListSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void userCurrentPostGPGKeyCallback(OAIHttpRequestWorker *worker);
    void userCurrentPostKeyCallback(OAIHttpRequestWorker *worker);
    void userCurrentPutFollowCallback(OAIHttpRequestWorker *worker);
    void userCurrentPutStarCallback(OAIHttpRequestWorker *worker);
    void userCurrentTrackedTimesCallback(OAIHttpRequestWorker *worker);
    void userDeleteAccessTokenCallback(OAIHttpRequestWorker *worker);
    void userDeleteEmailCallback(OAIHttpRequestWorker *worker);
    void userDeleteHookCallback(OAIHttpRequestWorker *worker);
    void userDeleteOAuth2ApplicationCallback(OAIHttpRequestWorker *worker);
    void userEditHookCallback(OAIHttpRequestWorker *worker);
    void userGetCallback(OAIHttpRequestWorker *worker);
    void userGetCurrentCallback(OAIHttpRequestWorker *worker);
    void userGetHeatmapDataCallback(OAIHttpRequestWorker *worker);
    void userGetHookCallback(OAIHttpRequestWorker *worker);
    void userGetOAuth2ApplicationCallback(OAIHttpRequestWorker *worker);
    void userGetOauth2ApplicationCallback(OAIHttpRequestWorker *worker);
    void userGetStopWatchesCallback(OAIHttpRequestWorker *worker);
    void userGetTokensCallback(OAIHttpRequestWorker *worker);
    void userListActivityFeedsCallback(OAIHttpRequestWorker *worker);
    void userListEmailsCallback(OAIHttpRequestWorker *worker);
    void userListFollowersCallback(OAIHttpRequestWorker *worker);
    void userListFollowingCallback(OAIHttpRequestWorker *worker);
    void userListGPGKeysCallback(OAIHttpRequestWorker *worker);
    void userListHooksCallback(OAIHttpRequestWorker *worker);
    void userListKeysCallback(OAIHttpRequestWorker *worker);
    void userListReposCallback(OAIHttpRequestWorker *worker);
    void userListStarredCallback(OAIHttpRequestWorker *worker);
    void userListSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void userListTeamsCallback(OAIHttpRequestWorker *worker);
    void userSearchCallback(OAIHttpRequestWorker *worker);
    void userUpdateOAuth2ApplicationCallback(OAIHttpRequestWorker *worker);
    void userVerifyGPGKeyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCurrentUserRepoSignal(OAIRepository summary);
    void getUserSettingsSignal(QList<OAIUserSettings> summary);
    void getVerificationTokenSignal(QString summary);
    void updateUserSettingsSignal(QList<OAIUserSettings> summary);
    void userAddEmailSignal(QList<OAIEmail> summary);
    void userCheckFollowingSignal();
    void userCreateHookSignal(OAIHook summary);
    void userCreateOAuth2ApplicationSignal(OAIOAuth2Application summary);
    void userCreateTokenSignal(OAIAccessToken summary);
    void userCurrentCheckFollowingSignal();
    void userCurrentCheckStarringSignal();
    void userCurrentDeleteFollowSignal();
    void userCurrentDeleteGPGKeySignal();
    void userCurrentDeleteKeySignal();
    void userCurrentDeleteStarSignal();
    void userCurrentGetGPGKeySignal(OAIGPGKey summary);
    void userCurrentGetKeySignal(OAIPublicKey summary);
    void userCurrentListFollowersSignal(QList<OAIUser> summary);
    void userCurrentListFollowingSignal(QList<OAIUser> summary);
    void userCurrentListGPGKeysSignal(QList<OAIGPGKey> summary);
    void userCurrentListKeysSignal(QList<OAIPublicKey> summary);
    void userCurrentListReposSignal(QList<OAIRepository> summary);
    void userCurrentListStarredSignal(QList<OAIRepository> summary);
    void userCurrentListSubscriptionsSignal(QList<OAIRepository> summary);
    void userCurrentPostGPGKeySignal(OAIGPGKey summary);
    void userCurrentPostKeySignal(OAIPublicKey summary);
    void userCurrentPutFollowSignal();
    void userCurrentPutStarSignal();
    void userCurrentTrackedTimesSignal(QList<OAITrackedTime> summary);
    void userDeleteAccessTokenSignal();
    void userDeleteEmailSignal();
    void userDeleteHookSignal();
    void userDeleteOAuth2ApplicationSignal();
    void userEditHookSignal(OAIHook summary);
    void userGetSignal(OAIUser summary);
    void userGetCurrentSignal(OAIUser summary);
    void userGetHeatmapDataSignal(QList<OAIUserHeatmapData> summary);
    void userGetHookSignal(OAIHook summary);
    void userGetOAuth2ApplicationSignal(OAIOAuth2Application summary);
    void userGetOauth2ApplicationSignal(QList<OAIOAuth2Application> summary);
    void userGetStopWatchesSignal(QList<OAIStopWatch> summary);
    void userGetTokensSignal(QList<OAIAccessToken> summary);
    void userListActivityFeedsSignal(QList<OAIActivity> summary);
    void userListEmailsSignal(QList<OAIEmail> summary);
    void userListFollowersSignal(QList<OAIUser> summary);
    void userListFollowingSignal(QList<OAIUser> summary);
    void userListGPGKeysSignal(QList<OAIGPGKey> summary);
    void userListHooksSignal(QList<OAIHook> summary);
    void userListKeysSignal(QList<OAIPublicKey> summary);
    void userListReposSignal(QList<OAIRepository> summary);
    void userListStarredSignal(QList<OAIRepository> summary);
    void userListSubscriptionsSignal(QList<OAIRepository> summary);
    void userListTeamsSignal(QList<OAITeam> summary);
    void userSearchSignal(OAIUserSearch_200_response summary);
    void userUpdateOAuth2ApplicationSignal(OAIOAuth2Application summary);
    void userVerifyGPGKeySignal(OAIGPGKey summary);


    void createCurrentUserRepoSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void getUserSettingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserSettings> summary);
    void getVerificationTokenSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void updateUserSettingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserSettings> summary);
    void userAddEmailSignalFull(OAIHttpRequestWorker *worker, QList<OAIEmail> summary);
    void userCheckFollowingSignalFull(OAIHttpRequestWorker *worker);
    void userCreateHookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void userCreateOAuth2ApplicationSignalFull(OAIHttpRequestWorker *worker, OAIOAuth2Application summary);
    void userCreateTokenSignalFull(OAIHttpRequestWorker *worker, OAIAccessToken summary);
    void userCurrentCheckFollowingSignalFull(OAIHttpRequestWorker *worker);
    void userCurrentCheckStarringSignalFull(OAIHttpRequestWorker *worker);
    void userCurrentDeleteFollowSignalFull(OAIHttpRequestWorker *worker);
    void userCurrentDeleteGPGKeySignalFull(OAIHttpRequestWorker *worker);
    void userCurrentDeleteKeySignalFull(OAIHttpRequestWorker *worker);
    void userCurrentDeleteStarSignalFull(OAIHttpRequestWorker *worker);
    void userCurrentGetGPGKeySignalFull(OAIHttpRequestWorker *worker, OAIGPGKey summary);
    void userCurrentGetKeySignalFull(OAIHttpRequestWorker *worker, OAIPublicKey summary);
    void userCurrentListFollowersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void userCurrentListFollowingSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void userCurrentListGPGKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIGPGKey> summary);
    void userCurrentListKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIPublicKey> summary);
    void userCurrentListReposSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepository> summary);
    void userCurrentListStarredSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepository> summary);
    void userCurrentListSubscriptionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepository> summary);
    void userCurrentPostGPGKeySignalFull(OAIHttpRequestWorker *worker, OAIGPGKey summary);
    void userCurrentPostKeySignalFull(OAIHttpRequestWorker *worker, OAIPublicKey summary);
    void userCurrentPutFollowSignalFull(OAIHttpRequestWorker *worker);
    void userCurrentPutStarSignalFull(OAIHttpRequestWorker *worker);
    void userCurrentTrackedTimesSignalFull(OAIHttpRequestWorker *worker, QList<OAITrackedTime> summary);
    void userDeleteAccessTokenSignalFull(OAIHttpRequestWorker *worker);
    void userDeleteEmailSignalFull(OAIHttpRequestWorker *worker);
    void userDeleteHookSignalFull(OAIHttpRequestWorker *worker);
    void userDeleteOAuth2ApplicationSignalFull(OAIHttpRequestWorker *worker);
    void userEditHookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void userGetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void userGetCurrentSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void userGetHeatmapDataSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserHeatmapData> summary);
    void userGetHookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void userGetOAuth2ApplicationSignalFull(OAIHttpRequestWorker *worker, OAIOAuth2Application summary);
    void userGetOauth2ApplicationSignalFull(OAIHttpRequestWorker *worker, QList<OAIOAuth2Application> summary);
    void userGetStopWatchesSignalFull(OAIHttpRequestWorker *worker, QList<OAIStopWatch> summary);
    void userGetTokensSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccessToken> summary);
    void userListActivityFeedsSignalFull(OAIHttpRequestWorker *worker, QList<OAIActivity> summary);
    void userListEmailsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEmail> summary);
    void userListFollowersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void userListFollowingSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void userListGPGKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIGPGKey> summary);
    void userListHooksSignalFull(OAIHttpRequestWorker *worker, QList<OAIHook> summary);
    void userListKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIPublicKey> summary);
    void userListReposSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepository> summary);
    void userListStarredSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepository> summary);
    void userListSubscriptionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepository> summary);
    void userListTeamsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void userSearchSignalFull(OAIHttpRequestWorker *worker, OAIUserSearch_200_response summary);
    void userUpdateOAuth2ApplicationSignalFull(OAIHttpRequestWorker *worker, OAIOAuth2Application summary);
    void userVerifyGPGKeySignalFull(OAIHttpRequestWorker *worker, OAIGPGKey summary);

    Q_DECL_DEPRECATED_X("Use createCurrentUserRepoSignalError() instead")
    void createCurrentUserRepoSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCurrentUserRepoSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSettingsSignalError() instead")
    void getUserSettingsSignalE(QList<OAIUserSettings> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSettingsSignalError(QList<OAIUserSettings> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVerificationTokenSignalError() instead")
    void getVerificationTokenSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVerificationTokenSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSettingsSignalError() instead")
    void updateUserSettingsSignalE(QList<OAIUserSettings> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSettingsSignalError(QList<OAIUserSettings> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAddEmailSignalError() instead")
    void userAddEmailSignalE(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userAddEmailSignalError(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCheckFollowingSignalError() instead")
    void userCheckFollowingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userCheckFollowingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCreateHookSignalError() instead")
    void userCreateHookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCreateHookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCreateOAuth2ApplicationSignalError() instead")
    void userCreateOAuth2ApplicationSignalE(OAIOAuth2Application summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCreateOAuth2ApplicationSignalError(OAIOAuth2Application summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCreateTokenSignalError() instead")
    void userCreateTokenSignalE(OAIAccessToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCreateTokenSignalError(OAIAccessToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentCheckFollowingSignalError() instead")
    void userCurrentCheckFollowingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentCheckFollowingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentCheckStarringSignalError() instead")
    void userCurrentCheckStarringSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentCheckStarringSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentDeleteFollowSignalError() instead")
    void userCurrentDeleteFollowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentDeleteFollowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentDeleteGPGKeySignalError() instead")
    void userCurrentDeleteGPGKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentDeleteGPGKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentDeleteKeySignalError() instead")
    void userCurrentDeleteKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentDeleteKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentDeleteStarSignalError() instead")
    void userCurrentDeleteStarSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentDeleteStarSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentGetGPGKeySignalError() instead")
    void userCurrentGetGPGKeySignalE(OAIGPGKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentGetGPGKeySignalError(OAIGPGKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentGetKeySignalError() instead")
    void userCurrentGetKeySignalE(OAIPublicKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentGetKeySignalError(OAIPublicKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentListFollowersSignalError() instead")
    void userCurrentListFollowersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentListFollowersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentListFollowingSignalError() instead")
    void userCurrentListFollowingSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentListFollowingSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentListGPGKeysSignalError() instead")
    void userCurrentListGPGKeysSignalE(QList<OAIGPGKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentListGPGKeysSignalError(QList<OAIGPGKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentListKeysSignalError() instead")
    void userCurrentListKeysSignalE(QList<OAIPublicKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentListKeysSignalError(QList<OAIPublicKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentListReposSignalError() instead")
    void userCurrentListReposSignalE(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentListReposSignalError(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentListStarredSignalError() instead")
    void userCurrentListStarredSignalE(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentListStarredSignalError(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentListSubscriptionsSignalError() instead")
    void userCurrentListSubscriptionsSignalE(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentListSubscriptionsSignalError(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentPostGPGKeySignalError() instead")
    void userCurrentPostGPGKeySignalE(OAIGPGKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentPostGPGKeySignalError(OAIGPGKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentPostKeySignalError() instead")
    void userCurrentPostKeySignalE(OAIPublicKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentPostKeySignalError(OAIPublicKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentPutFollowSignalError() instead")
    void userCurrentPutFollowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentPutFollowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentPutStarSignalError() instead")
    void userCurrentPutStarSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentPutStarSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentTrackedTimesSignalError() instead")
    void userCurrentTrackedTimesSignalE(QList<OAITrackedTime> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentTrackedTimesSignalError(QList<OAITrackedTime> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userDeleteAccessTokenSignalError() instead")
    void userDeleteAccessTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userDeleteAccessTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userDeleteEmailSignalError() instead")
    void userDeleteEmailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userDeleteEmailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userDeleteHookSignalError() instead")
    void userDeleteHookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userDeleteHookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userDeleteOAuth2ApplicationSignalError() instead")
    void userDeleteOAuth2ApplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userDeleteOAuth2ApplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userEditHookSignalError() instead")
    void userEditHookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userEditHookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userGetSignalError() instead")
    void userGetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userGetCurrentSignalError() instead")
    void userGetCurrentSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetCurrentSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userGetHeatmapDataSignalError() instead")
    void userGetHeatmapDataSignalE(QList<OAIUserHeatmapData> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetHeatmapDataSignalError(QList<OAIUserHeatmapData> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userGetHookSignalError() instead")
    void userGetHookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetHookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userGetOAuth2ApplicationSignalError() instead")
    void userGetOAuth2ApplicationSignalE(OAIOAuth2Application summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetOAuth2ApplicationSignalError(OAIOAuth2Application summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userGetOauth2ApplicationSignalError() instead")
    void userGetOauth2ApplicationSignalE(QList<OAIOAuth2Application> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetOauth2ApplicationSignalError(QList<OAIOAuth2Application> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userGetStopWatchesSignalError() instead")
    void userGetStopWatchesSignalE(QList<OAIStopWatch> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetStopWatchesSignalError(QList<OAIStopWatch> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userGetTokensSignalError() instead")
    void userGetTokensSignalE(QList<OAIAccessToken> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetTokensSignalError(QList<OAIAccessToken> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListActivityFeedsSignalError() instead")
    void userListActivityFeedsSignalE(QList<OAIActivity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userListActivityFeedsSignalError(QList<OAIActivity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListEmailsSignalError() instead")
    void userListEmailsSignalE(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userListEmailsSignalError(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListFollowersSignalError() instead")
    void userListFollowersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userListFollowersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListFollowingSignalError() instead")
    void userListFollowingSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userListFollowingSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListGPGKeysSignalError() instead")
    void userListGPGKeysSignalE(QList<OAIGPGKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userListGPGKeysSignalError(QList<OAIGPGKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListHooksSignalError() instead")
    void userListHooksSignalE(QList<OAIHook> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userListHooksSignalError(QList<OAIHook> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListKeysSignalError() instead")
    void userListKeysSignalE(QList<OAIPublicKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userListKeysSignalError(QList<OAIPublicKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListReposSignalError() instead")
    void userListReposSignalE(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userListReposSignalError(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListStarredSignalError() instead")
    void userListStarredSignalE(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userListStarredSignalError(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListSubscriptionsSignalError() instead")
    void userListSubscriptionsSignalE(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userListSubscriptionsSignalError(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListTeamsSignalError() instead")
    void userListTeamsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userListTeamsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userSearchSignalError() instead")
    void userSearchSignalE(OAIUserSearch_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userSearchSignalError(OAIUserSearch_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userUpdateOAuth2ApplicationSignalError() instead")
    void userUpdateOAuth2ApplicationSignalE(OAIOAuth2Application summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userUpdateOAuth2ApplicationSignalError(OAIOAuth2Application summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userVerifyGPGKeySignalError() instead")
    void userVerifyGPGKeySignalE(OAIGPGKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userVerifyGPGKeySignalError(OAIGPGKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCurrentUserRepoSignalErrorFull() instead")
    void createCurrentUserRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCurrentUserRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSettingsSignalErrorFull() instead")
    void getUserSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVerificationTokenSignalErrorFull() instead")
    void getVerificationTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVerificationTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSettingsSignalErrorFull() instead")
    void updateUserSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAddEmailSignalErrorFull() instead")
    void userAddEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userAddEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCheckFollowingSignalErrorFull() instead")
    void userCheckFollowingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCheckFollowingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCreateHookSignalErrorFull() instead")
    void userCreateHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCreateHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCreateOAuth2ApplicationSignalErrorFull() instead")
    void userCreateOAuth2ApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCreateOAuth2ApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCreateTokenSignalErrorFull() instead")
    void userCreateTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCreateTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentCheckFollowingSignalErrorFull() instead")
    void userCurrentCheckFollowingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentCheckFollowingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentCheckStarringSignalErrorFull() instead")
    void userCurrentCheckStarringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentCheckStarringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentDeleteFollowSignalErrorFull() instead")
    void userCurrentDeleteFollowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentDeleteFollowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentDeleteGPGKeySignalErrorFull() instead")
    void userCurrentDeleteGPGKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentDeleteGPGKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentDeleteKeySignalErrorFull() instead")
    void userCurrentDeleteKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentDeleteKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentDeleteStarSignalErrorFull() instead")
    void userCurrentDeleteStarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentDeleteStarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentGetGPGKeySignalErrorFull() instead")
    void userCurrentGetGPGKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentGetGPGKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentGetKeySignalErrorFull() instead")
    void userCurrentGetKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentGetKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentListFollowersSignalErrorFull() instead")
    void userCurrentListFollowersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentListFollowersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentListFollowingSignalErrorFull() instead")
    void userCurrentListFollowingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentListFollowingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentListGPGKeysSignalErrorFull() instead")
    void userCurrentListGPGKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentListGPGKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentListKeysSignalErrorFull() instead")
    void userCurrentListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentListReposSignalErrorFull() instead")
    void userCurrentListReposSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentListReposSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentListStarredSignalErrorFull() instead")
    void userCurrentListStarredSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentListStarredSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentListSubscriptionsSignalErrorFull() instead")
    void userCurrentListSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentListSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentPostGPGKeySignalErrorFull() instead")
    void userCurrentPostGPGKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentPostGPGKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentPostKeySignalErrorFull() instead")
    void userCurrentPostKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentPostKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentPutFollowSignalErrorFull() instead")
    void userCurrentPutFollowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentPutFollowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentPutStarSignalErrorFull() instead")
    void userCurrentPutStarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentPutStarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCurrentTrackedTimesSignalErrorFull() instead")
    void userCurrentTrackedTimesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCurrentTrackedTimesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userDeleteAccessTokenSignalErrorFull() instead")
    void userDeleteAccessTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userDeleteAccessTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userDeleteEmailSignalErrorFull() instead")
    void userDeleteEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userDeleteEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userDeleteHookSignalErrorFull() instead")
    void userDeleteHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userDeleteHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userDeleteOAuth2ApplicationSignalErrorFull() instead")
    void userDeleteOAuth2ApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userDeleteOAuth2ApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userEditHookSignalErrorFull() instead")
    void userEditHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userEditHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userGetSignalErrorFull() instead")
    void userGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userGetCurrentSignalErrorFull() instead")
    void userGetCurrentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetCurrentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userGetHeatmapDataSignalErrorFull() instead")
    void userGetHeatmapDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetHeatmapDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userGetHookSignalErrorFull() instead")
    void userGetHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userGetOAuth2ApplicationSignalErrorFull() instead")
    void userGetOAuth2ApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetOAuth2ApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userGetOauth2ApplicationSignalErrorFull() instead")
    void userGetOauth2ApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetOauth2ApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userGetStopWatchesSignalErrorFull() instead")
    void userGetStopWatchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetStopWatchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userGetTokensSignalErrorFull() instead")
    void userGetTokensSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetTokensSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListActivityFeedsSignalErrorFull() instead")
    void userListActivityFeedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userListActivityFeedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListEmailsSignalErrorFull() instead")
    void userListEmailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userListEmailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListFollowersSignalErrorFull() instead")
    void userListFollowersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userListFollowersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListFollowingSignalErrorFull() instead")
    void userListFollowingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userListFollowingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListGPGKeysSignalErrorFull() instead")
    void userListGPGKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userListGPGKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListHooksSignalErrorFull() instead")
    void userListHooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userListHooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListKeysSignalErrorFull() instead")
    void userListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListReposSignalErrorFull() instead")
    void userListReposSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userListReposSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListStarredSignalErrorFull() instead")
    void userListStarredSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userListStarredSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListSubscriptionsSignalErrorFull() instead")
    void userListSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userListSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userListTeamsSignalErrorFull() instead")
    void userListTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userListTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userSearchSignalErrorFull() instead")
    void userSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userUpdateOAuth2ApplicationSignalErrorFull() instead")
    void userUpdateOAuth2ApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userUpdateOAuth2ApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userVerifyGPGKeySignalErrorFull() instead")
    void userVerifyGPGKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userVerifyGPGKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
