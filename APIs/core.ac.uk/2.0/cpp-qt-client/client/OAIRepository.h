/**
 * CORE API v2
 * <p style=\"text-align: justify;\">You can use the CORE API to access the      resources harvested and enriched by CORE. If you encounter any problems with the API, please <a href=\"/contact\">report them to us</a>.</p>  <h2>Overview</h2> <p style=\"text-align: justify;\">The API is organised by resource type. The resources are <b>articles</b>,      <b>journals</b> and <b>repositories</b> and are represented using JSON data format. Furthermore,      each resource has a list of methods. The API also provides two global methods for accessing all resources at once.</p>  <h2>Response format</h2> <p style=\"text-align: justify;\">Response for each query contains two fields: <b>status</b> and <b>data</b>.     In case of an error status, the data field is empty. The data field contains a single object     in case the request is for a specific identifier (e.g. CORE ID, CORE repository ID, etc.), or       contains a list of objects, for example for search queries. In case of batch requests, the response     is an array of objects, each of which contains its own <b>status</b> and <b>data</b> fields.     For search queries the response contains an additional field <b>totalHits</b>, which is the      total number of items which match the search criteria.</p>  <h2>Search query syntax</h2>  <p style=\"text-align: justify\">Complex search queries can be used in all of the API search methods.     The query can be a simple string or it can be built using terms and operators described in Elasticsearch     <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-query-string-query.html#query-string-syntax\">documentation</a>.     The usable field names are <strong>title</strong>, <strong>description</strong>, <strong>fullText</strong>,      <strong>authors</strong>, <strong>publisher</strong>, <strong>repositories.id</strong>, <strong>repositories.name</strong>,      <strong>doi</strong>, <strong>oai</strong>, <strong>identifiers</strong> (which is a list of article identifiers including OAI, URL, etc.), <strong>language.name</strong>      and <strong>year</strong>. Some example queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>title:psychology and language.name:English</p></li>     <li><p>repositories.id:86 AND year:2014</p></li>     <li><p>identifiers:\"oai:aura.abdn.ac.uk:2164/3837\" OR identifiers:\"oai:aura.abdn.ac.uk:2164/3843\"</p></li>     <li><p>doi:\"10.1186/1471-2458-6-309\"</p></li> </ul>  <h3>Retrieving the latest Articles</h3> <p style=\"text-align: justify\">     You can retrieve the harvested items since specific dates using the following queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>repositoryDocument.metadataUpdated:>2017-02-10</p></li>     <li><p>repositoryDocument.metadataUpdated:>2017-03-01 AND repositoryDocument.metadataUpdated:<2017-03-31</p></li>     </ul>  <h2>Sort order</h2>  <p style=\"text-align: justify;\">For search queries, the results are ordered by relevance score. For batch      requests, the results are retrieved in the order of the requests.</p>  <h2>Parameters</h2> <p style=\"text-align: justify;\">The API methods allow different parameters to be passed. Additionally, there is an API key parameter which is common to all API methods. For all API methods      the API key can be provided either as a query parameter or in the request header. If the API key      is not provided, the API will return HTTP 401 error. You can register for an API key <a href=\"/services#api\">here</a>.</p>  <h2>API methods</h2>
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRepository.h
 *
 * 
 */

#ifndef OAIRepository_H
#define OAIRepository_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAIRepositoryLocation.h"
#include "OAIRepositoryStats.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRepositoryLocation;
class OAIRepositoryStats;

class OAIRepository : public OAIObject {
public:
    OAIRepository();
    OAIRepository(QString json);
    ~OAIRepository() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIObject> getDataProviderSourceStats() const;
    void setDataProviderSourceStats(const QList<OAIObject> &data_provider_source_stats);
    bool is_data_provider_source_stats_Set() const;
    bool is_data_provider_source_stats_Valid() const;

    QList<OAIObject> getHistory() const;
    void setHistory(const QList<OAIObject> &history);
    bool is_history_Set() const;
    bool is_history_Valid() const;

    QList<OAIObject> getHistoryCumulative() const;
    void setHistoryCumulative(const QList<OAIObject> &history_cumulative);
    bool is_history_cumulative_Set() const;
    bool is_history_cumulative_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QDateTime getLastSeen() const;
    void setLastSeen(const QDateTime &last_seen);
    bool is_last_seen_Set() const;
    bool is_last_seen_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getOpenDoarId() const;
    void setOpenDoarId(const qint32 &open_doar_id);
    bool is_open_doar_id_Set() const;
    bool is_open_doar_id_Valid() const;

    OAIRepositoryLocation getRepositoryLocation() const;
    void setRepositoryLocation(const OAIRepositoryLocation &repository_location);
    bool is_repository_location_Set() const;
    bool is_repository_location_Valid() const;

    OAIRepositoryStats getRepositoryStats() const;
    void setRepositoryStats(const OAIRepositoryStats &repository_stats);
    bool is_repository_stats_Set() const;
    bool is_repository_stats_Valid() const;

    QString getUri() const;
    void setUri(const QString &uri);
    bool is_uri_Set() const;
    bool is_uri_Valid() const;

    QString getUrlHomepage() const;
    void setUrlHomepage(const QString &url_homepage);
    bool is_url_homepage_Set() const;
    bool is_url_homepage_Valid() const;

    QString getUrlOaipmh() const;
    void setUrlOaipmh(const QString &url_oaipmh);
    bool is_url_oaipmh_Set() const;
    bool is_url_oaipmh_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIObject> m_data_provider_source_stats;
    bool m_data_provider_source_stats_isSet;
    bool m_data_provider_source_stats_isValid;

    QList<OAIObject> m_history;
    bool m_history_isSet;
    bool m_history_isValid;

    QList<OAIObject> m_history_cumulative;
    bool m_history_cumulative_isSet;
    bool m_history_cumulative_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QDateTime m_last_seen;
    bool m_last_seen_isSet;
    bool m_last_seen_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_open_doar_id;
    bool m_open_doar_id_isSet;
    bool m_open_doar_id_isValid;

    OAIRepositoryLocation m_repository_location;
    bool m_repository_location_isSet;
    bool m_repository_location_isValid;

    OAIRepositoryStats m_repository_stats;
    bool m_repository_stats_isSet;
    bool m_repository_stats_isValid;

    QString m_uri;
    bool m_uri_isSet;
    bool m_uri_isValid;

    QString m_url_homepage;
    bool m_url_homepage_isSet;
    bool m_url_homepage_isValid;

    QString m_url_oaipmh;
    bool m_url_oaipmh_isSet;
    bool m_url_oaipmh_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRepository)

#endif // OAIRepository_H
