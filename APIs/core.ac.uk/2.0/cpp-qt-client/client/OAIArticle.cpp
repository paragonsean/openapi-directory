/**
 * CORE API v2
 * <p style=\"text-align: justify;\">You can use the CORE API to access the      resources harvested and enriched by CORE. If you encounter any problems with the API, please <a href=\"/contact\">report them to us</a>.</p>  <h2>Overview</h2> <p style=\"text-align: justify;\">The API is organised by resource type. The resources are <b>articles</b>,      <b>journals</b> and <b>repositories</b> and are represented using JSON data format. Furthermore,      each resource has a list of methods. The API also provides two global methods for accessing all resources at once.</p>  <h2>Response format</h2> <p style=\"text-align: justify;\">Response for each query contains two fields: <b>status</b> and <b>data</b>.     In case of an error status, the data field is empty. The data field contains a single object     in case the request is for a specific identifier (e.g. CORE ID, CORE repository ID, etc.), or       contains a list of objects, for example for search queries. In case of batch requests, the response     is an array of objects, each of which contains its own <b>status</b> and <b>data</b> fields.     For search queries the response contains an additional field <b>totalHits</b>, which is the      total number of items which match the search criteria.</p>  <h2>Search query syntax</h2>  <p style=\"text-align: justify\">Complex search queries can be used in all of the API search methods.     The query can be a simple string or it can be built using terms and operators described in Elasticsearch     <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-query-string-query.html#query-string-syntax\">documentation</a>.     The usable field names are <strong>title</strong>, <strong>description</strong>, <strong>fullText</strong>,      <strong>authors</strong>, <strong>publisher</strong>, <strong>repositories.id</strong>, <strong>repositories.name</strong>,      <strong>doi</strong>, <strong>oai</strong>, <strong>identifiers</strong> (which is a list of article identifiers including OAI, URL, etc.), <strong>language.name</strong>      and <strong>year</strong>. Some example queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>title:psychology and language.name:English</p></li>     <li><p>repositories.id:86 AND year:2014</p></li>     <li><p>identifiers:\"oai:aura.abdn.ac.uk:2164/3837\" OR identifiers:\"oai:aura.abdn.ac.uk:2164/3843\"</p></li>     <li><p>doi:\"10.1186/1471-2458-6-309\"</p></li> </ul>  <h3>Retrieving the latest Articles</h3> <p style=\"text-align: justify\">     You can retrieve the harvested items since specific dates using the following queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>repositoryDocument.metadataUpdated:>2017-02-10</p></li>     <li><p>repositoryDocument.metadataUpdated:>2017-03-01 AND repositoryDocument.metadataUpdated:<2017-03-31</p></li>     </ul>  <h2>Sort order</h2>  <p style=\"text-align: justify;\">For search queries, the results are ordered by relevance score. For batch      requests, the results are retrieved in the order of the requests.</p>  <h2>Parameters</h2> <p style=\"text-align: justify;\">The API methods allow different parameters to be passed. Additionally, there is an API key parameter which is common to all API methods. For all API methods      the API key can be provided either as a query parameter or in the request header. If the API key      is not provided, the API will return HTTP 401 error. You can register for an API key <a href=\"/services#api\">here</a>.</p>  <h2>API methods</h2>
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArticle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArticle::OAIArticle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArticle::OAIArticle() {
    this->initializeModel();
}

OAIArticle::~OAIArticle() {}

void OAIArticle::initializeModel() {

    m_authors_isSet = false;
    m_authors_isValid = false;

    m_citations_isSet = false;
    m_citations_isValid = false;

    m_contributors_isSet = false;
    m_contributors_isValid = false;

    m_date_published_isSet = false;
    m_date_published_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_doi_isSet = false;
    m_doi_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_fulltext_isSet = false;
    m_fulltext_isValid = false;

    m_fulltext_identifier_isSet = false;
    m_fulltext_identifier_isValid = false;

    m_fulltext_urls_isSet = false;
    m_fulltext_urls_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_journals_isSet = false;
    m_journals_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_oai_isSet = false;
    m_oai_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_raw_record_xml_isSet = false;
    m_raw_record_xml_isValid = false;

    m_relations_isSet = false;
    m_relations_isValid = false;

    m_repositories_isSet = false;
    m_repositories_isValid = false;

    m_repository_document_isSet = false;
    m_repository_document_isValid = false;

    m_similarities_isSet = false;
    m_similarities_isValid = false;

    m_subjects_isSet = false;
    m_subjects_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_topics_isSet = false;
    m_topics_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIArticle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArticle::fromJsonObject(QJsonObject json) {

    m_authors_isValid = ::OpenAPI::fromJsonValue(m_authors, json[QString("authors")]);
    m_authors_isSet = !json[QString("authors")].isNull() && m_authors_isValid;

    m_citations_isValid = ::OpenAPI::fromJsonValue(m_citations, json[QString("citations")]);
    m_citations_isSet = !json[QString("citations")].isNull() && m_citations_isValid;

    m_contributors_isValid = ::OpenAPI::fromJsonValue(m_contributors, json[QString("contributors")]);
    m_contributors_isSet = !json[QString("contributors")].isNull() && m_contributors_isValid;

    m_date_published_isValid = ::OpenAPI::fromJsonValue(m_date_published, json[QString("datePublished")]);
    m_date_published_isSet = !json[QString("datePublished")].isNull() && m_date_published_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_doi_isValid = ::OpenAPI::fromJsonValue(m_doi, json[QString("doi")]);
    m_doi_isSet = !json[QString("doi")].isNull() && m_doi_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("downloadUrl")]);
    m_download_url_isSet = !json[QString("downloadUrl")].isNull() && m_download_url_isValid;

    m_fulltext_isValid = ::OpenAPI::fromJsonValue(m_fulltext, json[QString("fulltext")]);
    m_fulltext_isSet = !json[QString("fulltext")].isNull() && m_fulltext_isValid;

    m_fulltext_identifier_isValid = ::OpenAPI::fromJsonValue(m_fulltext_identifier, json[QString("fulltextIdentifier")]);
    m_fulltext_identifier_isSet = !json[QString("fulltextIdentifier")].isNull() && m_fulltext_identifier_isValid;

    m_fulltext_urls_isValid = ::OpenAPI::fromJsonValue(m_fulltext_urls, json[QString("fulltextUrls")]);
    m_fulltext_urls_isSet = !json[QString("fulltextUrls")].isNull() && m_fulltext_urls_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_journals_isValid = ::OpenAPI::fromJsonValue(m_journals, json[QString("journals")]);
    m_journals_isSet = !json[QString("journals")].isNull() && m_journals_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_oai_isValid = ::OpenAPI::fromJsonValue(m_oai, json[QString("oai")]);
    m_oai_isSet = !json[QString("oai")].isNull() && m_oai_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_raw_record_xml_isValid = ::OpenAPI::fromJsonValue(m_raw_record_xml, json[QString("rawRecordXml")]);
    m_raw_record_xml_isSet = !json[QString("rawRecordXml")].isNull() && m_raw_record_xml_isValid;

    m_relations_isValid = ::OpenAPI::fromJsonValue(m_relations, json[QString("relations")]);
    m_relations_isSet = !json[QString("relations")].isNull() && m_relations_isValid;

    m_repositories_isValid = ::OpenAPI::fromJsonValue(m_repositories, json[QString("repositories")]);
    m_repositories_isSet = !json[QString("repositories")].isNull() && m_repositories_isValid;

    m_repository_document_isValid = ::OpenAPI::fromJsonValue(m_repository_document, json[QString("repositoryDocument")]);
    m_repository_document_isSet = !json[QString("repositoryDocument")].isNull() && m_repository_document_isValid;

    m_similarities_isValid = ::OpenAPI::fromJsonValue(m_similarities, json[QString("similarities")]);
    m_similarities_isSet = !json[QString("similarities")].isNull() && m_similarities_isValid;

    m_subjects_isValid = ::OpenAPI::fromJsonValue(m_subjects, json[QString("subjects")]);
    m_subjects_isSet = !json[QString("subjects")].isNull() && m_subjects_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_topics_isValid = ::OpenAPI::fromJsonValue(m_topics, json[QString("topics")]);
    m_topics_isSet = !json[QString("topics")].isNull() && m_topics_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIArticle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArticle::asJsonObject() const {
    QJsonObject obj;
    if (m_authors.size() > 0) {
        obj.insert(QString("authors"), ::OpenAPI::toJsonValue(m_authors));
    }
    if (m_citations.size() > 0) {
        obj.insert(QString("citations"), ::OpenAPI::toJsonValue(m_citations));
    }
    if (m_contributors.size() > 0) {
        obj.insert(QString("contributors"), ::OpenAPI::toJsonValue(m_contributors));
    }
    if (m_date_published_isSet) {
        obj.insert(QString("datePublished"), ::OpenAPI::toJsonValue(m_date_published));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_doi_isSet) {
        obj.insert(QString("doi"), ::OpenAPI::toJsonValue(m_doi));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("downloadUrl"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_fulltext_isSet) {
        obj.insert(QString("fulltext"), ::OpenAPI::toJsonValue(m_fulltext));
    }
    if (m_fulltext_identifier_isSet) {
        obj.insert(QString("fulltextIdentifier"), ::OpenAPI::toJsonValue(m_fulltext_identifier));
    }
    if (m_fulltext_urls.size() > 0) {
        obj.insert(QString("fulltextUrls"), ::OpenAPI::toJsonValue(m_fulltext_urls));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifiers.size() > 0) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_journals.size() > 0) {
        obj.insert(QString("journals"), ::OpenAPI::toJsonValue(m_journals));
    }
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_oai_isSet) {
        obj.insert(QString("oai"), ::OpenAPI::toJsonValue(m_oai));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_raw_record_xml.isSet()) {
        obj.insert(QString("rawRecordXml"), ::OpenAPI::toJsonValue(m_raw_record_xml));
    }
    if (m_relations.size() > 0) {
        obj.insert(QString("relations"), ::OpenAPI::toJsonValue(m_relations));
    }
    if (m_repositories.size() > 0) {
        obj.insert(QString("repositories"), ::OpenAPI::toJsonValue(m_repositories));
    }
    if (m_repository_document_isSet) {
        obj.insert(QString("repositoryDocument"), ::OpenAPI::toJsonValue(m_repository_document));
    }
    if (m_similarities.size() > 0) {
        obj.insert(QString("similarities"), ::OpenAPI::toJsonValue(m_similarities));
    }
    if (m_subjects.size() > 0) {
        obj.insert(QString("subjects"), ::OpenAPI::toJsonValue(m_subjects));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_topics.size() > 0) {
        obj.insert(QString("topics"), ::OpenAPI::toJsonValue(m_topics));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QList<QString> OAIArticle::getAuthors() const {
    return m_authors;
}
void OAIArticle::setAuthors(const QList<QString> &authors) {
    m_authors = authors;
    m_authors_isSet = true;
}

bool OAIArticle::is_authors_Set() const{
    return m_authors_isSet;
}

bool OAIArticle::is_authors_Valid() const{
    return m_authors_isValid;
}

QList<OAICitation> OAIArticle::getCitations() const {
    return m_citations;
}
void OAIArticle::setCitations(const QList<OAICitation> &citations) {
    m_citations = citations;
    m_citations_isSet = true;
}

bool OAIArticle::is_citations_Set() const{
    return m_citations_isSet;
}

bool OAIArticle::is_citations_Valid() const{
    return m_citations_isValid;
}

QList<QString> OAIArticle::getContributors() const {
    return m_contributors;
}
void OAIArticle::setContributors(const QList<QString> &contributors) {
    m_contributors = contributors;
    m_contributors_isSet = true;
}

bool OAIArticle::is_contributors_Set() const{
    return m_contributors_isSet;
}

bool OAIArticle::is_contributors_Valid() const{
    return m_contributors_isValid;
}

QString OAIArticle::getDatePublished() const {
    return m_date_published;
}
void OAIArticle::setDatePublished(const QString &date_published) {
    m_date_published = date_published;
    m_date_published_isSet = true;
}

bool OAIArticle::is_date_published_Set() const{
    return m_date_published_isSet;
}

bool OAIArticle::is_date_published_Valid() const{
    return m_date_published_isValid;
}

QString OAIArticle::getDescription() const {
    return m_description;
}
void OAIArticle::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIArticle::is_description_Set() const{
    return m_description_isSet;
}

bool OAIArticle::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIArticle::getDoi() const {
    return m_doi;
}
void OAIArticle::setDoi(const QString &doi) {
    m_doi = doi;
    m_doi_isSet = true;
}

bool OAIArticle::is_doi_Set() const{
    return m_doi_isSet;
}

bool OAIArticle::is_doi_Valid() const{
    return m_doi_isValid;
}

QString OAIArticle::getDownloadUrl() const {
    return m_download_url;
}
void OAIArticle::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIArticle::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIArticle::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString OAIArticle::getFulltext() const {
    return m_fulltext;
}
void OAIArticle::setFulltext(const QString &fulltext) {
    m_fulltext = fulltext;
    m_fulltext_isSet = true;
}

bool OAIArticle::is_fulltext_Set() const{
    return m_fulltext_isSet;
}

bool OAIArticle::is_fulltext_Valid() const{
    return m_fulltext_isValid;
}

QString OAIArticle::getFulltextIdentifier() const {
    return m_fulltext_identifier;
}
void OAIArticle::setFulltextIdentifier(const QString &fulltext_identifier) {
    m_fulltext_identifier = fulltext_identifier;
    m_fulltext_identifier_isSet = true;
}

bool OAIArticle::is_fulltext_identifier_Set() const{
    return m_fulltext_identifier_isSet;
}

bool OAIArticle::is_fulltext_identifier_Valid() const{
    return m_fulltext_identifier_isValid;
}

QList<QString> OAIArticle::getFulltextUrls() const {
    return m_fulltext_urls;
}
void OAIArticle::setFulltextUrls(const QList<QString> &fulltext_urls) {
    m_fulltext_urls = fulltext_urls;
    m_fulltext_urls_isSet = true;
}

bool OAIArticle::is_fulltext_urls_Set() const{
    return m_fulltext_urls_isSet;
}

bool OAIArticle::is_fulltext_urls_Valid() const{
    return m_fulltext_urls_isValid;
}

qint32 OAIArticle::getId() const {
    return m_id;
}
void OAIArticle::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIArticle::is_id_Set() const{
    return m_id_isSet;
}

bool OAIArticle::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIArticle::getIdentifiers() const {
    return m_identifiers;
}
void OAIArticle::setIdentifiers(const QList<QString> &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIArticle::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIArticle::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

QList<OAIArticleJournal> OAIArticle::getJournals() const {
    return m_journals;
}
void OAIArticle::setJournals(const QList<OAIArticleJournal> &journals) {
    m_journals = journals;
    m_journals_isSet = true;
}

bool OAIArticle::is_journals_Set() const{
    return m_journals_isSet;
}

bool OAIArticle::is_journals_Valid() const{
    return m_journals_isValid;
}

OAILanguage OAIArticle::getLanguage() const {
    return m_language;
}
void OAIArticle::setLanguage(const OAILanguage &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIArticle::is_language_Set() const{
    return m_language_isSet;
}

bool OAIArticle::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIArticle::getOai() const {
    return m_oai;
}
void OAIArticle::setOai(const QString &oai) {
    m_oai = oai;
    m_oai_isSet = true;
}

bool OAIArticle::is_oai_Set() const{
    return m_oai_isSet;
}

bool OAIArticle::is_oai_Valid() const{
    return m_oai_isValid;
}

QString OAIArticle::getPublisher() const {
    return m_publisher;
}
void OAIArticle::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIArticle::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIArticle::is_publisher_Valid() const{
    return m_publisher_isValid;
}

OAIRawRecordXml OAIArticle::getRawRecordXml() const {
    return m_raw_record_xml;
}
void OAIArticle::setRawRecordXml(const OAIRawRecordXml &raw_record_xml) {
    m_raw_record_xml = raw_record_xml;
    m_raw_record_xml_isSet = true;
}

bool OAIArticle::is_raw_record_xml_Set() const{
    return m_raw_record_xml_isSet;
}

bool OAIArticle::is_raw_record_xml_Valid() const{
    return m_raw_record_xml_isValid;
}

QList<QString> OAIArticle::getRelations() const {
    return m_relations;
}
void OAIArticle::setRelations(const QList<QString> &relations) {
    m_relations = relations;
    m_relations_isSet = true;
}

bool OAIArticle::is_relations_Set() const{
    return m_relations_isSet;
}

bool OAIArticle::is_relations_Valid() const{
    return m_relations_isValid;
}

QList<OAIRepository> OAIArticle::getRepositories() const {
    return m_repositories;
}
void OAIArticle::setRepositories(const QList<OAIRepository> &repositories) {
    m_repositories = repositories;
    m_repositories_isSet = true;
}

bool OAIArticle::is_repositories_Set() const{
    return m_repositories_isSet;
}

bool OAIArticle::is_repositories_Valid() const{
    return m_repositories_isValid;
}

OAIObject OAIArticle::getRepositoryDocument() const {
    return m_repository_document;
}
void OAIArticle::setRepositoryDocument(const OAIObject &repository_document) {
    m_repository_document = repository_document;
    m_repository_document_isSet = true;
}

bool OAIArticle::is_repository_document_Set() const{
    return m_repository_document_isSet;
}

bool OAIArticle::is_repository_document_Valid() const{
    return m_repository_document_isValid;
}

QList<OAISimilar> OAIArticle::getSimilarities() const {
    return m_similarities;
}
void OAIArticle::setSimilarities(const QList<OAISimilar> &similarities) {
    m_similarities = similarities;
    m_similarities_isSet = true;
}

bool OAIArticle::is_similarities_Set() const{
    return m_similarities_isSet;
}

bool OAIArticle::is_similarities_Valid() const{
    return m_similarities_isValid;
}

QList<QString> OAIArticle::getSubjects() const {
    return m_subjects;
}
void OAIArticle::setSubjects(const QList<QString> &subjects) {
    m_subjects = subjects;
    m_subjects_isSet = true;
}

bool OAIArticle::is_subjects_Set() const{
    return m_subjects_isSet;
}

bool OAIArticle::is_subjects_Valid() const{
    return m_subjects_isValid;
}

QString OAIArticle::getTitle() const {
    return m_title;
}
void OAIArticle::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIArticle::is_title_Set() const{
    return m_title_isSet;
}

bool OAIArticle::is_title_Valid() const{
    return m_title_isValid;
}

QList<QString> OAIArticle::getTopics() const {
    return m_topics;
}
void OAIArticle::setTopics(const QList<QString> &topics) {
    m_topics = topics;
    m_topics_isSet = true;
}

bool OAIArticle::is_topics_Set() const{
    return m_topics_isSet;
}

bool OAIArticle::is_topics_Valid() const{
    return m_topics_isValid;
}

QList<QString> OAIArticle::getTypes() const {
    return m_types;
}
void OAIArticle::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIArticle::is_types_Set() const{
    return m_types_isSet;
}

bool OAIArticle::is_types_Valid() const{
    return m_types_isValid;
}

qint32 OAIArticle::getYear() const {
    return m_year;
}
void OAIArticle::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIArticle::is_year_Set() const{
    return m_year_isSet;
}

bool OAIArticle::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIArticle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_citations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulltext_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulltext_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulltext_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_journals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oai_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_record_xml.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repositories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_similarities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subjects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArticle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
