/**
 * CORE API v2
 * <p style=\"text-align: justify;\">You can use the CORE API to access the      resources harvested and enriched by CORE. If you encounter any problems with the API, please <a href=\"/contact\">report them to us</a>.</p>  <h2>Overview</h2> <p style=\"text-align: justify;\">The API is organised by resource type. The resources are <b>articles</b>,      <b>journals</b> and <b>repositories</b> and are represented using JSON data format. Furthermore,      each resource has a list of methods. The API also provides two global methods for accessing all resources at once.</p>  <h2>Response format</h2> <p style=\"text-align: justify;\">Response for each query contains two fields: <b>status</b> and <b>data</b>.     In case of an error status, the data field is empty. The data field contains a single object     in case the request is for a specific identifier (e.g. CORE ID, CORE repository ID, etc.), or       contains a list of objects, for example for search queries. In case of batch requests, the response     is an array of objects, each of which contains its own <b>status</b> and <b>data</b> fields.     For search queries the response contains an additional field <b>totalHits</b>, which is the      total number of items which match the search criteria.</p>  <h2>Search query syntax</h2>  <p style=\"text-align: justify\">Complex search queries can be used in all of the API search methods.     The query can be a simple string or it can be built using terms and operators described in Elasticsearch     <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-query-string-query.html#query-string-syntax\">documentation</a>.     The usable field names are <strong>title</strong>, <strong>description</strong>, <strong>fullText</strong>,      <strong>authors</strong>, <strong>publisher</strong>, <strong>repositories.id</strong>, <strong>repositories.name</strong>,      <strong>doi</strong>, <strong>oai</strong>, <strong>identifiers</strong> (which is a list of article identifiers including OAI, URL, etc.), <strong>language.name</strong>      and <strong>year</strong>. Some example queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>title:psychology and language.name:English</p></li>     <li><p>repositories.id:86 AND year:2014</p></li>     <li><p>identifiers:\"oai:aura.abdn.ac.uk:2164/3837\" OR identifiers:\"oai:aura.abdn.ac.uk:2164/3843\"</p></li>     <li><p>doi:\"10.1186/1471-2458-6-309\"</p></li> </ul>  <h3>Retrieving the latest Articles</h3> <p style=\"text-align: justify\">     You can retrieve the harvested items since specific dates using the following queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>repositoryDocument.metadataUpdated:>2017-02-10</p></li>     <li><p>repositoryDocument.metadataUpdated:>2017-03-01 AND repositoryDocument.metadataUpdated:<2017-03-31</p></li>     </ul>  <h2>Sort order</h2>  <p style=\"text-align: justify;\">For search queries, the results are ordered by relevance score. For batch      requests, the results are retrieved in the order of the requests.</p>  <h2>Parameters</h2> <p style=\"text-align: justify;\">The API methods allow different parameters to be passed. Additionally, there is an API key parameter which is common to all API methods. For all API methods      the API key can be provided either as a query parameter or in the request header. If the API key      is not provided, the API will return HTTP 401 error. You can register for an API key <a href=\"/services#api\">here</a>.</p>  <h2>API methods</h2>
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILanguage::OAILanguage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILanguage::OAILanguage() {
    this->initializeModel();
}

OAILanguage::~OAILanguage() {}

void OAILanguage::initializeModel() {

    m_deleted_status_isSet = false;
    m_deleted_status_isValid = false;

    m_deposited_date_isSet = false;
    m_deposited_date_isValid = false;

    m_indexed_isSet = false;
    m_indexed_isValid = false;

    m_metadata_updated_isSet = false;
    m_metadata_updated_isValid = false;

    m_pdf_origin_isSet = false;
    m_pdf_origin_isValid = false;

    m_pdf_size_isSet = false;
    m_pdf_size_isValid = false;

    m_pdf_status_isSet = false;
    m_pdf_status_isValid = false;

    m_tdm_only_isSet = false;
    m_tdm_only_isValid = false;

    m_text_status_isSet = false;
    m_text_status_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAILanguage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILanguage::fromJsonObject(QJsonObject json) {

    m_deleted_status_isValid = ::OpenAPI::fromJsonValue(m_deleted_status, json[QString("deletedStatus")]);
    m_deleted_status_isSet = !json[QString("deletedStatus")].isNull() && m_deleted_status_isValid;

    m_deposited_date_isValid = ::OpenAPI::fromJsonValue(m_deposited_date, json[QString("depositedDate")]);
    m_deposited_date_isSet = !json[QString("depositedDate")].isNull() && m_deposited_date_isValid;

    m_indexed_isValid = ::OpenAPI::fromJsonValue(m_indexed, json[QString("indexed")]);
    m_indexed_isSet = !json[QString("indexed")].isNull() && m_indexed_isValid;

    m_metadata_updated_isValid = ::OpenAPI::fromJsonValue(m_metadata_updated, json[QString("metadataUpdated")]);
    m_metadata_updated_isSet = !json[QString("metadataUpdated")].isNull() && m_metadata_updated_isValid;

    m_pdf_origin_isValid = ::OpenAPI::fromJsonValue(m_pdf_origin, json[QString("pdfOrigin")]);
    m_pdf_origin_isSet = !json[QString("pdfOrigin")].isNull() && m_pdf_origin_isValid;

    m_pdf_size_isValid = ::OpenAPI::fromJsonValue(m_pdf_size, json[QString("pdfSize")]);
    m_pdf_size_isSet = !json[QString("pdfSize")].isNull() && m_pdf_size_isValid;

    m_pdf_status_isValid = ::OpenAPI::fromJsonValue(m_pdf_status, json[QString("pdfStatus")]);
    m_pdf_status_isSet = !json[QString("pdfStatus")].isNull() && m_pdf_status_isValid;

    m_tdm_only_isValid = ::OpenAPI::fromJsonValue(m_tdm_only, json[QString("tdmOnly")]);
    m_tdm_only_isSet = !json[QString("tdmOnly")].isNull() && m_tdm_only_isValid;

    m_text_status_isValid = ::OpenAPI::fromJsonValue(m_text_status, json[QString("textStatus")]);
    m_text_status_isSet = !json[QString("textStatus")].isNull() && m_text_status_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAILanguage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILanguage::asJsonObject() const {
    QJsonObject obj;
    if (m_deleted_status_isSet) {
        obj.insert(QString("deletedStatus"), ::OpenAPI::toJsonValue(m_deleted_status));
    }
    if (m_deposited_date_isSet) {
        obj.insert(QString("depositedDate"), ::OpenAPI::toJsonValue(m_deposited_date));
    }
    if (m_indexed_isSet) {
        obj.insert(QString("indexed"), ::OpenAPI::toJsonValue(m_indexed));
    }
    if (m_metadata_updated_isSet) {
        obj.insert(QString("metadataUpdated"), ::OpenAPI::toJsonValue(m_metadata_updated));
    }
    if (m_pdf_origin_isSet) {
        obj.insert(QString("pdfOrigin"), ::OpenAPI::toJsonValue(m_pdf_origin));
    }
    if (m_pdf_size_isSet) {
        obj.insert(QString("pdfSize"), ::OpenAPI::toJsonValue(m_pdf_size));
    }
    if (m_pdf_status_isSet) {
        obj.insert(QString("pdfStatus"), ::OpenAPI::toJsonValue(m_pdf_status));
    }
    if (m_tdm_only_isSet) {
        obj.insert(QString("tdmOnly"), ::OpenAPI::toJsonValue(m_tdm_only));
    }
    if (m_text_status_isSet) {
        obj.insert(QString("textStatus"), ::OpenAPI::toJsonValue(m_text_status));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

qint32 OAILanguage::getDeletedStatus() const {
    return m_deleted_status;
}
void OAILanguage::setDeletedStatus(const qint32 &deleted_status) {
    m_deleted_status = deleted_status;
    m_deleted_status_isSet = true;
}

bool OAILanguage::is_deleted_status_Set() const{
    return m_deleted_status_isSet;
}

bool OAILanguage::is_deleted_status_Valid() const{
    return m_deleted_status_isValid;
}

QDate OAILanguage::getDepositedDate() const {
    return m_deposited_date;
}
void OAILanguage::setDepositedDate(const QDate &deposited_date) {
    m_deposited_date = deposited_date;
    m_deposited_date_isSet = true;
}

bool OAILanguage::is_deposited_date_Set() const{
    return m_deposited_date_isSet;
}

bool OAILanguage::is_deposited_date_Valid() const{
    return m_deposited_date_isValid;
}

qint32 OAILanguage::getIndexed() const {
    return m_indexed;
}
void OAILanguage::setIndexed(const qint32 &indexed) {
    m_indexed = indexed;
    m_indexed_isSet = true;
}

bool OAILanguage::is_indexed_Set() const{
    return m_indexed_isSet;
}

bool OAILanguage::is_indexed_Valid() const{
    return m_indexed_isValid;
}

QDate OAILanguage::getMetadataUpdated() const {
    return m_metadata_updated;
}
void OAILanguage::setMetadataUpdated(const QDate &metadata_updated) {
    m_metadata_updated = metadata_updated;
    m_metadata_updated_isSet = true;
}

bool OAILanguage::is_metadata_updated_Set() const{
    return m_metadata_updated_isSet;
}

bool OAILanguage::is_metadata_updated_Valid() const{
    return m_metadata_updated_isValid;
}

QString OAILanguage::getPdfOrigin() const {
    return m_pdf_origin;
}
void OAILanguage::setPdfOrigin(const QString &pdf_origin) {
    m_pdf_origin = pdf_origin;
    m_pdf_origin_isSet = true;
}

bool OAILanguage::is_pdf_origin_Set() const{
    return m_pdf_origin_isSet;
}

bool OAILanguage::is_pdf_origin_Valid() const{
    return m_pdf_origin_isValid;
}

qint32 OAILanguage::getPdfSize() const {
    return m_pdf_size;
}
void OAILanguage::setPdfSize(const qint32 &pdf_size) {
    m_pdf_size = pdf_size;
    m_pdf_size_isSet = true;
}

bool OAILanguage::is_pdf_size_Set() const{
    return m_pdf_size_isSet;
}

bool OAILanguage::is_pdf_size_Valid() const{
    return m_pdf_size_isValid;
}

qint32 OAILanguage::getPdfStatus() const {
    return m_pdf_status;
}
void OAILanguage::setPdfStatus(const qint32 &pdf_status) {
    m_pdf_status = pdf_status;
    m_pdf_status_isSet = true;
}

bool OAILanguage::is_pdf_status_Set() const{
    return m_pdf_status_isSet;
}

bool OAILanguage::is_pdf_status_Valid() const{
    return m_pdf_status_isValid;
}

bool OAILanguage::isTdmOnly() const {
    return m_tdm_only;
}
void OAILanguage::setTdmOnly(const bool &tdm_only) {
    m_tdm_only = tdm_only;
    m_tdm_only_isSet = true;
}

bool OAILanguage::is_tdm_only_Set() const{
    return m_tdm_only_isSet;
}

bool OAILanguage::is_tdm_only_Valid() const{
    return m_tdm_only_isValid;
}

qint32 OAILanguage::getTextStatus() const {
    return m_text_status;
}
void OAILanguage::setTextStatus(const qint32 &text_status) {
    m_text_status = text_status;
    m_text_status_isSet = true;
}

bool OAILanguage::is_text_status_Set() const{
    return m_text_status_isSet;
}

bool OAILanguage::is_text_status_Valid() const{
    return m_text_status_isValid;
}

QDate OAILanguage::getTimestamp() const {
    return m_timestamp;
}
void OAILanguage::setTimestamp(const QDate &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAILanguage::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAILanguage::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAILanguage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deleted_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deposited_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indexed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tdm_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILanguage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
