/**
 * CORE API v2
 * <p style=\"text-align: justify;\">You can use the CORE API to access the      resources harvested and enriched by CORE. If you encounter any problems with the API, please <a href=\"/contact\">report them to us</a>.</p>  <h2>Overview</h2> <p style=\"text-align: justify;\">The API is organised by resource type. The resources are <b>articles</b>,      <b>journals</b> and <b>repositories</b> and are represented using JSON data format. Furthermore,      each resource has a list of methods. The API also provides two global methods for accessing all resources at once.</p>  <h2>Response format</h2> <p style=\"text-align: justify;\">Response for each query contains two fields: <b>status</b> and <b>data</b>.     In case of an error status, the data field is empty. The data field contains a single object     in case the request is for a specific identifier (e.g. CORE ID, CORE repository ID, etc.), or       contains a list of objects, for example for search queries. In case of batch requests, the response     is an array of objects, each of which contains its own <b>status</b> and <b>data</b> fields.     For search queries the response contains an additional field <b>totalHits</b>, which is the      total number of items which match the search criteria.</p>  <h2>Search query syntax</h2>  <p style=\"text-align: justify\">Complex search queries can be used in all of the API search methods.     The query can be a simple string or it can be built using terms and operators described in Elasticsearch     <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-query-string-query.html#query-string-syntax\">documentation</a>.     The usable field names are <strong>title</strong>, <strong>description</strong>, <strong>fullText</strong>,      <strong>authors</strong>, <strong>publisher</strong>, <strong>repositories.id</strong>, <strong>repositories.name</strong>,      <strong>doi</strong>, <strong>oai</strong>, <strong>identifiers</strong> (which is a list of article identifiers including OAI, URL, etc.), <strong>language.name</strong>      and <strong>year</strong>. Some example queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>title:psychology and language.name:English</p></li>     <li><p>repositories.id:86 AND year:2014</p></li>     <li><p>identifiers:\"oai:aura.abdn.ac.uk:2164/3837\" OR identifiers:\"oai:aura.abdn.ac.uk:2164/3843\"</p></li>     <li><p>doi:\"10.1186/1471-2458-6-309\"</p></li> </ul>  <h3>Retrieving the latest Articles</h3> <p style=\"text-align: justify\">     You can retrieve the harvested items since specific dates using the following queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>repositoryDocument.metadataUpdated:>2017-02-10</p></li>     <li><p>repositoryDocument.metadataUpdated:>2017-03-01 AND repositoryDocument.metadataUpdated:<2017-03-31</p></li>     </ul>  <h2>Sort order</h2>  <p style=\"text-align: justify;\">For search queries, the results are ordered by relevance score. For batch      requests, the results are retrieved in the order of the requests.</p>  <h2>Parameters</h2> <p style=\"text-align: justify;\">The API methods allow different parameters to be passed. Additionally, there is an API key parameter which is common to all API methods. For all API methods      the API key can be provided either as a query parameter or in the request header. If the API key      is not provided, the API will return HTTP 401 error. You can register for an API key <a href=\"/services#api\">here</a>.</p>  <h2>API methods</h2>
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIArticle.h
 *
 * 
 */

#ifndef OAIArticle_H
#define OAIArticle_H

#include <QJsonObject>

#include "OAIArticleJournal.h"
#include "OAICitation.h"
#include "OAILanguage.h"
#include "OAIObject.h"
#include "OAIRawRecordXml.h"
#include "OAIRepository.h"
#include "OAISimilar.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICitation;
class OAIArticleJournal;
class OAILanguage;
class OAIRawRecordXml;
class OAIRepository;
class OAISimilar;

class OAIArticle : public OAIObject {
public:
    OAIArticle();
    OAIArticle(QString json);
    ~OAIArticle() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAuthors() const;
    void setAuthors(const QList<QString> &authors);
    bool is_authors_Set() const;
    bool is_authors_Valid() const;

    QList<OAICitation> getCitations() const;
    void setCitations(const QList<OAICitation> &citations);
    bool is_citations_Set() const;
    bool is_citations_Valid() const;

    QList<QString> getContributors() const;
    void setContributors(const QList<QString> &contributors);
    bool is_contributors_Set() const;
    bool is_contributors_Valid() const;

    QString getDatePublished() const;
    void setDatePublished(const QString &date_published);
    bool is_date_published_Set() const;
    bool is_date_published_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDoi() const;
    void setDoi(const QString &doi);
    bool is_doi_Set() const;
    bool is_doi_Valid() const;

    QString getDownloadUrl() const;
    void setDownloadUrl(const QString &download_url);
    bool is_download_url_Set() const;
    bool is_download_url_Valid() const;

    QString getFulltext() const;
    void setFulltext(const QString &fulltext);
    bool is_fulltext_Set() const;
    bool is_fulltext_Valid() const;

    QString getFulltextIdentifier() const;
    void setFulltextIdentifier(const QString &fulltext_identifier);
    bool is_fulltext_identifier_Set() const;
    bool is_fulltext_identifier_Valid() const;

    QList<QString> getFulltextUrls() const;
    void setFulltextUrls(const QList<QString> &fulltext_urls);
    bool is_fulltext_urls_Set() const;
    bool is_fulltext_urls_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<QString> getIdentifiers() const;
    void setIdentifiers(const QList<QString> &identifiers);
    bool is_identifiers_Set() const;
    bool is_identifiers_Valid() const;

    QList<OAIArticleJournal> getJournals() const;
    void setJournals(const QList<OAIArticleJournal> &journals);
    bool is_journals_Set() const;
    bool is_journals_Valid() const;

    OAILanguage getLanguage() const;
    void setLanguage(const OAILanguage &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QString getOai() const;
    void setOai(const QString &oai);
    bool is_oai_Set() const;
    bool is_oai_Valid() const;

    QString getPublisher() const;
    void setPublisher(const QString &publisher);
    bool is_publisher_Set() const;
    bool is_publisher_Valid() const;

    OAIRawRecordXml getRawRecordXml() const;
    void setRawRecordXml(const OAIRawRecordXml &raw_record_xml);
    bool is_raw_record_xml_Set() const;
    bool is_raw_record_xml_Valid() const;

    QList<QString> getRelations() const;
    void setRelations(const QList<QString> &relations);
    bool is_relations_Set() const;
    bool is_relations_Valid() const;

    QList<OAIRepository> getRepositories() const;
    void setRepositories(const QList<OAIRepository> &repositories);
    bool is_repositories_Set() const;
    bool is_repositories_Valid() const;

    OAIObject getRepositoryDocument() const;
    void setRepositoryDocument(const OAIObject &repository_document);
    bool is_repository_document_Set() const;
    bool is_repository_document_Valid() const;

    QList<OAISimilar> getSimilarities() const;
    void setSimilarities(const QList<OAISimilar> &similarities);
    bool is_similarities_Set() const;
    bool is_similarities_Valid() const;

    QList<QString> getSubjects() const;
    void setSubjects(const QList<QString> &subjects);
    bool is_subjects_Set() const;
    bool is_subjects_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QList<QString> getTopics() const;
    void setTopics(const QList<QString> &topics);
    bool is_topics_Set() const;
    bool is_topics_Valid() const;

    QList<QString> getTypes() const;
    void setTypes(const QList<QString> &types);
    bool is_types_Set() const;
    bool is_types_Valid() const;

    qint32 getYear() const;
    void setYear(const qint32 &year);
    bool is_year_Set() const;
    bool is_year_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_authors;
    bool m_authors_isSet;
    bool m_authors_isValid;

    QList<OAICitation> m_citations;
    bool m_citations_isSet;
    bool m_citations_isValid;

    QList<QString> m_contributors;
    bool m_contributors_isSet;
    bool m_contributors_isValid;

    QString m_date_published;
    bool m_date_published_isSet;
    bool m_date_published_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_doi;
    bool m_doi_isSet;
    bool m_doi_isValid;

    QString m_download_url;
    bool m_download_url_isSet;
    bool m_download_url_isValid;

    QString m_fulltext;
    bool m_fulltext_isSet;
    bool m_fulltext_isValid;

    QString m_fulltext_identifier;
    bool m_fulltext_identifier_isSet;
    bool m_fulltext_identifier_isValid;

    QList<QString> m_fulltext_urls;
    bool m_fulltext_urls_isSet;
    bool m_fulltext_urls_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<QString> m_identifiers;
    bool m_identifiers_isSet;
    bool m_identifiers_isValid;

    QList<OAIArticleJournal> m_journals;
    bool m_journals_isSet;
    bool m_journals_isValid;

    OAILanguage m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QString m_oai;
    bool m_oai_isSet;
    bool m_oai_isValid;

    QString m_publisher;
    bool m_publisher_isSet;
    bool m_publisher_isValid;

    OAIRawRecordXml m_raw_record_xml;
    bool m_raw_record_xml_isSet;
    bool m_raw_record_xml_isValid;

    QList<QString> m_relations;
    bool m_relations_isSet;
    bool m_relations_isValid;

    QList<OAIRepository> m_repositories;
    bool m_repositories_isSet;
    bool m_repositories_isValid;

    OAIObject m_repository_document;
    bool m_repository_document_isSet;
    bool m_repository_document_isValid;

    QList<OAISimilar> m_similarities;
    bool m_similarities_isSet;
    bool m_similarities_isValid;

    QList<QString> m_subjects;
    bool m_subjects_isSet;
    bool m_subjects_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QList<QString> m_topics;
    bool m_topics_isSet;
    bool m_topics_isValid;

    QList<QString> m_types;
    bool m_types_isSet;
    bool m_types_isValid;

    qint32 m_year;
    bool m_year_isSet;
    bool m_year_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIArticle)

#endif // OAIArticle_H
