/**
 * CORE API v2
 * <p style=\"text-align: justify;\">You can use the CORE API to access the      resources harvested and enriched by CORE. If you encounter any problems with the API, please <a href=\"/contact\">report them to us</a>.</p>  <h2>Overview</h2> <p style=\"text-align: justify;\">The API is organised by resource type. The resources are <b>articles</b>,      <b>journals</b> and <b>repositories</b> and are represented using JSON data format. Furthermore,      each resource has a list of methods. The API also provides two global methods for accessing all resources at once.</p>  <h2>Response format</h2> <p style=\"text-align: justify;\">Response for each query contains two fields: <b>status</b> and <b>data</b>.     In case of an error status, the data field is empty. The data field contains a single object     in case the request is for a specific identifier (e.g. CORE ID, CORE repository ID, etc.), or       contains a list of objects, for example for search queries. In case of batch requests, the response     is an array of objects, each of which contains its own <b>status</b> and <b>data</b> fields.     For search queries the response contains an additional field <b>totalHits</b>, which is the      total number of items which match the search criteria.</p>  <h2>Search query syntax</h2>  <p style=\"text-align: justify\">Complex search queries can be used in all of the API search methods.     The query can be a simple string or it can be built using terms and operators described in Elasticsearch     <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-query-string-query.html#query-string-syntax\">documentation</a>.     The usable field names are <strong>title</strong>, <strong>description</strong>, <strong>fullText</strong>,      <strong>authors</strong>, <strong>publisher</strong>, <strong>repositories.id</strong>, <strong>repositories.name</strong>,      <strong>doi</strong>, <strong>oai</strong>, <strong>identifiers</strong> (which is a list of article identifiers including OAI, URL, etc.), <strong>language.name</strong>      and <strong>year</strong>. Some example queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>title:psychology and language.name:English</p></li>     <li><p>repositories.id:86 AND year:2014</p></li>     <li><p>identifiers:\"oai:aura.abdn.ac.uk:2164/3837\" OR identifiers:\"oai:aura.abdn.ac.uk:2164/3843\"</p></li>     <li><p>doi:\"10.1186/1471-2458-6-309\"</p></li> </ul>  <h3>Retrieving the latest Articles</h3> <p style=\"text-align: justify\">     You can retrieve the harvested items since specific dates using the following queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>repositoryDocument.metadataUpdated:>2017-02-10</p></li>     <li><p>repositoryDocument.metadataUpdated:>2017-03-01 AND repositoryDocument.metadataUpdated:<2017-03-31</p></li>     </ul>  <h2>Sort order</h2>  <p style=\"text-align: justify;\">For search queries, the results are ordered by relevance score. For batch      requests, the results are retrieved in the order of the requests.</p>  <h2>Parameters</h2> <p style=\"text-align: justify;\">The API methods allow different parameters to be passed. Additionally, there is an API key parameter which is common to all API methods. For all API methods      the API key can be provided either as a query parameter or in the request header. If the API key      is not provided, the API will return HTTP 401 error. You can register for an API key <a href=\"/services#api\">here</a>.</p>  <h2>API methods</h2>
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRepositoriesApi_H
#define OAI_OAIRepositoriesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRepositoryResponse.h"
#include "OAIRepositorySearchResponse.h"
#include "OAISearchRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRepositoriesApi : public QObject {
    Q_OBJECT

public:
    OAIRepositoriesApi(const int timeOut = 0);
    ~OAIRepositoriesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  repository_id qint32 [required]
    * @param[in]  stats bool [optional]
    * @param[in]  deposit_history bool [optional]
    * @param[in]  deposit_history_cumulative bool [optional]
    */
    virtual void getRepositoryById(const qint32 &repository_id, const ::OpenAPI::OptionalParam<bool> &stats = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &deposit_history = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &deposit_history_cumulative = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  body QList<qint32> [required]
    * @param[in]  stats bool [optional]
    * @param[in]  deposit_history bool [optional]
    * @param[in]  deposit_history_cumulative bool [optional]
    */
    virtual void getRepositoryByIdBatch(const QList<qint32> &body, const ::OpenAPI::OptionalParam<bool> &stats = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &deposit_history = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &deposit_history_cumulative = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  body QList<OAISearchRequest> [required]
    * @param[in]  stats bool [optional]
    * @param[in]  deposit_history bool [optional]
    * @param[in]  deposit_history_cumulative bool [optional]
    */
    virtual void repositoriesSearchPost(const QList<OAISearchRequest> &body, const ::OpenAPI::OptionalParam<bool> &stats = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &deposit_history = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &deposit_history_cumulative = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  stats bool [optional]
    * @param[in]  deposit_history bool [optional]
    * @param[in]  deposit_history_cumulative bool [optional]
    */
    virtual void repositoriesSearchQueryGet(const QString &query, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &stats = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &deposit_history = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &deposit_history_cumulative = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getRepositoryByIdCallback(OAIHttpRequestWorker *worker);
    void getRepositoryByIdBatchCallback(OAIHttpRequestWorker *worker);
    void repositoriesSearchPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesSearchQueryGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getRepositoryByIdSignal(OAIRepositoryResponse summary);
    void getRepositoryByIdBatchSignal(QList<OAIRepositoryResponse> summary);
    void repositoriesSearchPostSignal(OAIRepositorySearchResponse summary);
    void repositoriesSearchQueryGetSignal(OAIRepositorySearchResponse summary);


    void getRepositoryByIdSignalFull(OAIHttpRequestWorker *worker, OAIRepositoryResponse summary);
    void getRepositoryByIdBatchSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepositoryResponse> summary);
    void repositoriesSearchPostSignalFull(OAIHttpRequestWorker *worker, OAIRepositorySearchResponse summary);
    void repositoriesSearchQueryGetSignalFull(OAIHttpRequestWorker *worker, OAIRepositorySearchResponse summary);

    Q_DECL_DEPRECATED_X("Use getRepositoryByIdSignalError() instead")
    void getRepositoryByIdSignalE(OAIRepositoryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryByIdSignalError(OAIRepositoryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryByIdBatchSignalError() instead")
    void getRepositoryByIdBatchSignalE(QList<OAIRepositoryResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryByIdBatchSignalError(QList<OAIRepositoryResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesSearchPostSignalError() instead")
    void repositoriesSearchPostSignalE(OAIRepositorySearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesSearchPostSignalError(OAIRepositorySearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesSearchQueryGetSignalError() instead")
    void repositoriesSearchQueryGetSignalE(OAIRepositorySearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesSearchQueryGetSignalError(OAIRepositorySearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getRepositoryByIdSignalErrorFull() instead")
    void getRepositoryByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryByIdBatchSignalErrorFull() instead")
    void getRepositoryByIdBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryByIdBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesSearchPostSignalErrorFull() instead")
    void repositoriesSearchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesSearchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesSearchQueryGetSignalErrorFull() instead")
    void repositoriesSearchQueryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesSearchQueryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
