# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, page: int=None, page_size: int=None, query: str=None):
        """SearchRequest - a model defined in OpenAPI

        :param page: The page of this SearchRequest.
        :param page_size: The page_size of this SearchRequest.
        :param query: The query of this SearchRequest.
        """
        self.openapi_types = {
            'page': int,
            'page_size': int,
            'query': str
        }

        self.attribute_map = {
            'page': 'page',
            'page_size': 'pageSize',
            'query': 'query'
        }

        self._page = page
        self._page_size = page_size
        self._query = query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchRequest of this SearchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page(self):
        """Gets the page of this SearchRequest.

        Which page of the search results should be retrieved. Can be any number from 1 to 100, default is 1 (first page)

        :return: The page of this SearchRequest.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this SearchRequest.

        Which page of the search results should be retrieved. Can be any number from 1 to 100, default is 1 (first page)

        :param page: The page of this SearchRequest.
        :type page: int
        """
        if page is not None and page > 100:
            raise ValueError("Invalid value for `page`, must be a value less than or equal to `100`")
        if page is not None and page < 1:
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `1`")

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this SearchRequest.

        The number of results to return per page. Can be any number from 10 to 100, default is 10

        :return: The page_size of this SearchRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this SearchRequest.

        The number of results to return per page. Can be any number from 10 to 100, default is 10

        :param page_size: The page_size of this SearchRequest.
        :type page_size: int
        """
        if page_size is not None and page_size > 100:
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `100`")
        if page_size is not None and page_size < 10:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `10`")

        self._page_size = page_size

    @property
    def query(self):
        """Gets the query of this SearchRequest.

        Search query

        :return: The query of this SearchRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchRequest.

        Search query

        :param query: The query of this SearchRequest.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query
