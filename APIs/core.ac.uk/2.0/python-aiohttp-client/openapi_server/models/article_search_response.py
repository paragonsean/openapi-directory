# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.article import Article
from openapi_server import util


class ArticleSearchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[Article]=None, status: str=None, total_hits: int=None):
        """ArticleSearchResponse - a model defined in OpenAPI

        :param data: The data of this ArticleSearchResponse.
        :param status: The status of this ArticleSearchResponse.
        :param total_hits: The total_hits of this ArticleSearchResponse.
        """
        self.openapi_types = {
            'data': List[Article],
            'status': str,
            'total_hits': int
        }

        self.attribute_map = {
            'data': 'data',
            'status': 'status',
            'total_hits': 'totalHits'
        }

        self._data = data
        self._status = status
        self._total_hits = total_hits

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArticleSearchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArticleSearchResponse of this ArticleSearchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this ArticleSearchResponse.

        Search results

        :return: The data of this ArticleSearchResponse.
        :rtype: List[Article]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ArticleSearchResponse.

        Search results

        :param data: The data of this ArticleSearchResponse.
        :type data: List[Article]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def status(self):
        """Gets the status of this ArticleSearchResponse.

        Operation status

        :return: The status of this ArticleSearchResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ArticleSearchResponse.

        Operation status

        :param status: The status of this ArticleSearchResponse.
        :type status: str
        """
        allowed_values = ["OK", "Not found", "Too many queries", "Missing parameter", "Invalid parameter", "Parameter out of bounds"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def total_hits(self):
        """Gets the total_hits of this ArticleSearchResponse.

        Total number of articles matching the search criteria

        :return: The total_hits of this ArticleSearchResponse.
        :rtype: int
        """
        return self._total_hits

    @total_hits.setter
    def total_hits(self, total_hits):
        """Sets the total_hits of this ArticleSearchResponse.

        Total number of articles matching the search criteria

        :param total_hits: The total_hits of this ArticleSearchResponse.
        :type total_hits: int
        """
        if total_hits is None:
            raise ValueError("Invalid value for `total_hits`, must not be `None`")

        self._total_hits = total_hits
