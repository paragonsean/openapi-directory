# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.article_journal import ArticleJournal
from openapi_server.models.citation import Citation
from openapi_server.models.language import Language
from openapi_server.models.raw_record_xml import RawRecordXml
from openapi_server.models.repository import Repository
from openapi_server.models.similar import Similar
from openapi_server import util


class Article(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authors: List[str]=None, citations: List[Citation]=None, contributors: List[str]=None, date_published: str=None, description: str=None, doi: str=None, download_url: str=None, fulltext: str=None, fulltext_identifier: str=None, fulltext_urls: List[str]=None, id: int=None, identifiers: List[str]=None, journals: List[ArticleJournal]=None, language: Language=None, oai: str=None, publisher: str=None, raw_record_xml: RawRecordXml=None, relations: List[str]=None, repositories: List[Repository]=None, repository_document: object=None, similarities: List[Similar]=None, subjects: List[str]=None, title: str=None, topics: List[str]=None, types: List[str]=None, year: int=None):
        """Article - a model defined in OpenAPI

        :param authors: The authors of this Article.
        :param citations: The citations of this Article.
        :param contributors: The contributors of this Article.
        :param date_published: The date_published of this Article.
        :param description: The description of this Article.
        :param doi: The doi of this Article.
        :param download_url: The download_url of this Article.
        :param fulltext: The fulltext of this Article.
        :param fulltext_identifier: The fulltext_identifier of this Article.
        :param fulltext_urls: The fulltext_urls of this Article.
        :param id: The id of this Article.
        :param identifiers: The identifiers of this Article.
        :param journals: The journals of this Article.
        :param language: The language of this Article.
        :param oai: The oai of this Article.
        :param publisher: The publisher of this Article.
        :param raw_record_xml: The raw_record_xml of this Article.
        :param relations: The relations of this Article.
        :param repositories: The repositories of this Article.
        :param repository_document: The repository_document of this Article.
        :param similarities: The similarities of this Article.
        :param subjects: The subjects of this Article.
        :param title: The title of this Article.
        :param topics: The topics of this Article.
        :param types: The types of this Article.
        :param year: The year of this Article.
        """
        self.openapi_types = {
            'authors': List[str],
            'citations': List[Citation],
            'contributors': List[str],
            'date_published': str,
            'description': str,
            'doi': str,
            'download_url': str,
            'fulltext': str,
            'fulltext_identifier': str,
            'fulltext_urls': List[str],
            'id': int,
            'identifiers': List[str],
            'journals': List[ArticleJournal],
            'language': Language,
            'oai': str,
            'publisher': str,
            'raw_record_xml': RawRecordXml,
            'relations': List[str],
            'repositories': List[Repository],
            'repository_document': object,
            'similarities': List[Similar],
            'subjects': List[str],
            'title': str,
            'topics': List[str],
            'types': List[str],
            'year': int
        }

        self.attribute_map = {
            'authors': 'authors',
            'citations': 'citations',
            'contributors': 'contributors',
            'date_published': 'datePublished',
            'description': 'description',
            'doi': 'doi',
            'download_url': 'downloadUrl',
            'fulltext': 'fulltext',
            'fulltext_identifier': 'fulltextIdentifier',
            'fulltext_urls': 'fulltextUrls',
            'id': 'id',
            'identifiers': 'identifiers',
            'journals': 'journals',
            'language': 'language',
            'oai': 'oai',
            'publisher': 'publisher',
            'raw_record_xml': 'rawRecordXml',
            'relations': 'relations',
            'repositories': 'repositories',
            'repository_document': 'repositoryDocument',
            'similarities': 'similarities',
            'subjects': 'subjects',
            'title': 'title',
            'topics': 'topics',
            'types': 'types',
            'year': 'year'
        }

        self._authors = authors
        self._citations = citations
        self._contributors = contributors
        self._date_published = date_published
        self._description = description
        self._doi = doi
        self._download_url = download_url
        self._fulltext = fulltext
        self._fulltext_identifier = fulltext_identifier
        self._fulltext_urls = fulltext_urls
        self._id = id
        self._identifiers = identifiers
        self._journals = journals
        self._language = language
        self._oai = oai
        self._publisher = publisher
        self._raw_record_xml = raw_record_xml
        self._relations = relations
        self._repositories = repositories
        self._repository_document = repository_document
        self._similarities = similarities
        self._subjects = subjects
        self._title = title
        self._topics = topics
        self._types = types
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Article':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Article of this Article.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authors(self):
        """Gets the authors of this Article.

        List of article authors

        :return: The authors of this Article.
        :rtype: List[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this Article.

        List of article authors

        :param authors: The authors of this Article.
        :type authors: List[str]
        """

        self._authors = authors

    @property
    def citations(self):
        """Gets the citations of this Article.

        Citations found in the article

        :return: The citations of this Article.
        :rtype: List[Citation]
        """
        return self._citations

    @citations.setter
    def citations(self, citations):
        """Sets the citations of this Article.

        Citations found in the article

        :param citations: The citations of this Article.
        :type citations: List[Citation]
        """

        self._citations = citations

    @property
    def contributors(self):
        """Gets the contributors of this Article.

        List of article contributors

        :return: The contributors of this Article.
        :rtype: List[str]
        """
        return self._contributors

    @contributors.setter
    def contributors(self, contributors):
        """Sets the contributors of this Article.

        List of article contributors

        :param contributors: The contributors of this Article.
        :type contributors: List[str]
        """

        self._contributors = contributors

    @property
    def date_published(self):
        """Gets the date_published of this Article.

        Date article published

        :return: The date_published of this Article.
        :rtype: str
        """
        return self._date_published

    @date_published.setter
    def date_published(self, date_published):
        """Sets the date_published of this Article.

        Date article published

        :param date_published: The date_published of this Article.
        :type date_published: str
        """

        self._date_published = date_published

    @property
    def description(self):
        """Gets the description of this Article.

        The abstract

        :return: The description of this Article.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Article.

        The abstract

        :param description: The description of this Article.
        :type description: str
        """

        self._description = description

    @property
    def doi(self):
        """Gets the doi of this Article.

        The DOI of the article

        :return: The doi of this Article.
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this Article.

        The DOI of the article

        :param doi: The doi of this Article.
        :type doi: str
        """

        self._doi = doi

    @property
    def download_url(self):
        """Gets the download_url of this Article.

        The download PDF URL which is displayed on our /display/[ArticleID] page

        :return: The download_url of this Article.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this Article.

        The download PDF URL which is displayed on our /display/[ArticleID] page

        :param download_url: The download_url of this Article.
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def fulltext(self):
        """Gets the fulltext of this Article.

        Article full text

        :return: The fulltext of this Article.
        :rtype: str
        """
        return self._fulltext

    @fulltext.setter
    def fulltext(self, fulltext):
        """Sets the fulltext of this Article.

        Article full text

        :param fulltext: The fulltext of this Article.
        :type fulltext: str
        """

        self._fulltext = fulltext

    @property
    def fulltext_identifier(self):
        """Gets the fulltext_identifier of this Article.

        The URL to the fulltext

        :return: The fulltext_identifier of this Article.
        :rtype: str
        """
        return self._fulltext_identifier

    @fulltext_identifier.setter
    def fulltext_identifier(self, fulltext_identifier):
        """Sets the fulltext_identifier of this Article.

        The URL to the fulltext

        :param fulltext_identifier: The fulltext_identifier of this Article.
        :type fulltext_identifier: str
        """

        self._fulltext_identifier = fulltext_identifier

    @property
    def fulltext_urls(self):
        """Gets the fulltext_urls of this Article.

        URLs of the fulltext version of this article

        :return: The fulltext_urls of this Article.
        :rtype: List[str]
        """
        return self._fulltext_urls

    @fulltext_urls.setter
    def fulltext_urls(self, fulltext_urls):
        """Sets the fulltext_urls of this Article.

        URLs of the fulltext version of this article

        :param fulltext_urls: The fulltext_urls of this Article.
        :type fulltext_urls: List[str]
        """

        self._fulltext_urls = fulltext_urls

    @property
    def id(self):
        """Gets the id of this Article.

        Article ID

        :return: The id of this Article.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Article.

        Article ID

        :param id: The id of this Article.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def identifiers(self):
        """Gets the identifiers of this Article.

        List of document identifiers

        :return: The identifiers of this Article.
        :rtype: List[str]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Article.

        List of document identifiers

        :param identifiers: The identifiers of this Article.
        :type identifiers: List[str]
        """

        self._identifiers = identifiers

    @property
    def journals(self):
        """Gets the journals of this Article.

        List of journals this article belongs to

        :return: The journals of this Article.
        :rtype: List[ArticleJournal]
        """
        return self._journals

    @journals.setter
    def journals(self, journals):
        """Sets the journals of this Article.

        List of journals this article belongs to

        :param journals: The journals of this Article.
        :type journals: List[ArticleJournal]
        """

        self._journals = journals

    @property
    def language(self):
        """Gets the language of this Article.


        :return: The language of this Article.
        :rtype: Language
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Article.


        :param language: The language of this Article.
        :type language: Language
        """

        self._language = language

    @property
    def oai(self):
        """Gets the oai of this Article.

        The OAI of the article

        :return: The oai of this Article.
        :rtype: str
        """
        return self._oai

    @oai.setter
    def oai(self, oai):
        """Sets the oai of this Article.

        The OAI of the article

        :param oai: The oai of this Article.
        :type oai: str
        """

        self._oai = oai

    @property
    def publisher(self):
        """Gets the publisher of this Article.

        Publisher of the article

        :return: The publisher of this Article.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this Article.

        Publisher of the article

        :param publisher: The publisher of this Article.
        :type publisher: str
        """

        self._publisher = publisher

    @property
    def raw_record_xml(self):
        """Gets the raw_record_xml of this Article.


        :return: The raw_record_xml of this Article.
        :rtype: RawRecordXml
        """
        return self._raw_record_xml

    @raw_record_xml.setter
    def raw_record_xml(self, raw_record_xml):
        """Sets the raw_record_xml of this Article.


        :param raw_record_xml: The raw_record_xml of this Article.
        :type raw_record_xml: RawRecordXml
        """

        self._raw_record_xml = raw_record_xml

    @property
    def relations(self):
        """Gets the relations of this Article.

        URLs of relating articles, etc.

        :return: The relations of this Article.
        :rtype: List[str]
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """Sets the relations of this Article.

        URLs of relating articles, etc.

        :param relations: The relations of this Article.
        :type relations: List[str]
        """

        self._relations = relations

    @property
    def repositories(self):
        """Gets the repositories of this Article.

        List of repositories this article belongs to

        :return: The repositories of this Article.
        :rtype: List[Repository]
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """Sets the repositories of this Article.

        List of repositories this article belongs to

        :param repositories: The repositories of this Article.
        :type repositories: List[Repository]
        """

        self._repositories = repositories

    @property
    def repository_document(self):
        """Gets the repository_document of this Article.


        :return: The repository_document of this Article.
        :rtype: object
        """
        return self._repository_document

    @repository_document.setter
    def repository_document(self, repository_document):
        """Sets the repository_document of this Article.


        :param repository_document: The repository_document of this Article.
        :type repository_document: object
        """

        self._repository_document = repository_document

    @property
    def similarities(self):
        """Gets the similarities of this Article.

        Similar articles

        :return: The similarities of this Article.
        :rtype: List[Similar]
        """
        return self._similarities

    @similarities.setter
    def similarities(self, similarities):
        """Sets the similarities of this Article.

        Similar articles

        :param similarities: The similarities of this Article.
        :type similarities: List[Similar]
        """

        self._similarities = similarities

    @property
    def subjects(self):
        """Gets the subjects of this Article.

        Article subjects

        :return: The subjects of this Article.
        :rtype: List[str]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this Article.

        Article subjects

        :param subjects: The subjects of this Article.
        :type subjects: List[str]
        """

        self._subjects = subjects

    @property
    def title(self):
        """Gets the title of this Article.

        Article title

        :return: The title of this Article.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Article.

        Article title

        :param title: The title of this Article.
        :type title: str
        """

        self._title = title

    @property
    def topics(self):
        """Gets the topics of this Article.

        Article topics

        :return: The topics of this Article.
        :rtype: List[str]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this Article.

        Article topics

        :param topics: The topics of this Article.
        :type topics: List[str]
        """

        self._topics = topics

    @property
    def types(self):
        """Gets the types of this Article.

        Types, e.g. conference paper, journal paper, etc.

        :return: The types of this Article.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this Article.

        Types, e.g. conference paper, journal paper, etc.

        :param types: The types of this Article.
        :type types: List[str]
        """

        self._types = types

    @property
    def year(self):
        """Gets the year of this Article.

        Year the article was published

        :return: The year of this Article.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Article.

        Year the article was published

        :param year: The year of this Article.
        :type year: int
        """

        self._year = year
