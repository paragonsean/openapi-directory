# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RepositoryLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, country_code: str=None, id: int=None, latitude: int=None, longitude: int=None, repository_name: str=None):
        """RepositoryLocation - a model defined in OpenAPI

        :param country: The country of this RepositoryLocation.
        :param country_code: The country_code of this RepositoryLocation.
        :param id: The id of this RepositoryLocation.
        :param latitude: The latitude of this RepositoryLocation.
        :param longitude: The longitude of this RepositoryLocation.
        :param repository_name: The repository_name of this RepositoryLocation.
        """
        self.openapi_types = {
            'country': str,
            'country_code': str,
            'id': int,
            'latitude': int,
            'longitude': int,
            'repository_name': str
        }

        self.attribute_map = {
            'country': 'country',
            'country_code': 'countryCode',
            'id': 'id',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'repository_name': 'repositoryName'
        }

        self._country = country
        self._country_code = country_code
        self._id = id
        self._latitude = latitude
        self._longitude = longitude
        self._repository_name = repository_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepositoryLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepositoryLocation of this RepositoryLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this RepositoryLocation.

        Country name

        :return: The country of this RepositoryLocation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this RepositoryLocation.

        Country name

        :param country: The country of this RepositoryLocation.
        :type country: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this RepositoryLocation.

        Two letter country code

        :return: The country_code of this RepositoryLocation.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this RepositoryLocation.

        Two letter country code

        :param country_code: The country_code of this RepositoryLocation.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def id(self):
        """Gets the id of this RepositoryLocation.

        CORE repository ID

        :return: The id of this RepositoryLocation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepositoryLocation.

        CORE repository ID

        :param id: The id of this RepositoryLocation.
        :type id: int
        """

        self._id = id

    @property
    def latitude(self):
        """Gets the latitude of this RepositoryLocation.


        :return: The latitude of this RepositoryLocation.
        :rtype: int
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this RepositoryLocation.


        :param latitude: The latitude of this RepositoryLocation.
        :type latitude: int
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this RepositoryLocation.


        :return: The longitude of this RepositoryLocation.
        :rtype: int
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this RepositoryLocation.


        :param longitude: The longitude of this RepositoryLocation.
        :type longitude: int
        """

        self._longitude = longitude

    @property
    def repository_name(self):
        """Gets the repository_name of this RepositoryLocation.

        Repository name

        :return: The repository_name of this RepositoryLocation.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this RepositoryLocation.

        Repository name

        :param repository_name: The repository_name of this RepositoryLocation.
        :type repository_name: str
        """

        self._repository_name = repository_name
