# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Language(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deleted_status: int=None, deposited_date: date=None, indexed: int=None, metadata_updated: date=None, pdf_origin: str=None, pdf_size: int=None, pdf_status: int=None, tdm_only: bool=None, text_status: int=None, timestamp: date=None):
        """Language - a model defined in OpenAPI

        :param deleted_status: The deleted_status of this Language.
        :param deposited_date: The deposited_date of this Language.
        :param indexed: The indexed of this Language.
        :param metadata_updated: The metadata_updated of this Language.
        :param pdf_origin: The pdf_origin of this Language.
        :param pdf_size: The pdf_size of this Language.
        :param pdf_status: The pdf_status of this Language.
        :param tdm_only: The tdm_only of this Language.
        :param text_status: The text_status of this Language.
        :param timestamp: The timestamp of this Language.
        """
        self.openapi_types = {
            'deleted_status': int,
            'deposited_date': date,
            'indexed': int,
            'metadata_updated': date,
            'pdf_origin': str,
            'pdf_size': int,
            'pdf_status': int,
            'tdm_only': bool,
            'text_status': int,
            'timestamp': date
        }

        self.attribute_map = {
            'deleted_status': 'deletedStatus',
            'deposited_date': 'depositedDate',
            'indexed': 'indexed',
            'metadata_updated': 'metadataUpdated',
            'pdf_origin': 'pdfOrigin',
            'pdf_size': 'pdfSize',
            'pdf_status': 'pdfStatus',
            'tdm_only': 'tdmOnly',
            'text_status': 'textStatus',
            'timestamp': 'timestamp'
        }

        self._deleted_status = deleted_status
        self._deposited_date = deposited_date
        self._indexed = indexed
        self._metadata_updated = metadata_updated
        self._pdf_origin = pdf_origin
        self._pdf_size = pdf_size
        self._pdf_status = pdf_status
        self._tdm_only = tdm_only
        self._text_status = text_status
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Language':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Language of this Language.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deleted_status(self):
        """Gets the deleted_status of this Language.

        The deleted status of the document: 0 for allowed, 1 for deleted, 2 for disabled

        :return: The deleted_status of this Language.
        :rtype: int
        """
        return self._deleted_status

    @deleted_status.setter
    def deleted_status(self, deleted_status):
        """Sets the deleted_status of this Language.

        The deleted status of the document: 0 for allowed, 1 for deleted, 2 for disabled

        :param deleted_status: The deleted_status of this Language.
        :type deleted_status: int
        """

        self._deleted_status = deleted_status

    @property
    def deposited_date(self):
        """Gets the deposited_date of this Language.

        The date the item was deposited in the Data Provider (repository/Journal)

        :return: The deposited_date of this Language.
        :rtype: date
        """
        return self._deposited_date

    @deposited_date.setter
    def deposited_date(self, deposited_date):
        """Sets the deposited_date of this Language.

        The date the item was deposited in the Data Provider (repository/Journal)

        :param deposited_date: The deposited_date of this Language.
        :type deposited_date: date
        """

        self._deposited_date = deposited_date

    @property
    def indexed(self):
        """Gets the indexed of this Language.

        The index status of the document: 0 for not indexed, 1 for indexed

        :return: The indexed of this Language.
        :rtype: int
        """
        return self._indexed

    @indexed.setter
    def indexed(self, indexed):
        """Sets the indexed of this Language.

        The index status of the document: 0 for not indexed, 1 for indexed

        :param indexed: The indexed of this Language.
        :type indexed: int
        """

        self._indexed = indexed

    @property
    def metadata_updated(self):
        """Gets the metadata_updated of this Language.

        The last date metadata of this article were updated

        :return: The metadata_updated of this Language.
        :rtype: date
        """
        return self._metadata_updated

    @metadata_updated.setter
    def metadata_updated(self, metadata_updated):
        """Sets the metadata_updated of this Language.

        The last date metadata of this article were updated

        :param metadata_updated: The metadata_updated of this Language.
        :type metadata_updated: date
        """

        self._metadata_updated = metadata_updated

    @property
    def pdf_origin(self):
        """Gets the pdf_origin of this Language.

        The remote URL where we aquired the PDF

        :return: The pdf_origin of this Language.
        :rtype: str
        """
        return self._pdf_origin

    @pdf_origin.setter
    def pdf_origin(self, pdf_origin):
        """Sets the pdf_origin of this Language.

        The remote URL where we aquired the PDF

        :param pdf_origin: The pdf_origin of this Language.
        :type pdf_origin: str
        """

        self._pdf_origin = pdf_origin

    @property
    def pdf_size(self):
        """Gets the pdf_size of this Language.

        The size of pdf in bytes

        :return: The pdf_size of this Language.
        :rtype: int
        """
        return self._pdf_size

    @pdf_size.setter
    def pdf_size(self, pdf_size):
        """Sets the pdf_size of this Language.

        The size of pdf in bytes

        :param pdf_size: The pdf_size of this Language.
        :type pdf_size: int
        """

        self._pdf_size = pdf_size

    @property
    def pdf_status(self):
        """Gets the pdf_status of this Language.

        The pdf status flag of article: 0 no pdf, 1 pdf exists

        :return: The pdf_status of this Language.
        :rtype: int
        """
        return self._pdf_status

    @pdf_status.setter
    def pdf_status(self, pdf_status):
        """Sets the pdf_status of this Language.

        The pdf status flag of article: 0 no pdf, 1 pdf exists

        :param pdf_status: The pdf_status of this Language.
        :type pdf_status: int
        """

        self._pdf_status = pdf_status

    @property
    def tdm_only(self):
        """Gets the tdm_only of this Language.

        The tdmOnly flag of the article: 0 normal, 1 tdm only

        :return: The tdm_only of this Language.
        :rtype: bool
        """
        return self._tdm_only

    @tdm_only.setter
    def tdm_only(self, tdm_only):
        """Sets the tdm_only of this Language.

        The tdmOnly flag of the article: 0 normal, 1 tdm only

        :param tdm_only: The tdm_only of this Language.
        :type tdm_only: bool
        """

        self._tdm_only = tdm_only

    @property
    def text_status(self):
        """Gets the text_status of this Language.

        The text status flag of article: 0 does not exist, 1 exists

        :return: The text_status of this Language.
        :rtype: int
        """
        return self._text_status

    @text_status.setter
    def text_status(self, text_status):
        """Sets the text_status of this Language.

        The text status flag of article: 0 does not exist, 1 exists

        :param text_status: The text_status of this Language.
        :type text_status: int
        """

        self._text_status = text_status

    @property
    def timestamp(self):
        """Gets the timestamp of this Language.

        The date of article as given by the repository

        :return: The timestamp of this Language.
        :rtype: date
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Language.

        The date of article as given by the repository

        :param timestamp: The timestamp of this Language.
        :type timestamp: date
        """

        self._timestamp = timestamp
