# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Journal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifiers: List[str]=None, language: str=None, publisher: str=None, rights: str=None, subjects: List[str]=None, title: str=None):
        """Journal - a model defined in OpenAPI

        :param identifiers: The identifiers of this Journal.
        :param language: The language of this Journal.
        :param publisher: The publisher of this Journal.
        :param rights: The rights of this Journal.
        :param subjects: The subjects of this Journal.
        :param title: The title of this Journal.
        """
        self.openapi_types = {
            'identifiers': List[str],
            'language': str,
            'publisher': str,
            'rights': str,
            'subjects': List[str],
            'title': str
        }

        self.attribute_map = {
            'identifiers': 'identifiers',
            'language': 'language',
            'publisher': 'publisher',
            'rights': 'rights',
            'subjects': 'subjects',
            'title': 'title'
        }

        self._identifiers = identifiers
        self._language = language
        self._publisher = publisher
        self._rights = rights
        self._subjects = subjects
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Journal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Journal of this Journal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifiers(self):
        """Gets the identifiers of this Journal.

        List of journal identifiers (e.g. URL, OAI or ISSN). The type is prepended to the identifier string (e.g. 'issn:2296-0597')

        :return: The identifiers of this Journal.
        :rtype: List[str]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Journal.

        List of journal identifiers (e.g. URL, OAI or ISSN). The type is prepended to the identifier string (e.g. 'issn:2296-0597')

        :param identifiers: The identifiers of this Journal.
        :type identifiers: List[str]
        """
        if identifiers is None:
            raise ValueError("Invalid value for `identifiers`, must not be `None`")

        self._identifiers = identifiers

    @property
    def language(self):
        """Gets the language of this Journal.

        Language of the journal

        :return: The language of this Journal.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Journal.

        Language of the journal

        :param language: The language of this Journal.
        :type language: str
        """

        self._language = language

    @property
    def publisher(self):
        """Gets the publisher of this Journal.

        Publisher of the journal

        :return: The publisher of this Journal.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this Journal.

        Publisher of the journal

        :param publisher: The publisher of this Journal.
        :type publisher: str
        """

        self._publisher = publisher

    @property
    def rights(self):
        """Gets the rights of this Journal.

        Copyright license of the journal

        :return: The rights of this Journal.
        :rtype: str
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this Journal.

        Copyright license of the journal

        :param rights: The rights of this Journal.
        :type rights: str
        """

        self._rights = rights

    @property
    def subjects(self):
        """Gets the subjects of this Journal.

        List of journal subjects

        :return: The subjects of this Journal.
        :rtype: List[str]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this Journal.

        List of journal subjects

        :param subjects: The subjects of this Journal.
        :type subjects: List[str]
        """

        self._subjects = subjects

    @property
    def title(self):
        """Gets the title of this Journal.

        Journal title

        :return: The title of this Journal.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Journal.

        Journal title

        :param title: The title of this Journal.
        :type title: str
        """

        self._title = title
