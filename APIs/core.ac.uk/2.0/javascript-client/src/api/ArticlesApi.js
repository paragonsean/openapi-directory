/**
 * CORE API v2
 * <p style=\"text-align: justify;\">You can use the CORE API to access the      resources harvested and enriched by CORE. If you encounter any problems with the API, please <a href=\"/contact\">report them to us</a>.</p>  <h2>Overview</h2> <p style=\"text-align: justify;\">The API is organised by resource type. The resources are <b>articles</b>,      <b>journals</b> and <b>repositories</b> and are represented using JSON data format. Furthermore,      each resource has a list of methods. The API also provides two global methods for accessing all resources at once.</p>  <h2>Response format</h2> <p style=\"text-align: justify;\">Response for each query contains two fields: <b>status</b> and <b>data</b>.     In case of an error status, the data field is empty. The data field contains a single object     in case the request is for a specific identifier (e.g. CORE ID, CORE repository ID, etc.), or       contains a list of objects, for example for search queries. In case of batch requests, the response     is an array of objects, each of which contains its own <b>status</b> and <b>data</b> fields.     For search queries the response contains an additional field <b>totalHits</b>, which is the      total number of items which match the search criteria.</p>  <h2>Search query syntax</h2>  <p style=\"text-align: justify\">Complex search queries can be used in all of the API search methods.     The query can be a simple string or it can be built using terms and operators described in Elasticsearch     <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-query-string-query.html#query-string-syntax\">documentation</a>.     The usable field names are <strong>title</strong>, <strong>description</strong>, <strong>fullText</strong>,      <strong>authors</strong>, <strong>publisher</strong>, <strong>repositories.id</strong>, <strong>repositories.name</strong>,      <strong>doi</strong>, <strong>oai</strong>, <strong>identifiers</strong> (which is a list of article identifiers including OAI, URL, etc.), <strong>language.name</strong>      and <strong>year</strong>. Some example queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>title:psychology and language.name:English</p></li>     <li><p>repositories.id:86 AND year:2014</p></li>     <li><p>identifiers:\"oai:aura.abdn.ac.uk:2164/3837\" OR identifiers:\"oai:aura.abdn.ac.uk:2164/3843\"</p></li>     <li><p>doi:\"10.1186/1471-2458-6-309\"</p></li> </ul>  <h3>Retrieving the latest Articles</h3> <p style=\"text-align: justify\">     You can retrieve the harvested items since specific dates using the following queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>repositoryDocument.metadataUpdated:>2017-02-10</p></li>     <li><p>repositoryDocument.metadataUpdated:>2017-03-01 AND repositoryDocument.metadataUpdated:<2017-03-31</p></li>     </ul>  <h2>Sort order</h2>  <p style=\"text-align: justify;\">For search queries, the results are ordered by relevance score. For batch      requests, the results are retrieved in the order of the requests.</p>  <h2>Parameters</h2> <p style=\"text-align: justify;\">The API methods allow different parameters to be passed. Additionally, there is an API key parameter which is common to all API methods. For all API methods      the API key can be provided either as a query parameter or in the request header. If the API key      is not provided, the API will return HTTP 401 error. You can register for an API key <a href=\"/services#api\">here</a>.</p>  <h2>API methods</h2>
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArticleHistoryResponse from '../model/ArticleHistoryResponse';
import ArticleResponse from '../model/ArticleResponse';
import ArticleSearchResponse from '../model/ArticleSearchResponse';
import ArticleSimilarResponse from '../model/ArticleSimilarResponse';
import SearchRequest from '../model/SearchRequest';
import SimilarRequest from '../model/SimilarRequest';

/**
* Articles service.
* @module api/ArticlesApi
* @version 2.0
*/
export default class ArticlesApi {

    /**
    * Constructs a new ArticlesApi. 
    * @alias module:api/ArticlesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getArticleByCoreId operation.
     * @callback module:api/ArticlesApi~getArticleByCoreIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get article by CORE ID
     * Method will retrieve an article based on given CORE ID.
     * @param {Number} coreId CORE ID of the article that needs to be fetched.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [metadata = true)] Whether to retrieve the full article metadata or only the ID. The default value is true.
     * @param {Boolean} [fulltext = false)] Whether to retrieve full text of the article. The default value is false
     * @param {Boolean} [citations = false)] Whether to retrieve citations found in the article. The default value is false
     * @param {Boolean} [similar = false)] Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time
     * @param {Boolean} [duplicate = false)] Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false
     * @param {Boolean} [urls = false)] Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false
     * @param {Boolean} [faithfulMetadata = false)] Returns the records raw XML metadata from the original repository. The default value is false
     * @param {module:api/ArticlesApi~getArticleByCoreIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleResponse}
     */
    getArticleByCoreId(coreId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'coreId' is set
      if (coreId === undefined || coreId === null) {
        throw new Error("Missing the required parameter 'coreId' when calling getArticleByCoreId");
      }

      let pathParams = {
        'coreId': coreId
      };
      let queryParams = {
        'metadata': opts['metadata'],
        'fulltext': opts['fulltext'],
        'citations': opts['citations'],
        'similar': opts['similar'],
        'duplicate': opts['duplicate'],
        'urls': opts['urls'],
        'faithfulMetadata': opts['faithfulMetadata']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleResponse;
      return this.apiClient.callApi(
        '/articles/get/{coreId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticleByCoreIdBatch operation.
     * @callback module:api/ArticlesApi~getArticleByCoreIdBatchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArticleResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch operation for retrieving articles by CORE ID
     * Method accepts a JSON array of CORE IDs and retrieves a list of articles. The response array is ordered based on the order of the IDs in the request array.
     * @param {Array.<Number>} body JSON array with CORE IDs of articles that need to be fetched
     * @param {Object} opts Optional parameters
     * @param {Boolean} [metadata = true)] Whether to retrieve the full article metadata or only the IDs. The default value is true
     * @param {Boolean} [fulltext = false)] Whether to retrieve fulltexts of the articles. The default value is false
     * @param {Boolean} [citations = false)] Whether to retrieve citations found in the articles. The default value is false
     * @param {Boolean} [similar = false)] Whether to retrieve lists of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time
     * @param {Boolean} [duplicate = false)] Whether to retrieve CORE IDs of different versions of the articles. The default value is false
     * @param {Boolean} [urls = false)] Whether to retrieve lists of URLs of the article fulltexts. The default value is false
     * @param {Boolean} [faithfulMetadata = false)] Returns the records raw XML metadata from the original repository. The default value is false
     * @param {module:api/ArticlesApi~getArticleByCoreIdBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArticleResponse>}
     */
    getArticleByCoreIdBatch(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getArticleByCoreIdBatch");
      }

      let pathParams = {
      };
      let queryParams = {
        'metadata': opts['metadata'],
        'fulltext': opts['fulltext'],
        'citations': opts['citations'],
        'similar': opts['similar'],
        'duplicate': opts['duplicate'],
        'urls': opts['urls'],
        'faithfulMetadata': opts['faithfulMetadata']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArticleResponse];
      return this.apiClient.callApi(
        '/articles/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticleHistoryByCoreId operation.
     * @callback module:api/ArticlesApi~getArticleHistoryByCoreIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleHistoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get article history by CORE ID
     * Method accepts a single CORE ID and returns a list of all historical versions of the article, which are stored in CORE database. The results are ordered from the newest one to the oldest one.
     * @param {String} coreId CORE ID of the article which history should be fetched
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Which page of the history results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page).
     * @param {Number} [pageSize = 10)] The number of results to return per page. Can be any number between 10 and 100, default is 10.
     * @param {module:api/ArticlesApi~getArticleHistoryByCoreIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleHistoryResponse}
     */
    getArticleHistoryByCoreId(coreId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'coreId' is set
      if (coreId === undefined || coreId === null) {
        throw new Error("Missing the required parameter 'coreId' when calling getArticleHistoryByCoreId");
      }

      let pathParams = {
        'coreId': coreId
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleHistoryResponse;
      return this.apiClient.callApi(
        '/articles/get/{coreId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticlePdfByCoreId operation.
     * @callback module:api/ArticlesApi~getArticlePdfByCoreIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get fulltext PDF by CORE ID
     * Method will retrieve an article based on given CORE ID.
     * @param {String} coreId ID of article history that needs to be fetched
     * @param {module:api/ArticlesApi~getArticlePdfByCoreIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getArticlePdfByCoreId(coreId, callback) {
      let postBody = null;
      // verify the required parameter 'coreId' is set
      if (coreId === undefined || coreId === null) {
        throw new Error("Missing the required parameter 'coreId' when calling getArticlePdfByCoreId");
      }

      let pathParams = {
        'coreId': coreId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/articles/get/{coreId}/download/pdf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nearDuplicateArticles operation.
     * @callback module:api/ArticlesApi~nearDuplicateArticlesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all near duplicate articles
     * Method accepts values for several parameters and retrieves a JSON array of articles which have near duplicate content matching the input parameters' values. The response array contains ids of the near duplicate articles along with their relevance scores.
     * @param {Object} opts Optional parameters
     * @param {String} [doi] The DOI for which the duplicates will be identified
     * @param {String} [title] Title to match when looking for duplicate articles. Only useful when either value for @year or @description is supplied.
     * @param {String} [year] Year the article was published. Only useful when value for @title is supplied. 
     * @param {String} [description] Abstract for an article based on which its duplicates will be found. Only useful when value for @title is supplied.
     * @param {String} [fulltext] Full text for an article based on which its duplicates will be found.
     * @param {String} [identifier] Article identifier for which the duplicates will be identified. Only useful when either values for @doi or (@title and @year) or (@title and @abstract) or @fulltext are supplied.
     * @param {String} [repositoryId] Limit the duplicates search to particular repository id. 
     * @param {module:api/ArticlesApi~nearDuplicateArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    nearDuplicateArticles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'doi': opts['doi'],
        'title': opts['title'],
        'year': opts['year'],
        'description': opts['description'],
        'fulltext': opts['fulltext'],
        'identifier': opts['identifier'],
        'repositoryId': opts['repositoryId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/articles/dedup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchArticles operation.
     * @callback module:api/ArticlesApi~searchArticlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search through all documents
     * Searches through all articles and returns a JSON array with search results. Method searches through all article fields.
     * @param {Number} query The search query
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Which page of the search results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page).
     * @param {Number} [pageSize = 10)] The number of results to return per page. Can be any number between 10 and 100, default is 10.
     * @param {Boolean} [metadata = true)] Whether to retrieve the full article metadata or only the ID. The default value is true.
     * @param {Boolean} [fulltext = false)] Whether to retrieve full text of the article. The default value is false
     * @param {Boolean} [citations = false)] Whether to retrieve citations found in the article. The default value is false
     * @param {Boolean} [similar = false)] Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time
     * @param {Boolean} [duplicate = false)] Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false
     * @param {Boolean} [urls = false)] Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false
     * @param {Boolean} [faithfulMetadata = false)] Returns the records raw XML metadata from the original repository. The default value is false
     * @param {module:api/ArticlesApi~searchArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleSearchResponse}
     */
    searchArticles(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchArticles");
      }

      let pathParams = {
        'query': query
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'metadata': opts['metadata'],
        'fulltext': opts['fulltext'],
        'citations': opts['citations'],
        'similar': opts['similar'],
        'duplicate': opts['duplicate'],
        'urls': opts['urls'],
        'faithfulMetadata': opts['faithfulMetadata']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleSearchResponse;
      return this.apiClient.callApi(
        '/articles/search/{query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchArticlesBatch operation.
     * @callback module:api/ArticlesApi~searchArticlesBatchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArticleSearchResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch operation for search through articles
     * Method accepts a JSON array of search queries and parameters. It then searches through all articles and returns a JSON array of search results for each of the queries. Method searches through all article fields (title, authors, subjects, identifiers, etc.).
     * @param {Array.<module:model/SearchRequest>} body JSON array with search queries and parameters. One request can contain up to 100 queries
     * @param {Object} opts Optional parameters
     * @param {Boolean} [metadata = true)] Whether to retrieve the full article metadata or only the ID. The default value is true.
     * @param {Boolean} [fulltext = false)] Whether to retrieve full text of the article. The default value is false
     * @param {Boolean} [citations = false)] Whether to retrieve citations found in the article. The default value is false
     * @param {Boolean} [similar = false)] Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time
     * @param {Boolean} [duplicate = false)] Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false
     * @param {Boolean} [urls = false)] Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false
     * @param {Boolean} [faithfulMetadata = false)] Whether to retrieve the raw XML metadata of the article. The default value is false
     * @param {module:api/ArticlesApi~searchArticlesBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArticleSearchResponse>}
     */
    searchArticlesBatch(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling searchArticlesBatch");
      }

      let pathParams = {
      };
      let queryParams = {
        'metadata': opts['metadata'],
        'fulltext': opts['fulltext'],
        'citations': opts['citations'],
        'similar': opts['similar'],
        'duplicate': opts['duplicate'],
        'urls': opts['urls'],
        'faithfulMetadata': opts['faithfulMetadata']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArticleSearchResponse];
      return this.apiClient.callApi(
        '/articles/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the similarArticles operation.
     * @callback module:api/ArticlesApi~similarArticlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleSimilarResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get articles by similarity to a text
     * Method accepts a text and retrieves a JSON array of articles which are similar to the given text. The response array is ordered based on similarity score, starting from the most similar.
     * @param {module:model/SimilarRequest} body The text that requires similar articles to be calculated on
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] How many similar articles to retrieve at most. Can be any number betwen 1 and 100, default is 10
     * @param {Boolean} [metadata = true)] Whether to retrieve the full article metadata or only the IDs of the similar articles. The default value is true
     * @param {Boolean} [fulltext = false)] Whether to retrieve fulltexts of the similar articles. The default value is false
     * @param {Boolean} [citations = false)] Whether to retrieve citations found in the articles. The default value is false
     * @param {Boolean} [similar = false)] Whether to retrieve lists of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time
     * @param {Boolean} [duplicate = false)] Whether to retrieve CORE IDs of different versions of the articles. The default value is false
     * @param {Boolean} [urls = false)] Whether to retrieve lists of URLs of the article fulltexts. The default value is false
     * @param {Boolean} [faithfulMetadata = false)] Whether to retrieve the raw XML metadata of the articles. The default value is false
     * @param {module:api/ArticlesApi~similarArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleSimilarResponse}
     */
    similarArticles(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling similarArticles");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'metadata': opts['metadata'],
        'fulltext': opts['fulltext'],
        'citations': opts['citations'],
        'similar': opts['similar'],
        'duplicate': opts['duplicate'],
        'urls': opts['urls'],
        'faithfulMetadata': opts['faithfulMetadata']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleSimilarResponse;
      return this.apiClient.callApi(
        '/articles/similar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
