/**
 * CORE API v2
 * <p style=\"text-align: justify;\">You can use the CORE API to access the      resources harvested and enriched by CORE. If you encounter any problems with the API, please <a href=\"/contact\">report them to us</a>.</p>  <h2>Overview</h2> <p style=\"text-align: justify;\">The API is organised by resource type. The resources are <b>articles</b>,      <b>journals</b> and <b>repositories</b> and are represented using JSON data format. Furthermore,      each resource has a list of methods. The API also provides two global methods for accessing all resources at once.</p>  <h2>Response format</h2> <p style=\"text-align: justify;\">Response for each query contains two fields: <b>status</b> and <b>data</b>.     In case of an error status, the data field is empty. The data field contains a single object     in case the request is for a specific identifier (e.g. CORE ID, CORE repository ID, etc.), or       contains a list of objects, for example for search queries. In case of batch requests, the response     is an array of objects, each of which contains its own <b>status</b> and <b>data</b> fields.     For search queries the response contains an additional field <b>totalHits</b>, which is the      total number of items which match the search criteria.</p>  <h2>Search query syntax</h2>  <p style=\"text-align: justify\">Complex search queries can be used in all of the API search methods.     The query can be a simple string or it can be built using terms and operators described in Elasticsearch     <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-query-string-query.html#query-string-syntax\">documentation</a>.     The usable field names are <strong>title</strong>, <strong>description</strong>, <strong>fullText</strong>,      <strong>authors</strong>, <strong>publisher</strong>, <strong>repositories.id</strong>, <strong>repositories.name</strong>,      <strong>doi</strong>, <strong>oai</strong>, <strong>identifiers</strong> (which is a list of article identifiers including OAI, URL, etc.), <strong>language.name</strong>      and <strong>year</strong>. Some example queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>title:psychology and language.name:English</p></li>     <li><p>repositories.id:86 AND year:2014</p></li>     <li><p>identifiers:\"oai:aura.abdn.ac.uk:2164/3837\" OR identifiers:\"oai:aura.abdn.ac.uk:2164/3843\"</p></li>     <li><p>doi:\"10.1186/1471-2458-6-309\"</p></li> </ul>  <h3>Retrieving the latest Articles</h3> <p style=\"text-align: justify\">     You can retrieve the harvested items since specific dates using the following queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>repositoryDocument.metadataUpdated:>2017-02-10</p></li>     <li><p>repositoryDocument.metadataUpdated:>2017-03-01 AND repositoryDocument.metadataUpdated:<2017-03-31</p></li>     </ul>  <h2>Sort order</h2>  <p style=\"text-align: justify;\">For search queries, the results are ordered by relevance score. For batch      requests, the results are retrieved in the order of the requests.</p>  <h2>Parameters</h2> <p style=\"text-align: justify;\">The API methods allow different parameters to be passed. Additionally, there is an API key parameter which is common to all API methods. For all API methods      the API key can be provided either as a query parameter or in the request header. If the API key      is not provided, the API will return HTTP 401 error. You can register for an API key <a href=\"/services#api\">here</a>.</p>  <h2>API methods</h2>
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Article from './model/Article';
import ArticleHistoryResponse from './model/ArticleHistoryResponse';
import ArticleJournal from './model/ArticleJournal';
import ArticleResponse from './model/ArticleResponse';
import ArticleSearchResponse from './model/ArticleSearchResponse';
import ArticleSimilarResponse from './model/ArticleSimilarResponse';
import Citation from './model/Citation';
import Journal from './model/Journal';
import JournalResponse from './model/JournalResponse';
import JournalSearchResponse from './model/JournalSearchResponse';
import Language from './model/Language';
import RawRecordXml from './model/RawRecordXml';
import Repository from './model/Repository';
import RepositoryLocation from './model/RepositoryLocation';
import RepositoryResponse from './model/RepositoryResponse';
import RepositorySearchResponse from './model/RepositorySearchResponse';
import RepositoryStats from './model/RepositoryStats';
import Resource from './model/Resource';
import SearchAllResponse from './model/SearchAllResponse';
import SearchRequest from './model/SearchRequest';
import Similar from './model/Similar';
import SimilarRequest from './model/SimilarRequest';
import AllApi from './api/AllApi';
import ArticlesApi from './api/ArticlesApi';
import JournalsApi from './api/JournalsApi';
import RepositoriesApi from './api/RepositoriesApi';


/**
* &lt;p style&#x3D;\&quot;text-align: justify;\&quot;&gt;You can use the CORE API to access the      resources harvested and enriched by CORE. If you encounter any problems with the API, please &lt;a href&#x3D;\&quot;/contact\&quot;&gt;report them to us&lt;/a&gt;.&lt;/p&gt;  &lt;h2&gt;Overview&lt;/h2&gt; &lt;p style&#x3D;\&quot;text-align: justify;\&quot;&gt;The API is organised by resource type. The resources are &lt;b&gt;articles&lt;/b&gt;,      &lt;b&gt;journals&lt;/b&gt; and &lt;b&gt;repositories&lt;/b&gt; and are represented using JSON data format. Furthermore,      each resource has a list of methods. The API also provides two global methods for accessing all resources at once.&lt;/p&gt;  &lt;h2&gt;Response format&lt;/h2&gt; &lt;p style&#x3D;\&quot;text-align: justify;\&quot;&gt;Response for each query contains two fields: &lt;b&gt;status&lt;/b&gt; and &lt;b&gt;data&lt;/b&gt;.     In case of an error status, the data field is empty. The data field contains a single object     in case the request is for a specific identifier (e.g. CORE ID, CORE repository ID, etc.), or       contains a list of objects, for example for search queries. In case of batch requests, the response     is an array of objects, each of which contains its own &lt;b&gt;status&lt;/b&gt; and &lt;b&gt;data&lt;/b&gt; fields.     For search queries the response contains an additional field &lt;b&gt;totalHits&lt;/b&gt;, which is the      total number of items which match the search criteria.&lt;/p&gt;  &lt;h2&gt;Search query syntax&lt;/h2&gt;  &lt;p style&#x3D;\&quot;text-align: justify\&quot;&gt;Complex search queries can be used in all of the API search methods.     The query can be a simple string or it can be built using terms and operators described in Elasticsearch     &lt;a href&#x3D;\&quot;http://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-query-string-query.html#query-string-syntax\&quot;&gt;documentation&lt;/a&gt;.     The usable field names are &lt;strong&gt;title&lt;/strong&gt;, &lt;strong&gt;description&lt;/strong&gt;, &lt;strong&gt;fullText&lt;/strong&gt;,      &lt;strong&gt;authors&lt;/strong&gt;, &lt;strong&gt;publisher&lt;/strong&gt;, &lt;strong&gt;repositories.id&lt;/strong&gt;, &lt;strong&gt;repositories.name&lt;/strong&gt;,      &lt;strong&gt;doi&lt;/strong&gt;, &lt;strong&gt;oai&lt;/strong&gt;, &lt;strong&gt;identifiers&lt;/strong&gt; (which is a list of article identifiers including OAI, URL, etc.), &lt;strong&gt;language.name&lt;/strong&gt;      and &lt;strong&gt;year&lt;/strong&gt;. Some example queries: &lt;/p&gt;  &lt;ul style&#x3D;\&quot;margin-left: 30px;\&quot;&gt;     &lt;li&gt;&lt;p&gt;title:psychology and language.name:English&lt;/p&gt;&lt;/li&gt;     &lt;li&gt;&lt;p&gt;repositories.id:86 AND year:2014&lt;/p&gt;&lt;/li&gt;     &lt;li&gt;&lt;p&gt;identifiers:\&quot;oai:aura.abdn.ac.uk:2164/3837\&quot; OR identifiers:\&quot;oai:aura.abdn.ac.uk:2164/3843\&quot;&lt;/p&gt;&lt;/li&gt;     &lt;li&gt;&lt;p&gt;doi:\&quot;10.1186/1471-2458-6-309\&quot;&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;  &lt;h3&gt;Retrieving the latest Articles&lt;/h3&gt; &lt;p style&#x3D;\&quot;text-align: justify\&quot;&gt;     You can retrieve the harvested items since specific dates using the following queries: &lt;/p&gt;  &lt;ul style&#x3D;\&quot;margin-left: 30px;\&quot;&gt;     &lt;li&gt;&lt;p&gt;repositoryDocument.metadataUpdated:&gt;2017-02-10&lt;/p&gt;&lt;/li&gt;     &lt;li&gt;&lt;p&gt;repositoryDocument.metadataUpdated:&gt;2017-03-01 AND repositoryDocument.metadataUpdated:&lt;2017-03-31&lt;/p&gt;&lt;/li&gt;     &lt;/ul&gt;  &lt;h2&gt;Sort order&lt;/h2&gt;  &lt;p style&#x3D;\&quot;text-align: justify;\&quot;&gt;For search queries, the results are ordered by relevance score. For batch      requests, the results are retrieved in the order of the requests.&lt;/p&gt;  &lt;h2&gt;Parameters&lt;/h2&gt; &lt;p style&#x3D;\&quot;text-align: justify;\&quot;&gt;The API methods allow different parameters to be passed. Additionally, there is an API key parameter which is common to all API methods. For all API methods      the API key can be provided either as a query parameter or in the request header. If the API key      is not provided, the API will return HTTP 401 error. You can register for an API key &lt;a href&#x3D;\&quot;/services#api\&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;  &lt;h2&gt;API methods&lt;/h2&gt;.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var CoreApiV2 = require('index'); // See note below*.
* var xxxSvc = new CoreApiV2.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new CoreApiV2.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new CoreApiV2.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new CoreApiV2.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Article model constructor.
     * @property {module:model/Article}
     */
    Article,

    /**
     * The ArticleHistoryResponse model constructor.
     * @property {module:model/ArticleHistoryResponse}
     */
    ArticleHistoryResponse,

    /**
     * The ArticleJournal model constructor.
     * @property {module:model/ArticleJournal}
     */
    ArticleJournal,

    /**
     * The ArticleResponse model constructor.
     * @property {module:model/ArticleResponse}
     */
    ArticleResponse,

    /**
     * The ArticleSearchResponse model constructor.
     * @property {module:model/ArticleSearchResponse}
     */
    ArticleSearchResponse,

    /**
     * The ArticleSimilarResponse model constructor.
     * @property {module:model/ArticleSimilarResponse}
     */
    ArticleSimilarResponse,

    /**
     * The Citation model constructor.
     * @property {module:model/Citation}
     */
    Citation,

    /**
     * The Journal model constructor.
     * @property {module:model/Journal}
     */
    Journal,

    /**
     * The JournalResponse model constructor.
     * @property {module:model/JournalResponse}
     */
    JournalResponse,

    /**
     * The JournalSearchResponse model constructor.
     * @property {module:model/JournalSearchResponse}
     */
    JournalSearchResponse,

    /**
     * The Language model constructor.
     * @property {module:model/Language}
     */
    Language,

    /**
     * The RawRecordXml model constructor.
     * @property {module:model/RawRecordXml}
     */
    RawRecordXml,

    /**
     * The Repository model constructor.
     * @property {module:model/Repository}
     */
    Repository,

    /**
     * The RepositoryLocation model constructor.
     * @property {module:model/RepositoryLocation}
     */
    RepositoryLocation,

    /**
     * The RepositoryResponse model constructor.
     * @property {module:model/RepositoryResponse}
     */
    RepositoryResponse,

    /**
     * The RepositorySearchResponse model constructor.
     * @property {module:model/RepositorySearchResponse}
     */
    RepositorySearchResponse,

    /**
     * The RepositoryStats model constructor.
     * @property {module:model/RepositoryStats}
     */
    RepositoryStats,

    /**
     * The Resource model constructor.
     * @property {module:model/Resource}
     */
    Resource,

    /**
     * The SearchAllResponse model constructor.
     * @property {module:model/SearchAllResponse}
     */
    SearchAllResponse,

    /**
     * The SearchRequest model constructor.
     * @property {module:model/SearchRequest}
     */
    SearchRequest,

    /**
     * The Similar model constructor.
     * @property {module:model/Similar}
     */
    Similar,

    /**
     * The SimilarRequest model constructor.
     * @property {module:model/SimilarRequest}
     */
    SimilarRequest,

    /**
    * The AllApi service constructor.
    * @property {module:api/AllApi}
    */
    AllApi,

    /**
    * The ArticlesApi service constructor.
    * @property {module:api/ArticlesApi}
    */
    ArticlesApi,

    /**
    * The JournalsApi service constructor.
    * @property {module:api/JournalsApi}
    */
    JournalsApi,

    /**
    * The RepositoriesApi service constructor.
    * @property {module:api/RepositoriesApi}
    */
    RepositoriesApi
};
