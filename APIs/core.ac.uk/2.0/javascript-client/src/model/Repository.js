/**
 * CORE API v2
 * <p style=\"text-align: justify;\">You can use the CORE API to access the      resources harvested and enriched by CORE. If you encounter any problems with the API, please <a href=\"/contact\">report them to us</a>.</p>  <h2>Overview</h2> <p style=\"text-align: justify;\">The API is organised by resource type. The resources are <b>articles</b>,      <b>journals</b> and <b>repositories</b> and are represented using JSON data format. Furthermore,      each resource has a list of methods. The API also provides two global methods for accessing all resources at once.</p>  <h2>Response format</h2> <p style=\"text-align: justify;\">Response for each query contains two fields: <b>status</b> and <b>data</b>.     In case of an error status, the data field is empty. The data field contains a single object     in case the request is for a specific identifier (e.g. CORE ID, CORE repository ID, etc.), or       contains a list of objects, for example for search queries. In case of batch requests, the response     is an array of objects, each of which contains its own <b>status</b> and <b>data</b> fields.     For search queries the response contains an additional field <b>totalHits</b>, which is the      total number of items which match the search criteria.</p>  <h2>Search query syntax</h2>  <p style=\"text-align: justify\">Complex search queries can be used in all of the API search methods.     The query can be a simple string or it can be built using terms and operators described in Elasticsearch     <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-query-string-query.html#query-string-syntax\">documentation</a>.     The usable field names are <strong>title</strong>, <strong>description</strong>, <strong>fullText</strong>,      <strong>authors</strong>, <strong>publisher</strong>, <strong>repositories.id</strong>, <strong>repositories.name</strong>,      <strong>doi</strong>, <strong>oai</strong>, <strong>identifiers</strong> (which is a list of article identifiers including OAI, URL, etc.), <strong>language.name</strong>      and <strong>year</strong>. Some example queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>title:psychology and language.name:English</p></li>     <li><p>repositories.id:86 AND year:2014</p></li>     <li><p>identifiers:\"oai:aura.abdn.ac.uk:2164/3837\" OR identifiers:\"oai:aura.abdn.ac.uk:2164/3843\"</p></li>     <li><p>doi:\"10.1186/1471-2458-6-309\"</p></li> </ul>  <h3>Retrieving the latest Articles</h3> <p style=\"text-align: justify\">     You can retrieve the harvested items since specific dates using the following queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>repositoryDocument.metadataUpdated:>2017-02-10</p></li>     <li><p>repositoryDocument.metadataUpdated:>2017-03-01 AND repositoryDocument.metadataUpdated:<2017-03-31</p></li>     </ul>  <h2>Sort order</h2>  <p style=\"text-align: justify;\">For search queries, the results are ordered by relevance score. For batch      requests, the results are retrieved in the order of the requests.</p>  <h2>Parameters</h2> <p style=\"text-align: justify;\">The API methods allow different parameters to be passed. Additionally, there is an API key parameter which is common to all API methods. For all API methods      the API key can be provided either as a query parameter or in the request header. If the API key      is not provided, the API will return HTTP 401 error. You can register for an API key <a href=\"/services#api\">here</a>.</p>  <h2>API methods</h2>
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RepositoryLocation from './RepositoryLocation';
import RepositoryStats from './RepositoryStats';

/**
 * The Repository model module.
 * @module model/Repository
 * @version 2.0
 */
class Repository {
    /**
     * Constructs a new <code>Repository</code>.
     * @alias module:model/Repository
     */
    constructor() { 
        
        Repository.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Repository</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Repository} obj Optional instance to populate.
     * @return {module:model/Repository} The populated <code>Repository</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Repository();

            if (data.hasOwnProperty('dataProviderSourceStats')) {
                obj['dataProviderSourceStats'] = ApiClient.convertToType(data['dataProviderSourceStats'], [Object]);
            }
            if (data.hasOwnProperty('history')) {
                obj['history'] = ApiClient.convertToType(data['history'], [Object]);
            }
            if (data.hasOwnProperty('historyCumulative')) {
                obj['historyCumulative'] = ApiClient.convertToType(data['historyCumulative'], [Object]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lastSeen')) {
                obj['lastSeen'] = ApiClient.convertToType(data['lastSeen'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('openDoarId')) {
                obj['openDoarId'] = ApiClient.convertToType(data['openDoarId'], 'Number');
            }
            if (data.hasOwnProperty('repositoryLocation')) {
                obj['repositoryLocation'] = RepositoryLocation.constructFromObject(data['repositoryLocation']);
            }
            if (data.hasOwnProperty('repositoryStats')) {
                obj['repositoryStats'] = RepositoryStats.constructFromObject(data['repositoryStats']);
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('urlHomepage')) {
                obj['urlHomepage'] = ApiClient.convertToType(data['urlHomepage'], 'String');
            }
            if (data.hasOwnProperty('urlOaipmh')) {
                obj['urlOaipmh'] = ApiClient.convertToType(data['urlOaipmh'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Repository</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Repository</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['dataProviderSourceStats'])) {
            throw new Error("Expected the field `dataProviderSourceStats` to be an array in the JSON data but got " + data['dataProviderSourceStats']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['history'])) {
            throw new Error("Expected the field `history` to be an array in the JSON data but got " + data['history']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['historyCumulative'])) {
            throw new Error("Expected the field `historyCumulative` to be an array in the JSON data but got " + data['historyCumulative']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `repositoryLocation`
        if (data['repositoryLocation']) { // data not null
          RepositoryLocation.validateJSON(data['repositoryLocation']);
        }
        // validate the optional field `repositoryStats`
        if (data['repositoryStats']) { // data not null
          RepositoryStats.validateJSON(data['repositoryStats']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // ensure the json data is a string
        if (data['urlHomepage'] && !(typeof data['urlHomepage'] === 'string' || data['urlHomepage'] instanceof String)) {
            throw new Error("Expected the field `urlHomepage` to be a primitive type in the JSON string but got " + data['urlHomepage']);
        }
        // ensure the json data is a string
        if (data['urlOaipmh'] && !(typeof data['urlOaipmh'] === 'string' || data['urlOaipmh'] instanceof String)) {
            throw new Error("Expected the field `urlOaipmh` to be a primitive type in the JSON string but got " + data['urlOaipmh']);
        }

        return true;
    }


}



/**
 * Statistics based on the Data Provider/repository rather than data processed and filtered by CORE. This array is in beta and may change in the future
 * @member {Array.<Object>} dataProviderSourceStats
 */
Repository.prototype['dataProviderSourceStats'] = undefined;

/**
 * The number of deposits in the repository per date. This field is in beta and may change in the future
 * @member {Array.<Object>} history
 */
Repository.prototype['history'] = undefined;

/**
 * The number of deposits in the repository per date over time (cumulative). This field is in beta and may change in the future
 * @member {Array.<Object>} historyCumulative
 */
Repository.prototype['historyCumulative'] = undefined;

/**
 * CORE repository ID
 * @member {Number} id
 */
Repository.prototype['id'] = undefined;

/**
 * The time the repository was last harvested by CORE. This field is in beta and may change in the future
 * @member {Date} lastSeen
 */
Repository.prototype['lastSeen'] = undefined;

/**
 * Repository name
 * @member {String} name
 */
Repository.prototype['name'] = undefined;

/**
 * ID of the repository in Open DOAR
 * @member {Number} openDoarId
 */
Repository.prototype['openDoarId'] = undefined;

/**
 * @member {module:model/RepositoryLocation} repositoryLocation
 */
Repository.prototype['repositoryLocation'] = undefined;

/**
 * @member {module:model/RepositoryStats} repositoryStats
 */
Repository.prototype['repositoryStats'] = undefined;

/**
 * Repository URI
 * @member {String} uri
 */
Repository.prototype['uri'] = undefined;

/**
 * Repository homepage
 * @member {String} urlHomepage
 */
Repository.prototype['urlHomepage'] = undefined;

/**
 * Repository OAI-PMH endpoint
 * @member {String} urlOaipmh
 */
Repository.prototype['urlOaipmh'] = undefined;






export default Repository;

