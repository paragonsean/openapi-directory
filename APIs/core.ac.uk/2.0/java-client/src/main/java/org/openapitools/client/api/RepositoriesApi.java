/*
 * CORE API v2
 * <p style=\"text-align: justify;\">You can use the CORE API to access the      resources harvested and enriched by CORE. If you encounter any problems with the API, please <a href=\"/contact\">report them to us</a>.</p>  <h2>Overview</h2> <p style=\"text-align: justify;\">The API is organised by resource type. The resources are <b>articles</b>,      <b>journals</b> and <b>repositories</b> and are represented using JSON data format. Furthermore,      each resource has a list of methods. The API also provides two global methods for accessing all resources at once.</p>  <h2>Response format</h2> <p style=\"text-align: justify;\">Response for each query contains two fields: <b>status</b> and <b>data</b>.     In case of an error status, the data field is empty. The data field contains a single object     in case the request is for a specific identifier (e.g. CORE ID, CORE repository ID, etc.), or       contains a list of objects, for example for search queries. In case of batch requests, the response     is an array of objects, each of which contains its own <b>status</b> and <b>data</b> fields.     For search queries the response contains an additional field <b>totalHits</b>, which is the      total number of items which match the search criteria.</p>  <h2>Search query syntax</h2>  <p style=\"text-align: justify\">Complex search queries can be used in all of the API search methods.     The query can be a simple string or it can be built using terms and operators described in Elasticsearch     <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-query-string-query.html#query-string-syntax\">documentation</a>.     The usable field names are <strong>title</strong>, <strong>description</strong>, <strong>fullText</strong>,      <strong>authors</strong>, <strong>publisher</strong>, <strong>repositories.id</strong>, <strong>repositories.name</strong>,      <strong>doi</strong>, <strong>oai</strong>, <strong>identifiers</strong> (which is a list of article identifiers including OAI, URL, etc.), <strong>language.name</strong>      and <strong>year</strong>. Some example queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>title:psychology and language.name:English</p></li>     <li><p>repositories.id:86 AND year:2014</p></li>     <li><p>identifiers:\"oai:aura.abdn.ac.uk:2164/3837\" OR identifiers:\"oai:aura.abdn.ac.uk:2164/3843\"</p></li>     <li><p>doi:\"10.1186/1471-2458-6-309\"</p></li> </ul>  <h3>Retrieving the latest Articles</h3> <p style=\"text-align: justify\">     You can retrieve the harvested items since specific dates using the following queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>repositoryDocument.metadataUpdated:>2017-02-10</p></li>     <li><p>repositoryDocument.metadataUpdated:>2017-03-01 AND repositoryDocument.metadataUpdated:<2017-03-31</p></li>     </ul>  <h2>Sort order</h2>  <p style=\"text-align: justify;\">For search queries, the results are ordered by relevance score. For batch      requests, the results are retrieved in the order of the requests.</p>  <h2>Parameters</h2> <p style=\"text-align: justify;\">The API methods allow different parameters to be passed. Additionally, there is an API key parameter which is common to all API methods. For all API methods      the API key can be provided either as a query parameter or in the request header. If the API key      is not provided, the API will return HTTP 401 error. You can register for an API key <a href=\"/services#api\">here</a>.</p>  <h2>API methods</h2>
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RepositoryResponse;
import org.openapitools.client.model.RepositorySearchResponse;
import org.openapitools.client.model.SearchRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RepositoriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RepositoriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RepositoriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getRepositoryById
     * @param repositoryId CORE repository ID of the article that needs to be fetched. (required)
     * @param stats Whether to retrieve statistics about the repository. The default value is false (optional, default to false)
     * @param depositHistory Returns deposit history over time (optional, default to false)
     * @param depositHistoryCumulative Returns deposit history over time (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid identifier supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryByIdCall(Integer repositoryId, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/get/{repositoryId}"
            .replace("{" + "repositoryId" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (depositHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depositHistory", depositHistory));
        }

        if (depositHistoryCumulative != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depositHistoryCumulative", depositHistoryCumulative));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryByIdValidateBeforeCall(Integer repositoryId, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling getRepositoryById(Async)");
        }

        return getRepositoryByIdCall(repositoryId, stats, depositHistory, depositHistoryCumulative, _callback);

    }

    /**
     * Get repository by CORE repository ID
     * Method will retrieve a repository based on given CORE repository ID.
     * @param repositoryId CORE repository ID of the article that needs to be fetched. (required)
     * @param stats Whether to retrieve statistics about the repository. The default value is false (optional, default to false)
     * @param depositHistory Returns deposit history over time (optional, default to false)
     * @param depositHistoryCumulative Returns deposit history over time (optional, default to false)
     * @return RepositoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid identifier supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public RepositoryResponse getRepositoryById(Integer repositoryId, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative) throws ApiException {
        ApiResponse<RepositoryResponse> localVarResp = getRepositoryByIdWithHttpInfo(repositoryId, stats, depositHistory, depositHistoryCumulative);
        return localVarResp.getData();
    }

    /**
     * Get repository by CORE repository ID
     * Method will retrieve a repository based on given CORE repository ID.
     * @param repositoryId CORE repository ID of the article that needs to be fetched. (required)
     * @param stats Whether to retrieve statistics about the repository. The default value is false (optional, default to false)
     * @param depositHistory Returns deposit history over time (optional, default to false)
     * @param depositHistoryCumulative Returns deposit history over time (optional, default to false)
     * @return ApiResponse&lt;RepositoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid identifier supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepositoryResponse> getRepositoryByIdWithHttpInfo(Integer repositoryId, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryByIdValidateBeforeCall(repositoryId, stats, depositHistory, depositHistoryCumulative, null);
        Type localVarReturnType = new TypeToken<RepositoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get repository by CORE repository ID (asynchronously)
     * Method will retrieve a repository based on given CORE repository ID.
     * @param repositoryId CORE repository ID of the article that needs to be fetched. (required)
     * @param stats Whether to retrieve statistics about the repository. The default value is false (optional, default to false)
     * @param depositHistory Returns deposit history over time (optional, default to false)
     * @param depositHistoryCumulative Returns deposit history over time (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid identifier supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryByIdAsync(Integer repositoryId, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative, final ApiCallback<RepositoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryByIdValidateBeforeCall(repositoryId, stats, depositHistory, depositHistoryCumulative, _callback);
        Type localVarReturnType = new TypeToken<RepositoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepositoryByIdBatch
     * @param body JSON array with CORE repository IDs of repositories that need to be fetched (required)
     * @param stats Whether to retrieve statistics about the repository. The default value is false (optional, default to false)
     * @param depositHistory Returns deposit history over time (optional, default to false)
     * @param depositHistoryCumulative Returns deposit history over time (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryByIdBatchCall(List<Integer> body, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/repositories/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (depositHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depositHistory", depositHistory));
        }

        if (depositHistoryCumulative != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depositHistoryCumulative", depositHistoryCumulative));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryByIdBatchValidateBeforeCall(List<Integer> body, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getRepositoryByIdBatch(Async)");
        }

        return getRepositoryByIdBatchCall(body, stats, depositHistory, depositHistoryCumulative, _callback);

    }

    /**
     * Batch operation for retrieving repositories by CORE repository ID
     * Method accepts a JSON array of CORE repository IDs and retrieves a list of repositories. The response array is ordered based on the order of the IDs in the request array. The maximum number of IDs in request is 100.
     * @param body JSON array with CORE repository IDs of repositories that need to be fetched (required)
     * @param stats Whether to retrieve statistics about the repository. The default value is false (optional, default to false)
     * @param depositHistory Returns deposit history over time (optional, default to false)
     * @param depositHistoryCumulative Returns deposit history over time (optional, default to false)
     * @return List&lt;RepositoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public List<RepositoryResponse> getRepositoryByIdBatch(List<Integer> body, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative) throws ApiException {
        ApiResponse<List<RepositoryResponse>> localVarResp = getRepositoryByIdBatchWithHttpInfo(body, stats, depositHistory, depositHistoryCumulative);
        return localVarResp.getData();
    }

    /**
     * Batch operation for retrieving repositories by CORE repository ID
     * Method accepts a JSON array of CORE repository IDs and retrieves a list of repositories. The response array is ordered based on the order of the IDs in the request array. The maximum number of IDs in request is 100.
     * @param body JSON array with CORE repository IDs of repositories that need to be fetched (required)
     * @param stats Whether to retrieve statistics about the repository. The default value is false (optional, default to false)
     * @param depositHistory Returns deposit history over time (optional, default to false)
     * @param depositHistoryCumulative Returns deposit history over time (optional, default to false)
     * @return ApiResponse&lt;List&lt;RepositoryResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RepositoryResponse>> getRepositoryByIdBatchWithHttpInfo(List<Integer> body, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryByIdBatchValidateBeforeCall(body, stats, depositHistory, depositHistoryCumulative, null);
        Type localVarReturnType = new TypeToken<List<RepositoryResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch operation for retrieving repositories by CORE repository ID (asynchronously)
     * Method accepts a JSON array of CORE repository IDs and retrieves a list of repositories. The response array is ordered based on the order of the IDs in the request array. The maximum number of IDs in request is 100.
     * @param body JSON array with CORE repository IDs of repositories that need to be fetched (required)
     * @param stats Whether to retrieve statistics about the repository. The default value is false (optional, default to false)
     * @param depositHistory Returns deposit history over time (optional, default to false)
     * @param depositHistoryCumulative Returns deposit history over time (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryByIdBatchAsync(List<Integer> body, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative, final ApiCallback<List<RepositoryResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryByIdBatchValidateBeforeCall(body, stats, depositHistory, depositHistoryCumulative, _callback);
        Type localVarReturnType = new TypeToken<List<RepositoryResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesSearchPost
     * @param body JSON array with search queries and parameters. One request can contain up to 100 queries (required)
     * @param stats Whether to retrieve statistics about the repository. The default value is false (optional, default to false)
     * @param depositHistory Returns deposit history over time (optional, default to false)
     * @param depositHistoryCumulative Returns deposit history over time (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesSearchPostCall(List<SearchRequest> body, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/repositories/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (depositHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depositHistory", depositHistory));
        }

        if (depositHistoryCumulative != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depositHistoryCumulative", depositHistoryCumulative));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesSearchPostValidateBeforeCall(List<SearchRequest> body, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling repositoriesSearchPost(Async)");
        }

        return repositoriesSearchPostCall(body, stats, depositHistory, depositHistoryCumulative, _callback);

    }

    /**
     * Batch operation for searching through repositories
     * Method accepts a JSON array of search queries and parameters. It then searches through all repositories and returns a JSON array of search results for each of the queries. Method searches through all repository fields.
     * @param body JSON array with search queries and parameters. One request can contain up to 100 queries (required)
     * @param stats Whether to retrieve statistics about the repository. The default value is false (optional, default to false)
     * @param depositHistory Returns deposit history over time (optional, default to false)
     * @param depositHistoryCumulative Returns deposit history over time (optional, default to false)
     * @return RepositorySearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public RepositorySearchResponse repositoriesSearchPost(List<SearchRequest> body, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative) throws ApiException {
        ApiResponse<RepositorySearchResponse> localVarResp = repositoriesSearchPostWithHttpInfo(body, stats, depositHistory, depositHistoryCumulative);
        return localVarResp.getData();
    }

    /**
     * Batch operation for searching through repositories
     * Method accepts a JSON array of search queries and parameters. It then searches through all repositories and returns a JSON array of search results for each of the queries. Method searches through all repository fields.
     * @param body JSON array with search queries and parameters. One request can contain up to 100 queries (required)
     * @param stats Whether to retrieve statistics about the repository. The default value is false (optional, default to false)
     * @param depositHistory Returns deposit history over time (optional, default to false)
     * @param depositHistoryCumulative Returns deposit history over time (optional, default to false)
     * @return ApiResponse&lt;RepositorySearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepositorySearchResponse> repositoriesSearchPostWithHttpInfo(List<SearchRequest> body, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative) throws ApiException {
        okhttp3.Call localVarCall = repositoriesSearchPostValidateBeforeCall(body, stats, depositHistory, depositHistoryCumulative, null);
        Type localVarReturnType = new TypeToken<RepositorySearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch operation for searching through repositories (asynchronously)
     * Method accepts a JSON array of search queries and parameters. It then searches through all repositories and returns a JSON array of search results for each of the queries. Method searches through all repository fields.
     * @param body JSON array with search queries and parameters. One request can contain up to 100 queries (required)
     * @param stats Whether to retrieve statistics about the repository. The default value is false (optional, default to false)
     * @param depositHistory Returns deposit history over time (optional, default to false)
     * @param depositHistoryCumulative Returns deposit history over time (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesSearchPostAsync(List<SearchRequest> body, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative, final ApiCallback<RepositorySearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesSearchPostValidateBeforeCall(body, stats, depositHistory, depositHistoryCumulative, _callback);
        Type localVarReturnType = new TypeToken<RepositorySearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesSearchQueryGet
     * @param query The search query (required)
     * @param page Which page of the search results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page). (optional, default to 1)
     * @param pageSize The number of results to return per page. Can be any number between 10 and 100, default is 10. (optional, default to 10)
     * @param stats Whether to retrieve statistics about the repository. The default value is false (optional, default to false)
     * @param depositHistory Returns deposit history over time (optional, default to false)
     * @param depositHistoryCumulative Returns deposit history over time (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter invalid or out of bounds </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesSearchQueryGetCall(String query, Integer page, Integer pageSize, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/search/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (depositHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depositHistory", depositHistory));
        }

        if (depositHistoryCumulative != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depositHistoryCumulative", depositHistoryCumulative));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesSearchQueryGetValidateBeforeCall(String query, Integer page, Integer pageSize, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling repositoriesSearchQueryGet(Async)");
        }

        return repositoriesSearchQueryGetCall(query, page, pageSize, stats, depositHistory, depositHistoryCumulative, _callback);

    }

    /**
     * Search through all repositories
     * Searches through all repositories and returns a JSON array with search results. Method searches through all repository fields.
     * @param query The search query (required)
     * @param page Which page of the search results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page). (optional, default to 1)
     * @param pageSize The number of results to return per page. Can be any number between 10 and 100, default is 10. (optional, default to 10)
     * @param stats Whether to retrieve statistics about the repository. The default value is false (optional, default to false)
     * @param depositHistory Returns deposit history over time (optional, default to false)
     * @param depositHistoryCumulative Returns deposit history over time (optional, default to false)
     * @return RepositorySearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter invalid or out of bounds </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public RepositorySearchResponse repositoriesSearchQueryGet(String query, Integer page, Integer pageSize, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative) throws ApiException {
        ApiResponse<RepositorySearchResponse> localVarResp = repositoriesSearchQueryGetWithHttpInfo(query, page, pageSize, stats, depositHistory, depositHistoryCumulative);
        return localVarResp.getData();
    }

    /**
     * Search through all repositories
     * Searches through all repositories and returns a JSON array with search results. Method searches through all repository fields.
     * @param query The search query (required)
     * @param page Which page of the search results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page). (optional, default to 1)
     * @param pageSize The number of results to return per page. Can be any number between 10 and 100, default is 10. (optional, default to 10)
     * @param stats Whether to retrieve statistics about the repository. The default value is false (optional, default to false)
     * @param depositHistory Returns deposit history over time (optional, default to false)
     * @param depositHistoryCumulative Returns deposit history over time (optional, default to false)
     * @return ApiResponse&lt;RepositorySearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter invalid or out of bounds </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepositorySearchResponse> repositoriesSearchQueryGetWithHttpInfo(String query, Integer page, Integer pageSize, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative) throws ApiException {
        okhttp3.Call localVarCall = repositoriesSearchQueryGetValidateBeforeCall(query, page, pageSize, stats, depositHistory, depositHistoryCumulative, null);
        Type localVarReturnType = new TypeToken<RepositorySearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search through all repositories (asynchronously)
     * Searches through all repositories and returns a JSON array with search results. Method searches through all repository fields.
     * @param query The search query (required)
     * @param page Which page of the search results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page). (optional, default to 1)
     * @param pageSize The number of results to return per page. Can be any number between 10 and 100, default is 10. (optional, default to 10)
     * @param stats Whether to retrieve statistics about the repository. The default value is false (optional, default to false)
     * @param depositHistory Returns deposit history over time (optional, default to false)
     * @param depositHistoryCumulative Returns deposit history over time (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter invalid or out of bounds </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesSearchQueryGetAsync(String query, Integer page, Integer pageSize, Boolean stats, Boolean depositHistory, Boolean depositHistoryCumulative, final ApiCallback<RepositorySearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesSearchQueryGetValidateBeforeCall(query, page, pageSize, stats, depositHistory, depositHistoryCumulative, _callback);
        Type localVarReturnType = new TypeToken<RepositorySearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
