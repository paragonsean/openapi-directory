/*
 * CORE API v2
 * <p style=\"text-align: justify;\">You can use the CORE API to access the      resources harvested and enriched by CORE. If you encounter any problems with the API, please <a href=\"/contact\">report them to us</a>.</p>  <h2>Overview</h2> <p style=\"text-align: justify;\">The API is organised by resource type. The resources are <b>articles</b>,      <b>journals</b> and <b>repositories</b> and are represented using JSON data format. Furthermore,      each resource has a list of methods. The API also provides two global methods for accessing all resources at once.</p>  <h2>Response format</h2> <p style=\"text-align: justify;\">Response for each query contains two fields: <b>status</b> and <b>data</b>.     In case of an error status, the data field is empty. The data field contains a single object     in case the request is for a specific identifier (e.g. CORE ID, CORE repository ID, etc.), or       contains a list of objects, for example for search queries. In case of batch requests, the response     is an array of objects, each of which contains its own <b>status</b> and <b>data</b> fields.     For search queries the response contains an additional field <b>totalHits</b>, which is the      total number of items which match the search criteria.</p>  <h2>Search query syntax</h2>  <p style=\"text-align: justify\">Complex search queries can be used in all of the API search methods.     The query can be a simple string or it can be built using terms and operators described in Elasticsearch     <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-query-string-query.html#query-string-syntax\">documentation</a>.     The usable field names are <strong>title</strong>, <strong>description</strong>, <strong>fullText</strong>,      <strong>authors</strong>, <strong>publisher</strong>, <strong>repositories.id</strong>, <strong>repositories.name</strong>,      <strong>doi</strong>, <strong>oai</strong>, <strong>identifiers</strong> (which is a list of article identifiers including OAI, URL, etc.), <strong>language.name</strong>      and <strong>year</strong>. Some example queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>title:psychology and language.name:English</p></li>     <li><p>repositories.id:86 AND year:2014</p></li>     <li><p>identifiers:\"oai:aura.abdn.ac.uk:2164/3837\" OR identifiers:\"oai:aura.abdn.ac.uk:2164/3843\"</p></li>     <li><p>doi:\"10.1186/1471-2458-6-309\"</p></li> </ul>  <h3>Retrieving the latest Articles</h3> <p style=\"text-align: justify\">     You can retrieve the harvested items since specific dates using the following queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>repositoryDocument.metadataUpdated:>2017-02-10</p></li>     <li><p>repositoryDocument.metadataUpdated:>2017-03-01 AND repositoryDocument.metadataUpdated:<2017-03-31</p></li>     </ul>  <h2>Sort order</h2>  <p style=\"text-align: justify;\">For search queries, the results are ordered by relevance score. For batch      requests, the results are retrieved in the order of the requests.</p>  <h2>Parameters</h2> <p style=\"text-align: justify;\">The API methods allow different parameters to be passed. Additionally, there is an API key parameter which is common to all API methods. For all API methods      the API key can be provided either as a query parameter or in the request header. If the API key      is not provided, the API will return HTTP 401 error. You can register for an API key <a href=\"/services#api\">here</a>.</p>  <h2>API methods</h2>
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RepositoryStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:44.717365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RepositoryStats {
  public static final String SERIALIZED_NAME_COUNT_FULLTEXT = "countFulltext";
  @SerializedName(SERIALIZED_NAME_COUNT_FULLTEXT)
  private Integer countFulltext;

  public static final String SERIALIZED_NAME_COUNT_METADATA = "countMetadata";
  @SerializedName(SERIALIZED_NAME_COUNT_METADATA)
  private Integer countMetadata;

  public static final String SERIALIZED_NAME_DATE_LAST_PROCESSED = "dateLastProcessed";
  @SerializedName(SERIALIZED_NAME_DATE_LAST_PROCESSED)
  private String dateLastProcessed;

  public RepositoryStats() {
  }

  public RepositoryStats countFulltext(Integer countFulltext) {
    this.countFulltext = countFulltext;
    return this;
  }

  /**
   * Repository fulltext count
   * @return countFulltext
   */
  @javax.annotation.Nullable
  public Integer getCountFulltext() {
    return countFulltext;
  }

  public void setCountFulltext(Integer countFulltext) {
    this.countFulltext = countFulltext;
  }


  public RepositoryStats countMetadata(Integer countMetadata) {
    this.countMetadata = countMetadata;
    return this;
  }

  /**
   * Repository metadata count
   * @return countMetadata
   */
  @javax.annotation.Nullable
  public Integer getCountMetadata() {
    return countMetadata;
  }

  public void setCountMetadata(Integer countMetadata) {
    this.countMetadata = countMetadata;
  }


  public RepositoryStats dateLastProcessed(String dateLastProcessed) {
    this.dateLastProcessed = dateLastProcessed;
    return this;
  }

  /**
   * Last repository processing date
   * @return dateLastProcessed
   */
  @javax.annotation.Nullable
  public String getDateLastProcessed() {
    return dateLastProcessed;
  }

  public void setDateLastProcessed(String dateLastProcessed) {
    this.dateLastProcessed = dateLastProcessed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryStats repositoryStats = (RepositoryStats) o;
    return Objects.equals(this.countFulltext, repositoryStats.countFulltext) &&
        Objects.equals(this.countMetadata, repositoryStats.countMetadata) &&
        Objects.equals(this.dateLastProcessed, repositoryStats.dateLastProcessed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countFulltext, countMetadata, dateLastProcessed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryStats {\n");
    sb.append("    countFulltext: ").append(toIndentedString(countFulltext)).append("\n");
    sb.append("    countMetadata: ").append(toIndentedString(countMetadata)).append("\n");
    sb.append("    dateLastProcessed: ").append(toIndentedString(dateLastProcessed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countFulltext");
    openapiFields.add("countMetadata");
    openapiFields.add("dateLastProcessed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepositoryStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepositoryStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepositoryStats is not found in the empty JSON string", RepositoryStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepositoryStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepositoryStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dateLastProcessed") != null && !jsonObj.get("dateLastProcessed").isJsonNull()) && !jsonObj.get("dateLastProcessed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateLastProcessed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateLastProcessed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepositoryStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepositoryStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepositoryStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepositoryStats.class));

       return (TypeAdapter<T>) new TypeAdapter<RepositoryStats>() {
           @Override
           public void write(JsonWriter out, RepositoryStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepositoryStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepositoryStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepositoryStats
   * @throws IOException if the JSON string is invalid with respect to RepositoryStats
   */
  public static RepositoryStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepositoryStats.class);
  }

  /**
   * Convert an instance of RepositoryStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

