/*
 * CORE API v2
 * <p style=\"text-align: justify;\">You can use the CORE API to access the      resources harvested and enriched by CORE. If you encounter any problems with the API, please <a href=\"/contact\">report them to us</a>.</p>  <h2>Overview</h2> <p style=\"text-align: justify;\">The API is organised by resource type. The resources are <b>articles</b>,      <b>journals</b> and <b>repositories</b> and are represented using JSON data format. Furthermore,      each resource has a list of methods. The API also provides two global methods for accessing all resources at once.</p>  <h2>Response format</h2> <p style=\"text-align: justify;\">Response for each query contains two fields: <b>status</b> and <b>data</b>.     In case of an error status, the data field is empty. The data field contains a single object     in case the request is for a specific identifier (e.g. CORE ID, CORE repository ID, etc.), or       contains a list of objects, for example for search queries. In case of batch requests, the response     is an array of objects, each of which contains its own <b>status</b> and <b>data</b> fields.     For search queries the response contains an additional field <b>totalHits</b>, which is the      total number of items which match the search criteria.</p>  <h2>Search query syntax</h2>  <p style=\"text-align: justify\">Complex search queries can be used in all of the API search methods.     The query can be a simple string or it can be built using terms and operators described in Elasticsearch     <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-query-string-query.html#query-string-syntax\">documentation</a>.     The usable field names are <strong>title</strong>, <strong>description</strong>, <strong>fullText</strong>,      <strong>authors</strong>, <strong>publisher</strong>, <strong>repositories.id</strong>, <strong>repositories.name</strong>,      <strong>doi</strong>, <strong>oai</strong>, <strong>identifiers</strong> (which is a list of article identifiers including OAI, URL, etc.), <strong>language.name</strong>      and <strong>year</strong>. Some example queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>title:psychology and language.name:English</p></li>     <li><p>repositories.id:86 AND year:2014</p></li>     <li><p>identifiers:\"oai:aura.abdn.ac.uk:2164/3837\" OR identifiers:\"oai:aura.abdn.ac.uk:2164/3843\"</p></li>     <li><p>doi:\"10.1186/1471-2458-6-309\"</p></li> </ul>  <h3>Retrieving the latest Articles</h3> <p style=\"text-align: justify\">     You can retrieve the harvested items since specific dates using the following queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>repositoryDocument.metadataUpdated:>2017-02-10</p></li>     <li><p>repositoryDocument.metadataUpdated:>2017-03-01 AND repositoryDocument.metadataUpdated:<2017-03-31</p></li>     </ul>  <h2>Sort order</h2>  <p style=\"text-align: justify;\">For search queries, the results are ordered by relevance score. For batch      requests, the results are retrieved in the order of the requests.</p>  <h2>Parameters</h2> <p style=\"text-align: justify;\">The API methods allow different parameters to be passed. Additionally, there is an API key parameter which is common to all API methods. For all API methods      the API key can be provided either as a query parameter or in the request header. If the API key      is not provided, the API will return HTTP 401 error. You can register for an API key <a href=\"/services#api\">here</a>.</p>  <h2>API methods</h2>
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RepositoryLocation;
import org.openapitools.client.model.RepositoryStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Repository
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:44.717365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Repository {
  public static final String SERIALIZED_NAME_DATA_PROVIDER_SOURCE_STATS = "dataProviderSourceStats";
  @SerializedName(SERIALIZED_NAME_DATA_PROVIDER_SOURCE_STATS)
  private List<Object> dataProviderSourceStats = new ArrayList<>();

  public static final String SERIALIZED_NAME_HISTORY = "history";
  @SerializedName(SERIALIZED_NAME_HISTORY)
  private List<Object> history = new ArrayList<>();

  public static final String SERIALIZED_NAME_HISTORY_CUMULATIVE = "historyCumulative";
  @SerializedName(SERIALIZED_NAME_HISTORY_CUMULATIVE)
  private List<Object> historyCumulative = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LAST_SEEN = "lastSeen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private OffsetDateTime lastSeen;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPEN_DOAR_ID = "openDoarId";
  @SerializedName(SERIALIZED_NAME_OPEN_DOAR_ID)
  private Integer openDoarId;

  public static final String SERIALIZED_NAME_REPOSITORY_LOCATION = "repositoryLocation";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_LOCATION)
  private RepositoryLocation repositoryLocation;

  public static final String SERIALIZED_NAME_REPOSITORY_STATS = "repositoryStats";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_STATS)
  private RepositoryStats repositoryStats;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_URL_HOMEPAGE = "urlHomepage";
  @SerializedName(SERIALIZED_NAME_URL_HOMEPAGE)
  private String urlHomepage;

  public static final String SERIALIZED_NAME_URL_OAIPMH = "urlOaipmh";
  @SerializedName(SERIALIZED_NAME_URL_OAIPMH)
  private String urlOaipmh;

  public Repository() {
  }

  public Repository dataProviderSourceStats(List<Object> dataProviderSourceStats) {
    this.dataProviderSourceStats = dataProviderSourceStats;
    return this;
  }

  public Repository addDataProviderSourceStatsItem(Object dataProviderSourceStatsItem) {
    if (this.dataProviderSourceStats == null) {
      this.dataProviderSourceStats = new ArrayList<>();
    }
    this.dataProviderSourceStats.add(dataProviderSourceStatsItem);
    return this;
  }

  /**
   * Statistics based on the Data Provider/repository rather than data processed and filtered by CORE. This array is in beta and may change in the future
   * @return dataProviderSourceStats
   */
  @javax.annotation.Nullable
  public List<Object> getDataProviderSourceStats() {
    return dataProviderSourceStats;
  }

  public void setDataProviderSourceStats(List<Object> dataProviderSourceStats) {
    this.dataProviderSourceStats = dataProviderSourceStats;
  }


  public Repository history(List<Object> history) {
    this.history = history;
    return this;
  }

  public Repository addHistoryItem(Object historyItem) {
    if (this.history == null) {
      this.history = new ArrayList<>();
    }
    this.history.add(historyItem);
    return this;
  }

  /**
   * The number of deposits in the repository per date. This field is in beta and may change in the future
   * @return history
   */
  @javax.annotation.Nullable
  public List<Object> getHistory() {
    return history;
  }

  public void setHistory(List<Object> history) {
    this.history = history;
  }


  public Repository historyCumulative(List<Object> historyCumulative) {
    this.historyCumulative = historyCumulative;
    return this;
  }

  public Repository addHistoryCumulativeItem(Object historyCumulativeItem) {
    if (this.historyCumulative == null) {
      this.historyCumulative = new ArrayList<>();
    }
    this.historyCumulative.add(historyCumulativeItem);
    return this;
  }

  /**
   * The number of deposits in the repository per date over time (cumulative). This field is in beta and may change in the future
   * @return historyCumulative
   */
  @javax.annotation.Nullable
  public List<Object> getHistoryCumulative() {
    return historyCumulative;
  }

  public void setHistoryCumulative(List<Object> historyCumulative) {
    this.historyCumulative = historyCumulative;
  }


  public Repository id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * CORE repository ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Repository lastSeen(OffsetDateTime lastSeen) {
    this.lastSeen = lastSeen;
    return this;
  }

  /**
   * The time the repository was last harvested by CORE. This field is in beta and may change in the future
   * @return lastSeen
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSeen() {
    return lastSeen;
  }

  public void setLastSeen(OffsetDateTime lastSeen) {
    this.lastSeen = lastSeen;
  }


  public Repository name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Repository name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Repository openDoarId(Integer openDoarId) {
    this.openDoarId = openDoarId;
    return this;
  }

  /**
   * ID of the repository in Open DOAR
   * @return openDoarId
   */
  @javax.annotation.Nullable
  public Integer getOpenDoarId() {
    return openDoarId;
  }

  public void setOpenDoarId(Integer openDoarId) {
    this.openDoarId = openDoarId;
  }


  public Repository repositoryLocation(RepositoryLocation repositoryLocation) {
    this.repositoryLocation = repositoryLocation;
    return this;
  }

  /**
   * Get repositoryLocation
   * @return repositoryLocation
   */
  @javax.annotation.Nullable
  public RepositoryLocation getRepositoryLocation() {
    return repositoryLocation;
  }

  public void setRepositoryLocation(RepositoryLocation repositoryLocation) {
    this.repositoryLocation = repositoryLocation;
  }


  public Repository repositoryStats(RepositoryStats repositoryStats) {
    this.repositoryStats = repositoryStats;
    return this;
  }

  /**
   * Get repositoryStats
   * @return repositoryStats
   */
  @javax.annotation.Nullable
  public RepositoryStats getRepositoryStats() {
    return repositoryStats;
  }

  public void setRepositoryStats(RepositoryStats repositoryStats) {
    this.repositoryStats = repositoryStats;
  }


  public Repository uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Repository URI
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public Repository urlHomepage(String urlHomepage) {
    this.urlHomepage = urlHomepage;
    return this;
  }

  /**
   * Repository homepage
   * @return urlHomepage
   */
  @javax.annotation.Nullable
  public String getUrlHomepage() {
    return urlHomepage;
  }

  public void setUrlHomepage(String urlHomepage) {
    this.urlHomepage = urlHomepage;
  }


  public Repository urlOaipmh(String urlOaipmh) {
    this.urlOaipmh = urlOaipmh;
    return this;
  }

  /**
   * Repository OAI-PMH endpoint
   * @return urlOaipmh
   */
  @javax.annotation.Nullable
  public String getUrlOaipmh() {
    return urlOaipmh;
  }

  public void setUrlOaipmh(String urlOaipmh) {
    this.urlOaipmh = urlOaipmh;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Repository repository = (Repository) o;
    return Objects.equals(this.dataProviderSourceStats, repository.dataProviderSourceStats) &&
        Objects.equals(this.history, repository.history) &&
        Objects.equals(this.historyCumulative, repository.historyCumulative) &&
        Objects.equals(this.id, repository.id) &&
        Objects.equals(this.lastSeen, repository.lastSeen) &&
        Objects.equals(this.name, repository.name) &&
        Objects.equals(this.openDoarId, repository.openDoarId) &&
        Objects.equals(this.repositoryLocation, repository.repositoryLocation) &&
        Objects.equals(this.repositoryStats, repository.repositoryStats) &&
        Objects.equals(this.uri, repository.uri) &&
        Objects.equals(this.urlHomepage, repository.urlHomepage) &&
        Objects.equals(this.urlOaipmh, repository.urlOaipmh);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataProviderSourceStats, history, historyCumulative, id, lastSeen, name, openDoarId, repositoryLocation, repositoryStats, uri, urlHomepage, urlOaipmh);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Repository {\n");
    sb.append("    dataProviderSourceStats: ").append(toIndentedString(dataProviderSourceStats)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    historyCumulative: ").append(toIndentedString(historyCumulative)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    openDoarId: ").append(toIndentedString(openDoarId)).append("\n");
    sb.append("    repositoryLocation: ").append(toIndentedString(repositoryLocation)).append("\n");
    sb.append("    repositoryStats: ").append(toIndentedString(repositoryStats)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    urlHomepage: ").append(toIndentedString(urlHomepage)).append("\n");
    sb.append("    urlOaipmh: ").append(toIndentedString(urlOaipmh)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataProviderSourceStats");
    openapiFields.add("history");
    openapiFields.add("historyCumulative");
    openapiFields.add("id");
    openapiFields.add("lastSeen");
    openapiFields.add("name");
    openapiFields.add("openDoarId");
    openapiFields.add("repositoryLocation");
    openapiFields.add("repositoryStats");
    openapiFields.add("uri");
    openapiFields.add("urlHomepage");
    openapiFields.add("urlOaipmh");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Repository
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Repository.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Repository is not found in the empty JSON string", Repository.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Repository.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Repository` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("dataProviderSourceStats") != null && !jsonObj.get("dataProviderSourceStats").isJsonNull() && !jsonObj.get("dataProviderSourceStats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataProviderSourceStats` to be an array in the JSON string but got `%s`", jsonObj.get("dataProviderSourceStats").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("history") != null && !jsonObj.get("history").isJsonNull() && !jsonObj.get("history").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `history` to be an array in the JSON string but got `%s`", jsonObj.get("history").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("historyCumulative") != null && !jsonObj.get("historyCumulative").isJsonNull() && !jsonObj.get("historyCumulative").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `historyCumulative` to be an array in the JSON string but got `%s`", jsonObj.get("historyCumulative").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `repositoryLocation`
      if (jsonObj.get("repositoryLocation") != null && !jsonObj.get("repositoryLocation").isJsonNull()) {
        RepositoryLocation.validateJsonElement(jsonObj.get("repositoryLocation"));
      }
      // validate the optional field `repositoryStats`
      if (jsonObj.get("repositoryStats") != null && !jsonObj.get("repositoryStats").isJsonNull()) {
        RepositoryStats.validateJsonElement(jsonObj.get("repositoryStats"));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if ((jsonObj.get("urlHomepage") != null && !jsonObj.get("urlHomepage").isJsonNull()) && !jsonObj.get("urlHomepage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlHomepage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlHomepage").toString()));
      }
      if ((jsonObj.get("urlOaipmh") != null && !jsonObj.get("urlOaipmh").isJsonNull()) && !jsonObj.get("urlOaipmh").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlOaipmh` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlOaipmh").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Repository.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Repository' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Repository> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Repository.class));

       return (TypeAdapter<T>) new TypeAdapter<Repository>() {
           @Override
           public void write(JsonWriter out, Repository value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Repository read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Repository given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Repository
   * @throws IOException if the JSON string is invalid with respect to Repository
   */
  public static Repository fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Repository.class);
  }

  /**
   * Convert an instance of Repository to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

