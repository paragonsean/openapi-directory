/*
 * CORE API v2
 * <p style=\"text-align: justify;\">You can use the CORE API to access the      resources harvested and enriched by CORE. If you encounter any problems with the API, please <a href=\"/contact\">report them to us</a>.</p>  <h2>Overview</h2> <p style=\"text-align: justify;\">The API is organised by resource type. The resources are <b>articles</b>,      <b>journals</b> and <b>repositories</b> and are represented using JSON data format. Furthermore,      each resource has a list of methods. The API also provides two global methods for accessing all resources at once.</p>  <h2>Response format</h2> <p style=\"text-align: justify;\">Response for each query contains two fields: <b>status</b> and <b>data</b>.     In case of an error status, the data field is empty. The data field contains a single object     in case the request is for a specific identifier (e.g. CORE ID, CORE repository ID, etc.), or       contains a list of objects, for example for search queries. In case of batch requests, the response     is an array of objects, each of which contains its own <b>status</b> and <b>data</b> fields.     For search queries the response contains an additional field <b>totalHits</b>, which is the      total number of items which match the search criteria.</p>  <h2>Search query syntax</h2>  <p style=\"text-align: justify\">Complex search queries can be used in all of the API search methods.     The query can be a simple string or it can be built using terms and operators described in Elasticsearch     <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-query-string-query.html#query-string-syntax\">documentation</a>.     The usable field names are <strong>title</strong>, <strong>description</strong>, <strong>fullText</strong>,      <strong>authors</strong>, <strong>publisher</strong>, <strong>repositories.id</strong>, <strong>repositories.name</strong>,      <strong>doi</strong>, <strong>oai</strong>, <strong>identifiers</strong> (which is a list of article identifiers including OAI, URL, etc.), <strong>language.name</strong>      and <strong>year</strong>. Some example queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>title:psychology and language.name:English</p></li>     <li><p>repositories.id:86 AND year:2014</p></li>     <li><p>identifiers:\"oai:aura.abdn.ac.uk:2164/3837\" OR identifiers:\"oai:aura.abdn.ac.uk:2164/3843\"</p></li>     <li><p>doi:\"10.1186/1471-2458-6-309\"</p></li> </ul>  <h3>Retrieving the latest Articles</h3> <p style=\"text-align: justify\">     You can retrieve the harvested items since specific dates using the following queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>repositoryDocument.metadataUpdated:>2017-02-10</p></li>     <li><p>repositoryDocument.metadataUpdated:>2017-03-01 AND repositoryDocument.metadataUpdated:<2017-03-31</p></li>     </ul>  <h2>Sort order</h2>  <p style=\"text-align: justify;\">For search queries, the results are ordered by relevance score. For batch      requests, the results are retrieved in the order of the requests.</p>  <h2>Parameters</h2> <p style=\"text-align: justify;\">The API methods allow different parameters to be passed. Additionally, there is an API key parameter which is common to all API methods. For all API methods      the API key can be provided either as a query parameter or in the request header. If the API key      is not provided, the API will return HTTP 401 error. You can register for an API key <a href=\"/services#api\">here</a>.</p>  <h2>API methods</h2>
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ArticleHistoryResponse;
import org.openapitools.client.model.ArticleResponse;
import org.openapitools.client.model.ArticleSearchResponse;
import org.openapitools.client.model.ArticleSimilarResponse;
import org.openapitools.client.model.SearchRequest;
import org.openapitools.client.model.SimilarRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArticlesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ArticlesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ArticlesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getArticleByCoreId
     * @param coreId CORE ID of the article that needs to be fetched. (required)
     * @param metadata Whether to retrieve the full article metadata or only the ID. The default value is true. (optional, default to true)
     * @param fulltext Whether to retrieve full text of the article. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the article. The default value is false (optional, default to false)
     * @param similar Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false (optional, default to false)
     * @param urls Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false (optional, default to false)
     * @param faithfulMetadata Returns the records raw XML metadata from the original repository. The default value is false (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid identifier supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArticleByCoreIdCall(Long coreId, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/articles/get/{coreId}"
            .replace("{" + "coreId" + "}", localVarApiClient.escapeString(coreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata", metadata));
        }

        if (fulltext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulltext", fulltext));
        }

        if (citations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("citations", citations));
        }

        if (similar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("similar", similar));
        }

        if (duplicate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duplicate", duplicate));
        }

        if (urls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urls", urls));
        }

        if (faithfulMetadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("faithfulMetadata", faithfulMetadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArticleByCoreIdValidateBeforeCall(Long coreId, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreId' is set
        if (coreId == null) {
            throw new ApiException("Missing the required parameter 'coreId' when calling getArticleByCoreId(Async)");
        }

        return getArticleByCoreIdCall(coreId, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata, _callback);

    }

    /**
     * Get article by CORE ID
     * Method will retrieve an article based on given CORE ID.
     * @param coreId CORE ID of the article that needs to be fetched. (required)
     * @param metadata Whether to retrieve the full article metadata or only the ID. The default value is true. (optional, default to true)
     * @param fulltext Whether to retrieve full text of the article. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the article. The default value is false (optional, default to false)
     * @param similar Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false (optional, default to false)
     * @param urls Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false (optional, default to false)
     * @param faithfulMetadata Returns the records raw XML metadata from the original repository. The default value is false (optional, default to false)
     * @return ArticleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid identifier supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public ArticleResponse getArticleByCoreId(Long coreId, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata) throws ApiException {
        ApiResponse<ArticleResponse> localVarResp = getArticleByCoreIdWithHttpInfo(coreId, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata);
        return localVarResp.getData();
    }

    /**
     * Get article by CORE ID
     * Method will retrieve an article based on given CORE ID.
     * @param coreId CORE ID of the article that needs to be fetched. (required)
     * @param metadata Whether to retrieve the full article metadata or only the ID. The default value is true. (optional, default to true)
     * @param fulltext Whether to retrieve full text of the article. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the article. The default value is false (optional, default to false)
     * @param similar Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false (optional, default to false)
     * @param urls Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false (optional, default to false)
     * @param faithfulMetadata Returns the records raw XML metadata from the original repository. The default value is false (optional, default to false)
     * @return ApiResponse&lt;ArticleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid identifier supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArticleResponse> getArticleByCoreIdWithHttpInfo(Long coreId, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata) throws ApiException {
        okhttp3.Call localVarCall = getArticleByCoreIdValidateBeforeCall(coreId, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata, null);
        Type localVarReturnType = new TypeToken<ArticleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get article by CORE ID (asynchronously)
     * Method will retrieve an article based on given CORE ID.
     * @param coreId CORE ID of the article that needs to be fetched. (required)
     * @param metadata Whether to retrieve the full article metadata or only the ID. The default value is true. (optional, default to true)
     * @param fulltext Whether to retrieve full text of the article. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the article. The default value is false (optional, default to false)
     * @param similar Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false (optional, default to false)
     * @param urls Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false (optional, default to false)
     * @param faithfulMetadata Returns the records raw XML metadata from the original repository. The default value is false (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid identifier supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArticleByCoreIdAsync(Long coreId, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata, final ApiCallback<ArticleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArticleByCoreIdValidateBeforeCall(coreId, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata, _callback);
        Type localVarReturnType = new TypeToken<ArticleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArticleByCoreIdBatch
     * @param body JSON array with CORE IDs of articles that need to be fetched (required)
     * @param metadata Whether to retrieve the full article metadata or only the IDs. The default value is true (optional, default to true)
     * @param fulltext Whether to retrieve fulltexts of the articles. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the articles. The default value is false (optional, default to false)
     * @param similar Whether to retrieve lists of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve CORE IDs of different versions of the articles. The default value is false (optional, default to false)
     * @param urls Whether to retrieve lists of URLs of the article fulltexts. The default value is false (optional, default to false)
     * @param faithfulMetadata Returns the records raw XML metadata from the original repository. The default value is false (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArticleByCoreIdBatchCall(List<Integer> body, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/articles/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata", metadata));
        }

        if (fulltext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulltext", fulltext));
        }

        if (citations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("citations", citations));
        }

        if (similar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("similar", similar));
        }

        if (duplicate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duplicate", duplicate));
        }

        if (urls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urls", urls));
        }

        if (faithfulMetadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("faithfulMetadata", faithfulMetadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArticleByCoreIdBatchValidateBeforeCall(List<Integer> body, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getArticleByCoreIdBatch(Async)");
        }

        return getArticleByCoreIdBatchCall(body, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata, _callback);

    }

    /**
     * Batch operation for retrieving articles by CORE ID
     * Method accepts a JSON array of CORE IDs and retrieves a list of articles. The response array is ordered based on the order of the IDs in the request array.
     * @param body JSON array with CORE IDs of articles that need to be fetched (required)
     * @param metadata Whether to retrieve the full article metadata or only the IDs. The default value is true (optional, default to true)
     * @param fulltext Whether to retrieve fulltexts of the articles. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the articles. The default value is false (optional, default to false)
     * @param similar Whether to retrieve lists of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve CORE IDs of different versions of the articles. The default value is false (optional, default to false)
     * @param urls Whether to retrieve lists of URLs of the article fulltexts. The default value is false (optional, default to false)
     * @param faithfulMetadata Returns the records raw XML metadata from the original repository. The default value is false (optional, default to false)
     * @return List&lt;ArticleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public List<ArticleResponse> getArticleByCoreIdBatch(List<Integer> body, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata) throws ApiException {
        ApiResponse<List<ArticleResponse>> localVarResp = getArticleByCoreIdBatchWithHttpInfo(body, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata);
        return localVarResp.getData();
    }

    /**
     * Batch operation for retrieving articles by CORE ID
     * Method accepts a JSON array of CORE IDs and retrieves a list of articles. The response array is ordered based on the order of the IDs in the request array.
     * @param body JSON array with CORE IDs of articles that need to be fetched (required)
     * @param metadata Whether to retrieve the full article metadata or only the IDs. The default value is true (optional, default to true)
     * @param fulltext Whether to retrieve fulltexts of the articles. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the articles. The default value is false (optional, default to false)
     * @param similar Whether to retrieve lists of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve CORE IDs of different versions of the articles. The default value is false (optional, default to false)
     * @param urls Whether to retrieve lists of URLs of the article fulltexts. The default value is false (optional, default to false)
     * @param faithfulMetadata Returns the records raw XML metadata from the original repository. The default value is false (optional, default to false)
     * @return ApiResponse&lt;List&lt;ArticleResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ArticleResponse>> getArticleByCoreIdBatchWithHttpInfo(List<Integer> body, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata) throws ApiException {
        okhttp3.Call localVarCall = getArticleByCoreIdBatchValidateBeforeCall(body, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata, null);
        Type localVarReturnType = new TypeToken<List<ArticleResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch operation for retrieving articles by CORE ID (asynchronously)
     * Method accepts a JSON array of CORE IDs and retrieves a list of articles. The response array is ordered based on the order of the IDs in the request array.
     * @param body JSON array with CORE IDs of articles that need to be fetched (required)
     * @param metadata Whether to retrieve the full article metadata or only the IDs. The default value is true (optional, default to true)
     * @param fulltext Whether to retrieve fulltexts of the articles. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the articles. The default value is false (optional, default to false)
     * @param similar Whether to retrieve lists of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve CORE IDs of different versions of the articles. The default value is false (optional, default to false)
     * @param urls Whether to retrieve lists of URLs of the article fulltexts. The default value is false (optional, default to false)
     * @param faithfulMetadata Returns the records raw XML metadata from the original repository. The default value is false (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArticleByCoreIdBatchAsync(List<Integer> body, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata, final ApiCallback<List<ArticleResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArticleByCoreIdBatchValidateBeforeCall(body, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata, _callback);
        Type localVarReturnType = new TypeToken<List<ArticleResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArticleHistoryByCoreId
     * @param coreId CORE ID of the article which history should be fetched (required)
     * @param page Which page of the history results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page). (optional, default to 1)
     * @param pageSize The number of results to return per page. Can be any number between 10 and 100, default is 10. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter invalid or out of bounds </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArticleHistoryByCoreIdCall(String coreId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/articles/get/{coreId}/history"
            .replace("{" + "coreId" + "}", localVarApiClient.escapeString(coreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArticleHistoryByCoreIdValidateBeforeCall(String coreId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreId' is set
        if (coreId == null) {
            throw new ApiException("Missing the required parameter 'coreId' when calling getArticleHistoryByCoreId(Async)");
        }

        return getArticleHistoryByCoreIdCall(coreId, page, pageSize, _callback);

    }

    /**
     * Get article history by CORE ID
     * Method accepts a single CORE ID and returns a list of all historical versions of the article, which are stored in CORE database. The results are ordered from the newest one to the oldest one.
     * @param coreId CORE ID of the article which history should be fetched (required)
     * @param page Which page of the history results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page). (optional, default to 1)
     * @param pageSize The number of results to return per page. Can be any number between 10 and 100, default is 10. (optional, default to 10)
     * @return ArticleHistoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter invalid or out of bounds </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public ArticleHistoryResponse getArticleHistoryByCoreId(String coreId, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<ArticleHistoryResponse> localVarResp = getArticleHistoryByCoreIdWithHttpInfo(coreId, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get article history by CORE ID
     * Method accepts a single CORE ID and returns a list of all historical versions of the article, which are stored in CORE database. The results are ordered from the newest one to the oldest one.
     * @param coreId CORE ID of the article which history should be fetched (required)
     * @param page Which page of the history results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page). (optional, default to 1)
     * @param pageSize The number of results to return per page. Can be any number between 10 and 100, default is 10. (optional, default to 10)
     * @return ApiResponse&lt;ArticleHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter invalid or out of bounds </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArticleHistoryResponse> getArticleHistoryByCoreIdWithHttpInfo(String coreId, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getArticleHistoryByCoreIdValidateBeforeCall(coreId, page, pageSize, null);
        Type localVarReturnType = new TypeToken<ArticleHistoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get article history by CORE ID (asynchronously)
     * Method accepts a single CORE ID and returns a list of all historical versions of the article, which are stored in CORE database. The results are ordered from the newest one to the oldest one.
     * @param coreId CORE ID of the article which history should be fetched (required)
     * @param page Which page of the history results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page). (optional, default to 1)
     * @param pageSize The number of results to return per page. Can be any number between 10 and 100, default is 10. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter invalid or out of bounds </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArticleHistoryByCoreIdAsync(String coreId, Integer page, Integer pageSize, final ApiCallback<ArticleHistoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArticleHistoryByCoreIdValidateBeforeCall(coreId, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ArticleHistoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArticlePdfByCoreId
     * @param coreId ID of article history that needs to be fetched (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Article pdf found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArticlePdfByCoreIdCall(String coreId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/articles/get/{coreId}/download/pdf"
            .replace("{" + "coreId" + "}", localVarApiClient.escapeString(coreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArticlePdfByCoreIdValidateBeforeCall(String coreId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreId' is set
        if (coreId == null) {
            throw new ApiException("Missing the required parameter 'coreId' when calling getArticlePdfByCoreId(Async)");
        }

        return getArticlePdfByCoreIdCall(coreId, _callback);

    }

    /**
     * Get fulltext PDF by CORE ID
     * Method will retrieve an article based on given CORE ID.
     * @param coreId ID of article history that needs to be fetched (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Article pdf found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public void getArticlePdfByCoreId(String coreId) throws ApiException {
        getArticlePdfByCoreIdWithHttpInfo(coreId);
    }

    /**
     * Get fulltext PDF by CORE ID
     * Method will retrieve an article based on given CORE ID.
     * @param coreId ID of article history that needs to be fetched (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Article pdf found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getArticlePdfByCoreIdWithHttpInfo(String coreId) throws ApiException {
        okhttp3.Call localVarCall = getArticlePdfByCoreIdValidateBeforeCall(coreId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get fulltext PDF by CORE ID (asynchronously)
     * Method will retrieve an article based on given CORE ID.
     * @param coreId ID of article history that needs to be fetched (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Article pdf found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArticlePdfByCoreIdAsync(String coreId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArticlePdfByCoreIdValidateBeforeCall(coreId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for nearDuplicateArticles
     * @param doi The DOI for which the duplicates will be identified (optional)
     * @param title Title to match when looking for duplicate articles. Only useful when either value for @year or @description is supplied. (optional)
     * @param year Year the article was published. Only useful when value for @title is supplied.  (optional)
     * @param description Abstract for an article based on which its duplicates will be found. Only useful when value for @title is supplied. (optional)
     * @param fulltext Full text for an article based on which its duplicates will be found. (optional)
     * @param identifier Article identifier for which the duplicates will be identified. Only useful when either values for @doi or (@title and @year) or (@title and @abstract) or @fulltext are supplied. (optional)
     * @param repositoryId Limit the duplicates search to particular repository id.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Insufficient/Unsuitable input parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Could not run the deduplication service at this time; please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nearDuplicateArticlesCall(String doi, String title, String year, String description, String fulltext, String identifier, String repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/articles/dedup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (doi != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doi", doi));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (fulltext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulltext", fulltext));
        }

        if (identifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifier", identifier));
        }

        if (repositoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("repositoryId", repositoryId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nearDuplicateArticlesValidateBeforeCall(String doi, String title, String year, String description, String fulltext, String identifier, String repositoryId, final ApiCallback _callback) throws ApiException {
        return nearDuplicateArticlesCall(doi, title, year, description, fulltext, identifier, repositoryId, _callback);

    }

    /**
     * Get all near duplicate articles
     * Method accepts values for several parameters and retrieves a JSON array of articles which have near duplicate content matching the input parameters&#39; values. The response array contains ids of the near duplicate articles along with their relevance scores.
     * @param doi The DOI for which the duplicates will be identified (optional)
     * @param title Title to match when looking for duplicate articles. Only useful when either value for @year or @description is supplied. (optional)
     * @param year Year the article was published. Only useful when value for @title is supplied.  (optional)
     * @param description Abstract for an article based on which its duplicates will be found. Only useful when value for @title is supplied. (optional)
     * @param fulltext Full text for an article based on which its duplicates will be found. (optional)
     * @param identifier Article identifier for which the duplicates will be identified. Only useful when either values for @doi or (@title and @year) or (@title and @abstract) or @fulltext are supplied. (optional)
     * @param repositoryId Limit the duplicates search to particular repository id.  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Insufficient/Unsuitable input parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Could not run the deduplication service at this time; please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public Object nearDuplicateArticles(String doi, String title, String year, String description, String fulltext, String identifier, String repositoryId) throws ApiException {
        ApiResponse<Object> localVarResp = nearDuplicateArticlesWithHttpInfo(doi, title, year, description, fulltext, identifier, repositoryId);
        return localVarResp.getData();
    }

    /**
     * Get all near duplicate articles
     * Method accepts values for several parameters and retrieves a JSON array of articles which have near duplicate content matching the input parameters&#39; values. The response array contains ids of the near duplicate articles along with their relevance scores.
     * @param doi The DOI for which the duplicates will be identified (optional)
     * @param title Title to match when looking for duplicate articles. Only useful when either value for @year or @description is supplied. (optional)
     * @param year Year the article was published. Only useful when value for @title is supplied.  (optional)
     * @param description Abstract for an article based on which its duplicates will be found. Only useful when value for @title is supplied. (optional)
     * @param fulltext Full text for an article based on which its duplicates will be found. (optional)
     * @param identifier Article identifier for which the duplicates will be identified. Only useful when either values for @doi or (@title and @year) or (@title and @abstract) or @fulltext are supplied. (optional)
     * @param repositoryId Limit the duplicates search to particular repository id.  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Insufficient/Unsuitable input parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Could not run the deduplication service at this time; please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> nearDuplicateArticlesWithHttpInfo(String doi, String title, String year, String description, String fulltext, String identifier, String repositoryId) throws ApiException {
        okhttp3.Call localVarCall = nearDuplicateArticlesValidateBeforeCall(doi, title, year, description, fulltext, identifier, repositoryId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all near duplicate articles (asynchronously)
     * Method accepts values for several parameters and retrieves a JSON array of articles which have near duplicate content matching the input parameters&#39; values. The response array contains ids of the near duplicate articles along with their relevance scores.
     * @param doi The DOI for which the duplicates will be identified (optional)
     * @param title Title to match when looking for duplicate articles. Only useful when either value for @year or @description is supplied. (optional)
     * @param year Year the article was published. Only useful when value for @title is supplied.  (optional)
     * @param description Abstract for an article based on which its duplicates will be found. Only useful when value for @title is supplied. (optional)
     * @param fulltext Full text for an article based on which its duplicates will be found. (optional)
     * @param identifier Article identifier for which the duplicates will be identified. Only useful when either values for @doi or (@title and @year) or (@title and @abstract) or @fulltext are supplied. (optional)
     * @param repositoryId Limit the duplicates search to particular repository id.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Insufficient/Unsuitable input parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Could not run the deduplication service at this time; please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nearDuplicateArticlesAsync(String doi, String title, String year, String description, String fulltext, String identifier, String repositoryId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = nearDuplicateArticlesValidateBeforeCall(doi, title, year, description, fulltext, identifier, repositoryId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchArticles
     * @param query The search query (required)
     * @param page Which page of the search results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page). (optional, default to 1)
     * @param pageSize The number of results to return per page. Can be any number between 10 and 100, default is 10. (optional, default to 10)
     * @param metadata Whether to retrieve the full article metadata or only the ID. The default value is true. (optional, default to true)
     * @param fulltext Whether to retrieve full text of the article. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the article. The default value is false (optional, default to false)
     * @param similar Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false (optional, default to false)
     * @param urls Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false (optional, default to false)
     * @param faithfulMetadata Returns the records raw XML metadata from the original repository. The default value is false (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter invalid or out of bounds </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchArticlesCall(Long query, Integer page, Integer pageSize, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/articles/search/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (metadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata", metadata));
        }

        if (fulltext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulltext", fulltext));
        }

        if (citations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("citations", citations));
        }

        if (similar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("similar", similar));
        }

        if (duplicate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duplicate", duplicate));
        }

        if (urls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urls", urls));
        }

        if (faithfulMetadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("faithfulMetadata", faithfulMetadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchArticlesValidateBeforeCall(Long query, Integer page, Integer pageSize, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchArticles(Async)");
        }

        return searchArticlesCall(query, page, pageSize, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata, _callback);

    }

    /**
     * Search through all documents
     * Searches through all articles and returns a JSON array with search results. Method searches through all article fields.
     * @param query The search query (required)
     * @param page Which page of the search results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page). (optional, default to 1)
     * @param pageSize The number of results to return per page. Can be any number between 10 and 100, default is 10. (optional, default to 10)
     * @param metadata Whether to retrieve the full article metadata or only the ID. The default value is true. (optional, default to true)
     * @param fulltext Whether to retrieve full text of the article. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the article. The default value is false (optional, default to false)
     * @param similar Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false (optional, default to false)
     * @param urls Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false (optional, default to false)
     * @param faithfulMetadata Returns the records raw XML metadata from the original repository. The default value is false (optional, default to false)
     * @return ArticleSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter invalid or out of bounds </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public ArticleSearchResponse searchArticles(Long query, Integer page, Integer pageSize, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata) throws ApiException {
        ApiResponse<ArticleSearchResponse> localVarResp = searchArticlesWithHttpInfo(query, page, pageSize, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata);
        return localVarResp.getData();
    }

    /**
     * Search through all documents
     * Searches through all articles and returns a JSON array with search results. Method searches through all article fields.
     * @param query The search query (required)
     * @param page Which page of the search results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page). (optional, default to 1)
     * @param pageSize The number of results to return per page. Can be any number between 10 and 100, default is 10. (optional, default to 10)
     * @param metadata Whether to retrieve the full article metadata or only the ID. The default value is true. (optional, default to true)
     * @param fulltext Whether to retrieve full text of the article. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the article. The default value is false (optional, default to false)
     * @param similar Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false (optional, default to false)
     * @param urls Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false (optional, default to false)
     * @param faithfulMetadata Returns the records raw XML metadata from the original repository. The default value is false (optional, default to false)
     * @return ApiResponse&lt;ArticleSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter invalid or out of bounds </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArticleSearchResponse> searchArticlesWithHttpInfo(Long query, Integer page, Integer pageSize, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata) throws ApiException {
        okhttp3.Call localVarCall = searchArticlesValidateBeforeCall(query, page, pageSize, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata, null);
        Type localVarReturnType = new TypeToken<ArticleSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search through all documents (asynchronously)
     * Searches through all articles and returns a JSON array with search results. Method searches through all article fields.
     * @param query The search query (required)
     * @param page Which page of the search results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page). (optional, default to 1)
     * @param pageSize The number of results to return per page. Can be any number between 10 and 100, default is 10. (optional, default to 10)
     * @param metadata Whether to retrieve the full article metadata or only the ID. The default value is true. (optional, default to true)
     * @param fulltext Whether to retrieve full text of the article. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the article. The default value is false (optional, default to false)
     * @param similar Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false (optional, default to false)
     * @param urls Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false (optional, default to false)
     * @param faithfulMetadata Returns the records raw XML metadata from the original repository. The default value is false (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter invalid or out of bounds </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchArticlesAsync(Long query, Integer page, Integer pageSize, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata, final ApiCallback<ArticleSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchArticlesValidateBeforeCall(query, page, pageSize, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata, _callback);
        Type localVarReturnType = new TypeToken<ArticleSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchArticlesBatch
     * @param body JSON array with search queries and parameters. One request can contain up to 100 queries (required)
     * @param metadata Whether to retrieve the full article metadata or only the ID. The default value is true. (optional, default to true)
     * @param fulltext Whether to retrieve full text of the article. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the article. The default value is false (optional, default to false)
     * @param similar Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false (optional, default to false)
     * @param urls Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false (optional, default to false)
     * @param faithfulMetadata Whether to retrieve the raw XML metadata of the article. The default value is false (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchArticlesBatchCall(List<SearchRequest> body, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/articles/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata", metadata));
        }

        if (fulltext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulltext", fulltext));
        }

        if (citations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("citations", citations));
        }

        if (similar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("similar", similar));
        }

        if (duplicate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duplicate", duplicate));
        }

        if (urls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urls", urls));
        }

        if (faithfulMetadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("faithfulMetadata", faithfulMetadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchArticlesBatchValidateBeforeCall(List<SearchRequest> body, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchArticlesBatch(Async)");
        }

        return searchArticlesBatchCall(body, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata, _callback);

    }

    /**
     * Batch operation for search through articles
     * Method accepts a JSON array of search queries and parameters. It then searches through all articles and returns a JSON array of search results for each of the queries. Method searches through all article fields (title, authors, subjects, identifiers, etc.).
     * @param body JSON array with search queries and parameters. One request can contain up to 100 queries (required)
     * @param metadata Whether to retrieve the full article metadata or only the ID. The default value is true. (optional, default to true)
     * @param fulltext Whether to retrieve full text of the article. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the article. The default value is false (optional, default to false)
     * @param similar Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false (optional, default to false)
     * @param urls Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false (optional, default to false)
     * @param faithfulMetadata Whether to retrieve the raw XML metadata of the article. The default value is false (optional, default to false)
     * @return List&lt;ArticleSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public List<ArticleSearchResponse> searchArticlesBatch(List<SearchRequest> body, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata) throws ApiException {
        ApiResponse<List<ArticleSearchResponse>> localVarResp = searchArticlesBatchWithHttpInfo(body, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata);
        return localVarResp.getData();
    }

    /**
     * Batch operation for search through articles
     * Method accepts a JSON array of search queries and parameters. It then searches through all articles and returns a JSON array of search results for each of the queries. Method searches through all article fields (title, authors, subjects, identifiers, etc.).
     * @param body JSON array with search queries and parameters. One request can contain up to 100 queries (required)
     * @param metadata Whether to retrieve the full article metadata or only the ID. The default value is true. (optional, default to true)
     * @param fulltext Whether to retrieve full text of the article. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the article. The default value is false (optional, default to false)
     * @param similar Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false (optional, default to false)
     * @param urls Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false (optional, default to false)
     * @param faithfulMetadata Whether to retrieve the raw XML metadata of the article. The default value is false (optional, default to false)
     * @return ApiResponse&lt;List&lt;ArticleSearchResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ArticleSearchResponse>> searchArticlesBatchWithHttpInfo(List<SearchRequest> body, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata) throws ApiException {
        okhttp3.Call localVarCall = searchArticlesBatchValidateBeforeCall(body, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata, null);
        Type localVarReturnType = new TypeToken<List<ArticleSearchResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch operation for search through articles (asynchronously)
     * Method accepts a JSON array of search queries and parameters. It then searches through all articles and returns a JSON array of search results for each of the queries. Method searches through all article fields (title, authors, subjects, identifiers, etc.).
     * @param body JSON array with search queries and parameters. One request can contain up to 100 queries (required)
     * @param metadata Whether to retrieve the full article metadata or only the ID. The default value is true. (optional, default to true)
     * @param fulltext Whether to retrieve full text of the article. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the article. The default value is false (optional, default to false)
     * @param similar Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false (optional, default to false)
     * @param urls Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false (optional, default to false)
     * @param faithfulMetadata Whether to retrieve the raw XML metadata of the article. The default value is false (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchArticlesBatchAsync(List<SearchRequest> body, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata, final ApiCallback<List<ArticleSearchResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchArticlesBatchValidateBeforeCall(body, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata, _callback);
        Type localVarReturnType = new TypeToken<List<ArticleSearchResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for similarArticles
     * @param body The text that requires similar articles to be calculated on (required)
     * @param limit How many similar articles to retrieve at most. Can be any number betwen 1 and 100, default is 10 (optional, default to 10)
     * @param metadata Whether to retrieve the full article metadata or only the IDs of the similar articles. The default value is true (optional, default to true)
     * @param fulltext Whether to retrieve fulltexts of the similar articles. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the articles. The default value is false (optional, default to false)
     * @param similar Whether to retrieve lists of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve CORE IDs of different versions of the articles. The default value is false (optional, default to false)
     * @param urls Whether to retrieve lists of URLs of the article fulltexts. The default value is false (optional, default to false)
     * @param faithfulMetadata Whether to retrieve the raw XML metadata of the articles. The default value is false (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing text in request body or parameter out of bounds or invalid parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call similarArticlesCall(SimilarRequest body, Integer limit, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/articles/similar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (metadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata", metadata));
        }

        if (fulltext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulltext", fulltext));
        }

        if (citations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("citations", citations));
        }

        if (similar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("similar", similar));
        }

        if (duplicate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duplicate", duplicate));
        }

        if (urls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urls", urls));
        }

        if (faithfulMetadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("faithfulMetadata", faithfulMetadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call similarArticlesValidateBeforeCall(SimilarRequest body, Integer limit, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling similarArticles(Async)");
        }

        return similarArticlesCall(body, limit, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata, _callback);

    }

    /**
     * Get articles by similarity to a text
     * Method accepts a text and retrieves a JSON array of articles which are similar to the given text. The response array is ordered based on similarity score, starting from the most similar.
     * @param body The text that requires similar articles to be calculated on (required)
     * @param limit How many similar articles to retrieve at most. Can be any number betwen 1 and 100, default is 10 (optional, default to 10)
     * @param metadata Whether to retrieve the full article metadata or only the IDs of the similar articles. The default value is true (optional, default to true)
     * @param fulltext Whether to retrieve fulltexts of the similar articles. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the articles. The default value is false (optional, default to false)
     * @param similar Whether to retrieve lists of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve CORE IDs of different versions of the articles. The default value is false (optional, default to false)
     * @param urls Whether to retrieve lists of URLs of the article fulltexts. The default value is false (optional, default to false)
     * @param faithfulMetadata Whether to retrieve the raw XML metadata of the articles. The default value is false (optional, default to false)
     * @return ArticleSimilarResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing text in request body or parameter out of bounds or invalid parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public ArticleSimilarResponse similarArticles(SimilarRequest body, Integer limit, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata) throws ApiException {
        ApiResponse<ArticleSimilarResponse> localVarResp = similarArticlesWithHttpInfo(body, limit, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata);
        return localVarResp.getData();
    }

    /**
     * Get articles by similarity to a text
     * Method accepts a text and retrieves a JSON array of articles which are similar to the given text. The response array is ordered based on similarity score, starting from the most similar.
     * @param body The text that requires similar articles to be calculated on (required)
     * @param limit How many similar articles to retrieve at most. Can be any number betwen 1 and 100, default is 10 (optional, default to 10)
     * @param metadata Whether to retrieve the full article metadata or only the IDs of the similar articles. The default value is true (optional, default to true)
     * @param fulltext Whether to retrieve fulltexts of the similar articles. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the articles. The default value is false (optional, default to false)
     * @param similar Whether to retrieve lists of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve CORE IDs of different versions of the articles. The default value is false (optional, default to false)
     * @param urls Whether to retrieve lists of URLs of the article fulltexts. The default value is false (optional, default to false)
     * @param faithfulMetadata Whether to retrieve the raw XML metadata of the articles. The default value is false (optional, default to false)
     * @return ApiResponse&lt;ArticleSimilarResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing text in request body or parameter out of bounds or invalid parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArticleSimilarResponse> similarArticlesWithHttpInfo(SimilarRequest body, Integer limit, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata) throws ApiException {
        okhttp3.Call localVarCall = similarArticlesValidateBeforeCall(body, limit, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata, null);
        Type localVarReturnType = new TypeToken<ArticleSimilarResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get articles by similarity to a text (asynchronously)
     * Method accepts a text and retrieves a JSON array of articles which are similar to the given text. The response array is ordered based on similarity score, starting from the most similar.
     * @param body The text that requires similar articles to be calculated on (required)
     * @param limit How many similar articles to retrieve at most. Can be any number betwen 1 and 100, default is 10 (optional, default to 10)
     * @param metadata Whether to retrieve the full article metadata or only the IDs of the similar articles. The default value is true (optional, default to true)
     * @param fulltext Whether to retrieve fulltexts of the similar articles. The default value is false (optional, default to false)
     * @param citations Whether to retrieve citations found in the articles. The default value is false (optional, default to false)
     * @param similar Whether to retrieve lists of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time (optional, default to false)
     * @param duplicate Whether to retrieve CORE IDs of different versions of the articles. The default value is false (optional, default to false)
     * @param urls Whether to retrieve lists of URLs of the article fulltexts. The default value is false (optional, default to false)
     * @param faithfulMetadata Whether to retrieve the raw XML metadata of the articles. The default value is false (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing text in request body or parameter out of bounds or invalid parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests in given amount of time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call similarArticlesAsync(SimilarRequest body, Integer limit, Boolean metadata, Boolean fulltext, Boolean citations, Boolean similar, Boolean duplicate, Boolean urls, Boolean faithfulMetadata, final ApiCallback<ArticleSimilarResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = similarArticlesValidateBeforeCall(body, limit, metadata, fulltext, citations, similar, duplicate, urls, faithfulMetadata, _callback);
        Type localVarReturnType = new TypeToken<ArticleSimilarResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
