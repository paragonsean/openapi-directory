/*
 * CORE API v2
 * <p style=\"text-align: justify;\">You can use the CORE API to access the      resources harvested and enriched by CORE. If you encounter any problems with the API, please <a href=\"/contact\">report them to us</a>.</p>  <h2>Overview</h2> <p style=\"text-align: justify;\">The API is organised by resource type. The resources are <b>articles</b>,      <b>journals</b> and <b>repositories</b> and are represented using JSON data format. Furthermore,      each resource has a list of methods. The API also provides two global methods for accessing all resources at once.</p>  <h2>Response format</h2> <p style=\"text-align: justify;\">Response for each query contains two fields: <b>status</b> and <b>data</b>.     In case of an error status, the data field is empty. The data field contains a single object     in case the request is for a specific identifier (e.g. CORE ID, CORE repository ID, etc.), or       contains a list of objects, for example for search queries. In case of batch requests, the response     is an array of objects, each of which contains its own <b>status</b> and <b>data</b> fields.     For search queries the response contains an additional field <b>totalHits</b>, which is the      total number of items which match the search criteria.</p>  <h2>Search query syntax</h2>  <p style=\"text-align: justify\">Complex search queries can be used in all of the API search methods.     The query can be a simple string or it can be built using terms and operators described in Elasticsearch     <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-query-string-query.html#query-string-syntax\">documentation</a>.     The usable field names are <strong>title</strong>, <strong>description</strong>, <strong>fullText</strong>,      <strong>authors</strong>, <strong>publisher</strong>, <strong>repositories.id</strong>, <strong>repositories.name</strong>,      <strong>doi</strong>, <strong>oai</strong>, <strong>identifiers</strong> (which is a list of article identifiers including OAI, URL, etc.), <strong>language.name</strong>      and <strong>year</strong>. Some example queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>title:psychology and language.name:English</p></li>     <li><p>repositories.id:86 AND year:2014</p></li>     <li><p>identifiers:\"oai:aura.abdn.ac.uk:2164/3837\" OR identifiers:\"oai:aura.abdn.ac.uk:2164/3843\"</p></li>     <li><p>doi:\"10.1186/1471-2458-6-309\"</p></li> </ul>  <h3>Retrieving the latest Articles</h3> <p style=\"text-align: justify\">     You can retrieve the harvested items since specific dates using the following queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>repositoryDocument.metadataUpdated:>2017-02-10</p></li>     <li><p>repositoryDocument.metadataUpdated:>2017-03-01 AND repositoryDocument.metadataUpdated:<2017-03-31</p></li>     </ul>  <h2>Sort order</h2>  <p style=\"text-align: justify;\">For search queries, the results are ordered by relevance score. For batch      requests, the results are retrieved in the order of the requests.</p>  <h2>Parameters</h2> <p style=\"text-align: justify;\">The API methods allow different parameters to be passed. Additionally, there is an API key parameter which is common to all API methods. For all API methods      the API key can be provided either as a query parameter or in the request header. If the API key      is not provided, the API will return HTTP 401 error. You can register for an API key <a href=\"/services#api\">here</a>.</p>  <h2>API methods</h2>
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.JournalResponse;
import org.openapitools.client.model.JournalSearchResponse;
import org.openapitools.client.model.SearchRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JournalsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JournalsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JournalsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getJournalByIssn
     * @param issn ISSN identifier of journal that needs to be fetched. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ISSN identifier supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJournalByIssnCall(String issn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/journals/get/{issn}"
            .replace("{" + "issn" + "}", localVarApiClient.escapeString(issn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJournalByIssnValidateBeforeCall(String issn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issn' is set
        if (issn == null) {
            throw new ApiException("Missing the required parameter 'issn' when calling getJournalByIssn(Async)");
        }

        return getJournalByIssnCall(issn, _callback);

    }

    /**
     * Find journal by ISSN
     * Returns a journal with given ISSN identifier.
     * @param issn ISSN identifier of journal that needs to be fetched. (required)
     * @return JournalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ISSN identifier supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
     </table>
     */
    public JournalResponse getJournalByIssn(String issn) throws ApiException {
        ApiResponse<JournalResponse> localVarResp = getJournalByIssnWithHttpInfo(issn);
        return localVarResp.getData();
    }

    /**
     * Find journal by ISSN
     * Returns a journal with given ISSN identifier.
     * @param issn ISSN identifier of journal that needs to be fetched. (required)
     * @return ApiResponse&lt;JournalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ISSN identifier supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JournalResponse> getJournalByIssnWithHttpInfo(String issn) throws ApiException {
        okhttp3.Call localVarCall = getJournalByIssnValidateBeforeCall(issn, null);
        Type localVarReturnType = new TypeToken<JournalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find journal by ISSN (asynchronously)
     * Returns a journal with given ISSN identifier.
     * @param issn ISSN identifier of journal that needs to be fetched. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ISSN identifier supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJournalByIssnAsync(String issn, final ApiCallback<JournalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJournalByIssnValidateBeforeCall(issn, _callback);
        Type localVarReturnType = new TypeToken<JournalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJournalByIssnBatch
     * @param body JSON array with ISSNs of journals that need to be fetched (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJournalByIssnBatchCall(List<String> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/journals/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJournalByIssnBatchValidateBeforeCall(List<String> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getJournalByIssnBatch(Async)");
        }

        return getJournalByIssnBatchCall(body, _callback);

    }

    /**
     * Batch operation for retrieving journals by ISSN
     * Method accepts a JSON array of ISSNs and retrieves a list of journals.
     * @param body JSON array with ISSNs of journals that need to be fetched (required)
     * @return List&lt;JournalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
     </table>
     */
    public List<JournalResponse> getJournalByIssnBatch(List<String> body) throws ApiException {
        ApiResponse<List<JournalResponse>> localVarResp = getJournalByIssnBatchWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Batch operation for retrieving journals by ISSN
     * Method accepts a JSON array of ISSNs and retrieves a list of journals.
     * @param body JSON array with ISSNs of journals that need to be fetched (required)
     * @return ApiResponse&lt;List&lt;JournalResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JournalResponse>> getJournalByIssnBatchWithHttpInfo(List<String> body) throws ApiException {
        okhttp3.Call localVarCall = getJournalByIssnBatchValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<List<JournalResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch operation for retrieving journals by ISSN (asynchronously)
     * Method accepts a JSON array of ISSNs and retrieves a list of journals.
     * @param body JSON array with ISSNs of journals that need to be fetched (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJournalByIssnBatchAsync(List<String> body, final ApiCallback<List<JournalResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJournalByIssnBatchValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<List<JournalResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for journalsSearchPost
     * @param body JSON array with search queries and parameters. One request can contain up to 100 queries. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call journalsSearchPostCall(List<SearchRequest> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/journals/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call journalsSearchPostValidateBeforeCall(List<SearchRequest> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling journalsSearchPost(Async)");
        }

        return journalsSearchPostCall(body, _callback);

    }

    /**
     * Batch operation for search through journals
     * Method accepts a JSON array of search queries and parameters. It then searches through all journals and returns a JSON array of search results for each of the queries. Method searches through all journal fields (title, identifiers, subjects, language, rights and publisher).
     * @param body JSON array with search queries and parameters. One request can contain up to 100 queries. (required)
     * @return List&lt;JournalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
     </table>
     */
    public List<JournalResponse> journalsSearchPost(List<SearchRequest> body) throws ApiException {
        ApiResponse<List<JournalResponse>> localVarResp = journalsSearchPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Batch operation for search through journals
     * Method accepts a JSON array of search queries and parameters. It then searches through all journals and returns a JSON array of search results for each of the queries. Method searches through all journal fields (title, identifiers, subjects, language, rights and publisher).
     * @param body JSON array with search queries and parameters. One request can contain up to 100 queries. (required)
     * @return ApiResponse&lt;List&lt;JournalResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JournalResponse>> journalsSearchPostWithHttpInfo(List<SearchRequest> body) throws ApiException {
        okhttp3.Call localVarCall = journalsSearchPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<List<JournalResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch operation for search through journals (asynchronously)
     * Method accepts a JSON array of search queries and parameters. It then searches through all journals and returns a JSON array of search results for each of the queries. Method searches through all journal fields (title, identifiers, subjects, language, rights and publisher).
     * @param body JSON array with search queries and parameters. One request can contain up to 100 queries. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or malformed JSON in request body </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Too many queries in request body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call journalsSearchPostAsync(List<SearchRequest> body, final ApiCallback<List<JournalResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = journalsSearchPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<List<JournalResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for journalsSearchQueryGet
     * @param query Search query (required)
     * @param page Which page of the search results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page). (optional, default to 1)
     * @param pageSize The number of results to return per page. Can be any number between 10 and 100, default is 10. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter invalid or out of bounds </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call journalsSearchQueryGetCall(String query, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/journals/search/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call journalsSearchQueryGetValidateBeforeCall(String query, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling journalsSearchQueryGet(Async)");
        }

        return journalsSearchQueryGetCall(query, page, pageSize, _callback);

    }

    /**
     * Search through journals
     * Searches through all journals and returns a JSON array of search results. Method searches through all journal fields (title, identifiers, subjects, language, rights and publisher).
     * @param query Search query (required)
     * @param page Which page of the search results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page). (optional, default to 1)
     * @param pageSize The number of results to return per page. Can be any number between 10 and 100, default is 10. (optional, default to 10)
     * @return JournalSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter invalid or out of bounds </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
     </table>
     */
    public JournalSearchResponse journalsSearchQueryGet(String query, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<JournalSearchResponse> localVarResp = journalsSearchQueryGetWithHttpInfo(query, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Search through journals
     * Searches through all journals and returns a JSON array of search results. Method searches through all journal fields (title, identifiers, subjects, language, rights and publisher).
     * @param query Search query (required)
     * @param page Which page of the search results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page). (optional, default to 1)
     * @param pageSize The number of results to return per page. Can be any number between 10 and 100, default is 10. (optional, default to 10)
     * @return ApiResponse&lt;JournalSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter invalid or out of bounds </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JournalSearchResponse> journalsSearchQueryGetWithHttpInfo(String query, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = journalsSearchQueryGetValidateBeforeCall(query, page, pageSize, null);
        Type localVarReturnType = new TypeToken<JournalSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search through journals (asynchronously)
     * Searches through all journals and returns a JSON array of search results. Method searches through all journal fields (title, identifiers, subjects, language, rights and publisher).
     * @param query Search query (required)
     * @param page Which page of the search results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page). (optional, default to 1)
     * @param pageSize The number of results to return per page. Can be any number between 10 and 100, default is 10. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter invalid or out of bounds </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or no API key provided </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call journalsSearchQueryGetAsync(String query, Integer page, Integer pageSize, final ApiCallback<JournalSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = journalsSearchQueryGetValidateBeforeCall(query, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JournalSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
