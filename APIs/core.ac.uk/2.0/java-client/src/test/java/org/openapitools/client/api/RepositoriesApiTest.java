/*
 * CORE API v2
 * <p style=\"text-align: justify;\">You can use the CORE API to access the      resources harvested and enriched by CORE. If you encounter any problems with the API, please <a href=\"/contact\">report them to us</a>.</p>  <h2>Overview</h2> <p style=\"text-align: justify;\">The API is organised by resource type. The resources are <b>articles</b>,      <b>journals</b> and <b>repositories</b> and are represented using JSON data format. Furthermore,      each resource has a list of methods. The API also provides two global methods for accessing all resources at once.</p>  <h2>Response format</h2> <p style=\"text-align: justify;\">Response for each query contains two fields: <b>status</b> and <b>data</b>.     In case of an error status, the data field is empty. The data field contains a single object     in case the request is for a specific identifier (e.g. CORE ID, CORE repository ID, etc.), or       contains a list of objects, for example for search queries. In case of batch requests, the response     is an array of objects, each of which contains its own <b>status</b> and <b>data</b> fields.     For search queries the response contains an additional field <b>totalHits</b>, which is the      total number of items which match the search criteria.</p>  <h2>Search query syntax</h2>  <p style=\"text-align: justify\">Complex search queries can be used in all of the API search methods.     The query can be a simple string or it can be built using terms and operators described in Elasticsearch     <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-query-string-query.html#query-string-syntax\">documentation</a>.     The usable field names are <strong>title</strong>, <strong>description</strong>, <strong>fullText</strong>,      <strong>authors</strong>, <strong>publisher</strong>, <strong>repositories.id</strong>, <strong>repositories.name</strong>,      <strong>doi</strong>, <strong>oai</strong>, <strong>identifiers</strong> (which is a list of article identifiers including OAI, URL, etc.), <strong>language.name</strong>      and <strong>year</strong>. Some example queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>title:psychology and language.name:English</p></li>     <li><p>repositories.id:86 AND year:2014</p></li>     <li><p>identifiers:\"oai:aura.abdn.ac.uk:2164/3837\" OR identifiers:\"oai:aura.abdn.ac.uk:2164/3843\"</p></li>     <li><p>doi:\"10.1186/1471-2458-6-309\"</p></li> </ul>  <h3>Retrieving the latest Articles</h3> <p style=\"text-align: justify\">     You can retrieve the harvested items since specific dates using the following queries: </p>  <ul style=\"margin-left: 30px;\">     <li><p>repositoryDocument.metadataUpdated:>2017-02-10</p></li>     <li><p>repositoryDocument.metadataUpdated:>2017-03-01 AND repositoryDocument.metadataUpdated:<2017-03-31</p></li>     </ul>  <h2>Sort order</h2>  <p style=\"text-align: justify;\">For search queries, the results are ordered by relevance score. For batch      requests, the results are retrieved in the order of the requests.</p>  <h2>Parameters</h2> <p style=\"text-align: justify;\">The API methods allow different parameters to be passed. Additionally, there is an API key parameter which is common to all API methods. For all API methods      the API key can be provided either as a query parameter or in the request header. If the API key      is not provided, the API will return HTTP 401 error. You can register for an API key <a href=\"/services#api\">here</a>.</p>  <h2>API methods</h2>
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RepositoryResponse;
import org.openapitools.client.model.RepositorySearchResponse;
import org.openapitools.client.model.SearchRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RepositoriesApi
 */
@Disabled
public class RepositoriesApiTest {

    private final RepositoriesApi api = new RepositoriesApi();

    /**
     * Get repository by CORE repository ID
     *
     * Method will retrieve a repository based on given CORE repository ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryByIdTest() throws ApiException {
        Integer repositoryId = null;
        Boolean stats = null;
        Boolean depositHistory = null;
        Boolean depositHistoryCumulative = null;
        RepositoryResponse response = api.getRepositoryById(repositoryId, stats, depositHistory, depositHistoryCumulative);
        // TODO: test validations
    }

    /**
     * Batch operation for retrieving repositories by CORE repository ID
     *
     * Method accepts a JSON array of CORE repository IDs and retrieves a list of repositories. The response array is ordered based on the order of the IDs in the request array. The maximum number of IDs in request is 100.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryByIdBatchTest() throws ApiException {
        List<Integer> body = null;
        Boolean stats = null;
        Boolean depositHistory = null;
        Boolean depositHistoryCumulative = null;
        List<RepositoryResponse> response = api.getRepositoryByIdBatch(body, stats, depositHistory, depositHistoryCumulative);
        // TODO: test validations
    }

    /**
     * Batch operation for searching through repositories
     *
     * Method accepts a JSON array of search queries and parameters. It then searches through all repositories and returns a JSON array of search results for each of the queries. Method searches through all repository fields.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesSearchPostTest() throws ApiException {
        List<SearchRequest> body = null;
        Boolean stats = null;
        Boolean depositHistory = null;
        Boolean depositHistoryCumulative = null;
        RepositorySearchResponse response = api.repositoriesSearchPost(body, stats, depositHistory, depositHistoryCumulative);
        // TODO: test validations
    }

    /**
     * Search through all repositories
     *
     * Searches through all repositories and returns a JSON array with search results. Method searches through all repository fields.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesSearchQueryGetTest() throws ApiException {
        String query = null;
        Integer page = null;
        Integer pageSize = null;
        Boolean stats = null;
        Boolean depositHistory = null;
        Boolean depositHistoryCumulative = null;
        RepositorySearchResponse response = api.repositoriesSearchQueryGet(query, page, pageSize, stats, depositHistory, depositHistoryCumulative);
        // TODO: test validations
    }

}
