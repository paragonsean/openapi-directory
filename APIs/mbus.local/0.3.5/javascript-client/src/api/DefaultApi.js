/**
 * M-Bus HTTPD API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Baudrate from '../model/Baudrate';
import Hat from '../model/Hat';

/**
* Default service.
* @module api/DefaultApi
* @version 0.3.5
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/DefaultApi~getCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets data from the slave identified by {address}
     * @param {String} device The serial device to scan - /dev/ is pre-pended to {device} by M-Bus HTTPD before scanning
     * @param {module:model/Baudrate} baudrate Baudrate to communicate with M-Bus devices
     * @param {String} address The slave device to get data from
     * @param {module:api/DefaultApi~getCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    get(device, baudrate, address, callback) {
      let postBody = null;
      // verify the required parameter 'device' is set
      if (device === undefined || device === null) {
        throw new Error("Missing the required parameter 'device' when calling get");
      }
      // verify the required parameter 'baudrate' is set
      if (baudrate === undefined || baudrate === null) {
        throw new Error("Missing the required parameter 'baudrate' when calling get");
      }
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling get");
      }

      let pathParams = {
        'device': device,
        'baudrate': baudrate,
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mbus/get/{device}/{baudrate}/{address}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMulti operation.
     * @callback module:api/DefaultApi~getMultiCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets data from the slave identified by {address}, and supports multiple responses from the slave
     * @param {String} device The serial device to scan - /dev/ is pre-pended to {device} by M-Bus HTTPD before scanning
     * @param {module:model/Baudrate} baudrate Baudrate to communicate with M-Bus devices
     * @param {String} address The slave device to get data from
     * @param {Number} maxframes The slave device to get data from
     * @param {module:api/DefaultApi~getMultiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getMulti(device, baudrate, address, maxframes, callback) {
      let postBody = null;
      // verify the required parameter 'device' is set
      if (device === undefined || device === null) {
        throw new Error("Missing the required parameter 'device' when calling getMulti");
      }
      // verify the required parameter 'baudrate' is set
      if (baudrate === undefined || baudrate === null) {
        throw new Error("Missing the required parameter 'baudrate' when calling getMulti");
      }
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getMulti");
      }
      // verify the required parameter 'maxframes' is set
      if (maxframes === undefined || maxframes === null) {
        throw new Error("Missing the required parameter 'maxframes' when calling getMulti");
      }

      let pathParams = {
        'device': device,
        'baudrate': baudrate,
        'address': address,
        'maxframes': maxframes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mbus/getMulti/{device}/{baudrate}/{address}/{maxframes}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hat operation.
     * @callback module:api/DefaultApi~hatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets Raspberry Pi Hat information
     * @param {module:api/DefaultApi~hatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hat}
     */
    hat(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = Hat;
      return this.apiClient.callApi(
        '/mbus/hat', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hatOff operation.
     * @callback module:api/DefaultApi~hatOffCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Turns off power to the M-Bus
     * @param {module:api/DefaultApi~hatOffCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hatOff(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/mbus/hat/off', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hatOn operation.
     * @callback module:api/DefaultApi~hatOnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Turns on power to the M-Bus
     * @param {module:api/DefaultApi~hatOnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hatOn(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/mbus/hat/on', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mbusApi operation.
     * @callback module:api/DefaultApi~mbusApiCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns this API specification
     * @param {module:api/DefaultApi~mbusApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    mbusApi(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/x-yaml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mbus/api', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scan operation.
     * @callback module:api/DefaultApi~scanCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scan the specified device for slaves
     * @param {String} device The serial device to scan - /dev/ is pre-pended to {device} by M-Bus HTTPD before scanning
     * @param {module:model/Baudrate} baudrate Baudrate to communicate with M-Bus devices
     * @param {module:api/DefaultApi~scanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    scan(device, baudrate, callback) {
      let postBody = null;
      // verify the required parameter 'device' is set
      if (device === undefined || device === null) {
        throw new Error("Missing the required parameter 'device' when calling scan");
      }
      // verify the required parameter 'baudrate' is set
      if (baudrate === undefined || baudrate === null) {
        throw new Error("Missing the required parameter 'baudrate' when calling scan");
      }

      let pathParams = {
        'device': device,
        'baudrate': baudrate
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mbus/scan/{device}/{baudrate}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
