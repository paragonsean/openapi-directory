/**
 * M-Bus HTTPD API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Hat model module.
 * @module model/Hat
 * @version 0.3.5
 */
class Hat {
    /**
     * Constructs a new <code>Hat</code>.
     * Raspberry Pi Hat Information
     * @alias module:model/Hat
     */
    constructor() { 
        
        Hat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Hat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Hat} obj Optional instance to populate.
     * @return {module:model/Hat} The populated <code>Hat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Hat();

            if (data.hasOwnProperty('product')) {
                obj['product'] = ApiClient.convertToType(data['product'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('productVer')) {
                obj['productVer'] = ApiClient.convertToType(data['productVer'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('vendor')) {
                obj['vendor'] = ApiClient.convertToType(data['vendor'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Hat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Hat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['product'] && !(typeof data['product'] === 'string' || data['product'] instanceof String)) {
            throw new Error("Expected the field `product` to be a primitive type in the JSON string but got " + data['product']);
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }
        // ensure the json data is a string
        if (data['productVer'] && !(typeof data['productVer'] === 'string' || data['productVer'] instanceof String)) {
            throw new Error("Expected the field `productVer` to be a primitive type in the JSON string but got " + data['productVer']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['vendor'] && !(typeof data['vendor'] === 'string' || data['vendor'] instanceof String)) {
            throw new Error("Expected the field `vendor` to be a primitive type in the JSON string but got " + data['vendor']);
        }

        return true;
    }


}



/**
 * Product
 * @member {String} product
 */
Hat.prototype['product'] = undefined;

/**
 * Product ID
 * @member {String} productId
 */
Hat.prototype['productId'] = undefined;

/**
 * Product Version
 * @member {String} productVer
 */
Hat.prototype['productVer'] = undefined;

/**
 * Hat UUID
 * @member {String} uuid
 */
Hat.prototype['uuid'] = undefined;

/**
 * Hat Vendor
 * @member {String} vendor
 */
Hat.prototype['vendor'] = undefined;






export default Hat;

