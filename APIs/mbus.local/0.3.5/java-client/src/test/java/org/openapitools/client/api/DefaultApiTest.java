/*
 * M-Bus HTTPD API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Baudrate;
import org.openapitools.client.model.Hat;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Gets data from the slave identified by {address}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        String device = null;
        Baudrate baudrate = null;
        String address = null;
        String response = api.get(device, baudrate, address);
        // TODO: test validations
    }

    /**
     * Gets data from the slave identified by {address}, and supports multiple responses from the slave
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMultiTest() throws ApiException {
        String device = null;
        Baudrate baudrate = null;
        String address = null;
        Integer maxframes = null;
        String response = api.getMulti(device, baudrate, address, maxframes);
        // TODO: test validations
    }

    /**
     * Gets Raspberry Pi Hat information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hatTest() throws ApiException {
        Hat response = api.hat();
        // TODO: test validations
    }

    /**
     * Turns off power to the M-Bus
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hatOffTest() throws ApiException {
        api.hatOff();
        // TODO: test validations
    }

    /**
     * Turns on power to the M-Bus
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hatOnTest() throws ApiException {
        api.hatOn();
        // TODO: test validations
    }

    /**
     * Returns this API specification
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mbusApiTest() throws ApiException {
        String response = api.mbusApi();
        // TODO: test validations
    }

    /**
     * Scan the specified device for slaves
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scanTest() throws ApiException {
        String device = null;
        Baudrate baudrate = null;
        String response = api.scan(device, baudrate);
        // TODO: test validations
    }

}
