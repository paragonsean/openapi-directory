# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Hat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product: str=None, product_id: str=None, product_ver: str=None, uuid: str=None, vendor: str=None):
        """Hat - a model defined in OpenAPI

        :param product: The product of this Hat.
        :param product_id: The product_id of this Hat.
        :param product_ver: The product_ver of this Hat.
        :param uuid: The uuid of this Hat.
        :param vendor: The vendor of this Hat.
        """
        self.openapi_types = {
            'product': str,
            'product_id': str,
            'product_ver': str,
            'uuid': str,
            'vendor': str
        }

        self.attribute_map = {
            'product': 'product',
            'product_id': 'productId',
            'product_ver': 'productVer',
            'uuid': 'uuid',
            'vendor': 'vendor'
        }

        self._product = product
        self._product_id = product_id
        self._product_ver = product_ver
        self._uuid = uuid
        self._vendor = vendor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Hat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The hat of this Hat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product(self):
        """Gets the product of this Hat.

        Product

        :return: The product of this Hat.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Hat.

        Product

        :param product: The product of this Hat.
        :type product: str
        """

        self._product = product

    @property
    def product_id(self):
        """Gets the product_id of this Hat.

        Product ID

        :return: The product_id of this Hat.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Hat.

        Product ID

        :param product_id: The product_id of this Hat.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def product_ver(self):
        """Gets the product_ver of this Hat.

        Product Version

        :return: The product_ver of this Hat.
        :rtype: str
        """
        return self._product_ver

    @product_ver.setter
    def product_ver(self, product_ver):
        """Sets the product_ver of this Hat.

        Product Version

        :param product_ver: The product_ver of this Hat.
        :type product_ver: str
        """

        self._product_ver = product_ver

    @property
    def uuid(self):
        """Gets the uuid of this Hat.

        Hat UUID

        :return: The uuid of this Hat.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Hat.

        Hat UUID

        :param uuid: The uuid of this Hat.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def vendor(self):
        """Gets the vendor of this Hat.

        Hat Vendor

        :return: The vendor of this Hat.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this Hat.

        Hat Vendor

        :param vendor: The vendor of this Hat.
        :type vendor: str
        """

        self._vendor = vendor
