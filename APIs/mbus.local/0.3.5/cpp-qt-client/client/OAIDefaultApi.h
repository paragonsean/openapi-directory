/**
 * M-Bus HTTPD API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.3.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBaudrate.h"
#include "OAIHat.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device QString [required]
    * @param[in]  baudrate OAIBaudrate [required]
    * @param[in]  address QString [required]
    */
    virtual void get(const QString &device, const OAIBaudrate &baudrate, const QString &address);

    /**
    * @param[in]  device QString [required]
    * @param[in]  baudrate OAIBaudrate [required]
    * @param[in]  address QString [required]
    * @param[in]  maxframes qint32 [required]
    */
    virtual void getMulti(const QString &device, const OAIBaudrate &baudrate, const QString &address, const qint32 &maxframes);


    virtual void hat();


    virtual void hatOff();


    virtual void hatOn();


    virtual void mbusApi();

    /**
    * @param[in]  device QString [required]
    * @param[in]  baudrate OAIBaudrate [required]
    */
    virtual void scan(const QString &device, const OAIBaudrate &baudrate);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCallback(OAIHttpRequestWorker *worker);
    void getMultiCallback(OAIHttpRequestWorker *worker);
    void hatCallback(OAIHttpRequestWorker *worker);
    void hatOffCallback(OAIHttpRequestWorker *worker);
    void hatOnCallback(OAIHttpRequestWorker *worker);
    void mbusApiCallback(OAIHttpRequestWorker *worker);
    void scanCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getSignal(QString summary);
    void getMultiSignal(QString summary);
    void hatSignal(OAIHat summary);
    void hatOffSignal();
    void hatOnSignal();
    void mbusApiSignal(QString summary);
    void scanSignal(QString summary);


    void getSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getMultiSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void hatSignalFull(OAIHttpRequestWorker *worker, OAIHat summary);
    void hatOffSignalFull(OAIHttpRequestWorker *worker);
    void hatOnSignalFull(OAIHttpRequestWorker *worker);
    void mbusApiSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void scanSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use getSignalError() instead")
    void getSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiSignalError() instead")
    void getMultiSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hatSignalError() instead")
    void hatSignalE(OAIHat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hatSignalError(OAIHat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hatOffSignalError() instead")
    void hatOffSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hatOffSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hatOnSignalError() instead")
    void hatOnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hatOnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mbusApiSignalError() instead")
    void mbusApiSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mbusApiSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scanSignalError() instead")
    void scanSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scanSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getSignalErrorFull() instead")
    void getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiSignalErrorFull() instead")
    void getMultiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hatSignalErrorFull() instead")
    void hatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hatOffSignalErrorFull() instead")
    void hatOffSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hatOffSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hatOnSignalErrorFull() instead")
    void hatOnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hatOnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mbusApiSignalErrorFull() instead")
    void mbusApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mbusApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scanSignalErrorFull() instead")
    void scanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
