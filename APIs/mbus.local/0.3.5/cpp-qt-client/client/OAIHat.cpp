/**
 * M-Bus HTTPD API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.3.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHat::OAIHat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHat::OAIHat() {
    this->initializeModel();
}

OAIHat::~OAIHat() {}

void OAIHat::initializeModel() {

    m_product_isSet = false;
    m_product_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_ver_isSet = false;
    m_product_ver_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;
}

void OAIHat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHat::fromJsonObject(QJsonObject json) {

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_product_ver_isValid = ::OpenAPI::fromJsonValue(m_product_ver, json[QString("productVer")]);
    m_product_ver_isSet = !json[QString("productVer")].isNull() && m_product_ver_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;
}

QString OAIHat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHat::asJsonObject() const {
    QJsonObject obj;
    if (m_product_isSet) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_ver_isSet) {
        obj.insert(QString("productVer"), ::OpenAPI::toJsonValue(m_product_ver));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    if (m_vendor_isSet) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    return obj;
}

QString OAIHat::getProduct() const {
    return m_product;
}
void OAIHat::setProduct(const QString &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIHat::is_product_Set() const{
    return m_product_isSet;
}

bool OAIHat::is_product_Valid() const{
    return m_product_isValid;
}

QString OAIHat::getProductId() const {
    return m_product_id;
}
void OAIHat::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIHat::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIHat::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIHat::getProductVer() const {
    return m_product_ver;
}
void OAIHat::setProductVer(const QString &product_ver) {
    m_product_ver = product_ver;
    m_product_ver_isSet = true;
}

bool OAIHat::is_product_ver_Set() const{
    return m_product_ver_isSet;
}

bool OAIHat::is_product_ver_Valid() const{
    return m_product_ver_isValid;
}

QString OAIHat::getUuid() const {
    return m_uuid;
}
void OAIHat::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIHat::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIHat::is_uuid_Valid() const{
    return m_uuid_isValid;
}

QString OAIHat::getVendor() const {
    return m_vendor;
}
void OAIHat::setVendor(const QString &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAIHat::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAIHat::is_vendor_Valid() const{
    return m_vendor_isValid;
}

bool OAIHat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_ver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
