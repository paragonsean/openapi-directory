/**
 * Business Registries
 * # Introduction The Business Registries API is built on HTTP. The API is RESTful. It has predictable resource URIs.    The API is documented in <a target=\"_blank\" href=\"https://github.com/OAI/OpenAPI-Specification\">OpenAPI</a> format.   In addition to the standard OpenAPI syntax we use a few   <a target=\"_blank\" href=\"https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md\">vendor extensions</a>.  # Overview The following sections describe the resources that make up the Business Registries REST API. ## Current Version By default, all requests to https://api.abr.ato.gov.au receive the `v1` version of the REST API. We encourage you to explicitly request this version via the `Accept` header.      Accept: application/vnd.abr-ato.v1+json  ## Schema All API access is over HTTPS, and accessed from https://api.abr.ato.gov.au. All data is sent and received as JSON. Blank fields are included.    All dates use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DD    For example: `2017-07-01` (the 1st of July 2017)    All timestamps use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DDTHH:MM:SSZ    For example: `2017-07-01T11:05:06+10:00`  ## Timezones Some requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls. ### Explicitly provide an ISO 8601 timestamp with timezone information For API calls that allow for a timestamp to be specified, we use that exact timestamp.    For example: `2017-07-01T11:05:06+10:00`  ## Pagination Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header.    For example:      Link: <https://api.abr.ato.gov.au/individuals?page=2>; rel=\"next\",           <https://api.abr.ato.gov.au/individuals?page=34>; rel=\"last\"  `rel=\"next\"` states that the next page is `page=2`. This makes sense, since by default, all paginated queries start at page `1`. `rel=\"last\"` provides some more information, stating that the last page of results is on `page 34`. Accordingly, we have 33 more pages of information that we can consume. ## Parameters Many API methods take optional parameters:      GET /individuals/1234/addresses/?addressType='Mailing'  In this example, the '1234' value is provided for the `:partyId` parameter in the path while `:addressType` is passed in the query string. For POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded as JSON with a Content-Type of 'application/json'. ## Metadata The API provides **metadata services** that you can use to discover information about the classifcation schemes and values used by the Registry.    For example:      GET /classifications/roles    Sample response:      [       {         \"id\": \"123e4567-e89b-12d3-a456-426655440001\",         \"role\": \"Director\",         \"roleDescription\": \"An individual responsible for managing a company's ...\",         \"relationship\": \"Directorship\",         \"reciprocalRole\": \"Company\",         \"reciprocalRoleDescription\": \"An incorporated legal entity.\"       },       {         ...       }     ]  ## Root Endpoint You can issue a GET request to the root endpoint (also known as the service root) to get all the endpoint categories that the REST API supports:      curl https://api.abr.ato.gov.au  ## Authentication The Business Registries API supports API Key authentication.    When you sign up for an account, you are given your first API key. You can generate additional API keys, and delete   API keys (as you may need to rotate your keys in the future). You authenticate to the Business Registries API by   providing your secret key in the request header.    **Note:** Some requests will return `404 Not Found`, instead of `403 Permission Denied`. This is to prevent the   accidental leakage of information to unauthorised users. 
 *
 * The version of the OpenAPI document: 0.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Address from './model/Address';
import AddressId from './model/AddressId';
import AddressType from './model/AddressType';
import BusinessName from './model/BusinessName';
import BusinessNameLifecycleState from './model/BusinessNameLifecycleState';
import ElectronicAddress from './model/ElectronicAddress';
import ElectronicAddressType from './model/ElectronicAddressType';
import ErrorDetails from './model/ErrorDetails';
import FailedPrecondition from './model/FailedPrecondition';
import Gender from './model/Gender';
import Individual from './model/Individual';
import IndividualAddress from './model/IndividualAddress';
import IndividualName from './model/IndividualName';
import InvalidArgument from './model/InvalidArgument';
import LegalEntityType from './model/LegalEntityType';
import License from './model/License';
import LicenseLifecycleState from './model/LicenseLifecycleState';
import LicenseType from './model/LicenseType';
import NameDirection from './model/NameDirection';
import NamePrefix from './model/NamePrefix';
import NameType from './model/NameType';
import NotFound from './model/NotFound';
import Organisation from './model/Organisation';
import OrganisationAddress from './model/OrganisationAddress';
import OrganisationName from './model/OrganisationName';
import PartyId from './model/PartyId';
import PartyRole from './model/PartyRole';
import PermissionDenied from './model/PermissionDenied';
import RegisteredIdentifier from './model/RegisteredIdentifier';
import RegisteredIdentifierType from './model/RegisteredIdentifierType';
import Role from './model/Role';
import RoleId from './model/RoleId';
import Type from './model/Type';
import Unauthenticated from './model/Unauthenticated';
import AddressTypesApi from './api/AddressTypesApi';
import BusinessNameLifecycleStatesApi from './api/BusinessNameLifecycleStatesApi';
import BusinessNamesApi from './api/BusinessNamesApi';
import ElectronicAddressTypesApi from './api/ElectronicAddressTypesApi';
import GendersApi from './api/GendersApi';
import IndividualsApi from './api/IndividualsApi';
import IndividualsAddressesApi from './api/IndividualsAddressesApi';
import IndividualsBusinessNamesApi from './api/IndividualsBusinessNamesApi';
import IndividualsElectronicAddressesApi from './api/IndividualsElectronicAddressesApi';
import IndividualsLicensesApi from './api/IndividualsLicensesApi';
import IndividualsRolesApi from './api/IndividualsRolesApi';
import LegalEntityTypesApi from './api/LegalEntityTypesApi';
import LicenseLifecycleStatesApi from './api/LicenseLifecycleStatesApi';
import LicenseTypesApi from './api/LicenseTypesApi';
import LicensesApi from './api/LicensesApi';
import NameDirectionsApi from './api/NameDirectionsApi';
import NamePrefixesApi from './api/NamePrefixesApi';
import NameTypesApi from './api/NameTypesApi';
import OrganisationsApi from './api/OrganisationsApi';
import OrganisationsAddressesApi from './api/OrganisationsAddressesApi';
import OrganisationsBusinessNamesApi from './api/OrganisationsBusinessNamesApi';
import OrganisationsElectronicAddressesApi from './api/OrganisationsElectronicAddressesApi';
import OrganisationsLicensesApi from './api/OrganisationsLicensesApi';
import OrganisationsRolesApi from './api/OrganisationsRolesApi';
import RegisteredIdentifierTypesApi from './api/RegisteredIdentifierTypesApi';
import RolesApi from './api/RolesApi';


/**
* # Introduction The Business Registries API is built on HTTP. The API is RESTful. It has predictable resource URIs.    The API is documented in &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://github.com/OAI/OpenAPI-Specification\&quot;&gt;OpenAPI&lt;/a&gt; format.   In addition to the standard OpenAPI syntax we use a few   &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md\&quot;&gt;vendor extensions&lt;/a&gt;.  # Overview The following sections describe the resources that make up the Business Registries REST API. ## Current Version By default, all requests to https://api.abr.ato.gov.au receive the &#x60;v1&#x60; version of the REST API. We encourage you to explicitly request this version via the &#x60;Accept&#x60; header.      Accept: application/vnd.abr-ato.v1+json  ## Schema All API access is over HTTPS, and accessed from https://api.abr.ato.gov.au. All data is sent and received as JSON. Blank fields are included.    All dates use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DD    For example: &#x60;2017-07-01&#x60; (the 1st of July 2017)    All timestamps use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DDTHH:MM:SSZ    For example: &#x60;2017-07-01T11:05:06+10:00&#x60;  ## Timezones Some requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls. ### Explicitly provide an ISO 8601 timestamp with timezone information For API calls that allow for a timestamp to be specified, we use that exact timestamp.    For example: &#x60;2017-07-01T11:05:06+10:00&#x60;  ## Pagination Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header.    For example:      Link: &lt;https://api.abr.ato.gov.au/individuals?page&#x3D;2&gt;; rel&#x3D;\&quot;next\&quot;,           &lt;https://api.abr.ato.gov.au/individuals?page&#x3D;34&gt;; rel&#x3D;\&quot;last\&quot;  &#x60;rel&#x3D;\&quot;next\&quot;&#x60; states that the next page is &#x60;page&#x3D;2&#x60;. This makes sense, since by default, all paginated queries start at page &#x60;1&#x60;. &#x60;rel&#x3D;\&quot;last\&quot;&#x60; provides some more information, stating that the last page of results is on &#x60;page 34&#x60;. Accordingly, we have 33 more pages of information that we can consume. ## Parameters Many API methods take optional parameters:      GET /individuals/1234/addresses/?addressType&#x3D;&#39;Mailing&#39;  In this example, the &#39;1234&#39; value is provided for the &#x60;:partyId&#x60; parameter in the path while &#x60;:addressType&#x60; is passed in the query string. For POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded as JSON with a Content-Type of &#39;application/json&#39;. ## Metadata The API provides **metadata services** that you can use to discover information about the classifcation schemes and values used by the Registry.    For example:      GET /classifications/roles    Sample response:      [       {         \&quot;id\&quot;: \&quot;123e4567-e89b-12d3-a456-426655440001\&quot;,         \&quot;role\&quot;: \&quot;Director\&quot;,         \&quot;roleDescription\&quot;: \&quot;An individual responsible for managing a company&#39;s ...\&quot;,         \&quot;relationship\&quot;: \&quot;Directorship\&quot;,         \&quot;reciprocalRole\&quot;: \&quot;Company\&quot;,         \&quot;reciprocalRoleDescription\&quot;: \&quot;An incorporated legal entity.\&quot;       },       {         ...       }     ]  ## Root Endpoint You can issue a GET request to the root endpoint (also known as the service root) to get all the endpoint categories that the REST API supports:      curl https://api.abr.ato.gov.au  ## Authentication The Business Registries API supports API Key authentication.    When you sign up for an account, you are given your first API key. You can generate additional API keys, and delete   API keys (as you may need to rotate your keys in the future). You authenticate to the Business Registries API by   providing your secret key in the request header.    **Note:** Some requests will return &#x60;404 Not Found&#x60;, instead of &#x60;403 Permission Denied&#x60;. This is to prevent the   accidental leakage of information to unauthorised users. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var BusinessRegistries = require('index'); // See note below*.
* var xxxSvc = new BusinessRegistries.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new BusinessRegistries.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new BusinessRegistries.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new BusinessRegistries.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.0.6
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Address model constructor.
     * @property {module:model/Address}
     */
    Address,

    /**
     * The AddressId model constructor.
     * @property {module:model/AddressId}
     */
    AddressId,

    /**
     * The AddressType model constructor.
     * @property {module:model/AddressType}
     */
    AddressType,

    /**
     * The BusinessName model constructor.
     * @property {module:model/BusinessName}
     */
    BusinessName,

    /**
     * The BusinessNameLifecycleState model constructor.
     * @property {module:model/BusinessNameLifecycleState}
     */
    BusinessNameLifecycleState,

    /**
     * The ElectronicAddress model constructor.
     * @property {module:model/ElectronicAddress}
     */
    ElectronicAddress,

    /**
     * The ElectronicAddressType model constructor.
     * @property {module:model/ElectronicAddressType}
     */
    ElectronicAddressType,

    /**
     * The ErrorDetails model constructor.
     * @property {module:model/ErrorDetails}
     */
    ErrorDetails,

    /**
     * The FailedPrecondition model constructor.
     * @property {module:model/FailedPrecondition}
     */
    FailedPrecondition,

    /**
     * The Gender model constructor.
     * @property {module:model/Gender}
     */
    Gender,

    /**
     * The Individual model constructor.
     * @property {module:model/Individual}
     */
    Individual,

    /**
     * The IndividualAddress model constructor.
     * @property {module:model/IndividualAddress}
     */
    IndividualAddress,

    /**
     * The IndividualName model constructor.
     * @property {module:model/IndividualName}
     */
    IndividualName,

    /**
     * The InvalidArgument model constructor.
     * @property {module:model/InvalidArgument}
     */
    InvalidArgument,

    /**
     * The LegalEntityType model constructor.
     * @property {module:model/LegalEntityType}
     */
    LegalEntityType,

    /**
     * The License model constructor.
     * @property {module:model/License}
     */
    License,

    /**
     * The LicenseLifecycleState model constructor.
     * @property {module:model/LicenseLifecycleState}
     */
    LicenseLifecycleState,

    /**
     * The LicenseType model constructor.
     * @property {module:model/LicenseType}
     */
    LicenseType,

    /**
     * The NameDirection model constructor.
     * @property {module:model/NameDirection}
     */
    NameDirection,

    /**
     * The NamePrefix model constructor.
     * @property {module:model/NamePrefix}
     */
    NamePrefix,

    /**
     * The NameType model constructor.
     * @property {module:model/NameType}
     */
    NameType,

    /**
     * The NotFound model constructor.
     * @property {module:model/NotFound}
     */
    NotFound,

    /**
     * The Organisation model constructor.
     * @property {module:model/Organisation}
     */
    Organisation,

    /**
     * The OrganisationAddress model constructor.
     * @property {module:model/OrganisationAddress}
     */
    OrganisationAddress,

    /**
     * The OrganisationName model constructor.
     * @property {module:model/OrganisationName}
     */
    OrganisationName,

    /**
     * The PartyId model constructor.
     * @property {module:model/PartyId}
     */
    PartyId,

    /**
     * The PartyRole model constructor.
     * @property {module:model/PartyRole}
     */
    PartyRole,

    /**
     * The PermissionDenied model constructor.
     * @property {module:model/PermissionDenied}
     */
    PermissionDenied,

    /**
     * The RegisteredIdentifier model constructor.
     * @property {module:model/RegisteredIdentifier}
     */
    RegisteredIdentifier,

    /**
     * The RegisteredIdentifierType model constructor.
     * @property {module:model/RegisteredIdentifierType}
     */
    RegisteredIdentifierType,

    /**
     * The Role model constructor.
     * @property {module:model/Role}
     */
    Role,

    /**
     * The RoleId model constructor.
     * @property {module:model/RoleId}
     */
    RoleId,

    /**
     * The Type model constructor.
     * @property {module:model/Type}
     */
    Type,

    /**
     * The Unauthenticated model constructor.
     * @property {module:model/Unauthenticated}
     */
    Unauthenticated,

    /**
    * The AddressTypesApi service constructor.
    * @property {module:api/AddressTypesApi}
    */
    AddressTypesApi,

    /**
    * The BusinessNameLifecycleStatesApi service constructor.
    * @property {module:api/BusinessNameLifecycleStatesApi}
    */
    BusinessNameLifecycleStatesApi,

    /**
    * The BusinessNamesApi service constructor.
    * @property {module:api/BusinessNamesApi}
    */
    BusinessNamesApi,

    /**
    * The ElectronicAddressTypesApi service constructor.
    * @property {module:api/ElectronicAddressTypesApi}
    */
    ElectronicAddressTypesApi,

    /**
    * The GendersApi service constructor.
    * @property {module:api/GendersApi}
    */
    GendersApi,

    /**
    * The IndividualsApi service constructor.
    * @property {module:api/IndividualsApi}
    */
    IndividualsApi,

    /**
    * The IndividualsAddressesApi service constructor.
    * @property {module:api/IndividualsAddressesApi}
    */
    IndividualsAddressesApi,

    /**
    * The IndividualsBusinessNamesApi service constructor.
    * @property {module:api/IndividualsBusinessNamesApi}
    */
    IndividualsBusinessNamesApi,

    /**
    * The IndividualsElectronicAddressesApi service constructor.
    * @property {module:api/IndividualsElectronicAddressesApi}
    */
    IndividualsElectronicAddressesApi,

    /**
    * The IndividualsLicensesApi service constructor.
    * @property {module:api/IndividualsLicensesApi}
    */
    IndividualsLicensesApi,

    /**
    * The IndividualsRolesApi service constructor.
    * @property {module:api/IndividualsRolesApi}
    */
    IndividualsRolesApi,

    /**
    * The LegalEntityTypesApi service constructor.
    * @property {module:api/LegalEntityTypesApi}
    */
    LegalEntityTypesApi,

    /**
    * The LicenseLifecycleStatesApi service constructor.
    * @property {module:api/LicenseLifecycleStatesApi}
    */
    LicenseLifecycleStatesApi,

    /**
    * The LicenseTypesApi service constructor.
    * @property {module:api/LicenseTypesApi}
    */
    LicenseTypesApi,

    /**
    * The LicensesApi service constructor.
    * @property {module:api/LicensesApi}
    */
    LicensesApi,

    /**
    * The NameDirectionsApi service constructor.
    * @property {module:api/NameDirectionsApi}
    */
    NameDirectionsApi,

    /**
    * The NamePrefixesApi service constructor.
    * @property {module:api/NamePrefixesApi}
    */
    NamePrefixesApi,

    /**
    * The NameTypesApi service constructor.
    * @property {module:api/NameTypesApi}
    */
    NameTypesApi,

    /**
    * The OrganisationsApi service constructor.
    * @property {module:api/OrganisationsApi}
    */
    OrganisationsApi,

    /**
    * The OrganisationsAddressesApi service constructor.
    * @property {module:api/OrganisationsAddressesApi}
    */
    OrganisationsAddressesApi,

    /**
    * The OrganisationsBusinessNamesApi service constructor.
    * @property {module:api/OrganisationsBusinessNamesApi}
    */
    OrganisationsBusinessNamesApi,

    /**
    * The OrganisationsElectronicAddressesApi service constructor.
    * @property {module:api/OrganisationsElectronicAddressesApi}
    */
    OrganisationsElectronicAddressesApi,

    /**
    * The OrganisationsLicensesApi service constructor.
    * @property {module:api/OrganisationsLicensesApi}
    */
    OrganisationsLicensesApi,

    /**
    * The OrganisationsRolesApi service constructor.
    * @property {module:api/OrganisationsRolesApi}
    */
    OrganisationsRolesApi,

    /**
    * The RegisteredIdentifierTypesApi service constructor.
    * @property {module:api/RegisteredIdentifierTypesApi}
    */
    RegisteredIdentifierTypesApi,

    /**
    * The RolesApi service constructor.
    * @property {module:api/RolesApi}
    */
    RolesApi
};
