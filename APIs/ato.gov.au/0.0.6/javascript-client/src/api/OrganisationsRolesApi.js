/**
 * Business Registries
 * # Introduction The Business Registries API is built on HTTP. The API is RESTful. It has predictable resource URIs.    The API is documented in <a target=\"_blank\" href=\"https://github.com/OAI/OpenAPI-Specification\">OpenAPI</a> format.   In addition to the standard OpenAPI syntax we use a few   <a target=\"_blank\" href=\"https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md\">vendor extensions</a>.  # Overview The following sections describe the resources that make up the Business Registries REST API. ## Current Version By default, all requests to https://api.abr.ato.gov.au receive the `v1` version of the REST API. We encourage you to explicitly request this version via the `Accept` header.      Accept: application/vnd.abr-ato.v1+json  ## Schema All API access is over HTTPS, and accessed from https://api.abr.ato.gov.au. All data is sent and received as JSON. Blank fields are included.    All dates use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DD    For example: `2017-07-01` (the 1st of July 2017)    All timestamps use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DDTHH:MM:SSZ    For example: `2017-07-01T11:05:06+10:00`  ## Timezones Some requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls. ### Explicitly provide an ISO 8601 timestamp with timezone information For API calls that allow for a timestamp to be specified, we use that exact timestamp.    For example: `2017-07-01T11:05:06+10:00`  ## Pagination Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header.    For example:      Link: <https://api.abr.ato.gov.au/individuals?page=2>; rel=\"next\",           <https://api.abr.ato.gov.au/individuals?page=34>; rel=\"last\"  `rel=\"next\"` states that the next page is `page=2`. This makes sense, since by default, all paginated queries start at page `1`. `rel=\"last\"` provides some more information, stating that the last page of results is on `page 34`. Accordingly, we have 33 more pages of information that we can consume. ## Parameters Many API methods take optional parameters:      GET /individuals/1234/addresses/?addressType='Mailing'  In this example, the '1234' value is provided for the `:partyId` parameter in the path while `:addressType` is passed in the query string. For POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded as JSON with a Content-Type of 'application/json'. ## Metadata The API provides **metadata services** that you can use to discover information about the classifcation schemes and values used by the Registry.    For example:      GET /classifications/roles    Sample response:      [       {         \"id\": \"123e4567-e89b-12d3-a456-426655440001\",         \"role\": \"Director\",         \"roleDescription\": \"An individual responsible for managing a company's ...\",         \"relationship\": \"Directorship\",         \"reciprocalRole\": \"Company\",         \"reciprocalRoleDescription\": \"An incorporated legal entity.\"       },       {         ...       }     ]  ## Root Endpoint You can issue a GET request to the root endpoint (also known as the service root) to get all the endpoint categories that the REST API supports:      curl https://api.abr.ato.gov.au  ## Authentication The Business Registries API supports API Key authentication.    When you sign up for an account, you are given your first API key. You can generate additional API keys, and delete   API keys (as you may need to rotate your keys in the future). You authenticate to the Business Registries API by   providing your secret key in the request header.    **Note:** Some requests will return `404 Not Found`, instead of `403 Permission Denied`. This is to prevent the   accidental leakage of information to unauthorised users. 
 *
 * The version of the OpenAPI document: 0.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InvalidArgument from '../model/InvalidArgument';
import NotFound from '../model/NotFound';
import PartyRole from '../model/PartyRole';
import Unauthenticated from '../model/Unauthenticated';

/**
* OrganisationsRoles service.
* @module api/OrganisationsRolesApi
* @version 0.0.6
*/
export default class OrganisationsRolesApi {

    /**
    * Constructs a new OrganisationsRolesApi. 
    * @alias module:api/OrganisationsRolesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the organisationsPartyIdRolesGet operation.
     * @callback module:api/OrganisationsRolesApi~organisationsPartyIdRolesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PartyRole>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of roles
     * @param {String} apiKey The API key.
     * @param {String} partyId The party identifier.
     * @param {module:api/OrganisationsRolesApi~organisationsPartyIdRolesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PartyRole>}
     */
    organisationsPartyIdRolesGet(apiKey, partyId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling organisationsPartyIdRolesGet");
      }
      // verify the required parameter 'partyId' is set
      if (partyId === undefined || partyId === null) {
        throw new Error("Missing the required parameter 'partyId' when calling organisationsPartyIdRolesGet");
      }

      let pathParams = {
        'partyId': partyId
      };
      let queryParams = {
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PartyRole];
      return this.apiClient.callApi(
        '/organisations/{partyId}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsPartyIdRolesPost operation.
     * @callback module:api/OrganisationsRolesApi~organisationsPartyIdRolesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartyRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a role
     * Create a role 
     * @param {String} apiKey The API key.
     * @param {String} partyId The party identifier.
     * @param {module:model/PartyRole} partyRole Role resource
     * @param {module:api/OrganisationsRolesApi~organisationsPartyIdRolesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartyRole}
     */
    organisationsPartyIdRolesPost(apiKey, partyId, partyRole, callback) {
      let postBody = partyRole;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling organisationsPartyIdRolesPost");
      }
      // verify the required parameter 'partyId' is set
      if (partyId === undefined || partyId === null) {
        throw new Error("Missing the required parameter 'partyId' when calling organisationsPartyIdRolesPost");
      }
      // verify the required parameter 'partyRole' is set
      if (partyRole === undefined || partyRole === null) {
        throw new Error("Missing the required parameter 'partyRole' when calling organisationsPartyIdRolesPost");
      }

      let pathParams = {
        'partyId': partyId
      };
      let queryParams = {
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PartyRole;
      return this.apiClient.callApi(
        '/organisations/{partyId}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsPartyIdRolesRoleIdDelete operation.
     * @callback module:api/OrganisationsRolesApi~organisationsPartyIdRolesRoleIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role
     * Delete a role 
     * @param {String} apiKey The API key.
     * @param {String} partyId The party identifier.
     * @param {String} roleId The role identifier.
     * @param {module:api/OrganisationsRolesApi~organisationsPartyIdRolesRoleIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsPartyIdRolesRoleIdDelete(apiKey, partyId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling organisationsPartyIdRolesRoleIdDelete");
      }
      // verify the required parameter 'partyId' is set
      if (partyId === undefined || partyId === null) {
        throw new Error("Missing the required parameter 'partyId' when calling organisationsPartyIdRolesRoleIdDelete");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling organisationsPartyIdRolesRoleIdDelete");
      }

      let pathParams = {
        'partyId': partyId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{partyId}/roles/{roleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsPartyIdRolesRoleIdGet operation.
     * @callback module:api/OrganisationsRolesApi~organisationsPartyIdRolesRoleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartyRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a role
     * Retrieve a role 
     * @param {String} apiKey The API key.
     * @param {String} partyId The party identifier.
     * @param {String} roleId The role identifier.
     * @param {module:api/OrganisationsRolesApi~organisationsPartyIdRolesRoleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartyRole}
     */
    organisationsPartyIdRolesRoleIdGet(apiKey, partyId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling organisationsPartyIdRolesRoleIdGet");
      }
      // verify the required parameter 'partyId' is set
      if (partyId === undefined || partyId === null) {
        throw new Error("Missing the required parameter 'partyId' when calling organisationsPartyIdRolesRoleIdGet");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling organisationsPartyIdRolesRoleIdGet");
      }

      let pathParams = {
        'partyId': partyId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PartyRole;
      return this.apiClient.callApi(
        '/organisations/{partyId}/roles/{roleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsPartyIdRolesRoleIdPut operation.
     * @callback module:api/OrganisationsRolesApi~organisationsPartyIdRolesRoleIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartyRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role
     * Update a role 
     * @param {String} apiKey The API key.
     * @param {String} partyId The party identifier.
     * @param {String} roleId The role identifier.
     * @param {module:model/PartyRole} partyRole Role resource
     * @param {module:api/OrganisationsRolesApi~organisationsPartyIdRolesRoleIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartyRole}
     */
    organisationsPartyIdRolesRoleIdPut(apiKey, partyId, roleId, partyRole, callback) {
      let postBody = partyRole;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling organisationsPartyIdRolesRoleIdPut");
      }
      // verify the required parameter 'partyId' is set
      if (partyId === undefined || partyId === null) {
        throw new Error("Missing the required parameter 'partyId' when calling organisationsPartyIdRolesRoleIdPut");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling organisationsPartyIdRolesRoleIdPut");
      }
      // verify the required parameter 'partyRole' is set
      if (partyRole === undefined || partyRole === null) {
        throw new Error("Missing the required parameter 'partyRole' when calling organisationsPartyIdRolesRoleIdPut");
      }

      let pathParams = {
        'partyId': partyId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PartyRole;
      return this.apiClient.callApi(
        '/organisations/{partyId}/roles/{roleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
