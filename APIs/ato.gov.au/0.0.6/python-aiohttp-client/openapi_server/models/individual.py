# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.electronic_address import ElectronicAddress
from openapi_server.models.individual_address import IndividualAddress
from openapi_server.models.individual_name import IndividualName
from openapi_server.models.party_id import PartyId
from openapi_server import util


class Individual(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[IndividualAddress]=None, date_of_birth: date=None, electronic_addresses: List[ElectronicAddress]=None, from_date: datetime=None, gender: str='Male', id: PartyId=None, names: List[IndividualName]=None, place_of_birth: str=None, to_date: datetime=None):
        """Individual - a model defined in OpenAPI

        :param addresses: The addresses of this Individual.
        :param date_of_birth: The date_of_birth of this Individual.
        :param electronic_addresses: The electronic_addresses of this Individual.
        :param from_date: The from_date of this Individual.
        :param gender: The gender of this Individual.
        :param id: The id of this Individual.
        :param names: The names of this Individual.
        :param place_of_birth: The place_of_birth of this Individual.
        :param to_date: The to_date of this Individual.
        """
        self.openapi_types = {
            'addresses': List[IndividualAddress],
            'date_of_birth': date,
            'electronic_addresses': List[ElectronicAddress],
            'from_date': datetime,
            'gender': str,
            'id': PartyId,
            'names': List[IndividualName],
            'place_of_birth': str,
            'to_date': datetime
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'date_of_birth': 'dateOfBirth',
            'electronic_addresses': 'electronicAddresses',
            'from_date': 'fromDate',
            'gender': 'gender',
            'id': 'id',
            'names': 'names',
            'place_of_birth': 'placeOfBirth',
            'to_date': 'toDate'
        }

        self._addresses = addresses
        self._date_of_birth = date_of_birth
        self._electronic_addresses = electronic_addresses
        self._from_date = from_date
        self._gender = gender
        self._id = id
        self._names = names
        self._place_of_birth = place_of_birth
        self._to_date = to_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Individual':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The individual of this Individual.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this Individual.


        :return: The addresses of this Individual.
        :rtype: List[IndividualAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Individual.


        :param addresses: The addresses of this Individual.
        :type addresses: List[IndividualAddress]
        """

        self._addresses = addresses

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Individual.

        The individual's date of birth, for example, `1979-01-13` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format).

        :return: The date_of_birth of this Individual.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Individual.

        The individual's date of birth, for example, `1979-01-13` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format).

        :param date_of_birth: The date_of_birth of this Individual.
        :type date_of_birth: date
        """
        if date_of_birth is None:
            raise ValueError("Invalid value for `date_of_birth`, must not be `None`")

        self._date_of_birth = date_of_birth

    @property
    def electronic_addresses(self):
        """Gets the electronic_addresses of this Individual.


        :return: The electronic_addresses of this Individual.
        :rtype: List[ElectronicAddress]
        """
        return self._electronic_addresses

    @electronic_addresses.setter
    def electronic_addresses(self, electronic_addresses):
        """Sets the electronic_addresses of this Individual.


        :param electronic_addresses: The electronic_addresses of this Individual.
        :type electronic_addresses: List[ElectronicAddress]
        """

        self._electronic_addresses = electronic_addresses

    @property
    def from_date(self):
        """Gets the from_date of this Individual.

        The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :return: The from_date of this Individual.
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this Individual.

        The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :param from_date: The from_date of this Individual.
        :type from_date: datetime
        """

        self._from_date = from_date

    @property
    def gender(self):
        """Gets the gender of this Individual.

        The individual's gender.

        :return: The gender of this Individual.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Individual.

        The individual's gender.

        :param gender: The gender of this Individual.
        :type gender: str
        """
        allowed_values = ["Female", "Male", "Not Applicable", "Not Known"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def id(self):
        """Gets the id of this Individual.

        The party's unique identifier.

        :return: The id of this Individual.
        :rtype: PartyId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Individual.

        The party's unique identifier.

        :param id: The id of this Individual.
        :type id: PartyId
        """

        self._id = id

    @property
    def names(self):
        """Gets the names of this Individual.


        :return: The names of this Individual.
        :rtype: List[IndividualName]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this Individual.


        :param names: The names of this Individual.
        :type names: List[IndividualName]
        """

        self._names = names

    @property
    def place_of_birth(self):
        """Gets the place_of_birth of this Individual.

        The individual's place of birth, for example, `Tamworth`.

        :return: The place_of_birth of this Individual.
        :rtype: str
        """
        return self._place_of_birth

    @place_of_birth.setter
    def place_of_birth(self, place_of_birth):
        """Sets the place_of_birth of this Individual.

        The individual's place of birth, for example, `Tamworth`.

        :param place_of_birth: The place_of_birth of this Individual.
        :type place_of_birth: str
        """
        if place_of_birth is None:
            raise ValueError("Invalid value for `place_of_birth`, must not be `None`")

        self._place_of_birth = place_of_birth

    @property
    def to_date(self):
        """Gets the to_date of this Individual.

        The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :return: The to_date of this Individual.
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this Individual.

        The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :param to_date: The to_date of this Individual.
        :type to_date: datetime
        """

        self._to_date = to_date
