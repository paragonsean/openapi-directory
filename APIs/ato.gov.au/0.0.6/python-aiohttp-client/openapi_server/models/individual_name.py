# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IndividualName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, direction: str='left-to-right', family_name: str=None, formal_salutation: str=None, from_date: datetime=None, given_name: str=None, id: str=None, informal_salutation: str=None, middle_name: str=None, name_prefix: str='Mr', name_suffix: str=None, name_type: str='Principal Name', to_date: datetime=None):
        """IndividualName - a model defined in OpenAPI

        :param direction: The direction of this IndividualName.
        :param family_name: The family_name of this IndividualName.
        :param formal_salutation: The formal_salutation of this IndividualName.
        :param from_date: The from_date of this IndividualName.
        :param given_name: The given_name of this IndividualName.
        :param id: The id of this IndividualName.
        :param informal_salutation: The informal_salutation of this IndividualName.
        :param middle_name: The middle_name of this IndividualName.
        :param name_prefix: The name_prefix of this IndividualName.
        :param name_suffix: The name_suffix of this IndividualName.
        :param name_type: The name_type of this IndividualName.
        :param to_date: The to_date of this IndividualName.
        """
        self.openapi_types = {
            'direction': str,
            'family_name': str,
            'formal_salutation': str,
            'from_date': datetime,
            'given_name': str,
            'id': str,
            'informal_salutation': str,
            'middle_name': str,
            'name_prefix': str,
            'name_suffix': str,
            'name_type': str,
            'to_date': datetime
        }

        self.attribute_map = {
            'direction': 'direction',
            'family_name': 'familyName',
            'formal_salutation': 'formalSalutation',
            'from_date': 'fromDate',
            'given_name': 'givenName',
            'id': 'id',
            'informal_salutation': 'informalSalutation',
            'middle_name': 'middleName',
            'name_prefix': 'namePrefix',
            'name_suffix': 'nameSuffix',
            'name_type': 'nameType',
            'to_date': 'toDate'
        }

        self._direction = direction
        self._family_name = family_name
        self._formal_salutation = formal_salutation
        self._from_date = from_date
        self._given_name = given_name
        self._id = id
        self._informal_salutation = informal_salutation
        self._middle_name = middle_name
        self._name_prefix = name_prefix
        self._name_suffix = name_suffix
        self._name_type = name_type
        self._to_date = to_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IndividualName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The individual-name of this IndividualName.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direction(self):
        """Gets the direction of this IndividualName.

        The direction used to render the individual's name.

        :return: The direction of this IndividualName.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this IndividualName.

        The direction used to render the individual's name.

        :param direction: The direction of this IndividualName.
        :type direction: str
        """
        allowed_values = ["left-to-right", "right-to-left"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def family_name(self):
        """Gets the family_name of this IndividualName.

        The individual's family name.

        :return: The family_name of this IndividualName.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this IndividualName.

        The individual's family name.

        :param family_name: The family_name of this IndividualName.
        :type family_name: str
        """

        self._family_name = family_name

    @property
    def formal_salutation(self):
        """Gets the formal_salutation of this IndividualName.

        The individual's formal salutation, for example, \"Mr William Smith\".

        :return: The formal_salutation of this IndividualName.
        :rtype: str
        """
        return self._formal_salutation

    @formal_salutation.setter
    def formal_salutation(self, formal_salutation):
        """Sets the formal_salutation of this IndividualName.

        The individual's formal salutation, for example, \"Mr William Smith\".

        :param formal_salutation: The formal_salutation of this IndividualName.
        :type formal_salutation: str
        """

        self._formal_salutation = formal_salutation

    @property
    def from_date(self):
        """Gets the from_date of this IndividualName.

        The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :return: The from_date of this IndividualName.
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this IndividualName.

        The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :param from_date: The from_date of this IndividualName.
        :type from_date: datetime
        """

        self._from_date = from_date

    @property
    def given_name(self):
        """Gets the given_name of this IndividualName.

        The individual's given name.

        :return: The given_name of this IndividualName.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this IndividualName.

        The individual's given name.

        :param given_name: The given_name of this IndividualName.
        :type given_name: str
        """

        self._given_name = given_name

    @property
    def id(self):
        """Gets the id of this IndividualName.

        The resource's unique identifier.

        :return: The id of this IndividualName.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IndividualName.

        The resource's unique identifier.

        :param id: The id of this IndividualName.
        :type id: str
        """
        if id is not None and len(id) > 36:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `36`")

        self._id = id

    @property
    def informal_salutation(self):
        """Gets the informal_salutation of this IndividualName.

        The individual's informal salutation, for example, \"Bill\".

        :return: The informal_salutation of this IndividualName.
        :rtype: str
        """
        return self._informal_salutation

    @informal_salutation.setter
    def informal_salutation(self, informal_salutation):
        """Sets the informal_salutation of this IndividualName.

        The individual's informal salutation, for example, \"Bill\".

        :param informal_salutation: The informal_salutation of this IndividualName.
        :type informal_salutation: str
        """

        self._informal_salutation = informal_salutation

    @property
    def middle_name(self):
        """Gets the middle_name of this IndividualName.

        The individual's middle name.

        :return: The middle_name of this IndividualName.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this IndividualName.

        The individual's middle name.

        :param middle_name: The middle_name of this IndividualName.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def name_prefix(self):
        """Gets the name_prefix of this IndividualName.

        The individual's name prefix.

        :return: The name_prefix of this IndividualName.
        :rtype: str
        """
        return self._name_prefix

    @name_prefix.setter
    def name_prefix(self, name_prefix):
        """Sets the name_prefix of this IndividualName.

        The individual's name prefix.

        :param name_prefix: The name_prefix of this IndividualName.
        :type name_prefix: str
        """
        allowed_values = ["Mr", "Ms"]  # noqa: E501
        if name_prefix not in allowed_values:
            raise ValueError(
                "Invalid value for `name_prefix` ({0}), must be one of {1}"
                .format(name_prefix, allowed_values)
            )

        self._name_prefix = name_prefix

    @property
    def name_suffix(self):
        """Gets the name_suffix of this IndividualName.

        The individual's name suffix, for example, \"Jr\" or \"Sr\".

        :return: The name_suffix of this IndividualName.
        :rtype: str
        """
        return self._name_suffix

    @name_suffix.setter
    def name_suffix(self, name_suffix):
        """Sets the name_suffix of this IndividualName.

        The individual's name suffix, for example, \"Jr\" or \"Sr\".

        :param name_suffix: The name_suffix of this IndividualName.
        :type name_suffix: str
        """

        self._name_suffix = name_suffix

    @property
    def name_type(self):
        """Gets the name_type of this IndividualName.

        The name type.

        :return: The name_type of this IndividualName.
        :rtype: str
        """
        return self._name_type

    @name_type.setter
    def name_type(self, name_type):
        """Sets the name_type of this IndividualName.

        The name type.

        :param name_type: The name_type of this IndividualName.
        :type name_type: str
        """
        allowed_values = ["Alias", "Principal Name"]  # noqa: E501
        if name_type not in allowed_values:
            raise ValueError(
                "Invalid value for `name_type` ({0}), must be one of {1}"
                .format(name_type, allowed_values)
            )

        self._name_type = name_type

    @property
    def to_date(self):
        """Gets the to_date of this IndividualName.

        The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :return: The to_date of this IndividualName.
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this IndividualName.

        The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :param to_date: The to_date of this IndividualName.
        :type to_date: datetime
        """

        self._to_date = to_date
