# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_id import AddressId
from openapi_server import util


class ElectronicAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area_code: str=None, country_prefix: str=None, electronic_address_type: str='Landline', email: str=None, extension: str=None, from_date: datetime=None, id: AddressId=None, number: str=None, to_date: datetime=None, url: str=None):
        """ElectronicAddress - a model defined in OpenAPI

        :param area_code: The area_code of this ElectronicAddress.
        :param country_prefix: The country_prefix of this ElectronicAddress.
        :param electronic_address_type: The electronic_address_type of this ElectronicAddress.
        :param email: The email of this ElectronicAddress.
        :param extension: The extension of this ElectronicAddress.
        :param from_date: The from_date of this ElectronicAddress.
        :param id: The id of this ElectronicAddress.
        :param number: The number of this ElectronicAddress.
        :param to_date: The to_date of this ElectronicAddress.
        :param url: The url of this ElectronicAddress.
        """
        self.openapi_types = {
            'area_code': str,
            'country_prefix': str,
            'electronic_address_type': str,
            'email': str,
            'extension': str,
            'from_date': datetime,
            'id': AddressId,
            'number': str,
            'to_date': datetime,
            'url': str
        }

        self.attribute_map = {
            'area_code': 'areaCode',
            'country_prefix': 'countryPrefix',
            'electronic_address_type': 'electronicAddressType',
            'email': 'email',
            'extension': 'extension',
            'from_date': 'fromDate',
            'id': 'id',
            'number': 'number',
            'to_date': 'toDate',
            'url': 'url'
        }

        self._area_code = area_code
        self._country_prefix = country_prefix
        self._electronic_address_type = electronic_address_type
        self._email = email
        self._extension = extension
        self._from_date = from_date
        self._id = id
        self._number = number
        self._to_date = to_date
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElectronicAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The electronic-address of this ElectronicAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area_code(self):
        """Gets the area_code of this ElectronicAddress.

        The area code, for example, \"02\".

        :return: The area_code of this ElectronicAddress.
        :rtype: str
        """
        return self._area_code

    @area_code.setter
    def area_code(self, area_code):
        """Sets the area_code of this ElectronicAddress.

        The area code, for example, \"02\".

        :param area_code: The area_code of this ElectronicAddress.
        :type area_code: str
        """

        self._area_code = area_code

    @property
    def country_prefix(self):
        """Gets the country_prefix of this ElectronicAddress.

        The country prefix, for example, \"61\".

        :return: The country_prefix of this ElectronicAddress.
        :rtype: str
        """
        return self._country_prefix

    @country_prefix.setter
    def country_prefix(self, country_prefix):
        """Sets the country_prefix of this ElectronicAddress.

        The country prefix, for example, \"61\".

        :param country_prefix: The country_prefix of this ElectronicAddress.
        :type country_prefix: str
        """

        self._country_prefix = country_prefix

    @property
    def electronic_address_type(self):
        """Gets the electronic_address_type of this ElectronicAddress.

        The electronic address type.

        :return: The electronic_address_type of this ElectronicAddress.
        :rtype: str
        """
        return self._electronic_address_type

    @electronic_address_type.setter
    def electronic_address_type(self, electronic_address_type):
        """Sets the electronic_address_type of this ElectronicAddress.

        The electronic address type.

        :param electronic_address_type: The electronic_address_type of this ElectronicAddress.
        :type electronic_address_type: str
        """
        allowed_values = ["Email", "Fax", "Landline", "Mobile", "Website"]  # noqa: E501
        if electronic_address_type not in allowed_values:
            raise ValueError(
                "Invalid value for `electronic_address_type` ({0}), must be one of {1}"
                .format(electronic_address_type, allowed_values)
            )

        self._electronic_address_type = electronic_address_type

    @property
    def email(self):
        """Gets the email of this ElectronicAddress.

        The email address, for example, \"robert.ferguson@ato.gov.au\".

        :return: The email of this ElectronicAddress.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ElectronicAddress.

        The email address, for example, \"robert.ferguson@ato.gov.au\".

        :param email: The email of this ElectronicAddress.
        :type email: str
        """

        self._email = email

    @property
    def extension(self):
        """Gets the extension of this ElectronicAddress.

        The extension number, for example, \"4453\".

        :return: The extension of this ElectronicAddress.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this ElectronicAddress.

        The extension number, for example, \"4453\".

        :param extension: The extension of this ElectronicAddress.
        :type extension: str
        """

        self._extension = extension

    @property
    def from_date(self):
        """Gets the from_date of this ElectronicAddress.

        The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :return: The from_date of this ElectronicAddress.
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this ElectronicAddress.

        The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :param from_date: The from_date of this ElectronicAddress.
        :type from_date: datetime
        """

        self._from_date = from_date

    @property
    def id(self):
        """Gets the id of this ElectronicAddress.

        The resource's unique identifier.

        :return: The id of this ElectronicAddress.
        :rtype: AddressId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ElectronicAddress.

        The resource's unique identifier.

        :param id: The id of this ElectronicAddress.
        :type id: AddressId
        """

        self._id = id

    @property
    def number(self):
        """Gets the number of this ElectronicAddress.

        The number, for example, \"62164453\".

        :return: The number of this ElectronicAddress.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ElectronicAddress.

        The number, for example, \"62164453\".

        :param number: The number of this ElectronicAddress.
        :type number: str
        """

        self._number = number

    @property
    def to_date(self):
        """Gets the to_date of this ElectronicAddress.

        The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :return: The to_date of this ElectronicAddress.
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this ElectronicAddress.

        The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :param to_date: The to_date of this ElectronicAddress.
        :type to_date: datetime
        """

        self._to_date = to_date

    @property
    def url(self):
        """Gets the url of this ElectronicAddress.

        The website address, for example, \"https://ato.gov.au\".

        :return: The url of this ElectronicAddress.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ElectronicAddress.

        The website address, for example, \"https://ato.gov.au\".

        :param url: The url of this ElectronicAddress.
        :type url: str
        """

        self._url = url
