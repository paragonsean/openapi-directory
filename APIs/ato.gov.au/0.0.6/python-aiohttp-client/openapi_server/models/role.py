# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Role(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, reciprocal_role: str=None, reciprocal_role_description: str=None, relationship: str=None, role: str=None, role_description: str=None):
        """Role - a model defined in OpenAPI

        :param id: The id of this Role.
        :param reciprocal_role: The reciprocal_role of this Role.
        :param reciprocal_role_description: The reciprocal_role_description of this Role.
        :param relationship: The relationship of this Role.
        :param role: The role of this Role.
        :param role_description: The role_description of this Role.
        """
        self.openapi_types = {
            'id': str,
            'reciprocal_role': str,
            'reciprocal_role_description': str,
            'relationship': str,
            'role': str,
            'role_description': str
        }

        self.attribute_map = {
            'id': 'id',
            'reciprocal_role': 'reciprocalRole',
            'reciprocal_role_description': 'reciprocalRoleDescription',
            'relationship': 'relationship',
            'role': 'role',
            'role_description': 'roleDescription'
        }

        self._id = id
        self._reciprocal_role = reciprocal_role
        self._reciprocal_role_description = reciprocal_role_description
        self._relationship = relationship
        self._role = role
        self._role_description = role_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Role':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The role of this Role.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Role.

        The resource's unique identifier.

        :return: The id of this Role.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Role.

        The resource's unique identifier.

        :param id: The id of this Role.
        :type id: str
        """
        if id is not None and len(id) > 36:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `36`")

        self._id = id

    @property
    def reciprocal_role(self):
        """Gets the reciprocal_role of this Role.

        The reciprocal role name.

        :return: The reciprocal_role of this Role.
        :rtype: str
        """
        return self._reciprocal_role

    @reciprocal_role.setter
    def reciprocal_role(self, reciprocal_role):
        """Sets the reciprocal_role of this Role.

        The reciprocal role name.

        :param reciprocal_role: The reciprocal_role of this Role.
        :type reciprocal_role: str
        """

        self._reciprocal_role = reciprocal_role

    @property
    def reciprocal_role_description(self):
        """Gets the reciprocal_role_description of this Role.

        The reciprocal role description.

        :return: The reciprocal_role_description of this Role.
        :rtype: str
        """
        return self._reciprocal_role_description

    @reciprocal_role_description.setter
    def reciprocal_role_description(self, reciprocal_role_description):
        """Sets the reciprocal_role_description of this Role.

        The reciprocal role description.

        :param reciprocal_role_description: The reciprocal_role_description of this Role.
        :type reciprocal_role_description: str
        """

        self._reciprocal_role_description = reciprocal_role_description

    @property
    def relationship(self):
        """Gets the relationship of this Role.

        The relationship name.

        :return: The relationship of this Role.
        :rtype: str
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """Sets the relationship of this Role.

        The relationship name.

        :param relationship: The relationship of this Role.
        :type relationship: str
        """

        self._relationship = relationship

    @property
    def role(self):
        """Gets the role of this Role.

        The role name.

        :return: The role of this Role.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Role.

        The role name.

        :param role: The role of this Role.
        :type role: str
        """

        self._role = role

    @property
    def role_description(self):
        """Gets the role_description of this Role.

        The role description.

        :return: The role_description of this Role.
        :rtype: str
        """
        return self._role_description

    @role_description.setter
    def role_description(self, role_description):
        """Sets the role_description of this Role.

        The role description.

        :param role_description: The role_description of this Role.
        :type role_description: str
        """

        self._role_description = role_description
