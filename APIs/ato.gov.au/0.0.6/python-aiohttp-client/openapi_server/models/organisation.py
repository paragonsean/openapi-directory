# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.electronic_address import ElectronicAddress
from openapi_server.models.organisation_address import OrganisationAddress
from openapi_server.models.organisation_name import OrganisationName
from openapi_server.models.party_id import PartyId
from openapi_server.models.registered_identifier import RegisteredIdentifier
from openapi_server import util


class Organisation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[OrganisationAddress]=None, electronic_addresses: List[ElectronicAddress]=None, establishment_date: date=None, from_date: datetime=None, id: PartyId=None, legal_entity_type: str='Company', names: List[OrganisationName]=None, registered_identifiers: List[RegisteredIdentifier]=None, to_date: datetime=None):
        """Organisation - a model defined in OpenAPI

        :param addresses: The addresses of this Organisation.
        :param electronic_addresses: The electronic_addresses of this Organisation.
        :param establishment_date: The establishment_date of this Organisation.
        :param from_date: The from_date of this Organisation.
        :param id: The id of this Organisation.
        :param legal_entity_type: The legal_entity_type of this Organisation.
        :param names: The names of this Organisation.
        :param registered_identifiers: The registered_identifiers of this Organisation.
        :param to_date: The to_date of this Organisation.
        """
        self.openapi_types = {
            'addresses': List[OrganisationAddress],
            'electronic_addresses': List[ElectronicAddress],
            'establishment_date': date,
            'from_date': datetime,
            'id': PartyId,
            'legal_entity_type': str,
            'names': List[OrganisationName],
            'registered_identifiers': List[RegisteredIdentifier],
            'to_date': datetime
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'electronic_addresses': 'electronicAddresses',
            'establishment_date': 'establishmentDate',
            'from_date': 'fromDate',
            'id': 'id',
            'legal_entity_type': 'legalEntityType',
            'names': 'names',
            'registered_identifiers': 'registeredIdentifiers',
            'to_date': 'toDate'
        }

        self._addresses = addresses
        self._electronic_addresses = electronic_addresses
        self._establishment_date = establishment_date
        self._from_date = from_date
        self._id = id
        self._legal_entity_type = legal_entity_type
        self._names = names
        self._registered_identifiers = registered_identifiers
        self._to_date = to_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Organisation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The organisation of this Organisation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this Organisation.


        :return: The addresses of this Organisation.
        :rtype: List[OrganisationAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Organisation.


        :param addresses: The addresses of this Organisation.
        :type addresses: List[OrganisationAddress]
        """

        self._addresses = addresses

    @property
    def electronic_addresses(self):
        """Gets the electronic_addresses of this Organisation.


        :return: The electronic_addresses of this Organisation.
        :rtype: List[ElectronicAddress]
        """
        return self._electronic_addresses

    @electronic_addresses.setter
    def electronic_addresses(self, electronic_addresses):
        """Sets the electronic_addresses of this Organisation.


        :param electronic_addresses: The electronic_addresses of this Organisation.
        :type electronic_addresses: List[ElectronicAddress]
        """

        self._electronic_addresses = electronic_addresses

    @property
    def establishment_date(self):
        """Gets the establishment_date of this Organisation.

        The organisation's establishment date, for example, `1928-03-03` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format).

        :return: The establishment_date of this Organisation.
        :rtype: date
        """
        return self._establishment_date

    @establishment_date.setter
    def establishment_date(self, establishment_date):
        """Sets the establishment_date of this Organisation.

        The organisation's establishment date, for example, `1928-03-03` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format).

        :param establishment_date: The establishment_date of this Organisation.
        :type establishment_date: date
        """
        if establishment_date is None:
            raise ValueError("Invalid value for `establishment_date`, must not be `None`")

        self._establishment_date = establishment_date

    @property
    def from_date(self):
        """Gets the from_date of this Organisation.

        The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :return: The from_date of this Organisation.
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this Organisation.

        The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :param from_date: The from_date of this Organisation.
        :type from_date: datetime
        """

        self._from_date = from_date

    @property
    def id(self):
        """Gets the id of this Organisation.

        The party's unique identifier.

        :return: The id of this Organisation.
        :rtype: PartyId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organisation.

        The party's unique identifier.

        :param id: The id of this Organisation.
        :type id: PartyId
        """

        self._id = id

    @property
    def legal_entity_type(self):
        """Gets the legal_entity_type of this Organisation.

        The organisation's legal entity type.

        :return: The legal_entity_type of this Organisation.
        :rtype: str
        """
        return self._legal_entity_type

    @legal_entity_type.setter
    def legal_entity_type(self, legal_entity_type):
        """Sets the legal_entity_type of this Organisation.

        The organisation's legal entity type.

        :param legal_entity_type: The legal_entity_type of this Organisation.
        :type legal_entity_type: str
        """
        allowed_values = ["Company", "Partnership", "Trust", "Joint Venture"]  # noqa: E501
        if legal_entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `legal_entity_type` ({0}), must be one of {1}"
                .format(legal_entity_type, allowed_values)
            )

        self._legal_entity_type = legal_entity_type

    @property
    def names(self):
        """Gets the names of this Organisation.


        :return: The names of this Organisation.
        :rtype: List[OrganisationName]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this Organisation.


        :param names: The names of this Organisation.
        :type names: List[OrganisationName]
        """

        self._names = names

    @property
    def registered_identifiers(self):
        """Gets the registered_identifiers of this Organisation.


        :return: The registered_identifiers of this Organisation.
        :rtype: List[RegisteredIdentifier]
        """
        return self._registered_identifiers

    @registered_identifiers.setter
    def registered_identifiers(self, registered_identifiers):
        """Sets the registered_identifiers of this Organisation.


        :param registered_identifiers: The registered_identifiers of this Organisation.
        :type registered_identifiers: List[RegisteredIdentifier]
        """

        self._registered_identifiers = registered_identifiers

    @property
    def to_date(self):
        """Gets the to_date of this Organisation.

        The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :return: The to_date of this Organisation.
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this Organisation.

        The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :param to_date: The to_date of this Organisation.
        :type to_date: datetime
        """

        self._to_date = to_date
