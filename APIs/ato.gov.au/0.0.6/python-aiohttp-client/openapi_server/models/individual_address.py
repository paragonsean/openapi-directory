# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_id import AddressId
from openapi_server import util


class IndividualAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, from_date: datetime=None, id: AddressId=None, line1: str=None, line2: str=None, line3: str=None, name: str=None, postal_code: str=None, suburb: str=None, to_date: datetime=None, address_type: str='Principal Place of Residence'):
        """IndividualAddress - a model defined in OpenAPI

        :param city: The city of this IndividualAddress.
        :param country: The country of this IndividualAddress.
        :param from_date: The from_date of this IndividualAddress.
        :param id: The id of this IndividualAddress.
        :param line1: The line1 of this IndividualAddress.
        :param line2: The line2 of this IndividualAddress.
        :param line3: The line3 of this IndividualAddress.
        :param name: The name of this IndividualAddress.
        :param postal_code: The postal_code of this IndividualAddress.
        :param suburb: The suburb of this IndividualAddress.
        :param to_date: The to_date of this IndividualAddress.
        :param address_type: The address_type of this IndividualAddress.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'from_date': datetime,
            'id': AddressId,
            'line1': str,
            'line2': str,
            'line3': str,
            'name': str,
            'postal_code': str,
            'suburb': str,
            'to_date': datetime,
            'address_type': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'from_date': 'fromDate',
            'id': 'id',
            'line1': 'line1',
            'line2': 'line2',
            'line3': 'line3',
            'name': 'name',
            'postal_code': 'postalCode',
            'suburb': 'suburb',
            'to_date': 'toDate',
            'address_type': 'addressType'
        }

        self._city = city
        self._country = country
        self._from_date = from_date
        self._id = id
        self._line1 = line1
        self._line2 = line2
        self._line3 = line3
        self._name = name
        self._postal_code = postal_code
        self._suburb = suburb
        self._to_date = to_date
        self._address_type = address_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IndividualAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The individual-address of this IndividualAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this IndividualAddress.

        The city.

        :return: The city of this IndividualAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this IndividualAddress.

        The city.

        :param city: The city of this IndividualAddress.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this IndividualAddress.

        The country.

        :return: The country of this IndividualAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this IndividualAddress.

        The country.

        :param country: The country of this IndividualAddress.
        :type country: str
        """

        self._country = country

    @property
    def from_date(self):
        """Gets the from_date of this IndividualAddress.

        The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :return: The from_date of this IndividualAddress.
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this IndividualAddress.

        The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :param from_date: The from_date of this IndividualAddress.
        :type from_date: datetime
        """

        self._from_date = from_date

    @property
    def id(self):
        """Gets the id of this IndividualAddress.

        The resource's unique identifier.

        :return: The id of this IndividualAddress.
        :rtype: AddressId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IndividualAddress.

        The resource's unique identifier.

        :param id: The id of this IndividualAddress.
        :type id: AddressId
        """

        self._id = id

    @property
    def line1(self):
        """Gets the line1 of this IndividualAddress.

        The address line 1.

        :return: The line1 of this IndividualAddress.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this IndividualAddress.

        The address line 1.

        :param line1: The line1 of this IndividualAddress.
        :type line1: str
        """

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this IndividualAddress.

        The address line 2.

        :return: The line2 of this IndividualAddress.
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this IndividualAddress.

        The address line 2.

        :param line2: The line2 of this IndividualAddress.
        :type line2: str
        """

        self._line2 = line2

    @property
    def line3(self):
        """Gets the line3 of this IndividualAddress.

        The address line 3.

        :return: The line3 of this IndividualAddress.
        :rtype: str
        """
        return self._line3

    @line3.setter
    def line3(self, line3):
        """Sets the line3 of this IndividualAddress.

        The address line 3.

        :param line3: The line3 of this IndividualAddress.
        :type line3: str
        """

        self._line3 = line3

    @property
    def name(self):
        """Gets the name of this IndividualAddress.

        The address name.

        :return: The name of this IndividualAddress.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IndividualAddress.

        The address name.

        :param name: The name of this IndividualAddress.
        :type name: str
        """

        self._name = name

    @property
    def postal_code(self):
        """Gets the postal_code of this IndividualAddress.

        The postal code.

        :return: The postal_code of this IndividualAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this IndividualAddress.

        The postal code.

        :param postal_code: The postal_code of this IndividualAddress.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def suburb(self):
        """Gets the suburb of this IndividualAddress.

        The suburb.

        :return: The suburb of this IndividualAddress.
        :rtype: str
        """
        return self._suburb

    @suburb.setter
    def suburb(self, suburb):
        """Sets the suburb of this IndividualAddress.

        The suburb.

        :param suburb: The suburb of this IndividualAddress.
        :type suburb: str
        """

        self._suburb = suburb

    @property
    def to_date(self):
        """Gets the to_date of this IndividualAddress.

        The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :return: The to_date of this IndividualAddress.
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this IndividualAddress.

        The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :param to_date: The to_date of this IndividualAddress.
        :type to_date: datetime
        """

        self._to_date = to_date

    @property
    def address_type(self):
        """Gets the address_type of this IndividualAddress.

        The address type.

        :return: The address_type of this IndividualAddress.
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this IndividualAddress.

        The address type.

        :param address_type: The address_type of this IndividualAddress.
        :type address_type: str
        """
        allowed_values = ["Mailing", "Principal Place of Business", "Principal Place of Residence"]  # noqa: E501
        if address_type not in allowed_values:
            raise ValueError(
                "Invalid value for `address_type` ({0}), must be one of {1}"
                .format(address_type, allowed_values)
            )

        self._address_type = address_type
