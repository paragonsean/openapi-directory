# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.party_id import PartyId
from openapi_server.models.role_id import RoleId
from openapi_server import util


class PartyRole(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_date: datetime=None, id: RoleId=None, party_role_type: str='Employee', related_party_id: PartyId=None, related_party_role_type: str='Employer', relationship_type: str='Employment', to_date: datetime=None):
        """PartyRole - a model defined in OpenAPI

        :param from_date: The from_date of this PartyRole.
        :param id: The id of this PartyRole.
        :param party_role_type: The party_role_type of this PartyRole.
        :param related_party_id: The related_party_id of this PartyRole.
        :param related_party_role_type: The related_party_role_type of this PartyRole.
        :param relationship_type: The relationship_type of this PartyRole.
        :param to_date: The to_date of this PartyRole.
        """
        self.openapi_types = {
            'from_date': datetime,
            'id': RoleId,
            'party_role_type': str,
            'related_party_id': PartyId,
            'related_party_role_type': str,
            'relationship_type': str,
            'to_date': datetime
        }

        self.attribute_map = {
            'from_date': 'fromDate',
            'id': 'id',
            'party_role_type': 'partyRoleType',
            'related_party_id': 'relatedPartyId',
            'related_party_role_type': 'relatedPartyRoleType',
            'relationship_type': 'relationshipType',
            'to_date': 'toDate'
        }

        self._from_date = from_date
        self._id = id
        self._party_role_type = party_role_type
        self._related_party_id = related_party_id
        self._related_party_role_type = related_party_role_type
        self._relationship_type = relationship_type
        self._to_date = to_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartyRole':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The party-role of this PartyRole.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_date(self):
        """Gets the from_date of this PartyRole.

        The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :return: The from_date of this PartyRole.
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this PartyRole.

        The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :param from_date: The from_date of this PartyRole.
        :type from_date: datetime
        """

        self._from_date = from_date

    @property
    def id(self):
        """Gets the id of this PartyRole.

        The resource's unique identifier.

        :return: The id of this PartyRole.
        :rtype: RoleId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PartyRole.

        The resource's unique identifier.

        :param id: The id of this PartyRole.
        :type id: RoleId
        """

        self._id = id

    @property
    def party_role_type(self):
        """Gets the party_role_type of this PartyRole.

        The party's role type.

        :return: The party_role_type of this PartyRole.
        :rtype: str
        """
        return self._party_role_type

    @party_role_type.setter
    def party_role_type(self, party_role_type):
        """Sets the party_role_type of this PartyRole.

        The party's role type.

        :param party_role_type: The party_role_type of this PartyRole.
        :type party_role_type: str
        """
        allowed_values = ["Director", "Employee", "Member", "Partner", "Trustee"]  # noqa: E501
        if party_role_type not in allowed_values:
            raise ValueError(
                "Invalid value for `party_role_type` ({0}), must be one of {1}"
                .format(party_role_type, allowed_values)
            )

        self._party_role_type = party_role_type

    @property
    def related_party_id(self):
        """Gets the related_party_id of this PartyRole.

        The related party's unique identifier.

        :return: The related_party_id of this PartyRole.
        :rtype: PartyId
        """
        return self._related_party_id

    @related_party_id.setter
    def related_party_id(self, related_party_id):
        """Sets the related_party_id of this PartyRole.

        The related party's unique identifier.

        :param related_party_id: The related_party_id of this PartyRole.
        :type related_party_id: PartyId
        """
        if related_party_id is None:
            raise ValueError("Invalid value for `related_party_id`, must not be `None`")

        self._related_party_id = related_party_id

    @property
    def related_party_role_type(self):
        """Gets the related_party_role_type of this PartyRole.

        The related party's role type.

        :return: The related_party_role_type of this PartyRole.
        :rtype: str
        """
        return self._related_party_role_type

    @related_party_role_type.setter
    def related_party_role_type(self, related_party_role_type):
        """Sets the related_party_role_type of this PartyRole.

        The related party's role type.

        :param related_party_role_type: The related_party_role_type of this PartyRole.
        :type related_party_role_type: str
        """
        allowed_values = ["Association", "Company", "Employer", "Organisation", "Partnership", "Trust"]  # noqa: E501
        if related_party_role_type not in allowed_values:
            raise ValueError(
                "Invalid value for `related_party_role_type` ({0}), must be one of {1}"
                .format(related_party_role_type, allowed_values)
            )

        self._related_party_role_type = related_party_role_type

    @property
    def relationship_type(self):
        """Gets the relationship_type of this PartyRole.

        The relationship type.

        :return: The relationship_type of this PartyRole.
        :rtype: str
        """
        return self._relationship_type

    @relationship_type.setter
    def relationship_type(self, relationship_type):
        """Sets the relationship_type of this PartyRole.

        The relationship type.

        :param relationship_type: The relationship_type of this PartyRole.
        :type relationship_type: str
        """
        allowed_values = ["Directorship", "Employment", "Membership", "Partnership", "Trusteeship"]  # noqa: E501
        if relationship_type not in allowed_values:
            raise ValueError(
                "Invalid value for `relationship_type` ({0}), must be one of {1}"
                .format(relationship_type, allowed_values)
            )

        self._relationship_type = relationship_type

    @property
    def to_date(self):
        """Gets the to_date of this PartyRole.

        The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :return: The to_date of this PartyRole.
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this PartyRole.

        The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

        :param to_date: The to_date of this PartyRole.
        :type to_date: datetime
        """

        self._to_date = to_date
