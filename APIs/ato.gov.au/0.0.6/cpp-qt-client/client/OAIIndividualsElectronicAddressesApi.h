/**
 * Business Registries
 * # Introduction The Business Registries API is built on HTTP. The API is RESTful. It has predictable resource URIs.    The API is documented in <a target=\"_blank\" href=\"https://github.com/OAI/OpenAPI-Specification\">OpenAPI</a> format.   In addition to the standard OpenAPI syntax we use a few   <a target=\"_blank\" href=\"https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md\">vendor extensions</a>.  # Overview The following sections describe the resources that make up the Business Registries REST API. ## Current Version By default, all requests to https://api.abr.ato.gov.au receive the `v1` version of the REST API. We encourage you to explicitly request this version via the `Accept` header.      Accept: application/vnd.abr-ato.v1+json  ## Schema All API access is over HTTPS, and accessed from https://api.abr.ato.gov.au. All data is sent and received as JSON. Blank fields are included.    All dates use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DD    For example: `2017-07-01` (the 1st of July 2017)    All timestamps use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DDTHH:MM:SSZ    For example: `2017-07-01T11:05:06+10:00`  ## Timezones Some requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls. ### Explicitly provide an ISO 8601 timestamp with timezone information For API calls that allow for a timestamp to be specified, we use that exact timestamp.    For example: `2017-07-01T11:05:06+10:00`  ## Pagination Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header.    For example:      Link: <https://api.abr.ato.gov.au/individuals?page=2>; rel=\"next\",           <https://api.abr.ato.gov.au/individuals?page=34>; rel=\"last\"  `rel=\"next\"` states that the next page is `page=2`. This makes sense, since by default, all paginated queries start at page `1`. `rel=\"last\"` provides some more information, stating that the last page of results is on `page 34`. Accordingly, we have 33 more pages of information that we can consume. ## Parameters Many API methods take optional parameters:      GET /individuals/1234/addresses/?addressType='Mailing'  In this example, the '1234' value is provided for the `:partyId` parameter in the path while `:addressType` is passed in the query string. For POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded as JSON with a Content-Type of 'application/json'. ## Metadata The API provides **metadata services** that you can use to discover information about the classifcation schemes and values used by the Registry.    For example:      GET /classifications/roles    Sample response:      [       {         \"id\": \"123e4567-e89b-12d3-a456-426655440001\",         \"role\": \"Director\",         \"roleDescription\": \"An individual responsible for managing a company's ...\",         \"relationship\": \"Directorship\",         \"reciprocalRole\": \"Company\",         \"reciprocalRoleDescription\": \"An incorporated legal entity.\"       },       {         ...       }     ]  ## Root Endpoint You can issue a GET request to the root endpoint (also known as the service root) to get all the endpoint categories that the REST API supports:      curl https://api.abr.ato.gov.au  ## Authentication The Business Registries API supports API Key authentication.    When you sign up for an account, you are given your first API key. You can generate additional API keys, and delete   API keys (as you may need to rotate your keys in the future). You authenticate to the Business Registries API by   providing your secret key in the request header.    **Note:** Some requests will return `404 Not Found`, instead of `403 Permission Denied`. This is to prevent the   accidental leakage of information to unauthorised users. 
 *
 * The version of the OpenAPI document: 0.0.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIndividualsElectronicAddressesApi_H
#define OAI_OAIIndividualsElectronicAddressesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIElectronic_address.h"
#include "OAIInvalid_argument.h"
#include "OAINot_found.h"
#include "OAIUnauthenticated.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIndividualsElectronicAddressesApi : public QObject {
    Q_OBJECT

public:
    OAIIndividualsElectronicAddressesApi(const int timeOut = 0);
    ~OAIIndividualsElectronicAddressesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  party_id QString [required]
    * @param[in]  address_id QString [required]
    */
    virtual void individualsPartyIdElectronicAddressesAddressIdDelete(const QString &api_key, const QString &party_id, const QString &address_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  party_id QString [required]
    * @param[in]  address_id QString [required]
    */
    virtual void individualsPartyIdElectronicAddressesAddressIdGet(const QString &api_key, const QString &party_id, const QString &address_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  party_id QString [required]
    * @param[in]  address_id QString [required]
    * @param[in]  oai_electronic_address OAIElectronic_address [required]
    */
    virtual void individualsPartyIdElectronicAddressesAddressIdPut(const QString &api_key, const QString &party_id, const QString &address_id, const OAIElectronic_address &oai_electronic_address);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  party_id QString [required]
    */
    virtual void individualsPartyIdElectronicAddressesGet(const QString &api_key, const QString &party_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  party_id QString [required]
    * @param[in]  oai_electronic_address OAIElectronic_address [required]
    */
    virtual void individualsPartyIdElectronicAddressesPost(const QString &api_key, const QString &party_id, const OAIElectronic_address &oai_electronic_address);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void individualsPartyIdElectronicAddressesAddressIdDeleteCallback(OAIHttpRequestWorker *worker);
    void individualsPartyIdElectronicAddressesAddressIdGetCallback(OAIHttpRequestWorker *worker);
    void individualsPartyIdElectronicAddressesAddressIdPutCallback(OAIHttpRequestWorker *worker);
    void individualsPartyIdElectronicAddressesGetCallback(OAIHttpRequestWorker *worker);
    void individualsPartyIdElectronicAddressesPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void individualsPartyIdElectronicAddressesAddressIdDeleteSignal();
    void individualsPartyIdElectronicAddressesAddressIdGetSignal(OAIElectronic_address summary);
    void individualsPartyIdElectronicAddressesAddressIdPutSignal(OAIElectronic_address summary);
    void individualsPartyIdElectronicAddressesGetSignal(QList<OAIElectronic_address> summary);
    void individualsPartyIdElectronicAddressesPostSignal(OAIElectronic_address summary);


    void individualsPartyIdElectronicAddressesAddressIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void individualsPartyIdElectronicAddressesAddressIdGetSignalFull(OAIHttpRequestWorker *worker, OAIElectronic_address summary);
    void individualsPartyIdElectronicAddressesAddressIdPutSignalFull(OAIHttpRequestWorker *worker, OAIElectronic_address summary);
    void individualsPartyIdElectronicAddressesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIElectronic_address> summary);
    void individualsPartyIdElectronicAddressesPostSignalFull(OAIHttpRequestWorker *worker, OAIElectronic_address summary);

    Q_DECL_DEPRECATED_X("Use individualsPartyIdElectronicAddressesAddressIdDeleteSignalError() instead")
    void individualsPartyIdElectronicAddressesAddressIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void individualsPartyIdElectronicAddressesAddressIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use individualsPartyIdElectronicAddressesAddressIdGetSignalError() instead")
    void individualsPartyIdElectronicAddressesAddressIdGetSignalE(OAIElectronic_address summary, QNetworkReply::NetworkError error_type, QString error_str);
    void individualsPartyIdElectronicAddressesAddressIdGetSignalError(OAIElectronic_address summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use individualsPartyIdElectronicAddressesAddressIdPutSignalError() instead")
    void individualsPartyIdElectronicAddressesAddressIdPutSignalE(OAIElectronic_address summary, QNetworkReply::NetworkError error_type, QString error_str);
    void individualsPartyIdElectronicAddressesAddressIdPutSignalError(OAIElectronic_address summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use individualsPartyIdElectronicAddressesGetSignalError() instead")
    void individualsPartyIdElectronicAddressesGetSignalE(QList<OAIElectronic_address> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void individualsPartyIdElectronicAddressesGetSignalError(QList<OAIElectronic_address> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use individualsPartyIdElectronicAddressesPostSignalError() instead")
    void individualsPartyIdElectronicAddressesPostSignalE(OAIElectronic_address summary, QNetworkReply::NetworkError error_type, QString error_str);
    void individualsPartyIdElectronicAddressesPostSignalError(OAIElectronic_address summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use individualsPartyIdElectronicAddressesAddressIdDeleteSignalErrorFull() instead")
    void individualsPartyIdElectronicAddressesAddressIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void individualsPartyIdElectronicAddressesAddressIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use individualsPartyIdElectronicAddressesAddressIdGetSignalErrorFull() instead")
    void individualsPartyIdElectronicAddressesAddressIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void individualsPartyIdElectronicAddressesAddressIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use individualsPartyIdElectronicAddressesAddressIdPutSignalErrorFull() instead")
    void individualsPartyIdElectronicAddressesAddressIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void individualsPartyIdElectronicAddressesAddressIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use individualsPartyIdElectronicAddressesGetSignalErrorFull() instead")
    void individualsPartyIdElectronicAddressesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void individualsPartyIdElectronicAddressesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use individualsPartyIdElectronicAddressesPostSignalErrorFull() instead")
    void individualsPartyIdElectronicAddressesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void individualsPartyIdElectronicAddressesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
