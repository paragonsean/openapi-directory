/**
 * Business Registries
 * # Introduction The Business Registries API is built on HTTP. The API is RESTful. It has predictable resource URIs.    The API is documented in <a target=\"_blank\" href=\"https://github.com/OAI/OpenAPI-Specification\">OpenAPI</a> format.   In addition to the standard OpenAPI syntax we use a few   <a target=\"_blank\" href=\"https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md\">vendor extensions</a>.  # Overview The following sections describe the resources that make up the Business Registries REST API. ## Current Version By default, all requests to https://api.abr.ato.gov.au receive the `v1` version of the REST API. We encourage you to explicitly request this version via the `Accept` header.      Accept: application/vnd.abr-ato.v1+json  ## Schema All API access is over HTTPS, and accessed from https://api.abr.ato.gov.au. All data is sent and received as JSON. Blank fields are included.    All dates use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DD    For example: `2017-07-01` (the 1st of July 2017)    All timestamps use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DDTHH:MM:SSZ    For example: `2017-07-01T11:05:06+10:00`  ## Timezones Some requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls. ### Explicitly provide an ISO 8601 timestamp with timezone information For API calls that allow for a timestamp to be specified, we use that exact timestamp.    For example: `2017-07-01T11:05:06+10:00`  ## Pagination Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header.    For example:      Link: <https://api.abr.ato.gov.au/individuals?page=2>; rel=\"next\",           <https://api.abr.ato.gov.au/individuals?page=34>; rel=\"last\"  `rel=\"next\"` states that the next page is `page=2`. This makes sense, since by default, all paginated queries start at page `1`. `rel=\"last\"` provides some more information, stating that the last page of results is on `page 34`. Accordingly, we have 33 more pages of information that we can consume. ## Parameters Many API methods take optional parameters:      GET /individuals/1234/addresses/?addressType='Mailing'  In this example, the '1234' value is provided for the `:partyId` parameter in the path while `:addressType` is passed in the query string. For POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded as JSON with a Content-Type of 'application/json'. ## Metadata The API provides **metadata services** that you can use to discover information about the classifcation schemes and values used by the Registry.    For example:      GET /classifications/roles    Sample response:      [       {         \"id\": \"123e4567-e89b-12d3-a456-426655440001\",         \"role\": \"Director\",         \"roleDescription\": \"An individual responsible for managing a company's ...\",         \"relationship\": \"Directorship\",         \"reciprocalRole\": \"Company\",         \"reciprocalRoleDescription\": \"An incorporated legal entity.\"       },       {         ...       }     ]  ## Root Endpoint You can issue a GET request to the root endpoint (also known as the service root) to get all the endpoint categories that the REST API supports:      curl https://api.abr.ato.gov.au  ## Authentication The Business Registries API supports API Key authentication.    When you sign up for an account, you are given your first API key. You can generate additional API keys, and delete   API keys (as you may need to rotate your keys in the future). You authenticate to the Business Registries API by   providing your secret key in the request header.    **Note:** Some requests will return `404 Not Found`, instead of `403 Permission Denied`. This is to prevent the   accidental leakage of information to unauthorised users. 
 *
 * The version of the OpenAPI document: 0.0.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElectronic_address.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElectronic_address::OAIElectronic_address(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElectronic_address::OAIElectronic_address() {
    this->initializeModel();
}

OAIElectronic_address::~OAIElectronic_address() {}

void OAIElectronic_address::initializeModel() {

    m_area_code_isSet = false;
    m_area_code_isValid = false;

    m_country_prefix_isSet = false;
    m_country_prefix_isValid = false;

    m_electronic_address_type_isSet = false;
    m_electronic_address_type_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_extension_isSet = false;
    m_extension_isValid = false;

    m_from_date_isSet = false;
    m_from_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_to_date_isSet = false;
    m_to_date_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIElectronic_address::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElectronic_address::fromJsonObject(QJsonObject json) {

    m_area_code_isValid = ::OpenAPI::fromJsonValue(m_area_code, json[QString("areaCode")]);
    m_area_code_isSet = !json[QString("areaCode")].isNull() && m_area_code_isValid;

    m_country_prefix_isValid = ::OpenAPI::fromJsonValue(m_country_prefix, json[QString("countryPrefix")]);
    m_country_prefix_isSet = !json[QString("countryPrefix")].isNull() && m_country_prefix_isValid;

    m_electronic_address_type_isValid = ::OpenAPI::fromJsonValue(m_electronic_address_type, json[QString("electronicAddressType")]);
    m_electronic_address_type_isSet = !json[QString("electronicAddressType")].isNull() && m_electronic_address_type_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_extension_isValid = ::OpenAPI::fromJsonValue(m_extension, json[QString("extension")]);
    m_extension_isSet = !json[QString("extension")].isNull() && m_extension_isValid;

    m_from_date_isValid = ::OpenAPI::fromJsonValue(m_from_date, json[QString("fromDate")]);
    m_from_date_isSet = !json[QString("fromDate")].isNull() && m_from_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_to_date_isValid = ::OpenAPI::fromJsonValue(m_to_date, json[QString("toDate")]);
    m_to_date_isSet = !json[QString("toDate")].isNull() && m_to_date_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIElectronic_address::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElectronic_address::asJsonObject() const {
    QJsonObject obj;
    if (m_area_code_isSet) {
        obj.insert(QString("areaCode"), ::OpenAPI::toJsonValue(m_area_code));
    }
    if (m_country_prefix_isSet) {
        obj.insert(QString("countryPrefix"), ::OpenAPI::toJsonValue(m_country_prefix));
    }
    if (m_electronic_address_type_isSet) {
        obj.insert(QString("electronicAddressType"), ::OpenAPI::toJsonValue(m_electronic_address_type));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_extension_isSet) {
        obj.insert(QString("extension"), ::OpenAPI::toJsonValue(m_extension));
    }
    if (m_from_date_isSet) {
        obj.insert(QString("fromDate"), ::OpenAPI::toJsonValue(m_from_date));
    }
    if (m_id.isSet()) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_to_date_isSet) {
        obj.insert(QString("toDate"), ::OpenAPI::toJsonValue(m_to_date));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIElectronic_address::getAreaCode() const {
    return m_area_code;
}
void OAIElectronic_address::setAreaCode(const QString &area_code) {
    m_area_code = area_code;
    m_area_code_isSet = true;
}

bool OAIElectronic_address::is_area_code_Set() const{
    return m_area_code_isSet;
}

bool OAIElectronic_address::is_area_code_Valid() const{
    return m_area_code_isValid;
}

QString OAIElectronic_address::getCountryPrefix() const {
    return m_country_prefix;
}
void OAIElectronic_address::setCountryPrefix(const QString &country_prefix) {
    m_country_prefix = country_prefix;
    m_country_prefix_isSet = true;
}

bool OAIElectronic_address::is_country_prefix_Set() const{
    return m_country_prefix_isSet;
}

bool OAIElectronic_address::is_country_prefix_Valid() const{
    return m_country_prefix_isValid;
}

QString OAIElectronic_address::getElectronicAddressType() const {
    return m_electronic_address_type;
}
void OAIElectronic_address::setElectronicAddressType(const QString &electronic_address_type) {
    m_electronic_address_type = electronic_address_type;
    m_electronic_address_type_isSet = true;
}

bool OAIElectronic_address::is_electronic_address_type_Set() const{
    return m_electronic_address_type_isSet;
}

bool OAIElectronic_address::is_electronic_address_type_Valid() const{
    return m_electronic_address_type_isValid;
}

QString OAIElectronic_address::getEmail() const {
    return m_email;
}
void OAIElectronic_address::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIElectronic_address::is_email_Set() const{
    return m_email_isSet;
}

bool OAIElectronic_address::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIElectronic_address::getExtension() const {
    return m_extension;
}
void OAIElectronic_address::setExtension(const QString &extension) {
    m_extension = extension;
    m_extension_isSet = true;
}

bool OAIElectronic_address::is_extension_Set() const{
    return m_extension_isSet;
}

bool OAIElectronic_address::is_extension_Valid() const{
    return m_extension_isValid;
}

QDateTime OAIElectronic_address::getFromDate() const {
    return m_from_date;
}
void OAIElectronic_address::setFromDate(const QDateTime &from_date) {
    m_from_date = from_date;
    m_from_date_isSet = true;
}

bool OAIElectronic_address::is_from_date_Set() const{
    return m_from_date_isSet;
}

bool OAIElectronic_address::is_from_date_Valid() const{
    return m_from_date_isValid;
}

OAIAddressId OAIElectronic_address::getId() const {
    return m_id;
}
void OAIElectronic_address::setId(const OAIAddressId &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIElectronic_address::is_id_Set() const{
    return m_id_isSet;
}

bool OAIElectronic_address::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIElectronic_address::getNumber() const {
    return m_number;
}
void OAIElectronic_address::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIElectronic_address::is_number_Set() const{
    return m_number_isSet;
}

bool OAIElectronic_address::is_number_Valid() const{
    return m_number_isValid;
}

QDateTime OAIElectronic_address::getToDate() const {
    return m_to_date;
}
void OAIElectronic_address::setToDate(const QDateTime &to_date) {
    m_to_date = to_date;
    m_to_date_isSet = true;
}

bool OAIElectronic_address::is_to_date_Set() const{
    return m_to_date_isSet;
}

bool OAIElectronic_address::is_to_date_Valid() const{
    return m_to_date_isValid;
}

QString OAIElectronic_address::getUrl() const {
    return m_url;
}
void OAIElectronic_address::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIElectronic_address::is_url_Set() const{
    return m_url_isSet;
}

bool OAIElectronic_address::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIElectronic_address::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_electronic_address_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElectronic_address::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
