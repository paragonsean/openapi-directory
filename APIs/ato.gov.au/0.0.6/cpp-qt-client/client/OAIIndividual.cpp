/**
 * Business Registries
 * # Introduction The Business Registries API is built on HTTP. The API is RESTful. It has predictable resource URIs.    The API is documented in <a target=\"_blank\" href=\"https://github.com/OAI/OpenAPI-Specification\">OpenAPI</a> format.   In addition to the standard OpenAPI syntax we use a few   <a target=\"_blank\" href=\"https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md\">vendor extensions</a>.  # Overview The following sections describe the resources that make up the Business Registries REST API. ## Current Version By default, all requests to https://api.abr.ato.gov.au receive the `v1` version of the REST API. We encourage you to explicitly request this version via the `Accept` header.      Accept: application/vnd.abr-ato.v1+json  ## Schema All API access is over HTTPS, and accessed from https://api.abr.ato.gov.au. All data is sent and received as JSON. Blank fields are included.    All dates use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DD    For example: `2017-07-01` (the 1st of July 2017)    All timestamps use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DDTHH:MM:SSZ    For example: `2017-07-01T11:05:06+10:00`  ## Timezones Some requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls. ### Explicitly provide an ISO 8601 timestamp with timezone information For API calls that allow for a timestamp to be specified, we use that exact timestamp.    For example: `2017-07-01T11:05:06+10:00`  ## Pagination Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header.    For example:      Link: <https://api.abr.ato.gov.au/individuals?page=2>; rel=\"next\",           <https://api.abr.ato.gov.au/individuals?page=34>; rel=\"last\"  `rel=\"next\"` states that the next page is `page=2`. This makes sense, since by default, all paginated queries start at page `1`. `rel=\"last\"` provides some more information, stating that the last page of results is on `page 34`. Accordingly, we have 33 more pages of information that we can consume. ## Parameters Many API methods take optional parameters:      GET /individuals/1234/addresses/?addressType='Mailing'  In this example, the '1234' value is provided for the `:partyId` parameter in the path while `:addressType` is passed in the query string. For POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded as JSON with a Content-Type of 'application/json'. ## Metadata The API provides **metadata services** that you can use to discover information about the classifcation schemes and values used by the Registry.    For example:      GET /classifications/roles    Sample response:      [       {         \"id\": \"123e4567-e89b-12d3-a456-426655440001\",         \"role\": \"Director\",         \"roleDescription\": \"An individual responsible for managing a company's ...\",         \"relationship\": \"Directorship\",         \"reciprocalRole\": \"Company\",         \"reciprocalRoleDescription\": \"An incorporated legal entity.\"       },       {         ...       }     ]  ## Root Endpoint You can issue a GET request to the root endpoint (also known as the service root) to get all the endpoint categories that the REST API supports:      curl https://api.abr.ato.gov.au  ## Authentication The Business Registries API supports API Key authentication.    When you sign up for an account, you are given your first API key. You can generate additional API keys, and delete   API keys (as you may need to rotate your keys in the future). You authenticate to the Business Registries API by   providing your secret key in the request header.    **Note:** Some requests will return `404 Not Found`, instead of `403 Permission Denied`. This is to prevent the   accidental leakage of information to unauthorised users. 
 *
 * The version of the OpenAPI document: 0.0.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIndividual.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIndividual::OAIIndividual(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIndividual::OAIIndividual() {
    this->initializeModel();
}

OAIIndividual::~OAIIndividual() {}

void OAIIndividual::initializeModel() {

    m_addresses_isSet = false;
    m_addresses_isValid = false;

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_electronic_addresses_isSet = false;
    m_electronic_addresses_isValid = false;

    m_from_date_isSet = false;
    m_from_date_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_place_of_birth_isSet = false;
    m_place_of_birth_isValid = false;

    m_to_date_isSet = false;
    m_to_date_isValid = false;
}

void OAIIndividual::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIndividual::fromJsonObject(QJsonObject json) {

    m_addresses_isValid = ::OpenAPI::fromJsonValue(m_addresses, json[QString("addresses")]);
    m_addresses_isSet = !json[QString("addresses")].isNull() && m_addresses_isValid;

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("dateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("dateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_electronic_addresses_isValid = ::OpenAPI::fromJsonValue(m_electronic_addresses, json[QString("electronicAddresses")]);
    m_electronic_addresses_isSet = !json[QString("electronicAddresses")].isNull() && m_electronic_addresses_isValid;

    m_from_date_isValid = ::OpenAPI::fromJsonValue(m_from_date, json[QString("fromDate")]);
    m_from_date_isSet = !json[QString("fromDate")].isNull() && m_from_date_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_place_of_birth_isValid = ::OpenAPI::fromJsonValue(m_place_of_birth, json[QString("placeOfBirth")]);
    m_place_of_birth_isSet = !json[QString("placeOfBirth")].isNull() && m_place_of_birth_isValid;

    m_to_date_isValid = ::OpenAPI::fromJsonValue(m_to_date, json[QString("toDate")]);
    m_to_date_isSet = !json[QString("toDate")].isNull() && m_to_date_isValid;
}

QString OAIIndividual::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIndividual::asJsonObject() const {
    QJsonObject obj;
    if (m_addresses.size() > 0) {
        obj.insert(QString("addresses"), ::OpenAPI::toJsonValue(m_addresses));
    }
    if (m_date_of_birth_isSet) {
        obj.insert(QString("dateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_electronic_addresses.size() > 0) {
        obj.insert(QString("electronicAddresses"), ::OpenAPI::toJsonValue(m_electronic_addresses));
    }
    if (m_from_date_isSet) {
        obj.insert(QString("fromDate"), ::OpenAPI::toJsonValue(m_from_date));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_id.isSet()) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_place_of_birth_isSet) {
        obj.insert(QString("placeOfBirth"), ::OpenAPI::toJsonValue(m_place_of_birth));
    }
    if (m_to_date_isSet) {
        obj.insert(QString("toDate"), ::OpenAPI::toJsonValue(m_to_date));
    }
    return obj;
}

QList<OAIIndividual_address> OAIIndividual::getAddresses() const {
    return m_addresses;
}
void OAIIndividual::setAddresses(const QList<OAIIndividual_address> &addresses) {
    m_addresses = addresses;
    m_addresses_isSet = true;
}

bool OAIIndividual::is_addresses_Set() const{
    return m_addresses_isSet;
}

bool OAIIndividual::is_addresses_Valid() const{
    return m_addresses_isValid;
}

QDate OAIIndividual::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIIndividual::setDateOfBirth(const QDate &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIIndividual::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIIndividual::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

QList<OAIElectronic_address> OAIIndividual::getElectronicAddresses() const {
    return m_electronic_addresses;
}
void OAIIndividual::setElectronicAddresses(const QList<OAIElectronic_address> &electronic_addresses) {
    m_electronic_addresses = electronic_addresses;
    m_electronic_addresses_isSet = true;
}

bool OAIIndividual::is_electronic_addresses_Set() const{
    return m_electronic_addresses_isSet;
}

bool OAIIndividual::is_electronic_addresses_Valid() const{
    return m_electronic_addresses_isValid;
}

QDateTime OAIIndividual::getFromDate() const {
    return m_from_date;
}
void OAIIndividual::setFromDate(const QDateTime &from_date) {
    m_from_date = from_date;
    m_from_date_isSet = true;
}

bool OAIIndividual::is_from_date_Set() const{
    return m_from_date_isSet;
}

bool OAIIndividual::is_from_date_Valid() const{
    return m_from_date_isValid;
}

QString OAIIndividual::getGender() const {
    return m_gender;
}
void OAIIndividual::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIIndividual::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIIndividual::is_gender_Valid() const{
    return m_gender_isValid;
}

OAIPartyId OAIIndividual::getId() const {
    return m_id;
}
void OAIIndividual::setId(const OAIPartyId &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIndividual::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIndividual::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIIndividual_name> OAIIndividual::getNames() const {
    return m_names;
}
void OAIIndividual::setNames(const QList<OAIIndividual_name> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIIndividual::is_names_Set() const{
    return m_names_isSet;
}

bool OAIIndividual::is_names_Valid() const{
    return m_names_isValid;
}

QString OAIIndividual::getPlaceOfBirth() const {
    return m_place_of_birth;
}
void OAIIndividual::setPlaceOfBirth(const QString &place_of_birth) {
    m_place_of_birth = place_of_birth;
    m_place_of_birth_isSet = true;
}

bool OAIIndividual::is_place_of_birth_Set() const{
    return m_place_of_birth_isSet;
}

bool OAIIndividual::is_place_of_birth_Valid() const{
    return m_place_of_birth_isValid;
}

QDateTime OAIIndividual::getToDate() const {
    return m_to_date;
}
void OAIIndividual::setToDate(const QDateTime &to_date) {
    m_to_date = to_date;
    m_to_date_isSet = true;
}

bool OAIIndividual::is_to_date_Set() const{
    return m_to_date_isSet;
}

bool OAIIndividual::is_to_date_Valid() const{
    return m_to_date_isValid;
}

bool OAIIndividual::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_electronic_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIndividual::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_of_birth_isValid && m_place_of_birth_isValid && true;
}

} // namespace OpenAPI
