/**
 * Business Registries
 * # Introduction The Business Registries API is built on HTTP. The API is RESTful. It has predictable resource URIs.    The API is documented in <a target=\"_blank\" href=\"https://github.com/OAI/OpenAPI-Specification\">OpenAPI</a> format.   In addition to the standard OpenAPI syntax we use a few   <a target=\"_blank\" href=\"https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md\">vendor extensions</a>.  # Overview The following sections describe the resources that make up the Business Registries REST API. ## Current Version By default, all requests to https://api.abr.ato.gov.au receive the `v1` version of the REST API. We encourage you to explicitly request this version via the `Accept` header.      Accept: application/vnd.abr-ato.v1+json  ## Schema All API access is over HTTPS, and accessed from https://api.abr.ato.gov.au. All data is sent and received as JSON. Blank fields are included.    All dates use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DD    For example: `2017-07-01` (the 1st of July 2017)    All timestamps use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DDTHH:MM:SSZ    For example: `2017-07-01T11:05:06+10:00`  ## Timezones Some requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls. ### Explicitly provide an ISO 8601 timestamp with timezone information For API calls that allow for a timestamp to be specified, we use that exact timestamp.    For example: `2017-07-01T11:05:06+10:00`  ## Pagination Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header.    For example:      Link: <https://api.abr.ato.gov.au/individuals?page=2>; rel=\"next\",           <https://api.abr.ato.gov.au/individuals?page=34>; rel=\"last\"  `rel=\"next\"` states that the next page is `page=2`. This makes sense, since by default, all paginated queries start at page `1`. `rel=\"last\"` provides some more information, stating that the last page of results is on `page 34`. Accordingly, we have 33 more pages of information that we can consume. ## Parameters Many API methods take optional parameters:      GET /individuals/1234/addresses/?addressType='Mailing'  In this example, the '1234' value is provided for the `:partyId` parameter in the path while `:addressType` is passed in the query string. For POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded as JSON with a Content-Type of 'application/json'. ## Metadata The API provides **metadata services** that you can use to discover information about the classifcation schemes and values used by the Registry.    For example:      GET /classifications/roles    Sample response:      [       {         \"id\": \"123e4567-e89b-12d3-a456-426655440001\",         \"role\": \"Director\",         \"roleDescription\": \"An individual responsible for managing a company's ...\",         \"relationship\": \"Directorship\",         \"reciprocalRole\": \"Company\",         \"reciprocalRoleDescription\": \"An incorporated legal entity.\"       },       {         ...       }     ]  ## Root Endpoint You can issue a GET request to the root endpoint (also known as the service root) to get all the endpoint categories that the REST API supports:      curl https://api.abr.ato.gov.au  ## Authentication The Business Registries API supports API Key authentication.    When you sign up for an account, you are given your first API key. You can generate additional API keys, and delete   API keys (as you may need to rotate your keys in the future). You authenticate to the Business Registries API by   providing your secret key in the request header.    **Note:** Some requests will return `404 Not Found`, instead of `403 Permission Denied`. This is to prevent the   accidental leakage of information to unauthorised users. 
 *
 * The version of the OpenAPI document: 0.0.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganisationsElectronicAddressesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIOrganisationsElectronicAddressesApi::OAIOrganisationsElectronicAddressesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIOrganisationsElectronicAddressesApi::~OAIOrganisationsElectronicAddressesApi() {
}

void OAIOrganisationsElectronicAddressesApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("//api.abr.ato.gov.au/"),
    "Production API Server",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("//api.sandbox.abr.ato.gov.au/"),
    "Sandbox API Server",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("organisationsPartyIdElectronicAddressesAddressIdDelete", defaultConf);
    _serverIndices.insert("organisationsPartyIdElectronicAddressesAddressIdDelete", 0);
    _serverConfigs.insert("organisationsPartyIdElectronicAddressesAddressIdGet", defaultConf);
    _serverIndices.insert("organisationsPartyIdElectronicAddressesAddressIdGet", 0);
    _serverConfigs.insert("organisationsPartyIdElectronicAddressesAddressIdPut", defaultConf);
    _serverIndices.insert("organisationsPartyIdElectronicAddressesAddressIdPut", 0);
    _serverConfigs.insert("organisationsPartyIdElectronicAddressesGet", defaultConf);
    _serverIndices.insert("organisationsPartyIdElectronicAddressesGet", 0);
    _serverConfigs.insert("organisationsPartyIdElectronicAddressesPost", defaultConf);
    _serverIndices.insert("organisationsPartyIdElectronicAddressesPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIOrganisationsElectronicAddressesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIOrganisationsElectronicAddressesApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIOrganisationsElectronicAddressesApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIOrganisationsElectronicAddressesApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIOrganisationsElectronicAddressesApi::setUsername(const QString &username) {
    _username = username;
}

void OAIOrganisationsElectronicAddressesApi::setPassword(const QString &password) {
    _password = password;
}


void OAIOrganisationsElectronicAddressesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIOrganisationsElectronicAddressesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIOrganisationsElectronicAddressesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIOrganisationsElectronicAddressesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIOrganisationsElectronicAddressesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIOrganisationsElectronicAddressesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIOrganisationsElectronicAddressesApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIOrganisationsElectronicAddressesApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIOrganisationsElectronicAddressesApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIOrganisationsElectronicAddressesApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIOrganisationsElectronicAddressesApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIOrganisationsElectronicAddressesApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIOrganisationsElectronicAddressesApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIOrganisationsElectronicAddressesApi::organisationsPartyIdElectronicAddressesAddressIdDelete(const QString &api_key, const QString &party_id, const QString &address_id) {
    QString fullPath = QString(_serverConfigs["organisationsPartyIdElectronicAddressesAddressIdDelete"][_serverIndices.value("organisationsPartyIdElectronicAddressesAddressIdDelete")].URL()+"/organisations/{partyId}/electronic-addresses/{addressId}");
    
    
    {
        QString party_idPathParam("{");
        party_idPathParam.append("partyId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "partyId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"partyId"+pathSuffix : pathPrefix;
        fullPath.replace(party_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(party_id)));
    }
    
    {
        QString address_idPathParam("{");
        address_idPathParam.append("addressId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "addressId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"addressId"+pathSuffix : pathPrefix;
        fullPath.replace(address_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(address_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("apiKey", ::OpenAPI::toStringValue(api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOrganisationsElectronicAddressesApi::organisationsPartyIdElectronicAddressesAddressIdDeleteCallback);
    connect(this, &OAIOrganisationsElectronicAddressesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOrganisationsElectronicAddressesApi::organisationsPartyIdElectronicAddressesAddressIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdDeleteSignal();
        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdDeleteSignalE(error_type, error_str);
        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdDeleteSignalError(error_type, error_str);
        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOrganisationsElectronicAddressesApi::organisationsPartyIdElectronicAddressesAddressIdGet(const QString &api_key, const QString &party_id, const QString &address_id) {
    QString fullPath = QString(_serverConfigs["organisationsPartyIdElectronicAddressesAddressIdGet"][_serverIndices.value("organisationsPartyIdElectronicAddressesAddressIdGet")].URL()+"/organisations/{partyId}/electronic-addresses/{addressId}");
    
    
    {
        QString party_idPathParam("{");
        party_idPathParam.append("partyId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "partyId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"partyId"+pathSuffix : pathPrefix;
        fullPath.replace(party_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(party_id)));
    }
    
    {
        QString address_idPathParam("{");
        address_idPathParam.append("addressId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "addressId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"addressId"+pathSuffix : pathPrefix;
        fullPath.replace(address_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(address_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("apiKey", ::OpenAPI::toStringValue(api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOrganisationsElectronicAddressesApi::organisationsPartyIdElectronicAddressesAddressIdGetCallback);
    connect(this, &OAIOrganisationsElectronicAddressesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOrganisationsElectronicAddressesApi::organisationsPartyIdElectronicAddressesAddressIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIElectronic_address output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdGetSignal(output);
        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdGetSignalE(output, error_type, error_str);
        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdGetSignalError(output, error_type, error_str);
        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOrganisationsElectronicAddressesApi::organisationsPartyIdElectronicAddressesAddressIdPut(const QString &api_key, const QString &party_id, const QString &address_id, const OAIElectronic_address &oai_electronic_address) {
    QString fullPath = QString(_serverConfigs["organisationsPartyIdElectronicAddressesAddressIdPut"][_serverIndices.value("organisationsPartyIdElectronicAddressesAddressIdPut")].URL()+"/organisations/{partyId}/electronic-addresses/{addressId}");
    
    
    {
        QString party_idPathParam("{");
        party_idPathParam.append("partyId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "partyId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"partyId"+pathSuffix : pathPrefix;
        fullPath.replace(party_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(party_id)));
    }
    
    {
        QString address_idPathParam("{");
        address_idPathParam.append("addressId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "addressId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"addressId"+pathSuffix : pathPrefix;
        fullPath.replace(address_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(address_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_electronic_address.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("apiKey", ::OpenAPI::toStringValue(api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOrganisationsElectronicAddressesApi::organisationsPartyIdElectronicAddressesAddressIdPutCallback);
    connect(this, &OAIOrganisationsElectronicAddressesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOrganisationsElectronicAddressesApi::organisationsPartyIdElectronicAddressesAddressIdPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIElectronic_address output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdPutSignal(output);
        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdPutSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdPutSignalE(output, error_type, error_str);
        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdPutSignalError(output, error_type, error_str);
        Q_EMIT organisationsPartyIdElectronicAddressesAddressIdPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOrganisationsElectronicAddressesApi::organisationsPartyIdElectronicAddressesGet(const QString &api_key, const QString &party_id) {
    QString fullPath = QString(_serverConfigs["organisationsPartyIdElectronicAddressesGet"][_serverIndices.value("organisationsPartyIdElectronicAddressesGet")].URL()+"/organisations/{partyId}/electronic-addresses");
    
    
    {
        QString party_idPathParam("{");
        party_idPathParam.append("partyId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "partyId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"partyId"+pathSuffix : pathPrefix;
        fullPath.replace(party_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(party_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("apiKey", ::OpenAPI::toStringValue(api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOrganisationsElectronicAddressesApi::organisationsPartyIdElectronicAddressesGetCallback);
    connect(this, &OAIOrganisationsElectronicAddressesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOrganisationsElectronicAddressesApi::organisationsPartyIdElectronicAddressesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIElectronic_address> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIElectronic_address val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organisationsPartyIdElectronicAddressesGetSignal(output);
        Q_EMIT organisationsPartyIdElectronicAddressesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organisationsPartyIdElectronicAddressesGetSignalE(output, error_type, error_str);
        Q_EMIT organisationsPartyIdElectronicAddressesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organisationsPartyIdElectronicAddressesGetSignalError(output, error_type, error_str);
        Q_EMIT organisationsPartyIdElectronicAddressesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOrganisationsElectronicAddressesApi::organisationsPartyIdElectronicAddressesPost(const QString &api_key, const QString &party_id, const OAIElectronic_address &oai_electronic_address) {
    QString fullPath = QString(_serverConfigs["organisationsPartyIdElectronicAddressesPost"][_serverIndices.value("organisationsPartyIdElectronicAddressesPost")].URL()+"/organisations/{partyId}/electronic-addresses");
    
    
    {
        QString party_idPathParam("{");
        party_idPathParam.append("partyId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "partyId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"partyId"+pathSuffix : pathPrefix;
        fullPath.replace(party_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(party_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_electronic_address.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("apiKey", ::OpenAPI::toStringValue(api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOrganisationsElectronicAddressesApi::organisationsPartyIdElectronicAddressesPostCallback);
    connect(this, &OAIOrganisationsElectronicAddressesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOrganisationsElectronicAddressesApi::organisationsPartyIdElectronicAddressesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIElectronic_address output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organisationsPartyIdElectronicAddressesPostSignal(output);
        Q_EMIT organisationsPartyIdElectronicAddressesPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organisationsPartyIdElectronicAddressesPostSignalE(output, error_type, error_str);
        Q_EMIT organisationsPartyIdElectronicAddressesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organisationsPartyIdElectronicAddressesPostSignalError(output, error_type, error_str);
        Q_EMIT organisationsPartyIdElectronicAddressesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOrganisationsElectronicAddressesApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
