/*
 * Business Registries
 * # Introduction The Business Registries API is built on HTTP. The API is RESTful. It has predictable resource URIs.    The API is documented in <a target=\"_blank\" href=\"https://github.com/OAI/OpenAPI-Specification\">OpenAPI</a> format.   In addition to the standard OpenAPI syntax we use a few   <a target=\"_blank\" href=\"https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md\">vendor extensions</a>.  # Overview The following sections describe the resources that make up the Business Registries REST API. ## Current Version By default, all requests to https://api.abr.ato.gov.au receive the `v1` version of the REST API. We encourage you to explicitly request this version via the `Accept` header.      Accept: application/vnd.abr-ato.v1+json  ## Schema All API access is over HTTPS, and accessed from https://api.abr.ato.gov.au. All data is sent and received as JSON. Blank fields are included.    All dates use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DD    For example: `2017-07-01` (the 1st of July 2017)    All timestamps use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DDTHH:MM:SSZ    For example: `2017-07-01T11:05:06+10:00`  ## Timezones Some requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls. ### Explicitly provide an ISO 8601 timestamp with timezone information For API calls that allow for a timestamp to be specified, we use that exact timestamp.    For example: `2017-07-01T11:05:06+10:00`  ## Pagination Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header.    For example:      Link: <https://api.abr.ato.gov.au/individuals?page=2>; rel=\"next\",           <https://api.abr.ato.gov.au/individuals?page=34>; rel=\"last\"  `rel=\"next\"` states that the next page is `page=2`. This makes sense, since by default, all paginated queries start at page `1`. `rel=\"last\"` provides some more information, stating that the last page of results is on `page 34`. Accordingly, we have 33 more pages of information that we can consume. ## Parameters Many API methods take optional parameters:      GET /individuals/1234/addresses/?addressType='Mailing'  In this example, the '1234' value is provided for the `:partyId` parameter in the path while `:addressType` is passed in the query string. For POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded as JSON with a Content-Type of 'application/json'. ## Metadata The API provides **metadata services** that you can use to discover information about the classifcation schemes and values used by the Registry.    For example:      GET /classifications/roles    Sample response:      [       {         \"id\": \"123e4567-e89b-12d3-a456-426655440001\",         \"role\": \"Director\",         \"roleDescription\": \"An individual responsible for managing a company's ...\",         \"relationship\": \"Directorship\",         \"reciprocalRole\": \"Company\",         \"reciprocalRoleDescription\": \"An incorporated legal entity.\"       },       {         ...       }     ]  ## Root Endpoint You can issue a GET request to the root endpoint (also known as the service root) to get all the endpoint categories that the REST API supports:      curl https://api.abr.ato.gov.au  ## Authentication The Business Registries API supports API Key authentication.    When you sign up for an account, you are given your first API key. You can generate additional API keys, and delete   API keys (as you may need to rotate your keys in the future). You authenticate to the Business Registries API by   providing your secret key in the request header.    **Note:** Some requests will return `404 Not Found`, instead of `403 Permission Denied`. This is to prevent the   accidental leakage of information to unauthorised users. 
 *
 * The version of the OpenAPI document: 0.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Individual Name resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:54.743058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IndividualName {
  /**
   * The direction used to render the individual&#39;s name.
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    LEFT_TO_RIGHT("left-to-right"),
    
    RIGHT_TO_LEFT("right-to-left");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DirectionEnum direction = DirectionEnum.LEFT_TO_RIGHT;

  public static final String SERIALIZED_NAME_FAMILY_NAME = "familyName";
  @SerializedName(SERIALIZED_NAME_FAMILY_NAME)
  private String familyName;

  public static final String SERIALIZED_NAME_FORMAL_SALUTATION = "formalSalutation";
  @SerializedName(SERIALIZED_NAME_FORMAL_SALUTATION)
  private String formalSalutation;

  public static final String SERIALIZED_NAME_FROM_DATE = "fromDate";
  @SerializedName(SERIALIZED_NAME_FROM_DATE)
  private OffsetDateTime fromDate;

  public static final String SERIALIZED_NAME_GIVEN_NAME = "givenName";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAME)
  private String givenName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INFORMAL_SALUTATION = "informalSalutation";
  @SerializedName(SERIALIZED_NAME_INFORMAL_SALUTATION)
  private String informalSalutation;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  /**
   * The individual&#39;s name prefix.
   */
  @JsonAdapter(NamePrefixEnum.Adapter.class)
  public enum NamePrefixEnum {
    MR("Mr"),
    
    MS("Ms");

    private String value;

    NamePrefixEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NamePrefixEnum fromValue(String value) {
      for (NamePrefixEnum b : NamePrefixEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NamePrefixEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NamePrefixEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NamePrefixEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NamePrefixEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NamePrefixEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAME_PREFIX = "namePrefix";
  @SerializedName(SERIALIZED_NAME_NAME_PREFIX)
  private NamePrefixEnum namePrefix = NamePrefixEnum.MR;

  public static final String SERIALIZED_NAME_NAME_SUFFIX = "nameSuffix";
  @SerializedName(SERIALIZED_NAME_NAME_SUFFIX)
  private String nameSuffix;

  /**
   * The name type.
   */
  @JsonAdapter(NameTypeEnum.Adapter.class)
  public enum NameTypeEnum {
    ALIAS("Alias"),
    
    PRINCIPAL_NAME("Principal Name");

    private String value;

    NameTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameTypeEnum fromValue(String value) {
      for (NameTypeEnum b : NameTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NameTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAME_TYPE = "nameType";
  @SerializedName(SERIALIZED_NAME_NAME_TYPE)
  private NameTypeEnum nameType = NameTypeEnum.PRINCIPAL_NAME;

  public static final String SERIALIZED_NAME_TO_DATE = "toDate";
  @SerializedName(SERIALIZED_NAME_TO_DATE)
  private OffsetDateTime toDate;

  public IndividualName() {
  }

  public IndividualName(
     OffsetDateTime fromDate, 
     String id, 
     OffsetDateTime toDate
  ) {
    this();
    this.fromDate = fromDate;
    this.id = id;
    this.toDate = toDate;
  }

  public IndividualName direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

  /**
   * The direction used to render the individual&#39;s name.
   * @return direction
   */
  @javax.annotation.Nullable
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }


  public IndividualName familyName(String familyName) {
    this.familyName = familyName;
    return this;
  }

  /**
   * The individual&#39;s family name.
   * @return familyName
   */
  @javax.annotation.Nullable
  public String getFamilyName() {
    return familyName;
  }

  public void setFamilyName(String familyName) {
    this.familyName = familyName;
  }


  public IndividualName formalSalutation(String formalSalutation) {
    this.formalSalutation = formalSalutation;
    return this;
  }

  /**
   * The individual&#39;s formal salutation, for example, \&quot;Mr William Smith\&quot;.
   * @return formalSalutation
   */
  @javax.annotation.Nullable
  public String getFormalSalutation() {
    return formalSalutation;
  }

  public void setFormalSalutation(String formalSalutation) {
    this.formalSalutation = formalSalutation;
  }


  /**
   * The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
   * @return fromDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFromDate() {
    return fromDate;
  }



  public IndividualName givenName(String givenName) {
    this.givenName = givenName;
    return this;
  }

  /**
   * The individual&#39;s given name.
   * @return givenName
   */
  @javax.annotation.Nullable
  public String getGivenName() {
    return givenName;
  }

  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }


  /**
   * The resource&#39;s unique identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public IndividualName informalSalutation(String informalSalutation) {
    this.informalSalutation = informalSalutation;
    return this;
  }

  /**
   * The individual&#39;s informal salutation, for example, \&quot;Bill\&quot;.
   * @return informalSalutation
   */
  @javax.annotation.Nullable
  public String getInformalSalutation() {
    return informalSalutation;
  }

  public void setInformalSalutation(String informalSalutation) {
    this.informalSalutation = informalSalutation;
  }


  public IndividualName middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  /**
   * The individual&#39;s middle name.
   * @return middleName
   */
  @javax.annotation.Nullable
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }


  public IndividualName namePrefix(NamePrefixEnum namePrefix) {
    this.namePrefix = namePrefix;
    return this;
  }

  /**
   * The individual&#39;s name prefix.
   * @return namePrefix
   */
  @javax.annotation.Nullable
  public NamePrefixEnum getNamePrefix() {
    return namePrefix;
  }

  public void setNamePrefix(NamePrefixEnum namePrefix) {
    this.namePrefix = namePrefix;
  }


  public IndividualName nameSuffix(String nameSuffix) {
    this.nameSuffix = nameSuffix;
    return this;
  }

  /**
   * The individual&#39;s name suffix, for example, \&quot;Jr\&quot; or \&quot;Sr\&quot;.
   * @return nameSuffix
   */
  @javax.annotation.Nullable
  public String getNameSuffix() {
    return nameSuffix;
  }

  public void setNameSuffix(String nameSuffix) {
    this.nameSuffix = nameSuffix;
  }


  public IndividualName nameType(NameTypeEnum nameType) {
    this.nameType = nameType;
    return this;
  }

  /**
   * The name type.
   * @return nameType
   */
  @javax.annotation.Nullable
  public NameTypeEnum getNameType() {
    return nameType;
  }

  public void setNameType(NameTypeEnum nameType) {
    this.nameType = nameType;
  }


  /**
   * The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
   * @return toDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getToDate() {
    return toDate;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndividualName individualName = (IndividualName) o;
    return Objects.equals(this.direction, individualName.direction) &&
        Objects.equals(this.familyName, individualName.familyName) &&
        Objects.equals(this.formalSalutation, individualName.formalSalutation) &&
        Objects.equals(this.fromDate, individualName.fromDate) &&
        Objects.equals(this.givenName, individualName.givenName) &&
        Objects.equals(this.id, individualName.id) &&
        Objects.equals(this.informalSalutation, individualName.informalSalutation) &&
        Objects.equals(this.middleName, individualName.middleName) &&
        Objects.equals(this.namePrefix, individualName.namePrefix) &&
        Objects.equals(this.nameSuffix, individualName.nameSuffix) &&
        Objects.equals(this.nameType, individualName.nameType) &&
        Objects.equals(this.toDate, individualName.toDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(direction, familyName, formalSalutation, fromDate, givenName, id, informalSalutation, middleName, namePrefix, nameSuffix, nameType, toDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndividualName {\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    familyName: ").append(toIndentedString(familyName)).append("\n");
    sb.append("    formalSalutation: ").append(toIndentedString(formalSalutation)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    informalSalutation: ").append(toIndentedString(informalSalutation)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    namePrefix: ").append(toIndentedString(namePrefix)).append("\n");
    sb.append("    nameSuffix: ").append(toIndentedString(nameSuffix)).append("\n");
    sb.append("    nameType: ").append(toIndentedString(nameType)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("direction");
    openapiFields.add("familyName");
    openapiFields.add("formalSalutation");
    openapiFields.add("fromDate");
    openapiFields.add("givenName");
    openapiFields.add("id");
    openapiFields.add("informalSalutation");
    openapiFields.add("middleName");
    openapiFields.add("namePrefix");
    openapiFields.add("nameSuffix");
    openapiFields.add("nameType");
    openapiFields.add("toDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IndividualName
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IndividualName.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndividualName is not found in the empty JSON string", IndividualName.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IndividualName.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IndividualName` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      // validate the optional field `direction`
      if (jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) {
        DirectionEnum.validateJsonElement(jsonObj.get("direction"));
      }
      if ((jsonObj.get("familyName") != null && !jsonObj.get("familyName").isJsonNull()) && !jsonObj.get("familyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `familyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("familyName").toString()));
      }
      if ((jsonObj.get("formalSalutation") != null && !jsonObj.get("formalSalutation").isJsonNull()) && !jsonObj.get("formalSalutation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formalSalutation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formalSalutation").toString()));
      }
      if ((jsonObj.get("givenName") != null && !jsonObj.get("givenName").isJsonNull()) && !jsonObj.get("givenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `givenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("givenName").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("informalSalutation") != null && !jsonObj.get("informalSalutation").isJsonNull()) && !jsonObj.get("informalSalutation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `informalSalutation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("informalSalutation").toString()));
      }
      if ((jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if ((jsonObj.get("namePrefix") != null && !jsonObj.get("namePrefix").isJsonNull()) && !jsonObj.get("namePrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namePrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namePrefix").toString()));
      }
      // validate the optional field `namePrefix`
      if (jsonObj.get("namePrefix") != null && !jsonObj.get("namePrefix").isJsonNull()) {
        NamePrefixEnum.validateJsonElement(jsonObj.get("namePrefix"));
      }
      if ((jsonObj.get("nameSuffix") != null && !jsonObj.get("nameSuffix").isJsonNull()) && !jsonObj.get("nameSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameSuffix").toString()));
      }
      if ((jsonObj.get("nameType") != null && !jsonObj.get("nameType").isJsonNull()) && !jsonObj.get("nameType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameType").toString()));
      }
      // validate the optional field `nameType`
      if (jsonObj.get("nameType") != null && !jsonObj.get("nameType").isJsonNull()) {
        NameTypeEnum.validateJsonElement(jsonObj.get("nameType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndividualName.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndividualName' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndividualName> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndividualName.class));

       return (TypeAdapter<T>) new TypeAdapter<IndividualName>() {
           @Override
           public void write(JsonWriter out, IndividualName value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndividualName read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IndividualName given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IndividualName
   * @throws IOException if the JSON string is invalid with respect to IndividualName
   */
  public static IndividualName fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndividualName.class);
  }

  /**
   * Convert an instance of IndividualName to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

