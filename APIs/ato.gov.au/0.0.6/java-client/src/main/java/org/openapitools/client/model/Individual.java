/*
 * Business Registries
 * # Introduction The Business Registries API is built on HTTP. The API is RESTful. It has predictable resource URIs.    The API is documented in <a target=\"_blank\" href=\"https://github.com/OAI/OpenAPI-Specification\">OpenAPI</a> format.   In addition to the standard OpenAPI syntax we use a few   <a target=\"_blank\" href=\"https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md\">vendor extensions</a>.  # Overview The following sections describe the resources that make up the Business Registries REST API. ## Current Version By default, all requests to https://api.abr.ato.gov.au receive the `v1` version of the REST API. We encourage you to explicitly request this version via the `Accept` header.      Accept: application/vnd.abr-ato.v1+json  ## Schema All API access is over HTTPS, and accessed from https://api.abr.ato.gov.au. All data is sent and received as JSON. Blank fields are included.    All dates use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DD    For example: `2017-07-01` (the 1st of July 2017)    All timestamps use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DDTHH:MM:SSZ    For example: `2017-07-01T11:05:06+10:00`  ## Timezones Some requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls. ### Explicitly provide an ISO 8601 timestamp with timezone information For API calls that allow for a timestamp to be specified, we use that exact timestamp.    For example: `2017-07-01T11:05:06+10:00`  ## Pagination Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header.    For example:      Link: <https://api.abr.ato.gov.au/individuals?page=2>; rel=\"next\",           <https://api.abr.ato.gov.au/individuals?page=34>; rel=\"last\"  `rel=\"next\"` states that the next page is `page=2`. This makes sense, since by default, all paginated queries start at page `1`. `rel=\"last\"` provides some more information, stating that the last page of results is on `page 34`. Accordingly, we have 33 more pages of information that we can consume. ## Parameters Many API methods take optional parameters:      GET /individuals/1234/addresses/?addressType='Mailing'  In this example, the '1234' value is provided for the `:partyId` parameter in the path while `:addressType` is passed in the query string. For POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded as JSON with a Content-Type of 'application/json'. ## Metadata The API provides **metadata services** that you can use to discover information about the classifcation schemes and values used by the Registry.    For example:      GET /classifications/roles    Sample response:      [       {         \"id\": \"123e4567-e89b-12d3-a456-426655440001\",         \"role\": \"Director\",         \"roleDescription\": \"An individual responsible for managing a company's ...\",         \"relationship\": \"Directorship\",         \"reciprocalRole\": \"Company\",         \"reciprocalRoleDescription\": \"An incorporated legal entity.\"       },       {         ...       }     ]  ## Root Endpoint You can issue a GET request to the root endpoint (also known as the service root) to get all the endpoint categories that the REST API supports:      curl https://api.abr.ato.gov.au  ## Authentication The Business Registries API supports API Key authentication.    When you sign up for an account, you are given your first API key. You can generate additional API keys, and delete   API keys (as you may need to rotate your keys in the future). You authenticate to the Business Registries API by   providing your secret key in the request header.    **Note:** Some requests will return `404 Not Found`, instead of `403 Permission Denied`. This is to prevent the   accidental leakage of information to unauthorised users. 
 *
 * The version of the OpenAPI document: 0.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ElectronicAddress;
import org.openapitools.client.model.IndividualAddress;
import org.openapitools.client.model.IndividualName;
import org.openapitools.client.model.PartyId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Individual resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:54.743058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Individual {
  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<IndividualAddress> addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private LocalDate dateOfBirth;

  public static final String SERIALIZED_NAME_ELECTRONIC_ADDRESSES = "electronicAddresses";
  @SerializedName(SERIALIZED_NAME_ELECTRONIC_ADDRESSES)
  private List<ElectronicAddress> electronicAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_FROM_DATE = "fromDate";
  @SerializedName(SERIALIZED_NAME_FROM_DATE)
  private OffsetDateTime fromDate;

  /**
   * The individual&#39;s gender.
   */
  @JsonAdapter(GenderEnum.Adapter.class)
  public enum GenderEnum {
    FEMALE("Female"),
    
    MALE("Male"),
    
    NOT_APPLICABLE("Not Applicable"),
    
    NOT_KNOWN("Not Known");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private GenderEnum gender = GenderEnum.MALE;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private PartyId id;

  public static final String SERIALIZED_NAME_NAMES = "names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  private List<IndividualName> names = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLACE_OF_BIRTH = "placeOfBirth";
  @SerializedName(SERIALIZED_NAME_PLACE_OF_BIRTH)
  private String placeOfBirth;

  public static final String SERIALIZED_NAME_TO_DATE = "toDate";
  @SerializedName(SERIALIZED_NAME_TO_DATE)
  private OffsetDateTime toDate;

  public Individual() {
  }

  public Individual(
     OffsetDateTime fromDate, 
     PartyId id, 
     OffsetDateTime toDate
  ) {
    this();
    this.fromDate = fromDate;
    this.id = id;
    this.toDate = toDate;
  }

  public Individual addresses(List<IndividualAddress> addresses) {
    this.addresses = addresses;
    return this;
  }

  public Individual addAddressesItem(IndividualAddress addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

  /**
   * Get addresses
   * @return addresses
   */
  @javax.annotation.Nullable
  public List<IndividualAddress> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<IndividualAddress> addresses) {
    this.addresses = addresses;
  }


  public Individual dateOfBirth(LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * The individual&#39;s date of birth, for example, &#x60;1979-01-13&#x60; (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format).
   * @return dateOfBirth
   */
  @javax.annotation.Nonnull
  public LocalDate getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public Individual electronicAddresses(List<ElectronicAddress> electronicAddresses) {
    this.electronicAddresses = electronicAddresses;
    return this;
  }

  public Individual addElectronicAddressesItem(ElectronicAddress electronicAddressesItem) {
    if (this.electronicAddresses == null) {
      this.electronicAddresses = new ArrayList<>();
    }
    this.electronicAddresses.add(electronicAddressesItem);
    return this;
  }

  /**
   * Get electronicAddresses
   * @return electronicAddresses
   */
  @javax.annotation.Nullable
  public List<ElectronicAddress> getElectronicAddresses() {
    return electronicAddresses;
  }

  public void setElectronicAddresses(List<ElectronicAddress> electronicAddresses) {
    this.electronicAddresses = electronicAddresses;
  }


  /**
   * The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
   * @return fromDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFromDate() {
    return fromDate;
  }



  public Individual gender(GenderEnum gender) {
    this.gender = gender;
    return this;
  }

  /**
   * The individual&#39;s gender.
   * @return gender
   */
  @javax.annotation.Nullable
  public GenderEnum getGender() {
    return gender;
  }

  public void setGender(GenderEnum gender) {
    this.gender = gender;
  }


  /**
   * The party&#39;s unique identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public PartyId getId() {
    return id;
  }



  public Individual names(List<IndividualName> names) {
    this.names = names;
    return this;
  }

  public Individual addNamesItem(IndividualName namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<>();
    }
    this.names.add(namesItem);
    return this;
  }

  /**
   * Get names
   * @return names
   */
  @javax.annotation.Nullable
  public List<IndividualName> getNames() {
    return names;
  }

  public void setNames(List<IndividualName> names) {
    this.names = names;
  }


  public Individual placeOfBirth(String placeOfBirth) {
    this.placeOfBirth = placeOfBirth;
    return this;
  }

  /**
   * The individual&#39;s place of birth, for example, &#x60;Tamworth&#x60;.
   * @return placeOfBirth
   */
  @javax.annotation.Nonnull
  public String getPlaceOfBirth() {
    return placeOfBirth;
  }

  public void setPlaceOfBirth(String placeOfBirth) {
    this.placeOfBirth = placeOfBirth;
  }


  /**
   * The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
   * @return toDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getToDate() {
    return toDate;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Individual individual = (Individual) o;
    return Objects.equals(this.addresses, individual.addresses) &&
        Objects.equals(this.dateOfBirth, individual.dateOfBirth) &&
        Objects.equals(this.electronicAddresses, individual.electronicAddresses) &&
        Objects.equals(this.fromDate, individual.fromDate) &&
        Objects.equals(this.gender, individual.gender) &&
        Objects.equals(this.id, individual.id) &&
        Objects.equals(this.names, individual.names) &&
        Objects.equals(this.placeOfBirth, individual.placeOfBirth) &&
        Objects.equals(this.toDate, individual.toDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addresses, dateOfBirth, electronicAddresses, fromDate, gender, id, names, placeOfBirth, toDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Individual {\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    electronicAddresses: ").append(toIndentedString(electronicAddresses)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    placeOfBirth: ").append(toIndentedString(placeOfBirth)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addresses");
    openapiFields.add("dateOfBirth");
    openapiFields.add("electronicAddresses");
    openapiFields.add("fromDate");
    openapiFields.add("gender");
    openapiFields.add("id");
    openapiFields.add("names");
    openapiFields.add("placeOfBirth");
    openapiFields.add("toDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dateOfBirth");
    openapiRequiredFields.add("placeOfBirth");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Individual
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Individual.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Individual is not found in the empty JSON string", Individual.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Individual.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Individual` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Individual.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("addresses") != null && !jsonObj.get("addresses").isJsonNull()) {
        JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("addresses");
        if (jsonArrayaddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
          }

          // validate the optional field `addresses` (array)
          for (int i = 0; i < jsonArrayaddresses.size(); i++) {
            IndividualAddress.validateJsonElement(jsonArrayaddresses.get(i));
          };
        }
      }
      if (jsonObj.get("electronicAddresses") != null && !jsonObj.get("electronicAddresses").isJsonNull()) {
        JsonArray jsonArrayelectronicAddresses = jsonObj.getAsJsonArray("electronicAddresses");
        if (jsonArrayelectronicAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("electronicAddresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `electronicAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("electronicAddresses").toString()));
          }

          // validate the optional field `electronicAddresses` (array)
          for (int i = 0; i < jsonArrayelectronicAddresses.size(); i++) {
            ElectronicAddress.validateJsonElement(jsonArrayelectronicAddresses.get(i));
          };
        }
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      // validate the optional field `gender`
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) {
        GenderEnum.validateJsonElement(jsonObj.get("gender"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        PartyId.validateJsonElement(jsonObj.get("id"));
      }
      if (jsonObj.get("names") != null && !jsonObj.get("names").isJsonNull()) {
        JsonArray jsonArraynames = jsonObj.getAsJsonArray("names");
        if (jsonArraynames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("names").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `names` to be an array in the JSON string but got `%s`", jsonObj.get("names").toString()));
          }

          // validate the optional field `names` (array)
          for (int i = 0; i < jsonArraynames.size(); i++) {
            IndividualName.validateJsonElement(jsonArraynames.get(i));
          };
        }
      }
      if (!jsonObj.get("placeOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeOfBirth").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Individual.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Individual' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Individual> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Individual.class));

       return (TypeAdapter<T>) new TypeAdapter<Individual>() {
           @Override
           public void write(JsonWriter out, Individual value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Individual read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Individual given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Individual
   * @throws IOException if the JSON string is invalid with respect to Individual
   */
  public static Individual fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Individual.class);
  }

  /**
   * Convert an instance of Individual to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

