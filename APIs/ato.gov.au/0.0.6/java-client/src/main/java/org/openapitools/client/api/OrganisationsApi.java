/*
 * Business Registries
 * # Introduction The Business Registries API is built on HTTP. The API is RESTful. It has predictable resource URIs.    The API is documented in <a target=\"_blank\" href=\"https://github.com/OAI/OpenAPI-Specification\">OpenAPI</a> format.   In addition to the standard OpenAPI syntax we use a few   <a target=\"_blank\" href=\"https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md\">vendor extensions</a>.  # Overview The following sections describe the resources that make up the Business Registries REST API. ## Current Version By default, all requests to https://api.abr.ato.gov.au receive the `v1` version of the REST API. We encourage you to explicitly request this version via the `Accept` header.      Accept: application/vnd.abr-ato.v1+json  ## Schema All API access is over HTTPS, and accessed from https://api.abr.ato.gov.au. All data is sent and received as JSON. Blank fields are included.    All dates use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DD    For example: `2017-07-01` (the 1st of July 2017)    All timestamps use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:      YYYY-MM-DDTHH:MM:SSZ    For example: `2017-07-01T11:05:06+10:00`  ## Timezones Some requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls. ### Explicitly provide an ISO 8601 timestamp with timezone information For API calls that allow for a timestamp to be specified, we use that exact timestamp.    For example: `2017-07-01T11:05:06+10:00`  ## Pagination Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header.    For example:      Link: <https://api.abr.ato.gov.au/individuals?page=2>; rel=\"next\",           <https://api.abr.ato.gov.au/individuals?page=34>; rel=\"last\"  `rel=\"next\"` states that the next page is `page=2`. This makes sense, since by default, all paginated queries start at page `1`. `rel=\"last\"` provides some more information, stating that the last page of results is on `page 34`. Accordingly, we have 33 more pages of information that we can consume. ## Parameters Many API methods take optional parameters:      GET /individuals/1234/addresses/?addressType='Mailing'  In this example, the '1234' value is provided for the `:partyId` parameter in the path while `:addressType` is passed in the query string. For POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded as JSON with a Content-Type of 'application/json'. ## Metadata The API provides **metadata services** that you can use to discover information about the classifcation schemes and values used by the Registry.    For example:      GET /classifications/roles    Sample response:      [       {         \"id\": \"123e4567-e89b-12d3-a456-426655440001\",         \"role\": \"Director\",         \"roleDescription\": \"An individual responsible for managing a company's ...\",         \"relationship\": \"Directorship\",         \"reciprocalRole\": \"Company\",         \"reciprocalRoleDescription\": \"An incorporated legal entity.\"       },       {         ...       }     ]  ## Root Endpoint You can issue a GET request to the root endpoint (also known as the service root) to get all the endpoint categories that the REST API supports:      curl https://api.abr.ato.gov.au  ## Authentication The Business Registries API supports API Key authentication.    When you sign up for an account, you are given your first API key. You can generate additional API keys, and delete   API keys (as you may need to rotate your keys in the future). You authenticate to the Business Registries API by   providing your secret key in the request header.    **Note:** Some requests will return `404 Not Found`, instead of `403 Permission Denied`. This is to prevent the   accidental leakage of information to unauthorised users. 
 *
 * The version of the OpenAPI document: 0.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FailedPrecondition;
import org.openapitools.client.model.InvalidArgument;
import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.Organisation;
import org.openapitools.client.model.Unauthenticated;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganisationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganisationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganisationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for organisationsGet
     * @param apiKey The API key. (required)
     * @param registeredIdentifier The registered identifier, for example, &#x60;ACN&#x60; or &#x60;ABN&#x60;. (optional)
     * @param identifier The identifier, for example, &#x60;123456789&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of organisations was retrieved successfully </td><td>  * Link - Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header. For example:      Link: &lt;https://api.abr.ato.gov.au/individuals?page&#x3D;2&gt;; rel&#x3D;\&quot;next\&quot;,           &lt;https://api.abr.ato.gov.au/individuals?page&#x3D;34&gt;; rel&#x3D;\&quot;last\&quot;  &#x60;rel&#x3D;\&quot;next\&quot;&#x60; states that the next page is &#x60;page&#x3D;2&#x60;. This makes sense, since by default, all paginated queries start at page &#x60;1&#x60;. &#x60;rel&#x3D;\&quot;last\&quot;&#x60; provides some more information, stating that the last page of results is on &#x60;page 34&#x60;. Accordingly, we have 33 more pages of information that we can consume.  <br>  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsGetCall(String apiKey, String registeredIdentifier, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (registeredIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("registeredIdentifier", registeredIdentifier));
        }

        if (identifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifier", identifier));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsGetValidateBeforeCall(String apiKey, String registeredIdentifier, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling organisationsGet(Async)");
        }

        return organisationsGetCall(apiKey, registeredIdentifier, identifier, _callback);

    }

    /**
     * Retrieve a list of organisations
     * Retrieve a list of organisations 
     * @param apiKey The API key. (required)
     * @param registeredIdentifier The registered identifier, for example, &#x60;ACN&#x60; or &#x60;ABN&#x60;. (optional)
     * @param identifier The identifier, for example, &#x60;123456789&#x60;. (optional)
     * @return List&lt;Organisation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of organisations was retrieved successfully </td><td>  * Link - Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header. For example:      Link: &lt;https://api.abr.ato.gov.au/individuals?page&#x3D;2&gt;; rel&#x3D;\&quot;next\&quot;,           &lt;https://api.abr.ato.gov.au/individuals?page&#x3D;34&gt;; rel&#x3D;\&quot;last\&quot;  &#x60;rel&#x3D;\&quot;next\&quot;&#x60; states that the next page is &#x60;page&#x3D;2&#x60;. This makes sense, since by default, all paginated queries start at page &#x60;1&#x60;. &#x60;rel&#x3D;\&quot;last\&quot;&#x60; provides some more information, stating that the last page of results is on &#x60;page 34&#x60;. Accordingly, we have 33 more pages of information that we can consume.  <br>  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Organisation> organisationsGet(String apiKey, String registeredIdentifier, String identifier) throws ApiException {
        ApiResponse<List<Organisation>> localVarResp = organisationsGetWithHttpInfo(apiKey, registeredIdentifier, identifier);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of organisations
     * Retrieve a list of organisations 
     * @param apiKey The API key. (required)
     * @param registeredIdentifier The registered identifier, for example, &#x60;ACN&#x60; or &#x60;ABN&#x60;. (optional)
     * @param identifier The identifier, for example, &#x60;123456789&#x60;. (optional)
     * @return ApiResponse&lt;List&lt;Organisation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of organisations was retrieved successfully </td><td>  * Link - Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header. For example:      Link: &lt;https://api.abr.ato.gov.au/individuals?page&#x3D;2&gt;; rel&#x3D;\&quot;next\&quot;,           &lt;https://api.abr.ato.gov.au/individuals?page&#x3D;34&gt;; rel&#x3D;\&quot;last\&quot;  &#x60;rel&#x3D;\&quot;next\&quot;&#x60; states that the next page is &#x60;page&#x3D;2&#x60;. This makes sense, since by default, all paginated queries start at page &#x60;1&#x60;. &#x60;rel&#x3D;\&quot;last\&quot;&#x60; provides some more information, stating that the last page of results is on &#x60;page 34&#x60;. Accordingly, we have 33 more pages of information that we can consume.  <br>  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Organisation>> organisationsGetWithHttpInfo(String apiKey, String registeredIdentifier, String identifier) throws ApiException {
        okhttp3.Call localVarCall = organisationsGetValidateBeforeCall(apiKey, registeredIdentifier, identifier, null);
        Type localVarReturnType = new TypeToken<List<Organisation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of organisations (asynchronously)
     * Retrieve a list of organisations 
     * @param apiKey The API key. (required)
     * @param registeredIdentifier The registered identifier, for example, &#x60;ACN&#x60; or &#x60;ABN&#x60;. (optional)
     * @param identifier The identifier, for example, &#x60;123456789&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of organisations was retrieved successfully </td><td>  * Link - Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header. For example:      Link: &lt;https://api.abr.ato.gov.au/individuals?page&#x3D;2&gt;; rel&#x3D;\&quot;next\&quot;,           &lt;https://api.abr.ato.gov.au/individuals?page&#x3D;34&gt;; rel&#x3D;\&quot;last\&quot;  &#x60;rel&#x3D;\&quot;next\&quot;&#x60; states that the next page is &#x60;page&#x3D;2&#x60;. This makes sense, since by default, all paginated queries start at page &#x60;1&#x60;. &#x60;rel&#x3D;\&quot;last\&quot;&#x60; provides some more information, stating that the last page of results is on &#x60;page 34&#x60;. Accordingly, we have 33 more pages of information that we can consume.  <br>  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsGetAsync(String apiKey, String registeredIdentifier, String identifier, final ApiCallback<List<Organisation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsGetValidateBeforeCall(apiKey, registeredIdentifier, identifier, _callback);
        Type localVarReturnType = new TypeToken<List<Organisation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsPartyIdDelete
     * @param apiKey The API key. (required)
     * @param partyId The party identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Organisation was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request can not be executed in the current system state </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsPartyIdDeleteCall(String apiKey, String partyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{partyId}"
            .replace("{" + "partyId" + "}", localVarApiClient.escapeString(partyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsPartyIdDeleteValidateBeforeCall(String apiKey, String partyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling organisationsPartyIdDelete(Async)");
        }

        // verify the required parameter 'partyId' is set
        if (partyId == null) {
            throw new ApiException("Missing the required parameter 'partyId' when calling organisationsPartyIdDelete(Async)");
        }

        return organisationsPartyIdDeleteCall(apiKey, partyId, _callback);

    }

    /**
     * Delete an organisation
     * Delete an organisation with the specified identifier 
     * @param apiKey The API key. (required)
     * @param partyId The party identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Organisation was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request can not be executed in the current system state </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsPartyIdDelete(String apiKey, String partyId) throws ApiException {
        organisationsPartyIdDeleteWithHttpInfo(apiKey, partyId);
    }

    /**
     * Delete an organisation
     * Delete an organisation with the specified identifier 
     * @param apiKey The API key. (required)
     * @param partyId The party identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Organisation was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request can not be executed in the current system state </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsPartyIdDeleteWithHttpInfo(String apiKey, String partyId) throws ApiException {
        okhttp3.Call localVarCall = organisationsPartyIdDeleteValidateBeforeCall(apiKey, partyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an organisation (asynchronously)
     * Delete an organisation with the specified identifier 
     * @param apiKey The API key. (required)
     * @param partyId The party identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Organisation was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request can not be executed in the current system state </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsPartyIdDeleteAsync(String apiKey, String partyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsPartyIdDeleteValidateBeforeCall(apiKey, partyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsPartyIdGet
     * @param apiKey The API key. (required)
     * @param partyId The party identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Individual was retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsPartyIdGetCall(String apiKey, String partyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{partyId}"
            .replace("{" + "partyId" + "}", localVarApiClient.escapeString(partyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsPartyIdGetValidateBeforeCall(String apiKey, String partyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling organisationsPartyIdGet(Async)");
        }

        // verify the required parameter 'partyId' is set
        if (partyId == null) {
            throw new ApiException("Missing the required parameter 'partyId' when calling organisationsPartyIdGet(Async)");
        }

        return organisationsPartyIdGetCall(apiKey, partyId, _callback);

    }

    /**
     * Retrieve an organisation
     * Retrieve an organisation with the specified identifier 
     * @param apiKey The API key. (required)
     * @param partyId The party identifier. (required)
     * @return Organisation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Individual was retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public Organisation organisationsPartyIdGet(String apiKey, String partyId) throws ApiException {
        ApiResponse<Organisation> localVarResp = organisationsPartyIdGetWithHttpInfo(apiKey, partyId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an organisation
     * Retrieve an organisation with the specified identifier 
     * @param apiKey The API key. (required)
     * @param partyId The party identifier. (required)
     * @return ApiResponse&lt;Organisation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Individual was retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organisation> organisationsPartyIdGetWithHttpInfo(String apiKey, String partyId) throws ApiException {
        okhttp3.Call localVarCall = organisationsPartyIdGetValidateBeforeCall(apiKey, partyId, null);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an organisation (asynchronously)
     * Retrieve an organisation with the specified identifier 
     * @param apiKey The API key. (required)
     * @param partyId The party identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Individual was retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsPartyIdGetAsync(String apiKey, String partyId, final ApiCallback<Organisation> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsPartyIdGetValidateBeforeCall(apiKey, partyId, _callback);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsPartyIdPut
     * @param apiKey The API key. (required)
     * @param partyId The party identifier. (required)
     * @param organisation Organisation resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organisation was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The client specified an invalid argument </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsPartyIdPutCall(String apiKey, String partyId, Organisation organisation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organisation;

        // create path and map variables
        String localVarPath = "/organisations/{partyId}"
            .replace("{" + "partyId" + "}", localVarApiClient.escapeString(partyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsPartyIdPutValidateBeforeCall(String apiKey, String partyId, Organisation organisation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling organisationsPartyIdPut(Async)");
        }

        // verify the required parameter 'partyId' is set
        if (partyId == null) {
            throw new ApiException("Missing the required parameter 'partyId' when calling organisationsPartyIdPut(Async)");
        }

        // verify the required parameter 'organisation' is set
        if (organisation == null) {
            throw new ApiException("Missing the required parameter 'organisation' when calling organisationsPartyIdPut(Async)");
        }

        return organisationsPartyIdPutCall(apiKey, partyId, organisation, _callback);

    }

    /**
     * Update an organisation
     * Update an organisation 
     * @param apiKey The API key. (required)
     * @param partyId The party identifier. (required)
     * @param organisation Organisation resource (required)
     * @return Organisation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organisation was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The client specified an invalid argument </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public Organisation organisationsPartyIdPut(String apiKey, String partyId, Organisation organisation) throws ApiException {
        ApiResponse<Organisation> localVarResp = organisationsPartyIdPutWithHttpInfo(apiKey, partyId, organisation);
        return localVarResp.getData();
    }

    /**
     * Update an organisation
     * Update an organisation 
     * @param apiKey The API key. (required)
     * @param partyId The party identifier. (required)
     * @param organisation Organisation resource (required)
     * @return ApiResponse&lt;Organisation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organisation was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The client specified an invalid argument </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organisation> organisationsPartyIdPutWithHttpInfo(String apiKey, String partyId, Organisation organisation) throws ApiException {
        okhttp3.Call localVarCall = organisationsPartyIdPutValidateBeforeCall(apiKey, partyId, organisation, null);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an organisation (asynchronously)
     * Update an organisation 
     * @param apiKey The API key. (required)
     * @param partyId The party identifier. (required)
     * @param organisation Organisation resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organisation was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The client specified an invalid argument </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsPartyIdPutAsync(String apiKey, String partyId, Organisation organisation, final ApiCallback<Organisation> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsPartyIdPutValidateBeforeCall(apiKey, partyId, organisation, _callback);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsPost
     * @param apiKey The API key. (required)
     * @param organisation Organisation resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Organisation was created </td><td>  * Location - A [Location](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.30) header pointing to the location of the new resource.  <br>  </td></tr>
        <tr><td> 400 </td><td> The client specified an invalid argument </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsPostCall(String apiKey, Organisation organisation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organisation;

        // create path and map variables
        String localVarPath = "/organisations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsPostValidateBeforeCall(String apiKey, Organisation organisation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling organisationsPost(Async)");
        }

        // verify the required parameter 'organisation' is set
        if (organisation == null) {
            throw new ApiException("Missing the required parameter 'organisation' when calling organisationsPost(Async)");
        }

        return organisationsPostCall(apiKey, organisation, _callback);

    }

    /**
     * Create an organisation
     * Create an organisation 
     * @param apiKey The API key. (required)
     * @param organisation Organisation resource (required)
     * @return Organisation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Organisation was created </td><td>  * Location - A [Location](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.30) header pointing to the location of the new resource.  <br>  </td></tr>
        <tr><td> 400 </td><td> The client specified an invalid argument </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
     </table>
     */
    public Organisation organisationsPost(String apiKey, Organisation organisation) throws ApiException {
        ApiResponse<Organisation> localVarResp = organisationsPostWithHttpInfo(apiKey, organisation);
        return localVarResp.getData();
    }

    /**
     * Create an organisation
     * Create an organisation 
     * @param apiKey The API key. (required)
     * @param organisation Organisation resource (required)
     * @return ApiResponse&lt;Organisation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Organisation was created </td><td>  * Location - A [Location](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.30) header pointing to the location of the new resource.  <br>  </td></tr>
        <tr><td> 400 </td><td> The client specified an invalid argument </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organisation> organisationsPostWithHttpInfo(String apiKey, Organisation organisation) throws ApiException {
        okhttp3.Call localVarCall = organisationsPostValidateBeforeCall(apiKey, organisation, null);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an organisation (asynchronously)
     * Create an organisation 
     * @param apiKey The API key. (required)
     * @param organisation Organisation resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Organisation was created </td><td>  * Location - A [Location](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.30) header pointing to the location of the new resource.  <br>  </td></tr>
        <tr><td> 400 </td><td> The client specified an invalid argument </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request not authenticated due to missing, invalid, or expired token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsPostAsync(String apiKey, Organisation organisation, final ApiCallback<Organisation> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsPostValidateBeforeCall(apiKey, organisation, _callback);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
