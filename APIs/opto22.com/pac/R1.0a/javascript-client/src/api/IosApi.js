/**
 * PAC Control REST API
 * #### Revised: 6/15/2018  ### Overview This API provides secure access to a SNAP-PAC-R or -S series controller's variable and I/O tags. Confidentiality for API transactions is provided by HTTPS. Authentication uses HTTP Basic Authentication with an API key. An API key ID is submitted in the Basic Authentication userid field and API key value in the password field.  **For more information visit:** [developer.opto22.com](http://developer.opto22.com)  ### Examples  **Read an array** of all the integer32 variables defined in the PAC's strategy. For example, on your SNAP-PAC-R or -S series controller at IP address 1.2.3.4, you would use the URL:   ``` https://1.2.3.4/api/v1/device/strategy/vars/int32s ``` and provide appropriate authentication. The GET response will be a JSON array of name-value  pairs such as:  ```json [ { \"nMyVeryFavoriteNumber\": 22 },   { \"nWidgetsProducedToday\": 22222 },   { \"DELAY_LOOP_TIME_IN_MSECS\"  : 200 } ] ``` **Read the engineering units** (EU) of an analog input point configured in the PAC's strategy. For an analog input (I/O point) named aiTemperatureInDegreesF, use   `https://1.2.3.4/api/v1/device/strategy/ios/analogInputs/aiTemperatureInDegreesF/eu`  The GET response will be a single JSON name-value pair such as: ```json { \"value\": 72.22 } ```      ### Note on packet sizes: When doing POSTs or GETs, the JSON payload in the body should not exceed 3k (3072 bytes). 
 *
 * The version of the OpenAPI document: R1.0a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DigitalPointStateObject from '../model/DigitalPointStateObject';
import DigitalPointStateVar from '../model/DigitalPointStateVar';
import ErrorResponse400BadAdminOrValue from '../model/ErrorResponse400BadAdminOrValue';
import ErrorResponse401BadKeyForBasicAuth from '../model/ErrorResponse401BadKeyForBasicAuth';
import ErrorResponse404NotFound from '../model/ErrorResponse404NotFound';
import FloatValueObject from '../model/FloatValueObject';
import FloatVar from '../model/FloatVar';

/**
* Ios service.
* @module api/IosApi
* @version R1.0a
*/
export default class IosApi {

    /**
    * Constructs a new IosApi. 
    * @alias module:api/IosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the readAnalogInputEu_0 operation.
     * @callback module:api/IosApi~readAnalogInputEu_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FloatValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reads the value in engineering units (EU) of the specified analog input
     * @param {String} ioName Name of the analog input point to read
     * @param {module:api/IosApi~readAnalogInputEu_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FloatValueObject}
     */
    readAnalogInputEu_0(ioName, callback) {
      let postBody = null;
      // verify the required parameter 'ioName' is set
      if (ioName === undefined || ioName === null) {
        throw new Error("Missing the required parameter 'ioName' when calling readAnalogInputEu_0");
      }

      let pathParams = {
        'ioName': ioName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FloatValueObject;
      return this.apiClient.callApi(
        '/device/strategy/ios/analogInputs/{ioName}/eu', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readAnalogInputs_0 operation.
     * @callback module:api/IosApi~readAnalogInputs_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FloatVar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and engineering units (EU) for all analog input points in the strategy
     * @param {module:api/IosApi~readAnalogInputs_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FloatVar>}
     */
    readAnalogInputs_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FloatVar];
      return this.apiClient.callApi(
        '/device/strategy/ios/analogInputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readAnalogOutputEu_0 operation.
     * @callback module:api/IosApi~readAnalogOutputEu_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FloatValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reads the value in engineering units (EU) of the specified analog output
     * @param {String} ioName Name of analog output point to read
     * @param {module:api/IosApi~readAnalogOutputEu_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FloatValueObject}
     */
    readAnalogOutputEu_0(ioName, callback) {
      let postBody = null;
      // verify the required parameter 'ioName' is set
      if (ioName === undefined || ioName === null) {
        throw new Error("Missing the required parameter 'ioName' when calling readAnalogOutputEu_0");
      }

      let pathParams = {
        'ioName': ioName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FloatValueObject;
      return this.apiClient.callApi(
        '/device/strategy/ios/analogOutputs/{ioName}/eu', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readAnalogOutputs_0 operation.
     * @callback module:api/IosApi~readAnalogOutputs_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FloatVar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and engineering units (EU) for all analog output points in the strategy
     * @param {module:api/IosApi~readAnalogOutputs_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FloatVar>}
     */
    readAnalogOutputs_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FloatVar];
      return this.apiClient.callApi(
        '/device/strategy/ios/analogOutputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readDigitalInputState_0 operation.
     * @callback module:api/IosApi~readDigitalInputState_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DigitalPointStateObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the specified digital input point's state (true = on, false = off)
     * @param {String} ioName Name of the digital input point to read
     * @param {module:api/IosApi~readDigitalInputState_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DigitalPointStateObject}
     */
    readDigitalInputState_0(ioName, callback) {
      let postBody = null;
      // verify the required parameter 'ioName' is set
      if (ioName === undefined || ioName === null) {
        throw new Error("Missing the required parameter 'ioName' when calling readDigitalInputState_0");
      }

      let pathParams = {
        'ioName': ioName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DigitalPointStateObject;
      return this.apiClient.callApi(
        '/device/strategy/ios/digitalInputs/{ioName}/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readDigitalInputs_0 operation.
     * @callback module:api/IosApi~readDigitalInputs_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DigitalPointStateVar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and state (true = on, false = off) of all digital input points in the strategy. If there is no strategy in the controller, or the strategy includes no digital inputs, the returned array will be empty.
     * @param {module:api/IosApi~readDigitalInputs_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DigitalPointStateVar>}
     */
    readDigitalInputs_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DigitalPointStateVar];
      return this.apiClient.callApi(
        '/device/strategy/ios/digitalInputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readDigitalOutputState_0 operation.
     * @callback module:api/IosApi~readDigitalOutputState_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DigitalPointStateObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the specified digital output point's state (true = on, false = off)
     * @param {String} ioName Name of the digit output point to read
     * @param {module:api/IosApi~readDigitalOutputState_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DigitalPointStateObject}
     */
    readDigitalOutputState_0(ioName, callback) {
      let postBody = null;
      // verify the required parameter 'ioName' is set
      if (ioName === undefined || ioName === null) {
        throw new Error("Missing the required parameter 'ioName' when calling readDigitalOutputState_0");
      }

      let pathParams = {
        'ioName': ioName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DigitalPointStateObject;
      return this.apiClient.callApi(
        '/device/strategy/ios/digitalOutputs/{ioName}/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readDigitalOutputs_0 operation.
     * @callback module:api/IosApi~readDigitalOutputs_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DigitalPointStateVar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and state (true = on, false = off) of all digital output points in the strategy
     * @param {module:api/IosApi~readDigitalOutputs_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DigitalPointStateVar>}
     */
    readDigitalOutputs_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DigitalPointStateVar];
      return this.apiClient.callApi(
        '/device/strategy/ios/digitalOutputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeAnalogOutputEu_0 operation.
     * @callback module:api/IosApi~writeAnalogOutputEu_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of the specified analog output point
     * @param {String} ioName Name of the analog output point to write
     * @param {module:model/FloatValueObject} body Value to write
     * @param {module:api/IosApi~writeAnalogOutputEu_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    writeAnalogOutputEu_0(ioName, body, callback) {
      let postBody = body;
      // verify the required parameter 'ioName' is set
      if (ioName === undefined || ioName === null) {
        throw new Error("Missing the required parameter 'ioName' when calling writeAnalogOutputEu_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling writeAnalogOutputEu_0");
      }

      let pathParams = {
        'ioName': ioName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/ios/analogOutputs/{ioName}/eu', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeDigitalOutputState_0 operation.
     * @callback module:api/IosApi~writeDigitalOutputState_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of the specified digital output point
     * @param {String} ioName Name of the digital output point to write
     * @param {module:model/DigitalPointStateObject} body Value to write
     * @param {module:api/IosApi~writeDigitalOutputState_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    writeDigitalOutputState_0(ioName, body, callback) {
      let postBody = body;
      // verify the required parameter 'ioName' is set
      if (ioName === undefined || ioName === null) {
        throw new Error("Missing the required parameter 'ioName' when calling writeDigitalOutputState_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling writeDigitalOutputState_0");
      }

      let pathParams = {
        'ioName': ioName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/ios/digitalOutputs/{ioName}/state', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
