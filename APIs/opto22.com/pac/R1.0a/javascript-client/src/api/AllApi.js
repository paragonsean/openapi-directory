/**
 * PAC Control REST API
 * #### Revised: 6/15/2018  ### Overview This API provides secure access to a SNAP-PAC-R or -S series controller's variable and I/O tags. Confidentiality for API transactions is provided by HTTPS. Authentication uses HTTP Basic Authentication with an API key. An API key ID is submitted in the Basic Authentication userid field and API key value in the password field.  **For more information visit:** [developer.opto22.com](http://developer.opto22.com)  ### Examples  **Read an array** of all the integer32 variables defined in the PAC's strategy. For example, on your SNAP-PAC-R or -S series controller at IP address 1.2.3.4, you would use the URL:   ``` https://1.2.3.4/api/v1/device/strategy/vars/int32s ``` and provide appropriate authentication. The GET response will be a JSON array of name-value  pairs such as:  ```json [ { \"nMyVeryFavoriteNumber\": 22 },   { \"nWidgetsProducedToday\": 22222 },   { \"DELAY_LOOP_TIME_IN_MSECS\"  : 200 } ] ``` **Read the engineering units** (EU) of an analog input point configured in the PAC's strategy. For an analog input (I/O point) named aiTemperatureInDegreesF, use   `https://1.2.3.4/api/v1/device/strategy/ios/analogInputs/aiTemperatureInDegreesF/eu`  The GET response will be a single JSON name-value pair such as: ```json { \"value\": 72.22 } ```      ### Note on packet sizes: When doing POSTs or GETs, the JSON payload in the body should not exceed 3k (3072 bytes). 
 *
 * The version of the OpenAPI document: R1.0a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ControllerResponse from '../model/ControllerResponse';
import DigitalPointStateObject from '../model/DigitalPointStateObject';
import DigitalPointStateVar from '../model/DigitalPointStateVar';
import ErrorResponse200OKish from '../model/ErrorResponse200OKish';
import ErrorResponse400BadAdminOrValue from '../model/ErrorResponse400BadAdminOrValue';
import ErrorResponse401BadKeyForBasicAuth from '../model/ErrorResponse401BadKeyForBasicAuth';
import ErrorResponse404NotFound from '../model/ErrorResponse404NotFound';
import FloatValueObject from '../model/FloatValueObject';
import FloatVar from '../model/FloatVar';
import Int32ValueObject from '../model/Int32ValueObject';
import Int32Var from '../model/Int32Var';
import Int64StringValueObject from '../model/Int64StringValueObject';
import Int64ValueObject from '../model/Int64ValueObject';
import Int64Var from '../model/Int64Var';
import Int64VarAsString from '../model/Int64VarAsString';
import StrategyResponse from '../model/StrategyResponse';
import StringValueObject from '../model/StringValueObject';
import StringVar from '../model/StringVar';
import TableDef from '../model/TableDef';

/**
* All service.
* @module api/AllApi
* @version R1.0a
*/
export default class AllApi {

    /**
    * Constructs a new AllApi. 
    * @alias module:api/AllApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the readAnalogInputEu operation.
     * @callback module:api/AllApi~readAnalogInputEuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FloatValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reads the value in engineering units (EU) of the specified analog input
     * @param {String} ioName Name of the analog input point to read
     * @param {module:api/AllApi~readAnalogInputEuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FloatValueObject}
     */
    readAnalogInputEu(ioName, callback) {
      let postBody = null;
      // verify the required parameter 'ioName' is set
      if (ioName === undefined || ioName === null) {
        throw new Error("Missing the required parameter 'ioName' when calling readAnalogInputEu");
      }

      let pathParams = {
        'ioName': ioName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FloatValueObject;
      return this.apiClient.callApi(
        '/device/strategy/ios/analogInputs/{ioName}/eu', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readAnalogInputs operation.
     * @callback module:api/AllApi~readAnalogInputsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FloatVar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and engineering units (EU) for all analog input points in the strategy
     * @param {module:api/AllApi~readAnalogInputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FloatVar>}
     */
    readAnalogInputs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FloatVar];
      return this.apiClient.callApi(
        '/device/strategy/ios/analogInputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readAnalogOutputEu operation.
     * @callback module:api/AllApi~readAnalogOutputEuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FloatValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reads the value in engineering units (EU) of the specified analog output
     * @param {String} ioName Name of analog output point to read
     * @param {module:api/AllApi~readAnalogOutputEuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FloatValueObject}
     */
    readAnalogOutputEu(ioName, callback) {
      let postBody = null;
      // verify the required parameter 'ioName' is set
      if (ioName === undefined || ioName === null) {
        throw new Error("Missing the required parameter 'ioName' when calling readAnalogOutputEu");
      }

      let pathParams = {
        'ioName': ioName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FloatValueObject;
      return this.apiClient.callApi(
        '/device/strategy/ios/analogOutputs/{ioName}/eu', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readAnalogOutputs operation.
     * @callback module:api/AllApi~readAnalogOutputsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FloatVar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and engineering units (EU) for all analog output points in the strategy
     * @param {module:api/AllApi~readAnalogOutputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FloatVar>}
     */
    readAnalogOutputs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FloatVar];
      return this.apiClient.callApi(
        '/device/strategy/ios/analogOutputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readDeviceDetails operation.
     * @callback module:api/AllApi~readDeviceDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns controller's type; firmware version; both mac addresses; and uptime in seconds
     * @param {module:api/AllApi~readDeviceDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllerResponse}
     */
    readDeviceDetails(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ControllerResponse;
      return this.apiClient.callApi(
        '/device', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readDigitalInputState operation.
     * @callback module:api/AllApi~readDigitalInputStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DigitalPointStateObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the specified digital input point's state (true = on, false = off)
     * @param {String} ioName Name of the digital input point to read
     * @param {module:api/AllApi~readDigitalInputStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DigitalPointStateObject}
     */
    readDigitalInputState(ioName, callback) {
      let postBody = null;
      // verify the required parameter 'ioName' is set
      if (ioName === undefined || ioName === null) {
        throw new Error("Missing the required parameter 'ioName' when calling readDigitalInputState");
      }

      let pathParams = {
        'ioName': ioName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DigitalPointStateObject;
      return this.apiClient.callApi(
        '/device/strategy/ios/digitalInputs/{ioName}/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readDigitalInputs operation.
     * @callback module:api/AllApi~readDigitalInputsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DigitalPointStateVar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and state (true = on, false = off) of all digital input points in the strategy. If there is no strategy in the controller, or the strategy includes no digital inputs, the returned array will be empty.
     * @param {module:api/AllApi~readDigitalInputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DigitalPointStateVar>}
     */
    readDigitalInputs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DigitalPointStateVar];
      return this.apiClient.callApi(
        '/device/strategy/ios/digitalInputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readDigitalOutputState operation.
     * @callback module:api/AllApi~readDigitalOutputStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DigitalPointStateObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the specified digital output point's state (true = on, false = off)
     * @param {String} ioName Name of the digit output point to read
     * @param {module:api/AllApi~readDigitalOutputStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DigitalPointStateObject}
     */
    readDigitalOutputState(ioName, callback) {
      let postBody = null;
      // verify the required parameter 'ioName' is set
      if (ioName === undefined || ioName === null) {
        throw new Error("Missing the required parameter 'ioName' when calling readDigitalOutputState");
      }

      let pathParams = {
        'ioName': ioName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DigitalPointStateObject;
      return this.apiClient.callApi(
        '/device/strategy/ios/digitalOutputs/{ioName}/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readDigitalOutputs operation.
     * @callback module:api/AllApi~readDigitalOutputsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DigitalPointStateVar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and state (true = on, false = off) of all digital output points in the strategy
     * @param {module:api/AllApi~readDigitalOutputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DigitalPointStateVar>}
     */
    readDigitalOutputs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DigitalPointStateVar];
      return this.apiClient.callApi(
        '/device/strategy/ios/digitalOutputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readDownTimerValue operation.
     * @callback module:api/AllApi~readDownTimerValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FloatValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns current value of the specified down timer
     * @param {String} downTimerName Name of the down timer variable to read
     * @param {module:api/AllApi~readDownTimerValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FloatValueObject}
     */
    readDownTimerValue(downTimerName, callback) {
      let postBody = null;
      // verify the required parameter 'downTimerName' is set
      if (downTimerName === undefined || downTimerName === null) {
        throw new Error("Missing the required parameter 'downTimerName' when calling readDownTimerValue");
      }

      let pathParams = {
        'downTimerName': downTimerName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FloatValueObject;
      return this.apiClient.callApi(
        '/device/strategy/vars/downTimers/{downTimerName}/value', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readDownTimerVars operation.
     * @callback module:api/AllApi~readDownTimerVarsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FloatVar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and current value of all down timers in the strategy
     * @param {module:api/AllApi~readDownTimerVarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FloatVar>}
     */
    readDownTimerVars(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FloatVar];
      return this.apiClient.callApi(
        '/device/strategy/vars/downTimers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readFloatTable operation.
     * @callback module:api/AllApi~readFloatTableCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read table elements #### Examples #### * Read all elements in a table named ftable: https://1.2.3.4/api/v1/device/strategy/tables/floats/ftable * Read elements 5 and up in a table named ftable starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/floats/ftable?startIndex=5 * Read 3 consecutive elements in a table named ftable starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/floats/ftable?startIndex=10&numElements=3 
     * @param {String} tableName Name of float table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to read (default is 0)
     * @param {Number} [numElements] Number of elements to read (default is number of elements in the table minus startIndex)
     * @param {module:api/AllApi~readFloatTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    readFloatTable(tableName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readFloatTable");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex'],
        'numElements': opts['numElements']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/device/strategy/tables/floats/{tableName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readFloatTableElement operation.
     * @callback module:api/AllApi~readFloatTableElementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FloatValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read specified table element
     * @param {String} tableName Name of float table to read
     * @param {Number} index Index of element to read
     * @param {module:api/AllApi~readFloatTableElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FloatValueObject}
     */
    readFloatTableElement(tableName, index, callback) {
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readFloatTableElement");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling readFloatTableElement");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FloatValueObject;
      return this.apiClient.callApi(
        '/device/strategy/tables/floats/{tableName}/{index}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readFloatTables operation.
     * @callback module:api/AllApi~readFloatTablesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TableDef>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of the name and length of all the float tables in the strategy
     * @param {module:api/AllApi~readFloatTablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TableDef>}
     */
    readFloatTables(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TableDef];
      return this.apiClient.callApi(
        '/device/strategy/tables/floats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readFloatVar operation.
     * @callback module:api/AllApi~readFloatVarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FloatValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns value of the specified float variable
     * @param {String} floatName Name of float variable to read
     * @param {module:api/AllApi~readFloatVarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FloatValueObject}
     */
    readFloatVar(floatName, callback) {
      let postBody = null;
      // verify the required parameter 'floatName' is set
      if (floatName === undefined || floatName === null) {
        throw new Error("Missing the required parameter 'floatName' when calling readFloatVar");
      }

      let pathParams = {
        'floatName': floatName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FloatValueObject;
      return this.apiClient.callApi(
        '/device/strategy/vars/floats/{floatName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readFloatVars operation.
     * @callback module:api/AllApi~readFloatVarsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FloatVar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and value of all (single-precision) float variables in the strategy
     * @param {module:api/AllApi~readFloatVarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FloatVar>}
     */
    readFloatVars(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FloatVar];
      return this.apiClient.callApi(
        '/device/strategy/vars/floats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt32Table operation.
     * @callback module:api/AllApi~readInt32TableCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Read a range of table elements from the specified integer32 table\"  #### Examples ####  * Read all elements in a table named itable: https://1.2.3.4/api/v1/device/strategy/tables/int32s/itable  * Read elements 5 and up in a table named itable starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/int32s/itable?startIndex=5  * Read 3 consecutive elements in a table named itable starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/int32s/itable?startIndex=10&numElements=3 
     * @param {String} tableName Name of integer32 table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to read (default is 0)
     * @param {Number} [numElements] Number of elements to read (default is number of elements in the table minus startIndex)
     * @param {module:api/AllApi~readInt32TableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    readInt32Table(tableName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readInt32Table");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex'],
        'numElements': opts['numElements']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/device/strategy/tables/int32s/{tableName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt32TableElement operation.
     * @callback module:api/AllApi~readInt32TableElementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Int32ValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read specified integer32 table element
     * @param {String} tableName Name of the integer32 table to read
     * @param {Number} index Index of element to read
     * @param {module:api/AllApi~readInt32TableElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Int32ValueObject}
     */
    readInt32TableElement(tableName, index, callback) {
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readInt32TableElement");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling readInt32TableElement");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Int32ValueObject;
      return this.apiClient.callApi(
        '/device/strategy/tables/int32s/{tableName}/{index}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt32Tables operation.
     * @callback module:api/AllApi~readInt32TablesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TableDef>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of the name and length of all the integer32 tables in the strategy
     * @param {module:api/AllApi~readInt32TablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TableDef>}
     */
    readInt32Tables(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TableDef];
      return this.apiClient.callApi(
        '/device/strategy/tables/int32s', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt32Var operation.
     * @callback module:api/AllApi~readInt32VarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Int32ValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns value of the specified integer32 variable
     * @param {String} int32Name Name of integer32 variable to read
     * @param {module:api/AllApi~readInt32VarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Int32ValueObject}
     */
    readInt32Var(int32Name, callback) {
      let postBody = null;
      // verify the required parameter 'int32Name' is set
      if (int32Name === undefined || int32Name === null) {
        throw new Error("Missing the required parameter 'int32Name' when calling readInt32Var");
      }

      let pathParams = {
        'int32Name': int32Name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Int32ValueObject;
      return this.apiClient.callApi(
        '/device/strategy/vars/int32s/{int32Name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt32Vars operation.
     * @callback module:api/AllApi~readInt32VarsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Int32Var>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and value of all integer32 variables in the strategy
     * @param {module:api/AllApi~readInt32VarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Int32Var>}
     */
    readInt32Vars(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Int32Var];
      return this.apiClient.callApi(
        '/device/strategy/vars/int32s', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64Table operation.
     * @callback module:api/AllApi~readInt64TableCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Read a range of table elements from the specified integer64 table\"  #### Examples ####  * Read all elements in a table named i64table: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table  * Read elements 5 and up in a table named i64table starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table?startIndex=5  * Read 3 consecutive elements in a table named i64table starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table?startIndex=10&numElements=3 
     * @param {String} tableName Name of the integer64 table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to read (default is 0)
     * @param {Number} [numElements] Number of elements to read (default is number of elements in the table minus startIndex)
     * @param {module:api/AllApi~readInt64TableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    readInt64Table(tableName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readInt64Table");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex'],
        'numElements': opts['numElements']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s/{tableName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64TableAsString operation.
     * @callback module:api/AllApi~readInt64TableAsStringCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Read a range of table elements from the specified integer64 table\"  #### Examples ####  * Read all elements in a table named i64table: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table/_string  * Read elements 5 and up in a table named i64table starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table/_string?startIndex=5  * Read 3 consecutive elements in a table named i64table starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table/_string?startIndex=10&numElements=3 
     * @param {String} tableName Name of the integer64 table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to read (default is 0)
     * @param {Number} [numElements] Number of elements to read (default is number of elements in the table minus startIndex)
     * @param {module:api/AllApi~readInt64TableAsStringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    readInt64TableAsString(tableName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readInt64TableAsString");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex'],
        'numElements': opts['numElements']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s/{tableName}/_string', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64TableElement operation.
     * @callback module:api/AllApi~readInt64TableElementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Int64ValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read specified integer64 table element
     * @param {String} tableName Name of integer64 table to read
     * @param {Number} index Index of element to read
     * @param {module:api/AllApi~readInt64TableElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Int64ValueObject}
     */
    readInt64TableElement(tableName, index, callback) {
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readInt64TableElement");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling readInt64TableElement");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Int64ValueObject;
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s/{tableName}/{index}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64TableElementAsString operation.
     * @callback module:api/AllApi~readInt64TableElementAsStringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Int64StringValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read specified integer64 table element as string
     * @param {String} tableName Name of integer64 table to read
     * @param {Number} index Index of element to read
     * @param {module:api/AllApi~readInt64TableElementAsStringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Int64StringValueObject}
     */
    readInt64TableElementAsString(tableName, index, callback) {
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readInt64TableElementAsString");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling readInt64TableElementAsString");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Int64StringValueObject;
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s/{tableName}/{index}/_string', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64Tables operation.
     * @callback module:api/AllApi~readInt64TablesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TableDef>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of the name and length of all the integer64 tables in the strategy
     * @param {module:api/AllApi~readInt64TablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TableDef>}
     */
    readInt64Tables(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TableDef];
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64Var operation.
     * @callback module:api/AllApi~readInt64VarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Int64ValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns value of the specified integer64 variable
     * @param {String} int64Name Name of integer64 variable to read
     * @param {module:api/AllApi~readInt64VarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Int64ValueObject}
     */
    readInt64Var(int64Name, callback) {
      let postBody = null;
      // verify the required parameter 'int64Name' is set
      if (int64Name === undefined || int64Name === null) {
        throw new Error("Missing the required parameter 'int64Name' when calling readInt64Var");
      }

      let pathParams = {
        'int64Name': int64Name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Int64ValueObject;
      return this.apiClient.callApi(
        '/device/strategy/vars/int64s/{int64Name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64VarAsString operation.
     * @callback module:api/AllApi~readInt64VarAsStringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Int64StringValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns value of the specified integer64 variable as a string
     * @param {String} int64Name Name of integer64 variable to read
     * @param {module:api/AllApi~readInt64VarAsStringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Int64StringValueObject}
     */
    readInt64VarAsString(int64Name, callback) {
      let postBody = null;
      // verify the required parameter 'int64Name' is set
      if (int64Name === undefined || int64Name === null) {
        throw new Error("Missing the required parameter 'int64Name' when calling readInt64VarAsString");
      }

      let pathParams = {
        'int64Name': int64Name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Int64StringValueObject;
      return this.apiClient.callApi(
        '/device/strategy/vars/int64s/{int64Name}/_string', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64Vars operation.
     * @callback module:api/AllApi~readInt64VarsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Int64Var>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and value of all integer64 variables in the strategy
     * @param {module:api/AllApi~readInt64VarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Int64Var>}
     */
    readInt64Vars(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Int64Var];
      return this.apiClient.callApi(
        '/device/strategy/vars/int64s', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64VarsAsStrings operation.
     * @callback module:api/AllApi~readInt64VarsAsStringsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Int64VarAsString>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and value as a string of all integer64 variables in the strategy
     * @param {module:api/AllApi~readInt64VarsAsStringsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Int64VarAsString>}
     */
    readInt64VarsAsStrings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Int64VarAsString];
      return this.apiClient.callApi(
        '/device/strategy/vars/int64s/_string', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readStrategyDetails operation.
     * @callback module:api/AllApi~readStrategyDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StrategyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name, date, time, and CRC of the strategy currently in the controller, and the number of charts currently running. Empty strings and a 0 will be returned when there is no strategy.
     * @param {module:api/AllApi~readStrategyDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StrategyResponse}
     */
    readStrategyDetails(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StrategyResponse;
      return this.apiClient.callApi(
        '/device/strategy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readStringTable operation.
     * @callback module:api/AllApi~readStringTableCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Read a range of table elements from the specified string table\"  #### Examples ####  * Read all elements in a table named strTable: https://1.2.3.4/api/v1/device/strategy/tables/strings/strTable  * Read elements 5 and up in a table named i64table starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/strings/strTable?startIndex=5  * Read 3 consecutive elements in a table named i64table starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/strings/strTable?startIndex=10&numElements=3 
     * @param {String} tableName Name of string table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to read (default is 0)
     * @param {Number} [numElements] Number of elements to read (default is number of elements in the table minus startIndex)
     * @param {module:api/AllApi~readStringTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    readStringTable(tableName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readStringTable");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex'],
        'numElements': opts['numElements']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/device/strategy/tables/strings/{tableName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readStringTableElement operation.
     * @callback module:api/AllApi~readStringTableElementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read specified table element
     * @param {String} tableName Name of string table to read
     * @param {Number} index Index of element to read
     * @param {module:api/AllApi~readStringTableElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringValueObject}
     */
    readStringTableElement(tableName, index, callback) {
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readStringTableElement");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling readStringTableElement");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringValueObject;
      return this.apiClient.callApi(
        '/device/strategy/tables/strings/{tableName}/{index}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readStringTables operation.
     * @callback module:api/AllApi~readStringTablesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TableDef>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of the name and length of all the string tables in the strategy
     * @param {module:api/AllApi~readStringTablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TableDef>}
     */
    readStringTables(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TableDef];
      return this.apiClient.callApi(
        '/device/strategy/tables/strings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readStringVar operation.
     * @callback module:api/AllApi~readStringVarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns value of the specified string
     * @param {String} stringName Name of string variable to read
     * @param {module:api/AllApi~readStringVarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringValueObject}
     */
    readStringVar(stringName, callback) {
      let postBody = null;
      // verify the required parameter 'stringName' is set
      if (stringName === undefined || stringName === null) {
        throw new Error("Missing the required parameter 'stringName' when calling readStringVar");
      }

      let pathParams = {
        'stringName': stringName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringValueObject;
      return this.apiClient.callApi(
        '/device/strategy/vars/strings/{stringName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readStringVars operation.
     * @callback module:api/AllApi~readStringVarsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StringVar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and value of all string variables in the strategy
     * @param {module:api/AllApi~readStringVarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StringVar>}
     */
    readStringVars(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [StringVar];
      return this.apiClient.callApi(
        '/device/strategy/vars/strings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readUpTimerValue operation.
     * @callback module:api/AllApi~readUpTimerValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FloatValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns current value of the specified up timer
     * @param {String} upTimerName Name of the up timer variable to read
     * @param {module:api/AllApi~readUpTimerValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FloatValueObject}
     */
    readUpTimerValue(upTimerName, callback) {
      let postBody = null;
      // verify the required parameter 'upTimerName' is set
      if (upTimerName === undefined || upTimerName === null) {
        throw new Error("Missing the required parameter 'upTimerName' when calling readUpTimerValue");
      }

      let pathParams = {
        'upTimerName': upTimerName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FloatValueObject;
      return this.apiClient.callApi(
        '/device/strategy/vars/upTimers/{upTimerName}/value', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readUpTimerVars operation.
     * @callback module:api/AllApi~readUpTimerVarsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FloatVar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and current value of all up timers in the strategy
     * @param {module:api/AllApi~readUpTimerVarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FloatVar>}
     */
    readUpTimerVars(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FloatVar];
      return this.apiClient.callApi(
        '/device/strategy/vars/upTimers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeAnalogOutputEu operation.
     * @callback module:api/AllApi~writeAnalogOutputEuCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of the specified analog output point
     * @param {String} ioName Name of the analog output point to write
     * @param {module:model/FloatValueObject} body Value to write
     * @param {module:api/AllApi~writeAnalogOutputEuCallback} callback The callback function, accepting three arguments: error, data, response
     */
    writeAnalogOutputEu(ioName, body, callback) {
      let postBody = body;
      // verify the required parameter 'ioName' is set
      if (ioName === undefined || ioName === null) {
        throw new Error("Missing the required parameter 'ioName' when calling writeAnalogOutputEu");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling writeAnalogOutputEu");
      }

      let pathParams = {
        'ioName': ioName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/ios/analogOutputs/{ioName}/eu', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeDigitalOutputState operation.
     * @callback module:api/AllApi~writeDigitalOutputStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of the specified digital output point
     * @param {String} ioName Name of the digital output point to write
     * @param {module:model/DigitalPointStateObject} body Value to write
     * @param {module:api/AllApi~writeDigitalOutputStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    writeDigitalOutputState(ioName, body, callback) {
      let postBody = body;
      // verify the required parameter 'ioName' is set
      if (ioName === undefined || ioName === null) {
        throw new Error("Missing the required parameter 'ioName' when calling writeDigitalOutputState");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling writeDigitalOutputState");
      }

      let pathParams = {
        'ioName': ioName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/ios/digitalOutputs/{ioName}/state', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeFloatTable operation.
     * @callback module:api/AllApi~writeFloatTableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write table elements #### Examples #### * Write the values (1.5, 2.4, 3.5) to 3 consecutive elements in a table named ftable starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/floats/ftable?startIndex=10  with body of the POST request set to [ 1.5, 2.4, 3.5 ] 
     * @param {String} tableName Name of float table to write; starting index may be specified
     * @param {Array.<Number>} floatArray Array of element values to write starting at startIndex
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to write (default is 0)
     * @param {module:api/AllApi~writeFloatTableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    writeFloatTable(tableName, floatArray, opts, callback) {
      opts = opts || {};
      let postBody = floatArray;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeFloatTable");
      }
      // verify the required parameter 'floatArray' is set
      if (floatArray === undefined || floatArray === null) {
        throw new Error("Missing the required parameter 'floatArray' when calling writeFloatTable");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/floats/{tableName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeFloatTableElement operation.
     * @callback module:api/AllApi~writeFloatTableElementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write specified table element
     * @param {String} tableName Name of float table to write
     * @param {Number} index Index of element to write
     * @param {module:model/FloatValueObject} floatElementObject Element to write starting at index
     * @param {module:api/AllApi~writeFloatTableElementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    writeFloatTableElement(tableName, index, floatElementObject, callback) {
      let postBody = floatElementObject;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeFloatTableElement");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling writeFloatTableElement");
      }
      // verify the required parameter 'floatElementObject' is set
      if (floatElementObject === undefined || floatElementObject === null) {
        throw new Error("Missing the required parameter 'floatElementObject' when calling writeFloatTableElement");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/floats/{tableName}/{index}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeFloatVar operation.
     * @callback module:api/AllApi~writeFloatVarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of a float variable
     * @param {String} floatName Name of the float variable to write
     * @param {module:model/FloatValueObject} body Value to write to the float variable
     * @param {module:api/AllApi~writeFloatVarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    writeFloatVar(floatName, body, callback) {
      let postBody = body;
      // verify the required parameter 'floatName' is set
      if (floatName === undefined || floatName === null) {
        throw new Error("Missing the required parameter 'floatName' when calling writeFloatVar");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling writeFloatVar");
      }

      let pathParams = {
        'floatName': floatName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/vars/floats/{floatName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt32Table operation.
     * @callback module:api/AllApi~writeInt32TableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Write a range of table elements\" #### Examples #### * Write the values (1, 2, 3) to 3 consecutive elements in a table named itable starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/int32s/itable?startIndex=10  with body of the POST request set to [ 1, 2, 3 ]       
     * @param {String} tableName Name of integer32 table to write; starting index may be specified
     * @param {Array.<Number>} int32Array Array of element values to write starting at startIndex; if the list of elements is too long to fit in the specified table, extra elements will be ignored
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to write (default is 0)
     * @param {module:api/AllApi~writeInt32TableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt32Table(tableName, int32Array, opts, callback) {
      opts = opts || {};
      let postBody = int32Array;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeInt32Table");
      }
      // verify the required parameter 'int32Array' is set
      if (int32Array === undefined || int32Array === null) {
        throw new Error("Missing the required parameter 'int32Array' when calling writeInt32Table");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/int32s/{tableName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt32TableElement operation.
     * @callback module:api/AllApi~writeInt32TableElementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write specified integer32 table element
     * @param {String} tableName Name of the integer32 table to write
     * @param {Number} index Index of element to write
     * @param {module:model/Int32ValueObject} int32ElementObject Element to write at index specified
     * @param {module:api/AllApi~writeInt32TableElementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt32TableElement(tableName, index, int32ElementObject, callback) {
      let postBody = int32ElementObject;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeInt32TableElement");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling writeInt32TableElement");
      }
      // verify the required parameter 'int32ElementObject' is set
      if (int32ElementObject === undefined || int32ElementObject === null) {
        throw new Error("Missing the required parameter 'int32ElementObject' when calling writeInt32TableElement");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/int32s/{tableName}/{index}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt32Var operation.
     * @callback module:api/AllApi~writeInt32VarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of an integer32 variable
     * @param {String} int32Name Name of integer32 variable to write
     * @param {module:model/Int32ValueObject} body Value to write to the integer32 variable
     * @param {module:api/AllApi~writeInt32VarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt32Var(int32Name, body, callback) {
      let postBody = body;
      // verify the required parameter 'int32Name' is set
      if (int32Name === undefined || int32Name === null) {
        throw new Error("Missing the required parameter 'int32Name' when calling writeInt32Var");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling writeInt32Var");
      }

      let pathParams = {
        'int32Name': int32Name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/vars/int32s/{int32Name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt64Table operation.
     * @callback module:api/AllApi~writeInt64TableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Write a range of table elements\" #### Examples #### * Write the values (1, 2, 3) to 3 consecutive elements in a table named i64table starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table?startIndex=10  with body of the POST request set to [ 1, 2, 3 ] 
     * @param {String} tableName Name of integer64 table to write; starting index may be specified
     * @param {Array.<Number>} int64Array Array of element values to write starting at startIndex; if the array of elements is too long  to fit in the specified table, extra elements will be ignored
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to write; default is 0
     * @param {module:api/AllApi~writeInt64TableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt64Table(tableName, int64Array, opts, callback) {
      opts = opts || {};
      let postBody = int64Array;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeInt64Table");
      }
      // verify the required parameter 'int64Array' is set
      if (int64Array === undefined || int64Array === null) {
        throw new Error("Missing the required parameter 'int64Array' when calling writeInt64Table");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s/{tableName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt64TableAsString operation.
     * @callback module:api/AllApi~writeInt64TableAsStringCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Write a range of table elements\" #### Examples #### * Write the values (1, 2, 3) to 3 consecutive elements in a table named i64table starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table/_string?startIndex=10  with body of the POST request set to [ \"1\", \"2\", \"3\" ] 
     * @param {String} tableName Name of integer64 table to write; starting index may be specified
     * @param {Array.<String>} int64AsStringArray Array of element values to write starting at startIndex; if the array of elements is too long  to fit in the specified table, extra elements will be ignored
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to write; default is 0.
     * @param {module:api/AllApi~writeInt64TableAsStringCallback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt64TableAsString(tableName, int64AsStringArray, opts, callback) {
      opts = opts || {};
      let postBody = int64AsStringArray;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeInt64TableAsString");
      }
      // verify the required parameter 'int64AsStringArray' is set
      if (int64AsStringArray === undefined || int64AsStringArray === null) {
        throw new Error("Missing the required parameter 'int64AsStringArray' when calling writeInt64TableAsString");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s/{tableName}/_string', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt64TableElement operation.
     * @callback module:api/AllApi~writeInt64TableElementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write specified integer64 table element
     * @param {String} tableName Name of the integer64 table to write
     * @param {Number} index Index of element to write
     * @param {module:model/Int64ValueObject} int64ElementObject Element to write starting at index specified
     * @param {module:api/AllApi~writeInt64TableElementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt64TableElement(tableName, index, int64ElementObject, callback) {
      let postBody = int64ElementObject;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeInt64TableElement");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling writeInt64TableElement");
      }
      // verify the required parameter 'int64ElementObject' is set
      if (int64ElementObject === undefined || int64ElementObject === null) {
        throw new Error("Missing the required parameter 'int64ElementObject' when calling writeInt64TableElement");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s/{tableName}/{index}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt64TableElementAsString operation.
     * @callback module:api/AllApi~writeInt64TableElementAsStringCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write specified integer64 table element as string
     * @param {String} tableName Name of the integer64 table to write
     * @param {Number} index Index of element to write
     * @param {module:model/Int64StringValueObject} int64ElementObject Element to write starting at index specified
     * @param {module:api/AllApi~writeInt64TableElementAsStringCallback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt64TableElementAsString(tableName, index, int64ElementObject, callback) {
      let postBody = int64ElementObject;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeInt64TableElementAsString");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling writeInt64TableElementAsString");
      }
      // verify the required parameter 'int64ElementObject' is set
      if (int64ElementObject === undefined || int64ElementObject === null) {
        throw new Error("Missing the required parameter 'int64ElementObject' when calling writeInt64TableElementAsString");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s/{tableName}/{index}/_string', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt64Var operation.
     * @callback module:api/AllApi~writeInt64VarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of an integer64 variable
     * @param {String} int64Name Name of integer64 variable to write
     * @param {module:model/Int64ValueObject} body Value to write to the integer64 variable
     * @param {module:api/AllApi~writeInt64VarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt64Var(int64Name, body, callback) {
      let postBody = body;
      // verify the required parameter 'int64Name' is set
      if (int64Name === undefined || int64Name === null) {
        throw new Error("Missing the required parameter 'int64Name' when calling writeInt64Var");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling writeInt64Var");
      }

      let pathParams = {
        'int64Name': int64Name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/vars/int64s/{int64Name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt64VarAsString operation.
     * @callback module:api/AllApi~writeInt64VarAsStringCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of an integer64 variable as a string
     * @param {String} int64Name Name of integer64 variable to write
     * @param {module:model/Int64StringValueObject} body Value to write to the integer64 variable
     * @param {module:api/AllApi~writeInt64VarAsStringCallback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt64VarAsString(int64Name, body, callback) {
      let postBody = body;
      // verify the required parameter 'int64Name' is set
      if (int64Name === undefined || int64Name === null) {
        throw new Error("Missing the required parameter 'int64Name' when calling writeInt64VarAsString");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling writeInt64VarAsString");
      }

      let pathParams = {
        'int64Name': int64Name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/vars/int64s/{int64Name}/_string', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeStringTable operation.
     * @callback module:api/AllApi~writeStringTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorResponse200OKish} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Write a range of table elements\" #### Examples #### * Write the values (\"first\", \"second\", \"third\") to 3 consecutive elements in a table named strTable starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/strings/strtable?startIndex=10  with body of the POST request set to [ \"first\", \"second\", \"third\" ] 
     * @param {String} tableName Name of string table to write; starting index may be specified
     * @param {Array.<String>} stringArray Array of element values to write starting at startIndex; if an element value is longer than the string width, the string will be truncated to fit
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to write (default is 0)
     * @param {module:api/AllApi~writeStringTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorResponse200OKish}
     */
    writeStringTable(tableName, stringArray, opts, callback) {
      opts = opts || {};
      let postBody = stringArray;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeStringTable");
      }
      // verify the required parameter 'stringArray' is set
      if (stringArray === undefined || stringArray === null) {
        throw new Error("Missing the required parameter 'stringArray' when calling writeStringTable");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ErrorResponse200OKish;
      return this.apiClient.callApi(
        '/device/strategy/tables/strings/{tableName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeStringTableElement operation.
     * @callback module:api/AllApi~writeStringTableElementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write specified table element
     * @param {String} tableName Name of string table to write
     * @param {Number} index Index of element to write
     * @param {module:model/StringValueObject} stringElementObject Element to write starting at index
     * @param {module:api/AllApi~writeStringTableElementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    writeStringTableElement(tableName, index, stringElementObject, callback) {
      let postBody = stringElementObject;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeStringTableElement");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling writeStringTableElement");
      }
      // verify the required parameter 'stringElementObject' is set
      if (stringElementObject === undefined || stringElementObject === null) {
        throw new Error("Missing the required parameter 'stringElementObject' when calling writeStringTableElement");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/strings/{tableName}/{index}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeStringVar operation.
     * @callback module:api/AllApi~writeStringVarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorResponse200OKish} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of a string variable
     * @param {String} stringName Name of string variable to write
     * @param {module:model/StringValueObject} body String to write. If the value is longer than the string width, the string will be truncated to fit.
     * @param {module:api/AllApi~writeStringVarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorResponse200OKish}
     */
    writeStringVar(stringName, body, callback) {
      let postBody = body;
      // verify the required parameter 'stringName' is set
      if (stringName === undefined || stringName === null) {
        throw new Error("Missing the required parameter 'stringName' when calling writeStringVar");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling writeStringVar");
      }

      let pathParams = {
        'stringName': stringName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ErrorResponse200OKish;
      return this.apiClient.callApi(
        '/device/strategy/vars/strings/{stringName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
