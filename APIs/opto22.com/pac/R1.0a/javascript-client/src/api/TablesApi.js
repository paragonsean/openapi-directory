/**
 * PAC Control REST API
 * #### Revised: 6/15/2018  ### Overview This API provides secure access to a SNAP-PAC-R or -S series controller's variable and I/O tags. Confidentiality for API transactions is provided by HTTPS. Authentication uses HTTP Basic Authentication with an API key. An API key ID is submitted in the Basic Authentication userid field and API key value in the password field.  **For more information visit:** [developer.opto22.com](http://developer.opto22.com)  ### Examples  **Read an array** of all the integer32 variables defined in the PAC's strategy. For example, on your SNAP-PAC-R or -S series controller at IP address 1.2.3.4, you would use the URL:   ``` https://1.2.3.4/api/v1/device/strategy/vars/int32s ``` and provide appropriate authentication. The GET response will be a JSON array of name-value  pairs such as:  ```json [ { \"nMyVeryFavoriteNumber\": 22 },   { \"nWidgetsProducedToday\": 22222 },   { \"DELAY_LOOP_TIME_IN_MSECS\"  : 200 } ] ``` **Read the engineering units** (EU) of an analog input point configured in the PAC's strategy. For an analog input (I/O point) named aiTemperatureInDegreesF, use   `https://1.2.3.4/api/v1/device/strategy/ios/analogInputs/aiTemperatureInDegreesF/eu`  The GET response will be a single JSON name-value pair such as: ```json { \"value\": 72.22 } ```      ### Note on packet sizes: When doing POSTs or GETs, the JSON payload in the body should not exceed 3k (3072 bytes). 
 *
 * The version of the OpenAPI document: R1.0a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse200OKish from '../model/ErrorResponse200OKish';
import ErrorResponse400BadAdminOrValue from '../model/ErrorResponse400BadAdminOrValue';
import ErrorResponse401BadKeyForBasicAuth from '../model/ErrorResponse401BadKeyForBasicAuth';
import ErrorResponse404NotFound from '../model/ErrorResponse404NotFound';
import FloatValueObject from '../model/FloatValueObject';
import Int32ValueObject from '../model/Int32ValueObject';
import Int64StringValueObject from '../model/Int64StringValueObject';
import Int64ValueObject from '../model/Int64ValueObject';
import StringValueObject from '../model/StringValueObject';
import TableDef from '../model/TableDef';

/**
* Tables service.
* @module api/TablesApi
* @version R1.0a
*/
export default class TablesApi {

    /**
    * Constructs a new TablesApi. 
    * @alias module:api/TablesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the readFloatTableElement_0 operation.
     * @callback module:api/TablesApi~readFloatTableElement_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FloatValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read specified table element
     * @param {String} tableName Name of float table to read
     * @param {Number} index Index of element to read
     * @param {module:api/TablesApi~readFloatTableElement_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FloatValueObject}
     */
    readFloatTableElement_0(tableName, index, callback) {
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readFloatTableElement_0");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling readFloatTableElement_0");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FloatValueObject;
      return this.apiClient.callApi(
        '/device/strategy/tables/floats/{tableName}/{index}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readFloatTable_0 operation.
     * @callback module:api/TablesApi~readFloatTable_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read table elements #### Examples #### * Read all elements in a table named ftable: https://1.2.3.4/api/v1/device/strategy/tables/floats/ftable * Read elements 5 and up in a table named ftable starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/floats/ftable?startIndex=5 * Read 3 consecutive elements in a table named ftable starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/floats/ftable?startIndex=10&numElements=3 
     * @param {String} tableName Name of float table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to read (default is 0)
     * @param {Number} [numElements] Number of elements to read (default is number of elements in the table minus startIndex)
     * @param {module:api/TablesApi~readFloatTable_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    readFloatTable_0(tableName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readFloatTable_0");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex'],
        'numElements': opts['numElements']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/device/strategy/tables/floats/{tableName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readFloatTables_0 operation.
     * @callback module:api/TablesApi~readFloatTables_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TableDef>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of the name and length of all the float tables in the strategy
     * @param {module:api/TablesApi~readFloatTables_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TableDef>}
     */
    readFloatTables_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TableDef];
      return this.apiClient.callApi(
        '/device/strategy/tables/floats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt32TableElement_0 operation.
     * @callback module:api/TablesApi~readInt32TableElement_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Int32ValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read specified integer32 table element
     * @param {String} tableName Name of the integer32 table to read
     * @param {Number} index Index of element to read
     * @param {module:api/TablesApi~readInt32TableElement_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Int32ValueObject}
     */
    readInt32TableElement_0(tableName, index, callback) {
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readInt32TableElement_0");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling readInt32TableElement_0");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Int32ValueObject;
      return this.apiClient.callApi(
        '/device/strategy/tables/int32s/{tableName}/{index}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt32Table_0 operation.
     * @callback module:api/TablesApi~readInt32Table_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Read a range of table elements from the specified integer32 table\"  #### Examples ####  * Read all elements in a table named itable: https://1.2.3.4/api/v1/device/strategy/tables/int32s/itable  * Read elements 5 and up in a table named itable starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/int32s/itable?startIndex=5  * Read 3 consecutive elements in a table named itable starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/int32s/itable?startIndex=10&numElements=3 
     * @param {String} tableName Name of integer32 table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to read (default is 0)
     * @param {Number} [numElements] Number of elements to read (default is number of elements in the table minus startIndex)
     * @param {module:api/TablesApi~readInt32Table_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    readInt32Table_0(tableName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readInt32Table_0");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex'],
        'numElements': opts['numElements']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/device/strategy/tables/int32s/{tableName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt32Tables_0 operation.
     * @callback module:api/TablesApi~readInt32Tables_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TableDef>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of the name and length of all the integer32 tables in the strategy
     * @param {module:api/TablesApi~readInt32Tables_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TableDef>}
     */
    readInt32Tables_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TableDef];
      return this.apiClient.callApi(
        '/device/strategy/tables/int32s', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64TableAsString_0 operation.
     * @callback module:api/TablesApi~readInt64TableAsString_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Read a range of table elements from the specified integer64 table\"  #### Examples ####  * Read all elements in a table named i64table: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table/_string  * Read elements 5 and up in a table named i64table starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table/_string?startIndex=5  * Read 3 consecutive elements in a table named i64table starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table/_string?startIndex=10&numElements=3 
     * @param {String} tableName Name of the integer64 table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to read (default is 0)
     * @param {Number} [numElements] Number of elements to read (default is number of elements in the table minus startIndex)
     * @param {module:api/TablesApi~readInt64TableAsString_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    readInt64TableAsString_0(tableName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readInt64TableAsString_0");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex'],
        'numElements': opts['numElements']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s/{tableName}/_string', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64TableElementAsString_0 operation.
     * @callback module:api/TablesApi~readInt64TableElementAsString_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Int64StringValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read specified integer64 table element as string
     * @param {String} tableName Name of integer64 table to read
     * @param {Number} index Index of element to read
     * @param {module:api/TablesApi~readInt64TableElementAsString_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Int64StringValueObject}
     */
    readInt64TableElementAsString_0(tableName, index, callback) {
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readInt64TableElementAsString_0");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling readInt64TableElementAsString_0");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Int64StringValueObject;
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s/{tableName}/{index}/_string', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64TableElement_0 operation.
     * @callback module:api/TablesApi~readInt64TableElement_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Int64ValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read specified integer64 table element
     * @param {String} tableName Name of integer64 table to read
     * @param {Number} index Index of element to read
     * @param {module:api/TablesApi~readInt64TableElement_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Int64ValueObject}
     */
    readInt64TableElement_0(tableName, index, callback) {
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readInt64TableElement_0");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling readInt64TableElement_0");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Int64ValueObject;
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s/{tableName}/{index}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64Table_0 operation.
     * @callback module:api/TablesApi~readInt64Table_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Read a range of table elements from the specified integer64 table\"  #### Examples ####  * Read all elements in a table named i64table: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table  * Read elements 5 and up in a table named i64table starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table?startIndex=5  * Read 3 consecutive elements in a table named i64table starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table?startIndex=10&numElements=3 
     * @param {String} tableName Name of the integer64 table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to read (default is 0)
     * @param {Number} [numElements] Number of elements to read (default is number of elements in the table minus startIndex)
     * @param {module:api/TablesApi~readInt64Table_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    readInt64Table_0(tableName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readInt64Table_0");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex'],
        'numElements': opts['numElements']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s/{tableName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64Tables_0 operation.
     * @callback module:api/TablesApi~readInt64Tables_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TableDef>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of the name and length of all the integer64 tables in the strategy
     * @param {module:api/TablesApi~readInt64Tables_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TableDef>}
     */
    readInt64Tables_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TableDef];
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readStringTableElement_0 operation.
     * @callback module:api/TablesApi~readStringTableElement_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/StringValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read specified table element
     * @param {String} tableName Name of string table to read
     * @param {Number} index Index of element to read
     * @param {module:api/TablesApi~readStringTableElement_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringValueObject}
     */
    readStringTableElement_0(tableName, index, callback) {
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readStringTableElement_0");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling readStringTableElement_0");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringValueObject;
      return this.apiClient.callApi(
        '/device/strategy/tables/strings/{tableName}/{index}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readStringTable_0 operation.
     * @callback module:api/TablesApi~readStringTable_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Read a range of table elements from the specified string table\"  #### Examples ####  * Read all elements in a table named strTable: https://1.2.3.4/api/v1/device/strategy/tables/strings/strTable  * Read elements 5 and up in a table named i64table starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/strings/strTable?startIndex=5  * Read 3 consecutive elements in a table named i64table starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/strings/strTable?startIndex=10&numElements=3 
     * @param {String} tableName Name of string table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to read (default is 0)
     * @param {Number} [numElements] Number of elements to read (default is number of elements in the table minus startIndex)
     * @param {module:api/TablesApi~readStringTable_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    readStringTable_0(tableName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling readStringTable_0");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex'],
        'numElements': opts['numElements']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/device/strategy/tables/strings/{tableName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readStringTables_0 operation.
     * @callback module:api/TablesApi~readStringTables_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TableDef>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of the name and length of all the string tables in the strategy
     * @param {module:api/TablesApi~readStringTables_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TableDef>}
     */
    readStringTables_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TableDef];
      return this.apiClient.callApi(
        '/device/strategy/tables/strings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeFloatTableElement_0 operation.
     * @callback module:api/TablesApi~writeFloatTableElement_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write specified table element
     * @param {String} tableName Name of float table to write
     * @param {Number} index Index of element to write
     * @param {module:model/FloatValueObject} floatElementObject Element to write starting at index
     * @param {module:api/TablesApi~writeFloatTableElement_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    writeFloatTableElement_0(tableName, index, floatElementObject, callback) {
      let postBody = floatElementObject;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeFloatTableElement_0");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling writeFloatTableElement_0");
      }
      // verify the required parameter 'floatElementObject' is set
      if (floatElementObject === undefined || floatElementObject === null) {
        throw new Error("Missing the required parameter 'floatElementObject' when calling writeFloatTableElement_0");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/floats/{tableName}/{index}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeFloatTable_0 operation.
     * @callback module:api/TablesApi~writeFloatTable_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write table elements #### Examples #### * Write the values (1.5, 2.4, 3.5) to 3 consecutive elements in a table named ftable starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/floats/ftable?startIndex=10  with body of the POST request set to [ 1.5, 2.4, 3.5 ] 
     * @param {String} tableName Name of float table to write; starting index may be specified
     * @param {Array.<Number>} floatArray Array of element values to write starting at startIndex
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to write (default is 0)
     * @param {module:api/TablesApi~writeFloatTable_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    writeFloatTable_0(tableName, floatArray, opts, callback) {
      opts = opts || {};
      let postBody = floatArray;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeFloatTable_0");
      }
      // verify the required parameter 'floatArray' is set
      if (floatArray === undefined || floatArray === null) {
        throw new Error("Missing the required parameter 'floatArray' when calling writeFloatTable_0");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/floats/{tableName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt32TableElement_0 operation.
     * @callback module:api/TablesApi~writeInt32TableElement_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write specified integer32 table element
     * @param {String} tableName Name of the integer32 table to write
     * @param {Number} index Index of element to write
     * @param {module:model/Int32ValueObject} int32ElementObject Element to write at index specified
     * @param {module:api/TablesApi~writeInt32TableElement_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt32TableElement_0(tableName, index, int32ElementObject, callback) {
      let postBody = int32ElementObject;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeInt32TableElement_0");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling writeInt32TableElement_0");
      }
      // verify the required parameter 'int32ElementObject' is set
      if (int32ElementObject === undefined || int32ElementObject === null) {
        throw new Error("Missing the required parameter 'int32ElementObject' when calling writeInt32TableElement_0");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/int32s/{tableName}/{index}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt32Table_0 operation.
     * @callback module:api/TablesApi~writeInt32Table_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Write a range of table elements\" #### Examples #### * Write the values (1, 2, 3) to 3 consecutive elements in a table named itable starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/int32s/itable?startIndex=10  with body of the POST request set to [ 1, 2, 3 ]       
     * @param {String} tableName Name of integer32 table to write; starting index may be specified
     * @param {Array.<Number>} int32Array Array of element values to write starting at startIndex; if the list of elements is too long to fit in the specified table, extra elements will be ignored
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to write (default is 0)
     * @param {module:api/TablesApi~writeInt32Table_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt32Table_0(tableName, int32Array, opts, callback) {
      opts = opts || {};
      let postBody = int32Array;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeInt32Table_0");
      }
      // verify the required parameter 'int32Array' is set
      if (int32Array === undefined || int32Array === null) {
        throw new Error("Missing the required parameter 'int32Array' when calling writeInt32Table_0");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/int32s/{tableName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt64TableAsString_0 operation.
     * @callback module:api/TablesApi~writeInt64TableAsString_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Write a range of table elements\" #### Examples #### * Write the values (1, 2, 3) to 3 consecutive elements in a table named i64table starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table/_string?startIndex=10  with body of the POST request set to [ \"1\", \"2\", \"3\" ] 
     * @param {String} tableName Name of integer64 table to write; starting index may be specified
     * @param {Array.<String>} int64AsStringArray Array of element values to write starting at startIndex; if the array of elements is too long  to fit in the specified table, extra elements will be ignored
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to write; default is 0.
     * @param {module:api/TablesApi~writeInt64TableAsString_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt64TableAsString_0(tableName, int64AsStringArray, opts, callback) {
      opts = opts || {};
      let postBody = int64AsStringArray;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeInt64TableAsString_0");
      }
      // verify the required parameter 'int64AsStringArray' is set
      if (int64AsStringArray === undefined || int64AsStringArray === null) {
        throw new Error("Missing the required parameter 'int64AsStringArray' when calling writeInt64TableAsString_0");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s/{tableName}/_string', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt64TableElementAsString_0 operation.
     * @callback module:api/TablesApi~writeInt64TableElementAsString_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write specified integer64 table element as string
     * @param {String} tableName Name of the integer64 table to write
     * @param {Number} index Index of element to write
     * @param {module:model/Int64StringValueObject} int64ElementObject Element to write starting at index specified
     * @param {module:api/TablesApi~writeInt64TableElementAsString_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt64TableElementAsString_0(tableName, index, int64ElementObject, callback) {
      let postBody = int64ElementObject;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeInt64TableElementAsString_0");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling writeInt64TableElementAsString_0");
      }
      // verify the required parameter 'int64ElementObject' is set
      if (int64ElementObject === undefined || int64ElementObject === null) {
        throw new Error("Missing the required parameter 'int64ElementObject' when calling writeInt64TableElementAsString_0");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s/{tableName}/{index}/_string', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt64TableElement_0 operation.
     * @callback module:api/TablesApi~writeInt64TableElement_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write specified integer64 table element
     * @param {String} tableName Name of the integer64 table to write
     * @param {Number} index Index of element to write
     * @param {module:model/Int64ValueObject} int64ElementObject Element to write starting at index specified
     * @param {module:api/TablesApi~writeInt64TableElement_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt64TableElement_0(tableName, index, int64ElementObject, callback) {
      let postBody = int64ElementObject;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeInt64TableElement_0");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling writeInt64TableElement_0");
      }
      // verify the required parameter 'int64ElementObject' is set
      if (int64ElementObject === undefined || int64ElementObject === null) {
        throw new Error("Missing the required parameter 'int64ElementObject' when calling writeInt64TableElement_0");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s/{tableName}/{index}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt64Table_0 operation.
     * @callback module:api/TablesApi~writeInt64Table_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Write a range of table elements\" #### Examples #### * Write the values (1, 2, 3) to 3 consecutive elements in a table named i64table starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table?startIndex=10  with body of the POST request set to [ 1, 2, 3 ] 
     * @param {String} tableName Name of integer64 table to write; starting index may be specified
     * @param {Array.<Number>} int64Array Array of element values to write starting at startIndex; if the array of elements is too long  to fit in the specified table, extra elements will be ignored
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to write; default is 0
     * @param {module:api/TablesApi~writeInt64Table_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt64Table_0(tableName, int64Array, opts, callback) {
      opts = opts || {};
      let postBody = int64Array;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeInt64Table_0");
      }
      // verify the required parameter 'int64Array' is set
      if (int64Array === undefined || int64Array === null) {
        throw new Error("Missing the required parameter 'int64Array' when calling writeInt64Table_0");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/int64s/{tableName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeStringTableElement_0 operation.
     * @callback module:api/TablesApi~writeStringTableElement_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write specified table element
     * @param {String} tableName Name of string table to write
     * @param {Number} index Index of element to write
     * @param {module:model/StringValueObject} stringElementObject Element to write starting at index
     * @param {module:api/TablesApi~writeStringTableElement_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    writeStringTableElement_0(tableName, index, stringElementObject, callback) {
      let postBody = stringElementObject;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeStringTableElement_0");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling writeStringTableElement_0");
      }
      // verify the required parameter 'stringElementObject' is set
      if (stringElementObject === undefined || stringElementObject === null) {
        throw new Error("Missing the required parameter 'stringElementObject' when calling writeStringTableElement_0");
      }

      let pathParams = {
        'tableName': tableName,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/tables/strings/{tableName}/{index}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeStringTable_0 operation.
     * @callback module:api/TablesApi~writeStringTable_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorResponse200OKish} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Write a range of table elements\" #### Examples #### * Write the values (\"first\", \"second\", \"third\") to 3 consecutive elements in a table named strTable starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/strings/strtable?startIndex=10  with body of the POST request set to [ \"first\", \"second\", \"third\" ] 
     * @param {String} tableName Name of string table to write; starting index may be specified
     * @param {Array.<String>} stringArray Array of element values to write starting at startIndex; if an element value is longer than the string width, the string will be truncated to fit
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Index of first element to write (default is 0)
     * @param {module:api/TablesApi~writeStringTable_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorResponse200OKish}
     */
    writeStringTable_0(tableName, stringArray, opts, callback) {
      opts = opts || {};
      let postBody = stringArray;
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling writeStringTable_0");
      }
      // verify the required parameter 'stringArray' is set
      if (stringArray === undefined || stringArray === null) {
        throw new Error("Missing the required parameter 'stringArray' when calling writeStringTable_0");
      }

      let pathParams = {
        'tableName': tableName
      };
      let queryParams = {
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ErrorResponse200OKish;
      return this.apiClient.callApi(
        '/device/strategy/tables/strings/{tableName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
