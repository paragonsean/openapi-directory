/**
 * PAC Control REST API
 * #### Revised: 6/15/2018  ### Overview This API provides secure access to a SNAP-PAC-R or -S series controller's variable and I/O tags. Confidentiality for API transactions is provided by HTTPS. Authentication uses HTTP Basic Authentication with an API key. An API key ID is submitted in the Basic Authentication userid field and API key value in the password field.  **For more information visit:** [developer.opto22.com](http://developer.opto22.com)  ### Examples  **Read an array** of all the integer32 variables defined in the PAC's strategy. For example, on your SNAP-PAC-R or -S series controller at IP address 1.2.3.4, you would use the URL:   ``` https://1.2.3.4/api/v1/device/strategy/vars/int32s ``` and provide appropriate authentication. The GET response will be a JSON array of name-value  pairs such as:  ```json [ { \"nMyVeryFavoriteNumber\": 22 },   { \"nWidgetsProducedToday\": 22222 },   { \"DELAY_LOOP_TIME_IN_MSECS\"  : 200 } ] ``` **Read the engineering units** (EU) of an analog input point configured in the PAC's strategy. For an analog input (I/O point) named aiTemperatureInDegreesF, use   `https://1.2.3.4/api/v1/device/strategy/ios/analogInputs/aiTemperatureInDegreesF/eu`  The GET response will be a single JSON name-value pair such as: ```json { \"value\": 72.22 } ```      ### Note on packet sizes: When doing POSTs or GETs, the JSON payload in the body should not exceed 3k (3072 bytes). 
 *
 * The version of the OpenAPI document: R1.0a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse200OKish from '../model/ErrorResponse200OKish';
import ErrorResponse400BadAdminOrValue from '../model/ErrorResponse400BadAdminOrValue';
import ErrorResponse401BadKeyForBasicAuth from '../model/ErrorResponse401BadKeyForBasicAuth';
import ErrorResponse404NotFound from '../model/ErrorResponse404NotFound';
import FloatValueObject from '../model/FloatValueObject';
import FloatVar from '../model/FloatVar';
import Int32ValueObject from '../model/Int32ValueObject';
import Int32Var from '../model/Int32Var';
import Int64StringValueObject from '../model/Int64StringValueObject';
import Int64ValueObject from '../model/Int64ValueObject';
import Int64Var from '../model/Int64Var';
import Int64VarAsString from '../model/Int64VarAsString';
import StringValueObject from '../model/StringValueObject';
import StringVar from '../model/StringVar';

/**
* Vars service.
* @module api/VarsApi
* @version R1.0a
*/
export default class VarsApi {

    /**
    * Constructs a new VarsApi. 
    * @alias module:api/VarsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the readDownTimerValue_0 operation.
     * @callback module:api/VarsApi~readDownTimerValue_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FloatValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns current value of the specified down timer
     * @param {String} downTimerName Name of the down timer variable to read
     * @param {module:api/VarsApi~readDownTimerValue_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FloatValueObject}
     */
    readDownTimerValue_0(downTimerName, callback) {
      let postBody = null;
      // verify the required parameter 'downTimerName' is set
      if (downTimerName === undefined || downTimerName === null) {
        throw new Error("Missing the required parameter 'downTimerName' when calling readDownTimerValue_0");
      }

      let pathParams = {
        'downTimerName': downTimerName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FloatValueObject;
      return this.apiClient.callApi(
        '/device/strategy/vars/downTimers/{downTimerName}/value', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readDownTimerVars_0 operation.
     * @callback module:api/VarsApi~readDownTimerVars_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FloatVar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and current value of all down timers in the strategy
     * @param {module:api/VarsApi~readDownTimerVars_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FloatVar>}
     */
    readDownTimerVars_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FloatVar];
      return this.apiClient.callApi(
        '/device/strategy/vars/downTimers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readFloatVar_0 operation.
     * @callback module:api/VarsApi~readFloatVar_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FloatValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns value of the specified float variable
     * @param {String} floatName Name of float variable to read
     * @param {module:api/VarsApi~readFloatVar_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FloatValueObject}
     */
    readFloatVar_0(floatName, callback) {
      let postBody = null;
      // verify the required parameter 'floatName' is set
      if (floatName === undefined || floatName === null) {
        throw new Error("Missing the required parameter 'floatName' when calling readFloatVar_0");
      }

      let pathParams = {
        'floatName': floatName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FloatValueObject;
      return this.apiClient.callApi(
        '/device/strategy/vars/floats/{floatName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readFloatVars_0 operation.
     * @callback module:api/VarsApi~readFloatVars_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FloatVar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and value of all (single-precision) float variables in the strategy
     * @param {module:api/VarsApi~readFloatVars_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FloatVar>}
     */
    readFloatVars_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FloatVar];
      return this.apiClient.callApi(
        '/device/strategy/vars/floats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt32Var_0 operation.
     * @callback module:api/VarsApi~readInt32Var_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Int32ValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns value of the specified integer32 variable
     * @param {String} int32Name Name of integer32 variable to read
     * @param {module:api/VarsApi~readInt32Var_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Int32ValueObject}
     */
    readInt32Var_0(int32Name, callback) {
      let postBody = null;
      // verify the required parameter 'int32Name' is set
      if (int32Name === undefined || int32Name === null) {
        throw new Error("Missing the required parameter 'int32Name' when calling readInt32Var_0");
      }

      let pathParams = {
        'int32Name': int32Name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Int32ValueObject;
      return this.apiClient.callApi(
        '/device/strategy/vars/int32s/{int32Name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt32Vars_0 operation.
     * @callback module:api/VarsApi~readInt32Vars_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Int32Var>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and value of all integer32 variables in the strategy
     * @param {module:api/VarsApi~readInt32Vars_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Int32Var>}
     */
    readInt32Vars_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Int32Var];
      return this.apiClient.callApi(
        '/device/strategy/vars/int32s', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64VarAsString_0 operation.
     * @callback module:api/VarsApi~readInt64VarAsString_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Int64StringValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns value of the specified integer64 variable as a string
     * @param {String} int64Name Name of integer64 variable to read
     * @param {module:api/VarsApi~readInt64VarAsString_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Int64StringValueObject}
     */
    readInt64VarAsString_0(int64Name, callback) {
      let postBody = null;
      // verify the required parameter 'int64Name' is set
      if (int64Name === undefined || int64Name === null) {
        throw new Error("Missing the required parameter 'int64Name' when calling readInt64VarAsString_0");
      }

      let pathParams = {
        'int64Name': int64Name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Int64StringValueObject;
      return this.apiClient.callApi(
        '/device/strategy/vars/int64s/{int64Name}/_string', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64Var_0 operation.
     * @callback module:api/VarsApi~readInt64Var_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Int64ValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns value of the specified integer64 variable
     * @param {String} int64Name Name of integer64 variable to read
     * @param {module:api/VarsApi~readInt64Var_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Int64ValueObject}
     */
    readInt64Var_0(int64Name, callback) {
      let postBody = null;
      // verify the required parameter 'int64Name' is set
      if (int64Name === undefined || int64Name === null) {
        throw new Error("Missing the required parameter 'int64Name' when calling readInt64Var_0");
      }

      let pathParams = {
        'int64Name': int64Name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Int64ValueObject;
      return this.apiClient.callApi(
        '/device/strategy/vars/int64s/{int64Name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64VarsAsStrings_0 operation.
     * @callback module:api/VarsApi~readInt64VarsAsStrings_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Int64VarAsString>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and value as a string of all integer64 variables in the strategy
     * @param {module:api/VarsApi~readInt64VarsAsStrings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Int64VarAsString>}
     */
    readInt64VarsAsStrings_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Int64VarAsString];
      return this.apiClient.callApi(
        '/device/strategy/vars/int64s/_string', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readInt64Vars_0 operation.
     * @callback module:api/VarsApi~readInt64Vars_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Int64Var>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and value of all integer64 variables in the strategy
     * @param {module:api/VarsApi~readInt64Vars_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Int64Var>}
     */
    readInt64Vars_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Int64Var];
      return this.apiClient.callApi(
        '/device/strategy/vars/int64s', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readStringVar_0 operation.
     * @callback module:api/VarsApi~readStringVar_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/StringValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns value of the specified string
     * @param {String} stringName Name of string variable to read
     * @param {module:api/VarsApi~readStringVar_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringValueObject}
     */
    readStringVar_0(stringName, callback) {
      let postBody = null;
      // verify the required parameter 'stringName' is set
      if (stringName === undefined || stringName === null) {
        throw new Error("Missing the required parameter 'stringName' when calling readStringVar_0");
      }

      let pathParams = {
        'stringName': stringName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringValueObject;
      return this.apiClient.callApi(
        '/device/strategy/vars/strings/{stringName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readStringVars_0 operation.
     * @callback module:api/VarsApi~readStringVars_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StringVar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and value of all string variables in the strategy
     * @param {module:api/VarsApi~readStringVars_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StringVar>}
     */
    readStringVars_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [StringVar];
      return this.apiClient.callApi(
        '/device/strategy/vars/strings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readUpTimerValue_0 operation.
     * @callback module:api/VarsApi~readUpTimerValue_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FloatValueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns current value of the specified up timer
     * @param {String} upTimerName Name of the up timer variable to read
     * @param {module:api/VarsApi~readUpTimerValue_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FloatValueObject}
     */
    readUpTimerValue_0(upTimerName, callback) {
      let postBody = null;
      // verify the required parameter 'upTimerName' is set
      if (upTimerName === undefined || upTimerName === null) {
        throw new Error("Missing the required parameter 'upTimerName' when calling readUpTimerValue_0");
      }

      let pathParams = {
        'upTimerName': upTimerName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FloatValueObject;
      return this.apiClient.callApi(
        '/device/strategy/vars/upTimers/{upTimerName}/value', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readUpTimerVars_0 operation.
     * @callback module:api/VarsApi~readUpTimerVars_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FloatVar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name and current value of all up timers in the strategy
     * @param {module:api/VarsApi~readUpTimerVars_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FloatVar>}
     */
    readUpTimerVars_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FloatVar];
      return this.apiClient.callApi(
        '/device/strategy/vars/upTimers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeFloatVar_0 operation.
     * @callback module:api/VarsApi~writeFloatVar_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of a float variable
     * @param {String} floatName Name of the float variable to write
     * @param {module:model/FloatValueObject} body Value to write to the float variable
     * @param {module:api/VarsApi~writeFloatVar_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    writeFloatVar_0(floatName, body, callback) {
      let postBody = body;
      // verify the required parameter 'floatName' is set
      if (floatName === undefined || floatName === null) {
        throw new Error("Missing the required parameter 'floatName' when calling writeFloatVar_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling writeFloatVar_0");
      }

      let pathParams = {
        'floatName': floatName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/vars/floats/{floatName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt32Var_0 operation.
     * @callback module:api/VarsApi~writeInt32Var_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of an integer32 variable
     * @param {String} int32Name Name of integer32 variable to write
     * @param {module:model/Int32ValueObject} body Value to write to the integer32 variable
     * @param {module:api/VarsApi~writeInt32Var_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt32Var_0(int32Name, body, callback) {
      let postBody = body;
      // verify the required parameter 'int32Name' is set
      if (int32Name === undefined || int32Name === null) {
        throw new Error("Missing the required parameter 'int32Name' when calling writeInt32Var_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling writeInt32Var_0");
      }

      let pathParams = {
        'int32Name': int32Name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/vars/int32s/{int32Name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt64VarAsString_0 operation.
     * @callback module:api/VarsApi~writeInt64VarAsString_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of an integer64 variable as a string
     * @param {String} int64Name Name of integer64 variable to write
     * @param {module:model/Int64StringValueObject} body Value to write to the integer64 variable
     * @param {module:api/VarsApi~writeInt64VarAsString_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt64VarAsString_0(int64Name, body, callback) {
      let postBody = body;
      // verify the required parameter 'int64Name' is set
      if (int64Name === undefined || int64Name === null) {
        throw new Error("Missing the required parameter 'int64Name' when calling writeInt64VarAsString_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling writeInt64VarAsString_0");
      }

      let pathParams = {
        'int64Name': int64Name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/vars/int64s/{int64Name}/_string', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeInt64Var_0 operation.
     * @callback module:api/VarsApi~writeInt64Var_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of an integer64 variable
     * @param {String} int64Name Name of integer64 variable to write
     * @param {module:model/Int64ValueObject} body Value to write to the integer64 variable
     * @param {module:api/VarsApi~writeInt64Var_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    writeInt64Var_0(int64Name, body, callback) {
      let postBody = body;
      // verify the required parameter 'int64Name' is set
      if (int64Name === undefined || int64Name === null) {
        throw new Error("Missing the required parameter 'int64Name' when calling writeInt64Var_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling writeInt64Var_0");
      }

      let pathParams = {
        'int64Name': int64Name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/strategy/vars/int64s/{int64Name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeStringVar_0 operation.
     * @callback module:api/VarsApi~writeStringVar_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorResponse200OKish} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of a string variable
     * @param {String} stringName Name of string variable to write
     * @param {module:model/StringValueObject} body String to write. If the value is longer than the string width, the string will be truncated to fit.
     * @param {module:api/VarsApi~writeStringVar_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorResponse200OKish}
     */
    writeStringVar_0(stringName, body, callback) {
      let postBody = body;
      // verify the required parameter 'stringName' is set
      if (stringName === undefined || stringName === null) {
        throw new Error("Missing the required parameter 'stringName' when calling writeStringVar_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling writeStringVar_0");
      }

      let pathParams = {
        'stringName': stringName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ErrorResponse200OKish;
      return this.apiClient.callApi(
        '/device/strategy/vars/strings/{stringName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
