/**
 * PAC Control REST API
 * #### Revised: 6/15/2018  ### Overview This API provides secure access to a SNAP-PAC-R or -S series controller's variable and I/O tags. Confidentiality for API transactions is provided by HTTPS. Authentication uses HTTP Basic Authentication with an API key. An API key ID is submitted in the Basic Authentication userid field and API key value in the password field.  **For more information visit:** [developer.opto22.com](http://developer.opto22.com)  ### Examples  **Read an array** of all the integer32 variables defined in the PAC's strategy. For example, on your SNAP-PAC-R or -S series controller at IP address 1.2.3.4, you would use the URL:   ``` https://1.2.3.4/api/v1/device/strategy/vars/int32s ``` and provide appropriate authentication. The GET response will be a JSON array of name-value  pairs such as:  ```json [ { \"nMyVeryFavoriteNumber\": 22 },   { \"nWidgetsProducedToday\": 22222 },   { \"DELAY_LOOP_TIME_IN_MSECS\"  : 200 } ] ``` **Read the engineering units** (EU) of an analog input point configured in the PAC's strategy. For an analog input (I/O point) named aiTemperatureInDegreesF, use   `https://1.2.3.4/api/v1/device/strategy/ios/analogInputs/aiTemperatureInDegreesF/eu`  The GET response will be a single JSON name-value pair such as: ```json { \"value\": 72.22 } ```      ### Note on packet sizes: When doing POSTs or GETs, the JSON payload in the body should not exceed 3k (3072 bytes). 
 *
 * The version of the OpenAPI document: R1.0a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PacControlRestApi);
  }
}(this, function(expect, PacControlRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PacControlRestApi.TablesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TablesApi', function() {
    describe('readFloatTableElement_0', function() {
      it('should call readFloatTableElement_0 successfully', function(done) {
        //uncomment below and update the code to test readFloatTableElement_0
        //instance.readFloatTableElement_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readFloatTable_0', function() {
      it('should call readFloatTable_0 successfully', function(done) {
        //uncomment below and update the code to test readFloatTable_0
        //instance.readFloatTable_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readFloatTables_0', function() {
      it('should call readFloatTables_0 successfully', function(done) {
        //uncomment below and update the code to test readFloatTables_0
        //instance.readFloatTables_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readInt32TableElement_0', function() {
      it('should call readInt32TableElement_0 successfully', function(done) {
        //uncomment below and update the code to test readInt32TableElement_0
        //instance.readInt32TableElement_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readInt32Table_0', function() {
      it('should call readInt32Table_0 successfully', function(done) {
        //uncomment below and update the code to test readInt32Table_0
        //instance.readInt32Table_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readInt32Tables_0', function() {
      it('should call readInt32Tables_0 successfully', function(done) {
        //uncomment below and update the code to test readInt32Tables_0
        //instance.readInt32Tables_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readInt64TableAsString_0', function() {
      it('should call readInt64TableAsString_0 successfully', function(done) {
        //uncomment below and update the code to test readInt64TableAsString_0
        //instance.readInt64TableAsString_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readInt64TableElementAsString_0', function() {
      it('should call readInt64TableElementAsString_0 successfully', function(done) {
        //uncomment below and update the code to test readInt64TableElementAsString_0
        //instance.readInt64TableElementAsString_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readInt64TableElement_0', function() {
      it('should call readInt64TableElement_0 successfully', function(done) {
        //uncomment below and update the code to test readInt64TableElement_0
        //instance.readInt64TableElement_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readInt64Table_0', function() {
      it('should call readInt64Table_0 successfully', function(done) {
        //uncomment below and update the code to test readInt64Table_0
        //instance.readInt64Table_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readInt64Tables_0', function() {
      it('should call readInt64Tables_0 successfully', function(done) {
        //uncomment below and update the code to test readInt64Tables_0
        //instance.readInt64Tables_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readStringTableElement_0', function() {
      it('should call readStringTableElement_0 successfully', function(done) {
        //uncomment below and update the code to test readStringTableElement_0
        //instance.readStringTableElement_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readStringTable_0', function() {
      it('should call readStringTable_0 successfully', function(done) {
        //uncomment below and update the code to test readStringTable_0
        //instance.readStringTable_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readStringTables_0', function() {
      it('should call readStringTables_0 successfully', function(done) {
        //uncomment below and update the code to test readStringTables_0
        //instance.readStringTables_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writeFloatTableElement_0', function() {
      it('should call writeFloatTableElement_0 successfully', function(done) {
        //uncomment below and update the code to test writeFloatTableElement_0
        //instance.writeFloatTableElement_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writeFloatTable_0', function() {
      it('should call writeFloatTable_0 successfully', function(done) {
        //uncomment below and update the code to test writeFloatTable_0
        //instance.writeFloatTable_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writeInt32TableElement_0', function() {
      it('should call writeInt32TableElement_0 successfully', function(done) {
        //uncomment below and update the code to test writeInt32TableElement_0
        //instance.writeInt32TableElement_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writeInt32Table_0', function() {
      it('should call writeInt32Table_0 successfully', function(done) {
        //uncomment below and update the code to test writeInt32Table_0
        //instance.writeInt32Table_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writeInt64TableAsString_0', function() {
      it('should call writeInt64TableAsString_0 successfully', function(done) {
        //uncomment below and update the code to test writeInt64TableAsString_0
        //instance.writeInt64TableAsString_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writeInt64TableElementAsString_0', function() {
      it('should call writeInt64TableElementAsString_0 successfully', function(done) {
        //uncomment below and update the code to test writeInt64TableElementAsString_0
        //instance.writeInt64TableElementAsString_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writeInt64TableElement_0', function() {
      it('should call writeInt64TableElement_0 successfully', function(done) {
        //uncomment below and update the code to test writeInt64TableElement_0
        //instance.writeInt64TableElement_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writeInt64Table_0', function() {
      it('should call writeInt64Table_0 successfully', function(done) {
        //uncomment below and update the code to test writeInt64Table_0
        //instance.writeInt64Table_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writeStringTableElement_0', function() {
      it('should call writeStringTableElement_0 successfully', function(done) {
        //uncomment below and update the code to test writeStringTableElement_0
        //instance.writeStringTableElement_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writeStringTable_0', function() {
      it('should call writeStringTable_0 successfully', function(done) {
        //uncomment below and update the code to test writeStringTable_0
        //instance.writeStringTable_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
