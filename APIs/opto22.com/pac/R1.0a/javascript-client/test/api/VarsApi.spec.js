/**
 * PAC Control REST API
 * #### Revised: 6/15/2018  ### Overview This API provides secure access to a SNAP-PAC-R or -S series controller's variable and I/O tags. Confidentiality for API transactions is provided by HTTPS. Authentication uses HTTP Basic Authentication with an API key. An API key ID is submitted in the Basic Authentication userid field and API key value in the password field.  **For more information visit:** [developer.opto22.com](http://developer.opto22.com)  ### Examples  **Read an array** of all the integer32 variables defined in the PAC's strategy. For example, on your SNAP-PAC-R or -S series controller at IP address 1.2.3.4, you would use the URL:   ``` https://1.2.3.4/api/v1/device/strategy/vars/int32s ``` and provide appropriate authentication. The GET response will be a JSON array of name-value  pairs such as:  ```json [ { \"nMyVeryFavoriteNumber\": 22 },   { \"nWidgetsProducedToday\": 22222 },   { \"DELAY_LOOP_TIME_IN_MSECS\"  : 200 } ] ``` **Read the engineering units** (EU) of an analog input point configured in the PAC's strategy. For an analog input (I/O point) named aiTemperatureInDegreesF, use   `https://1.2.3.4/api/v1/device/strategy/ios/analogInputs/aiTemperatureInDegreesF/eu`  The GET response will be a single JSON name-value pair such as: ```json { \"value\": 72.22 } ```      ### Note on packet sizes: When doing POSTs or GETs, the JSON payload in the body should not exceed 3k (3072 bytes). 
 *
 * The version of the OpenAPI document: R1.0a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PacControlRestApi);
  }
}(this, function(expect, PacControlRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PacControlRestApi.VarsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VarsApi', function() {
    describe('readDownTimerValue_0', function() {
      it('should call readDownTimerValue_0 successfully', function(done) {
        //uncomment below and update the code to test readDownTimerValue_0
        //instance.readDownTimerValue_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readDownTimerVars_0', function() {
      it('should call readDownTimerVars_0 successfully', function(done) {
        //uncomment below and update the code to test readDownTimerVars_0
        //instance.readDownTimerVars_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readFloatVar_0', function() {
      it('should call readFloatVar_0 successfully', function(done) {
        //uncomment below and update the code to test readFloatVar_0
        //instance.readFloatVar_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readFloatVars_0', function() {
      it('should call readFloatVars_0 successfully', function(done) {
        //uncomment below and update the code to test readFloatVars_0
        //instance.readFloatVars_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readInt32Var_0', function() {
      it('should call readInt32Var_0 successfully', function(done) {
        //uncomment below and update the code to test readInt32Var_0
        //instance.readInt32Var_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readInt32Vars_0', function() {
      it('should call readInt32Vars_0 successfully', function(done) {
        //uncomment below and update the code to test readInt32Vars_0
        //instance.readInt32Vars_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readInt64VarAsString_0', function() {
      it('should call readInt64VarAsString_0 successfully', function(done) {
        //uncomment below and update the code to test readInt64VarAsString_0
        //instance.readInt64VarAsString_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readInt64Var_0', function() {
      it('should call readInt64Var_0 successfully', function(done) {
        //uncomment below and update the code to test readInt64Var_0
        //instance.readInt64Var_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readInt64VarsAsStrings_0', function() {
      it('should call readInt64VarsAsStrings_0 successfully', function(done) {
        //uncomment below and update the code to test readInt64VarsAsStrings_0
        //instance.readInt64VarsAsStrings_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readInt64Vars_0', function() {
      it('should call readInt64Vars_0 successfully', function(done) {
        //uncomment below and update the code to test readInt64Vars_0
        //instance.readInt64Vars_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readStringVar_0', function() {
      it('should call readStringVar_0 successfully', function(done) {
        //uncomment below and update the code to test readStringVar_0
        //instance.readStringVar_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readStringVars_0', function() {
      it('should call readStringVars_0 successfully', function(done) {
        //uncomment below and update the code to test readStringVars_0
        //instance.readStringVars_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readUpTimerValue_0', function() {
      it('should call readUpTimerValue_0 successfully', function(done) {
        //uncomment below and update the code to test readUpTimerValue_0
        //instance.readUpTimerValue_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readUpTimerVars_0', function() {
      it('should call readUpTimerVars_0 successfully', function(done) {
        //uncomment below and update the code to test readUpTimerVars_0
        //instance.readUpTimerVars_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writeFloatVar_0', function() {
      it('should call writeFloatVar_0 successfully', function(done) {
        //uncomment below and update the code to test writeFloatVar_0
        //instance.writeFloatVar_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writeInt32Var_0', function() {
      it('should call writeInt32Var_0 successfully', function(done) {
        //uncomment below and update the code to test writeInt32Var_0
        //instance.writeInt32Var_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writeInt64VarAsString_0', function() {
      it('should call writeInt64VarAsString_0 successfully', function(done) {
        //uncomment below and update the code to test writeInt64VarAsString_0
        //instance.writeInt64VarAsString_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writeInt64Var_0', function() {
      it('should call writeInt64Var_0 successfully', function(done) {
        //uncomment below and update the code to test writeInt64Var_0
        //instance.writeInt64Var_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writeStringVar_0', function() {
      it('should call writeStringVar_0 successfully', function(done) {
        //uncomment below and update the code to test writeStringVar_0
        //instance.writeStringVar_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
