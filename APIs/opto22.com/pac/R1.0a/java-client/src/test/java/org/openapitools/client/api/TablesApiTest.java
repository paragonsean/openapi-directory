/*
 * PAC Control REST API
 * #### Revised: 6/15/2018  ### Overview This API provides secure access to a SNAP-PAC-R or -S series controller's variable and I/O tags. Confidentiality for API transactions is provided by HTTPS. Authentication uses HTTP Basic Authentication with an API key. An API key ID is submitted in the Basic Authentication userid field and API key value in the password field.  **For more information visit:** [developer.opto22.com](http://developer.opto22.com)  ### Examples  **Read an array** of all the integer32 variables defined in the PAC's strategy. For example, on your SNAP-PAC-R or -S series controller at IP address 1.2.3.4, you would use the URL:   ``` https://1.2.3.4/api/v1/device/strategy/vars/int32s ``` and provide appropriate authentication. The GET response will be a JSON array of name-value  pairs such as:  ```json [ { \"nMyVeryFavoriteNumber\": 22 },   { \"nWidgetsProducedToday\": 22222 },   { \"DELAY_LOOP_TIME_IN_MSECS\"  : 200 } ] ``` **Read the engineering units** (EU) of an analog input point configured in the PAC's strategy. For an analog input (I/O point) named aiTemperatureInDegreesF, use   `https://1.2.3.4/api/v1/device/strategy/ios/analogInputs/aiTemperatureInDegreesF/eu`  The GET response will be a single JSON name-value pair such as: ```json { \"value\": 72.22 } ```      ### Note on packet sizes: When doing POSTs or GETs, the JSON payload in the body should not exceed 3k (3072 bytes). 
 *
 * The version of the OpenAPI document: R1.0a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse200OKish;
import org.openapitools.client.model.ErrorResponse400BadAdminOrValue;
import org.openapitools.client.model.ErrorResponse401BadKeyForBasicAuth;
import org.openapitools.client.model.ErrorResponse404NotFound;
import org.openapitools.client.model.FloatValueObject;
import org.openapitools.client.model.Int32ValueObject;
import org.openapitools.client.model.Int64StringValueObject;
import org.openapitools.client.model.Int64ValueObject;
import org.openapitools.client.model.StringValueObject;
import org.openapitools.client.model.TableDef;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TablesApi
 */
@Disabled
public class TablesApiTest {

    private final TablesApi api = new TablesApi();

    /**
     * Read specified table element
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readFloatTableElement_0Test() throws ApiException {
        String tableName = null;
        Integer index = null;
        FloatValueObject response = api.readFloatTableElement_0(tableName, index);
        // TODO: test validations
    }

    /**
     * Read table elements #### Examples #### * Read all elements in a table named ftable: https://1.2.3.4/api/v1/device/strategy/tables/floats/ftable * Read elements 5 and up in a table named ftable starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/floats/ftable?startIndex&#x3D;5 * Read 3 consecutive elements in a table named ftable starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/floats/ftable?startIndex&#x3D;10&amp;numElements&#x3D;3 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readFloatTable_0Test() throws ApiException {
        String tableName = null;
        Integer startIndex = null;
        Integer numElements = null;
        List<Float> response = api.readFloatTable_0(tableName, startIndex, numElements);
        // TODO: test validations
    }

    /**
     * Returns an array of the name and length of all the float tables in the strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readFloatTables_0Test() throws ApiException {
        List<TableDef> response = api.readFloatTables_0();
        // TODO: test validations
    }

    /**
     * Read specified integer32 table element
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readInt32TableElement_0Test() throws ApiException {
        String tableName = null;
        Integer index = null;
        Int32ValueObject response = api.readInt32TableElement_0(tableName, index);
        // TODO: test validations
    }

    /**
     * \&quot;Read a range of table elements from the specified integer32 table\&quot;  #### Examples ####  * Read all elements in a table named itable: https://1.2.3.4/api/v1/device/strategy/tables/int32s/itable  * Read elements 5 and up in a table named itable starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/int32s/itable?startIndex&#x3D;5  * Read 3 consecutive elements in a table named itable starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/int32s/itable?startIndex&#x3D;10&amp;numElements&#x3D;3 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readInt32Table_0Test() throws ApiException {
        String tableName = null;
        Integer startIndex = null;
        Integer numElements = null;
        List<Integer> response = api.readInt32Table_0(tableName, startIndex, numElements);
        // TODO: test validations
    }

    /**
     * Returns an array of the name and length of all the integer32 tables in the strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readInt32Tables_0Test() throws ApiException {
        List<TableDef> response = api.readInt32Tables_0();
        // TODO: test validations
    }

    /**
     * \&quot;Read a range of table elements from the specified integer64 table\&quot;  #### Examples ####  * Read all elements in a table named i64table: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table/_string  * Read elements 5 and up in a table named i64table starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table/_string?startIndex&#x3D;5  * Read 3 consecutive elements in a table named i64table starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table/_string?startIndex&#x3D;10&amp;numElements&#x3D;3 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readInt64TableAsString_0Test() throws ApiException {
        String tableName = null;
        Integer startIndex = null;
        Integer numElements = null;
        List<String> response = api.readInt64TableAsString_0(tableName, startIndex, numElements);
        // TODO: test validations
    }

    /**
     * Read specified integer64 table element as string
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readInt64TableElementAsString_0Test() throws ApiException {
        String tableName = null;
        Integer index = null;
        Int64StringValueObject response = api.readInt64TableElementAsString_0(tableName, index);
        // TODO: test validations
    }

    /**
     * Read specified integer64 table element
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readInt64TableElement_0Test() throws ApiException {
        String tableName = null;
        Integer index = null;
        Int64ValueObject response = api.readInt64TableElement_0(tableName, index);
        // TODO: test validations
    }

    /**
     * \&quot;Read a range of table elements from the specified integer64 table\&quot;  #### Examples ####  * Read all elements in a table named i64table: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table  * Read elements 5 and up in a table named i64table starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table?startIndex&#x3D;5  * Read 3 consecutive elements in a table named i64table starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table?startIndex&#x3D;10&amp;numElements&#x3D;3 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readInt64Table_0Test() throws ApiException {
        String tableName = null;
        Integer startIndex = null;
        Integer numElements = null;
        List<Long> response = api.readInt64Table_0(tableName, startIndex, numElements);
        // TODO: test validations
    }

    /**
     * Returns an array of the name and length of all the integer64 tables in the strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readInt64Tables_0Test() throws ApiException {
        List<TableDef> response = api.readInt64Tables_0();
        // TODO: test validations
    }

    /**
     * Read specified table element
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readStringTableElement_0Test() throws ApiException {
        String tableName = null;
        Integer index = null;
        StringValueObject response = api.readStringTableElement_0(tableName, index);
        // TODO: test validations
    }

    /**
     * \&quot;Read a range of table elements from the specified string table\&quot;  #### Examples ####  * Read all elements in a table named strTable: https://1.2.3.4/api/v1/device/strategy/tables/strings/strTable  * Read elements 5 and up in a table named i64table starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/strings/strTable?startIndex&#x3D;5  * Read 3 consecutive elements in a table named i64table starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/strings/strTable?startIndex&#x3D;10&amp;numElements&#x3D;3 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readStringTable_0Test() throws ApiException {
        String tableName = null;
        Integer startIndex = null;
        Integer numElements = null;
        List<String> response = api.readStringTable_0(tableName, startIndex, numElements);
        // TODO: test validations
    }

    /**
     * Returns an array of the name and length of all the string tables in the strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readStringTables_0Test() throws ApiException {
        List<TableDef> response = api.readStringTables_0();
        // TODO: test validations
    }

    /**
     * Write specified table element
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeFloatTableElement_0Test() throws ApiException {
        String tableName = null;
        Integer index = null;
        FloatValueObject floatElementObject = null;
        api.writeFloatTableElement_0(tableName, index, floatElementObject);
        // TODO: test validations
    }

    /**
     * Write table elements #### Examples #### * Write the values (1.5, 2.4, 3.5) to 3 consecutive elements in a table named ftable starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/floats/ftable?startIndex&#x3D;10  with body of the POST request set to [ 1.5, 2.4, 3.5 ] 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeFloatTable_0Test() throws ApiException {
        String tableName = null;
        List<Float> floatArray = null;
        Integer startIndex = null;
        api.writeFloatTable_0(tableName, floatArray, startIndex);
        // TODO: test validations
    }

    /**
     * Write specified integer32 table element
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeInt32TableElement_0Test() throws ApiException {
        String tableName = null;
        Integer index = null;
        Int32ValueObject int32ElementObject = null;
        api.writeInt32TableElement_0(tableName, index, int32ElementObject);
        // TODO: test validations
    }

    /**
     * \&quot;Write a range of table elements\&quot; #### Examples #### * Write the values (1, 2, 3) to 3 consecutive elements in a table named itable starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/int32s/itable?startIndex&#x3D;10  with body of the POST request set to [ 1, 2, 3 ]       
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeInt32Table_0Test() throws ApiException {
        String tableName = null;
        List<Integer> int32Array = null;
        Integer startIndex = null;
        api.writeInt32Table_0(tableName, int32Array, startIndex);
        // TODO: test validations
    }

    /**
     * \&quot;Write a range of table elements\&quot; #### Examples #### * Write the values (1, 2, 3) to 3 consecutive elements in a table named i64table starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table/_string?startIndex&#x3D;10  with body of the POST request set to [ \&quot;1\&quot;, \&quot;2\&quot;, \&quot;3\&quot; ] 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeInt64TableAsString_0Test() throws ApiException {
        String tableName = null;
        List<String> int64AsStringArray = null;
        Integer startIndex = null;
        api.writeInt64TableAsString_0(tableName, int64AsStringArray, startIndex);
        // TODO: test validations
    }

    /**
     * Write specified integer64 table element as string
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeInt64TableElementAsString_0Test() throws ApiException {
        String tableName = null;
        Integer index = null;
        Int64StringValueObject int64ElementObject = null;
        api.writeInt64TableElementAsString_0(tableName, index, int64ElementObject);
        // TODO: test validations
    }

    /**
     * Write specified integer64 table element
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeInt64TableElement_0Test() throws ApiException {
        String tableName = null;
        Integer index = null;
        Int64ValueObject int64ElementObject = null;
        api.writeInt64TableElement_0(tableName, index, int64ElementObject);
        // TODO: test validations
    }

    /**
     * \&quot;Write a range of table elements\&quot; #### Examples #### * Write the values (1, 2, 3) to 3 consecutive elements in a table named i64table starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table?startIndex&#x3D;10  with body of the POST request set to [ 1, 2, 3 ] 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeInt64Table_0Test() throws ApiException {
        String tableName = null;
        List<Long> int64Array = null;
        Integer startIndex = null;
        api.writeInt64Table_0(tableName, int64Array, startIndex);
        // TODO: test validations
    }

    /**
     * Write specified table element
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeStringTableElement_0Test() throws ApiException {
        String tableName = null;
        Integer index = null;
        StringValueObject stringElementObject = null;
        api.writeStringTableElement_0(tableName, index, stringElementObject);
        // TODO: test validations
    }

    /**
     * \&quot;Write a range of table elements\&quot; #### Examples #### * Write the values (\&quot;first\&quot;, \&quot;second\&quot;, \&quot;third\&quot;) to 3 consecutive elements in a table named strTable starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/strings/strtable?startIndex&#x3D;10  with body of the POST request set to [ \&quot;first\&quot;, \&quot;second\&quot;, \&quot;third\&quot; ] 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeStringTable_0Test() throws ApiException {
        String tableName = null;
        List<String> stringArray = null;
        Integer startIndex = null;
        ErrorResponse200OKish response = api.writeStringTable_0(tableName, stringArray, startIndex);
        // TODO: test validations
    }

}
