/*
 * PAC Control REST API
 * #### Revised: 6/15/2018  ### Overview This API provides secure access to a SNAP-PAC-R or -S series controller's variable and I/O tags. Confidentiality for API transactions is provided by HTTPS. Authentication uses HTTP Basic Authentication with an API key. An API key ID is submitted in the Basic Authentication userid field and API key value in the password field.  **For more information visit:** [developer.opto22.com](http://developer.opto22.com)  ### Examples  **Read an array** of all the integer32 variables defined in the PAC's strategy. For example, on your SNAP-PAC-R or -S series controller at IP address 1.2.3.4, you would use the URL:   ``` https://1.2.3.4/api/v1/device/strategy/vars/int32s ``` and provide appropriate authentication. The GET response will be a JSON array of name-value  pairs such as:  ```json [ { \"nMyVeryFavoriteNumber\": 22 },   { \"nWidgetsProducedToday\": 22222 },   { \"DELAY_LOOP_TIME_IN_MSECS\"  : 200 } ] ``` **Read the engineering units** (EU) of an analog input point configured in the PAC's strategy. For an analog input (I/O point) named aiTemperatureInDegreesF, use   `https://1.2.3.4/api/v1/device/strategy/ios/analogInputs/aiTemperatureInDegreesF/eu`  The GET response will be a single JSON name-value pair such as: ```json { \"value\": 72.22 } ```      ### Note on packet sizes: When doing POSTs or GETs, the JSON payload in the body should not exceed 3k (3072 bytes). 
 *
 * The version of the OpenAPI document: R1.0a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse200OKish;
import org.openapitools.client.model.ErrorResponse400BadAdminOrValue;
import org.openapitools.client.model.ErrorResponse401BadKeyForBasicAuth;
import org.openapitools.client.model.ErrorResponse404NotFound;
import org.openapitools.client.model.FloatValueObject;
import org.openapitools.client.model.FloatVar;
import org.openapitools.client.model.Int32ValueObject;
import org.openapitools.client.model.Int32Var;
import org.openapitools.client.model.Int64StringValueObject;
import org.openapitools.client.model.Int64ValueObject;
import org.openapitools.client.model.Int64Var;
import org.openapitools.client.model.Int64VarAsString;
import org.openapitools.client.model.StringValueObject;
import org.openapitools.client.model.StringVar;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VarsApi
 */
@Disabled
public class VarsApiTest {

    private final VarsApi api = new VarsApi();

    /**
     * Returns current value of the specified down timer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readDownTimerValue_0Test() throws ApiException {
        String downTimerName = null;
        FloatValueObject response = api.readDownTimerValue_0(downTimerName);
        // TODO: test validations
    }

    /**
     * Returns the name and current value of all down timers in the strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readDownTimerVars_0Test() throws ApiException {
        List<FloatVar> response = api.readDownTimerVars_0();
        // TODO: test validations
    }

    /**
     * Returns value of the specified float variable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readFloatVar_0Test() throws ApiException {
        String floatName = null;
        FloatValueObject response = api.readFloatVar_0(floatName);
        // TODO: test validations
    }

    /**
     * Returns the name and value of all (single-precision) float variables in the strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readFloatVars_0Test() throws ApiException {
        List<FloatVar> response = api.readFloatVars_0();
        // TODO: test validations
    }

    /**
     * Returns value of the specified integer32 variable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readInt32Var_0Test() throws ApiException {
        String int32Name = null;
        Int32ValueObject response = api.readInt32Var_0(int32Name);
        // TODO: test validations
    }

    /**
     * Returns the name and value of all integer32 variables in the strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readInt32Vars_0Test() throws ApiException {
        List<Int32Var> response = api.readInt32Vars_0();
        // TODO: test validations
    }

    /**
     * Returns value of the specified integer64 variable as a string
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readInt64VarAsString_0Test() throws ApiException {
        String int64Name = null;
        Int64StringValueObject response = api.readInt64VarAsString_0(int64Name);
        // TODO: test validations
    }

    /**
     * Returns value of the specified integer64 variable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readInt64Var_0Test() throws ApiException {
        String int64Name = null;
        Int64ValueObject response = api.readInt64Var_0(int64Name);
        // TODO: test validations
    }

    /**
     * Returns the name and value as a string of all integer64 variables in the strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readInt64VarsAsStrings_0Test() throws ApiException {
        List<Int64VarAsString> response = api.readInt64VarsAsStrings_0();
        // TODO: test validations
    }

    /**
     * Returns the name and value of all integer64 variables in the strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readInt64Vars_0Test() throws ApiException {
        List<Int64Var> response = api.readInt64Vars_0();
        // TODO: test validations
    }

    /**
     * Returns value of the specified string
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readStringVar_0Test() throws ApiException {
        String stringName = null;
        StringValueObject response = api.readStringVar_0(stringName);
        // TODO: test validations
    }

    /**
     * Returns the name and value of all string variables in the strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readStringVars_0Test() throws ApiException {
        List<StringVar> response = api.readStringVars_0();
        // TODO: test validations
    }

    /**
     * Returns current value of the specified up timer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readUpTimerValue_0Test() throws ApiException {
        String upTimerName = null;
        FloatValueObject response = api.readUpTimerValue_0(upTimerName);
        // TODO: test validations
    }

    /**
     * Returns the name and current value of all up timers in the strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readUpTimerVars_0Test() throws ApiException {
        List<FloatVar> response = api.readUpTimerVars_0();
        // TODO: test validations
    }

    /**
     * Sets the value of a float variable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeFloatVar_0Test() throws ApiException {
        String floatName = null;
        FloatValueObject body = null;
        api.writeFloatVar_0(floatName, body);
        // TODO: test validations
    }

    /**
     * Sets the value of an integer32 variable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeInt32Var_0Test() throws ApiException {
        String int32Name = null;
        Int32ValueObject body = null;
        api.writeInt32Var_0(int32Name, body);
        // TODO: test validations
    }

    /**
     * Sets the value of an integer64 variable as a string
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeInt64VarAsString_0Test() throws ApiException {
        String int64Name = null;
        Int64StringValueObject body = null;
        api.writeInt64VarAsString_0(int64Name, body);
        // TODO: test validations
    }

    /**
     * Sets the value of an integer64 variable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeInt64Var_0Test() throws ApiException {
        String int64Name = null;
        Int64ValueObject body = null;
        api.writeInt64Var_0(int64Name, body);
        // TODO: test validations
    }

    /**
     * Sets the value of a string variable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeStringVar_0Test() throws ApiException {
        String stringName = null;
        StringValueObject body = null;
        ErrorResponse200OKish response = api.writeStringVar_0(stringName, body);
        // TODO: test validations
    }

}
