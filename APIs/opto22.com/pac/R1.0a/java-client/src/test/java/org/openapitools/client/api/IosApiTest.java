/*
 * PAC Control REST API
 * #### Revised: 6/15/2018  ### Overview This API provides secure access to a SNAP-PAC-R or -S series controller's variable and I/O tags. Confidentiality for API transactions is provided by HTTPS. Authentication uses HTTP Basic Authentication with an API key. An API key ID is submitted in the Basic Authentication userid field and API key value in the password field.  **For more information visit:** [developer.opto22.com](http://developer.opto22.com)  ### Examples  **Read an array** of all the integer32 variables defined in the PAC's strategy. For example, on your SNAP-PAC-R or -S series controller at IP address 1.2.3.4, you would use the URL:   ``` https://1.2.3.4/api/v1/device/strategy/vars/int32s ``` and provide appropriate authentication. The GET response will be a JSON array of name-value  pairs such as:  ```json [ { \"nMyVeryFavoriteNumber\": 22 },   { \"nWidgetsProducedToday\": 22222 },   { \"DELAY_LOOP_TIME_IN_MSECS\"  : 200 } ] ``` **Read the engineering units** (EU) of an analog input point configured in the PAC's strategy. For an analog input (I/O point) named aiTemperatureInDegreesF, use   `https://1.2.3.4/api/v1/device/strategy/ios/analogInputs/aiTemperatureInDegreesF/eu`  The GET response will be a single JSON name-value pair such as: ```json { \"value\": 72.22 } ```      ### Note on packet sizes: When doing POSTs or GETs, the JSON payload in the body should not exceed 3k (3072 bytes). 
 *
 * The version of the OpenAPI document: R1.0a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DigitalPointStateObject;
import org.openapitools.client.model.DigitalPointStateVar;
import org.openapitools.client.model.ErrorResponse400BadAdminOrValue;
import org.openapitools.client.model.ErrorResponse401BadKeyForBasicAuth;
import org.openapitools.client.model.ErrorResponse404NotFound;
import org.openapitools.client.model.FloatValueObject;
import org.openapitools.client.model.FloatVar;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IosApi
 */
@Disabled
public class IosApiTest {

    private final IosApi api = new IosApi();

    /**
     * Reads the value in engineering units (EU) of the specified analog input
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readAnalogInputEu_0Test() throws ApiException {
        String ioName = null;
        FloatValueObject response = api.readAnalogInputEu_0(ioName);
        // TODO: test validations
    }

    /**
     * Returns the name and engineering units (EU) for all analog input points in the strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readAnalogInputs_0Test() throws ApiException {
        List<FloatVar> response = api.readAnalogInputs_0();
        // TODO: test validations
    }

    /**
     * Reads the value in engineering units (EU) of the specified analog output
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readAnalogOutputEu_0Test() throws ApiException {
        String ioName = null;
        FloatValueObject response = api.readAnalogOutputEu_0(ioName);
        // TODO: test validations
    }

    /**
     * Returns the name and engineering units (EU) for all analog output points in the strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readAnalogOutputs_0Test() throws ApiException {
        List<FloatVar> response = api.readAnalogOutputs_0();
        // TODO: test validations
    }

    /**
     * Returns the specified digital input point&#39;s state (true &#x3D; on, false &#x3D; off)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readDigitalInputState_0Test() throws ApiException {
        String ioName = null;
        DigitalPointStateObject response = api.readDigitalInputState_0(ioName);
        // TODO: test validations
    }

    /**
     * Returns the name and state (true &#x3D; on, false &#x3D; off) of all digital input points in the strategy. If there is no strategy in the controller, or the strategy includes no digital inputs, the returned array will be empty.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readDigitalInputs_0Test() throws ApiException {
        List<DigitalPointStateVar> response = api.readDigitalInputs_0();
        // TODO: test validations
    }

    /**
     * Returns the specified digital output point&#39;s state (true &#x3D; on, false &#x3D; off)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readDigitalOutputState_0Test() throws ApiException {
        String ioName = null;
        DigitalPointStateObject response = api.readDigitalOutputState_0(ioName);
        // TODO: test validations
    }

    /**
     * Returns the name and state (true &#x3D; on, false &#x3D; off) of all digital output points in the strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readDigitalOutputs_0Test() throws ApiException {
        List<DigitalPointStateVar> response = api.readDigitalOutputs_0();
        // TODO: test validations
    }

    /**
     * Sets the value of the specified analog output point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeAnalogOutputEu_0Test() throws ApiException {
        String ioName = null;
        FloatValueObject body = null;
        api.writeAnalogOutputEu_0(ioName, body);
        // TODO: test validations
    }

    /**
     * Sets the value of the specified digital output point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeDigitalOutputState_0Test() throws ApiException {
        String ioName = null;
        DigitalPointStateObject body = null;
        api.writeDigitalOutputState_0(ioName, body);
        // TODO: test validations
    }

}
