# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TableDef(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, length: int=None, name: str=None):
        """TableDef - a model defined in OpenAPI

        :param length: The length of this TableDef.
        :param name: The name of this TableDef.
        """
        self.openapi_types = {
            'length': int,
            'name': str
        }

        self.attribute_map = {
            'length': 'length',
            'name': 'name'
        }

        self._length = length
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableDef':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableDef of this TableDef.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def length(self):
        """Gets the length of this TableDef.

        Number of elements contained in this table

        :return: The length of this TableDef.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this TableDef.

        Number of elements contained in this table

        :param length: The length of this TableDef.
        :type length: int
        """

        self._length = length

    @property
    def name(self):
        """Gets the name of this TableDef.

        Name of the tag (strategy variable, i/o point, etc.)

        :return: The name of this TableDef.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TableDef.

        Name of the tag (strategy variable, i/o point, etc.)

        :param name: The name of this TableDef.
        :type name: str
        """
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")

        self._name = name
