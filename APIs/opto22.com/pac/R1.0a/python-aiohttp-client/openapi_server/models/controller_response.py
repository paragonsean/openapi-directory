# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ControllerResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, controller_type: str=None, firmware_date: str=None, firmware_time: str=None, firmware_version: str=None, mac1: str=None, mac2: str=None, up_time_seconds: int=None):
        """ControllerResponse - a model defined in OpenAPI

        :param controller_type: The controller_type of this ControllerResponse.
        :param firmware_date: The firmware_date of this ControllerResponse.
        :param firmware_time: The firmware_time of this ControllerResponse.
        :param firmware_version: The firmware_version of this ControllerResponse.
        :param mac1: The mac1 of this ControllerResponse.
        :param mac2: The mac2 of this ControllerResponse.
        :param up_time_seconds: The up_time_seconds of this ControllerResponse.
        """
        self.openapi_types = {
            'controller_type': str,
            'firmware_date': str,
            'firmware_time': str,
            'firmware_version': str,
            'mac1': str,
            'mac2': str,
            'up_time_seconds': int
        }

        self.attribute_map = {
            'controller_type': 'controllerType',
            'firmware_date': 'firmwareDate',
            'firmware_time': 'firmwareTime',
            'firmware_version': 'firmwareVersion',
            'mac1': 'mac1',
            'mac2': 'mac2',
            'up_time_seconds': 'upTimeSeconds'
        }

        self._controller_type = controller_type
        self._firmware_date = firmware_date
        self._firmware_time = firmware_time
        self._firmware_version = firmware_version
        self._mac1 = mac1
        self._mac2 = mac2
        self._up_time_seconds = up_time_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ControllerResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ControllerResponse of this ControllerResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def controller_type(self):
        """Gets the controller_type of this ControllerResponse.


        :return: The controller_type of this ControllerResponse.
        :rtype: str
        """
        return self._controller_type

    @controller_type.setter
    def controller_type(self, controller_type):
        """Sets the controller_type of this ControllerResponse.


        :param controller_type: The controller_type of this ControllerResponse.
        :type controller_type: str
        """

        self._controller_type = controller_type

    @property
    def firmware_date(self):
        """Gets the firmware_date of this ControllerResponse.


        :return: The firmware_date of this ControllerResponse.
        :rtype: str
        """
        return self._firmware_date

    @firmware_date.setter
    def firmware_date(self, firmware_date):
        """Sets the firmware_date of this ControllerResponse.


        :param firmware_date: The firmware_date of this ControllerResponse.
        :type firmware_date: str
        """

        self._firmware_date = firmware_date

    @property
    def firmware_time(self):
        """Gets the firmware_time of this ControllerResponse.


        :return: The firmware_time of this ControllerResponse.
        :rtype: str
        """
        return self._firmware_time

    @firmware_time.setter
    def firmware_time(self, firmware_time):
        """Sets the firmware_time of this ControllerResponse.


        :param firmware_time: The firmware_time of this ControllerResponse.
        :type firmware_time: str
        """

        self._firmware_time = firmware_time

    @property
    def firmware_version(self):
        """Gets the firmware_version of this ControllerResponse.


        :return: The firmware_version of this ControllerResponse.
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this ControllerResponse.


        :param firmware_version: The firmware_version of this ControllerResponse.
        :type firmware_version: str
        """

        self._firmware_version = firmware_version

    @property
    def mac1(self):
        """Gets the mac1 of this ControllerResponse.


        :return: The mac1 of this ControllerResponse.
        :rtype: str
        """
        return self._mac1

    @mac1.setter
    def mac1(self, mac1):
        """Sets the mac1 of this ControllerResponse.


        :param mac1: The mac1 of this ControllerResponse.
        :type mac1: str
        """

        self._mac1 = mac1

    @property
    def mac2(self):
        """Gets the mac2 of this ControllerResponse.


        :return: The mac2 of this ControllerResponse.
        :rtype: str
        """
        return self._mac2

    @mac2.setter
    def mac2(self, mac2):
        """Sets the mac2 of this ControllerResponse.


        :param mac2: The mac2 of this ControllerResponse.
        :type mac2: str
        """

        self._mac2 = mac2

    @property
    def up_time_seconds(self):
        """Gets the up_time_seconds of this ControllerResponse.


        :return: The up_time_seconds of this ControllerResponse.
        :rtype: int
        """
        return self._up_time_seconds

    @up_time_seconds.setter
    def up_time_seconds(self, up_time_seconds):
        """Sets the up_time_seconds of this ControllerResponse.


        :param up_time_seconds: The up_time_seconds of this ControllerResponse.
        :type up_time_seconds: int
        """

        self._up_time_seconds = up_time_seconds
