# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorResponse400BadAdminOrValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_code: int=None, message: str=None):
        """ErrorResponse400BadAdminOrValue - a model defined in OpenAPI

        :param error_code: The error_code of this ErrorResponse400BadAdminOrValue.
        :param message: The message of this ErrorResponse400BadAdminOrValue.
        """
        self.openapi_types = {
            'error_code': int,
            'message': str
        }

        self.attribute_map = {
            'error_code': 'errorCode',
            'message': 'message'
        }

        self._error_code = error_code
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorResponse400BadAdminOrValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorResponse400BadAdminOrValue of this ErrorResponse400BadAdminOrValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self):
        """Gets the error_code of this ErrorResponse400BadAdminOrValue.

        Details: ** -1 ** Invalid or no strategy. Use PAC Control to download strategy logic. ** -3 ** Buffer overrun or invalid length. The number or range of table indicies you specified exceeds elements in the PAC Control table. ** -8 ** Invalid data. Check format of data written. Compare to what's read for the same endpoint. ** -12 ** You've passed a table index that is less than zero or greater than the length of the table minus 1. ** -13 ** The value you passed to write is outside of the valid range for the PAC Control data type you're writing to. For example, if you specified the value 999999999999999 for an integer32 (since integer32 data types must be in the range: -2147483648 to 2147483647). ** -17 or -20 ** The controller is busy with another task, for example, downloading a new strategy. Try again later. ** -36 ** Endpoint is not defined. ** -109 ** Attempting to write without write permissions. Check /admin/keys settings. ** -13019 ** Invalid endpoint. Check syntax of the URL (e.g. did you use 'ev' instead of 'eu'). ** 400 ** Before using the API on this device, you must first change the default user name and password via the URL /admin/keys. Use the default User Name: 'admin' and Password: 'password' to log ininitially.

        :return: The error_code of this ErrorResponse400BadAdminOrValue.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ErrorResponse400BadAdminOrValue.

        Details: ** -1 ** Invalid or no strategy. Use PAC Control to download strategy logic. ** -3 ** Buffer overrun or invalid length. The number or range of table indicies you specified exceeds elements in the PAC Control table. ** -8 ** Invalid data. Check format of data written. Compare to what's read for the same endpoint. ** -12 ** You've passed a table index that is less than zero or greater than the length of the table minus 1. ** -13 ** The value you passed to write is outside of the valid range for the PAC Control data type you're writing to. For example, if you specified the value 999999999999999 for an integer32 (since integer32 data types must be in the range: -2147483648 to 2147483647). ** -17 or -20 ** The controller is busy with another task, for example, downloading a new strategy. Try again later. ** -36 ** Endpoint is not defined. ** -109 ** Attempting to write without write permissions. Check /admin/keys settings. ** -13019 ** Invalid endpoint. Check syntax of the URL (e.g. did you use 'ev' instead of 'eu'). ** 400 ** Before using the API on this device, you must first change the default user name and password via the URL /admin/keys. Use the default User Name: 'admin' and Password: 'password' to log ininitially.

        :param error_code: The error_code of this ErrorResponse400BadAdminOrValue.
        :type error_code: int
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def message(self):
        """Gets the message of this ErrorResponse400BadAdminOrValue.


        :return: The message of this ErrorResponse400BadAdminOrValue.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorResponse400BadAdminOrValue.


        :param message: The message of this ErrorResponse400BadAdminOrValue.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message
