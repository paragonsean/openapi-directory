/**
 * PAC Control REST API
 * #### Revised: 6/15/2018  ### Overview This API provides secure access to a SNAP-PAC-R or -S series controller's variable and I/O tags. Confidentiality for API transactions is provided by HTTPS. Authentication uses HTTP Basic Authentication with an API key. An API key ID is submitted in the Basic Authentication userid field and API key value in the password field.  **For more information visit:** [developer.opto22.com](http://developer.opto22.com)  ### Examples  **Read an array** of all the integer32 variables defined in the PAC's strategy. For example, on your SNAP-PAC-R or -S series controller at IP address 1.2.3.4, you would use the URL:   ``` https://1.2.3.4/api/v1/device/strategy/vars/int32s ``` and provide appropriate authentication. The GET response will be a JSON array of name-value  pairs such as:  ```json [ { \"nMyVeryFavoriteNumber\": 22 },   { \"nWidgetsProducedToday\": 22222 },   { \"DELAY_LOOP_TIME_IN_MSECS\"  : 200 } ] ``` **Read the engineering units** (EU) of an analog input point configured in the PAC's strategy. For an analog input (I/O point) named aiTemperatureInDegreesF, use   `https://1.2.3.4/api/v1/device/strategy/ios/analogInputs/aiTemperatureInDegreesF/eu`  The GET response will be a single JSON name-value pair such as: ```json { \"value\": 72.22 } ```      ### Note on packet sizes: When doing POSTs or GETs, the JSON payload in the body should not exceed 3k (3072 bytes). 
 *
 * The version of the OpenAPI document: R1.0a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControllerResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControllerResponse::OAIControllerResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControllerResponse::OAIControllerResponse() {
    this->initializeModel();
}

OAIControllerResponse::~OAIControllerResponse() {}

void OAIControllerResponse::initializeModel() {

    m_controller_type_isSet = false;
    m_controller_type_isValid = false;

    m_firmware_date_isSet = false;
    m_firmware_date_isValid = false;

    m_firmware_time_isSet = false;
    m_firmware_time_isValid = false;

    m_firmware_version_isSet = false;
    m_firmware_version_isValid = false;

    m_mac1_isSet = false;
    m_mac1_isValid = false;

    m_mac2_isSet = false;
    m_mac2_isValid = false;

    m_up_time_seconds_isSet = false;
    m_up_time_seconds_isValid = false;
}

void OAIControllerResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControllerResponse::fromJsonObject(QJsonObject json) {

    m_controller_type_isValid = ::OpenAPI::fromJsonValue(m_controller_type, json[QString("controllerType")]);
    m_controller_type_isSet = !json[QString("controllerType")].isNull() && m_controller_type_isValid;

    m_firmware_date_isValid = ::OpenAPI::fromJsonValue(m_firmware_date, json[QString("firmwareDate")]);
    m_firmware_date_isSet = !json[QString("firmwareDate")].isNull() && m_firmware_date_isValid;

    m_firmware_time_isValid = ::OpenAPI::fromJsonValue(m_firmware_time, json[QString("firmwareTime")]);
    m_firmware_time_isSet = !json[QString("firmwareTime")].isNull() && m_firmware_time_isValid;

    m_firmware_version_isValid = ::OpenAPI::fromJsonValue(m_firmware_version, json[QString("firmwareVersion")]);
    m_firmware_version_isSet = !json[QString("firmwareVersion")].isNull() && m_firmware_version_isValid;

    m_mac1_isValid = ::OpenAPI::fromJsonValue(m_mac1, json[QString("mac1")]);
    m_mac1_isSet = !json[QString("mac1")].isNull() && m_mac1_isValid;

    m_mac2_isValid = ::OpenAPI::fromJsonValue(m_mac2, json[QString("mac2")]);
    m_mac2_isSet = !json[QString("mac2")].isNull() && m_mac2_isValid;

    m_up_time_seconds_isValid = ::OpenAPI::fromJsonValue(m_up_time_seconds, json[QString("upTimeSeconds")]);
    m_up_time_seconds_isSet = !json[QString("upTimeSeconds")].isNull() && m_up_time_seconds_isValid;
}

QString OAIControllerResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControllerResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_controller_type_isSet) {
        obj.insert(QString("controllerType"), ::OpenAPI::toJsonValue(m_controller_type));
    }
    if (m_firmware_date_isSet) {
        obj.insert(QString("firmwareDate"), ::OpenAPI::toJsonValue(m_firmware_date));
    }
    if (m_firmware_time_isSet) {
        obj.insert(QString("firmwareTime"), ::OpenAPI::toJsonValue(m_firmware_time));
    }
    if (m_firmware_version_isSet) {
        obj.insert(QString("firmwareVersion"), ::OpenAPI::toJsonValue(m_firmware_version));
    }
    if (m_mac1_isSet) {
        obj.insert(QString("mac1"), ::OpenAPI::toJsonValue(m_mac1));
    }
    if (m_mac2_isSet) {
        obj.insert(QString("mac2"), ::OpenAPI::toJsonValue(m_mac2));
    }
    if (m_up_time_seconds_isSet) {
        obj.insert(QString("upTimeSeconds"), ::OpenAPI::toJsonValue(m_up_time_seconds));
    }
    return obj;
}

QString OAIControllerResponse::getControllerType() const {
    return m_controller_type;
}
void OAIControllerResponse::setControllerType(const QString &controller_type) {
    m_controller_type = controller_type;
    m_controller_type_isSet = true;
}

bool OAIControllerResponse::is_controller_type_Set() const{
    return m_controller_type_isSet;
}

bool OAIControllerResponse::is_controller_type_Valid() const{
    return m_controller_type_isValid;
}

QString OAIControllerResponse::getFirmwareDate() const {
    return m_firmware_date;
}
void OAIControllerResponse::setFirmwareDate(const QString &firmware_date) {
    m_firmware_date = firmware_date;
    m_firmware_date_isSet = true;
}

bool OAIControllerResponse::is_firmware_date_Set() const{
    return m_firmware_date_isSet;
}

bool OAIControllerResponse::is_firmware_date_Valid() const{
    return m_firmware_date_isValid;
}

QString OAIControllerResponse::getFirmwareTime() const {
    return m_firmware_time;
}
void OAIControllerResponse::setFirmwareTime(const QString &firmware_time) {
    m_firmware_time = firmware_time;
    m_firmware_time_isSet = true;
}

bool OAIControllerResponse::is_firmware_time_Set() const{
    return m_firmware_time_isSet;
}

bool OAIControllerResponse::is_firmware_time_Valid() const{
    return m_firmware_time_isValid;
}

QString OAIControllerResponse::getFirmwareVersion() const {
    return m_firmware_version;
}
void OAIControllerResponse::setFirmwareVersion(const QString &firmware_version) {
    m_firmware_version = firmware_version;
    m_firmware_version_isSet = true;
}

bool OAIControllerResponse::is_firmware_version_Set() const{
    return m_firmware_version_isSet;
}

bool OAIControllerResponse::is_firmware_version_Valid() const{
    return m_firmware_version_isValid;
}

QString OAIControllerResponse::getMac1() const {
    return m_mac1;
}
void OAIControllerResponse::setMac1(const QString &mac1) {
    m_mac1 = mac1;
    m_mac1_isSet = true;
}

bool OAIControllerResponse::is_mac1_Set() const{
    return m_mac1_isSet;
}

bool OAIControllerResponse::is_mac1_Valid() const{
    return m_mac1_isValid;
}

QString OAIControllerResponse::getMac2() const {
    return m_mac2;
}
void OAIControllerResponse::setMac2(const QString &mac2) {
    m_mac2 = mac2;
    m_mac2_isSet = true;
}

bool OAIControllerResponse::is_mac2_Set() const{
    return m_mac2_isSet;
}

bool OAIControllerResponse::is_mac2_Valid() const{
    return m_mac2_isValid;
}

qint32 OAIControllerResponse::getUpTimeSeconds() const {
    return m_up_time_seconds;
}
void OAIControllerResponse::setUpTimeSeconds(const qint32 &up_time_seconds) {
    m_up_time_seconds = up_time_seconds;
    m_up_time_seconds_isSet = true;
}

bool OAIControllerResponse::is_up_time_seconds_Set() const{
    return m_up_time_seconds_isSet;
}

bool OAIControllerResponse::is_up_time_seconds_Valid() const{
    return m_up_time_seconds_isValid;
}

bool OAIControllerResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_controller_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_up_time_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControllerResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
