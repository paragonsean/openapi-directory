/**
 * PAC Control REST API
 * #### Revised: 6/15/2018  ### Overview This API provides secure access to a SNAP-PAC-R or -S series controller's variable and I/O tags. Confidentiality for API transactions is provided by HTTPS. Authentication uses HTTP Basic Authentication with an API key. An API key ID is submitted in the Basic Authentication userid field and API key value in the password field.  **For more information visit:** [developer.opto22.com](http://developer.opto22.com)  ### Examples  **Read an array** of all the integer32 variables defined in the PAC's strategy. For example, on your SNAP-PAC-R or -S series controller at IP address 1.2.3.4, you would use the URL:   ``` https://1.2.3.4/api/v1/device/strategy/vars/int32s ``` and provide appropriate authentication. The GET response will be a JSON array of name-value  pairs such as:  ```json [ { \"nMyVeryFavoriteNumber\": 22 },   { \"nWidgetsProducedToday\": 22222 },   { \"DELAY_LOOP_TIME_IN_MSECS\"  : 200 } ] ``` **Read the engineering units** (EU) of an analog input point configured in the PAC's strategy. For an analog input (I/O point) named aiTemperatureInDegreesF, use   `https://1.2.3.4/api/v1/device/strategy/ios/analogInputs/aiTemperatureInDegreesF/eu`  The GET response will be a single JSON name-value pair such as: ```json { \"value\": 72.22 } ```      ### Note on packet sizes: When doing POSTs or GETs, the JSON payload in the body should not exceed 3k (3072 bytes). 
 *
 * The version of the OpenAPI document: R1.0a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIControllerResponse.h
 *
 * 
 */

#ifndef OAIControllerResponse_H
#define OAIControllerResponse_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIControllerResponse : public OAIObject {
public:
    OAIControllerResponse();
    OAIControllerResponse(QString json);
    ~OAIControllerResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getControllerType() const;
    void setControllerType(const QString &controller_type);
    bool is_controller_type_Set() const;
    bool is_controller_type_Valid() const;

    QString getFirmwareDate() const;
    void setFirmwareDate(const QString &firmware_date);
    bool is_firmware_date_Set() const;
    bool is_firmware_date_Valid() const;

    QString getFirmwareTime() const;
    void setFirmwareTime(const QString &firmware_time);
    bool is_firmware_time_Set() const;
    bool is_firmware_time_Valid() const;

    QString getFirmwareVersion() const;
    void setFirmwareVersion(const QString &firmware_version);
    bool is_firmware_version_Set() const;
    bool is_firmware_version_Valid() const;

    QString getMac1() const;
    void setMac1(const QString &mac1);
    bool is_mac1_Set() const;
    bool is_mac1_Valid() const;

    QString getMac2() const;
    void setMac2(const QString &mac2);
    bool is_mac2_Set() const;
    bool is_mac2_Valid() const;

    qint32 getUpTimeSeconds() const;
    void setUpTimeSeconds(const qint32 &up_time_seconds);
    bool is_up_time_seconds_Set() const;
    bool is_up_time_seconds_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_controller_type;
    bool m_controller_type_isSet;
    bool m_controller_type_isValid;

    QString m_firmware_date;
    bool m_firmware_date_isSet;
    bool m_firmware_date_isValid;

    QString m_firmware_time;
    bool m_firmware_time_isSet;
    bool m_firmware_time_isValid;

    QString m_firmware_version;
    bool m_firmware_version_isSet;
    bool m_firmware_version_isValid;

    QString m_mac1;
    bool m_mac1_isSet;
    bool m_mac1_isValid;

    QString m_mac2;
    bool m_mac2_isSet;
    bool m_mac2_isValid;

    qint32 m_up_time_seconds;
    bool m_up_time_seconds_isSet;
    bool m_up_time_seconds_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIControllerResponse)

#endif // OAIControllerResponse_H
