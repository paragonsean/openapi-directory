/**
 * PAC Control REST API
 * #### Revised: 6/15/2018  ### Overview This API provides secure access to a SNAP-PAC-R or -S series controller's variable and I/O tags. Confidentiality for API transactions is provided by HTTPS. Authentication uses HTTP Basic Authentication with an API key. An API key ID is submitted in the Basic Authentication userid field and API key value in the password field.  **For more information visit:** [developer.opto22.com](http://developer.opto22.com)  ### Examples  **Read an array** of all the integer32 variables defined in the PAC's strategy. For example, on your SNAP-PAC-R or -S series controller at IP address 1.2.3.4, you would use the URL:   ``` https://1.2.3.4/api/v1/device/strategy/vars/int32s ``` and provide appropriate authentication. The GET response will be a JSON array of name-value  pairs such as:  ```json [ { \"nMyVeryFavoriteNumber\": 22 },   { \"nWidgetsProducedToday\": 22222 },   { \"DELAY_LOOP_TIME_IN_MSECS\"  : 200 } ] ``` **Read the engineering units** (EU) of an analog input point configured in the PAC's strategy. For an analog input (I/O point) named aiTemperatureInDegreesF, use   `https://1.2.3.4/api/v1/device/strategy/ios/analogInputs/aiTemperatureInDegreesF/eu`  The GET response will be a single JSON name-value pair such as: ```json { \"value\": 72.22 } ```      ### Note on packet sizes: When doing POSTs or GETs, the JSON payload in the body should not exceed 3k (3072 bytes). 
 *
 * The version of the OpenAPI document: R1.0a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVarsApi_H
#define OAI_OAIVarsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse200OKish.h"
#include "OAIErrorResponse400BadAdminOrValue.h"
#include "OAIErrorResponse401BadKeyForBasicAuth.h"
#include "OAIErrorResponse404NotFound.h"
#include "OAIFloatValueObject.h"
#include "OAIFloatVar.h"
#include "OAIInt32ValueObject.h"
#include "OAIInt32Var.h"
#include "OAIInt64StringValueObject.h"
#include "OAIInt64ValueObject.h"
#include "OAIInt64Var.h"
#include "OAIInt64VarAsString.h"
#include "OAIStringValueObject.h"
#include "OAIStringVar.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVarsApi : public QObject {
    Q_OBJECT

public:
    OAIVarsApi(const int timeOut = 0);
    ~OAIVarsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  down_timer_name QString [required]
    */
    virtual void readDownTimerValue(const QString &down_timer_name);


    virtual void readDownTimerVars();

    /**
    * @param[in]  float_name QString [required]
    */
    virtual void readFloatVar(const QString &float_name);


    virtual void readFloatVars();

    /**
    * @param[in]  int32_name QString [required]
    */
    virtual void readInt32Var(const QString &int32_name);


    virtual void readInt32Vars();

    /**
    * @param[in]  int64_name QString [required]
    */
    virtual void readInt64VarAsString(const QString &int64_name);

    /**
    * @param[in]  int64_name QString [required]
    */
    virtual void readInt64Var(const QString &int64_name);


    virtual void readInt64VarsAsStrings();


    virtual void readInt64Vars();

    /**
    * @param[in]  string_name QString [required]
    */
    virtual void readStringVar(const QString &string_name);


    virtual void readStringVars();

    /**
    * @param[in]  up_timer_name QString [required]
    */
    virtual void readUpTimerValue(const QString &up_timer_name);


    virtual void readUpTimerVars();

    /**
    * @param[in]  float_name QString [required]
    * @param[in]  body OAIFloatValueObject [required]
    */
    virtual void writeFloatVar(const QString &float_name, const OAIFloatValueObject &body);

    /**
    * @param[in]  int32_name QString [required]
    * @param[in]  body OAIInt32ValueObject [required]
    */
    virtual void writeInt32Var(const QString &int32_name, const OAIInt32ValueObject &body);

    /**
    * @param[in]  int64_name QString [required]
    * @param[in]  body OAIInt64StringValueObject [required]
    */
    virtual void writeInt64VarAsString(const QString &int64_name, const OAIInt64StringValueObject &body);

    /**
    * @param[in]  int64_name QString [required]
    * @param[in]  body OAIInt64ValueObject [required]
    */
    virtual void writeInt64Var(const QString &int64_name, const OAIInt64ValueObject &body);

    /**
    * @param[in]  string_name QString [required]
    * @param[in]  body OAIStringValueObject [required]
    */
    virtual void writeStringVar(const QString &string_name, const OAIStringValueObject &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void readDownTimerValueCallback(OAIHttpRequestWorker *worker);
    void readDownTimerVarsCallback(OAIHttpRequestWorker *worker);
    void readFloatVarCallback(OAIHttpRequestWorker *worker);
    void readFloatVarsCallback(OAIHttpRequestWorker *worker);
    void readInt32VarCallback(OAIHttpRequestWorker *worker);
    void readInt32VarsCallback(OAIHttpRequestWorker *worker);
    void readInt64VarAsStringCallback(OAIHttpRequestWorker *worker);
    void readInt64VarCallback(OAIHttpRequestWorker *worker);
    void readInt64VarsAsStringsCallback(OAIHttpRequestWorker *worker);
    void readInt64VarsCallback(OAIHttpRequestWorker *worker);
    void readStringVarCallback(OAIHttpRequestWorker *worker);
    void readStringVarsCallback(OAIHttpRequestWorker *worker);
    void readUpTimerValueCallback(OAIHttpRequestWorker *worker);
    void readUpTimerVarsCallback(OAIHttpRequestWorker *worker);
    void writeFloatVarCallback(OAIHttpRequestWorker *worker);
    void writeInt32VarCallback(OAIHttpRequestWorker *worker);
    void writeInt64VarAsStringCallback(OAIHttpRequestWorker *worker);
    void writeInt64VarCallback(OAIHttpRequestWorker *worker);
    void writeStringVarCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void readDownTimerValueSignal(OAIFloatValueObject summary);
    void readDownTimerVarsSignal(QList<OAIFloatVar> summary);
    void readFloatVarSignal(OAIFloatValueObject summary);
    void readFloatVarsSignal(QList<OAIFloatVar> summary);
    void readInt32VarSignal(OAIInt32ValueObject summary);
    void readInt32VarsSignal(QList<OAIInt32Var> summary);
    void readInt64VarAsStringSignal(OAIInt64StringValueObject summary);
    void readInt64VarSignal(OAIInt64ValueObject summary);
    void readInt64VarsAsStringsSignal(QList<OAIInt64VarAsString> summary);
    void readInt64VarsSignal(QList<OAIInt64Var> summary);
    void readStringVarSignal(OAIStringValueObject summary);
    void readStringVarsSignal(QList<OAIStringVar> summary);
    void readUpTimerValueSignal(OAIFloatValueObject summary);
    void readUpTimerVarsSignal(QList<OAIFloatVar> summary);
    void writeFloatVarSignal();
    void writeInt32VarSignal();
    void writeInt64VarAsStringSignal();
    void writeInt64VarSignal();
    void writeStringVarSignal(OAIErrorResponse200OKish summary);


    void readDownTimerValueSignalFull(OAIHttpRequestWorker *worker, OAIFloatValueObject summary);
    void readDownTimerVarsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFloatVar> summary);
    void readFloatVarSignalFull(OAIHttpRequestWorker *worker, OAIFloatValueObject summary);
    void readFloatVarsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFloatVar> summary);
    void readInt32VarSignalFull(OAIHttpRequestWorker *worker, OAIInt32ValueObject summary);
    void readInt32VarsSignalFull(OAIHttpRequestWorker *worker, QList<OAIInt32Var> summary);
    void readInt64VarAsStringSignalFull(OAIHttpRequestWorker *worker, OAIInt64StringValueObject summary);
    void readInt64VarSignalFull(OAIHttpRequestWorker *worker, OAIInt64ValueObject summary);
    void readInt64VarsAsStringsSignalFull(OAIHttpRequestWorker *worker, QList<OAIInt64VarAsString> summary);
    void readInt64VarsSignalFull(OAIHttpRequestWorker *worker, QList<OAIInt64Var> summary);
    void readStringVarSignalFull(OAIHttpRequestWorker *worker, OAIStringValueObject summary);
    void readStringVarsSignalFull(OAIHttpRequestWorker *worker, QList<OAIStringVar> summary);
    void readUpTimerValueSignalFull(OAIHttpRequestWorker *worker, OAIFloatValueObject summary);
    void readUpTimerVarsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFloatVar> summary);
    void writeFloatVarSignalFull(OAIHttpRequestWorker *worker);
    void writeInt32VarSignalFull(OAIHttpRequestWorker *worker);
    void writeInt64VarAsStringSignalFull(OAIHttpRequestWorker *worker);
    void writeInt64VarSignalFull(OAIHttpRequestWorker *worker);
    void writeStringVarSignalFull(OAIHttpRequestWorker *worker, OAIErrorResponse200OKish summary);

    Q_DECL_DEPRECATED_X("Use readDownTimerValueSignalError() instead")
    void readDownTimerValueSignalE(OAIFloatValueObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readDownTimerValueSignalError(OAIFloatValueObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readDownTimerVarsSignalError() instead")
    void readDownTimerVarsSignalE(QList<OAIFloatVar> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readDownTimerVarsSignalError(QList<OAIFloatVar> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readFloatVarSignalError() instead")
    void readFloatVarSignalE(OAIFloatValueObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readFloatVarSignalError(OAIFloatValueObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readFloatVarsSignalError() instead")
    void readFloatVarsSignalE(QList<OAIFloatVar> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readFloatVarsSignalError(QList<OAIFloatVar> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt32VarSignalError() instead")
    void readInt32VarSignalE(OAIInt32ValueObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt32VarSignalError(OAIInt32ValueObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt32VarsSignalError() instead")
    void readInt32VarsSignalE(QList<OAIInt32Var> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt32VarsSignalError(QList<OAIInt32Var> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64VarAsStringSignalError() instead")
    void readInt64VarAsStringSignalE(OAIInt64StringValueObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64VarAsStringSignalError(OAIInt64StringValueObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64VarSignalError() instead")
    void readInt64VarSignalE(OAIInt64ValueObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64VarSignalError(OAIInt64ValueObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64VarsAsStringsSignalError() instead")
    void readInt64VarsAsStringsSignalE(QList<OAIInt64VarAsString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64VarsAsStringsSignalError(QList<OAIInt64VarAsString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64VarsSignalError() instead")
    void readInt64VarsSignalE(QList<OAIInt64Var> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64VarsSignalError(QList<OAIInt64Var> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readStringVarSignalError() instead")
    void readStringVarSignalE(OAIStringValueObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readStringVarSignalError(OAIStringValueObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readStringVarsSignalError() instead")
    void readStringVarsSignalE(QList<OAIStringVar> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readStringVarsSignalError(QList<OAIStringVar> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readUpTimerValueSignalError() instead")
    void readUpTimerValueSignalE(OAIFloatValueObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readUpTimerValueSignalError(OAIFloatValueObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readUpTimerVarsSignalError() instead")
    void readUpTimerVarsSignalE(QList<OAIFloatVar> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readUpTimerVarsSignalError(QList<OAIFloatVar> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeFloatVarSignalError() instead")
    void writeFloatVarSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void writeFloatVarSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt32VarSignalError() instead")
    void writeInt32VarSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt32VarSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt64VarAsStringSignalError() instead")
    void writeInt64VarAsStringSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt64VarAsStringSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt64VarSignalError() instead")
    void writeInt64VarSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt64VarSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeStringVarSignalError() instead")
    void writeStringVarSignalE(OAIErrorResponse200OKish summary, QNetworkReply::NetworkError error_type, QString error_str);
    void writeStringVarSignalError(OAIErrorResponse200OKish summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use readDownTimerValueSignalErrorFull() instead")
    void readDownTimerValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readDownTimerValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readDownTimerVarsSignalErrorFull() instead")
    void readDownTimerVarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readDownTimerVarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readFloatVarSignalErrorFull() instead")
    void readFloatVarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readFloatVarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readFloatVarsSignalErrorFull() instead")
    void readFloatVarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readFloatVarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt32VarSignalErrorFull() instead")
    void readInt32VarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt32VarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt32VarsSignalErrorFull() instead")
    void readInt32VarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt32VarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64VarAsStringSignalErrorFull() instead")
    void readInt64VarAsStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64VarAsStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64VarSignalErrorFull() instead")
    void readInt64VarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64VarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64VarsAsStringsSignalErrorFull() instead")
    void readInt64VarsAsStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64VarsAsStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64VarsSignalErrorFull() instead")
    void readInt64VarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64VarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readStringVarSignalErrorFull() instead")
    void readStringVarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readStringVarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readStringVarsSignalErrorFull() instead")
    void readStringVarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readStringVarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readUpTimerValueSignalErrorFull() instead")
    void readUpTimerValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readUpTimerValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readUpTimerVarsSignalErrorFull() instead")
    void readUpTimerVarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readUpTimerVarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeFloatVarSignalErrorFull() instead")
    void writeFloatVarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeFloatVarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt32VarSignalErrorFull() instead")
    void writeInt32VarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt32VarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt64VarAsStringSignalErrorFull() instead")
    void writeInt64VarAsStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt64VarAsStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt64VarSignalErrorFull() instead")
    void writeInt64VarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt64VarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeStringVarSignalErrorFull() instead")
    void writeStringVarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeStringVarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
