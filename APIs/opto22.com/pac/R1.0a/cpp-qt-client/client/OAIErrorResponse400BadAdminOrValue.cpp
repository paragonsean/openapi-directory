/**
 * PAC Control REST API
 * #### Revised: 6/15/2018  ### Overview This API provides secure access to a SNAP-PAC-R or -S series controller's variable and I/O tags. Confidentiality for API transactions is provided by HTTPS. Authentication uses HTTP Basic Authentication with an API key. An API key ID is submitted in the Basic Authentication userid field and API key value in the password field.  **For more information visit:** [developer.opto22.com](http://developer.opto22.com)  ### Examples  **Read an array** of all the integer32 variables defined in the PAC's strategy. For example, on your SNAP-PAC-R or -S series controller at IP address 1.2.3.4, you would use the URL:   ``` https://1.2.3.4/api/v1/device/strategy/vars/int32s ``` and provide appropriate authentication. The GET response will be a JSON array of name-value  pairs such as:  ```json [ { \"nMyVeryFavoriteNumber\": 22 },   { \"nWidgetsProducedToday\": 22222 },   { \"DELAY_LOOP_TIME_IN_MSECS\"  : 200 } ] ``` **Read the engineering units** (EU) of an analog input point configured in the PAC's strategy. For an analog input (I/O point) named aiTemperatureInDegreesF, use   `https://1.2.3.4/api/v1/device/strategy/ios/analogInputs/aiTemperatureInDegreesF/eu`  The GET response will be a single JSON name-value pair such as: ```json { \"value\": 72.22 } ```      ### Note on packet sizes: When doing POSTs or GETs, the JSON payload in the body should not exceed 3k (3072 bytes). 
 *
 * The version of the OpenAPI document: R1.0a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorResponse400BadAdminOrValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorResponse400BadAdminOrValue::OAIErrorResponse400BadAdminOrValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorResponse400BadAdminOrValue::OAIErrorResponse400BadAdminOrValue() {
    this->initializeModel();
}

OAIErrorResponse400BadAdminOrValue::~OAIErrorResponse400BadAdminOrValue() {}

void OAIErrorResponse400BadAdminOrValue::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIErrorResponse400BadAdminOrValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorResponse400BadAdminOrValue::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIErrorResponse400BadAdminOrValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorResponse400BadAdminOrValue::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

qint32 OAIErrorResponse400BadAdminOrValue::getErrorCode() const {
    return m_error_code;
}
void OAIErrorResponse400BadAdminOrValue::setErrorCode(const qint32 &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIErrorResponse400BadAdminOrValue::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIErrorResponse400BadAdminOrValue::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIErrorResponse400BadAdminOrValue::getMessage() const {
    return m_message;
}
void OAIErrorResponse400BadAdminOrValue::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIErrorResponse400BadAdminOrValue::is_message_Set() const{
    return m_message_isSet;
}

bool OAIErrorResponse400BadAdminOrValue::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIErrorResponse400BadAdminOrValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorResponse400BadAdminOrValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_code_isValid && m_message_isValid && true;
}

} // namespace OpenAPI
