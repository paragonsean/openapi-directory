/**
 * PAC Control REST API
 * #### Revised: 6/15/2018  ### Overview This API provides secure access to a SNAP-PAC-R or -S series controller's variable and I/O tags. Confidentiality for API transactions is provided by HTTPS. Authentication uses HTTP Basic Authentication with an API key. An API key ID is submitted in the Basic Authentication userid field and API key value in the password field.  **For more information visit:** [developer.opto22.com](http://developer.opto22.com)  ### Examples  **Read an array** of all the integer32 variables defined in the PAC's strategy. For example, on your SNAP-PAC-R or -S series controller at IP address 1.2.3.4, you would use the URL:   ``` https://1.2.3.4/api/v1/device/strategy/vars/int32s ``` and provide appropriate authentication. The GET response will be a JSON array of name-value  pairs such as:  ```json [ { \"nMyVeryFavoriteNumber\": 22 },   { \"nWidgetsProducedToday\": 22222 },   { \"DELAY_LOOP_TIME_IN_MSECS\"  : 200 } ] ``` **Read the engineering units** (EU) of an analog input point configured in the PAC's strategy. For an analog input (I/O point) named aiTemperatureInDegreesF, use   `https://1.2.3.4/api/v1/device/strategy/ios/analogInputs/aiTemperatureInDegreesF/eu`  The GET response will be a single JSON name-value pair such as: ```json { \"value\": 72.22 } ```      ### Note on packet sizes: When doing POSTs or GETs, the JSON payload in the body should not exceed 3k (3072 bytes). 
 *
 * The version of the OpenAPI document: R1.0a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStrategyResponse.h
 *
 * 
 */

#ifndef OAIStrategyResponse_H
#define OAIStrategyResponse_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStrategyResponse : public OAIObject {
public:
    OAIStrategyResponse();
    OAIStrategyResponse(QString json);
    ~OAIStrategyResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCrc() const;
    void setCrc(const QString &crc);
    bool is_crc_Set() const;
    bool is_crc_Valid() const;

    QString getDate() const;
    void setDate(const QString &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    qint32 getRunningCharts() const;
    void setRunningCharts(const qint32 &running_charts);
    bool is_running_charts_Set() const;
    bool is_running_charts_Valid() const;

    QString getStrategyName() const;
    void setStrategyName(const QString &strategy_name);
    bool is_strategy_name_Set() const;
    bool is_strategy_name_Valid() const;

    QString getTime() const;
    void setTime(const QString &time);
    bool is_time_Set() const;
    bool is_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_crc;
    bool m_crc_isSet;
    bool m_crc_isValid;

    QString m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    qint32 m_running_charts;
    bool m_running_charts_isSet;
    bool m_running_charts_isValid;

    QString m_strategy_name;
    bool m_strategy_name_isSet;
    bool m_strategy_name_isValid;

    QString m_time;
    bool m_time_isSet;
    bool m_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStrategyResponse)

#endif // OAIStrategyResponse_H
