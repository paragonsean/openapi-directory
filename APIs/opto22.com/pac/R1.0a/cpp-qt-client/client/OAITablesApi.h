/**
 * PAC Control REST API
 * #### Revised: 6/15/2018  ### Overview This API provides secure access to a SNAP-PAC-R or -S series controller's variable and I/O tags. Confidentiality for API transactions is provided by HTTPS. Authentication uses HTTP Basic Authentication with an API key. An API key ID is submitted in the Basic Authentication userid field and API key value in the password field.  **For more information visit:** [developer.opto22.com](http://developer.opto22.com)  ### Examples  **Read an array** of all the integer32 variables defined in the PAC's strategy. For example, on your SNAP-PAC-R or -S series controller at IP address 1.2.3.4, you would use the URL:   ``` https://1.2.3.4/api/v1/device/strategy/vars/int32s ``` and provide appropriate authentication. The GET response will be a JSON array of name-value  pairs such as:  ```json [ { \"nMyVeryFavoriteNumber\": 22 },   { \"nWidgetsProducedToday\": 22222 },   { \"DELAY_LOOP_TIME_IN_MSECS\"  : 200 } ] ``` **Read the engineering units** (EU) of an analog input point configured in the PAC's strategy. For an analog input (I/O point) named aiTemperatureInDegreesF, use   `https://1.2.3.4/api/v1/device/strategy/ios/analogInputs/aiTemperatureInDegreesF/eu`  The GET response will be a single JSON name-value pair such as: ```json { \"value\": 72.22 } ```      ### Note on packet sizes: When doing POSTs or GETs, the JSON payload in the body should not exceed 3k (3072 bytes). 
 *
 * The version of the OpenAPI document: R1.0a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITablesApi_H
#define OAI_OAITablesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse200OKish.h"
#include "OAIErrorResponse400BadAdminOrValue.h"
#include "OAIErrorResponse401BadKeyForBasicAuth.h"
#include "OAIErrorResponse404NotFound.h"
#include "OAIFloatValueObject.h"
#include "OAIInt32ValueObject.h"
#include "OAIInt64StringValueObject.h"
#include "OAIInt64ValueObject.h"
#include "OAIStringValueObject.h"
#include "OAITableDef.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITablesApi : public QObject {
    Q_OBJECT

public:
    OAITablesApi(const int timeOut = 0);
    ~OAITablesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  index qint32 [required]
    */
    virtual void readFloatTableElement(const QString &table_name, const qint32 &index);

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  num_elements qint32 [optional]
    */
    virtual void readFloatTable(const QString &table_name, const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &num_elements = ::OpenAPI::OptionalParam<qint32>());


    virtual void readFloatTables();

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  index qint32 [required]
    */
    virtual void readInt32TableElement(const QString &table_name, const qint32 &index);

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  num_elements qint32 [optional]
    */
    virtual void readInt32Table(const QString &table_name, const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &num_elements = ::OpenAPI::OptionalParam<qint32>());


    virtual void readInt32Tables();

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  num_elements qint32 [optional]
    */
    virtual void readInt64TableAsString(const QString &table_name, const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &num_elements = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  index qint32 [required]
    */
    virtual void readInt64TableElementAsString(const QString &table_name, const qint32 &index);

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  index qint32 [required]
    */
    virtual void readInt64TableElement(const QString &table_name, const qint32 &index);

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  num_elements qint32 [optional]
    */
    virtual void readInt64Table(const QString &table_name, const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &num_elements = ::OpenAPI::OptionalParam<qint32>());


    virtual void readInt64Tables();

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  index qint32 [required]
    */
    virtual void readStringTableElement(const QString &table_name, const qint32 &index);

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  num_elements qint32 [optional]
    */
    virtual void readStringTable(const QString &table_name, const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &num_elements = ::OpenAPI::OptionalParam<qint32>());


    virtual void readStringTables();

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  index qint32 [required]
    * @param[in]  float_element_object OAIFloatValueObject [required]
    */
    virtual void writeFloatTableElement(const QString &table_name, const qint32 &index, const OAIFloatValueObject &float_element_object);

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  float_array QList<float> [required]
    * @param[in]  start_index qint32 [optional]
    */
    virtual void writeFloatTable(const QString &table_name, const QList<float> &float_array, const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  index qint32 [required]
    * @param[in]  int32_element_object OAIInt32ValueObject [required]
    */
    virtual void writeInt32TableElement(const QString &table_name, const qint32 &index, const OAIInt32ValueObject &int32_element_object);

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  int32_array QList<qint32> [required]
    * @param[in]  start_index qint32 [optional]
    */
    virtual void writeInt32Table(const QString &table_name, const QList<qint32> &int32_array, const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  int64_as_string_array QList<QString> [required]
    * @param[in]  start_index qint32 [optional]
    */
    virtual void writeInt64TableAsString(const QString &table_name, const QList<QString> &int64_as_string_array, const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  index qint32 [required]
    * @param[in]  int64_element_object OAIInt64StringValueObject [required]
    */
    virtual void writeInt64TableElementAsString(const QString &table_name, const qint32 &index, const OAIInt64StringValueObject &int64_element_object);

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  index qint32 [required]
    * @param[in]  int64_element_object OAIInt64ValueObject [required]
    */
    virtual void writeInt64TableElement(const QString &table_name, const qint32 &index, const OAIInt64ValueObject &int64_element_object);

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  int64_array QList<qint64> [required]
    * @param[in]  start_index qint32 [optional]
    */
    virtual void writeInt64Table(const QString &table_name, const QList<qint64> &int64_array, const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  index qint32 [required]
    * @param[in]  string_element_object OAIStringValueObject [required]
    */
    virtual void writeStringTableElement(const QString &table_name, const qint32 &index, const OAIStringValueObject &string_element_object);

    /**
    * @param[in]  table_name QString [required]
    * @param[in]  string_array QList<QString> [required]
    * @param[in]  start_index qint32 [optional]
    */
    virtual void writeStringTable(const QString &table_name, const QList<QString> &string_array, const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void readFloatTableElementCallback(OAIHttpRequestWorker *worker);
    void readFloatTableCallback(OAIHttpRequestWorker *worker);
    void readFloatTablesCallback(OAIHttpRequestWorker *worker);
    void readInt32TableElementCallback(OAIHttpRequestWorker *worker);
    void readInt32TableCallback(OAIHttpRequestWorker *worker);
    void readInt32TablesCallback(OAIHttpRequestWorker *worker);
    void readInt64TableAsStringCallback(OAIHttpRequestWorker *worker);
    void readInt64TableElementAsStringCallback(OAIHttpRequestWorker *worker);
    void readInt64TableElementCallback(OAIHttpRequestWorker *worker);
    void readInt64TableCallback(OAIHttpRequestWorker *worker);
    void readInt64TablesCallback(OAIHttpRequestWorker *worker);
    void readStringTableElementCallback(OAIHttpRequestWorker *worker);
    void readStringTableCallback(OAIHttpRequestWorker *worker);
    void readStringTablesCallback(OAIHttpRequestWorker *worker);
    void writeFloatTableElementCallback(OAIHttpRequestWorker *worker);
    void writeFloatTableCallback(OAIHttpRequestWorker *worker);
    void writeInt32TableElementCallback(OAIHttpRequestWorker *worker);
    void writeInt32TableCallback(OAIHttpRequestWorker *worker);
    void writeInt64TableAsStringCallback(OAIHttpRequestWorker *worker);
    void writeInt64TableElementAsStringCallback(OAIHttpRequestWorker *worker);
    void writeInt64TableElementCallback(OAIHttpRequestWorker *worker);
    void writeInt64TableCallback(OAIHttpRequestWorker *worker);
    void writeStringTableElementCallback(OAIHttpRequestWorker *worker);
    void writeStringTableCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void readFloatTableElementSignal(OAIFloatValueObject summary);
    void readFloatTableSignal(QList<float> summary);
    void readFloatTablesSignal(QList<OAITableDef> summary);
    void readInt32TableElementSignal(OAIInt32ValueObject summary);
    void readInt32TableSignal(QList<qint32> summary);
    void readInt32TablesSignal(QList<OAITableDef> summary);
    void readInt64TableAsStringSignal(QList<QString> summary);
    void readInt64TableElementAsStringSignal(OAIInt64StringValueObject summary);
    void readInt64TableElementSignal(OAIInt64ValueObject summary);
    void readInt64TableSignal(QList<qint64> summary);
    void readInt64TablesSignal(QList<OAITableDef> summary);
    void readStringTableElementSignal(OAIStringValueObject summary);
    void readStringTableSignal(QList<QString> summary);
    void readStringTablesSignal(QList<OAITableDef> summary);
    void writeFloatTableElementSignal();
    void writeFloatTableSignal();
    void writeInt32TableElementSignal();
    void writeInt32TableSignal();
    void writeInt64TableAsStringSignal();
    void writeInt64TableElementAsStringSignal();
    void writeInt64TableElementSignal();
    void writeInt64TableSignal();
    void writeStringTableElementSignal();
    void writeStringTableSignal(OAIErrorResponse200OKish summary);


    void readFloatTableElementSignalFull(OAIHttpRequestWorker *worker, OAIFloatValueObject summary);
    void readFloatTableSignalFull(OAIHttpRequestWorker *worker, QList<float> summary);
    void readFloatTablesSignalFull(OAIHttpRequestWorker *worker, QList<OAITableDef> summary);
    void readInt32TableElementSignalFull(OAIHttpRequestWorker *worker, OAIInt32ValueObject summary);
    void readInt32TableSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void readInt32TablesSignalFull(OAIHttpRequestWorker *worker, QList<OAITableDef> summary);
    void readInt64TableAsStringSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void readInt64TableElementAsStringSignalFull(OAIHttpRequestWorker *worker, OAIInt64StringValueObject summary);
    void readInt64TableElementSignalFull(OAIHttpRequestWorker *worker, OAIInt64ValueObject summary);
    void readInt64TableSignalFull(OAIHttpRequestWorker *worker, QList<qint64> summary);
    void readInt64TablesSignalFull(OAIHttpRequestWorker *worker, QList<OAITableDef> summary);
    void readStringTableElementSignalFull(OAIHttpRequestWorker *worker, OAIStringValueObject summary);
    void readStringTableSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void readStringTablesSignalFull(OAIHttpRequestWorker *worker, QList<OAITableDef> summary);
    void writeFloatTableElementSignalFull(OAIHttpRequestWorker *worker);
    void writeFloatTableSignalFull(OAIHttpRequestWorker *worker);
    void writeInt32TableElementSignalFull(OAIHttpRequestWorker *worker);
    void writeInt32TableSignalFull(OAIHttpRequestWorker *worker);
    void writeInt64TableAsStringSignalFull(OAIHttpRequestWorker *worker);
    void writeInt64TableElementAsStringSignalFull(OAIHttpRequestWorker *worker);
    void writeInt64TableElementSignalFull(OAIHttpRequestWorker *worker);
    void writeInt64TableSignalFull(OAIHttpRequestWorker *worker);
    void writeStringTableElementSignalFull(OAIHttpRequestWorker *worker);
    void writeStringTableSignalFull(OAIHttpRequestWorker *worker, OAIErrorResponse200OKish summary);

    Q_DECL_DEPRECATED_X("Use readFloatTableElementSignalError() instead")
    void readFloatTableElementSignalE(OAIFloatValueObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readFloatTableElementSignalError(OAIFloatValueObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readFloatTableSignalError() instead")
    void readFloatTableSignalE(QList<float> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readFloatTableSignalError(QList<float> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readFloatTablesSignalError() instead")
    void readFloatTablesSignalE(QList<OAITableDef> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readFloatTablesSignalError(QList<OAITableDef> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt32TableElementSignalError() instead")
    void readInt32TableElementSignalE(OAIInt32ValueObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt32TableElementSignalError(OAIInt32ValueObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt32TableSignalError() instead")
    void readInt32TableSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt32TableSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt32TablesSignalError() instead")
    void readInt32TablesSignalE(QList<OAITableDef> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt32TablesSignalError(QList<OAITableDef> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64TableAsStringSignalError() instead")
    void readInt64TableAsStringSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64TableAsStringSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64TableElementAsStringSignalError() instead")
    void readInt64TableElementAsStringSignalE(OAIInt64StringValueObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64TableElementAsStringSignalError(OAIInt64StringValueObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64TableElementSignalError() instead")
    void readInt64TableElementSignalE(OAIInt64ValueObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64TableElementSignalError(OAIInt64ValueObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64TableSignalError() instead")
    void readInt64TableSignalE(QList<qint64> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64TableSignalError(QList<qint64> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64TablesSignalError() instead")
    void readInt64TablesSignalE(QList<OAITableDef> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64TablesSignalError(QList<OAITableDef> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readStringTableElementSignalError() instead")
    void readStringTableElementSignalE(OAIStringValueObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readStringTableElementSignalError(OAIStringValueObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readStringTableSignalError() instead")
    void readStringTableSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readStringTableSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readStringTablesSignalError() instead")
    void readStringTablesSignalE(QList<OAITableDef> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readStringTablesSignalError(QList<OAITableDef> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeFloatTableElementSignalError() instead")
    void writeFloatTableElementSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void writeFloatTableElementSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeFloatTableSignalError() instead")
    void writeFloatTableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void writeFloatTableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt32TableElementSignalError() instead")
    void writeInt32TableElementSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt32TableElementSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt32TableSignalError() instead")
    void writeInt32TableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt32TableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt64TableAsStringSignalError() instead")
    void writeInt64TableAsStringSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt64TableAsStringSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt64TableElementAsStringSignalError() instead")
    void writeInt64TableElementAsStringSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt64TableElementAsStringSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt64TableElementSignalError() instead")
    void writeInt64TableElementSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt64TableElementSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt64TableSignalError() instead")
    void writeInt64TableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt64TableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeStringTableElementSignalError() instead")
    void writeStringTableElementSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void writeStringTableElementSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeStringTableSignalError() instead")
    void writeStringTableSignalE(OAIErrorResponse200OKish summary, QNetworkReply::NetworkError error_type, QString error_str);
    void writeStringTableSignalError(OAIErrorResponse200OKish summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use readFloatTableElementSignalErrorFull() instead")
    void readFloatTableElementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readFloatTableElementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readFloatTableSignalErrorFull() instead")
    void readFloatTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readFloatTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readFloatTablesSignalErrorFull() instead")
    void readFloatTablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readFloatTablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt32TableElementSignalErrorFull() instead")
    void readInt32TableElementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt32TableElementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt32TableSignalErrorFull() instead")
    void readInt32TableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt32TableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt32TablesSignalErrorFull() instead")
    void readInt32TablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt32TablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64TableAsStringSignalErrorFull() instead")
    void readInt64TableAsStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64TableAsStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64TableElementAsStringSignalErrorFull() instead")
    void readInt64TableElementAsStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64TableElementAsStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64TableElementSignalErrorFull() instead")
    void readInt64TableElementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64TableElementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64TableSignalErrorFull() instead")
    void readInt64TableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64TableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readInt64TablesSignalErrorFull() instead")
    void readInt64TablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readInt64TablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readStringTableElementSignalErrorFull() instead")
    void readStringTableElementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readStringTableElementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readStringTableSignalErrorFull() instead")
    void readStringTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readStringTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readStringTablesSignalErrorFull() instead")
    void readStringTablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readStringTablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeFloatTableElementSignalErrorFull() instead")
    void writeFloatTableElementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeFloatTableElementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeFloatTableSignalErrorFull() instead")
    void writeFloatTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeFloatTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt32TableElementSignalErrorFull() instead")
    void writeInt32TableElementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt32TableElementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt32TableSignalErrorFull() instead")
    void writeInt32TableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt32TableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt64TableAsStringSignalErrorFull() instead")
    void writeInt64TableAsStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt64TableAsStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt64TableElementAsStringSignalErrorFull() instead")
    void writeInt64TableElementAsStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt64TableElementAsStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt64TableElementSignalErrorFull() instead")
    void writeInt64TableElementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt64TableElementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeInt64TableSignalErrorFull() instead")
    void writeInt64TableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeInt64TableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeStringTableElementSignalErrorFull() instead")
    void writeStringTableElementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeStringTableElementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeStringTableSignalErrorFull() instead")
    void writeStringTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeStringTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
