/**
 * PAC Control REST API
 * #### Revised: 6/15/2018  ### Overview This API provides secure access to a SNAP-PAC-R or -S series controller's variable and I/O tags. Confidentiality for API transactions is provided by HTTPS. Authentication uses HTTP Basic Authentication with an API key. An API key ID is submitted in the Basic Authentication userid field and API key value in the password field.  **For more information visit:** [developer.opto22.com](http://developer.opto22.com)  ### Examples  **Read an array** of all the integer32 variables defined in the PAC's strategy. For example, on your SNAP-PAC-R or -S series controller at IP address 1.2.3.4, you would use the URL:   ``` https://1.2.3.4/api/v1/device/strategy/vars/int32s ``` and provide appropriate authentication. The GET response will be a JSON array of name-value  pairs such as:  ```json [ { \"nMyVeryFavoriteNumber\": 22 },   { \"nWidgetsProducedToday\": 22222 },   { \"DELAY_LOOP_TIME_IN_MSECS\"  : 200 } ] ``` **Read the engineering units** (EU) of an analog input point configured in the PAC's strategy. For an analog input (I/O point) named aiTemperatureInDegreesF, use   `https://1.2.3.4/api/v1/device/strategy/ios/analogInputs/aiTemperatureInDegreesF/eu`  The GET response will be a single JSON name-value pair such as: ```json { \"value\": 72.22 } ```      ### Note on packet sizes: When doing POSTs or GETs, the JSON payload in the body should not exceed 3k (3072 bytes). 
 *
 * The version of the OpenAPI document: R1.0a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIosApi_H
#define OAI_OAIIosApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDigitalPointStateObject.h"
#include "OAIDigitalPointStateVar.h"
#include "OAIErrorResponse400BadAdminOrValue.h"
#include "OAIErrorResponse401BadKeyForBasicAuth.h"
#include "OAIErrorResponse404NotFound.h"
#include "OAIFloatValueObject.h"
#include "OAIFloatVar.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIosApi : public QObject {
    Q_OBJECT

public:
    OAIIosApi(const int timeOut = 0);
    ~OAIIosApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  io_name QString [required]
    */
    virtual void readAnalogInputEu(const QString &io_name);


    virtual void readAnalogInputs();

    /**
    * @param[in]  io_name QString [required]
    */
    virtual void readAnalogOutputEu(const QString &io_name);


    virtual void readAnalogOutputs();

    /**
    * @param[in]  io_name QString [required]
    */
    virtual void readDigitalInputState(const QString &io_name);


    virtual void readDigitalInputs();

    /**
    * @param[in]  io_name QString [required]
    */
    virtual void readDigitalOutputState(const QString &io_name);


    virtual void readDigitalOutputs();

    /**
    * @param[in]  io_name QString [required]
    * @param[in]  body OAIFloatValueObject [required]
    */
    virtual void writeAnalogOutputEu(const QString &io_name, const OAIFloatValueObject &body);

    /**
    * @param[in]  io_name QString [required]
    * @param[in]  body OAIDigitalPointStateObject [required]
    */
    virtual void writeDigitalOutputState(const QString &io_name, const OAIDigitalPointStateObject &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void readAnalogInputEuCallback(OAIHttpRequestWorker *worker);
    void readAnalogInputsCallback(OAIHttpRequestWorker *worker);
    void readAnalogOutputEuCallback(OAIHttpRequestWorker *worker);
    void readAnalogOutputsCallback(OAIHttpRequestWorker *worker);
    void readDigitalInputStateCallback(OAIHttpRequestWorker *worker);
    void readDigitalInputsCallback(OAIHttpRequestWorker *worker);
    void readDigitalOutputStateCallback(OAIHttpRequestWorker *worker);
    void readDigitalOutputsCallback(OAIHttpRequestWorker *worker);
    void writeAnalogOutputEuCallback(OAIHttpRequestWorker *worker);
    void writeDigitalOutputStateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void readAnalogInputEuSignal(OAIFloatValueObject summary);
    void readAnalogInputsSignal(QList<OAIFloatVar> summary);
    void readAnalogOutputEuSignal(OAIFloatValueObject summary);
    void readAnalogOutputsSignal(QList<OAIFloatVar> summary);
    void readDigitalInputStateSignal(OAIDigitalPointStateObject summary);
    void readDigitalInputsSignal(QList<OAIDigitalPointStateVar> summary);
    void readDigitalOutputStateSignal(OAIDigitalPointStateObject summary);
    void readDigitalOutputsSignal(QList<OAIDigitalPointStateVar> summary);
    void writeAnalogOutputEuSignal();
    void writeDigitalOutputStateSignal();


    void readAnalogInputEuSignalFull(OAIHttpRequestWorker *worker, OAIFloatValueObject summary);
    void readAnalogInputsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFloatVar> summary);
    void readAnalogOutputEuSignalFull(OAIHttpRequestWorker *worker, OAIFloatValueObject summary);
    void readAnalogOutputsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFloatVar> summary);
    void readDigitalInputStateSignalFull(OAIHttpRequestWorker *worker, OAIDigitalPointStateObject summary);
    void readDigitalInputsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDigitalPointStateVar> summary);
    void readDigitalOutputStateSignalFull(OAIHttpRequestWorker *worker, OAIDigitalPointStateObject summary);
    void readDigitalOutputsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDigitalPointStateVar> summary);
    void writeAnalogOutputEuSignalFull(OAIHttpRequestWorker *worker);
    void writeDigitalOutputStateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use readAnalogInputEuSignalError() instead")
    void readAnalogInputEuSignalE(OAIFloatValueObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readAnalogInputEuSignalError(OAIFloatValueObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readAnalogInputsSignalError() instead")
    void readAnalogInputsSignalE(QList<OAIFloatVar> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readAnalogInputsSignalError(QList<OAIFloatVar> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readAnalogOutputEuSignalError() instead")
    void readAnalogOutputEuSignalE(OAIFloatValueObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readAnalogOutputEuSignalError(OAIFloatValueObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readAnalogOutputsSignalError() instead")
    void readAnalogOutputsSignalE(QList<OAIFloatVar> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readAnalogOutputsSignalError(QList<OAIFloatVar> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readDigitalInputStateSignalError() instead")
    void readDigitalInputStateSignalE(OAIDigitalPointStateObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readDigitalInputStateSignalError(OAIDigitalPointStateObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readDigitalInputsSignalError() instead")
    void readDigitalInputsSignalE(QList<OAIDigitalPointStateVar> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readDigitalInputsSignalError(QList<OAIDigitalPointStateVar> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readDigitalOutputStateSignalError() instead")
    void readDigitalOutputStateSignalE(OAIDigitalPointStateObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readDigitalOutputStateSignalError(OAIDigitalPointStateObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readDigitalOutputsSignalError() instead")
    void readDigitalOutputsSignalE(QList<OAIDigitalPointStateVar> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readDigitalOutputsSignalError(QList<OAIDigitalPointStateVar> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeAnalogOutputEuSignalError() instead")
    void writeAnalogOutputEuSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void writeAnalogOutputEuSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeDigitalOutputStateSignalError() instead")
    void writeDigitalOutputStateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void writeDigitalOutputStateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use readAnalogInputEuSignalErrorFull() instead")
    void readAnalogInputEuSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readAnalogInputEuSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readAnalogInputsSignalErrorFull() instead")
    void readAnalogInputsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readAnalogInputsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readAnalogOutputEuSignalErrorFull() instead")
    void readAnalogOutputEuSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readAnalogOutputEuSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readAnalogOutputsSignalErrorFull() instead")
    void readAnalogOutputsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readAnalogOutputsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readDigitalInputStateSignalErrorFull() instead")
    void readDigitalInputStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readDigitalInputStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readDigitalInputsSignalErrorFull() instead")
    void readDigitalInputsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readDigitalInputsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readDigitalOutputStateSignalErrorFull() instead")
    void readDigitalOutputStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readDigitalOutputStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readDigitalOutputsSignalErrorFull() instead")
    void readDigitalOutputsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readDigitalOutputsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeAnalogOutputEuSignalErrorFull() instead")
    void writeAnalogOutputEuSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeAnalogOutputEuSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeDigitalOutputStateSignalErrorFull() instead")
    void writeDigitalOutputStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeDigitalOutputStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
