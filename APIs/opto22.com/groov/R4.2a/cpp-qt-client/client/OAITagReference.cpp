/**
 * groov View Public API
 * #### Revised: 2019-11-21  ### Overview groov View Public API revision 1. 
 *
 * The version of the OpenAPI document: R4.2a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagReference::OAITagReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagReference::OAITagReference() {
    this->initializeModel();
}

OAITagReference::~OAITagReference() {}

void OAITagReference::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;
}

void OAITagReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagReference::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;
}

QString OAITagReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagReference::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    return obj;
}

double OAITagReference::getCount() const {
    return m_count;
}
void OAITagReference::setCount(const double &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAITagReference::is_count_Set() const{
    return m_count_isSet;
}

bool OAITagReference::is_count_Valid() const{
    return m_count_isValid;
}

double OAITagReference::getId() const {
    return m_id;
}
void OAITagReference::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITagReference::is_id_Set() const{
    return m_id_isSet;
}

bool OAITagReference::is_id_Valid() const{
    return m_id_isValid;
}

double OAITagReference::getIndex() const {
    return m_index;
}
void OAITagReference::setIndex(const double &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAITagReference::is_index_Set() const{
    return m_index_isSet;
}

bool OAITagReference::is_index_Valid() const{
    return m_index_isValid;
}

bool OAITagReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
