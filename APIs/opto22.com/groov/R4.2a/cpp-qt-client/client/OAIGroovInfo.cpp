/**
 * groov View Public API
 * #### Revised: 2019-11-21  ### Overview groov View Public API revision 1. 
 *
 * The version of the OpenAPI document: R4.2a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroovInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroovInfo::OAIGroovInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroovInfo::OAIGroovInfo() {
    this->initializeModel();
}

OAIGroovInfo::~OAIGroovInfo() {}

void OAIGroovInfo::initializeModel() {

    m_current_api_version_isSet = false;
    m_current_api_version_isValid = false;

    m_groov_admin_version_isSet = false;
    m_groov_admin_version_isValid = false;

    m_groov_box_description_isSet = false;
    m_groov_box_description_isValid = false;

    m_groov_node_red_version_isSet = false;
    m_groov_node_red_version_isValid = false;

    m_is_groov_box_isSet = false;
    m_is_groov_box_isValid = false;

    m_is_groov_box_setup_isSet = false;
    m_is_groov_box_setup_isValid = false;

    m_is_license_valid_isSet = false;
    m_is_license_valid_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_minimum_api_version_isSet = false;
    m_minimum_api_version_isValid = false;

    m_should_show_trial_dialog_isSet = false;
    m_should_show_trial_dialog_isValid = false;

    m_timezone_name_isSet = false;
    m_timezone_name_isValid = false;

    m_timezone_offset_isSet = false;
    m_timezone_offset_isValid = false;

    m_trial_period_expiration_isSet = false;
    m_trial_period_expiration_isValid = false;

    m_war_version_isSet = false;
    m_war_version_isValid = false;
}

void OAIGroovInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroovInfo::fromJsonObject(QJsonObject json) {

    m_current_api_version_isValid = ::OpenAPI::fromJsonValue(m_current_api_version, json[QString("currentApiVersion")]);
    m_current_api_version_isSet = !json[QString("currentApiVersion")].isNull() && m_current_api_version_isValid;

    m_groov_admin_version_isValid = ::OpenAPI::fromJsonValue(m_groov_admin_version, json[QString("groovAdminVersion")]);
    m_groov_admin_version_isSet = !json[QString("groovAdminVersion")].isNull() && m_groov_admin_version_isValid;

    m_groov_box_description_isValid = ::OpenAPI::fromJsonValue(m_groov_box_description, json[QString("groovBoxDescription")]);
    m_groov_box_description_isSet = !json[QString("groovBoxDescription")].isNull() && m_groov_box_description_isValid;

    m_groov_node_red_version_isValid = ::OpenAPI::fromJsonValue(m_groov_node_red_version, json[QString("groovNodeRedVersion")]);
    m_groov_node_red_version_isSet = !json[QString("groovNodeRedVersion")].isNull() && m_groov_node_red_version_isValid;

    m_is_groov_box_isValid = ::OpenAPI::fromJsonValue(m_is_groov_box, json[QString("isGroovBox")]);
    m_is_groov_box_isSet = !json[QString("isGroovBox")].isNull() && m_is_groov_box_isValid;

    m_is_groov_box_setup_isValid = ::OpenAPI::fromJsonValue(m_is_groov_box_setup, json[QString("isGroovBoxSetup")]);
    m_is_groov_box_setup_isSet = !json[QString("isGroovBoxSetup")].isNull() && m_is_groov_box_setup_isValid;

    m_is_license_valid_isValid = ::OpenAPI::fromJsonValue(m_is_license_valid, json[QString("isLicenseValid")]);
    m_is_license_valid_isSet = !json[QString("isLicenseValid")].isNull() && m_is_license_valid_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_minimum_api_version_isValid = ::OpenAPI::fromJsonValue(m_minimum_api_version, json[QString("minimumApiVersion")]);
    m_minimum_api_version_isSet = !json[QString("minimumApiVersion")].isNull() && m_minimum_api_version_isValid;

    m_should_show_trial_dialog_isValid = ::OpenAPI::fromJsonValue(m_should_show_trial_dialog, json[QString("shouldShowTrialDialog")]);
    m_should_show_trial_dialog_isSet = !json[QString("shouldShowTrialDialog")].isNull() && m_should_show_trial_dialog_isValid;

    m_timezone_name_isValid = ::OpenAPI::fromJsonValue(m_timezone_name, json[QString("timezoneName")]);
    m_timezone_name_isSet = !json[QString("timezoneName")].isNull() && m_timezone_name_isValid;

    m_timezone_offset_isValid = ::OpenAPI::fromJsonValue(m_timezone_offset, json[QString("timezoneOffset")]);
    m_timezone_offset_isSet = !json[QString("timezoneOffset")].isNull() && m_timezone_offset_isValid;

    m_trial_period_expiration_isValid = ::OpenAPI::fromJsonValue(m_trial_period_expiration, json[QString("trialPeriodExpiration")]);
    m_trial_period_expiration_isSet = !json[QString("trialPeriodExpiration")].isNull() && m_trial_period_expiration_isValid;

    m_war_version_isValid = ::OpenAPI::fromJsonValue(m_war_version, json[QString("warVersion")]);
    m_war_version_isSet = !json[QString("warVersion")].isNull() && m_war_version_isValid;
}

QString OAIGroovInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroovInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_current_api_version_isSet) {
        obj.insert(QString("currentApiVersion"), ::OpenAPI::toJsonValue(m_current_api_version));
    }
    if (m_groov_admin_version_isSet) {
        obj.insert(QString("groovAdminVersion"), ::OpenAPI::toJsonValue(m_groov_admin_version));
    }
    if (m_groov_box_description_isSet) {
        obj.insert(QString("groovBoxDescription"), ::OpenAPI::toJsonValue(m_groov_box_description));
    }
    if (m_groov_node_red_version_isSet) {
        obj.insert(QString("groovNodeRedVersion"), ::OpenAPI::toJsonValue(m_groov_node_red_version));
    }
    if (m_is_groov_box_isSet) {
        obj.insert(QString("isGroovBox"), ::OpenAPI::toJsonValue(m_is_groov_box));
    }
    if (m_is_groov_box_setup_isSet) {
        obj.insert(QString("isGroovBoxSetup"), ::OpenAPI::toJsonValue(m_is_groov_box_setup));
    }
    if (m_is_license_valid_isSet) {
        obj.insert(QString("isLicenseValid"), ::OpenAPI::toJsonValue(m_is_license_valid));
    }
    if (m_license_type_isSet) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_minimum_api_version_isSet) {
        obj.insert(QString("minimumApiVersion"), ::OpenAPI::toJsonValue(m_minimum_api_version));
    }
    if (m_should_show_trial_dialog_isSet) {
        obj.insert(QString("shouldShowTrialDialog"), ::OpenAPI::toJsonValue(m_should_show_trial_dialog));
    }
    if (m_timezone_name_isSet) {
        obj.insert(QString("timezoneName"), ::OpenAPI::toJsonValue(m_timezone_name));
    }
    if (m_timezone_offset_isSet) {
        obj.insert(QString("timezoneOffset"), ::OpenAPI::toJsonValue(m_timezone_offset));
    }
    if (m_trial_period_expiration_isSet) {
        obj.insert(QString("trialPeriodExpiration"), ::OpenAPI::toJsonValue(m_trial_period_expiration));
    }
    if (m_war_version_isSet) {
        obj.insert(QString("warVersion"), ::OpenAPI::toJsonValue(m_war_version));
    }
    return obj;
}

double OAIGroovInfo::getCurrentApiVersion() const {
    return m_current_api_version;
}
void OAIGroovInfo::setCurrentApiVersion(const double &current_api_version) {
    m_current_api_version = current_api_version;
    m_current_api_version_isSet = true;
}

bool OAIGroovInfo::is_current_api_version_Set() const{
    return m_current_api_version_isSet;
}

bool OAIGroovInfo::is_current_api_version_Valid() const{
    return m_current_api_version_isValid;
}

QString OAIGroovInfo::getGroovAdminVersion() const {
    return m_groov_admin_version;
}
void OAIGroovInfo::setGroovAdminVersion(const QString &groov_admin_version) {
    m_groov_admin_version = groov_admin_version;
    m_groov_admin_version_isSet = true;
}

bool OAIGroovInfo::is_groov_admin_version_Set() const{
    return m_groov_admin_version_isSet;
}

bool OAIGroovInfo::is_groov_admin_version_Valid() const{
    return m_groov_admin_version_isValid;
}

QString OAIGroovInfo::getGroovBoxDescription() const {
    return m_groov_box_description;
}
void OAIGroovInfo::setGroovBoxDescription(const QString &groov_box_description) {
    m_groov_box_description = groov_box_description;
    m_groov_box_description_isSet = true;
}

bool OAIGroovInfo::is_groov_box_description_Set() const{
    return m_groov_box_description_isSet;
}

bool OAIGroovInfo::is_groov_box_description_Valid() const{
    return m_groov_box_description_isValid;
}

QString OAIGroovInfo::getGroovNodeRedVersion() const {
    return m_groov_node_red_version;
}
void OAIGroovInfo::setGroovNodeRedVersion(const QString &groov_node_red_version) {
    m_groov_node_red_version = groov_node_red_version;
    m_groov_node_red_version_isSet = true;
}

bool OAIGroovInfo::is_groov_node_red_version_Set() const{
    return m_groov_node_red_version_isSet;
}

bool OAIGroovInfo::is_groov_node_red_version_Valid() const{
    return m_groov_node_red_version_isValid;
}

bool OAIGroovInfo::isIsGroovBox() const {
    return m_is_groov_box;
}
void OAIGroovInfo::setIsGroovBox(const bool &is_groov_box) {
    m_is_groov_box = is_groov_box;
    m_is_groov_box_isSet = true;
}

bool OAIGroovInfo::is_is_groov_box_Set() const{
    return m_is_groov_box_isSet;
}

bool OAIGroovInfo::is_is_groov_box_Valid() const{
    return m_is_groov_box_isValid;
}

bool OAIGroovInfo::isIsGroovBoxSetup() const {
    return m_is_groov_box_setup;
}
void OAIGroovInfo::setIsGroovBoxSetup(const bool &is_groov_box_setup) {
    m_is_groov_box_setup = is_groov_box_setup;
    m_is_groov_box_setup_isSet = true;
}

bool OAIGroovInfo::is_is_groov_box_setup_Set() const{
    return m_is_groov_box_setup_isSet;
}

bool OAIGroovInfo::is_is_groov_box_setup_Valid() const{
    return m_is_groov_box_setup_isValid;
}

bool OAIGroovInfo::isIsLicenseValid() const {
    return m_is_license_valid;
}
void OAIGroovInfo::setIsLicenseValid(const bool &is_license_valid) {
    m_is_license_valid = is_license_valid;
    m_is_license_valid_isSet = true;
}

bool OAIGroovInfo::is_is_license_valid_Set() const{
    return m_is_license_valid_isSet;
}

bool OAIGroovInfo::is_is_license_valid_Valid() const{
    return m_is_license_valid_isValid;
}

QString OAIGroovInfo::getLicenseType() const {
    return m_license_type;
}
void OAIGroovInfo::setLicenseType(const QString &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAIGroovInfo::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIGroovInfo::is_license_type_Valid() const{
    return m_license_type_isValid;
}

double OAIGroovInfo::getMinimumApiVersion() const {
    return m_minimum_api_version;
}
void OAIGroovInfo::setMinimumApiVersion(const double &minimum_api_version) {
    m_minimum_api_version = minimum_api_version;
    m_minimum_api_version_isSet = true;
}

bool OAIGroovInfo::is_minimum_api_version_Set() const{
    return m_minimum_api_version_isSet;
}

bool OAIGroovInfo::is_minimum_api_version_Valid() const{
    return m_minimum_api_version_isValid;
}

bool OAIGroovInfo::isShouldShowTrialDialog() const {
    return m_should_show_trial_dialog;
}
void OAIGroovInfo::setShouldShowTrialDialog(const bool &should_show_trial_dialog) {
    m_should_show_trial_dialog = should_show_trial_dialog;
    m_should_show_trial_dialog_isSet = true;
}

bool OAIGroovInfo::is_should_show_trial_dialog_Set() const{
    return m_should_show_trial_dialog_isSet;
}

bool OAIGroovInfo::is_should_show_trial_dialog_Valid() const{
    return m_should_show_trial_dialog_isValid;
}

QString OAIGroovInfo::getTimezoneName() const {
    return m_timezone_name;
}
void OAIGroovInfo::setTimezoneName(const QString &timezone_name) {
    m_timezone_name = timezone_name;
    m_timezone_name_isSet = true;
}

bool OAIGroovInfo::is_timezone_name_Set() const{
    return m_timezone_name_isSet;
}

bool OAIGroovInfo::is_timezone_name_Valid() const{
    return m_timezone_name_isValid;
}

double OAIGroovInfo::getTimezoneOffset() const {
    return m_timezone_offset;
}
void OAIGroovInfo::setTimezoneOffset(const double &timezone_offset) {
    m_timezone_offset = timezone_offset;
    m_timezone_offset_isSet = true;
}

bool OAIGroovInfo::is_timezone_offset_Set() const{
    return m_timezone_offset_isSet;
}

bool OAIGroovInfo::is_timezone_offset_Valid() const{
    return m_timezone_offset_isValid;
}

double OAIGroovInfo::getTrialPeriodExpiration() const {
    return m_trial_period_expiration;
}
void OAIGroovInfo::setTrialPeriodExpiration(const double &trial_period_expiration) {
    m_trial_period_expiration = trial_period_expiration;
    m_trial_period_expiration_isSet = true;
}

bool OAIGroovInfo::is_trial_period_expiration_Set() const{
    return m_trial_period_expiration_isSet;
}

bool OAIGroovInfo::is_trial_period_expiration_Valid() const{
    return m_trial_period_expiration_isValid;
}

QString OAIGroovInfo::getWarVersion() const {
    return m_war_version;
}
void OAIGroovInfo::setWarVersion(const QString &war_version) {
    m_war_version = war_version;
    m_war_version_isSet = true;
}

bool OAIGroovInfo::is_war_version_Set() const{
    return m_war_version_isSet;
}

bool OAIGroovInfo::is_war_version_Valid() const{
    return m_war_version_isValid;
}

bool OAIGroovInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groov_admin_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groov_box_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groov_node_red_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_groov_box_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_groov_box_setup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_license_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_should_show_trial_dialog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_period_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_war_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroovInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_api_version_isValid && m_groov_admin_version_isValid && m_groov_box_description_isValid && m_groov_node_red_version_isValid && m_is_groov_box_isValid && m_is_groov_box_setup_isValid && m_is_license_valid_isValid && m_license_type_isValid && m_minimum_api_version_isValid && m_should_show_trial_dialog_isValid && m_timezone_name_isValid && m_timezone_offset_isValid && m_trial_period_expiration_isValid && m_war_version_isValid && true;
}

} // namespace OpenAPI
