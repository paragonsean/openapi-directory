/**
 * groov View Public API
 * #### Revised: 2019-11-21  ### Overview groov View Public API revision 1. 
 *
 * The version of the OpenAPI document: R4.2a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDataStoreApi_H
#define OAI_OAIDataStoreApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDataStoreDevice.h"
#include "OAITagDefinition.h"
#include "OAITagReference.h"
#include "OAITagValue.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDataStoreApi : public QObject {
    Q_OBJECT

public:
    OAIDataStoreApi(const int timeOut = 0);
    ~OAIDataStoreApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  tags QList<OAITagReference> [required]
    */
    virtual void batchReadTags(const QList<OAITagReference> &tags);


    virtual void listAllTags();

    /**
    * @param[in]  id double [required]
    */
    virtual void listDeviceTags(const double &id);


    virtual void listDevices();

    /**
    * @param[in]  id double [required]
    * @param[in]  index double [optional]
    * @param[in]  count double [optional]
    */
    virtual void readTag(const double &id, const ::OpenAPI::OptionalParam<double> &index = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &count = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  id double [required]
    * @param[in]  value QString [required]
    * @param[in]  index double [optional]
    */
    virtual void writeTag(const double &id, const QString &value, const ::OpenAPI::OptionalParam<double> &index = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void batchReadTagsCallback(OAIHttpRequestWorker *worker);
    void listAllTagsCallback(OAIHttpRequestWorker *worker);
    void listDeviceTagsCallback(OAIHttpRequestWorker *worker);
    void listDevicesCallback(OAIHttpRequestWorker *worker);
    void readTagCallback(OAIHttpRequestWorker *worker);
    void writeTagCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void batchReadTagsSignal(QList<OAITagValue> summary);
    void listAllTagsSignal(QList<OAITagDefinition> summary);
    void listDeviceTagsSignal(QList<OAITagDefinition> summary);
    void listDevicesSignal(QList<OAIDataStoreDevice> summary);
    void readTagSignal(OAITagValue summary);
    void writeTagSignal(OAITagValue summary);


    void batchReadTagsSignalFull(OAIHttpRequestWorker *worker, QList<OAITagValue> summary);
    void listAllTagsSignalFull(OAIHttpRequestWorker *worker, QList<OAITagDefinition> summary);
    void listDeviceTagsSignalFull(OAIHttpRequestWorker *worker, QList<OAITagDefinition> summary);
    void listDevicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIDataStoreDevice> summary);
    void readTagSignalFull(OAIHttpRequestWorker *worker, OAITagValue summary);
    void writeTagSignalFull(OAIHttpRequestWorker *worker, OAITagValue summary);

    Q_DECL_DEPRECATED_X("Use batchReadTagsSignalError() instead")
    void batchReadTagsSignalE(QList<OAITagValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchReadTagsSignalError(QList<OAITagValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllTagsSignalError() instead")
    void listAllTagsSignalE(QList<OAITagDefinition> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllTagsSignalError(QList<OAITagDefinition> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDeviceTagsSignalError() instead")
    void listDeviceTagsSignalE(QList<OAITagDefinition> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDeviceTagsSignalError(QList<OAITagDefinition> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDevicesSignalError() instead")
    void listDevicesSignalE(QList<OAIDataStoreDevice> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDevicesSignalError(QList<OAIDataStoreDevice> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readTagSignalError() instead")
    void readTagSignalE(OAITagValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readTagSignalError(OAITagValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeTagSignalError() instead")
    void writeTagSignalE(OAITagValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void writeTagSignalError(OAITagValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use batchReadTagsSignalErrorFull() instead")
    void batchReadTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchReadTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllTagsSignalErrorFull() instead")
    void listAllTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDeviceTagsSignalErrorFull() instead")
    void listDeviceTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDeviceTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDevicesSignalErrorFull() instead")
    void listDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readTagSignalErrorFull() instead")
    void readTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeTagSignalErrorFull() instead")
    void writeTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
