/**
 * groov View Public API
 * #### Revised: 2019-11-21  ### Overview groov View Public API revision 1. 
 *
 * The version of the OpenAPI document: R4.2a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGroovInfo.h
 *
 * 
 */

#ifndef OAIGroovInfo_H
#define OAIGroovInfo_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGroovInfo : public OAIObject {
public:
    OAIGroovInfo();
    OAIGroovInfo(QString json);
    ~OAIGroovInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCurrentApiVersion() const;
    void setCurrentApiVersion(const double &current_api_version);
    bool is_current_api_version_Set() const;
    bool is_current_api_version_Valid() const;

    QString getGroovAdminVersion() const;
    void setGroovAdminVersion(const QString &groov_admin_version);
    bool is_groov_admin_version_Set() const;
    bool is_groov_admin_version_Valid() const;

    QString getGroovBoxDescription() const;
    void setGroovBoxDescription(const QString &groov_box_description);
    bool is_groov_box_description_Set() const;
    bool is_groov_box_description_Valid() const;

    QString getGroovNodeRedVersion() const;
    void setGroovNodeRedVersion(const QString &groov_node_red_version);
    bool is_groov_node_red_version_Set() const;
    bool is_groov_node_red_version_Valid() const;

    bool isIsGroovBox() const;
    void setIsGroovBox(const bool &is_groov_box);
    bool is_is_groov_box_Set() const;
    bool is_is_groov_box_Valid() const;

    bool isIsGroovBoxSetup() const;
    void setIsGroovBoxSetup(const bool &is_groov_box_setup);
    bool is_is_groov_box_setup_Set() const;
    bool is_is_groov_box_setup_Valid() const;

    bool isIsLicenseValid() const;
    void setIsLicenseValid(const bool &is_license_valid);
    bool is_is_license_valid_Set() const;
    bool is_is_license_valid_Valid() const;

    QString getLicenseType() const;
    void setLicenseType(const QString &license_type);
    bool is_license_type_Set() const;
    bool is_license_type_Valid() const;

    double getMinimumApiVersion() const;
    void setMinimumApiVersion(const double &minimum_api_version);
    bool is_minimum_api_version_Set() const;
    bool is_minimum_api_version_Valid() const;

    bool isShouldShowTrialDialog() const;
    void setShouldShowTrialDialog(const bool &should_show_trial_dialog);
    bool is_should_show_trial_dialog_Set() const;
    bool is_should_show_trial_dialog_Valid() const;

    QString getTimezoneName() const;
    void setTimezoneName(const QString &timezone_name);
    bool is_timezone_name_Set() const;
    bool is_timezone_name_Valid() const;

    double getTimezoneOffset() const;
    void setTimezoneOffset(const double &timezone_offset);
    bool is_timezone_offset_Set() const;
    bool is_timezone_offset_Valid() const;

    double getTrialPeriodExpiration() const;
    void setTrialPeriodExpiration(const double &trial_period_expiration);
    bool is_trial_period_expiration_Set() const;
    bool is_trial_period_expiration_Valid() const;

    QString getWarVersion() const;
    void setWarVersion(const QString &war_version);
    bool is_war_version_Set() const;
    bool is_war_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_current_api_version;
    bool m_current_api_version_isSet;
    bool m_current_api_version_isValid;

    QString m_groov_admin_version;
    bool m_groov_admin_version_isSet;
    bool m_groov_admin_version_isValid;

    QString m_groov_box_description;
    bool m_groov_box_description_isSet;
    bool m_groov_box_description_isValid;

    QString m_groov_node_red_version;
    bool m_groov_node_red_version_isSet;
    bool m_groov_node_red_version_isValid;

    bool m_is_groov_box;
    bool m_is_groov_box_isSet;
    bool m_is_groov_box_isValid;

    bool m_is_groov_box_setup;
    bool m_is_groov_box_setup_isSet;
    bool m_is_groov_box_setup_isValid;

    bool m_is_license_valid;
    bool m_is_license_valid_isSet;
    bool m_is_license_valid_isValid;

    QString m_license_type;
    bool m_license_type_isSet;
    bool m_license_type_isValid;

    double m_minimum_api_version;
    bool m_minimum_api_version_isSet;
    bool m_minimum_api_version_isValid;

    bool m_should_show_trial_dialog;
    bool m_should_show_trial_dialog_isSet;
    bool m_should_show_trial_dialog_isValid;

    QString m_timezone_name;
    bool m_timezone_name_isSet;
    bool m_timezone_name_isValid;

    double m_timezone_offset;
    bool m_timezone_offset_isSet;
    bool m_timezone_offset_isValid;

    double m_trial_period_expiration;
    bool m_trial_period_expiration_isSet;
    bool m_trial_period_expiration_isValid;

    QString m_war_version;
    bool m_war_version_isSet;
    bool m_war_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGroovInfo)

#endif // OAIGroovInfo_H
