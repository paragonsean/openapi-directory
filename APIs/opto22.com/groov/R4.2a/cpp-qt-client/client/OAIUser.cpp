/**
 * groov View Public API
 * #### Revised: 2019-11-21  ### Overview groov View Public API revision 1. 
 *
 * The version of the OpenAPI document: R4.2a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_needs_password_change_isSet = false;
    m_needs_password_change_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("apiKey")]);
    m_api_key_isSet = !json[QString("apiKey")].isNull() && m_api_key_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_needs_password_change_isValid = ::OpenAPI::fromJsonValue(m_needs_password_change, json[QString("needsPasswordChange")]);
    m_needs_password_change_isSet = !json[QString("needsPasswordChange")].isNull() && m_needs_password_change_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("apiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_needs_password_change_isSet) {
        obj.insert(QString("needsPasswordChange"), ::OpenAPI::toJsonValue(m_needs_password_change));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIUser::getApiKey() const {
    return m_api_key;
}
void OAIUser::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIUser::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIUser::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

QList<double> OAIUser::getGroups() const {
    return m_groups;
}
void OAIUser::setGroups(const QList<double> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIUser::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIUser::is_groups_Valid() const{
    return m_groups_isValid;
}

double OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUser::isNeedsPasswordChange() const {
    return m_needs_password_change;
}
void OAIUser::setNeedsPasswordChange(const bool &needs_password_change) {
    m_needs_password_change = needs_password_change;
    m_needs_password_change_isSet = true;
}

bool OAIUser::is_needs_password_change_Set() const{
    return m_needs_password_change_isSet;
}

bool OAIUser::is_needs_password_change_Valid() const{
    return m_needs_password_change_isValid;
}

QString OAIUser::getRole() const {
    return m_role;
}
void OAIUser::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIUser::is_role_Set() const{
    return m_role_isSet;
}

bool OAIUser::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIUser::getUsername() const {
    return m_username;
}
void OAIUser::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUser::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUser::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_needs_password_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_api_key_isValid && m_email_isValid && m_groups_isValid && m_id_isValid && m_needs_password_change_isValid && m_role_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
