/**
 * groov View Public API
 * #### Revised: 2019-11-21  ### Overview groov View Public API revision 1. 
 *
 * The version of the OpenAPI document: R4.2a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagDefinition::OAITagDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagDefinition::OAITagDefinition() {
    this->initializeModel();
}

OAITagDefinition::~OAITagDefinition() {}

void OAITagDefinition::initializeModel() {

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAITagDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagDefinition::fromJsonObject(QJsonObject json) {

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAITagDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_data_type_isSet) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAITagDefinition::getDataType() const {
    return m_data_type;
}
void OAITagDefinition::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAITagDefinition::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAITagDefinition::is_data_type_Valid() const{
    return m_data_type_isValid;
}

double OAITagDefinition::getDeviceId() const {
    return m_device_id;
}
void OAITagDefinition::setDeviceId(const double &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAITagDefinition::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAITagDefinition::is_device_id_Valid() const{
    return m_device_id_isValid;
}

double OAITagDefinition::getId() const {
    return m_id;
}
void OAITagDefinition::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITagDefinition::is_id_Set() const{
    return m_id_isSet;
}

bool OAITagDefinition::is_id_Valid() const{
    return m_id_isValid;
}

double OAITagDefinition::getLength() const {
    return m_length;
}
void OAITagDefinition::setLength(const double &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAITagDefinition::is_length_Set() const{
    return m_length_isSet;
}

bool OAITagDefinition::is_length_Valid() const{
    return m_length_isValid;
}

QString OAITagDefinition::getName() const {
    return m_name;
}
void OAITagDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITagDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAITagDefinition::is_name_Valid() const{
    return m_name_isValid;
}

bool OAITagDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_type_isValid && m_device_id_isValid && m_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
