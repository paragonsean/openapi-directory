/**
 * groov View Public API
 * #### Revised: 2019-11-21  ### Overview groov View Public API revision 1. 
 *
 * The version of the OpenAPI document: R4.2a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GroovViewPublicApi);
  }
}(this, function(expect, GroovViewPublicApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GroovViewPublicApi.GroovInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GroovInfo', function() {
    it('should create an instance of GroovInfo', function() {
      // uncomment below and update the code to test GroovInfo
      //var instance = new GroovViewPublicApi.GroovInfo();
      //expect(instance).to.be.a(GroovViewPublicApi.GroovInfo);
    });

    it('should have the property currentApiVersion (base name: "currentApiVersion")', function() {
      // uncomment below and update the code to test the property currentApiVersion
      //var instance = new GroovViewPublicApi.GroovInfo();
      //expect(instance).to.be();
    });

    it('should have the property groovAdminVersion (base name: "groovAdminVersion")', function() {
      // uncomment below and update the code to test the property groovAdminVersion
      //var instance = new GroovViewPublicApi.GroovInfo();
      //expect(instance).to.be();
    });

    it('should have the property groovBoxDescription (base name: "groovBoxDescription")', function() {
      // uncomment below and update the code to test the property groovBoxDescription
      //var instance = new GroovViewPublicApi.GroovInfo();
      //expect(instance).to.be();
    });

    it('should have the property groovNodeRedVersion (base name: "groovNodeRedVersion")', function() {
      // uncomment below and update the code to test the property groovNodeRedVersion
      //var instance = new GroovViewPublicApi.GroovInfo();
      //expect(instance).to.be();
    });

    it('should have the property isGroovBox (base name: "isGroovBox")', function() {
      // uncomment below and update the code to test the property isGroovBox
      //var instance = new GroovViewPublicApi.GroovInfo();
      //expect(instance).to.be();
    });

    it('should have the property isGroovBoxSetup (base name: "isGroovBoxSetup")', function() {
      // uncomment below and update the code to test the property isGroovBoxSetup
      //var instance = new GroovViewPublicApi.GroovInfo();
      //expect(instance).to.be();
    });

    it('should have the property isLicenseValid (base name: "isLicenseValid")', function() {
      // uncomment below and update the code to test the property isLicenseValid
      //var instance = new GroovViewPublicApi.GroovInfo();
      //expect(instance).to.be();
    });

    it('should have the property licenseType (base name: "licenseType")', function() {
      // uncomment below and update the code to test the property licenseType
      //var instance = new GroovViewPublicApi.GroovInfo();
      //expect(instance).to.be();
    });

    it('should have the property minimumApiVersion (base name: "minimumApiVersion")', function() {
      // uncomment below and update the code to test the property minimumApiVersion
      //var instance = new GroovViewPublicApi.GroovInfo();
      //expect(instance).to.be();
    });

    it('should have the property shouldShowTrialDialog (base name: "shouldShowTrialDialog")', function() {
      // uncomment below and update the code to test the property shouldShowTrialDialog
      //var instance = new GroovViewPublicApi.GroovInfo();
      //expect(instance).to.be();
    });

    it('should have the property timezoneName (base name: "timezoneName")', function() {
      // uncomment below and update the code to test the property timezoneName
      //var instance = new GroovViewPublicApi.GroovInfo();
      //expect(instance).to.be();
    });

    it('should have the property timezoneOffset (base name: "timezoneOffset")', function() {
      // uncomment below and update the code to test the property timezoneOffset
      //var instance = new GroovViewPublicApi.GroovInfo();
      //expect(instance).to.be();
    });

    it('should have the property trialPeriodExpiration (base name: "trialPeriodExpiration")', function() {
      // uncomment below and update the code to test the property trialPeriodExpiration
      //var instance = new GroovViewPublicApi.GroovInfo();
      //expect(instance).to.be();
    });

    it('should have the property warVersion (base name: "warVersion")', function() {
      // uncomment below and update the code to test the property warVersion
      //var instance = new GroovViewPublicApi.GroovInfo();
      //expect(instance).to.be();
    });

  });

}));
