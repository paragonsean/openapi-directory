/**
 * groov View Public API
 * #### Revised: 2019-11-21  ### Overview groov View Public API revision 1. 
 *
 * The version of the OpenAPI document: R4.2a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TagDefinition model module.
 * @module model/TagDefinition
 * @version R4.2a
 */
class TagDefinition {
    /**
     * Constructs a new <code>TagDefinition</code>.
     * @alias module:model/TagDefinition
     * @param dataType {module:model/TagDefinition.DataTypeEnum} 
     * @param deviceId {Number} 
     * @param id {Number} 
     * @param name {String} 
     */
    constructor(dataType, deviceId, id, name) { 
        
        TagDefinition.initialize(this, dataType, deviceId, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dataType, deviceId, id, name) { 
        obj['dataType'] = dataType;
        obj['deviceId'] = deviceId;
        obj['id'] = id;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>TagDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TagDefinition} obj Optional instance to populate.
     * @return {module:model/TagDefinition} The populated <code>TagDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TagDefinition();

            if (data.hasOwnProperty('dataType')) {
                obj['dataType'] = ApiClient.convertToType(data['dataType'], 'String');
            }
            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TagDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TagDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TagDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dataType'] && !(typeof data['dataType'] === 'string' || data['dataType'] instanceof String)) {
            throw new Error("Expected the field `dataType` to be a primitive type in the JSON string but got " + data['dataType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

TagDefinition.RequiredProperties = ["dataType", "deviceId", "id", "name"];

/**
 * @member {module:model/TagDefinition.DataTypeEnum} dataType
 */
TagDefinition.prototype['dataType'] = undefined;

/**
 * @member {Number} deviceId
 */
TagDefinition.prototype['deviceId'] = undefined;

/**
 * @member {Number} id
 */
TagDefinition.prototype['id'] = undefined;

/**
 * @member {Number} length
 */
TagDefinition.prototype['length'] = undefined;

/**
 * @member {String} name
 */
TagDefinition.prototype['name'] = undefined;





/**
 * Allowed values for the <code>dataType</code> property.
 * @enum {String}
 * @readonly
 */
TagDefinition['DataTypeEnum'] = {

    /**
     * value: "boolean"
     * @const
     */
    "boolean": "boolean",

    /**
     * value: "integer"
     * @const
     */
    "integer": "integer",

    /**
     * value: "float"
     * @const
     */
    "float": "float",

    /**
     * value: "string"
     * @const
     */
    "string": "string",

    /**
     * value: "booleanArray"
     * @const
     */
    "booleanArray": "booleanArray",

    /**
     * value: "integerArray"
     * @const
     */
    "integerArray": "integerArray",

    /**
     * value: "floatArray"
     * @const
     */
    "floatArray": "floatArray",

    /**
     * value: "stringArray"
     * @const
     */
    "stringArray": "stringArray"
};



export default TagDefinition;

