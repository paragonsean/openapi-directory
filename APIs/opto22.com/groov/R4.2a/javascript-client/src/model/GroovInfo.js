/**
 * groov View Public API
 * #### Revised: 2019-11-21  ### Overview groov View Public API revision 1. 
 *
 * The version of the OpenAPI document: R4.2a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GroovInfo model module.
 * @module model/GroovInfo
 * @version R4.2a
 */
class GroovInfo {
    /**
     * Constructs a new <code>GroovInfo</code>.
     * @alias module:model/GroovInfo
     * @param currentApiVersion {Number} The current API version number
     * @param groovAdminVersion {String} The groov Admin version number if running on a groov hardware box
     * @param groovBoxDescription {String} The groov box type (GROOV-AT1, GROOV-AR1, or GRV-EPIC-PR1)
     * @param groovNodeRedVersion {String} The node red version number if running on a GROOV-AR1 which has node red installed
     * @param isGroovBox {Boolean} True if running on a groov hardware box
     * @param isGroovBoxSetup {Boolean} True if running on a groov hardware box which has been setup or true if running on groov Server for Windows
     * @param isLicenseValid {Boolean} True if a license is installed, valid, and not expired
     * @param licenseType {String} The license type (NONE, MAINTENANCE_EXPIRED, or VALID)
     * @param minimumApiVersion {Number} The minimum supported API version number
     * @param shouldShowTrialDialog {Boolean} True if the trial dialog pops up when logging into groov View
     * @param timezoneName {String} The server's timezone
     * @param timezoneOffset {Number} The server's timezone offset from UTC in minutes
     * @param trialPeriodExpiration {Number} Milliseconds until trial period is expired
     * @param warVersion {String} The version number of the war
     */
    constructor(currentApiVersion, groovAdminVersion, groovBoxDescription, groovNodeRedVersion, isGroovBox, isGroovBoxSetup, isLicenseValid, licenseType, minimumApiVersion, shouldShowTrialDialog, timezoneName, timezoneOffset, trialPeriodExpiration, warVersion) { 
        
        GroovInfo.initialize(this, currentApiVersion, groovAdminVersion, groovBoxDescription, groovNodeRedVersion, isGroovBox, isGroovBoxSetup, isLicenseValid, licenseType, minimumApiVersion, shouldShowTrialDialog, timezoneName, timezoneOffset, trialPeriodExpiration, warVersion);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currentApiVersion, groovAdminVersion, groovBoxDescription, groovNodeRedVersion, isGroovBox, isGroovBoxSetup, isLicenseValid, licenseType, minimumApiVersion, shouldShowTrialDialog, timezoneName, timezoneOffset, trialPeriodExpiration, warVersion) { 
        obj['currentApiVersion'] = currentApiVersion;
        obj['groovAdminVersion'] = groovAdminVersion;
        obj['groovBoxDescription'] = groovBoxDescription;
        obj['groovNodeRedVersion'] = groovNodeRedVersion;
        obj['isGroovBox'] = isGroovBox;
        obj['isGroovBoxSetup'] = isGroovBoxSetup;
        obj['isLicenseValid'] = isLicenseValid;
        obj['licenseType'] = licenseType;
        obj['minimumApiVersion'] = minimumApiVersion;
        obj['shouldShowTrialDialog'] = shouldShowTrialDialog;
        obj['timezoneName'] = timezoneName;
        obj['timezoneOffset'] = timezoneOffset;
        obj['trialPeriodExpiration'] = trialPeriodExpiration;
        obj['warVersion'] = warVersion;
    }

    /**
     * Constructs a <code>GroovInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroovInfo} obj Optional instance to populate.
     * @return {module:model/GroovInfo} The populated <code>GroovInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroovInfo();

            if (data.hasOwnProperty('currentApiVersion')) {
                obj['currentApiVersion'] = ApiClient.convertToType(data['currentApiVersion'], 'Number');
            }
            if (data.hasOwnProperty('groovAdminVersion')) {
                obj['groovAdminVersion'] = ApiClient.convertToType(data['groovAdminVersion'], 'String');
            }
            if (data.hasOwnProperty('groovBoxDescription')) {
                obj['groovBoxDescription'] = ApiClient.convertToType(data['groovBoxDescription'], 'String');
            }
            if (data.hasOwnProperty('groovNodeRedVersion')) {
                obj['groovNodeRedVersion'] = ApiClient.convertToType(data['groovNodeRedVersion'], 'String');
            }
            if (data.hasOwnProperty('isGroovBox')) {
                obj['isGroovBox'] = ApiClient.convertToType(data['isGroovBox'], 'Boolean');
            }
            if (data.hasOwnProperty('isGroovBoxSetup')) {
                obj['isGroovBoxSetup'] = ApiClient.convertToType(data['isGroovBoxSetup'], 'Boolean');
            }
            if (data.hasOwnProperty('isLicenseValid')) {
                obj['isLicenseValid'] = ApiClient.convertToType(data['isLicenseValid'], 'Boolean');
            }
            if (data.hasOwnProperty('licenseType')) {
                obj['licenseType'] = ApiClient.convertToType(data['licenseType'], 'String');
            }
            if (data.hasOwnProperty('minimumApiVersion')) {
                obj['minimumApiVersion'] = ApiClient.convertToType(data['minimumApiVersion'], 'Number');
            }
            if (data.hasOwnProperty('shouldShowTrialDialog')) {
                obj['shouldShowTrialDialog'] = ApiClient.convertToType(data['shouldShowTrialDialog'], 'Boolean');
            }
            if (data.hasOwnProperty('timezoneName')) {
                obj['timezoneName'] = ApiClient.convertToType(data['timezoneName'], 'String');
            }
            if (data.hasOwnProperty('timezoneOffset')) {
                obj['timezoneOffset'] = ApiClient.convertToType(data['timezoneOffset'], 'Number');
            }
            if (data.hasOwnProperty('trialPeriodExpiration')) {
                obj['trialPeriodExpiration'] = ApiClient.convertToType(data['trialPeriodExpiration'], 'Number');
            }
            if (data.hasOwnProperty('warVersion')) {
                obj['warVersion'] = ApiClient.convertToType(data['warVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroovInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroovInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GroovInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['groovAdminVersion'] && !(typeof data['groovAdminVersion'] === 'string' || data['groovAdminVersion'] instanceof String)) {
            throw new Error("Expected the field `groovAdminVersion` to be a primitive type in the JSON string but got " + data['groovAdminVersion']);
        }
        // ensure the json data is a string
        if (data['groovBoxDescription'] && !(typeof data['groovBoxDescription'] === 'string' || data['groovBoxDescription'] instanceof String)) {
            throw new Error("Expected the field `groovBoxDescription` to be a primitive type in the JSON string but got " + data['groovBoxDescription']);
        }
        // ensure the json data is a string
        if (data['groovNodeRedVersion'] && !(typeof data['groovNodeRedVersion'] === 'string' || data['groovNodeRedVersion'] instanceof String)) {
            throw new Error("Expected the field `groovNodeRedVersion` to be a primitive type in the JSON string but got " + data['groovNodeRedVersion']);
        }
        // ensure the json data is a string
        if (data['licenseType'] && !(typeof data['licenseType'] === 'string' || data['licenseType'] instanceof String)) {
            throw new Error("Expected the field `licenseType` to be a primitive type in the JSON string but got " + data['licenseType']);
        }
        // ensure the json data is a string
        if (data['timezoneName'] && !(typeof data['timezoneName'] === 'string' || data['timezoneName'] instanceof String)) {
            throw new Error("Expected the field `timezoneName` to be a primitive type in the JSON string but got " + data['timezoneName']);
        }
        // ensure the json data is a string
        if (data['warVersion'] && !(typeof data['warVersion'] === 'string' || data['warVersion'] instanceof String)) {
            throw new Error("Expected the field `warVersion` to be a primitive type in the JSON string but got " + data['warVersion']);
        }

        return true;
    }


}

GroovInfo.RequiredProperties = ["currentApiVersion", "groovAdminVersion", "groovBoxDescription", "groovNodeRedVersion", "isGroovBox", "isGroovBoxSetup", "isLicenseValid", "licenseType", "minimumApiVersion", "shouldShowTrialDialog", "timezoneName", "timezoneOffset", "trialPeriodExpiration", "warVersion"];

/**
 * The current API version number
 * @member {Number} currentApiVersion
 */
GroovInfo.prototype['currentApiVersion'] = undefined;

/**
 * The groov Admin version number if running on a groov hardware box
 * @member {String} groovAdminVersion
 */
GroovInfo.prototype['groovAdminVersion'] = undefined;

/**
 * The groov box type (GROOV-AT1, GROOV-AR1, or GRV-EPIC-PR1)
 * @member {String} groovBoxDescription
 */
GroovInfo.prototype['groovBoxDescription'] = undefined;

/**
 * The node red version number if running on a GROOV-AR1 which has node red installed
 * @member {String} groovNodeRedVersion
 */
GroovInfo.prototype['groovNodeRedVersion'] = undefined;

/**
 * True if running on a groov hardware box
 * @member {Boolean} isGroovBox
 */
GroovInfo.prototype['isGroovBox'] = undefined;

/**
 * True if running on a groov hardware box which has been setup or true if running on groov Server for Windows
 * @member {Boolean} isGroovBoxSetup
 */
GroovInfo.prototype['isGroovBoxSetup'] = undefined;

/**
 * True if a license is installed, valid, and not expired
 * @member {Boolean} isLicenseValid
 */
GroovInfo.prototype['isLicenseValid'] = undefined;

/**
 * The license type (NONE, MAINTENANCE_EXPIRED, or VALID)
 * @member {String} licenseType
 */
GroovInfo.prototype['licenseType'] = undefined;

/**
 * The minimum supported API version number
 * @member {Number} minimumApiVersion
 */
GroovInfo.prototype['minimumApiVersion'] = undefined;

/**
 * True if the trial dialog pops up when logging into groov View
 * @member {Boolean} shouldShowTrialDialog
 */
GroovInfo.prototype['shouldShowTrialDialog'] = undefined;

/**
 * The server's timezone
 * @member {String} timezoneName
 */
GroovInfo.prototype['timezoneName'] = undefined;

/**
 * The server's timezone offset from UTC in minutes
 * @member {Number} timezoneOffset
 */
GroovInfo.prototype['timezoneOffset'] = undefined;

/**
 * Milliseconds until trial period is expired
 * @member {Number} trialPeriodExpiration
 */
GroovInfo.prototype['trialPeriodExpiration'] = undefined;

/**
 * The version number of the war
 * @member {String} warVersion
 */
GroovInfo.prototype['warVersion'] = undefined;






export default GroovInfo;

