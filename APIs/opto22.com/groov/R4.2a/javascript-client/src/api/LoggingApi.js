/**
 * groov View Public API
 * #### Revised: 2019-11-21  ### Overview groov View Public API revision 1. 
 *
 * The version of the OpenAPI document: R4.2a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Logging service.
* @module api/LoggingApi
* @version R4.2a
*/
export default class LoggingApi {

    /**
    * Constructs a new LoggingApi. 
    * @alias module:api/LoggingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the downloadLogJson operation.
     * @callback module:api/LoggingApi~downloadLogJsonCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads the complete groov View log in JSON format. Added in groov View R4.2a.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [minimumLogLevel = 'INFO')] How verbose the log should be.
     * @param {Number} [lastTimestamp = 0.0)] The earliest time to include in the log. Value is milliseconds since January 1, 1970 UTC.
     * @param {String} [filter] Optional string to search for in the log.
     * @param {module:api/LoggingApi~downloadLogJsonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    downloadLogJson(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'minimum-log-level': opts['minimumLogLevel'],
        'last-timestamp': opts['lastTimestamp'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/logging/groovLogs.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadLogText operation.
     * @callback module:api/LoggingApi~downloadLogTextCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads the complete groov View log. Added in groov View R4.2a.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [minimumLogLevel = 'INFO')] How verbose the log should be.
     * @param {Number} [lastTimestamp = 0.0)] The earliest time to include in the log. Value is milliseconds since January 1, 1970 UTC.
     * @param {String} [filter] Optional string to search for in the log.
     * @param {module:api/LoggingApi~downloadLogTextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    downloadLogText(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'minimum-log-level': opts['minimumLogLevel'],
        'last-timestamp': opts['lastTimestamp'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/logging/groovLogs.txt', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
