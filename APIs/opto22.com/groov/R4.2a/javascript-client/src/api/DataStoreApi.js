/**
 * groov View Public API
 * #### Revised: 2019-11-21  ### Overview groov View Public API revision 1. 
 *
 * The version of the OpenAPI document: R4.2a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataStoreDevice from '../model/DataStoreDevice';
import TagDefinition from '../model/TagDefinition';
import TagReference from '../model/TagReference';
import TagValue from '../model/TagValue';

/**
* DataStore service.
* @module api/DataStoreApi
* @version R4.2a
*/
export default class DataStoreApi {

    /**
    * Constructs a new DataStoreApi. 
    * @alias module:api/DataStoreApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchReadTags operation.
     * @callback module:api/DataStoreApi~batchReadTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagValue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read selected tags from the data store. Authorized for admins and editors.
     * @param {Array.<module:model/TagReference>} tags Tag references for the tags to read.
     * @param {module:api/DataStoreApi~batchReadTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagValue>}
     */
    batchReadTags(tags, callback) {
      let postBody = tags;
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling batchReadTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TagValue];
      return this.apiClient.callApi(
        '/v1/data-store/read', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllTags operation.
     * @callback module:api/DataStoreApi~listAllTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagDefinition>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all data store tags defined in the project. Authorized for admins and editors.
     * @param {module:api/DataStoreApi~listAllTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagDefinition>}
     */
    listAllTags(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TagDefinition];
      return this.apiClient.callApi(
        '/v1/data-store/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeviceTags operation.
     * @callback module:api/DataStoreApi~listDeviceTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagDefinition>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List tags of the given device. Authorized for admins and editors.
     * @param {Number} id ID of the device to use.
     * @param {module:api/DataStoreApi~listDeviceTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagDefinition>}
     */
    listDeviceTags(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listDeviceTags");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TagDefinition];
      return this.apiClient.callApi(
        '/v1/data-store/devices/{id}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDevices operation.
     * @callback module:api/DataStoreApi~listDevicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataStoreDevice>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List devices available in the data store. Authorized for admins and editors.
     * @param {module:api/DataStoreApi~listDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataStoreDevice>}
     */
    listDevices(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DataStoreDevice];
      return this.apiClient.callApi(
        '/v1/data-store/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readTag operation.
     * @callback module:api/DataStoreApi~readTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read the current value of a single tag. Authorized for admins and editors.
     * @param {Number} id ID of the tag to read.
     * @param {Object} opts Optional parameters
     * @param {Number} [index = 0.0)] Table index to start reading at.
     * @param {Number} [count = 1.0)] Number of elements to read from a table.
     * @param {module:api/DataStoreApi~readTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagValue}
     */
    readTag(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readTag");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'index': opts['index'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TagValue;
      return this.apiClient.callApi(
        '/v1/data-store/read/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeTag operation.
     * @callback module:api/DataStoreApi~writeTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Writes a new value to the given tag. Authorized for admins and editors.
     * @param {Number} id ID of the tag to write.
     * @param {String} value Value to write to the tag. Must be a string, number, or boolean.
     * @param {Object} opts Optional parameters
     * @param {Number} [index = 0.0)] For array tags, the index to write the value to.
     * @param {module:api/DataStoreApi~writeTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagValue}
     */
    writeTag(id, value, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling writeTag");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling writeTag");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'value': value,
        'index': opts['index']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TagValue;
      return this.apiClient.callApi(
        '/v1/data-store/write/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
