/*
 * groov View Public API
 * #### Revised: 2019-11-21  ### Overview groov View Public API revision 1. 
 *
 * The version of the OpenAPI document: R4.2a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GroovInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:29.892599-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GroovInfo {
  public static final String SERIALIZED_NAME_CURRENT_API_VERSION = "currentApiVersion";
  @SerializedName(SERIALIZED_NAME_CURRENT_API_VERSION)
  private BigDecimal currentApiVersion;

  public static final String SERIALIZED_NAME_GROOV_ADMIN_VERSION = "groovAdminVersion";
  @SerializedName(SERIALIZED_NAME_GROOV_ADMIN_VERSION)
  private String groovAdminVersion;

  public static final String SERIALIZED_NAME_GROOV_BOX_DESCRIPTION = "groovBoxDescription";
  @SerializedName(SERIALIZED_NAME_GROOV_BOX_DESCRIPTION)
  private String groovBoxDescription;

  public static final String SERIALIZED_NAME_GROOV_NODE_RED_VERSION = "groovNodeRedVersion";
  @SerializedName(SERIALIZED_NAME_GROOV_NODE_RED_VERSION)
  private String groovNodeRedVersion;

  public static final String SERIALIZED_NAME_IS_GROOV_BOX = "isGroovBox";
  @SerializedName(SERIALIZED_NAME_IS_GROOV_BOX)
  private Boolean isGroovBox;

  public static final String SERIALIZED_NAME_IS_GROOV_BOX_SETUP = "isGroovBoxSetup";
  @SerializedName(SERIALIZED_NAME_IS_GROOV_BOX_SETUP)
  private Boolean isGroovBoxSetup;

  public static final String SERIALIZED_NAME_IS_LICENSE_VALID = "isLicenseValid";
  @SerializedName(SERIALIZED_NAME_IS_LICENSE_VALID)
  private Boolean isLicenseValid;

  public static final String SERIALIZED_NAME_LICENSE_TYPE = "licenseType";
  @SerializedName(SERIALIZED_NAME_LICENSE_TYPE)
  private String licenseType;

  public static final String SERIALIZED_NAME_MINIMUM_API_VERSION = "minimumApiVersion";
  @SerializedName(SERIALIZED_NAME_MINIMUM_API_VERSION)
  private BigDecimal minimumApiVersion;

  public static final String SERIALIZED_NAME_SHOULD_SHOW_TRIAL_DIALOG = "shouldShowTrialDialog";
  @SerializedName(SERIALIZED_NAME_SHOULD_SHOW_TRIAL_DIALOG)
  private Boolean shouldShowTrialDialog;

  public static final String SERIALIZED_NAME_TIMEZONE_NAME = "timezoneName";
  @SerializedName(SERIALIZED_NAME_TIMEZONE_NAME)
  private String timezoneName;

  public static final String SERIALIZED_NAME_TIMEZONE_OFFSET = "timezoneOffset";
  @SerializedName(SERIALIZED_NAME_TIMEZONE_OFFSET)
  private BigDecimal timezoneOffset;

  public static final String SERIALIZED_NAME_TRIAL_PERIOD_EXPIRATION = "trialPeriodExpiration";
  @SerializedName(SERIALIZED_NAME_TRIAL_PERIOD_EXPIRATION)
  private BigDecimal trialPeriodExpiration;

  public static final String SERIALIZED_NAME_WAR_VERSION = "warVersion";
  @SerializedName(SERIALIZED_NAME_WAR_VERSION)
  private String warVersion;

  public GroovInfo() {
  }

  public GroovInfo currentApiVersion(BigDecimal currentApiVersion) {
    this.currentApiVersion = currentApiVersion;
    return this;
  }

  /**
   * The current API version number
   * @return currentApiVersion
   */
  @javax.annotation.Nonnull
  public BigDecimal getCurrentApiVersion() {
    return currentApiVersion;
  }

  public void setCurrentApiVersion(BigDecimal currentApiVersion) {
    this.currentApiVersion = currentApiVersion;
  }


  public GroovInfo groovAdminVersion(String groovAdminVersion) {
    this.groovAdminVersion = groovAdminVersion;
    return this;
  }

  /**
   * The groov Admin version number if running on a groov hardware box
   * @return groovAdminVersion
   */
  @javax.annotation.Nonnull
  public String getGroovAdminVersion() {
    return groovAdminVersion;
  }

  public void setGroovAdminVersion(String groovAdminVersion) {
    this.groovAdminVersion = groovAdminVersion;
  }


  public GroovInfo groovBoxDescription(String groovBoxDescription) {
    this.groovBoxDescription = groovBoxDescription;
    return this;
  }

  /**
   * The groov box type (GROOV-AT1, GROOV-AR1, or GRV-EPIC-PR1)
   * @return groovBoxDescription
   */
  @javax.annotation.Nonnull
  public String getGroovBoxDescription() {
    return groovBoxDescription;
  }

  public void setGroovBoxDescription(String groovBoxDescription) {
    this.groovBoxDescription = groovBoxDescription;
  }


  public GroovInfo groovNodeRedVersion(String groovNodeRedVersion) {
    this.groovNodeRedVersion = groovNodeRedVersion;
    return this;
  }

  /**
   * The node red version number if running on a GROOV-AR1 which has node red installed
   * @return groovNodeRedVersion
   */
  @javax.annotation.Nonnull
  public String getGroovNodeRedVersion() {
    return groovNodeRedVersion;
  }

  public void setGroovNodeRedVersion(String groovNodeRedVersion) {
    this.groovNodeRedVersion = groovNodeRedVersion;
  }


  public GroovInfo isGroovBox(Boolean isGroovBox) {
    this.isGroovBox = isGroovBox;
    return this;
  }

  /**
   * True if running on a groov hardware box
   * @return isGroovBox
   */
  @javax.annotation.Nonnull
  public Boolean getIsGroovBox() {
    return isGroovBox;
  }

  public void setIsGroovBox(Boolean isGroovBox) {
    this.isGroovBox = isGroovBox;
  }


  public GroovInfo isGroovBoxSetup(Boolean isGroovBoxSetup) {
    this.isGroovBoxSetup = isGroovBoxSetup;
    return this;
  }

  /**
   * True if running on a groov hardware box which has been setup or true if running on groov Server for Windows
   * @return isGroovBoxSetup
   */
  @javax.annotation.Nonnull
  public Boolean getIsGroovBoxSetup() {
    return isGroovBoxSetup;
  }

  public void setIsGroovBoxSetup(Boolean isGroovBoxSetup) {
    this.isGroovBoxSetup = isGroovBoxSetup;
  }


  public GroovInfo isLicenseValid(Boolean isLicenseValid) {
    this.isLicenseValid = isLicenseValid;
    return this;
  }

  /**
   * True if a license is installed, valid, and not expired
   * @return isLicenseValid
   */
  @javax.annotation.Nonnull
  public Boolean getIsLicenseValid() {
    return isLicenseValid;
  }

  public void setIsLicenseValid(Boolean isLicenseValid) {
    this.isLicenseValid = isLicenseValid;
  }


  public GroovInfo licenseType(String licenseType) {
    this.licenseType = licenseType;
    return this;
  }

  /**
   * The license type (NONE, MAINTENANCE_EXPIRED, or VALID)
   * @return licenseType
   */
  @javax.annotation.Nonnull
  public String getLicenseType() {
    return licenseType;
  }

  public void setLicenseType(String licenseType) {
    this.licenseType = licenseType;
  }


  public GroovInfo minimumApiVersion(BigDecimal minimumApiVersion) {
    this.minimumApiVersion = minimumApiVersion;
    return this;
  }

  /**
   * The minimum supported API version number
   * @return minimumApiVersion
   */
  @javax.annotation.Nonnull
  public BigDecimal getMinimumApiVersion() {
    return minimumApiVersion;
  }

  public void setMinimumApiVersion(BigDecimal minimumApiVersion) {
    this.minimumApiVersion = minimumApiVersion;
  }


  public GroovInfo shouldShowTrialDialog(Boolean shouldShowTrialDialog) {
    this.shouldShowTrialDialog = shouldShowTrialDialog;
    return this;
  }

  /**
   * True if the trial dialog pops up when logging into groov View
   * @return shouldShowTrialDialog
   */
  @javax.annotation.Nonnull
  public Boolean getShouldShowTrialDialog() {
    return shouldShowTrialDialog;
  }

  public void setShouldShowTrialDialog(Boolean shouldShowTrialDialog) {
    this.shouldShowTrialDialog = shouldShowTrialDialog;
  }


  public GroovInfo timezoneName(String timezoneName) {
    this.timezoneName = timezoneName;
    return this;
  }

  /**
   * The server&#39;s timezone
   * @return timezoneName
   */
  @javax.annotation.Nonnull
  public String getTimezoneName() {
    return timezoneName;
  }

  public void setTimezoneName(String timezoneName) {
    this.timezoneName = timezoneName;
  }


  public GroovInfo timezoneOffset(BigDecimal timezoneOffset) {
    this.timezoneOffset = timezoneOffset;
    return this;
  }

  /**
   * The server&#39;s timezone offset from UTC in minutes
   * @return timezoneOffset
   */
  @javax.annotation.Nonnull
  public BigDecimal getTimezoneOffset() {
    return timezoneOffset;
  }

  public void setTimezoneOffset(BigDecimal timezoneOffset) {
    this.timezoneOffset = timezoneOffset;
  }


  public GroovInfo trialPeriodExpiration(BigDecimal trialPeriodExpiration) {
    this.trialPeriodExpiration = trialPeriodExpiration;
    return this;
  }

  /**
   * Milliseconds until trial period is expired
   * @return trialPeriodExpiration
   */
  @javax.annotation.Nonnull
  public BigDecimal getTrialPeriodExpiration() {
    return trialPeriodExpiration;
  }

  public void setTrialPeriodExpiration(BigDecimal trialPeriodExpiration) {
    this.trialPeriodExpiration = trialPeriodExpiration;
  }


  public GroovInfo warVersion(String warVersion) {
    this.warVersion = warVersion;
    return this;
  }

  /**
   * The version number of the war
   * @return warVersion
   */
  @javax.annotation.Nonnull
  public String getWarVersion() {
    return warVersion;
  }

  public void setWarVersion(String warVersion) {
    this.warVersion = warVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroovInfo groovInfo = (GroovInfo) o;
    return Objects.equals(this.currentApiVersion, groovInfo.currentApiVersion) &&
        Objects.equals(this.groovAdminVersion, groovInfo.groovAdminVersion) &&
        Objects.equals(this.groovBoxDescription, groovInfo.groovBoxDescription) &&
        Objects.equals(this.groovNodeRedVersion, groovInfo.groovNodeRedVersion) &&
        Objects.equals(this.isGroovBox, groovInfo.isGroovBox) &&
        Objects.equals(this.isGroovBoxSetup, groovInfo.isGroovBoxSetup) &&
        Objects.equals(this.isLicenseValid, groovInfo.isLicenseValid) &&
        Objects.equals(this.licenseType, groovInfo.licenseType) &&
        Objects.equals(this.minimumApiVersion, groovInfo.minimumApiVersion) &&
        Objects.equals(this.shouldShowTrialDialog, groovInfo.shouldShowTrialDialog) &&
        Objects.equals(this.timezoneName, groovInfo.timezoneName) &&
        Objects.equals(this.timezoneOffset, groovInfo.timezoneOffset) &&
        Objects.equals(this.trialPeriodExpiration, groovInfo.trialPeriodExpiration) &&
        Objects.equals(this.warVersion, groovInfo.warVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentApiVersion, groovAdminVersion, groovBoxDescription, groovNodeRedVersion, isGroovBox, isGroovBoxSetup, isLicenseValid, licenseType, minimumApiVersion, shouldShowTrialDialog, timezoneName, timezoneOffset, trialPeriodExpiration, warVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroovInfo {\n");
    sb.append("    currentApiVersion: ").append(toIndentedString(currentApiVersion)).append("\n");
    sb.append("    groovAdminVersion: ").append(toIndentedString(groovAdminVersion)).append("\n");
    sb.append("    groovBoxDescription: ").append(toIndentedString(groovBoxDescription)).append("\n");
    sb.append("    groovNodeRedVersion: ").append(toIndentedString(groovNodeRedVersion)).append("\n");
    sb.append("    isGroovBox: ").append(toIndentedString(isGroovBox)).append("\n");
    sb.append("    isGroovBoxSetup: ").append(toIndentedString(isGroovBoxSetup)).append("\n");
    sb.append("    isLicenseValid: ").append(toIndentedString(isLicenseValid)).append("\n");
    sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
    sb.append("    minimumApiVersion: ").append(toIndentedString(minimumApiVersion)).append("\n");
    sb.append("    shouldShowTrialDialog: ").append(toIndentedString(shouldShowTrialDialog)).append("\n");
    sb.append("    timezoneName: ").append(toIndentedString(timezoneName)).append("\n");
    sb.append("    timezoneOffset: ").append(toIndentedString(timezoneOffset)).append("\n");
    sb.append("    trialPeriodExpiration: ").append(toIndentedString(trialPeriodExpiration)).append("\n");
    sb.append("    warVersion: ").append(toIndentedString(warVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentApiVersion");
    openapiFields.add("groovAdminVersion");
    openapiFields.add("groovBoxDescription");
    openapiFields.add("groovNodeRedVersion");
    openapiFields.add("isGroovBox");
    openapiFields.add("isGroovBoxSetup");
    openapiFields.add("isLicenseValid");
    openapiFields.add("licenseType");
    openapiFields.add("minimumApiVersion");
    openapiFields.add("shouldShowTrialDialog");
    openapiFields.add("timezoneName");
    openapiFields.add("timezoneOffset");
    openapiFields.add("trialPeriodExpiration");
    openapiFields.add("warVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currentApiVersion");
    openapiRequiredFields.add("groovAdminVersion");
    openapiRequiredFields.add("groovBoxDescription");
    openapiRequiredFields.add("groovNodeRedVersion");
    openapiRequiredFields.add("isGroovBox");
    openapiRequiredFields.add("isGroovBoxSetup");
    openapiRequiredFields.add("isLicenseValid");
    openapiRequiredFields.add("licenseType");
    openapiRequiredFields.add("minimumApiVersion");
    openapiRequiredFields.add("shouldShowTrialDialog");
    openapiRequiredFields.add("timezoneName");
    openapiRequiredFields.add("timezoneOffset");
    openapiRequiredFields.add("trialPeriodExpiration");
    openapiRequiredFields.add("warVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GroovInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroovInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroovInfo is not found in the empty JSON string", GroovInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GroovInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GroovInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GroovInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("groovAdminVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groovAdminVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groovAdminVersion").toString()));
      }
      if (!jsonObj.get("groovBoxDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groovBoxDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groovBoxDescription").toString()));
      }
      if (!jsonObj.get("groovNodeRedVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groovNodeRedVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groovNodeRedVersion").toString()));
      }
      if (!jsonObj.get("licenseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseType").toString()));
      }
      if (!jsonObj.get("timezoneName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezoneName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezoneName").toString()));
      }
      if (!jsonObj.get("warVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroovInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroovInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroovInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroovInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<GroovInfo>() {
           @Override
           public void write(JsonWriter out, GroovInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroovInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GroovInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GroovInfo
   * @throws IOException if the JSON string is invalid with respect to GroovInfo
   */
  public static GroovInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroovInfo.class);
  }

  /**
   * Convert an instance of GroovInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

