# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TagReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: float=None, id: float=None, index: float=None):
        """TagReference - a model defined in OpenAPI

        :param count: The count of this TagReference.
        :param id: The id of this TagReference.
        :param index: The index of this TagReference.
        """
        self.openapi_types = {
            'count': float,
            'id': float,
            'index': float
        }

        self.attribute_map = {
            'count': 'count',
            'id': 'id',
            'index': 'index'
        }

        self._count = count
        self._id = id
        self._index = index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tagReference of this TagReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this TagReference.

        For array tags, the number of elements to read, starting at index.

        :return: The count of this TagReference.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this TagReference.

        For array tags, the number of elements to read, starting at index.

        :param count: The count of this TagReference.
        :type count: float
        """

        self._count = count

    @property
    def id(self):
        """Gets the id of this TagReference.

        Unique id for the tag.

        :return: The id of this TagReference.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TagReference.

        Unique id for the tag.

        :param id: The id of this TagReference.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def index(self):
        """Gets the index of this TagReference.

        For array tags, the index to start reading at.

        :return: The index of this TagReference.
        :rtype: float
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this TagReference.

        For array tags, the index to start reading at.

        :param index: The index of this TagReference.
        :type index: float
        """

        self._index = index
