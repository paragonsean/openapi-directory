# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroovInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_api_version: float=None, groov_admin_version: str=None, groov_box_description: str=None, groov_node_red_version: str=None, is_groov_box: bool=None, is_groov_box_setup: bool=None, is_license_valid: bool=None, license_type: str=None, minimum_api_version: float=None, should_show_trial_dialog: bool=None, timezone_name: str=None, timezone_offset: float=None, trial_period_expiration: float=None, war_version: str=None):
        """GroovInfo - a model defined in OpenAPI

        :param current_api_version: The current_api_version of this GroovInfo.
        :param groov_admin_version: The groov_admin_version of this GroovInfo.
        :param groov_box_description: The groov_box_description of this GroovInfo.
        :param groov_node_red_version: The groov_node_red_version of this GroovInfo.
        :param is_groov_box: The is_groov_box of this GroovInfo.
        :param is_groov_box_setup: The is_groov_box_setup of this GroovInfo.
        :param is_license_valid: The is_license_valid of this GroovInfo.
        :param license_type: The license_type of this GroovInfo.
        :param minimum_api_version: The minimum_api_version of this GroovInfo.
        :param should_show_trial_dialog: The should_show_trial_dialog of this GroovInfo.
        :param timezone_name: The timezone_name of this GroovInfo.
        :param timezone_offset: The timezone_offset of this GroovInfo.
        :param trial_period_expiration: The trial_period_expiration of this GroovInfo.
        :param war_version: The war_version of this GroovInfo.
        """
        self.openapi_types = {
            'current_api_version': float,
            'groov_admin_version': str,
            'groov_box_description': str,
            'groov_node_red_version': str,
            'is_groov_box': bool,
            'is_groov_box_setup': bool,
            'is_license_valid': bool,
            'license_type': str,
            'minimum_api_version': float,
            'should_show_trial_dialog': bool,
            'timezone_name': str,
            'timezone_offset': float,
            'trial_period_expiration': float,
            'war_version': str
        }

        self.attribute_map = {
            'current_api_version': 'currentApiVersion',
            'groov_admin_version': 'groovAdminVersion',
            'groov_box_description': 'groovBoxDescription',
            'groov_node_red_version': 'groovNodeRedVersion',
            'is_groov_box': 'isGroovBox',
            'is_groov_box_setup': 'isGroovBoxSetup',
            'is_license_valid': 'isLicenseValid',
            'license_type': 'licenseType',
            'minimum_api_version': 'minimumApiVersion',
            'should_show_trial_dialog': 'shouldShowTrialDialog',
            'timezone_name': 'timezoneName',
            'timezone_offset': 'timezoneOffset',
            'trial_period_expiration': 'trialPeriodExpiration',
            'war_version': 'warVersion'
        }

        self._current_api_version = current_api_version
        self._groov_admin_version = groov_admin_version
        self._groov_box_description = groov_box_description
        self._groov_node_red_version = groov_node_red_version
        self._is_groov_box = is_groov_box
        self._is_groov_box_setup = is_groov_box_setup
        self._is_license_valid = is_license_valid
        self._license_type = license_type
        self._minimum_api_version = minimum_api_version
        self._should_show_trial_dialog = should_show_trial_dialog
        self._timezone_name = timezone_name
        self._timezone_offset = timezone_offset
        self._trial_period_expiration = trial_period_expiration
        self._war_version = war_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroovInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The groovInfo of this GroovInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_api_version(self):
        """Gets the current_api_version of this GroovInfo.

        The current API version number

        :return: The current_api_version of this GroovInfo.
        :rtype: float
        """
        return self._current_api_version

    @current_api_version.setter
    def current_api_version(self, current_api_version):
        """Sets the current_api_version of this GroovInfo.

        The current API version number

        :param current_api_version: The current_api_version of this GroovInfo.
        :type current_api_version: float
        """
        if current_api_version is None:
            raise ValueError("Invalid value for `current_api_version`, must not be `None`")

        self._current_api_version = current_api_version

    @property
    def groov_admin_version(self):
        """Gets the groov_admin_version of this GroovInfo.

        The groov Admin version number if running on a groov hardware box

        :return: The groov_admin_version of this GroovInfo.
        :rtype: str
        """
        return self._groov_admin_version

    @groov_admin_version.setter
    def groov_admin_version(self, groov_admin_version):
        """Sets the groov_admin_version of this GroovInfo.

        The groov Admin version number if running on a groov hardware box

        :param groov_admin_version: The groov_admin_version of this GroovInfo.
        :type groov_admin_version: str
        """
        if groov_admin_version is None:
            raise ValueError("Invalid value for `groov_admin_version`, must not be `None`")

        self._groov_admin_version = groov_admin_version

    @property
    def groov_box_description(self):
        """Gets the groov_box_description of this GroovInfo.

        The groov box type (GROOV-AT1, GROOV-AR1, or GRV-EPIC-PR1)

        :return: The groov_box_description of this GroovInfo.
        :rtype: str
        """
        return self._groov_box_description

    @groov_box_description.setter
    def groov_box_description(self, groov_box_description):
        """Sets the groov_box_description of this GroovInfo.

        The groov box type (GROOV-AT1, GROOV-AR1, or GRV-EPIC-PR1)

        :param groov_box_description: The groov_box_description of this GroovInfo.
        :type groov_box_description: str
        """
        if groov_box_description is None:
            raise ValueError("Invalid value for `groov_box_description`, must not be `None`")

        self._groov_box_description = groov_box_description

    @property
    def groov_node_red_version(self):
        """Gets the groov_node_red_version of this GroovInfo.

        The node red version number if running on a GROOV-AR1 which has node red installed

        :return: The groov_node_red_version of this GroovInfo.
        :rtype: str
        """
        return self._groov_node_red_version

    @groov_node_red_version.setter
    def groov_node_red_version(self, groov_node_red_version):
        """Sets the groov_node_red_version of this GroovInfo.

        The node red version number if running on a GROOV-AR1 which has node red installed

        :param groov_node_red_version: The groov_node_red_version of this GroovInfo.
        :type groov_node_red_version: str
        """
        if groov_node_red_version is None:
            raise ValueError("Invalid value for `groov_node_red_version`, must not be `None`")

        self._groov_node_red_version = groov_node_red_version

    @property
    def is_groov_box(self):
        """Gets the is_groov_box of this GroovInfo.

        True if running on a groov hardware box

        :return: The is_groov_box of this GroovInfo.
        :rtype: bool
        """
        return self._is_groov_box

    @is_groov_box.setter
    def is_groov_box(self, is_groov_box):
        """Sets the is_groov_box of this GroovInfo.

        True if running on a groov hardware box

        :param is_groov_box: The is_groov_box of this GroovInfo.
        :type is_groov_box: bool
        """
        if is_groov_box is None:
            raise ValueError("Invalid value for `is_groov_box`, must not be `None`")

        self._is_groov_box = is_groov_box

    @property
    def is_groov_box_setup(self):
        """Gets the is_groov_box_setup of this GroovInfo.

        True if running on a groov hardware box which has been setup or true if running on groov Server for Windows

        :return: The is_groov_box_setup of this GroovInfo.
        :rtype: bool
        """
        return self._is_groov_box_setup

    @is_groov_box_setup.setter
    def is_groov_box_setup(self, is_groov_box_setup):
        """Sets the is_groov_box_setup of this GroovInfo.

        True if running on a groov hardware box which has been setup or true if running on groov Server for Windows

        :param is_groov_box_setup: The is_groov_box_setup of this GroovInfo.
        :type is_groov_box_setup: bool
        """
        if is_groov_box_setup is None:
            raise ValueError("Invalid value for `is_groov_box_setup`, must not be `None`")

        self._is_groov_box_setup = is_groov_box_setup

    @property
    def is_license_valid(self):
        """Gets the is_license_valid of this GroovInfo.

        True if a license is installed, valid, and not expired

        :return: The is_license_valid of this GroovInfo.
        :rtype: bool
        """
        return self._is_license_valid

    @is_license_valid.setter
    def is_license_valid(self, is_license_valid):
        """Sets the is_license_valid of this GroovInfo.

        True if a license is installed, valid, and not expired

        :param is_license_valid: The is_license_valid of this GroovInfo.
        :type is_license_valid: bool
        """
        if is_license_valid is None:
            raise ValueError("Invalid value for `is_license_valid`, must not be `None`")

        self._is_license_valid = is_license_valid

    @property
    def license_type(self):
        """Gets the license_type of this GroovInfo.

        The license type (NONE, MAINTENANCE_EXPIRED, or VALID)

        :return: The license_type of this GroovInfo.
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this GroovInfo.

        The license type (NONE, MAINTENANCE_EXPIRED, or VALID)

        :param license_type: The license_type of this GroovInfo.
        :type license_type: str
        """
        if license_type is None:
            raise ValueError("Invalid value for `license_type`, must not be `None`")

        self._license_type = license_type

    @property
    def minimum_api_version(self):
        """Gets the minimum_api_version of this GroovInfo.

        The minimum supported API version number

        :return: The minimum_api_version of this GroovInfo.
        :rtype: float
        """
        return self._minimum_api_version

    @minimum_api_version.setter
    def minimum_api_version(self, minimum_api_version):
        """Sets the minimum_api_version of this GroovInfo.

        The minimum supported API version number

        :param minimum_api_version: The minimum_api_version of this GroovInfo.
        :type minimum_api_version: float
        """
        if minimum_api_version is None:
            raise ValueError("Invalid value for `minimum_api_version`, must not be `None`")

        self._minimum_api_version = minimum_api_version

    @property
    def should_show_trial_dialog(self):
        """Gets the should_show_trial_dialog of this GroovInfo.

        True if the trial dialog pops up when logging into groov View

        :return: The should_show_trial_dialog of this GroovInfo.
        :rtype: bool
        """
        return self._should_show_trial_dialog

    @should_show_trial_dialog.setter
    def should_show_trial_dialog(self, should_show_trial_dialog):
        """Sets the should_show_trial_dialog of this GroovInfo.

        True if the trial dialog pops up when logging into groov View

        :param should_show_trial_dialog: The should_show_trial_dialog of this GroovInfo.
        :type should_show_trial_dialog: bool
        """
        if should_show_trial_dialog is None:
            raise ValueError("Invalid value for `should_show_trial_dialog`, must not be `None`")

        self._should_show_trial_dialog = should_show_trial_dialog

    @property
    def timezone_name(self):
        """Gets the timezone_name of this GroovInfo.

        The server's timezone

        :return: The timezone_name of this GroovInfo.
        :rtype: str
        """
        return self._timezone_name

    @timezone_name.setter
    def timezone_name(self, timezone_name):
        """Sets the timezone_name of this GroovInfo.

        The server's timezone

        :param timezone_name: The timezone_name of this GroovInfo.
        :type timezone_name: str
        """
        if timezone_name is None:
            raise ValueError("Invalid value for `timezone_name`, must not be `None`")

        self._timezone_name = timezone_name

    @property
    def timezone_offset(self):
        """Gets the timezone_offset of this GroovInfo.

        The server's timezone offset from UTC in minutes

        :return: The timezone_offset of this GroovInfo.
        :rtype: float
        """
        return self._timezone_offset

    @timezone_offset.setter
    def timezone_offset(self, timezone_offset):
        """Sets the timezone_offset of this GroovInfo.

        The server's timezone offset from UTC in minutes

        :param timezone_offset: The timezone_offset of this GroovInfo.
        :type timezone_offset: float
        """
        if timezone_offset is None:
            raise ValueError("Invalid value for `timezone_offset`, must not be `None`")

        self._timezone_offset = timezone_offset

    @property
    def trial_period_expiration(self):
        """Gets the trial_period_expiration of this GroovInfo.

        Milliseconds until trial period is expired

        :return: The trial_period_expiration of this GroovInfo.
        :rtype: float
        """
        return self._trial_period_expiration

    @trial_period_expiration.setter
    def trial_period_expiration(self, trial_period_expiration):
        """Sets the trial_period_expiration of this GroovInfo.

        Milliseconds until trial period is expired

        :param trial_period_expiration: The trial_period_expiration of this GroovInfo.
        :type trial_period_expiration: float
        """
        if trial_period_expiration is None:
            raise ValueError("Invalid value for `trial_period_expiration`, must not be `None`")

        self._trial_period_expiration = trial_period_expiration

    @property
    def war_version(self):
        """Gets the war_version of this GroovInfo.

        The version number of the war

        :return: The war_version of this GroovInfo.
        :rtype: str
        """
        return self._war_version

    @war_version.setter
    def war_version(self, war_version):
        """Sets the war_version of this GroovInfo.

        The version number of the war

        :param war_version: The war_version of this GroovInfo.
        :type war_version: str
        """
        if war_version is None:
            raise ValueError("Invalid value for `war_version`, must not be `None`")

        self._war_version = war_version
