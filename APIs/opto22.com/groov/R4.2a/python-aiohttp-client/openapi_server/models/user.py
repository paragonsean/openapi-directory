# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key: str=None, email: str=None, groups: List[float]=None, id: float=None, needs_password_change: bool=None, role: str=None, username: str=None):
        """User - a model defined in OpenAPI

        :param api_key: The api_key of this User.
        :param email: The email of this User.
        :param groups: The groups of this User.
        :param id: The id of this User.
        :param needs_password_change: The needs_password_change of this User.
        :param role: The role of this User.
        :param username: The username of this User.
        """
        self.openapi_types = {
            'api_key': str,
            'email': str,
            'groups': List[float],
            'id': float,
            'needs_password_change': bool,
            'role': str,
            'username': str
        }

        self.attribute_map = {
            'api_key': 'apiKey',
            'email': 'email',
            'groups': 'groups',
            'id': 'id',
            'needs_password_change': 'needsPasswordChange',
            'role': 'role',
            'username': 'username'
        }

        self._api_key = api_key
        self._email = email
        self._groups = groups
        self._id = id
        self._needs_password_change = needs_password_change
        self._role = role
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key(self):
        """Gets the api_key of this User.


        :return: The api_key of this User.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this User.


        :param api_key: The api_key of this User.
        :type api_key: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")

        self._api_key = api_key

    @property
    def email(self):
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def groups(self):
        """Gets the groups of this User.


        :return: The groups of this User.
        :rtype: List[float]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this User.


        :param groups: The groups of this User.
        :type groups: List[float]
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")

        self._groups = groups

    @property
    def id(self):
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def needs_password_change(self):
        """Gets the needs_password_change of this User.

        True if your password is expired

        :return: The needs_password_change of this User.
        :rtype: bool
        """
        return self._needs_password_change

    @needs_password_change.setter
    def needs_password_change(self, needs_password_change):
        """Sets the needs_password_change of this User.

        True if your password is expired

        :param needs_password_change: The needs_password_change of this User.
        :type needs_password_change: bool
        """
        if needs_password_change is None:
            raise ValueError("Invalid value for `needs_password_change`, must not be `None`")

        self._needs_password_change = needs_password_change

    @property
    def role(self):
        """Gets the role of this User.


        :return: The role of this User.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this User.


        :param role: The role of this User.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    @property
    def username(self):
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
