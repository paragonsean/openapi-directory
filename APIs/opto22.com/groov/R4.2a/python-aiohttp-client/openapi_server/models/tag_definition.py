# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TagDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_type: str=None, device_id: float=None, id: float=None, length: float=None, name: str=None):
        """TagDefinition - a model defined in OpenAPI

        :param data_type: The data_type of this TagDefinition.
        :param device_id: The device_id of this TagDefinition.
        :param id: The id of this TagDefinition.
        :param length: The length of this TagDefinition.
        :param name: The name of this TagDefinition.
        """
        self.openapi_types = {
            'data_type': str,
            'device_id': float,
            'id': float,
            'length': float,
            'name': str
        }

        self.attribute_map = {
            'data_type': 'dataType',
            'device_id': 'deviceId',
            'id': 'id',
            'length': 'length',
            'name': 'name'
        }

        self._data_type = data_type
        self._device_id = device_id
        self._id = id
        self._length = length
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tagDefinition of this TagDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_type(self):
        """Gets the data_type of this TagDefinition.


        :return: The data_type of this TagDefinition.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this TagDefinition.


        :param data_type: The data_type of this TagDefinition.
        :type data_type: str
        """
        allowed_values = ["boolean", "integer", "float", "string", "booleanArray", "integerArray", "floatArray", "stringArray"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def device_id(self):
        """Gets the device_id of this TagDefinition.


        :return: The device_id of this TagDefinition.
        :rtype: float
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this TagDefinition.


        :param device_id: The device_id of this TagDefinition.
        :type device_id: float
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")

        self._device_id = device_id

    @property
    def id(self):
        """Gets the id of this TagDefinition.


        :return: The id of this TagDefinition.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TagDefinition.


        :param id: The id of this TagDefinition.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def length(self):
        """Gets the length of this TagDefinition.


        :return: The length of this TagDefinition.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this TagDefinition.


        :param length: The length of this TagDefinition.
        :type length: float
        """

        self._length = length

    @property
    def name(self):
        """Gets the name of this TagDefinition.


        :return: The name of this TagDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TagDefinition.


        :param name: The name of this TagDefinition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
