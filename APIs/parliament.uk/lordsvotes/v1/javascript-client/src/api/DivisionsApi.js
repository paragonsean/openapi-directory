/**
 * Lords Votes API
 * An API that allows querying of Lords Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Comparators from '../model/Comparators';
import DivisionGroupByPartyViewModel from '../model/DivisionGroupByPartyViewModel';
import DivisionViewModel from '../model/DivisionViewModel';
import MemberVotingRecordViewModel from '../model/MemberVotingRecordViewModel';

/**
* Divisions service.
* @module api/DivisionsApi
* @version v1
*/
export default class DivisionsApi {

    /**
    * Constructs a new DivisionsApi. 
    * @alias module:api/DivisionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dataDivisionsDivisionIdGet operation.
     * @callback module:api/DivisionsApi~dataDivisionsDivisionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DivisionViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a Division
     * Get a single Division which has the Id specified.
     * @param {Number} divisionId Division with ID specified
     * @param {module:api/DivisionsApi~dataDivisionsDivisionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DivisionViewModel}
     */
    dataDivisionsDivisionIdGet(divisionId, callback) {
      let postBody = null;
      // verify the required parameter 'divisionId' is set
      if (divisionId === undefined || divisionId === null) {
        throw new Error("Missing the required parameter 'divisionId' when calling dataDivisionsDivisionIdGet");
      }

      let pathParams = {
        'divisionId': divisionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = DivisionViewModel;
      return this.apiClient.callApi(
        '/data/Divisions/{divisionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataDivisionsGroupedbypartyGet operation.
     * @callback module:api/DivisionsApi~dataDivisionsGroupedbypartyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DivisionGroupByPartyViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return Divisions results grouped by party
     * Get a list of Divisions which contain grouped by party
     * @param {Object} opts Optional parameters
     * @param {String} [searchTerm] Divisions containing search term within title or number
     * @param {Number} [memberId] Divisions returning Member with Member ID voting records
     * @param {Boolean} [includeWhenMemberWasTeller] Divisions where member was a teller as well as if they actually voted
     * @param {Date} [startDate] Divisions where division date in one or after date provided. Date format is yyyy-MM-dd
     * @param {Date} [endDate] Divisions where division date in one or before date provided. Date format is yyyy-MM-dd
     * @param {Number} [divisionNumber] Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint
     * @param {module:model/Comparators} [totalVotesCastComparator] comparison operator to use
     * @param {Number} [totalVotesCastValueToCompare] value to compare to with the operator provided
     * @param {module:model/Comparators} [majorityComparator] comparison operator to use
     * @param {Number} [majorityValueToCompare] value to compare to with the operator provided
     * @param {module:api/DivisionsApi~dataDivisionsGroupedbypartyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DivisionGroupByPartyViewModel}
     */
    dataDivisionsGroupedbypartyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'SearchTerm': opts['searchTerm'],
        'MemberId': opts['memberId'],
        'IncludeWhenMemberWasTeller': opts['includeWhenMemberWasTeller'],
        'StartDate': opts['startDate'],
        'EndDate': opts['endDate'],
        'DivisionNumber': opts['divisionNumber'],
        'TotalVotesCast.Comparator': opts['totalVotesCastComparator'],
        'TotalVotesCast.ValueToCompare': opts['totalVotesCastValueToCompare'],
        'Majority.Comparator': opts['majorityComparator'],
        'Majority.ValueToCompare': opts['majorityValueToCompare']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = DivisionGroupByPartyViewModel;
      return this.apiClient.callApi(
        '/data/Divisions/groupedbyparty', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataDivisionsMembervotingGet operation.
     * @callback module:api/DivisionsApi~dataDivisionsMembervotingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberVotingRecordViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return voting records for a Member
     * Get a list of voting records for a Member.
     * @param {Number} memberId Id number of a Member whose voting records are to be returned
     * @param {Object} opts Optional parameters
     * @param {String} [searchTerm] Divisions containing search term within title or number
     * @param {Boolean} [includeWhenMemberWasTeller] Divisions where member was a teller as well as if they actually voted
     * @param {Date} [startDate] Divisions where division date in one or after date provided. Date format is yyyy-MM-dd
     * @param {Date} [endDate] Divisions where division date in one or before date provided. Date format is yyyy-MM-dd
     * @param {Number} [divisionNumber] Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint
     * @param {module:model/Comparators} [totalVotesCastComparator] comparison operator to use
     * @param {Number} [totalVotesCastValueToCompare] value to compare to with the operator provided
     * @param {module:model/Comparators} [majorityComparator] comparison operator to use
     * @param {Number} [majorityValueToCompare] value to compare to with the operator provided
     * @param {Number} [skip = 0)] The number of records to skip. Must be a positive integer. Default is 0
     * @param {Number} [take = 25)] The number of records to return per page. Must be more than 0. Default is 25
     * @param {module:api/DivisionsApi~dataDivisionsMembervotingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberVotingRecordViewModel}
     */
    dataDivisionsMembervotingGet(memberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling dataDivisionsMembervotingGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'MemberId': memberId,
        'SearchTerm': opts['searchTerm'],
        'IncludeWhenMemberWasTeller': opts['includeWhenMemberWasTeller'],
        'StartDate': opts['startDate'],
        'EndDate': opts['endDate'],
        'DivisionNumber': opts['divisionNumber'],
        'TotalVotesCast.Comparator': opts['totalVotesCastComparator'],
        'TotalVotesCast.ValueToCompare': opts['totalVotesCastValueToCompare'],
        'Majority.Comparator': opts['majorityComparator'],
        'Majority.ValueToCompare': opts['majorityValueToCompare'],
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = MemberVotingRecordViewModel;
      return this.apiClient.callApi(
        '/data/Divisions/membervoting', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataDivisionsSearchGet operation.
     * @callback module:api/DivisionsApi~dataDivisionsSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DivisionViewModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of Divisions
     * Get a list of Divisions which meet the specified criteria.
     * @param {Object} opts Optional parameters
     * @param {String} [searchTerm] Divisions containing search term within title or number
     * @param {Number} [memberId] Divisions returning Member with Member ID voting records
     * @param {Boolean} [includeWhenMemberWasTeller] Divisions where member was a teller as well as if they actually voted
     * @param {Date} [startDate] Divisions where division date in one or after date provided. Date format is yyyy-MM-dd
     * @param {Date} [endDate] Divisions where division date in one or before date provided. Date format is yyyy-MM-dd
     * @param {Number} [divisionNumber] Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint
     * @param {module:model/Comparators} [totalVotesCastComparator] comparison operator to use
     * @param {Number} [totalVotesCastValueToCompare] value to compare to with the operator provided
     * @param {module:model/Comparators} [majorityComparator] comparison operator to use
     * @param {Number} [majorityValueToCompare] value to compare to with the operator provided
     * @param {Number} [skip = 0)] The number of records to skip. Must be a positive integer. Default is 0
     * @param {Number} [take = 25)] The number of records to return per page. Must be more than 0. Default is 25
     * @param {module:api/DivisionsApi~dataDivisionsSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DivisionViewModel>}
     */
    dataDivisionsSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'SearchTerm': opts['searchTerm'],
        'MemberId': opts['memberId'],
        'IncludeWhenMemberWasTeller': opts['includeWhenMemberWasTeller'],
        'StartDate': opts['startDate'],
        'EndDate': opts['endDate'],
        'DivisionNumber': opts['divisionNumber'],
        'TotalVotesCast.Comparator': opts['totalVotesCastComparator'],
        'TotalVotesCast.ValueToCompare': opts['totalVotesCastValueToCompare'],
        'Majority.Comparator': opts['majorityComparator'],
        'Majority.ValueToCompare': opts['majorityValueToCompare'],
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [DivisionViewModel];
      return this.apiClient.callApi(
        '/data/Divisions/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataDivisionsSearchTotalResultsGet operation.
     * @callback module:api/DivisionsApi~dataDivisionsSearchTotalResultsGetCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return total results count
     * Get total count of Divisions meeting the specified query, useful for paging lists etc...
     * @param {Object} opts Optional parameters
     * @param {String} [searchTerm] Divisions containing search term within title or number
     * @param {Number} [memberId] Divisions returning Member with Member ID voting records
     * @param {Boolean} [includeWhenMemberWasTeller] Divisions where member was a teller as well as if they actually voted
     * @param {Date} [startDate] Divisions where division date in one or after date provided. Date format is yyyy-MM-dd
     * @param {Date} [endDate] Divisions where division date in one or before date provided. Date format is yyyy-MM-dd
     * @param {Number} [divisionNumber] Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint
     * @param {module:model/Comparators} [totalVotesCastComparator] comparison operator to use
     * @param {Number} [totalVotesCastValueToCompare] value to compare to with the operator provided
     * @param {module:model/Comparators} [majorityComparator] comparison operator to use
     * @param {Number} [majorityValueToCompare] value to compare to with the operator provided
     * @param {module:api/DivisionsApi~dataDivisionsSearchTotalResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    dataDivisionsSearchTotalResultsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'SearchTerm': opts['searchTerm'],
        'MemberId': opts['memberId'],
        'IncludeWhenMemberWasTeller': opts['includeWhenMemberWasTeller'],
        'StartDate': opts['startDate'],
        'EndDate': opts['endDate'],
        'DivisionNumber': opts['divisionNumber'],
        'TotalVotesCast.Comparator': opts['totalVotesCastComparator'],
        'TotalVotesCast.ValueToCompare': opts['totalVotesCastValueToCompare'],
        'Majority.Comparator': opts['majorityComparator'],
        'Majority.ValueToCompare': opts['majorityValueToCompare']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/data/Divisions/searchTotalResults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
