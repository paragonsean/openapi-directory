/**
 * Lords Votes API
 * An API that allows querying of Lords Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MemberViewModel from './MemberViewModel';

/**
 * The DivisionViewModel model module.
 * @module model/DivisionViewModel
 * @version v1
 */
class DivisionViewModel {
    /**
     * Constructs a new <code>DivisionViewModel</code>.
     * @alias module:model/DivisionViewModel
     */
    constructor() { 
        
        DivisionViewModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DivisionViewModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DivisionViewModel} obj Optional instance to populate.
     * @return {module:model/DivisionViewModel} The populated <code>DivisionViewModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DivisionViewModel();

            if (data.hasOwnProperty('amendmentMotionNotes')) {
                obj['amendmentMotionNotes'] = ApiClient.convertToType(data['amendmentMotionNotes'], 'String');
            }
            if (data.hasOwnProperty('authoritativeContentCount')) {
                obj['authoritativeContentCount'] = ApiClient.convertToType(data['authoritativeContentCount'], 'Number');
            }
            if (data.hasOwnProperty('authoritativeNotContentCount')) {
                obj['authoritativeNotContentCount'] = ApiClient.convertToType(data['authoritativeNotContentCount'], 'Number');
            }
            if (data.hasOwnProperty('contentTellers')) {
                obj['contentTellers'] = ApiClient.convertToType(data['contentTellers'], [MemberViewModel]);
            }
            if (data.hasOwnProperty('contents')) {
                obj['contents'] = ApiClient.convertToType(data['contents'], [MemberViewModel]);
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('divisionHadTellers')) {
                obj['divisionHadTellers'] = ApiClient.convertToType(data['divisionHadTellers'], 'Boolean');
            }
            if (data.hasOwnProperty('divisionId')) {
                obj['divisionId'] = ApiClient.convertToType(data['divisionId'], 'Number');
            }
            if (data.hasOwnProperty('divisionWasExclusivelyRemote')) {
                obj['divisionWasExclusivelyRemote'] = ApiClient.convertToType(data['divisionWasExclusivelyRemote'], 'Boolean');
            }
            if (data.hasOwnProperty('isGovernmentContent')) {
                obj['isGovernmentContent'] = ApiClient.convertToType(data['isGovernmentContent'], 'Boolean');
            }
            if (data.hasOwnProperty('isGovernmentWin')) {
                obj['isGovernmentWin'] = ApiClient.convertToType(data['isGovernmentWin'], 'Boolean');
            }
            if (data.hasOwnProperty('isHouse')) {
                obj['isHouse'] = ApiClient.convertToType(data['isHouse'], 'Boolean');
            }
            if (data.hasOwnProperty('isWhipped')) {
                obj['isWhipped'] = ApiClient.convertToType(data['isWhipped'], 'Boolean');
            }
            if (data.hasOwnProperty('memberContentCount')) {
                obj['memberContentCount'] = ApiClient.convertToType(data['memberContentCount'], 'Number');
            }
            if (data.hasOwnProperty('memberNotContentCount')) {
                obj['memberNotContentCount'] = ApiClient.convertToType(data['memberNotContentCount'], 'Number');
            }
            if (data.hasOwnProperty('notContentTellers')) {
                obj['notContentTellers'] = ApiClient.convertToType(data['notContentTellers'], [MemberViewModel]);
            }
            if (data.hasOwnProperty('notContents')) {
                obj['notContents'] = ApiClient.convertToType(data['notContents'], [MemberViewModel]);
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('remoteVotingEnd')) {
                obj['remoteVotingEnd'] = ApiClient.convertToType(data['remoteVotingEnd'], 'Date');
            }
            if (data.hasOwnProperty('remoteVotingStart')) {
                obj['remoteVotingStart'] = ApiClient.convertToType(data['remoteVotingStart'], 'Date');
            }
            if (data.hasOwnProperty('sponsoringMemberId')) {
                obj['sponsoringMemberId'] = ApiClient.convertToType(data['sponsoringMemberId'], 'Number');
            }
            if (data.hasOwnProperty('tellerContentCount')) {
                obj['tellerContentCount'] = ApiClient.convertToType(data['tellerContentCount'], 'Number');
            }
            if (data.hasOwnProperty('tellerNotContentCount')) {
                obj['tellerNotContentCount'] = ApiClient.convertToType(data['tellerNotContentCount'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DivisionViewModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DivisionViewModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['amendmentMotionNotes'] && !(typeof data['amendmentMotionNotes'] === 'string' || data['amendmentMotionNotes'] instanceof String)) {
            throw new Error("Expected the field `amendmentMotionNotes` to be a primitive type in the JSON string but got " + data['amendmentMotionNotes']);
        }
        if (data['contentTellers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contentTellers'])) {
                throw new Error("Expected the field `contentTellers` to be an array in the JSON data but got " + data['contentTellers']);
            }
            // validate the optional field `contentTellers` (array)
            for (const item of data['contentTellers']) {
                MemberViewModel.validateJSON(item);
            };
        }
        if (data['contents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contents'])) {
                throw new Error("Expected the field `contents` to be an array in the JSON data but got " + data['contents']);
            }
            // validate the optional field `contents` (array)
            for (const item of data['contents']) {
                MemberViewModel.validateJSON(item);
            };
        }
        if (data['notContentTellers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notContentTellers'])) {
                throw new Error("Expected the field `notContentTellers` to be an array in the JSON data but got " + data['notContentTellers']);
            }
            // validate the optional field `notContentTellers` (array)
            for (const item of data['notContentTellers']) {
                MemberViewModel.validateJSON(item);
            };
        }
        if (data['notContents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notContents'])) {
                throw new Error("Expected the field `notContents` to be an array in the JSON data but got " + data['notContents']);
            }
            // validate the optional field `notContents` (array)
            for (const item of data['notContents']) {
                MemberViewModel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {String} amendmentMotionNotes
 */
DivisionViewModel.prototype['amendmentMotionNotes'] = undefined;

/**
 * Authoritative content count is the official count. This is the teller content count when tellers are present, but member content count when there are no tellers.
 * @member {Number} authoritativeContentCount
 */
DivisionViewModel.prototype['authoritativeContentCount'] = undefined;

/**
 * Authoritative not content count is the official count. This is the teller not content count when tellers are present, but member not content count when there are no tellers.
 * @member {Number} authoritativeNotContentCount
 */
DivisionViewModel.prototype['authoritativeNotContentCount'] = undefined;

/**
 * @member {Array.<module:model/MemberViewModel>} contentTellers
 */
DivisionViewModel.prototype['contentTellers'] = undefined;

/**
 * @member {Array.<module:model/MemberViewModel>} contents
 */
DivisionViewModel.prototype['contents'] = undefined;

/**
 * @member {Date} date
 */
DivisionViewModel.prototype['date'] = undefined;

/**
 * Whether the division had tellers or not
 * @member {Boolean} divisionHadTellers
 */
DivisionViewModel.prototype['divisionHadTellers'] = undefined;

/**
 * @member {Number} divisionId
 */
DivisionViewModel.prototype['divisionId'] = undefined;

/**
 * @member {Boolean} divisionWasExclusivelyRemote
 */
DivisionViewModel.prototype['divisionWasExclusivelyRemote'] = undefined;

/**
 * @member {Boolean} isGovernmentContent
 */
DivisionViewModel.prototype['isGovernmentContent'] = undefined;

/**
 * @member {Boolean} isGovernmentWin
 */
DivisionViewModel.prototype['isGovernmentWin'] = undefined;

/**
 * @member {Boolean} isHouse
 */
DivisionViewModel.prototype['isHouse'] = undefined;

/**
 * @member {Boolean} isWhipped
 */
DivisionViewModel.prototype['isWhipped'] = undefined;

/**
 * Member content count is the total tally of all members that voted content
 * @member {Number} memberContentCount
 */
DivisionViewModel.prototype['memberContentCount'] = undefined;

/**
 * Member not content count is the total tally of all members that voted not content
 * @member {Number} memberNotContentCount
 */
DivisionViewModel.prototype['memberNotContentCount'] = undefined;

/**
 * @member {Array.<module:model/MemberViewModel>} notContentTellers
 */
DivisionViewModel.prototype['notContentTellers'] = undefined;

/**
 * @member {Array.<module:model/MemberViewModel>} notContents
 */
DivisionViewModel.prototype['notContents'] = undefined;

/**
 * @member {String} notes
 */
DivisionViewModel.prototype['notes'] = undefined;

/**
 * @member {Number} number
 */
DivisionViewModel.prototype['number'] = undefined;

/**
 * @member {Date} remoteVotingEnd
 */
DivisionViewModel.prototype['remoteVotingEnd'] = undefined;

/**
 * @member {Date} remoteVotingStart
 */
DivisionViewModel.prototype['remoteVotingStart'] = undefined;

/**
 * @member {Number} sponsoringMemberId
 */
DivisionViewModel.prototype['sponsoringMemberId'] = undefined;

/**
 * Content count is count recorded by the tellers
 * @member {Number} tellerContentCount
 */
DivisionViewModel.prototype['tellerContentCount'] = undefined;

/**
 * Not Content count recorded by the tellers
 * @member {Number} tellerNotContentCount
 */
DivisionViewModel.prototype['tellerNotContentCount'] = undefined;

/**
 * @member {String} title
 */
DivisionViewModel.prototype['title'] = undefined;






export default DivisionViewModel;

