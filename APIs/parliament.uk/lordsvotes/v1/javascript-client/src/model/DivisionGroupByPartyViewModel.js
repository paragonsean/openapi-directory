/**
 * Lords Votes API
 * An API that allows querying of Lords Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PartyVoteResultViewModel from './PartyVoteResultViewModel';

/**
 * The DivisionGroupByPartyViewModel model module.
 * @module model/DivisionGroupByPartyViewModel
 * @version v1
 */
class DivisionGroupByPartyViewModel {
    /**
     * Constructs a new <code>DivisionGroupByPartyViewModel</code>.
     * @alias module:model/DivisionGroupByPartyViewModel
     */
    constructor() { 
        
        DivisionGroupByPartyViewModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DivisionGroupByPartyViewModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DivisionGroupByPartyViewModel} obj Optional instance to populate.
     * @return {module:model/DivisionGroupByPartyViewModel} The populated <code>DivisionGroupByPartyViewModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DivisionGroupByPartyViewModel();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], [PartyVoteResultViewModel]);
            }
            if (data.hasOwnProperty('contentCount')) {
                obj['contentCount'] = ApiClient.convertToType(data['contentCount'], 'Number');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('divisionId')) {
                obj['divisionId'] = ApiClient.convertToType(data['divisionId'], 'Number');
            }
            if (data.hasOwnProperty('notContent')) {
                obj['notContent'] = ApiClient.convertToType(data['notContent'], [PartyVoteResultViewModel]);
            }
            if (data.hasOwnProperty('notContentCount')) {
                obj['notContentCount'] = ApiClient.convertToType(data['notContentCount'], 'Number');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DivisionGroupByPartyViewModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DivisionGroupByPartyViewModel</code>.
     */
    static validateJSON(data) {
        if (data['content']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['content'])) {
                throw new Error("Expected the field `content` to be an array in the JSON data but got " + data['content']);
            }
            // validate the optional field `content` (array)
            for (const item of data['content']) {
                PartyVoteResultViewModel.validateJSON(item);
            };
        }
        if (data['notContent']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notContent'])) {
                throw new Error("Expected the field `notContent` to be an array in the JSON data but got " + data['notContent']);
            }
            // validate the optional field `notContent` (array)
            for (const item of data['notContent']) {
                PartyVoteResultViewModel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/PartyVoteResultViewModel>} content
 */
DivisionGroupByPartyViewModel.prototype['content'] = undefined;

/**
 * @member {Number} contentCount
 */
DivisionGroupByPartyViewModel.prototype['contentCount'] = undefined;

/**
 * @member {Date} date
 */
DivisionGroupByPartyViewModel.prototype['date'] = undefined;

/**
 * @member {Number} divisionId
 */
DivisionGroupByPartyViewModel.prototype['divisionId'] = undefined;

/**
 * @member {Array.<module:model/PartyVoteResultViewModel>} notContent
 */
DivisionGroupByPartyViewModel.prototype['notContent'] = undefined;

/**
 * @member {Number} notContentCount
 */
DivisionGroupByPartyViewModel.prototype['notContentCount'] = undefined;

/**
 * @member {Number} number
 */
DivisionGroupByPartyViewModel.prototype['number'] = undefined;

/**
 * @member {String} title
 */
DivisionGroupByPartyViewModel.prototype['title'] = undefined;






export default DivisionGroupByPartyViewModel;

