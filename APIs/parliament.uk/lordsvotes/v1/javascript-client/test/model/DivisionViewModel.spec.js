/**
 * Lords Votes API
 * An API that allows querying of Lords Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LordsVotesApi);
  }
}(this, function(expect, LordsVotesApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LordsVotesApi.DivisionViewModel();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DivisionViewModel', function() {
    it('should create an instance of DivisionViewModel', function() {
      // uncomment below and update the code to test DivisionViewModel
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be.a(LordsVotesApi.DivisionViewModel);
    });

    it('should have the property amendmentMotionNotes (base name: "amendmentMotionNotes")', function() {
      // uncomment below and update the code to test the property amendmentMotionNotes
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property authoritativeContentCount (base name: "authoritativeContentCount")', function() {
      // uncomment below and update the code to test the property authoritativeContentCount
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property authoritativeNotContentCount (base name: "authoritativeNotContentCount")', function() {
      // uncomment below and update the code to test the property authoritativeNotContentCount
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property contentTellers (base name: "contentTellers")', function() {
      // uncomment below and update the code to test the property contentTellers
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property contents (base name: "contents")', function() {
      // uncomment below and update the code to test the property contents
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property date (base name: "date")', function() {
      // uncomment below and update the code to test the property date
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property divisionHadTellers (base name: "divisionHadTellers")', function() {
      // uncomment below and update the code to test the property divisionHadTellers
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property divisionId (base name: "divisionId")', function() {
      // uncomment below and update the code to test the property divisionId
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property divisionWasExclusivelyRemote (base name: "divisionWasExclusivelyRemote")', function() {
      // uncomment below and update the code to test the property divisionWasExclusivelyRemote
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property isGovernmentContent (base name: "isGovernmentContent")', function() {
      // uncomment below and update the code to test the property isGovernmentContent
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property isGovernmentWin (base name: "isGovernmentWin")', function() {
      // uncomment below and update the code to test the property isGovernmentWin
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property isHouse (base name: "isHouse")', function() {
      // uncomment below and update the code to test the property isHouse
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property isWhipped (base name: "isWhipped")', function() {
      // uncomment below and update the code to test the property isWhipped
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property memberContentCount (base name: "memberContentCount")', function() {
      // uncomment below and update the code to test the property memberContentCount
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property memberNotContentCount (base name: "memberNotContentCount")', function() {
      // uncomment below and update the code to test the property memberNotContentCount
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property notContentTellers (base name: "notContentTellers")', function() {
      // uncomment below and update the code to test the property notContentTellers
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property notContents (base name: "notContents")', function() {
      // uncomment below and update the code to test the property notContents
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property number (base name: "number")', function() {
      // uncomment below and update the code to test the property number
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property remoteVotingEnd (base name: "remoteVotingEnd")', function() {
      // uncomment below and update the code to test the property remoteVotingEnd
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property remoteVotingStart (base name: "remoteVotingStart")', function() {
      // uncomment below and update the code to test the property remoteVotingStart
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property sponsoringMemberId (base name: "sponsoringMemberId")', function() {
      // uncomment below and update the code to test the property sponsoringMemberId
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property tellerContentCount (base name: "tellerContentCount")', function() {
      // uncomment below and update the code to test the property tellerContentCount
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property tellerNotContentCount (base name: "tellerNotContentCount")', function() {
      // uncomment below and update the code to test the property tellerNotContentCount
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new LordsVotesApi.DivisionViewModel();
      //expect(instance).to.be();
    });

  });

}));
