/**
 * Lords Votes API
 * An API that allows querying of Lords Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberViewModel::OAIMemberViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberViewModel::OAIMemberViewModel() {
    this->initializeModel();
}

OAIMemberViewModel::~OAIMemberViewModel() {}

void OAIMemberViewModel::initializeModel() {

    m_list_as_isSet = false;
    m_list_as_isValid = false;

    m_member_from_isSet = false;
    m_member_from_isValid = false;

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_party_abbreviation_isSet = false;
    m_party_abbreviation_isValid = false;

    m_party_colour_isSet = false;
    m_party_colour_isValid = false;

    m_party_is_main_party_isSet = false;
    m_party_is_main_party_isValid = false;
}

void OAIMemberViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberViewModel::fromJsonObject(QJsonObject json) {

    m_list_as_isValid = ::OpenAPI::fromJsonValue(m_list_as, json[QString("listAs")]);
    m_list_as_isSet = !json[QString("listAs")].isNull() && m_list_as_isValid;

    m_member_from_isValid = ::OpenAPI::fromJsonValue(m_member_from, json[QString("memberFrom")]);
    m_member_from_isSet = !json[QString("memberFrom")].isNull() && m_member_from_isValid;

    m_member_id_isValid = ::OpenAPI::fromJsonValue(m_member_id, json[QString("memberId")]);
    m_member_id_isSet = !json[QString("memberId")].isNull() && m_member_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;

    m_party_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_party_abbreviation, json[QString("partyAbbreviation")]);
    m_party_abbreviation_isSet = !json[QString("partyAbbreviation")].isNull() && m_party_abbreviation_isValid;

    m_party_colour_isValid = ::OpenAPI::fromJsonValue(m_party_colour, json[QString("partyColour")]);
    m_party_colour_isSet = !json[QString("partyColour")].isNull() && m_party_colour_isValid;

    m_party_is_main_party_isValid = ::OpenAPI::fromJsonValue(m_party_is_main_party, json[QString("partyIsMainParty")]);
    m_party_is_main_party_isSet = !json[QString("partyIsMainParty")].isNull() && m_party_is_main_party_isValid;
}

QString OAIMemberViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_list_as_isSet) {
        obj.insert(QString("listAs"), ::OpenAPI::toJsonValue(m_list_as));
    }
    if (m_member_from_isSet) {
        obj.insert(QString("memberFrom"), ::OpenAPI::toJsonValue(m_member_from));
    }
    if (m_member_id_isSet) {
        obj.insert(QString("memberId"), ::OpenAPI::toJsonValue(m_member_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_party_isSet) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_party_abbreviation_isSet) {
        obj.insert(QString("partyAbbreviation"), ::OpenAPI::toJsonValue(m_party_abbreviation));
    }
    if (m_party_colour_isSet) {
        obj.insert(QString("partyColour"), ::OpenAPI::toJsonValue(m_party_colour));
    }
    if (m_party_is_main_party_isSet) {
        obj.insert(QString("partyIsMainParty"), ::OpenAPI::toJsonValue(m_party_is_main_party));
    }
    return obj;
}

QString OAIMemberViewModel::getListAs() const {
    return m_list_as;
}
void OAIMemberViewModel::setListAs(const QString &list_as) {
    m_list_as = list_as;
    m_list_as_isSet = true;
}

bool OAIMemberViewModel::is_list_as_Set() const{
    return m_list_as_isSet;
}

bool OAIMemberViewModel::is_list_as_Valid() const{
    return m_list_as_isValid;
}

QString OAIMemberViewModel::getMemberFrom() const {
    return m_member_from;
}
void OAIMemberViewModel::setMemberFrom(const QString &member_from) {
    m_member_from = member_from;
    m_member_from_isSet = true;
}

bool OAIMemberViewModel::is_member_from_Set() const{
    return m_member_from_isSet;
}

bool OAIMemberViewModel::is_member_from_Valid() const{
    return m_member_from_isValid;
}

qint32 OAIMemberViewModel::getMemberId() const {
    return m_member_id;
}
void OAIMemberViewModel::setMemberId(const qint32 &member_id) {
    m_member_id = member_id;
    m_member_id_isSet = true;
}

bool OAIMemberViewModel::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAIMemberViewModel::is_member_id_Valid() const{
    return m_member_id_isValid;
}

QString OAIMemberViewModel::getName() const {
    return m_name;
}
void OAIMemberViewModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMemberViewModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMemberViewModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMemberViewModel::getParty() const {
    return m_party;
}
void OAIMemberViewModel::setParty(const QString &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAIMemberViewModel::is_party_Set() const{
    return m_party_isSet;
}

bool OAIMemberViewModel::is_party_Valid() const{
    return m_party_isValid;
}

QString OAIMemberViewModel::getPartyAbbreviation() const {
    return m_party_abbreviation;
}
void OAIMemberViewModel::setPartyAbbreviation(const QString &party_abbreviation) {
    m_party_abbreviation = party_abbreviation;
    m_party_abbreviation_isSet = true;
}

bool OAIMemberViewModel::is_party_abbreviation_Set() const{
    return m_party_abbreviation_isSet;
}

bool OAIMemberViewModel::is_party_abbreviation_Valid() const{
    return m_party_abbreviation_isValid;
}

QString OAIMemberViewModel::getPartyColour() const {
    return m_party_colour;
}
void OAIMemberViewModel::setPartyColour(const QString &party_colour) {
    m_party_colour = party_colour;
    m_party_colour_isSet = true;
}

bool OAIMemberViewModel::is_party_colour_Set() const{
    return m_party_colour_isSet;
}

bool OAIMemberViewModel::is_party_colour_Valid() const{
    return m_party_colour_isValid;
}

bool OAIMemberViewModel::isPartyIsMainParty() const {
    return m_party_is_main_party;
}
void OAIMemberViewModel::setPartyIsMainParty(const bool &party_is_main_party) {
    m_party_is_main_party = party_is_main_party;
    m_party_is_main_party_isSet = true;
}

bool OAIMemberViewModel::is_party_is_main_party_Set() const{
    return m_party_is_main_party_isSet;
}

bool OAIMemberViewModel::is_party_is_main_party_Valid() const{
    return m_party_is_main_party_isValid;
}

bool OAIMemberViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_list_as_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_colour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_is_main_party_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
