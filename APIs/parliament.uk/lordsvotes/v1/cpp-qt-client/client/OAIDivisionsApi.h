/**
 * Lords Votes API
 * An API that allows querying of Lords Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDivisionsApi_H
#define OAI_OAIDivisionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIComparators.h"
#include "OAIDivisionGroupByPartyViewModel.h"
#include "OAIDivisionViewModel.h"
#include "OAIMemberVotingRecordViewModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDivisionsApi : public QObject {
    Q_OBJECT

public:
    OAIDivisionsApi(const int timeOut = 0);
    ~OAIDivisionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  division_id qint32 [required]
    */
    virtual void dataDivisionsDivisionIdGet(const qint32 &division_id);

    /**
    * @param[in]  search_term QString [optional]
    * @param[in]  member_id qint32 [optional]
    * @param[in]  include_when_member_was_teller bool [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  division_number qint32 [optional]
    * @param[in]  total_votes_cast_comparator OAIComparators [optional]
    * @param[in]  total_votes_cast_value_to_compare qint32 [optional]
    * @param[in]  majority_comparator OAIComparators [optional]
    * @param[in]  majority_value_to_compare qint32 [optional]
    */
    virtual void dataDivisionsGroupedbypartyGet(const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &member_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_when_member_was_teller = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &division_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIComparators> &total_votes_cast_comparator = ::OpenAPI::OptionalParam<OAIComparators>(), const ::OpenAPI::OptionalParam<qint32> &total_votes_cast_value_to_compare = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIComparators> &majority_comparator = ::OpenAPI::OptionalParam<OAIComparators>(), const ::OpenAPI::OptionalParam<qint32> &majority_value_to_compare = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  member_id qint32 [required]
    * @param[in]  search_term QString [optional]
    * @param[in]  include_when_member_was_teller bool [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  division_number qint32 [optional]
    * @param[in]  total_votes_cast_comparator OAIComparators [optional]
    * @param[in]  total_votes_cast_value_to_compare qint32 [optional]
    * @param[in]  majority_comparator OAIComparators [optional]
    * @param[in]  majority_value_to_compare qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void dataDivisionsMembervotingGet(const qint32 &member_id, const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_when_member_was_teller = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &division_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIComparators> &total_votes_cast_comparator = ::OpenAPI::OptionalParam<OAIComparators>(), const ::OpenAPI::OptionalParam<qint32> &total_votes_cast_value_to_compare = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIComparators> &majority_comparator = ::OpenAPI::OptionalParam<OAIComparators>(), const ::OpenAPI::OptionalParam<qint32> &majority_value_to_compare = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  search_term QString [optional]
    * @param[in]  member_id qint32 [optional]
    * @param[in]  include_when_member_was_teller bool [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  division_number qint32 [optional]
    * @param[in]  total_votes_cast_comparator OAIComparators [optional]
    * @param[in]  total_votes_cast_value_to_compare qint32 [optional]
    * @param[in]  majority_comparator OAIComparators [optional]
    * @param[in]  majority_value_to_compare qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void dataDivisionsSearchGet(const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &member_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_when_member_was_teller = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &division_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIComparators> &total_votes_cast_comparator = ::OpenAPI::OptionalParam<OAIComparators>(), const ::OpenAPI::OptionalParam<qint32> &total_votes_cast_value_to_compare = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIComparators> &majority_comparator = ::OpenAPI::OptionalParam<OAIComparators>(), const ::OpenAPI::OptionalParam<qint32> &majority_value_to_compare = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  search_term QString [optional]
    * @param[in]  member_id qint32 [optional]
    * @param[in]  include_when_member_was_teller bool [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  division_number qint32 [optional]
    * @param[in]  total_votes_cast_comparator OAIComparators [optional]
    * @param[in]  total_votes_cast_value_to_compare qint32 [optional]
    * @param[in]  majority_comparator OAIComparators [optional]
    * @param[in]  majority_value_to_compare qint32 [optional]
    */
    virtual void dataDivisionsSearchTotalResultsGet(const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &member_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_when_member_was_teller = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &division_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIComparators> &total_votes_cast_comparator = ::OpenAPI::OptionalParam<OAIComparators>(), const ::OpenAPI::OptionalParam<qint32> &total_votes_cast_value_to_compare = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIComparators> &majority_comparator = ::OpenAPI::OptionalParam<OAIComparators>(), const ::OpenAPI::OptionalParam<qint32> &majority_value_to_compare = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dataDivisionsDivisionIdGetCallback(OAIHttpRequestWorker *worker);
    void dataDivisionsGroupedbypartyGetCallback(OAIHttpRequestWorker *worker);
    void dataDivisionsMembervotingGetCallback(OAIHttpRequestWorker *worker);
    void dataDivisionsSearchGetCallback(OAIHttpRequestWorker *worker);
    void dataDivisionsSearchTotalResultsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dataDivisionsDivisionIdGetSignal(OAIDivisionViewModel summary);
    void dataDivisionsGroupedbypartyGetSignal(OAIDivisionGroupByPartyViewModel summary);
    void dataDivisionsMembervotingGetSignal(OAIMemberVotingRecordViewModel summary);
    void dataDivisionsSearchGetSignal(QList<OAIDivisionViewModel> summary);
    void dataDivisionsSearchTotalResultsGetSignal(qint32 summary);


    void dataDivisionsDivisionIdGetSignalFull(OAIHttpRequestWorker *worker, OAIDivisionViewModel summary);
    void dataDivisionsGroupedbypartyGetSignalFull(OAIHttpRequestWorker *worker, OAIDivisionGroupByPartyViewModel summary);
    void dataDivisionsMembervotingGetSignalFull(OAIHttpRequestWorker *worker, OAIMemberVotingRecordViewModel summary);
    void dataDivisionsSearchGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIDivisionViewModel> summary);
    void dataDivisionsSearchTotalResultsGetSignalFull(OAIHttpRequestWorker *worker, qint32 summary);

    Q_DECL_DEPRECATED_X("Use dataDivisionsDivisionIdGetSignalError() instead")
    void dataDivisionsDivisionIdGetSignalE(OAIDivisionViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataDivisionsDivisionIdGetSignalError(OAIDivisionViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataDivisionsGroupedbypartyGetSignalError() instead")
    void dataDivisionsGroupedbypartyGetSignalE(OAIDivisionGroupByPartyViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataDivisionsGroupedbypartyGetSignalError(OAIDivisionGroupByPartyViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataDivisionsMembervotingGetSignalError() instead")
    void dataDivisionsMembervotingGetSignalE(OAIMemberVotingRecordViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataDivisionsMembervotingGetSignalError(OAIMemberVotingRecordViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataDivisionsSearchGetSignalError() instead")
    void dataDivisionsSearchGetSignalE(QList<OAIDivisionViewModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataDivisionsSearchGetSignalError(QList<OAIDivisionViewModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataDivisionsSearchTotalResultsGetSignalError() instead")
    void dataDivisionsSearchTotalResultsGetSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataDivisionsSearchTotalResultsGetSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dataDivisionsDivisionIdGetSignalErrorFull() instead")
    void dataDivisionsDivisionIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataDivisionsDivisionIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataDivisionsGroupedbypartyGetSignalErrorFull() instead")
    void dataDivisionsGroupedbypartyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataDivisionsGroupedbypartyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataDivisionsMembervotingGetSignalErrorFull() instead")
    void dataDivisionsMembervotingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataDivisionsMembervotingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataDivisionsSearchGetSignalErrorFull() instead")
    void dataDivisionsSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataDivisionsSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataDivisionsSearchTotalResultsGetSignalErrorFull() instead")
    void dataDivisionsSearchTotalResultsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataDivisionsSearchTotalResultsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
