/**
 * Lords Votes API
 * An API that allows querying of Lords Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberVotingRecordViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberVotingRecordViewModel::OAIMemberVotingRecordViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberVotingRecordViewModel::OAIMemberVotingRecordViewModel() {
    this->initializeModel();
}

OAIMemberVotingRecordViewModel::~OAIMemberVotingRecordViewModel() {}

void OAIMemberVotingRecordViewModel::initializeModel() {

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_member_was_content_isSet = false;
    m_member_was_content_isValid = false;

    m_member_was_teller_isSet = false;
    m_member_was_teller_isValid = false;

    m_published_division_isSet = false;
    m_published_division_isValid = false;
}

void OAIMemberVotingRecordViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberVotingRecordViewModel::fromJsonObject(QJsonObject json) {

    m_member_id_isValid = ::OpenAPI::fromJsonValue(m_member_id, json[QString("memberId")]);
    m_member_id_isSet = !json[QString("memberId")].isNull() && m_member_id_isValid;

    m_member_was_content_isValid = ::OpenAPI::fromJsonValue(m_member_was_content, json[QString("memberWasContent")]);
    m_member_was_content_isSet = !json[QString("memberWasContent")].isNull() && m_member_was_content_isValid;

    m_member_was_teller_isValid = ::OpenAPI::fromJsonValue(m_member_was_teller, json[QString("memberWasTeller")]);
    m_member_was_teller_isSet = !json[QString("memberWasTeller")].isNull() && m_member_was_teller_isValid;

    m_published_division_isValid = ::OpenAPI::fromJsonValue(m_published_division, json[QString("publishedDivision")]);
    m_published_division_isSet = !json[QString("publishedDivision")].isNull() && m_published_division_isValid;
}

QString OAIMemberVotingRecordViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberVotingRecordViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_member_id_isSet) {
        obj.insert(QString("memberId"), ::OpenAPI::toJsonValue(m_member_id));
    }
    if (m_member_was_content_isSet) {
        obj.insert(QString("memberWasContent"), ::OpenAPI::toJsonValue(m_member_was_content));
    }
    if (m_member_was_teller_isSet) {
        obj.insert(QString("memberWasTeller"), ::OpenAPI::toJsonValue(m_member_was_teller));
    }
    if (m_published_division.isSet()) {
        obj.insert(QString("publishedDivision"), ::OpenAPI::toJsonValue(m_published_division));
    }
    return obj;
}

qint32 OAIMemberVotingRecordViewModel::getMemberId() const {
    return m_member_id;
}
void OAIMemberVotingRecordViewModel::setMemberId(const qint32 &member_id) {
    m_member_id = member_id;
    m_member_id_isSet = true;
}

bool OAIMemberVotingRecordViewModel::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAIMemberVotingRecordViewModel::is_member_id_Valid() const{
    return m_member_id_isValid;
}

bool OAIMemberVotingRecordViewModel::isMemberWasContent() const {
    return m_member_was_content;
}
void OAIMemberVotingRecordViewModel::setMemberWasContent(const bool &member_was_content) {
    m_member_was_content = member_was_content;
    m_member_was_content_isSet = true;
}

bool OAIMemberVotingRecordViewModel::is_member_was_content_Set() const{
    return m_member_was_content_isSet;
}

bool OAIMemberVotingRecordViewModel::is_member_was_content_Valid() const{
    return m_member_was_content_isValid;
}

bool OAIMemberVotingRecordViewModel::isMemberWasTeller() const {
    return m_member_was_teller;
}
void OAIMemberVotingRecordViewModel::setMemberWasTeller(const bool &member_was_teller) {
    m_member_was_teller = member_was_teller;
    m_member_was_teller_isSet = true;
}

bool OAIMemberVotingRecordViewModel::is_member_was_teller_Set() const{
    return m_member_was_teller_isSet;
}

bool OAIMemberVotingRecordViewModel::is_member_was_teller_Valid() const{
    return m_member_was_teller_isValid;
}

OAIDivisionViewModel OAIMemberVotingRecordViewModel::getPublishedDivision() const {
    return m_published_division;
}
void OAIMemberVotingRecordViewModel::setPublishedDivision(const OAIDivisionViewModel &published_division) {
    m_published_division = published_division;
    m_published_division_isSet = true;
}

bool OAIMemberVotingRecordViewModel::is_published_division_Set() const{
    return m_published_division_isSet;
}

bool OAIMemberVotingRecordViewModel::is_published_division_Valid() const{
    return m_published_division_isValid;
}

bool OAIMemberVotingRecordViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_was_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_was_teller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_division.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberVotingRecordViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
