/**
 * Lords Votes API
 * An API that allows querying of Lords Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComparators.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComparators::OAIComparators(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComparators::OAIComparators() {
    this->initializeModel();
}

OAIComparators::~OAIComparators() {}

void OAIComparators::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIComparators::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIComparators::fromJson(QString jsonString) {
    
    if ( jsonString.compare("LessThan", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComparators::LESSTHAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LessThanOrEqualTo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComparators::LESSTHANOREQUALTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EqualTo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComparators::EQUALTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GreaterThanOrEqualTo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComparators::GREATERTHANOREQUALTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GreaterThan", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComparators::GREATERTHAN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIComparators::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIComparators::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIComparators::LESSTHAN:
            val = "LessThan";
            break;
        case eOAIComparators::LESSTHANOREQUALTO:
            val = "LessThanOrEqualTo";
            break;
        case eOAIComparators::EQUALTO:
            val = "EqualTo";
            break;
        case eOAIComparators::GREATERTHANOREQUALTO:
            val = "GreaterThanOrEqualTo";
            break;
        case eOAIComparators::GREATERTHAN:
            val = "GreaterThan";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIComparators::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIComparators::eOAIComparators OAIComparators::getValue() const {
    return m_value;
}

void OAIComparators::setValue(const OAIComparators::eOAIComparators& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIComparators::isSet() const {
    
    return m_value_isSet;
}

bool OAIComparators::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
