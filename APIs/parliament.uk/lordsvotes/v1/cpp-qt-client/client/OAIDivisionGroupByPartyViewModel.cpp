/**
 * Lords Votes API
 * An API that allows querying of Lords Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDivisionGroupByPartyViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDivisionGroupByPartyViewModel::OAIDivisionGroupByPartyViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDivisionGroupByPartyViewModel::OAIDivisionGroupByPartyViewModel() {
    this->initializeModel();
}

OAIDivisionGroupByPartyViewModel::~OAIDivisionGroupByPartyViewModel() {}

void OAIDivisionGroupByPartyViewModel::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_content_count_isSet = false;
    m_content_count_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_division_id_isSet = false;
    m_division_id_isValid = false;

    m_not_content_isSet = false;
    m_not_content_isValid = false;

    m_not_content_count_isSet = false;
    m_not_content_count_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIDivisionGroupByPartyViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDivisionGroupByPartyViewModel::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_content_count_isValid = ::OpenAPI::fromJsonValue(m_content_count, json[QString("contentCount")]);
    m_content_count_isSet = !json[QString("contentCount")].isNull() && m_content_count_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_division_id_isValid = ::OpenAPI::fromJsonValue(m_division_id, json[QString("divisionId")]);
    m_division_id_isSet = !json[QString("divisionId")].isNull() && m_division_id_isValid;

    m_not_content_isValid = ::OpenAPI::fromJsonValue(m_not_content, json[QString("notContent")]);
    m_not_content_isSet = !json[QString("notContent")].isNull() && m_not_content_isValid;

    m_not_content_count_isValid = ::OpenAPI::fromJsonValue(m_not_content_count, json[QString("notContentCount")]);
    m_not_content_count_isSet = !json[QString("notContentCount")].isNull() && m_not_content_count_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIDivisionGroupByPartyViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDivisionGroupByPartyViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_content.size() > 0) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_content_count_isSet) {
        obj.insert(QString("contentCount"), ::OpenAPI::toJsonValue(m_content_count));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_division_id_isSet) {
        obj.insert(QString("divisionId"), ::OpenAPI::toJsonValue(m_division_id));
    }
    if (m_not_content.size() > 0) {
        obj.insert(QString("notContent"), ::OpenAPI::toJsonValue(m_not_content));
    }
    if (m_not_content_count_isSet) {
        obj.insert(QString("notContentCount"), ::OpenAPI::toJsonValue(m_not_content_count));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAIPartyVoteResultViewModel> OAIDivisionGroupByPartyViewModel::getContent() const {
    return m_content;
}
void OAIDivisionGroupByPartyViewModel::setContent(const QList<OAIPartyVoteResultViewModel> &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIDivisionGroupByPartyViewModel::is_content_Set() const{
    return m_content_isSet;
}

bool OAIDivisionGroupByPartyViewModel::is_content_Valid() const{
    return m_content_isValid;
}

qint32 OAIDivisionGroupByPartyViewModel::getContentCount() const {
    return m_content_count;
}
void OAIDivisionGroupByPartyViewModel::setContentCount(const qint32 &content_count) {
    m_content_count = content_count;
    m_content_count_isSet = true;
}

bool OAIDivisionGroupByPartyViewModel::is_content_count_Set() const{
    return m_content_count_isSet;
}

bool OAIDivisionGroupByPartyViewModel::is_content_count_Valid() const{
    return m_content_count_isValid;
}

QDateTime OAIDivisionGroupByPartyViewModel::getDate() const {
    return m_date;
}
void OAIDivisionGroupByPartyViewModel::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIDivisionGroupByPartyViewModel::is_date_Set() const{
    return m_date_isSet;
}

bool OAIDivisionGroupByPartyViewModel::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAIDivisionGroupByPartyViewModel::getDivisionId() const {
    return m_division_id;
}
void OAIDivisionGroupByPartyViewModel::setDivisionId(const qint32 &division_id) {
    m_division_id = division_id;
    m_division_id_isSet = true;
}

bool OAIDivisionGroupByPartyViewModel::is_division_id_Set() const{
    return m_division_id_isSet;
}

bool OAIDivisionGroupByPartyViewModel::is_division_id_Valid() const{
    return m_division_id_isValid;
}

QList<OAIPartyVoteResultViewModel> OAIDivisionGroupByPartyViewModel::getNotContent() const {
    return m_not_content;
}
void OAIDivisionGroupByPartyViewModel::setNotContent(const QList<OAIPartyVoteResultViewModel> &not_content) {
    m_not_content = not_content;
    m_not_content_isSet = true;
}

bool OAIDivisionGroupByPartyViewModel::is_not_content_Set() const{
    return m_not_content_isSet;
}

bool OAIDivisionGroupByPartyViewModel::is_not_content_Valid() const{
    return m_not_content_isValid;
}

qint32 OAIDivisionGroupByPartyViewModel::getNotContentCount() const {
    return m_not_content_count;
}
void OAIDivisionGroupByPartyViewModel::setNotContentCount(const qint32 &not_content_count) {
    m_not_content_count = not_content_count;
    m_not_content_count_isSet = true;
}

bool OAIDivisionGroupByPartyViewModel::is_not_content_count_Set() const{
    return m_not_content_count_isSet;
}

bool OAIDivisionGroupByPartyViewModel::is_not_content_count_Valid() const{
    return m_not_content_count_isValid;
}

qint32 OAIDivisionGroupByPartyViewModel::getNumber() const {
    return m_number;
}
void OAIDivisionGroupByPartyViewModel::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIDivisionGroupByPartyViewModel::is_number_Set() const{
    return m_number_isSet;
}

bool OAIDivisionGroupByPartyViewModel::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIDivisionGroupByPartyViewModel::getTitle() const {
    return m_title;
}
void OAIDivisionGroupByPartyViewModel::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDivisionGroupByPartyViewModel::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDivisionGroupByPartyViewModel::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIDivisionGroupByPartyViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_content.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_content_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDivisionGroupByPartyViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
