/**
 * Lords Votes API
 * An API that allows querying of Lords Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDivisionViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDivisionViewModel::OAIDivisionViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDivisionViewModel::OAIDivisionViewModel() {
    this->initializeModel();
}

OAIDivisionViewModel::~OAIDivisionViewModel() {}

void OAIDivisionViewModel::initializeModel() {

    m_amendment_motion_notes_isSet = false;
    m_amendment_motion_notes_isValid = false;

    m_authoritative_content_count_isSet = false;
    m_authoritative_content_count_isValid = false;

    m_authoritative_not_content_count_isSet = false;
    m_authoritative_not_content_count_isValid = false;

    m_content_tellers_isSet = false;
    m_content_tellers_isValid = false;

    m_contents_isSet = false;
    m_contents_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_division_had_tellers_isSet = false;
    m_division_had_tellers_isValid = false;

    m_division_id_isSet = false;
    m_division_id_isValid = false;

    m_division_was_exclusively_remote_isSet = false;
    m_division_was_exclusively_remote_isValid = false;

    m_is_government_content_isSet = false;
    m_is_government_content_isValid = false;

    m_is_government_win_isSet = false;
    m_is_government_win_isValid = false;

    m_is_house_isSet = false;
    m_is_house_isValid = false;

    m_is_whipped_isSet = false;
    m_is_whipped_isValid = false;

    m_member_content_count_isSet = false;
    m_member_content_count_isValid = false;

    m_member_not_content_count_isSet = false;
    m_member_not_content_count_isValid = false;

    m_not_content_tellers_isSet = false;
    m_not_content_tellers_isValid = false;

    m_not_contents_isSet = false;
    m_not_contents_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_remote_voting_end_isSet = false;
    m_remote_voting_end_isValid = false;

    m_remote_voting_start_isSet = false;
    m_remote_voting_start_isValid = false;

    m_sponsoring_member_id_isSet = false;
    m_sponsoring_member_id_isValid = false;

    m_teller_content_count_isSet = false;
    m_teller_content_count_isValid = false;

    m_teller_not_content_count_isSet = false;
    m_teller_not_content_count_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIDivisionViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDivisionViewModel::fromJsonObject(QJsonObject json) {

    m_amendment_motion_notes_isValid = ::OpenAPI::fromJsonValue(m_amendment_motion_notes, json[QString("amendmentMotionNotes")]);
    m_amendment_motion_notes_isSet = !json[QString("amendmentMotionNotes")].isNull() && m_amendment_motion_notes_isValid;

    m_authoritative_content_count_isValid = ::OpenAPI::fromJsonValue(m_authoritative_content_count, json[QString("authoritativeContentCount")]);
    m_authoritative_content_count_isSet = !json[QString("authoritativeContentCount")].isNull() && m_authoritative_content_count_isValid;

    m_authoritative_not_content_count_isValid = ::OpenAPI::fromJsonValue(m_authoritative_not_content_count, json[QString("authoritativeNotContentCount")]);
    m_authoritative_not_content_count_isSet = !json[QString("authoritativeNotContentCount")].isNull() && m_authoritative_not_content_count_isValid;

    m_content_tellers_isValid = ::OpenAPI::fromJsonValue(m_content_tellers, json[QString("contentTellers")]);
    m_content_tellers_isSet = !json[QString("contentTellers")].isNull() && m_content_tellers_isValid;

    m_contents_isValid = ::OpenAPI::fromJsonValue(m_contents, json[QString("contents")]);
    m_contents_isSet = !json[QString("contents")].isNull() && m_contents_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_division_had_tellers_isValid = ::OpenAPI::fromJsonValue(m_division_had_tellers, json[QString("divisionHadTellers")]);
    m_division_had_tellers_isSet = !json[QString("divisionHadTellers")].isNull() && m_division_had_tellers_isValid;

    m_division_id_isValid = ::OpenAPI::fromJsonValue(m_division_id, json[QString("divisionId")]);
    m_division_id_isSet = !json[QString("divisionId")].isNull() && m_division_id_isValid;

    m_division_was_exclusively_remote_isValid = ::OpenAPI::fromJsonValue(m_division_was_exclusively_remote, json[QString("divisionWasExclusivelyRemote")]);
    m_division_was_exclusively_remote_isSet = !json[QString("divisionWasExclusivelyRemote")].isNull() && m_division_was_exclusively_remote_isValid;

    m_is_government_content_isValid = ::OpenAPI::fromJsonValue(m_is_government_content, json[QString("isGovernmentContent")]);
    m_is_government_content_isSet = !json[QString("isGovernmentContent")].isNull() && m_is_government_content_isValid;

    m_is_government_win_isValid = ::OpenAPI::fromJsonValue(m_is_government_win, json[QString("isGovernmentWin")]);
    m_is_government_win_isSet = !json[QString("isGovernmentWin")].isNull() && m_is_government_win_isValid;

    m_is_house_isValid = ::OpenAPI::fromJsonValue(m_is_house, json[QString("isHouse")]);
    m_is_house_isSet = !json[QString("isHouse")].isNull() && m_is_house_isValid;

    m_is_whipped_isValid = ::OpenAPI::fromJsonValue(m_is_whipped, json[QString("isWhipped")]);
    m_is_whipped_isSet = !json[QString("isWhipped")].isNull() && m_is_whipped_isValid;

    m_member_content_count_isValid = ::OpenAPI::fromJsonValue(m_member_content_count, json[QString("memberContentCount")]);
    m_member_content_count_isSet = !json[QString("memberContentCount")].isNull() && m_member_content_count_isValid;

    m_member_not_content_count_isValid = ::OpenAPI::fromJsonValue(m_member_not_content_count, json[QString("memberNotContentCount")]);
    m_member_not_content_count_isSet = !json[QString("memberNotContentCount")].isNull() && m_member_not_content_count_isValid;

    m_not_content_tellers_isValid = ::OpenAPI::fromJsonValue(m_not_content_tellers, json[QString("notContentTellers")]);
    m_not_content_tellers_isSet = !json[QString("notContentTellers")].isNull() && m_not_content_tellers_isValid;

    m_not_contents_isValid = ::OpenAPI::fromJsonValue(m_not_contents, json[QString("notContents")]);
    m_not_contents_isSet = !json[QString("notContents")].isNull() && m_not_contents_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_remote_voting_end_isValid = ::OpenAPI::fromJsonValue(m_remote_voting_end, json[QString("remoteVotingEnd")]);
    m_remote_voting_end_isSet = !json[QString("remoteVotingEnd")].isNull() && m_remote_voting_end_isValid;

    m_remote_voting_start_isValid = ::OpenAPI::fromJsonValue(m_remote_voting_start, json[QString("remoteVotingStart")]);
    m_remote_voting_start_isSet = !json[QString("remoteVotingStart")].isNull() && m_remote_voting_start_isValid;

    m_sponsoring_member_id_isValid = ::OpenAPI::fromJsonValue(m_sponsoring_member_id, json[QString("sponsoringMemberId")]);
    m_sponsoring_member_id_isSet = !json[QString("sponsoringMemberId")].isNull() && m_sponsoring_member_id_isValid;

    m_teller_content_count_isValid = ::OpenAPI::fromJsonValue(m_teller_content_count, json[QString("tellerContentCount")]);
    m_teller_content_count_isSet = !json[QString("tellerContentCount")].isNull() && m_teller_content_count_isValid;

    m_teller_not_content_count_isValid = ::OpenAPI::fromJsonValue(m_teller_not_content_count, json[QString("tellerNotContentCount")]);
    m_teller_not_content_count_isSet = !json[QString("tellerNotContentCount")].isNull() && m_teller_not_content_count_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIDivisionViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDivisionViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_amendment_motion_notes_isSet) {
        obj.insert(QString("amendmentMotionNotes"), ::OpenAPI::toJsonValue(m_amendment_motion_notes));
    }
    if (m_authoritative_content_count_isSet) {
        obj.insert(QString("authoritativeContentCount"), ::OpenAPI::toJsonValue(m_authoritative_content_count));
    }
    if (m_authoritative_not_content_count_isSet) {
        obj.insert(QString("authoritativeNotContentCount"), ::OpenAPI::toJsonValue(m_authoritative_not_content_count));
    }
    if (m_content_tellers.size() > 0) {
        obj.insert(QString("contentTellers"), ::OpenAPI::toJsonValue(m_content_tellers));
    }
    if (m_contents.size() > 0) {
        obj.insert(QString("contents"), ::OpenAPI::toJsonValue(m_contents));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_division_had_tellers_isSet) {
        obj.insert(QString("divisionHadTellers"), ::OpenAPI::toJsonValue(m_division_had_tellers));
    }
    if (m_division_id_isSet) {
        obj.insert(QString("divisionId"), ::OpenAPI::toJsonValue(m_division_id));
    }
    if (m_division_was_exclusively_remote_isSet) {
        obj.insert(QString("divisionWasExclusivelyRemote"), ::OpenAPI::toJsonValue(m_division_was_exclusively_remote));
    }
    if (m_is_government_content_isSet) {
        obj.insert(QString("isGovernmentContent"), ::OpenAPI::toJsonValue(m_is_government_content));
    }
    if (m_is_government_win_isSet) {
        obj.insert(QString("isGovernmentWin"), ::OpenAPI::toJsonValue(m_is_government_win));
    }
    if (m_is_house_isSet) {
        obj.insert(QString("isHouse"), ::OpenAPI::toJsonValue(m_is_house));
    }
    if (m_is_whipped_isSet) {
        obj.insert(QString("isWhipped"), ::OpenAPI::toJsonValue(m_is_whipped));
    }
    if (m_member_content_count_isSet) {
        obj.insert(QString("memberContentCount"), ::OpenAPI::toJsonValue(m_member_content_count));
    }
    if (m_member_not_content_count_isSet) {
        obj.insert(QString("memberNotContentCount"), ::OpenAPI::toJsonValue(m_member_not_content_count));
    }
    if (m_not_content_tellers.size() > 0) {
        obj.insert(QString("notContentTellers"), ::OpenAPI::toJsonValue(m_not_content_tellers));
    }
    if (m_not_contents.size() > 0) {
        obj.insert(QString("notContents"), ::OpenAPI::toJsonValue(m_not_contents));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_remote_voting_end_isSet) {
        obj.insert(QString("remoteVotingEnd"), ::OpenAPI::toJsonValue(m_remote_voting_end));
    }
    if (m_remote_voting_start_isSet) {
        obj.insert(QString("remoteVotingStart"), ::OpenAPI::toJsonValue(m_remote_voting_start));
    }
    if (m_sponsoring_member_id_isSet) {
        obj.insert(QString("sponsoringMemberId"), ::OpenAPI::toJsonValue(m_sponsoring_member_id));
    }
    if (m_teller_content_count_isSet) {
        obj.insert(QString("tellerContentCount"), ::OpenAPI::toJsonValue(m_teller_content_count));
    }
    if (m_teller_not_content_count_isSet) {
        obj.insert(QString("tellerNotContentCount"), ::OpenAPI::toJsonValue(m_teller_not_content_count));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIDivisionViewModel::getAmendmentMotionNotes() const {
    return m_amendment_motion_notes;
}
void OAIDivisionViewModel::setAmendmentMotionNotes(const QString &amendment_motion_notes) {
    m_amendment_motion_notes = amendment_motion_notes;
    m_amendment_motion_notes_isSet = true;
}

bool OAIDivisionViewModel::is_amendment_motion_notes_Set() const{
    return m_amendment_motion_notes_isSet;
}

bool OAIDivisionViewModel::is_amendment_motion_notes_Valid() const{
    return m_amendment_motion_notes_isValid;
}

qint32 OAIDivisionViewModel::getAuthoritativeContentCount() const {
    return m_authoritative_content_count;
}
void OAIDivisionViewModel::setAuthoritativeContentCount(const qint32 &authoritative_content_count) {
    m_authoritative_content_count = authoritative_content_count;
    m_authoritative_content_count_isSet = true;
}

bool OAIDivisionViewModel::is_authoritative_content_count_Set() const{
    return m_authoritative_content_count_isSet;
}

bool OAIDivisionViewModel::is_authoritative_content_count_Valid() const{
    return m_authoritative_content_count_isValid;
}

qint32 OAIDivisionViewModel::getAuthoritativeNotContentCount() const {
    return m_authoritative_not_content_count;
}
void OAIDivisionViewModel::setAuthoritativeNotContentCount(const qint32 &authoritative_not_content_count) {
    m_authoritative_not_content_count = authoritative_not_content_count;
    m_authoritative_not_content_count_isSet = true;
}

bool OAIDivisionViewModel::is_authoritative_not_content_count_Set() const{
    return m_authoritative_not_content_count_isSet;
}

bool OAIDivisionViewModel::is_authoritative_not_content_count_Valid() const{
    return m_authoritative_not_content_count_isValid;
}

QList<OAIMemberViewModel> OAIDivisionViewModel::getContentTellers() const {
    return m_content_tellers;
}
void OAIDivisionViewModel::setContentTellers(const QList<OAIMemberViewModel> &content_tellers) {
    m_content_tellers = content_tellers;
    m_content_tellers_isSet = true;
}

bool OAIDivisionViewModel::is_content_tellers_Set() const{
    return m_content_tellers_isSet;
}

bool OAIDivisionViewModel::is_content_tellers_Valid() const{
    return m_content_tellers_isValid;
}

QList<OAIMemberViewModel> OAIDivisionViewModel::getContents() const {
    return m_contents;
}
void OAIDivisionViewModel::setContents(const QList<OAIMemberViewModel> &contents) {
    m_contents = contents;
    m_contents_isSet = true;
}

bool OAIDivisionViewModel::is_contents_Set() const{
    return m_contents_isSet;
}

bool OAIDivisionViewModel::is_contents_Valid() const{
    return m_contents_isValid;
}

QDateTime OAIDivisionViewModel::getDate() const {
    return m_date;
}
void OAIDivisionViewModel::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIDivisionViewModel::is_date_Set() const{
    return m_date_isSet;
}

bool OAIDivisionViewModel::is_date_Valid() const{
    return m_date_isValid;
}

bool OAIDivisionViewModel::isDivisionHadTellers() const {
    return m_division_had_tellers;
}
void OAIDivisionViewModel::setDivisionHadTellers(const bool &division_had_tellers) {
    m_division_had_tellers = division_had_tellers;
    m_division_had_tellers_isSet = true;
}

bool OAIDivisionViewModel::is_division_had_tellers_Set() const{
    return m_division_had_tellers_isSet;
}

bool OAIDivisionViewModel::is_division_had_tellers_Valid() const{
    return m_division_had_tellers_isValid;
}

qint32 OAIDivisionViewModel::getDivisionId() const {
    return m_division_id;
}
void OAIDivisionViewModel::setDivisionId(const qint32 &division_id) {
    m_division_id = division_id;
    m_division_id_isSet = true;
}

bool OAIDivisionViewModel::is_division_id_Set() const{
    return m_division_id_isSet;
}

bool OAIDivisionViewModel::is_division_id_Valid() const{
    return m_division_id_isValid;
}

bool OAIDivisionViewModel::isDivisionWasExclusivelyRemote() const {
    return m_division_was_exclusively_remote;
}
void OAIDivisionViewModel::setDivisionWasExclusivelyRemote(const bool &division_was_exclusively_remote) {
    m_division_was_exclusively_remote = division_was_exclusively_remote;
    m_division_was_exclusively_remote_isSet = true;
}

bool OAIDivisionViewModel::is_division_was_exclusively_remote_Set() const{
    return m_division_was_exclusively_remote_isSet;
}

bool OAIDivisionViewModel::is_division_was_exclusively_remote_Valid() const{
    return m_division_was_exclusively_remote_isValid;
}

bool OAIDivisionViewModel::isIsGovernmentContent() const {
    return m_is_government_content;
}
void OAIDivisionViewModel::setIsGovernmentContent(const bool &is_government_content) {
    m_is_government_content = is_government_content;
    m_is_government_content_isSet = true;
}

bool OAIDivisionViewModel::is_is_government_content_Set() const{
    return m_is_government_content_isSet;
}

bool OAIDivisionViewModel::is_is_government_content_Valid() const{
    return m_is_government_content_isValid;
}

bool OAIDivisionViewModel::isIsGovernmentWin() const {
    return m_is_government_win;
}
void OAIDivisionViewModel::setIsGovernmentWin(const bool &is_government_win) {
    m_is_government_win = is_government_win;
    m_is_government_win_isSet = true;
}

bool OAIDivisionViewModel::is_is_government_win_Set() const{
    return m_is_government_win_isSet;
}

bool OAIDivisionViewModel::is_is_government_win_Valid() const{
    return m_is_government_win_isValid;
}

bool OAIDivisionViewModel::isIsHouse() const {
    return m_is_house;
}
void OAIDivisionViewModel::setIsHouse(const bool &is_house) {
    m_is_house = is_house;
    m_is_house_isSet = true;
}

bool OAIDivisionViewModel::is_is_house_Set() const{
    return m_is_house_isSet;
}

bool OAIDivisionViewModel::is_is_house_Valid() const{
    return m_is_house_isValid;
}

bool OAIDivisionViewModel::isIsWhipped() const {
    return m_is_whipped;
}
void OAIDivisionViewModel::setIsWhipped(const bool &is_whipped) {
    m_is_whipped = is_whipped;
    m_is_whipped_isSet = true;
}

bool OAIDivisionViewModel::is_is_whipped_Set() const{
    return m_is_whipped_isSet;
}

bool OAIDivisionViewModel::is_is_whipped_Valid() const{
    return m_is_whipped_isValid;
}

qint32 OAIDivisionViewModel::getMemberContentCount() const {
    return m_member_content_count;
}
void OAIDivisionViewModel::setMemberContentCount(const qint32 &member_content_count) {
    m_member_content_count = member_content_count;
    m_member_content_count_isSet = true;
}

bool OAIDivisionViewModel::is_member_content_count_Set() const{
    return m_member_content_count_isSet;
}

bool OAIDivisionViewModel::is_member_content_count_Valid() const{
    return m_member_content_count_isValid;
}

qint32 OAIDivisionViewModel::getMemberNotContentCount() const {
    return m_member_not_content_count;
}
void OAIDivisionViewModel::setMemberNotContentCount(const qint32 &member_not_content_count) {
    m_member_not_content_count = member_not_content_count;
    m_member_not_content_count_isSet = true;
}

bool OAIDivisionViewModel::is_member_not_content_count_Set() const{
    return m_member_not_content_count_isSet;
}

bool OAIDivisionViewModel::is_member_not_content_count_Valid() const{
    return m_member_not_content_count_isValid;
}

QList<OAIMemberViewModel> OAIDivisionViewModel::getNotContentTellers() const {
    return m_not_content_tellers;
}
void OAIDivisionViewModel::setNotContentTellers(const QList<OAIMemberViewModel> &not_content_tellers) {
    m_not_content_tellers = not_content_tellers;
    m_not_content_tellers_isSet = true;
}

bool OAIDivisionViewModel::is_not_content_tellers_Set() const{
    return m_not_content_tellers_isSet;
}

bool OAIDivisionViewModel::is_not_content_tellers_Valid() const{
    return m_not_content_tellers_isValid;
}

QList<OAIMemberViewModel> OAIDivisionViewModel::getNotContents() const {
    return m_not_contents;
}
void OAIDivisionViewModel::setNotContents(const QList<OAIMemberViewModel> &not_contents) {
    m_not_contents = not_contents;
    m_not_contents_isSet = true;
}

bool OAIDivisionViewModel::is_not_contents_Set() const{
    return m_not_contents_isSet;
}

bool OAIDivisionViewModel::is_not_contents_Valid() const{
    return m_not_contents_isValid;
}

QString OAIDivisionViewModel::getNotes() const {
    return m_notes;
}
void OAIDivisionViewModel::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIDivisionViewModel::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIDivisionViewModel::is_notes_Valid() const{
    return m_notes_isValid;
}

qint32 OAIDivisionViewModel::getNumber() const {
    return m_number;
}
void OAIDivisionViewModel::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIDivisionViewModel::is_number_Set() const{
    return m_number_isSet;
}

bool OAIDivisionViewModel::is_number_Valid() const{
    return m_number_isValid;
}

QDateTime OAIDivisionViewModel::getRemoteVotingEnd() const {
    return m_remote_voting_end;
}
void OAIDivisionViewModel::setRemoteVotingEnd(const QDateTime &remote_voting_end) {
    m_remote_voting_end = remote_voting_end;
    m_remote_voting_end_isSet = true;
}

bool OAIDivisionViewModel::is_remote_voting_end_Set() const{
    return m_remote_voting_end_isSet;
}

bool OAIDivisionViewModel::is_remote_voting_end_Valid() const{
    return m_remote_voting_end_isValid;
}

QDateTime OAIDivisionViewModel::getRemoteVotingStart() const {
    return m_remote_voting_start;
}
void OAIDivisionViewModel::setRemoteVotingStart(const QDateTime &remote_voting_start) {
    m_remote_voting_start = remote_voting_start;
    m_remote_voting_start_isSet = true;
}

bool OAIDivisionViewModel::is_remote_voting_start_Set() const{
    return m_remote_voting_start_isSet;
}

bool OAIDivisionViewModel::is_remote_voting_start_Valid() const{
    return m_remote_voting_start_isValid;
}

qint32 OAIDivisionViewModel::getSponsoringMemberId() const {
    return m_sponsoring_member_id;
}
void OAIDivisionViewModel::setSponsoringMemberId(const qint32 &sponsoring_member_id) {
    m_sponsoring_member_id = sponsoring_member_id;
    m_sponsoring_member_id_isSet = true;
}

bool OAIDivisionViewModel::is_sponsoring_member_id_Set() const{
    return m_sponsoring_member_id_isSet;
}

bool OAIDivisionViewModel::is_sponsoring_member_id_Valid() const{
    return m_sponsoring_member_id_isValid;
}

qint32 OAIDivisionViewModel::getTellerContentCount() const {
    return m_teller_content_count;
}
void OAIDivisionViewModel::setTellerContentCount(const qint32 &teller_content_count) {
    m_teller_content_count = teller_content_count;
    m_teller_content_count_isSet = true;
}

bool OAIDivisionViewModel::is_teller_content_count_Set() const{
    return m_teller_content_count_isSet;
}

bool OAIDivisionViewModel::is_teller_content_count_Valid() const{
    return m_teller_content_count_isValid;
}

qint32 OAIDivisionViewModel::getTellerNotContentCount() const {
    return m_teller_not_content_count;
}
void OAIDivisionViewModel::setTellerNotContentCount(const qint32 &teller_not_content_count) {
    m_teller_not_content_count = teller_not_content_count;
    m_teller_not_content_count_isSet = true;
}

bool OAIDivisionViewModel::is_teller_not_content_count_Set() const{
    return m_teller_not_content_count_isSet;
}

bool OAIDivisionViewModel::is_teller_not_content_count_Valid() const{
    return m_teller_not_content_count_isValid;
}

QString OAIDivisionViewModel::getTitle() const {
    return m_title;
}
void OAIDivisionViewModel::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDivisionViewModel::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDivisionViewModel::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIDivisionViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amendment_motion_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authoritative_content_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authoritative_not_content_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_tellers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_had_tellers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_was_exclusively_remote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_government_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_government_win_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_house_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_whipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_content_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_not_content_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_content_tellers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_contents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_voting_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_voting_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sponsoring_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teller_content_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teller_not_content_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDivisionViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
