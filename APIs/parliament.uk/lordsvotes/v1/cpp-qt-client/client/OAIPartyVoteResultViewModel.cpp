/**
 * Lords Votes API
 * An API that allows querying of Lords Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartyVoteResultViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartyVoteResultViewModel::OAIPartyVoteResultViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartyVoteResultViewModel::OAIPartyVoteResultViewModel() {
    this->initializeModel();
}

OAIPartyVoteResultViewModel::~OAIPartyVoteResultViewModel() {}

void OAIPartyVoteResultViewModel::initializeModel() {

    m_party_name_isSet = false;
    m_party_name_isValid = false;

    m_vote_count_isSet = false;
    m_vote_count_isValid = false;
}

void OAIPartyVoteResultViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartyVoteResultViewModel::fromJsonObject(QJsonObject json) {

    m_party_name_isValid = ::OpenAPI::fromJsonValue(m_party_name, json[QString("partyName")]);
    m_party_name_isSet = !json[QString("partyName")].isNull() && m_party_name_isValid;

    m_vote_count_isValid = ::OpenAPI::fromJsonValue(m_vote_count, json[QString("voteCount")]);
    m_vote_count_isSet = !json[QString("voteCount")].isNull() && m_vote_count_isValid;
}

QString OAIPartyVoteResultViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartyVoteResultViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_party_name_isSet) {
        obj.insert(QString("partyName"), ::OpenAPI::toJsonValue(m_party_name));
    }
    if (m_vote_count_isSet) {
        obj.insert(QString("voteCount"), ::OpenAPI::toJsonValue(m_vote_count));
    }
    return obj;
}

QString OAIPartyVoteResultViewModel::getPartyName() const {
    return m_party_name;
}
void OAIPartyVoteResultViewModel::setPartyName(const QString &party_name) {
    m_party_name = party_name;
    m_party_name_isSet = true;
}

bool OAIPartyVoteResultViewModel::is_party_name_Set() const{
    return m_party_name_isSet;
}

bool OAIPartyVoteResultViewModel::is_party_name_Valid() const{
    return m_party_name_isValid;
}

qint32 OAIPartyVoteResultViewModel::getVoteCount() const {
    return m_vote_count;
}
void OAIPartyVoteResultViewModel::setVoteCount(const qint32 &vote_count) {
    m_vote_count = vote_count;
    m_vote_count_isSet = true;
}

bool OAIPartyVoteResultViewModel::is_vote_count_Set() const{
    return m_vote_count_isSet;
}

bool OAIPartyVoteResultViewModel::is_vote_count_Valid() const{
    return m_vote_count_isValid;
}

bool OAIPartyVoteResultViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_party_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vote_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartyVoteResultViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
