/**
 * Lords Votes API
 * An API that allows querying of Lords Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDivisionViewModel.h
 *
 * 
 */

#ifndef OAIDivisionViewModel_H
#define OAIDivisionViewModel_H

#include <QJsonObject>

#include "OAIMemberViewModel.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMemberViewModel;

class OAIDivisionViewModel : public OAIObject {
public:
    OAIDivisionViewModel();
    OAIDivisionViewModel(QString json);
    ~OAIDivisionViewModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAmendmentMotionNotes() const;
    void setAmendmentMotionNotes(const QString &amendment_motion_notes);
    bool is_amendment_motion_notes_Set() const;
    bool is_amendment_motion_notes_Valid() const;

    qint32 getAuthoritativeContentCount() const;
    void setAuthoritativeContentCount(const qint32 &authoritative_content_count);
    bool is_authoritative_content_count_Set() const;
    bool is_authoritative_content_count_Valid() const;

    qint32 getAuthoritativeNotContentCount() const;
    void setAuthoritativeNotContentCount(const qint32 &authoritative_not_content_count);
    bool is_authoritative_not_content_count_Set() const;
    bool is_authoritative_not_content_count_Valid() const;

    QList<OAIMemberViewModel> getContentTellers() const;
    void setContentTellers(const QList<OAIMemberViewModel> &content_tellers);
    bool is_content_tellers_Set() const;
    bool is_content_tellers_Valid() const;

    QList<OAIMemberViewModel> getContents() const;
    void setContents(const QList<OAIMemberViewModel> &contents);
    bool is_contents_Set() const;
    bool is_contents_Valid() const;

    QDateTime getDate() const;
    void setDate(const QDateTime &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    bool isDivisionHadTellers() const;
    void setDivisionHadTellers(const bool &division_had_tellers);
    bool is_division_had_tellers_Set() const;
    bool is_division_had_tellers_Valid() const;

    qint32 getDivisionId() const;
    void setDivisionId(const qint32 &division_id);
    bool is_division_id_Set() const;
    bool is_division_id_Valid() const;

    bool isDivisionWasExclusivelyRemote() const;
    void setDivisionWasExclusivelyRemote(const bool &division_was_exclusively_remote);
    bool is_division_was_exclusively_remote_Set() const;
    bool is_division_was_exclusively_remote_Valid() const;

    bool isIsGovernmentContent() const;
    void setIsGovernmentContent(const bool &is_government_content);
    bool is_is_government_content_Set() const;
    bool is_is_government_content_Valid() const;

    bool isIsGovernmentWin() const;
    void setIsGovernmentWin(const bool &is_government_win);
    bool is_is_government_win_Set() const;
    bool is_is_government_win_Valid() const;

    bool isIsHouse() const;
    void setIsHouse(const bool &is_house);
    bool is_is_house_Set() const;
    bool is_is_house_Valid() const;

    bool isIsWhipped() const;
    void setIsWhipped(const bool &is_whipped);
    bool is_is_whipped_Set() const;
    bool is_is_whipped_Valid() const;

    qint32 getMemberContentCount() const;
    void setMemberContentCount(const qint32 &member_content_count);
    bool is_member_content_count_Set() const;
    bool is_member_content_count_Valid() const;

    qint32 getMemberNotContentCount() const;
    void setMemberNotContentCount(const qint32 &member_not_content_count);
    bool is_member_not_content_count_Set() const;
    bool is_member_not_content_count_Valid() const;

    QList<OAIMemberViewModel> getNotContentTellers() const;
    void setNotContentTellers(const QList<OAIMemberViewModel> &not_content_tellers);
    bool is_not_content_tellers_Set() const;
    bool is_not_content_tellers_Valid() const;

    QList<OAIMemberViewModel> getNotContents() const;
    void setNotContents(const QList<OAIMemberViewModel> &not_contents);
    bool is_not_contents_Set() const;
    bool is_not_contents_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    qint32 getNumber() const;
    void setNumber(const qint32 &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    QDateTime getRemoteVotingEnd() const;
    void setRemoteVotingEnd(const QDateTime &remote_voting_end);
    bool is_remote_voting_end_Set() const;
    bool is_remote_voting_end_Valid() const;

    QDateTime getRemoteVotingStart() const;
    void setRemoteVotingStart(const QDateTime &remote_voting_start);
    bool is_remote_voting_start_Set() const;
    bool is_remote_voting_start_Valid() const;

    qint32 getSponsoringMemberId() const;
    void setSponsoringMemberId(const qint32 &sponsoring_member_id);
    bool is_sponsoring_member_id_Set() const;
    bool is_sponsoring_member_id_Valid() const;

    qint32 getTellerContentCount() const;
    void setTellerContentCount(const qint32 &teller_content_count);
    bool is_teller_content_count_Set() const;
    bool is_teller_content_count_Valid() const;

    qint32 getTellerNotContentCount() const;
    void setTellerNotContentCount(const qint32 &teller_not_content_count);
    bool is_teller_not_content_count_Set() const;
    bool is_teller_not_content_count_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_amendment_motion_notes;
    bool m_amendment_motion_notes_isSet;
    bool m_amendment_motion_notes_isValid;

    qint32 m_authoritative_content_count;
    bool m_authoritative_content_count_isSet;
    bool m_authoritative_content_count_isValid;

    qint32 m_authoritative_not_content_count;
    bool m_authoritative_not_content_count_isSet;
    bool m_authoritative_not_content_count_isValid;

    QList<OAIMemberViewModel> m_content_tellers;
    bool m_content_tellers_isSet;
    bool m_content_tellers_isValid;

    QList<OAIMemberViewModel> m_contents;
    bool m_contents_isSet;
    bool m_contents_isValid;

    QDateTime m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    bool m_division_had_tellers;
    bool m_division_had_tellers_isSet;
    bool m_division_had_tellers_isValid;

    qint32 m_division_id;
    bool m_division_id_isSet;
    bool m_division_id_isValid;

    bool m_division_was_exclusively_remote;
    bool m_division_was_exclusively_remote_isSet;
    bool m_division_was_exclusively_remote_isValid;

    bool m_is_government_content;
    bool m_is_government_content_isSet;
    bool m_is_government_content_isValid;

    bool m_is_government_win;
    bool m_is_government_win_isSet;
    bool m_is_government_win_isValid;

    bool m_is_house;
    bool m_is_house_isSet;
    bool m_is_house_isValid;

    bool m_is_whipped;
    bool m_is_whipped_isSet;
    bool m_is_whipped_isValid;

    qint32 m_member_content_count;
    bool m_member_content_count_isSet;
    bool m_member_content_count_isValid;

    qint32 m_member_not_content_count;
    bool m_member_not_content_count_isSet;
    bool m_member_not_content_count_isValid;

    QList<OAIMemberViewModel> m_not_content_tellers;
    bool m_not_content_tellers_isSet;
    bool m_not_content_tellers_isValid;

    QList<OAIMemberViewModel> m_not_contents;
    bool m_not_contents_isSet;
    bool m_not_contents_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    qint32 m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    QDateTime m_remote_voting_end;
    bool m_remote_voting_end_isSet;
    bool m_remote_voting_end_isValid;

    QDateTime m_remote_voting_start;
    bool m_remote_voting_start_isSet;
    bool m_remote_voting_start_isValid;

    qint32 m_sponsoring_member_id;
    bool m_sponsoring_member_id_isSet;
    bool m_sponsoring_member_id_isValid;

    qint32 m_teller_content_count;
    bool m_teller_content_count_isSet;
    bool m_teller_content_count_isValid;

    qint32 m_teller_not_content_count;
    bool m_teller_not_content_count_isSet;
    bool m_teller_not_content_count_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDivisionViewModel)

#endif // OAIDivisionViewModel_H
