/*
 * Lords Votes API
 * An API that allows querying of Lords Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MemberViewModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DivisionViewModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:36.608986-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DivisionViewModel {
  public static final String SERIALIZED_NAME_AMENDMENT_MOTION_NOTES = "amendmentMotionNotes";
  @SerializedName(SERIALIZED_NAME_AMENDMENT_MOTION_NOTES)
  private String amendmentMotionNotes;

  public static final String SERIALIZED_NAME_AUTHORITATIVE_CONTENT_COUNT = "authoritativeContentCount";
  @SerializedName(SERIALIZED_NAME_AUTHORITATIVE_CONTENT_COUNT)
  private Integer authoritativeContentCount;

  public static final String SERIALIZED_NAME_AUTHORITATIVE_NOT_CONTENT_COUNT = "authoritativeNotContentCount";
  @SerializedName(SERIALIZED_NAME_AUTHORITATIVE_NOT_CONTENT_COUNT)
  private Integer authoritativeNotContentCount;

  public static final String SERIALIZED_NAME_CONTENT_TELLERS = "contentTellers";
  @SerializedName(SERIALIZED_NAME_CONTENT_TELLERS)
  private List<MemberViewModel> contentTellers;

  public static final String SERIALIZED_NAME_CONTENTS = "contents";
  @SerializedName(SERIALIZED_NAME_CONTENTS)
  private List<MemberViewModel> contents;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DIVISION_HAD_TELLERS = "divisionHadTellers";
  @SerializedName(SERIALIZED_NAME_DIVISION_HAD_TELLERS)
  private Boolean divisionHadTellers;

  public static final String SERIALIZED_NAME_DIVISION_ID = "divisionId";
  @SerializedName(SERIALIZED_NAME_DIVISION_ID)
  private Integer divisionId;

  public static final String SERIALIZED_NAME_DIVISION_WAS_EXCLUSIVELY_REMOTE = "divisionWasExclusivelyRemote";
  @SerializedName(SERIALIZED_NAME_DIVISION_WAS_EXCLUSIVELY_REMOTE)
  private Boolean divisionWasExclusivelyRemote;

  public static final String SERIALIZED_NAME_IS_GOVERNMENT_CONTENT = "isGovernmentContent";
  @SerializedName(SERIALIZED_NAME_IS_GOVERNMENT_CONTENT)
  private Boolean isGovernmentContent;

  public static final String SERIALIZED_NAME_IS_GOVERNMENT_WIN = "isGovernmentWin";
  @SerializedName(SERIALIZED_NAME_IS_GOVERNMENT_WIN)
  private Boolean isGovernmentWin;

  public static final String SERIALIZED_NAME_IS_HOUSE = "isHouse";
  @SerializedName(SERIALIZED_NAME_IS_HOUSE)
  private Boolean isHouse;

  public static final String SERIALIZED_NAME_IS_WHIPPED = "isWhipped";
  @SerializedName(SERIALIZED_NAME_IS_WHIPPED)
  private Boolean isWhipped;

  public static final String SERIALIZED_NAME_MEMBER_CONTENT_COUNT = "memberContentCount";
  @SerializedName(SERIALIZED_NAME_MEMBER_CONTENT_COUNT)
  private Integer memberContentCount;

  public static final String SERIALIZED_NAME_MEMBER_NOT_CONTENT_COUNT = "memberNotContentCount";
  @SerializedName(SERIALIZED_NAME_MEMBER_NOT_CONTENT_COUNT)
  private Integer memberNotContentCount;

  public static final String SERIALIZED_NAME_NOT_CONTENT_TELLERS = "notContentTellers";
  @SerializedName(SERIALIZED_NAME_NOT_CONTENT_TELLERS)
  private List<MemberViewModel> notContentTellers;

  public static final String SERIALIZED_NAME_NOT_CONTENTS = "notContents";
  @SerializedName(SERIALIZED_NAME_NOT_CONTENTS)
  private List<MemberViewModel> notContents;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_REMOTE_VOTING_END = "remoteVotingEnd";
  @SerializedName(SERIALIZED_NAME_REMOTE_VOTING_END)
  private OffsetDateTime remoteVotingEnd;

  public static final String SERIALIZED_NAME_REMOTE_VOTING_START = "remoteVotingStart";
  @SerializedName(SERIALIZED_NAME_REMOTE_VOTING_START)
  private OffsetDateTime remoteVotingStart;

  public static final String SERIALIZED_NAME_SPONSORING_MEMBER_ID = "sponsoringMemberId";
  @SerializedName(SERIALIZED_NAME_SPONSORING_MEMBER_ID)
  private Integer sponsoringMemberId;

  public static final String SERIALIZED_NAME_TELLER_CONTENT_COUNT = "tellerContentCount";
  @SerializedName(SERIALIZED_NAME_TELLER_CONTENT_COUNT)
  private Integer tellerContentCount;

  public static final String SERIALIZED_NAME_TELLER_NOT_CONTENT_COUNT = "tellerNotContentCount";
  @SerializedName(SERIALIZED_NAME_TELLER_NOT_CONTENT_COUNT)
  private Integer tellerNotContentCount;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public DivisionViewModel() {
  }

  public DivisionViewModel amendmentMotionNotes(String amendmentMotionNotes) {
    this.amendmentMotionNotes = amendmentMotionNotes;
    return this;
  }

  /**
   * Get amendmentMotionNotes
   * @return amendmentMotionNotes
   */
  @javax.annotation.Nullable
  public String getAmendmentMotionNotes() {
    return amendmentMotionNotes;
  }

  public void setAmendmentMotionNotes(String amendmentMotionNotes) {
    this.amendmentMotionNotes = amendmentMotionNotes;
  }


  public DivisionViewModel authoritativeContentCount(Integer authoritativeContentCount) {
    this.authoritativeContentCount = authoritativeContentCount;
    return this;
  }

  /**
   * Authoritative content count is the official count. This is the teller content count when tellers are present, but member content count when there are no tellers.
   * @return authoritativeContentCount
   */
  @javax.annotation.Nullable
  public Integer getAuthoritativeContentCount() {
    return authoritativeContentCount;
  }

  public void setAuthoritativeContentCount(Integer authoritativeContentCount) {
    this.authoritativeContentCount = authoritativeContentCount;
  }


  public DivisionViewModel authoritativeNotContentCount(Integer authoritativeNotContentCount) {
    this.authoritativeNotContentCount = authoritativeNotContentCount;
    return this;
  }

  /**
   * Authoritative not content count is the official count. This is the teller not content count when tellers are present, but member not content count when there are no tellers.
   * @return authoritativeNotContentCount
   */
  @javax.annotation.Nullable
  public Integer getAuthoritativeNotContentCount() {
    return authoritativeNotContentCount;
  }

  public void setAuthoritativeNotContentCount(Integer authoritativeNotContentCount) {
    this.authoritativeNotContentCount = authoritativeNotContentCount;
  }


  public DivisionViewModel contentTellers(List<MemberViewModel> contentTellers) {
    this.contentTellers = contentTellers;
    return this;
  }

  public DivisionViewModel addContentTellersItem(MemberViewModel contentTellersItem) {
    if (this.contentTellers == null) {
      this.contentTellers = new ArrayList<>();
    }
    this.contentTellers.add(contentTellersItem);
    return this;
  }

  /**
   * Get contentTellers
   * @return contentTellers
   */
  @javax.annotation.Nullable
  public List<MemberViewModel> getContentTellers() {
    return contentTellers;
  }

  public void setContentTellers(List<MemberViewModel> contentTellers) {
    this.contentTellers = contentTellers;
  }


  public DivisionViewModel contents(List<MemberViewModel> contents) {
    this.contents = contents;
    return this;
  }

  public DivisionViewModel addContentsItem(MemberViewModel contentsItem) {
    if (this.contents == null) {
      this.contents = new ArrayList<>();
    }
    this.contents.add(contentsItem);
    return this;
  }

  /**
   * Get contents
   * @return contents
   */
  @javax.annotation.Nullable
  public List<MemberViewModel> getContents() {
    return contents;
  }

  public void setContents(List<MemberViewModel> contents) {
    this.contents = contents;
  }


  public DivisionViewModel date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public DivisionViewModel divisionHadTellers(Boolean divisionHadTellers) {
    this.divisionHadTellers = divisionHadTellers;
    return this;
  }

  /**
   * Whether the division had tellers or not
   * @return divisionHadTellers
   */
  @javax.annotation.Nullable
  public Boolean getDivisionHadTellers() {
    return divisionHadTellers;
  }

  public void setDivisionHadTellers(Boolean divisionHadTellers) {
    this.divisionHadTellers = divisionHadTellers;
  }


  public DivisionViewModel divisionId(Integer divisionId) {
    this.divisionId = divisionId;
    return this;
  }

  /**
   * Get divisionId
   * @return divisionId
   */
  @javax.annotation.Nullable
  public Integer getDivisionId() {
    return divisionId;
  }

  public void setDivisionId(Integer divisionId) {
    this.divisionId = divisionId;
  }


  public DivisionViewModel divisionWasExclusivelyRemote(Boolean divisionWasExclusivelyRemote) {
    this.divisionWasExclusivelyRemote = divisionWasExclusivelyRemote;
    return this;
  }

  /**
   * Get divisionWasExclusivelyRemote
   * @return divisionWasExclusivelyRemote
   */
  @javax.annotation.Nullable
  public Boolean getDivisionWasExclusivelyRemote() {
    return divisionWasExclusivelyRemote;
  }

  public void setDivisionWasExclusivelyRemote(Boolean divisionWasExclusivelyRemote) {
    this.divisionWasExclusivelyRemote = divisionWasExclusivelyRemote;
  }


  public DivisionViewModel isGovernmentContent(Boolean isGovernmentContent) {
    this.isGovernmentContent = isGovernmentContent;
    return this;
  }

  /**
   * Get isGovernmentContent
   * @return isGovernmentContent
   */
  @javax.annotation.Nullable
  public Boolean getIsGovernmentContent() {
    return isGovernmentContent;
  }

  public void setIsGovernmentContent(Boolean isGovernmentContent) {
    this.isGovernmentContent = isGovernmentContent;
  }


  public DivisionViewModel isGovernmentWin(Boolean isGovernmentWin) {
    this.isGovernmentWin = isGovernmentWin;
    return this;
  }

  /**
   * Get isGovernmentWin
   * @return isGovernmentWin
   */
  @javax.annotation.Nullable
  public Boolean getIsGovernmentWin() {
    return isGovernmentWin;
  }

  public void setIsGovernmentWin(Boolean isGovernmentWin) {
    this.isGovernmentWin = isGovernmentWin;
  }


  public DivisionViewModel isHouse(Boolean isHouse) {
    this.isHouse = isHouse;
    return this;
  }

  /**
   * Get isHouse
   * @return isHouse
   */
  @javax.annotation.Nullable
  public Boolean getIsHouse() {
    return isHouse;
  }

  public void setIsHouse(Boolean isHouse) {
    this.isHouse = isHouse;
  }


  public DivisionViewModel isWhipped(Boolean isWhipped) {
    this.isWhipped = isWhipped;
    return this;
  }

  /**
   * Get isWhipped
   * @return isWhipped
   */
  @javax.annotation.Nullable
  public Boolean getIsWhipped() {
    return isWhipped;
  }

  public void setIsWhipped(Boolean isWhipped) {
    this.isWhipped = isWhipped;
  }


  public DivisionViewModel memberContentCount(Integer memberContentCount) {
    this.memberContentCount = memberContentCount;
    return this;
  }

  /**
   * Member content count is the total tally of all members that voted content
   * @return memberContentCount
   */
  @javax.annotation.Nullable
  public Integer getMemberContentCount() {
    return memberContentCount;
  }

  public void setMemberContentCount(Integer memberContentCount) {
    this.memberContentCount = memberContentCount;
  }


  public DivisionViewModel memberNotContentCount(Integer memberNotContentCount) {
    this.memberNotContentCount = memberNotContentCount;
    return this;
  }

  /**
   * Member not content count is the total tally of all members that voted not content
   * @return memberNotContentCount
   */
  @javax.annotation.Nullable
  public Integer getMemberNotContentCount() {
    return memberNotContentCount;
  }

  public void setMemberNotContentCount(Integer memberNotContentCount) {
    this.memberNotContentCount = memberNotContentCount;
  }


  public DivisionViewModel notContentTellers(List<MemberViewModel> notContentTellers) {
    this.notContentTellers = notContentTellers;
    return this;
  }

  public DivisionViewModel addNotContentTellersItem(MemberViewModel notContentTellersItem) {
    if (this.notContentTellers == null) {
      this.notContentTellers = new ArrayList<>();
    }
    this.notContentTellers.add(notContentTellersItem);
    return this;
  }

  /**
   * Get notContentTellers
   * @return notContentTellers
   */
  @javax.annotation.Nullable
  public List<MemberViewModel> getNotContentTellers() {
    return notContentTellers;
  }

  public void setNotContentTellers(List<MemberViewModel> notContentTellers) {
    this.notContentTellers = notContentTellers;
  }


  public DivisionViewModel notContents(List<MemberViewModel> notContents) {
    this.notContents = notContents;
    return this;
  }

  public DivisionViewModel addNotContentsItem(MemberViewModel notContentsItem) {
    if (this.notContents == null) {
      this.notContents = new ArrayList<>();
    }
    this.notContents.add(notContentsItem);
    return this;
  }

  /**
   * Get notContents
   * @return notContents
   */
  @javax.annotation.Nullable
  public List<MemberViewModel> getNotContents() {
    return notContents;
  }

  public void setNotContents(List<MemberViewModel> notContents) {
    this.notContents = notContents;
  }


  public DivisionViewModel notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public DivisionViewModel number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public DivisionViewModel remoteVotingEnd(OffsetDateTime remoteVotingEnd) {
    this.remoteVotingEnd = remoteVotingEnd;
    return this;
  }

  /**
   * Get remoteVotingEnd
   * @return remoteVotingEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRemoteVotingEnd() {
    return remoteVotingEnd;
  }

  public void setRemoteVotingEnd(OffsetDateTime remoteVotingEnd) {
    this.remoteVotingEnd = remoteVotingEnd;
  }


  public DivisionViewModel remoteVotingStart(OffsetDateTime remoteVotingStart) {
    this.remoteVotingStart = remoteVotingStart;
    return this;
  }

  /**
   * Get remoteVotingStart
   * @return remoteVotingStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRemoteVotingStart() {
    return remoteVotingStart;
  }

  public void setRemoteVotingStart(OffsetDateTime remoteVotingStart) {
    this.remoteVotingStart = remoteVotingStart;
  }


  public DivisionViewModel sponsoringMemberId(Integer sponsoringMemberId) {
    this.sponsoringMemberId = sponsoringMemberId;
    return this;
  }

  /**
   * Get sponsoringMemberId
   * @return sponsoringMemberId
   */
  @javax.annotation.Nullable
  public Integer getSponsoringMemberId() {
    return sponsoringMemberId;
  }

  public void setSponsoringMemberId(Integer sponsoringMemberId) {
    this.sponsoringMemberId = sponsoringMemberId;
  }


  public DivisionViewModel tellerContentCount(Integer tellerContentCount) {
    this.tellerContentCount = tellerContentCount;
    return this;
  }

  /**
   * Content count is count recorded by the tellers
   * @return tellerContentCount
   */
  @javax.annotation.Nullable
  public Integer getTellerContentCount() {
    return tellerContentCount;
  }

  public void setTellerContentCount(Integer tellerContentCount) {
    this.tellerContentCount = tellerContentCount;
  }


  public DivisionViewModel tellerNotContentCount(Integer tellerNotContentCount) {
    this.tellerNotContentCount = tellerNotContentCount;
    return this;
  }

  /**
   * Not Content count recorded by the tellers
   * @return tellerNotContentCount
   */
  @javax.annotation.Nullable
  public Integer getTellerNotContentCount() {
    return tellerNotContentCount;
  }

  public void setTellerNotContentCount(Integer tellerNotContentCount) {
    this.tellerNotContentCount = tellerNotContentCount;
  }


  public DivisionViewModel title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DivisionViewModel divisionViewModel = (DivisionViewModel) o;
    return Objects.equals(this.amendmentMotionNotes, divisionViewModel.amendmentMotionNotes) &&
        Objects.equals(this.authoritativeContentCount, divisionViewModel.authoritativeContentCount) &&
        Objects.equals(this.authoritativeNotContentCount, divisionViewModel.authoritativeNotContentCount) &&
        Objects.equals(this.contentTellers, divisionViewModel.contentTellers) &&
        Objects.equals(this.contents, divisionViewModel.contents) &&
        Objects.equals(this.date, divisionViewModel.date) &&
        Objects.equals(this.divisionHadTellers, divisionViewModel.divisionHadTellers) &&
        Objects.equals(this.divisionId, divisionViewModel.divisionId) &&
        Objects.equals(this.divisionWasExclusivelyRemote, divisionViewModel.divisionWasExclusivelyRemote) &&
        Objects.equals(this.isGovernmentContent, divisionViewModel.isGovernmentContent) &&
        Objects.equals(this.isGovernmentWin, divisionViewModel.isGovernmentWin) &&
        Objects.equals(this.isHouse, divisionViewModel.isHouse) &&
        Objects.equals(this.isWhipped, divisionViewModel.isWhipped) &&
        Objects.equals(this.memberContentCount, divisionViewModel.memberContentCount) &&
        Objects.equals(this.memberNotContentCount, divisionViewModel.memberNotContentCount) &&
        Objects.equals(this.notContentTellers, divisionViewModel.notContentTellers) &&
        Objects.equals(this.notContents, divisionViewModel.notContents) &&
        Objects.equals(this.notes, divisionViewModel.notes) &&
        Objects.equals(this.number, divisionViewModel.number) &&
        Objects.equals(this.remoteVotingEnd, divisionViewModel.remoteVotingEnd) &&
        Objects.equals(this.remoteVotingStart, divisionViewModel.remoteVotingStart) &&
        Objects.equals(this.sponsoringMemberId, divisionViewModel.sponsoringMemberId) &&
        Objects.equals(this.tellerContentCount, divisionViewModel.tellerContentCount) &&
        Objects.equals(this.tellerNotContentCount, divisionViewModel.tellerNotContentCount) &&
        Objects.equals(this.title, divisionViewModel.title);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(amendmentMotionNotes, authoritativeContentCount, authoritativeNotContentCount, contentTellers, contents, date, divisionHadTellers, divisionId, divisionWasExclusivelyRemote, isGovernmentContent, isGovernmentWin, isHouse, isWhipped, memberContentCount, memberNotContentCount, notContentTellers, notContents, notes, number, remoteVotingEnd, remoteVotingStart, sponsoringMemberId, tellerContentCount, tellerNotContentCount, title);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DivisionViewModel {\n");
    sb.append("    amendmentMotionNotes: ").append(toIndentedString(amendmentMotionNotes)).append("\n");
    sb.append("    authoritativeContentCount: ").append(toIndentedString(authoritativeContentCount)).append("\n");
    sb.append("    authoritativeNotContentCount: ").append(toIndentedString(authoritativeNotContentCount)).append("\n");
    sb.append("    contentTellers: ").append(toIndentedString(contentTellers)).append("\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    divisionHadTellers: ").append(toIndentedString(divisionHadTellers)).append("\n");
    sb.append("    divisionId: ").append(toIndentedString(divisionId)).append("\n");
    sb.append("    divisionWasExclusivelyRemote: ").append(toIndentedString(divisionWasExclusivelyRemote)).append("\n");
    sb.append("    isGovernmentContent: ").append(toIndentedString(isGovernmentContent)).append("\n");
    sb.append("    isGovernmentWin: ").append(toIndentedString(isGovernmentWin)).append("\n");
    sb.append("    isHouse: ").append(toIndentedString(isHouse)).append("\n");
    sb.append("    isWhipped: ").append(toIndentedString(isWhipped)).append("\n");
    sb.append("    memberContentCount: ").append(toIndentedString(memberContentCount)).append("\n");
    sb.append("    memberNotContentCount: ").append(toIndentedString(memberNotContentCount)).append("\n");
    sb.append("    notContentTellers: ").append(toIndentedString(notContentTellers)).append("\n");
    sb.append("    notContents: ").append(toIndentedString(notContents)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    remoteVotingEnd: ").append(toIndentedString(remoteVotingEnd)).append("\n");
    sb.append("    remoteVotingStart: ").append(toIndentedString(remoteVotingStart)).append("\n");
    sb.append("    sponsoringMemberId: ").append(toIndentedString(sponsoringMemberId)).append("\n");
    sb.append("    tellerContentCount: ").append(toIndentedString(tellerContentCount)).append("\n");
    sb.append("    tellerNotContentCount: ").append(toIndentedString(tellerNotContentCount)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amendmentMotionNotes");
    openapiFields.add("authoritativeContentCount");
    openapiFields.add("authoritativeNotContentCount");
    openapiFields.add("contentTellers");
    openapiFields.add("contents");
    openapiFields.add("date");
    openapiFields.add("divisionHadTellers");
    openapiFields.add("divisionId");
    openapiFields.add("divisionWasExclusivelyRemote");
    openapiFields.add("isGovernmentContent");
    openapiFields.add("isGovernmentWin");
    openapiFields.add("isHouse");
    openapiFields.add("isWhipped");
    openapiFields.add("memberContentCount");
    openapiFields.add("memberNotContentCount");
    openapiFields.add("notContentTellers");
    openapiFields.add("notContents");
    openapiFields.add("notes");
    openapiFields.add("number");
    openapiFields.add("remoteVotingEnd");
    openapiFields.add("remoteVotingStart");
    openapiFields.add("sponsoringMemberId");
    openapiFields.add("tellerContentCount");
    openapiFields.add("tellerNotContentCount");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DivisionViewModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DivisionViewModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DivisionViewModel is not found in the empty JSON string", DivisionViewModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DivisionViewModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DivisionViewModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("amendmentMotionNotes") != null && !jsonObj.get("amendmentMotionNotes").isJsonNull()) && !jsonObj.get("amendmentMotionNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amendmentMotionNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amendmentMotionNotes").toString()));
      }
      if (jsonObj.get("contentTellers") != null && !jsonObj.get("contentTellers").isJsonNull()) {
        JsonArray jsonArraycontentTellers = jsonObj.getAsJsonArray("contentTellers");
        if (jsonArraycontentTellers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contentTellers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contentTellers` to be an array in the JSON string but got `%s`", jsonObj.get("contentTellers").toString()));
          }

          // validate the optional field `contentTellers` (array)
          for (int i = 0; i < jsonArraycontentTellers.size(); i++) {
            MemberViewModel.validateJsonElement(jsonArraycontentTellers.get(i));
          };
        }
      }
      if (jsonObj.get("contents") != null && !jsonObj.get("contents").isJsonNull()) {
        JsonArray jsonArraycontents = jsonObj.getAsJsonArray("contents");
        if (jsonArraycontents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contents` to be an array in the JSON string but got `%s`", jsonObj.get("contents").toString()));
          }

          // validate the optional field `contents` (array)
          for (int i = 0; i < jsonArraycontents.size(); i++) {
            MemberViewModel.validateJsonElement(jsonArraycontents.get(i));
          };
        }
      }
      if (jsonObj.get("notContentTellers") != null && !jsonObj.get("notContentTellers").isJsonNull()) {
        JsonArray jsonArraynotContentTellers = jsonObj.getAsJsonArray("notContentTellers");
        if (jsonArraynotContentTellers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notContentTellers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notContentTellers` to be an array in the JSON string but got `%s`", jsonObj.get("notContentTellers").toString()));
          }

          // validate the optional field `notContentTellers` (array)
          for (int i = 0; i < jsonArraynotContentTellers.size(); i++) {
            MemberViewModel.validateJsonElement(jsonArraynotContentTellers.get(i));
          };
        }
      }
      if (jsonObj.get("notContents") != null && !jsonObj.get("notContents").isJsonNull()) {
        JsonArray jsonArraynotContents = jsonObj.getAsJsonArray("notContents");
        if (jsonArraynotContents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notContents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notContents` to be an array in the JSON string but got `%s`", jsonObj.get("notContents").toString()));
          }

          // validate the optional field `notContents` (array)
          for (int i = 0; i < jsonArraynotContents.size(); i++) {
            MemberViewModel.validateJsonElement(jsonArraynotContents.get(i));
          };
        }
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DivisionViewModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DivisionViewModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DivisionViewModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DivisionViewModel.class));

       return (TypeAdapter<T>) new TypeAdapter<DivisionViewModel>() {
           @Override
           public void write(JsonWriter out, DivisionViewModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DivisionViewModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DivisionViewModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DivisionViewModel
   * @throws IOException if the JSON string is invalid with respect to DivisionViewModel
   */
  public static DivisionViewModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DivisionViewModel.class);
  }

  /**
   * Convert an instance of DivisionViewModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

