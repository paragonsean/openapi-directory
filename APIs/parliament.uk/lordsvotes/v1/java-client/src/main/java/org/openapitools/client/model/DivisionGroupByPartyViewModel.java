/*
 * Lords Votes API
 * An API that allows querying of Lords Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PartyVoteResultViewModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DivisionGroupByPartyViewModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:36.608986-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DivisionGroupByPartyViewModel {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private List<PartyVoteResultViewModel> content;

  public static final String SERIALIZED_NAME_CONTENT_COUNT = "contentCount";
  @SerializedName(SERIALIZED_NAME_CONTENT_COUNT)
  private Integer contentCount;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DIVISION_ID = "divisionId";
  @SerializedName(SERIALIZED_NAME_DIVISION_ID)
  private Integer divisionId;

  public static final String SERIALIZED_NAME_NOT_CONTENT = "notContent";
  @SerializedName(SERIALIZED_NAME_NOT_CONTENT)
  private List<PartyVoteResultViewModel> notContent;

  public static final String SERIALIZED_NAME_NOT_CONTENT_COUNT = "notContentCount";
  @SerializedName(SERIALIZED_NAME_NOT_CONTENT_COUNT)
  private Integer notContentCount;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public DivisionGroupByPartyViewModel() {
  }

  public DivisionGroupByPartyViewModel(
     Integer contentCount, 
     Integer notContentCount
  ) {
    this();
    this.contentCount = contentCount;
    this.notContentCount = notContentCount;
  }

  public DivisionGroupByPartyViewModel content(List<PartyVoteResultViewModel> content) {
    this.content = content;
    return this;
  }

  public DivisionGroupByPartyViewModel addContentItem(PartyVoteResultViewModel contentItem) {
    if (this.content == null) {
      this.content = new ArrayList<>();
    }
    this.content.add(contentItem);
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public List<PartyVoteResultViewModel> getContent() {
    return content;
  }

  public void setContent(List<PartyVoteResultViewModel> content) {
    this.content = content;
  }


  /**
   * Get contentCount
   * @return contentCount
   */
  @javax.annotation.Nullable
  public Integer getContentCount() {
    return contentCount;
  }



  public DivisionGroupByPartyViewModel date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public DivisionGroupByPartyViewModel divisionId(Integer divisionId) {
    this.divisionId = divisionId;
    return this;
  }

  /**
   * Get divisionId
   * @return divisionId
   */
  @javax.annotation.Nullable
  public Integer getDivisionId() {
    return divisionId;
  }

  public void setDivisionId(Integer divisionId) {
    this.divisionId = divisionId;
  }


  public DivisionGroupByPartyViewModel notContent(List<PartyVoteResultViewModel> notContent) {
    this.notContent = notContent;
    return this;
  }

  public DivisionGroupByPartyViewModel addNotContentItem(PartyVoteResultViewModel notContentItem) {
    if (this.notContent == null) {
      this.notContent = new ArrayList<>();
    }
    this.notContent.add(notContentItem);
    return this;
  }

  /**
   * Get notContent
   * @return notContent
   */
  @javax.annotation.Nullable
  public List<PartyVoteResultViewModel> getNotContent() {
    return notContent;
  }

  public void setNotContent(List<PartyVoteResultViewModel> notContent) {
    this.notContent = notContent;
  }


  /**
   * Get notContentCount
   * @return notContentCount
   */
  @javax.annotation.Nullable
  public Integer getNotContentCount() {
    return notContentCount;
  }



  public DivisionGroupByPartyViewModel number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public DivisionGroupByPartyViewModel title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DivisionGroupByPartyViewModel divisionGroupByPartyViewModel = (DivisionGroupByPartyViewModel) o;
    return Objects.equals(this.content, divisionGroupByPartyViewModel.content) &&
        Objects.equals(this.contentCount, divisionGroupByPartyViewModel.contentCount) &&
        Objects.equals(this.date, divisionGroupByPartyViewModel.date) &&
        Objects.equals(this.divisionId, divisionGroupByPartyViewModel.divisionId) &&
        Objects.equals(this.notContent, divisionGroupByPartyViewModel.notContent) &&
        Objects.equals(this.notContentCount, divisionGroupByPartyViewModel.notContentCount) &&
        Objects.equals(this.number, divisionGroupByPartyViewModel.number) &&
        Objects.equals(this.title, divisionGroupByPartyViewModel.title);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, contentCount, date, divisionId, notContent, notContentCount, number, title);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DivisionGroupByPartyViewModel {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentCount: ").append(toIndentedString(contentCount)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    divisionId: ").append(toIndentedString(divisionId)).append("\n");
    sb.append("    notContent: ").append(toIndentedString(notContent)).append("\n");
    sb.append("    notContentCount: ").append(toIndentedString(notContentCount)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("contentCount");
    openapiFields.add("date");
    openapiFields.add("divisionId");
    openapiFields.add("notContent");
    openapiFields.add("notContentCount");
    openapiFields.add("number");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DivisionGroupByPartyViewModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DivisionGroupByPartyViewModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DivisionGroupByPartyViewModel is not found in the empty JSON string", DivisionGroupByPartyViewModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DivisionGroupByPartyViewModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DivisionGroupByPartyViewModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) {
        JsonArray jsonArraycontent = jsonObj.getAsJsonArray("content");
        if (jsonArraycontent != null) {
          // ensure the json data is an array
          if (!jsonObj.get("content").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `content` to be an array in the JSON string but got `%s`", jsonObj.get("content").toString()));
          }

          // validate the optional field `content` (array)
          for (int i = 0; i < jsonArraycontent.size(); i++) {
            PartyVoteResultViewModel.validateJsonElement(jsonArraycontent.get(i));
          };
        }
      }
      if (jsonObj.get("notContent") != null && !jsonObj.get("notContent").isJsonNull()) {
        JsonArray jsonArraynotContent = jsonObj.getAsJsonArray("notContent");
        if (jsonArraynotContent != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notContent").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notContent` to be an array in the JSON string but got `%s`", jsonObj.get("notContent").toString()));
          }

          // validate the optional field `notContent` (array)
          for (int i = 0; i < jsonArraynotContent.size(); i++) {
            PartyVoteResultViewModel.validateJsonElement(jsonArraynotContent.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DivisionGroupByPartyViewModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DivisionGroupByPartyViewModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DivisionGroupByPartyViewModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DivisionGroupByPartyViewModel.class));

       return (TypeAdapter<T>) new TypeAdapter<DivisionGroupByPartyViewModel>() {
           @Override
           public void write(JsonWriter out, DivisionGroupByPartyViewModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DivisionGroupByPartyViewModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DivisionGroupByPartyViewModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DivisionGroupByPartyViewModel
   * @throws IOException if the JSON string is invalid with respect to DivisionGroupByPartyViewModel
   */
  public static DivisionGroupByPartyViewModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DivisionGroupByPartyViewModel.class);
  }

  /**
   * Convert an instance of DivisionGroupByPartyViewModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

