/*
 * Lords Votes API
 * An API that allows querying of Lords Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MemberViewModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:36.608986-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MemberViewModel {
  public static final String SERIALIZED_NAME_LIST_AS = "listAs";
  @SerializedName(SERIALIZED_NAME_LIST_AS)
  private String listAs;

  public static final String SERIALIZED_NAME_MEMBER_FROM = "memberFrom";
  @SerializedName(SERIALIZED_NAME_MEMBER_FROM)
  private String memberFrom;

  public static final String SERIALIZED_NAME_MEMBER_ID = "memberId";
  @SerializedName(SERIALIZED_NAME_MEMBER_ID)
  private Integer memberId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARTY = "party";
  @SerializedName(SERIALIZED_NAME_PARTY)
  private String party;

  public static final String SERIALIZED_NAME_PARTY_ABBREVIATION = "partyAbbreviation";
  @SerializedName(SERIALIZED_NAME_PARTY_ABBREVIATION)
  private String partyAbbreviation;

  public static final String SERIALIZED_NAME_PARTY_COLOUR = "partyColour";
  @SerializedName(SERIALIZED_NAME_PARTY_COLOUR)
  private String partyColour;

  public static final String SERIALIZED_NAME_PARTY_IS_MAIN_PARTY = "partyIsMainParty";
  @SerializedName(SERIALIZED_NAME_PARTY_IS_MAIN_PARTY)
  private Boolean partyIsMainParty;

  public MemberViewModel() {
  }

  public MemberViewModel listAs(String listAs) {
    this.listAs = listAs;
    return this;
  }

  /**
   * Get listAs
   * @return listAs
   */
  @javax.annotation.Nullable
  public String getListAs() {
    return listAs;
  }

  public void setListAs(String listAs) {
    this.listAs = listAs;
  }


  public MemberViewModel memberFrom(String memberFrom) {
    this.memberFrom = memberFrom;
    return this;
  }

  /**
   * Get memberFrom
   * @return memberFrom
   */
  @javax.annotation.Nullable
  public String getMemberFrom() {
    return memberFrom;
  }

  public void setMemberFrom(String memberFrom) {
    this.memberFrom = memberFrom;
  }


  public MemberViewModel memberId(Integer memberId) {
    this.memberId = memberId;
    return this;
  }

  /**
   * Get memberId
   * @return memberId
   */
  @javax.annotation.Nullable
  public Integer getMemberId() {
    return memberId;
  }

  public void setMemberId(Integer memberId) {
    this.memberId = memberId;
  }


  public MemberViewModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MemberViewModel party(String party) {
    this.party = party;
    return this;
  }

  /**
   * Get party
   * @return party
   */
  @javax.annotation.Nullable
  public String getParty() {
    return party;
  }

  public void setParty(String party) {
    this.party = party;
  }


  public MemberViewModel partyAbbreviation(String partyAbbreviation) {
    this.partyAbbreviation = partyAbbreviation;
    return this;
  }

  /**
   * Get partyAbbreviation
   * @return partyAbbreviation
   */
  @javax.annotation.Nullable
  public String getPartyAbbreviation() {
    return partyAbbreviation;
  }

  public void setPartyAbbreviation(String partyAbbreviation) {
    this.partyAbbreviation = partyAbbreviation;
  }


  public MemberViewModel partyColour(String partyColour) {
    this.partyColour = partyColour;
    return this;
  }

  /**
   * Get partyColour
   * @return partyColour
   */
  @javax.annotation.Nullable
  public String getPartyColour() {
    return partyColour;
  }

  public void setPartyColour(String partyColour) {
    this.partyColour = partyColour;
  }


  public MemberViewModel partyIsMainParty(Boolean partyIsMainParty) {
    this.partyIsMainParty = partyIsMainParty;
    return this;
  }

  /**
   * Get partyIsMainParty
   * @return partyIsMainParty
   */
  @javax.annotation.Nullable
  public Boolean getPartyIsMainParty() {
    return partyIsMainParty;
  }

  public void setPartyIsMainParty(Boolean partyIsMainParty) {
    this.partyIsMainParty = partyIsMainParty;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MemberViewModel memberViewModel = (MemberViewModel) o;
    return Objects.equals(this.listAs, memberViewModel.listAs) &&
        Objects.equals(this.memberFrom, memberViewModel.memberFrom) &&
        Objects.equals(this.memberId, memberViewModel.memberId) &&
        Objects.equals(this.name, memberViewModel.name) &&
        Objects.equals(this.party, memberViewModel.party) &&
        Objects.equals(this.partyAbbreviation, memberViewModel.partyAbbreviation) &&
        Objects.equals(this.partyColour, memberViewModel.partyColour) &&
        Objects.equals(this.partyIsMainParty, memberViewModel.partyIsMainParty);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(listAs, memberFrom, memberId, name, party, partyAbbreviation, partyColour, partyIsMainParty);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MemberViewModel {\n");
    sb.append("    listAs: ").append(toIndentedString(listAs)).append("\n");
    sb.append("    memberFrom: ").append(toIndentedString(memberFrom)).append("\n");
    sb.append("    memberId: ").append(toIndentedString(memberId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    party: ").append(toIndentedString(party)).append("\n");
    sb.append("    partyAbbreviation: ").append(toIndentedString(partyAbbreviation)).append("\n");
    sb.append("    partyColour: ").append(toIndentedString(partyColour)).append("\n");
    sb.append("    partyIsMainParty: ").append(toIndentedString(partyIsMainParty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("listAs");
    openapiFields.add("memberFrom");
    openapiFields.add("memberId");
    openapiFields.add("name");
    openapiFields.add("party");
    openapiFields.add("partyAbbreviation");
    openapiFields.add("partyColour");
    openapiFields.add("partyIsMainParty");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MemberViewModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MemberViewModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MemberViewModel is not found in the empty JSON string", MemberViewModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MemberViewModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MemberViewModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("listAs") != null && !jsonObj.get("listAs").isJsonNull()) && !jsonObj.get("listAs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listAs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listAs").toString()));
      }
      if ((jsonObj.get("memberFrom") != null && !jsonObj.get("memberFrom").isJsonNull()) && !jsonObj.get("memberFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memberFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memberFrom").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("party") != null && !jsonObj.get("party").isJsonNull()) && !jsonObj.get("party").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party").toString()));
      }
      if ((jsonObj.get("partyAbbreviation") != null && !jsonObj.get("partyAbbreviation").isJsonNull()) && !jsonObj.get("partyAbbreviation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partyAbbreviation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partyAbbreviation").toString()));
      }
      if ((jsonObj.get("partyColour") != null && !jsonObj.get("partyColour").isJsonNull()) && !jsonObj.get("partyColour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partyColour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partyColour").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MemberViewModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MemberViewModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MemberViewModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MemberViewModel.class));

       return (TypeAdapter<T>) new TypeAdapter<MemberViewModel>() {
           @Override
           public void write(JsonWriter out, MemberViewModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MemberViewModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MemberViewModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MemberViewModel
   * @throws IOException if the JSON string is invalid with respect to MemberViewModel
   */
  public static MemberViewModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MemberViewModel.class);
  }

  /**
   * Convert an instance of MemberViewModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

