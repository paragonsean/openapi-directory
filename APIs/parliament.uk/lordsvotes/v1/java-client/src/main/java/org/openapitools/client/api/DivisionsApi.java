/*
 * Lords Votes API
 * An API that allows querying of Lords Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Comparators;
import org.openapitools.client.model.DivisionGroupByPartyViewModel;
import org.openapitools.client.model.DivisionViewModel;
import org.openapitools.client.model.MemberVotingRecordViewModel;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DivisionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DivisionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DivisionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dataDivisionsDivisionIdGet
     * @param divisionId Division with ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Division with id matching given divisionId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> divisionId was not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Division with given divisionId was not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Temporary error occured when trying to get division </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataDivisionsDivisionIdGetCall(Integer divisionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/Divisions/{divisionId}"
            .replace("{" + "divisionId" + "}", localVarApiClient.escapeString(divisionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataDivisionsDivisionIdGetValidateBeforeCall(Integer divisionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'divisionId' is set
        if (divisionId == null) {
            throw new ApiException("Missing the required parameter 'divisionId' when calling dataDivisionsDivisionIdGet(Async)");
        }

        return dataDivisionsDivisionIdGetCall(divisionId, _callback);

    }

    /**
     * Return a Division
     * Get a single Division which has the Id specified.
     * @param divisionId Division with ID specified (required)
     * @return DivisionViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Division with id matching given divisionId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> divisionId was not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Division with given divisionId was not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Temporary error occured when trying to get division </td><td>  -  </td></tr>
     </table>
     */
    public DivisionViewModel dataDivisionsDivisionIdGet(Integer divisionId) throws ApiException {
        ApiResponse<DivisionViewModel> localVarResp = dataDivisionsDivisionIdGetWithHttpInfo(divisionId);
        return localVarResp.getData();
    }

    /**
     * Return a Division
     * Get a single Division which has the Id specified.
     * @param divisionId Division with ID specified (required)
     * @return ApiResponse&lt;DivisionViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Division with id matching given divisionId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> divisionId was not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Division with given divisionId was not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Temporary error occured when trying to get division </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DivisionViewModel> dataDivisionsDivisionIdGetWithHttpInfo(Integer divisionId) throws ApiException {
        okhttp3.Call localVarCall = dataDivisionsDivisionIdGetValidateBeforeCall(divisionId, null);
        Type localVarReturnType = new TypeToken<DivisionViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a Division (asynchronously)
     * Get a single Division which has the Id specified.
     * @param divisionId Division with ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Division with id matching given divisionId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> divisionId was not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Division with given divisionId was not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Temporary error occured when trying to get division </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataDivisionsDivisionIdGetAsync(Integer divisionId, final ApiCallback<DivisionViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataDivisionsDivisionIdGetValidateBeforeCall(divisionId, _callback);
        Type localVarReturnType = new TypeToken<DivisionViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataDivisionsGroupedbypartyGet
     * @param searchTerm Divisions containing search term within title or number (optional)
     * @param memberId Divisions returning Member with Member ID voting records (optional)
     * @param includeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param startDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param endDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param divisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param totalVotesCastComparator comparison operator to use (optional)
     * @param totalVotesCastValueToCompare value to compare to with the operator provided (optional)
     * @param majorityComparator comparison operator to use (optional)
     * @param majorityValueToCompare value to compare to with the operator provided (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of divisions with votes grouped by party </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter was not valid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataDivisionsGroupedbypartyGetCall(String searchTerm, Integer memberId, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/Divisions/groupedbyparty";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SearchTerm", searchTerm));
        }

        if (memberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MemberId", memberId));
        }

        if (includeWhenMemberWasTeller != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludeWhenMemberWasTeller", includeWhenMemberWasTeller));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (divisionNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DivisionNumber", divisionNumber));
        }

        if (totalVotesCastComparator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TotalVotesCast.Comparator", totalVotesCastComparator));
        }

        if (totalVotesCastValueToCompare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TotalVotesCast.ValueToCompare", totalVotesCastValueToCompare));
        }

        if (majorityComparator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Majority.Comparator", majorityComparator));
        }

        if (majorityValueToCompare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Majority.ValueToCompare", majorityValueToCompare));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataDivisionsGroupedbypartyGetValidateBeforeCall(String searchTerm, Integer memberId, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare, final ApiCallback _callback) throws ApiException {
        return dataDivisionsGroupedbypartyGetCall(searchTerm, memberId, includeWhenMemberWasTeller, startDate, endDate, divisionNumber, totalVotesCastComparator, totalVotesCastValueToCompare, majorityComparator, majorityValueToCompare, _callback);

    }

    /**
     * Return Divisions results grouped by party
     * Get a list of Divisions which contain grouped by party
     * @param searchTerm Divisions containing search term within title or number (optional)
     * @param memberId Divisions returning Member with Member ID voting records (optional)
     * @param includeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param startDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param endDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param divisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param totalVotesCastComparator comparison operator to use (optional)
     * @param totalVotesCastValueToCompare value to compare to with the operator provided (optional)
     * @param majorityComparator comparison operator to use (optional)
     * @param majorityValueToCompare value to compare to with the operator provided (optional)
     * @return DivisionGroupByPartyViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of divisions with votes grouped by party </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter was not valid </td><td>  -  </td></tr>
     </table>
     */
    public DivisionGroupByPartyViewModel dataDivisionsGroupedbypartyGet(String searchTerm, Integer memberId, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare) throws ApiException {
        ApiResponse<DivisionGroupByPartyViewModel> localVarResp = dataDivisionsGroupedbypartyGetWithHttpInfo(searchTerm, memberId, includeWhenMemberWasTeller, startDate, endDate, divisionNumber, totalVotesCastComparator, totalVotesCastValueToCompare, majorityComparator, majorityValueToCompare);
        return localVarResp.getData();
    }

    /**
     * Return Divisions results grouped by party
     * Get a list of Divisions which contain grouped by party
     * @param searchTerm Divisions containing search term within title or number (optional)
     * @param memberId Divisions returning Member with Member ID voting records (optional)
     * @param includeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param startDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param endDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param divisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param totalVotesCastComparator comparison operator to use (optional)
     * @param totalVotesCastValueToCompare value to compare to with the operator provided (optional)
     * @param majorityComparator comparison operator to use (optional)
     * @param majorityValueToCompare value to compare to with the operator provided (optional)
     * @return ApiResponse&lt;DivisionGroupByPartyViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of divisions with votes grouped by party </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter was not valid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DivisionGroupByPartyViewModel> dataDivisionsGroupedbypartyGetWithHttpInfo(String searchTerm, Integer memberId, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare) throws ApiException {
        okhttp3.Call localVarCall = dataDivisionsGroupedbypartyGetValidateBeforeCall(searchTerm, memberId, includeWhenMemberWasTeller, startDate, endDate, divisionNumber, totalVotesCastComparator, totalVotesCastValueToCompare, majorityComparator, majorityValueToCompare, null);
        Type localVarReturnType = new TypeToken<DivisionGroupByPartyViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return Divisions results grouped by party (asynchronously)
     * Get a list of Divisions which contain grouped by party
     * @param searchTerm Divisions containing search term within title or number (optional)
     * @param memberId Divisions returning Member with Member ID voting records (optional)
     * @param includeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param startDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param endDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param divisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param totalVotesCastComparator comparison operator to use (optional)
     * @param totalVotesCastValueToCompare value to compare to with the operator provided (optional)
     * @param majorityComparator comparison operator to use (optional)
     * @param majorityValueToCompare value to compare to with the operator provided (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of divisions with votes grouped by party </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter was not valid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataDivisionsGroupedbypartyGetAsync(String searchTerm, Integer memberId, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare, final ApiCallback<DivisionGroupByPartyViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataDivisionsGroupedbypartyGetValidateBeforeCall(searchTerm, memberId, includeWhenMemberWasTeller, startDate, endDate, divisionNumber, totalVotesCastComparator, totalVotesCastValueToCompare, majorityComparator, majorityValueToCompare, _callback);
        Type localVarReturnType = new TypeToken<DivisionGroupByPartyViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataDivisionsMembervotingGet
     * @param memberId Id number of a Member whose voting records are to be returned (required)
     * @param searchTerm Divisions containing search term within title or number (optional)
     * @param includeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param startDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param endDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param divisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param totalVotesCastComparator comparison operator to use (optional)
     * @param totalVotesCastValueToCompare value to compare to with the operator provided (optional)
     * @param majorityComparator comparison operator to use (optional)
     * @param majorityValueToCompare value to compare to with the operator provided (optional)
     * @param skip The number of records to skip. Must be a positive integer. Default is 0 (optional, default to 0)
     * @param take The number of records to return per page. Must be more than 0. Default is 25 (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of voting records for a member </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter was not valid </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Temporary error occured when trying to get division </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataDivisionsMembervotingGetCall(Integer memberId, String searchTerm, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/Divisions/membervoting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (memberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MemberId", memberId));
        }

        if (searchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SearchTerm", searchTerm));
        }

        if (includeWhenMemberWasTeller != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludeWhenMemberWasTeller", includeWhenMemberWasTeller));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (divisionNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DivisionNumber", divisionNumber));
        }

        if (totalVotesCastComparator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TotalVotesCast.Comparator", totalVotesCastComparator));
        }

        if (totalVotesCastValueToCompare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TotalVotesCast.ValueToCompare", totalVotesCastValueToCompare));
        }

        if (majorityComparator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Majority.Comparator", majorityComparator));
        }

        if (majorityValueToCompare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Majority.ValueToCompare", majorityValueToCompare));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataDivisionsMembervotingGetValidateBeforeCall(Integer memberId, String searchTerm, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling dataDivisionsMembervotingGet(Async)");
        }

        return dataDivisionsMembervotingGetCall(memberId, searchTerm, includeWhenMemberWasTeller, startDate, endDate, divisionNumber, totalVotesCastComparator, totalVotesCastValueToCompare, majorityComparator, majorityValueToCompare, skip, take, _callback);

    }

    /**
     * Return voting records for a Member
     * Get a list of voting records for a Member.
     * @param memberId Id number of a Member whose voting records are to be returned (required)
     * @param searchTerm Divisions containing search term within title or number (optional)
     * @param includeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param startDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param endDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param divisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param totalVotesCastComparator comparison operator to use (optional)
     * @param totalVotesCastValueToCompare value to compare to with the operator provided (optional)
     * @param majorityComparator comparison operator to use (optional)
     * @param majorityValueToCompare value to compare to with the operator provided (optional)
     * @param skip The number of records to skip. Must be a positive integer. Default is 0 (optional, default to 0)
     * @param take The number of records to return per page. Must be more than 0. Default is 25 (optional, default to 25)
     * @return MemberVotingRecordViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of voting records for a member </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter was not valid </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Temporary error occured when trying to get division </td><td>  -  </td></tr>
     </table>
     */
    public MemberVotingRecordViewModel dataDivisionsMembervotingGet(Integer memberId, String searchTerm, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare, Integer skip, Integer take) throws ApiException {
        ApiResponse<MemberVotingRecordViewModel> localVarResp = dataDivisionsMembervotingGetWithHttpInfo(memberId, searchTerm, includeWhenMemberWasTeller, startDate, endDate, divisionNumber, totalVotesCastComparator, totalVotesCastValueToCompare, majorityComparator, majorityValueToCompare, skip, take);
        return localVarResp.getData();
    }

    /**
     * Return voting records for a Member
     * Get a list of voting records for a Member.
     * @param memberId Id number of a Member whose voting records are to be returned (required)
     * @param searchTerm Divisions containing search term within title or number (optional)
     * @param includeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param startDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param endDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param divisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param totalVotesCastComparator comparison operator to use (optional)
     * @param totalVotesCastValueToCompare value to compare to with the operator provided (optional)
     * @param majorityComparator comparison operator to use (optional)
     * @param majorityValueToCompare value to compare to with the operator provided (optional)
     * @param skip The number of records to skip. Must be a positive integer. Default is 0 (optional, default to 0)
     * @param take The number of records to return per page. Must be more than 0. Default is 25 (optional, default to 25)
     * @return ApiResponse&lt;MemberVotingRecordViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of voting records for a member </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter was not valid </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Temporary error occured when trying to get division </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MemberVotingRecordViewModel> dataDivisionsMembervotingGetWithHttpInfo(Integer memberId, String searchTerm, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = dataDivisionsMembervotingGetValidateBeforeCall(memberId, searchTerm, includeWhenMemberWasTeller, startDate, endDate, divisionNumber, totalVotesCastComparator, totalVotesCastValueToCompare, majorityComparator, majorityValueToCompare, skip, take, null);
        Type localVarReturnType = new TypeToken<MemberVotingRecordViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return voting records for a Member (asynchronously)
     * Get a list of voting records for a Member.
     * @param memberId Id number of a Member whose voting records are to be returned (required)
     * @param searchTerm Divisions containing search term within title or number (optional)
     * @param includeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param startDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param endDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param divisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param totalVotesCastComparator comparison operator to use (optional)
     * @param totalVotesCastValueToCompare value to compare to with the operator provided (optional)
     * @param majorityComparator comparison operator to use (optional)
     * @param majorityValueToCompare value to compare to with the operator provided (optional)
     * @param skip The number of records to skip. Must be a positive integer. Default is 0 (optional, default to 0)
     * @param take The number of records to return per page. Must be more than 0. Default is 25 (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of voting records for a member </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter was not valid </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Temporary error occured when trying to get division </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataDivisionsMembervotingGetAsync(Integer memberId, String searchTerm, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare, Integer skip, Integer take, final ApiCallback<MemberVotingRecordViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataDivisionsMembervotingGetValidateBeforeCall(memberId, searchTerm, includeWhenMemberWasTeller, startDate, endDate, divisionNumber, totalVotesCastComparator, totalVotesCastValueToCompare, majorityComparator, majorityValueToCompare, skip, take, _callback);
        Type localVarReturnType = new TypeToken<MemberVotingRecordViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataDivisionsSearchGet
     * @param searchTerm Divisions containing search term within title or number (optional)
     * @param memberId Divisions returning Member with Member ID voting records (optional)
     * @param includeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param startDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param endDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param divisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param totalVotesCastComparator comparison operator to use (optional)
     * @param totalVotesCastValueToCompare value to compare to with the operator provided (optional)
     * @param majorityComparator comparison operator to use (optional)
     * @param majorityValueToCompare value to compare to with the operator provided (optional)
     * @param skip The number of records to skip. Must be a positive integer. Default is 0 (optional, default to 0)
     * @param take The number of records to return per page. Must be more than 0. Default is 25 (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of divisions matching specified parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter was not valid </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Temporary error occured when trying to get division </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataDivisionsSearchGetCall(String searchTerm, Integer memberId, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/Divisions/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SearchTerm", searchTerm));
        }

        if (memberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MemberId", memberId));
        }

        if (includeWhenMemberWasTeller != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludeWhenMemberWasTeller", includeWhenMemberWasTeller));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (divisionNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DivisionNumber", divisionNumber));
        }

        if (totalVotesCastComparator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TotalVotesCast.Comparator", totalVotesCastComparator));
        }

        if (totalVotesCastValueToCompare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TotalVotesCast.ValueToCompare", totalVotesCastValueToCompare));
        }

        if (majorityComparator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Majority.Comparator", majorityComparator));
        }

        if (majorityValueToCompare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Majority.ValueToCompare", majorityValueToCompare));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataDivisionsSearchGetValidateBeforeCall(String searchTerm, Integer memberId, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        return dataDivisionsSearchGetCall(searchTerm, memberId, includeWhenMemberWasTeller, startDate, endDate, divisionNumber, totalVotesCastComparator, totalVotesCastValueToCompare, majorityComparator, majorityValueToCompare, skip, take, _callback);

    }

    /**
     * Return a list of Divisions
     * Get a list of Divisions which meet the specified criteria.
     * @param searchTerm Divisions containing search term within title or number (optional)
     * @param memberId Divisions returning Member with Member ID voting records (optional)
     * @param includeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param startDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param endDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param divisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param totalVotesCastComparator comparison operator to use (optional)
     * @param totalVotesCastValueToCompare value to compare to with the operator provided (optional)
     * @param majorityComparator comparison operator to use (optional)
     * @param majorityValueToCompare value to compare to with the operator provided (optional)
     * @param skip The number of records to skip. Must be a positive integer. Default is 0 (optional, default to 0)
     * @param take The number of records to return per page. Must be more than 0. Default is 25 (optional, default to 25)
     * @return List&lt;DivisionViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of divisions matching specified parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter was not valid </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Temporary error occured when trying to get division </td><td>  -  </td></tr>
     </table>
     */
    public List<DivisionViewModel> dataDivisionsSearchGet(String searchTerm, Integer memberId, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare, Integer skip, Integer take) throws ApiException {
        ApiResponse<List<DivisionViewModel>> localVarResp = dataDivisionsSearchGetWithHttpInfo(searchTerm, memberId, includeWhenMemberWasTeller, startDate, endDate, divisionNumber, totalVotesCastComparator, totalVotesCastValueToCompare, majorityComparator, majorityValueToCompare, skip, take);
        return localVarResp.getData();
    }

    /**
     * Return a list of Divisions
     * Get a list of Divisions which meet the specified criteria.
     * @param searchTerm Divisions containing search term within title or number (optional)
     * @param memberId Divisions returning Member with Member ID voting records (optional)
     * @param includeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param startDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param endDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param divisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param totalVotesCastComparator comparison operator to use (optional)
     * @param totalVotesCastValueToCompare value to compare to with the operator provided (optional)
     * @param majorityComparator comparison operator to use (optional)
     * @param majorityValueToCompare value to compare to with the operator provided (optional)
     * @param skip The number of records to skip. Must be a positive integer. Default is 0 (optional, default to 0)
     * @param take The number of records to return per page. Must be more than 0. Default is 25 (optional, default to 25)
     * @return ApiResponse&lt;List&lt;DivisionViewModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of divisions matching specified parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter was not valid </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Temporary error occured when trying to get division </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DivisionViewModel>> dataDivisionsSearchGetWithHttpInfo(String searchTerm, Integer memberId, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = dataDivisionsSearchGetValidateBeforeCall(searchTerm, memberId, includeWhenMemberWasTeller, startDate, endDate, divisionNumber, totalVotesCastComparator, totalVotesCastValueToCompare, majorityComparator, majorityValueToCompare, skip, take, null);
        Type localVarReturnType = new TypeToken<List<DivisionViewModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of Divisions (asynchronously)
     * Get a list of Divisions which meet the specified criteria.
     * @param searchTerm Divisions containing search term within title or number (optional)
     * @param memberId Divisions returning Member with Member ID voting records (optional)
     * @param includeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param startDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param endDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param divisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param totalVotesCastComparator comparison operator to use (optional)
     * @param totalVotesCastValueToCompare value to compare to with the operator provided (optional)
     * @param majorityComparator comparison operator to use (optional)
     * @param majorityValueToCompare value to compare to with the operator provided (optional)
     * @param skip The number of records to skip. Must be a positive integer. Default is 0 (optional, default to 0)
     * @param take The number of records to return per page. Must be more than 0. Default is 25 (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of divisions matching specified parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter was not valid </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Temporary error occured when trying to get division </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataDivisionsSearchGetAsync(String searchTerm, Integer memberId, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare, Integer skip, Integer take, final ApiCallback<List<DivisionViewModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataDivisionsSearchGetValidateBeforeCall(searchTerm, memberId, includeWhenMemberWasTeller, startDate, endDate, divisionNumber, totalVotesCastComparator, totalVotesCastValueToCompare, majorityComparator, majorityValueToCompare, skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<DivisionViewModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataDivisionsSearchTotalResultsGet
     * @param searchTerm Divisions containing search term within title or number (optional)
     * @param memberId Divisions returning Member with Member ID voting records (optional)
     * @param includeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param startDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param endDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param divisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param totalVotesCastComparator comparison operator to use (optional)
     * @param totalVotesCastValueToCompare value to compare to with the operator provided (optional)
     * @param majorityComparator comparison operator to use (optional)
     * @param majorityValueToCompare value to compare to with the operator provided (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Division with id matching given divisionId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> divisionId was not valid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataDivisionsSearchTotalResultsGetCall(String searchTerm, Integer memberId, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/Divisions/searchTotalResults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SearchTerm", searchTerm));
        }

        if (memberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MemberId", memberId));
        }

        if (includeWhenMemberWasTeller != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludeWhenMemberWasTeller", includeWhenMemberWasTeller));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (divisionNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DivisionNumber", divisionNumber));
        }

        if (totalVotesCastComparator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TotalVotesCast.Comparator", totalVotesCastComparator));
        }

        if (totalVotesCastValueToCompare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TotalVotesCast.ValueToCompare", totalVotesCastValueToCompare));
        }

        if (majorityComparator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Majority.Comparator", majorityComparator));
        }

        if (majorityValueToCompare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Majority.ValueToCompare", majorityValueToCompare));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataDivisionsSearchTotalResultsGetValidateBeforeCall(String searchTerm, Integer memberId, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare, final ApiCallback _callback) throws ApiException {
        return dataDivisionsSearchTotalResultsGetCall(searchTerm, memberId, includeWhenMemberWasTeller, startDate, endDate, divisionNumber, totalVotesCastComparator, totalVotesCastValueToCompare, majorityComparator, majorityValueToCompare, _callback);

    }

    /**
     * Return total results count
     * Get total count of Divisions meeting the specified query, useful for paging lists etc...
     * @param searchTerm Divisions containing search term within title or number (optional)
     * @param memberId Divisions returning Member with Member ID voting records (optional)
     * @param includeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param startDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param endDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param divisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param totalVotesCastComparator comparison operator to use (optional)
     * @param totalVotesCastValueToCompare value to compare to with the operator provided (optional)
     * @param majorityComparator comparison operator to use (optional)
     * @param majorityValueToCompare value to compare to with the operator provided (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Division with id matching given divisionId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> divisionId was not valid </td><td>  -  </td></tr>
     </table>
     */
    public Integer dataDivisionsSearchTotalResultsGet(String searchTerm, Integer memberId, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare) throws ApiException {
        ApiResponse<Integer> localVarResp = dataDivisionsSearchTotalResultsGetWithHttpInfo(searchTerm, memberId, includeWhenMemberWasTeller, startDate, endDate, divisionNumber, totalVotesCastComparator, totalVotesCastValueToCompare, majorityComparator, majorityValueToCompare);
        return localVarResp.getData();
    }

    /**
     * Return total results count
     * Get total count of Divisions meeting the specified query, useful for paging lists etc...
     * @param searchTerm Divisions containing search term within title or number (optional)
     * @param memberId Divisions returning Member with Member ID voting records (optional)
     * @param includeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param startDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param endDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param divisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param totalVotesCastComparator comparison operator to use (optional)
     * @param totalVotesCastValueToCompare value to compare to with the operator provided (optional)
     * @param majorityComparator comparison operator to use (optional)
     * @param majorityValueToCompare value to compare to with the operator provided (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Division with id matching given divisionId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> divisionId was not valid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> dataDivisionsSearchTotalResultsGetWithHttpInfo(String searchTerm, Integer memberId, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare) throws ApiException {
        okhttp3.Call localVarCall = dataDivisionsSearchTotalResultsGetValidateBeforeCall(searchTerm, memberId, includeWhenMemberWasTeller, startDate, endDate, divisionNumber, totalVotesCastComparator, totalVotesCastValueToCompare, majorityComparator, majorityValueToCompare, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return total results count (asynchronously)
     * Get total count of Divisions meeting the specified query, useful for paging lists etc...
     * @param searchTerm Divisions containing search term within title or number (optional)
     * @param memberId Divisions returning Member with Member ID voting records (optional)
     * @param includeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param startDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param endDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param divisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param totalVotesCastComparator comparison operator to use (optional)
     * @param totalVotesCastValueToCompare value to compare to with the operator provided (optional)
     * @param majorityComparator comparison operator to use (optional)
     * @param majorityValueToCompare value to compare to with the operator provided (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Division with id matching given divisionId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> divisionId was not valid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataDivisionsSearchTotalResultsGetAsync(String searchTerm, Integer memberId, Boolean includeWhenMemberWasTeller, OffsetDateTime startDate, OffsetDateTime endDate, Integer divisionNumber, Comparators totalVotesCastComparator, Integer totalVotesCastValueToCompare, Comparators majorityComparator, Integer majorityValueToCompare, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataDivisionsSearchTotalResultsGetValidateBeforeCall(searchTerm, memberId, includeWhenMemberWasTeller, startDate, endDate, divisionNumber, totalVotesCastComparator, totalVotesCastValueToCompare, majorityComparator, majorityValueToCompare, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
