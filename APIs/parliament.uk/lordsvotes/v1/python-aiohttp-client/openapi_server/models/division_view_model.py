# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.member_view_model import MemberViewModel
from openapi_server import util


class DivisionViewModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amendment_motion_notes: str=None, authoritative_content_count: int=None, authoritative_not_content_count: int=None, content_tellers: List[MemberViewModel]=None, contents: List[MemberViewModel]=None, _date: datetime=None, division_had_tellers: bool=None, division_id: int=None, division_was_exclusively_remote: bool=None, is_government_content: bool=None, is_government_win: bool=None, is_house: bool=None, is_whipped: bool=None, member_content_count: int=None, member_not_content_count: int=None, not_content_tellers: List[MemberViewModel]=None, not_contents: List[MemberViewModel]=None, notes: str=None, number: int=None, remote_voting_end: datetime=None, remote_voting_start: datetime=None, sponsoring_member_id: int=None, teller_content_count: int=None, teller_not_content_count: int=None, title: str=None):
        """DivisionViewModel - a model defined in OpenAPI

        :param amendment_motion_notes: The amendment_motion_notes of this DivisionViewModel.
        :param authoritative_content_count: The authoritative_content_count of this DivisionViewModel.
        :param authoritative_not_content_count: The authoritative_not_content_count of this DivisionViewModel.
        :param content_tellers: The content_tellers of this DivisionViewModel.
        :param contents: The contents of this DivisionViewModel.
        :param _date: The _date of this DivisionViewModel.
        :param division_had_tellers: The division_had_tellers of this DivisionViewModel.
        :param division_id: The division_id of this DivisionViewModel.
        :param division_was_exclusively_remote: The division_was_exclusively_remote of this DivisionViewModel.
        :param is_government_content: The is_government_content of this DivisionViewModel.
        :param is_government_win: The is_government_win of this DivisionViewModel.
        :param is_house: The is_house of this DivisionViewModel.
        :param is_whipped: The is_whipped of this DivisionViewModel.
        :param member_content_count: The member_content_count of this DivisionViewModel.
        :param member_not_content_count: The member_not_content_count of this DivisionViewModel.
        :param not_content_tellers: The not_content_tellers of this DivisionViewModel.
        :param not_contents: The not_contents of this DivisionViewModel.
        :param notes: The notes of this DivisionViewModel.
        :param number: The number of this DivisionViewModel.
        :param remote_voting_end: The remote_voting_end of this DivisionViewModel.
        :param remote_voting_start: The remote_voting_start of this DivisionViewModel.
        :param sponsoring_member_id: The sponsoring_member_id of this DivisionViewModel.
        :param teller_content_count: The teller_content_count of this DivisionViewModel.
        :param teller_not_content_count: The teller_not_content_count of this DivisionViewModel.
        :param title: The title of this DivisionViewModel.
        """
        self.openapi_types = {
            'amendment_motion_notes': str,
            'authoritative_content_count': int,
            'authoritative_not_content_count': int,
            'content_tellers': List[MemberViewModel],
            'contents': List[MemberViewModel],
            '_date': datetime,
            'division_had_tellers': bool,
            'division_id': int,
            'division_was_exclusively_remote': bool,
            'is_government_content': bool,
            'is_government_win': bool,
            'is_house': bool,
            'is_whipped': bool,
            'member_content_count': int,
            'member_not_content_count': int,
            'not_content_tellers': List[MemberViewModel],
            'not_contents': List[MemberViewModel],
            'notes': str,
            'number': int,
            'remote_voting_end': datetime,
            'remote_voting_start': datetime,
            'sponsoring_member_id': int,
            'teller_content_count': int,
            'teller_not_content_count': int,
            'title': str
        }

        self.attribute_map = {
            'amendment_motion_notes': 'amendmentMotionNotes',
            'authoritative_content_count': 'authoritativeContentCount',
            'authoritative_not_content_count': 'authoritativeNotContentCount',
            'content_tellers': 'contentTellers',
            'contents': 'contents',
            '_date': 'date',
            'division_had_tellers': 'divisionHadTellers',
            'division_id': 'divisionId',
            'division_was_exclusively_remote': 'divisionWasExclusivelyRemote',
            'is_government_content': 'isGovernmentContent',
            'is_government_win': 'isGovernmentWin',
            'is_house': 'isHouse',
            'is_whipped': 'isWhipped',
            'member_content_count': 'memberContentCount',
            'member_not_content_count': 'memberNotContentCount',
            'not_content_tellers': 'notContentTellers',
            'not_contents': 'notContents',
            'notes': 'notes',
            'number': 'number',
            'remote_voting_end': 'remoteVotingEnd',
            'remote_voting_start': 'remoteVotingStart',
            'sponsoring_member_id': 'sponsoringMemberId',
            'teller_content_count': 'tellerContentCount',
            'teller_not_content_count': 'tellerNotContentCount',
            'title': 'title'
        }

        self._amendment_motion_notes = amendment_motion_notes
        self._authoritative_content_count = authoritative_content_count
        self._authoritative_not_content_count = authoritative_not_content_count
        self._content_tellers = content_tellers
        self._contents = contents
        self.__date = _date
        self._division_had_tellers = division_had_tellers
        self._division_id = division_id
        self._division_was_exclusively_remote = division_was_exclusively_remote
        self._is_government_content = is_government_content
        self._is_government_win = is_government_win
        self._is_house = is_house
        self._is_whipped = is_whipped
        self._member_content_count = member_content_count
        self._member_not_content_count = member_not_content_count
        self._not_content_tellers = not_content_tellers
        self._not_contents = not_contents
        self._notes = notes
        self._number = number
        self._remote_voting_end = remote_voting_end
        self._remote_voting_start = remote_voting_start
        self._sponsoring_member_id = sponsoring_member_id
        self._teller_content_count = teller_content_count
        self._teller_not_content_count = teller_not_content_count
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DivisionViewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DivisionViewModel of this DivisionViewModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amendment_motion_notes(self):
        """Gets the amendment_motion_notes of this DivisionViewModel.


        :return: The amendment_motion_notes of this DivisionViewModel.
        :rtype: str
        """
        return self._amendment_motion_notes

    @amendment_motion_notes.setter
    def amendment_motion_notes(self, amendment_motion_notes):
        """Sets the amendment_motion_notes of this DivisionViewModel.


        :param amendment_motion_notes: The amendment_motion_notes of this DivisionViewModel.
        :type amendment_motion_notes: str
        """

        self._amendment_motion_notes = amendment_motion_notes

    @property
    def authoritative_content_count(self):
        """Gets the authoritative_content_count of this DivisionViewModel.

        Authoritative content count is the official count. This is the teller content count when tellers are present, but member content count when there are no tellers.

        :return: The authoritative_content_count of this DivisionViewModel.
        :rtype: int
        """
        return self._authoritative_content_count

    @authoritative_content_count.setter
    def authoritative_content_count(self, authoritative_content_count):
        """Sets the authoritative_content_count of this DivisionViewModel.

        Authoritative content count is the official count. This is the teller content count when tellers are present, but member content count when there are no tellers.

        :param authoritative_content_count: The authoritative_content_count of this DivisionViewModel.
        :type authoritative_content_count: int
        """

        self._authoritative_content_count = authoritative_content_count

    @property
    def authoritative_not_content_count(self):
        """Gets the authoritative_not_content_count of this DivisionViewModel.

        Authoritative not content count is the official count. This is the teller not content count when tellers are present, but member not content count when there are no tellers.

        :return: The authoritative_not_content_count of this DivisionViewModel.
        :rtype: int
        """
        return self._authoritative_not_content_count

    @authoritative_not_content_count.setter
    def authoritative_not_content_count(self, authoritative_not_content_count):
        """Sets the authoritative_not_content_count of this DivisionViewModel.

        Authoritative not content count is the official count. This is the teller not content count when tellers are present, but member not content count when there are no tellers.

        :param authoritative_not_content_count: The authoritative_not_content_count of this DivisionViewModel.
        :type authoritative_not_content_count: int
        """

        self._authoritative_not_content_count = authoritative_not_content_count

    @property
    def content_tellers(self):
        """Gets the content_tellers of this DivisionViewModel.


        :return: The content_tellers of this DivisionViewModel.
        :rtype: List[MemberViewModel]
        """
        return self._content_tellers

    @content_tellers.setter
    def content_tellers(self, content_tellers):
        """Sets the content_tellers of this DivisionViewModel.


        :param content_tellers: The content_tellers of this DivisionViewModel.
        :type content_tellers: List[MemberViewModel]
        """

        self._content_tellers = content_tellers

    @property
    def contents(self):
        """Gets the contents of this DivisionViewModel.


        :return: The contents of this DivisionViewModel.
        :rtype: List[MemberViewModel]
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this DivisionViewModel.


        :param contents: The contents of this DivisionViewModel.
        :type contents: List[MemberViewModel]
        """

        self._contents = contents

    @property
    def _date(self):
        """Gets the _date of this DivisionViewModel.


        :return: The _date of this DivisionViewModel.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DivisionViewModel.


        :param _date: The _date of this DivisionViewModel.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def division_had_tellers(self):
        """Gets the division_had_tellers of this DivisionViewModel.

        Whether the division had tellers or not

        :return: The division_had_tellers of this DivisionViewModel.
        :rtype: bool
        """
        return self._division_had_tellers

    @division_had_tellers.setter
    def division_had_tellers(self, division_had_tellers):
        """Sets the division_had_tellers of this DivisionViewModel.

        Whether the division had tellers or not

        :param division_had_tellers: The division_had_tellers of this DivisionViewModel.
        :type division_had_tellers: bool
        """

        self._division_had_tellers = division_had_tellers

    @property
    def division_id(self):
        """Gets the division_id of this DivisionViewModel.


        :return: The division_id of this DivisionViewModel.
        :rtype: int
        """
        return self._division_id

    @division_id.setter
    def division_id(self, division_id):
        """Sets the division_id of this DivisionViewModel.


        :param division_id: The division_id of this DivisionViewModel.
        :type division_id: int
        """

        self._division_id = division_id

    @property
    def division_was_exclusively_remote(self):
        """Gets the division_was_exclusively_remote of this DivisionViewModel.


        :return: The division_was_exclusively_remote of this DivisionViewModel.
        :rtype: bool
        """
        return self._division_was_exclusively_remote

    @division_was_exclusively_remote.setter
    def division_was_exclusively_remote(self, division_was_exclusively_remote):
        """Sets the division_was_exclusively_remote of this DivisionViewModel.


        :param division_was_exclusively_remote: The division_was_exclusively_remote of this DivisionViewModel.
        :type division_was_exclusively_remote: bool
        """

        self._division_was_exclusively_remote = division_was_exclusively_remote

    @property
    def is_government_content(self):
        """Gets the is_government_content of this DivisionViewModel.


        :return: The is_government_content of this DivisionViewModel.
        :rtype: bool
        """
        return self._is_government_content

    @is_government_content.setter
    def is_government_content(self, is_government_content):
        """Sets the is_government_content of this DivisionViewModel.


        :param is_government_content: The is_government_content of this DivisionViewModel.
        :type is_government_content: bool
        """

        self._is_government_content = is_government_content

    @property
    def is_government_win(self):
        """Gets the is_government_win of this DivisionViewModel.


        :return: The is_government_win of this DivisionViewModel.
        :rtype: bool
        """
        return self._is_government_win

    @is_government_win.setter
    def is_government_win(self, is_government_win):
        """Sets the is_government_win of this DivisionViewModel.


        :param is_government_win: The is_government_win of this DivisionViewModel.
        :type is_government_win: bool
        """

        self._is_government_win = is_government_win

    @property
    def is_house(self):
        """Gets the is_house of this DivisionViewModel.


        :return: The is_house of this DivisionViewModel.
        :rtype: bool
        """
        return self._is_house

    @is_house.setter
    def is_house(self, is_house):
        """Sets the is_house of this DivisionViewModel.


        :param is_house: The is_house of this DivisionViewModel.
        :type is_house: bool
        """

        self._is_house = is_house

    @property
    def is_whipped(self):
        """Gets the is_whipped of this DivisionViewModel.


        :return: The is_whipped of this DivisionViewModel.
        :rtype: bool
        """
        return self._is_whipped

    @is_whipped.setter
    def is_whipped(self, is_whipped):
        """Sets the is_whipped of this DivisionViewModel.


        :param is_whipped: The is_whipped of this DivisionViewModel.
        :type is_whipped: bool
        """

        self._is_whipped = is_whipped

    @property
    def member_content_count(self):
        """Gets the member_content_count of this DivisionViewModel.

        Member content count is the total tally of all members that voted content

        :return: The member_content_count of this DivisionViewModel.
        :rtype: int
        """
        return self._member_content_count

    @member_content_count.setter
    def member_content_count(self, member_content_count):
        """Sets the member_content_count of this DivisionViewModel.

        Member content count is the total tally of all members that voted content

        :param member_content_count: The member_content_count of this DivisionViewModel.
        :type member_content_count: int
        """

        self._member_content_count = member_content_count

    @property
    def member_not_content_count(self):
        """Gets the member_not_content_count of this DivisionViewModel.

        Member not content count is the total tally of all members that voted not content

        :return: The member_not_content_count of this DivisionViewModel.
        :rtype: int
        """
        return self._member_not_content_count

    @member_not_content_count.setter
    def member_not_content_count(self, member_not_content_count):
        """Sets the member_not_content_count of this DivisionViewModel.

        Member not content count is the total tally of all members that voted not content

        :param member_not_content_count: The member_not_content_count of this DivisionViewModel.
        :type member_not_content_count: int
        """

        self._member_not_content_count = member_not_content_count

    @property
    def not_content_tellers(self):
        """Gets the not_content_tellers of this DivisionViewModel.


        :return: The not_content_tellers of this DivisionViewModel.
        :rtype: List[MemberViewModel]
        """
        return self._not_content_tellers

    @not_content_tellers.setter
    def not_content_tellers(self, not_content_tellers):
        """Sets the not_content_tellers of this DivisionViewModel.


        :param not_content_tellers: The not_content_tellers of this DivisionViewModel.
        :type not_content_tellers: List[MemberViewModel]
        """

        self._not_content_tellers = not_content_tellers

    @property
    def not_contents(self):
        """Gets the not_contents of this DivisionViewModel.


        :return: The not_contents of this DivisionViewModel.
        :rtype: List[MemberViewModel]
        """
        return self._not_contents

    @not_contents.setter
    def not_contents(self, not_contents):
        """Sets the not_contents of this DivisionViewModel.


        :param not_contents: The not_contents of this DivisionViewModel.
        :type not_contents: List[MemberViewModel]
        """

        self._not_contents = not_contents

    @property
    def notes(self):
        """Gets the notes of this DivisionViewModel.


        :return: The notes of this DivisionViewModel.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this DivisionViewModel.


        :param notes: The notes of this DivisionViewModel.
        :type notes: str
        """

        self._notes = notes

    @property
    def number(self):
        """Gets the number of this DivisionViewModel.


        :return: The number of this DivisionViewModel.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this DivisionViewModel.


        :param number: The number of this DivisionViewModel.
        :type number: int
        """

        self._number = number

    @property
    def remote_voting_end(self):
        """Gets the remote_voting_end of this DivisionViewModel.


        :return: The remote_voting_end of this DivisionViewModel.
        :rtype: datetime
        """
        return self._remote_voting_end

    @remote_voting_end.setter
    def remote_voting_end(self, remote_voting_end):
        """Sets the remote_voting_end of this DivisionViewModel.


        :param remote_voting_end: The remote_voting_end of this DivisionViewModel.
        :type remote_voting_end: datetime
        """

        self._remote_voting_end = remote_voting_end

    @property
    def remote_voting_start(self):
        """Gets the remote_voting_start of this DivisionViewModel.


        :return: The remote_voting_start of this DivisionViewModel.
        :rtype: datetime
        """
        return self._remote_voting_start

    @remote_voting_start.setter
    def remote_voting_start(self, remote_voting_start):
        """Sets the remote_voting_start of this DivisionViewModel.


        :param remote_voting_start: The remote_voting_start of this DivisionViewModel.
        :type remote_voting_start: datetime
        """

        self._remote_voting_start = remote_voting_start

    @property
    def sponsoring_member_id(self):
        """Gets the sponsoring_member_id of this DivisionViewModel.


        :return: The sponsoring_member_id of this DivisionViewModel.
        :rtype: int
        """
        return self._sponsoring_member_id

    @sponsoring_member_id.setter
    def sponsoring_member_id(self, sponsoring_member_id):
        """Sets the sponsoring_member_id of this DivisionViewModel.


        :param sponsoring_member_id: The sponsoring_member_id of this DivisionViewModel.
        :type sponsoring_member_id: int
        """

        self._sponsoring_member_id = sponsoring_member_id

    @property
    def teller_content_count(self):
        """Gets the teller_content_count of this DivisionViewModel.

        Content count is count recorded by the tellers

        :return: The teller_content_count of this DivisionViewModel.
        :rtype: int
        """
        return self._teller_content_count

    @teller_content_count.setter
    def teller_content_count(self, teller_content_count):
        """Sets the teller_content_count of this DivisionViewModel.

        Content count is count recorded by the tellers

        :param teller_content_count: The teller_content_count of this DivisionViewModel.
        :type teller_content_count: int
        """

        self._teller_content_count = teller_content_count

    @property
    def teller_not_content_count(self):
        """Gets the teller_not_content_count of this DivisionViewModel.

        Not Content count recorded by the tellers

        :return: The teller_not_content_count of this DivisionViewModel.
        :rtype: int
        """
        return self._teller_not_content_count

    @teller_not_content_count.setter
    def teller_not_content_count(self, teller_not_content_count):
        """Sets the teller_not_content_count of this DivisionViewModel.

        Not Content count recorded by the tellers

        :param teller_not_content_count: The teller_not_content_count of this DivisionViewModel.
        :type teller_not_content_count: int
        """

        self._teller_not_content_count = teller_not_content_count

    @property
    def title(self):
        """Gets the title of this DivisionViewModel.


        :return: The title of this DivisionViewModel.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DivisionViewModel.


        :param title: The title of this DivisionViewModel.
        :type title: str
        """

        self._title = title
