# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MemberViewModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, list_as: str=None, member_from: str=None, member_id: int=None, name: str=None, party: str=None, party_abbreviation: str=None, party_colour: str=None, party_is_main_party: bool=None):
        """MemberViewModel - a model defined in OpenAPI

        :param list_as: The list_as of this MemberViewModel.
        :param member_from: The member_from of this MemberViewModel.
        :param member_id: The member_id of this MemberViewModel.
        :param name: The name of this MemberViewModel.
        :param party: The party of this MemberViewModel.
        :param party_abbreviation: The party_abbreviation of this MemberViewModel.
        :param party_colour: The party_colour of this MemberViewModel.
        :param party_is_main_party: The party_is_main_party of this MemberViewModel.
        """
        self.openapi_types = {
            'list_as': str,
            'member_from': str,
            'member_id': int,
            'name': str,
            'party': str,
            'party_abbreviation': str,
            'party_colour': str,
            'party_is_main_party': bool
        }

        self.attribute_map = {
            'list_as': 'listAs',
            'member_from': 'memberFrom',
            'member_id': 'memberId',
            'name': 'name',
            'party': 'party',
            'party_abbreviation': 'partyAbbreviation',
            'party_colour': 'partyColour',
            'party_is_main_party': 'partyIsMainParty'
        }

        self._list_as = list_as
        self._member_from = member_from
        self._member_id = member_id
        self._name = name
        self._party = party
        self._party_abbreviation = party_abbreviation
        self._party_colour = party_colour
        self._party_is_main_party = party_is_main_party

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MemberViewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MemberViewModel of this MemberViewModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def list_as(self):
        """Gets the list_as of this MemberViewModel.


        :return: The list_as of this MemberViewModel.
        :rtype: str
        """
        return self._list_as

    @list_as.setter
    def list_as(self, list_as):
        """Sets the list_as of this MemberViewModel.


        :param list_as: The list_as of this MemberViewModel.
        :type list_as: str
        """

        self._list_as = list_as

    @property
    def member_from(self):
        """Gets the member_from of this MemberViewModel.


        :return: The member_from of this MemberViewModel.
        :rtype: str
        """
        return self._member_from

    @member_from.setter
    def member_from(self, member_from):
        """Sets the member_from of this MemberViewModel.


        :param member_from: The member_from of this MemberViewModel.
        :type member_from: str
        """

        self._member_from = member_from

    @property
    def member_id(self):
        """Gets the member_id of this MemberViewModel.


        :return: The member_id of this MemberViewModel.
        :rtype: int
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this MemberViewModel.


        :param member_id: The member_id of this MemberViewModel.
        :type member_id: int
        """

        self._member_id = member_id

    @property
    def name(self):
        """Gets the name of this MemberViewModel.


        :return: The name of this MemberViewModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MemberViewModel.


        :param name: The name of this MemberViewModel.
        :type name: str
        """

        self._name = name

    @property
    def party(self):
        """Gets the party of this MemberViewModel.


        :return: The party of this MemberViewModel.
        :rtype: str
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this MemberViewModel.


        :param party: The party of this MemberViewModel.
        :type party: str
        """

        self._party = party

    @property
    def party_abbreviation(self):
        """Gets the party_abbreviation of this MemberViewModel.


        :return: The party_abbreviation of this MemberViewModel.
        :rtype: str
        """
        return self._party_abbreviation

    @party_abbreviation.setter
    def party_abbreviation(self, party_abbreviation):
        """Sets the party_abbreviation of this MemberViewModel.


        :param party_abbreviation: The party_abbreviation of this MemberViewModel.
        :type party_abbreviation: str
        """

        self._party_abbreviation = party_abbreviation

    @property
    def party_colour(self):
        """Gets the party_colour of this MemberViewModel.


        :return: The party_colour of this MemberViewModel.
        :rtype: str
        """
        return self._party_colour

    @party_colour.setter
    def party_colour(self, party_colour):
        """Sets the party_colour of this MemberViewModel.


        :param party_colour: The party_colour of this MemberViewModel.
        :type party_colour: str
        """

        self._party_colour = party_colour

    @property
    def party_is_main_party(self):
        """Gets the party_is_main_party of this MemberViewModel.


        :return: The party_is_main_party of this MemberViewModel.
        :rtype: bool
        """
        return self._party_is_main_party

    @party_is_main_party.setter
    def party_is_main_party(self, party_is_main_party):
        """Sets the party_is_main_party of this MemberViewModel.


        :param party_is_main_party: The party_is_main_party of this MemberViewModel.
        :type party_is_main_party: bool
        """

        self._party_is_main_party = party_is_main_party
