# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.party_vote_result_view_model import PartyVoteResultViewModel
from openapi_server import util


class DivisionGroupByPartyViewModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: List[PartyVoteResultViewModel]=None, content_count: int=None, _date: datetime=None, division_id: int=None, not_content: List[PartyVoteResultViewModel]=None, not_content_count: int=None, number: int=None, title: str=None):
        """DivisionGroupByPartyViewModel - a model defined in OpenAPI

        :param content: The content of this DivisionGroupByPartyViewModel.
        :param content_count: The content_count of this DivisionGroupByPartyViewModel.
        :param _date: The _date of this DivisionGroupByPartyViewModel.
        :param division_id: The division_id of this DivisionGroupByPartyViewModel.
        :param not_content: The not_content of this DivisionGroupByPartyViewModel.
        :param not_content_count: The not_content_count of this DivisionGroupByPartyViewModel.
        :param number: The number of this DivisionGroupByPartyViewModel.
        :param title: The title of this DivisionGroupByPartyViewModel.
        """
        self.openapi_types = {
            'content': List[PartyVoteResultViewModel],
            'content_count': int,
            '_date': datetime,
            'division_id': int,
            'not_content': List[PartyVoteResultViewModel],
            'not_content_count': int,
            'number': int,
            'title': str
        }

        self.attribute_map = {
            'content': 'content',
            'content_count': 'contentCount',
            '_date': 'date',
            'division_id': 'divisionId',
            'not_content': 'notContent',
            'not_content_count': 'notContentCount',
            'number': 'number',
            'title': 'title'
        }

        self._content = content
        self._content_count = content_count
        self.__date = _date
        self._division_id = division_id
        self._not_content = not_content
        self._not_content_count = not_content_count
        self._number = number
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DivisionGroupByPartyViewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DivisionGroupByPartyViewModel of this DivisionGroupByPartyViewModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this DivisionGroupByPartyViewModel.


        :return: The content of this DivisionGroupByPartyViewModel.
        :rtype: List[PartyVoteResultViewModel]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this DivisionGroupByPartyViewModel.


        :param content: The content of this DivisionGroupByPartyViewModel.
        :type content: List[PartyVoteResultViewModel]
        """

        self._content = content

    @property
    def content_count(self):
        """Gets the content_count of this DivisionGroupByPartyViewModel.


        :return: The content_count of this DivisionGroupByPartyViewModel.
        :rtype: int
        """
        return self._content_count

    @content_count.setter
    def content_count(self, content_count):
        """Sets the content_count of this DivisionGroupByPartyViewModel.


        :param content_count: The content_count of this DivisionGroupByPartyViewModel.
        :type content_count: int
        """

        self._content_count = content_count

    @property
    def _date(self):
        """Gets the _date of this DivisionGroupByPartyViewModel.


        :return: The _date of this DivisionGroupByPartyViewModel.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DivisionGroupByPartyViewModel.


        :param _date: The _date of this DivisionGroupByPartyViewModel.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def division_id(self):
        """Gets the division_id of this DivisionGroupByPartyViewModel.


        :return: The division_id of this DivisionGroupByPartyViewModel.
        :rtype: int
        """
        return self._division_id

    @division_id.setter
    def division_id(self, division_id):
        """Sets the division_id of this DivisionGroupByPartyViewModel.


        :param division_id: The division_id of this DivisionGroupByPartyViewModel.
        :type division_id: int
        """

        self._division_id = division_id

    @property
    def not_content(self):
        """Gets the not_content of this DivisionGroupByPartyViewModel.


        :return: The not_content of this DivisionGroupByPartyViewModel.
        :rtype: List[PartyVoteResultViewModel]
        """
        return self._not_content

    @not_content.setter
    def not_content(self, not_content):
        """Sets the not_content of this DivisionGroupByPartyViewModel.


        :param not_content: The not_content of this DivisionGroupByPartyViewModel.
        :type not_content: List[PartyVoteResultViewModel]
        """

        self._not_content = not_content

    @property
    def not_content_count(self):
        """Gets the not_content_count of this DivisionGroupByPartyViewModel.


        :return: The not_content_count of this DivisionGroupByPartyViewModel.
        :rtype: int
        """
        return self._not_content_count

    @not_content_count.setter
    def not_content_count(self, not_content_count):
        """Sets the not_content_count of this DivisionGroupByPartyViewModel.


        :param not_content_count: The not_content_count of this DivisionGroupByPartyViewModel.
        :type not_content_count: int
        """

        self._not_content_count = not_content_count

    @property
    def number(self):
        """Gets the number of this DivisionGroupByPartyViewModel.


        :return: The number of this DivisionGroupByPartyViewModel.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this DivisionGroupByPartyViewModel.


        :param number: The number of this DivisionGroupByPartyViewModel.
        :type number: int
        """

        self._number = number

    @property
    def title(self):
        """Gets the title of this DivisionGroupByPartyViewModel.


        :return: The title of this DivisionGroupByPartyViewModel.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DivisionGroupByPartyViewModel.


        :param title: The title of this DivisionGroupByPartyViewModel.
        :type title: str
        """

        self._title = title
