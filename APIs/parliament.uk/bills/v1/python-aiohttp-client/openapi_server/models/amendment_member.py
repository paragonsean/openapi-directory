# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.house import House
from openapi_server import util


class AmendmentMember(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, house: House=None, is_lead: bool=None, member_from: str=None, member_id: int=None, member_page: str=None, member_photo: str=None, name: str=None, party: str=None, party_colour: str=None, sort_order: int=None):
        """AmendmentMember - a model defined in OpenAPI

        :param house: The house of this AmendmentMember.
        :param is_lead: The is_lead of this AmendmentMember.
        :param member_from: The member_from of this AmendmentMember.
        :param member_id: The member_id of this AmendmentMember.
        :param member_page: The member_page of this AmendmentMember.
        :param member_photo: The member_photo of this AmendmentMember.
        :param name: The name of this AmendmentMember.
        :param party: The party of this AmendmentMember.
        :param party_colour: The party_colour of this AmendmentMember.
        :param sort_order: The sort_order of this AmendmentMember.
        """
        self.openapi_types = {
            'house': House,
            'is_lead': bool,
            'member_from': str,
            'member_id': int,
            'member_page': str,
            'member_photo': str,
            'name': str,
            'party': str,
            'party_colour': str,
            'sort_order': int
        }

        self.attribute_map = {
            'house': 'house',
            'is_lead': 'isLead',
            'member_from': 'memberFrom',
            'member_id': 'memberId',
            'member_page': 'memberPage',
            'member_photo': 'memberPhoto',
            'name': 'name',
            'party': 'party',
            'party_colour': 'partyColour',
            'sort_order': 'sortOrder'
        }

        self._house = house
        self._is_lead = is_lead
        self._member_from = member_from
        self._member_id = member_id
        self._member_page = member_page
        self._member_photo = member_photo
        self._name = name
        self._party = party
        self._party_colour = party_colour
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AmendmentMember':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AmendmentMember of this AmendmentMember.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def house(self):
        """Gets the house of this AmendmentMember.


        :return: The house of this AmendmentMember.
        :rtype: House
        """
        return self._house

    @house.setter
    def house(self, house):
        """Sets the house of this AmendmentMember.


        :param house: The house of this AmendmentMember.
        :type house: House
        """

        self._house = house

    @property
    def is_lead(self):
        """Gets the is_lead of this AmendmentMember.


        :return: The is_lead of this AmendmentMember.
        :rtype: bool
        """
        return self._is_lead

    @is_lead.setter
    def is_lead(self, is_lead):
        """Sets the is_lead of this AmendmentMember.


        :param is_lead: The is_lead of this AmendmentMember.
        :type is_lead: bool
        """

        self._is_lead = is_lead

    @property
    def member_from(self):
        """Gets the member_from of this AmendmentMember.


        :return: The member_from of this AmendmentMember.
        :rtype: str
        """
        return self._member_from

    @member_from.setter
    def member_from(self, member_from):
        """Sets the member_from of this AmendmentMember.


        :param member_from: The member_from of this AmendmentMember.
        :type member_from: str
        """

        self._member_from = member_from

    @property
    def member_id(self):
        """Gets the member_id of this AmendmentMember.


        :return: The member_id of this AmendmentMember.
        :rtype: int
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this AmendmentMember.


        :param member_id: The member_id of this AmendmentMember.
        :type member_id: int
        """

        self._member_id = member_id

    @property
    def member_page(self):
        """Gets the member_page of this AmendmentMember.


        :return: The member_page of this AmendmentMember.
        :rtype: str
        """
        return self._member_page

    @member_page.setter
    def member_page(self, member_page):
        """Sets the member_page of this AmendmentMember.


        :param member_page: The member_page of this AmendmentMember.
        :type member_page: str
        """

        self._member_page = member_page

    @property
    def member_photo(self):
        """Gets the member_photo of this AmendmentMember.


        :return: The member_photo of this AmendmentMember.
        :rtype: str
        """
        return self._member_photo

    @member_photo.setter
    def member_photo(self, member_photo):
        """Sets the member_photo of this AmendmentMember.


        :param member_photo: The member_photo of this AmendmentMember.
        :type member_photo: str
        """

        self._member_photo = member_photo

    @property
    def name(self):
        """Gets the name of this AmendmentMember.


        :return: The name of this AmendmentMember.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AmendmentMember.


        :param name: The name of this AmendmentMember.
        :type name: str
        """

        self._name = name

    @property
    def party(self):
        """Gets the party of this AmendmentMember.


        :return: The party of this AmendmentMember.
        :rtype: str
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this AmendmentMember.


        :param party: The party of this AmendmentMember.
        :type party: str
        """

        self._party = party

    @property
    def party_colour(self):
        """Gets the party_colour of this AmendmentMember.


        :return: The party_colour of this AmendmentMember.
        :rtype: str
        """
        return self._party_colour

    @party_colour.setter
    def party_colour(self, party_colour):
        """Sets the party_colour of this AmendmentMember.


        :param party_colour: The party_colour of this AmendmentMember.
        :type party_colour: str
        """

        self._party_colour = party_colour

    @property
    def sort_order(self):
        """Gets the sort_order of this AmendmentMember.


        :return: The sort_order of this AmendmentMember.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this AmendmentMember.


        :param sort_order: The sort_order of this AmendmentMember.
        :type sort_order: int
        """

        self._sort_order = sort_order
