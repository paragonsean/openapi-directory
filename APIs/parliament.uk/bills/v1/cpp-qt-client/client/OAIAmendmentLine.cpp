/**
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmendmentLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmendmentLine::OAIAmendmentLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmendmentLine::OAIAmendmentLine() {
    this->initializeModel();
}

OAIAmendmentLine::~OAIAmendmentLine() {}

void OAIAmendmentLine::initializeModel() {

    m_hanging_indentation_isSet = false;
    m_hanging_indentation_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_indentation_isSet = false;
    m_indentation_isValid = false;

    m_is_image_isSet = false;
    m_is_image_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIAmendmentLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmendmentLine::fromJsonObject(QJsonObject json) {

    m_hanging_indentation_isValid = ::OpenAPI::fromJsonValue(m_hanging_indentation, json[QString("hangingIndentation")]);
    m_hanging_indentation_isSet = !json[QString("hangingIndentation")].isNull() && m_hanging_indentation_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(m_image_type, json[QString("imageType")]);
    m_image_type_isSet = !json[QString("imageType")].isNull() && m_image_type_isValid;

    m_indentation_isValid = ::OpenAPI::fromJsonValue(m_indentation, json[QString("indentation")]);
    m_indentation_isSet = !json[QString("indentation")].isNull() && m_indentation_isValid;

    m_is_image_isValid = ::OpenAPI::fromJsonValue(m_is_image, json[QString("isImage")]);
    m_is_image_isSet = !json[QString("isImage")].isNull() && m_is_image_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIAmendmentLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmendmentLine::asJsonObject() const {
    QJsonObject obj;
    if (m_hanging_indentation_isSet) {
        obj.insert(QString("hangingIndentation"), ::OpenAPI::toJsonValue(m_hanging_indentation));
    }
    if (m_image_type_isSet) {
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(m_image_type));
    }
    if (m_indentation_isSet) {
        obj.insert(QString("indentation"), ::OpenAPI::toJsonValue(m_indentation));
    }
    if (m_is_image_isSet) {
        obj.insert(QString("isImage"), ::OpenAPI::toJsonValue(m_is_image));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIAmendmentLine::getHangingIndentation() const {
    return m_hanging_indentation;
}
void OAIAmendmentLine::setHangingIndentation(const QString &hanging_indentation) {
    m_hanging_indentation = hanging_indentation;
    m_hanging_indentation_isSet = true;
}

bool OAIAmendmentLine::is_hanging_indentation_Set() const{
    return m_hanging_indentation_isSet;
}

bool OAIAmendmentLine::is_hanging_indentation_Valid() const{
    return m_hanging_indentation_isValid;
}

QString OAIAmendmentLine::getImageType() const {
    return m_image_type;
}
void OAIAmendmentLine::setImageType(const QString &image_type) {
    m_image_type = image_type;
    m_image_type_isSet = true;
}

bool OAIAmendmentLine::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAIAmendmentLine::is_image_type_Valid() const{
    return m_image_type_isValid;
}

qint32 OAIAmendmentLine::getIndentation() const {
    return m_indentation;
}
void OAIAmendmentLine::setIndentation(const qint32 &indentation) {
    m_indentation = indentation;
    m_indentation_isSet = true;
}

bool OAIAmendmentLine::is_indentation_Set() const{
    return m_indentation_isSet;
}

bool OAIAmendmentLine::is_indentation_Valid() const{
    return m_indentation_isValid;
}

bool OAIAmendmentLine::isIsImage() const {
    return m_is_image;
}
void OAIAmendmentLine::setIsImage(const bool &is_image) {
    m_is_image = is_image;
    m_is_image_isSet = true;
}

bool OAIAmendmentLine::is_is_image_Set() const{
    return m_is_image_isSet;
}

bool OAIAmendmentLine::is_is_image_Valid() const{
    return m_is_image_isValid;
}

QString OAIAmendmentLine::getText() const {
    return m_text;
}
void OAIAmendmentLine::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIAmendmentLine::is_text_Set() const{
    return m_text_isSet;
}

bool OAIAmendmentLine::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIAmendmentLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hanging_indentation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indentation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmendmentLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
