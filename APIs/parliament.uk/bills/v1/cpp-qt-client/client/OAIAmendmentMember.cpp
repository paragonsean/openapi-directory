/**
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmendmentMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmendmentMember::OAIAmendmentMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmendmentMember::OAIAmendmentMember() {
    this->initializeModel();
}

OAIAmendmentMember::~OAIAmendmentMember() {}

void OAIAmendmentMember::initializeModel() {

    m_house_isSet = false;
    m_house_isValid = false;

    m_is_lead_isSet = false;
    m_is_lead_isValid = false;

    m_member_from_isSet = false;
    m_member_from_isValid = false;

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_member_page_isSet = false;
    m_member_page_isValid = false;

    m_member_photo_isSet = false;
    m_member_photo_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_party_colour_isSet = false;
    m_party_colour_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIAmendmentMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmendmentMember::fromJsonObject(QJsonObject json) {

    m_house_isValid = ::OpenAPI::fromJsonValue(m_house, json[QString("house")]);
    m_house_isSet = !json[QString("house")].isNull() && m_house_isValid;

    m_is_lead_isValid = ::OpenAPI::fromJsonValue(m_is_lead, json[QString("isLead")]);
    m_is_lead_isSet = !json[QString("isLead")].isNull() && m_is_lead_isValid;

    m_member_from_isValid = ::OpenAPI::fromJsonValue(m_member_from, json[QString("memberFrom")]);
    m_member_from_isSet = !json[QString("memberFrom")].isNull() && m_member_from_isValid;

    m_member_id_isValid = ::OpenAPI::fromJsonValue(m_member_id, json[QString("memberId")]);
    m_member_id_isSet = !json[QString("memberId")].isNull() && m_member_id_isValid;

    m_member_page_isValid = ::OpenAPI::fromJsonValue(m_member_page, json[QString("memberPage")]);
    m_member_page_isSet = !json[QString("memberPage")].isNull() && m_member_page_isValid;

    m_member_photo_isValid = ::OpenAPI::fromJsonValue(m_member_photo, json[QString("memberPhoto")]);
    m_member_photo_isSet = !json[QString("memberPhoto")].isNull() && m_member_photo_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;

    m_party_colour_isValid = ::OpenAPI::fromJsonValue(m_party_colour, json[QString("partyColour")]);
    m_party_colour_isSet = !json[QString("partyColour")].isNull() && m_party_colour_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;
}

QString OAIAmendmentMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmendmentMember::asJsonObject() const {
    QJsonObject obj;
    if (m_house.isSet()) {
        obj.insert(QString("house"), ::OpenAPI::toJsonValue(m_house));
    }
    if (m_is_lead_isSet) {
        obj.insert(QString("isLead"), ::OpenAPI::toJsonValue(m_is_lead));
    }
    if (m_member_from_isSet) {
        obj.insert(QString("memberFrom"), ::OpenAPI::toJsonValue(m_member_from));
    }
    if (m_member_id_isSet) {
        obj.insert(QString("memberId"), ::OpenAPI::toJsonValue(m_member_id));
    }
    if (m_member_page_isSet) {
        obj.insert(QString("memberPage"), ::OpenAPI::toJsonValue(m_member_page));
    }
    if (m_member_photo_isSet) {
        obj.insert(QString("memberPhoto"), ::OpenAPI::toJsonValue(m_member_photo));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_party_isSet) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_party_colour_isSet) {
        obj.insert(QString("partyColour"), ::OpenAPI::toJsonValue(m_party_colour));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

OAIHouse OAIAmendmentMember::getHouse() const {
    return m_house;
}
void OAIAmendmentMember::setHouse(const OAIHouse &house) {
    m_house = house;
    m_house_isSet = true;
}

bool OAIAmendmentMember::is_house_Set() const{
    return m_house_isSet;
}

bool OAIAmendmentMember::is_house_Valid() const{
    return m_house_isValid;
}

bool OAIAmendmentMember::isIsLead() const {
    return m_is_lead;
}
void OAIAmendmentMember::setIsLead(const bool &is_lead) {
    m_is_lead = is_lead;
    m_is_lead_isSet = true;
}

bool OAIAmendmentMember::is_is_lead_Set() const{
    return m_is_lead_isSet;
}

bool OAIAmendmentMember::is_is_lead_Valid() const{
    return m_is_lead_isValid;
}

QString OAIAmendmentMember::getMemberFrom() const {
    return m_member_from;
}
void OAIAmendmentMember::setMemberFrom(const QString &member_from) {
    m_member_from = member_from;
    m_member_from_isSet = true;
}

bool OAIAmendmentMember::is_member_from_Set() const{
    return m_member_from_isSet;
}

bool OAIAmendmentMember::is_member_from_Valid() const{
    return m_member_from_isValid;
}

qint32 OAIAmendmentMember::getMemberId() const {
    return m_member_id;
}
void OAIAmendmentMember::setMemberId(const qint32 &member_id) {
    m_member_id = member_id;
    m_member_id_isSet = true;
}

bool OAIAmendmentMember::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAIAmendmentMember::is_member_id_Valid() const{
    return m_member_id_isValid;
}

QString OAIAmendmentMember::getMemberPage() const {
    return m_member_page;
}
void OAIAmendmentMember::setMemberPage(const QString &member_page) {
    m_member_page = member_page;
    m_member_page_isSet = true;
}

bool OAIAmendmentMember::is_member_page_Set() const{
    return m_member_page_isSet;
}

bool OAIAmendmentMember::is_member_page_Valid() const{
    return m_member_page_isValid;
}

QString OAIAmendmentMember::getMemberPhoto() const {
    return m_member_photo;
}
void OAIAmendmentMember::setMemberPhoto(const QString &member_photo) {
    m_member_photo = member_photo;
    m_member_photo_isSet = true;
}

bool OAIAmendmentMember::is_member_photo_Set() const{
    return m_member_photo_isSet;
}

bool OAIAmendmentMember::is_member_photo_Valid() const{
    return m_member_photo_isValid;
}

QString OAIAmendmentMember::getName() const {
    return m_name;
}
void OAIAmendmentMember::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAmendmentMember::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAmendmentMember::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAmendmentMember::getParty() const {
    return m_party;
}
void OAIAmendmentMember::setParty(const QString &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAIAmendmentMember::is_party_Set() const{
    return m_party_isSet;
}

bool OAIAmendmentMember::is_party_Valid() const{
    return m_party_isValid;
}

QString OAIAmendmentMember::getPartyColour() const {
    return m_party_colour;
}
void OAIAmendmentMember::setPartyColour(const QString &party_colour) {
    m_party_colour = party_colour;
    m_party_colour_isSet = true;
}

bool OAIAmendmentMember::is_party_colour_Set() const{
    return m_party_colour_isSet;
}

bool OAIAmendmentMember::is_party_colour_Valid() const{
    return m_party_colour_isValid;
}

qint32 OAIAmendmentMember::getSortOrder() const {
    return m_sort_order;
}
void OAIAmendmentMember::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIAmendmentMember::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIAmendmentMember::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIAmendmentMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_house.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_lead_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_photo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_colour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmendmentMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
