/**
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStageSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStageSummary::OAIStageSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStageSummary::OAIStageSummary() {
    this->initializeModel();
}

OAIStageSummary::~OAIStageSummary() {}

void OAIStageSummary::initializeModel() {

    m_abbreviation_isSet = false;
    m_abbreviation_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_house_isSet = false;
    m_house_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_stage_id_isSet = false;
    m_stage_id_isValid = false;

    m_stage_sittings_isSet = false;
    m_stage_sittings_isValid = false;
}

void OAIStageSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStageSummary::fromJsonObject(QJsonObject json) {

    m_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_abbreviation, json[QString("abbreviation")]);
    m_abbreviation_isSet = !json[QString("abbreviation")].isNull() && m_abbreviation_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_house_isValid = ::OpenAPI::fromJsonValue(m_house, json[QString("house")]);
    m_house_isSet = !json[QString("house")].isNull() && m_house_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_stage_id_isValid = ::OpenAPI::fromJsonValue(m_stage_id, json[QString("stageId")]);
    m_stage_id_isSet = !json[QString("stageId")].isNull() && m_stage_id_isValid;

    m_stage_sittings_isValid = ::OpenAPI::fromJsonValue(m_stage_sittings, json[QString("stageSittings")]);
    m_stage_sittings_isSet = !json[QString("stageSittings")].isNull() && m_stage_sittings_isValid;
}

QString OAIStageSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStageSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_abbreviation_isSet) {
        obj.insert(QString("abbreviation"), ::OpenAPI::toJsonValue(m_abbreviation));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_house.isSet()) {
        obj.insert(QString("house"), ::OpenAPI::toJsonValue(m_house));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_stage_id_isSet) {
        obj.insert(QString("stageId"), ::OpenAPI::toJsonValue(m_stage_id));
    }
    if (m_stage_sittings.size() > 0) {
        obj.insert(QString("stageSittings"), ::OpenAPI::toJsonValue(m_stage_sittings));
    }
    return obj;
}

QString OAIStageSummary::getAbbreviation() const {
    return m_abbreviation;
}
void OAIStageSummary::setAbbreviation(const QString &abbreviation) {
    m_abbreviation = abbreviation;
    m_abbreviation_isSet = true;
}

bool OAIStageSummary::is_abbreviation_Set() const{
    return m_abbreviation_isSet;
}

bool OAIStageSummary::is_abbreviation_Valid() const{
    return m_abbreviation_isValid;
}

QString OAIStageSummary::getDescription() const {
    return m_description;
}
void OAIStageSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStageSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStageSummary::is_description_Valid() const{
    return m_description_isValid;
}

OAIHouse OAIStageSummary::getHouse() const {
    return m_house;
}
void OAIStageSummary::setHouse(const OAIHouse &house) {
    m_house = house;
    m_house_isSet = true;
}

bool OAIStageSummary::is_house_Set() const{
    return m_house_isSet;
}

bool OAIStageSummary::is_house_Valid() const{
    return m_house_isValid;
}

qint32 OAIStageSummary::getId() const {
    return m_id;
}
void OAIStageSummary::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStageSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStageSummary::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIStageSummary::getSessionId() const {
    return m_session_id;
}
void OAIStageSummary::setSessionId(const qint32 &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIStageSummary::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIStageSummary::is_session_id_Valid() const{
    return m_session_id_isValid;
}

qint32 OAIStageSummary::getSortOrder() const {
    return m_sort_order;
}
void OAIStageSummary::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIStageSummary::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIStageSummary::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

qint32 OAIStageSummary::getStageId() const {
    return m_stage_id;
}
void OAIStageSummary::setStageId(const qint32 &stage_id) {
    m_stage_id = stage_id;
    m_stage_id_isSet = true;
}

bool OAIStageSummary::is_stage_id_Set() const{
    return m_stage_id_isSet;
}

bool OAIStageSummary::is_stage_id_Valid() const{
    return m_stage_id_isValid;
}

QList<OAIBillStageSitting> OAIStageSummary::getStageSittings() const {
    return m_stage_sittings;
}
void OAIStageSummary::setStageSittings(const QList<OAIBillStageSitting> &stage_sittings) {
    m_stage_sittings = stage_sittings;
    m_stage_sittings_isSet = true;
}

bool OAIStageSummary::is_stage_sittings_Set() const{
    return m_stage_sittings_isSet;
}

bool OAIStageSummary::is_stage_sittings_Valid() const{
    return m_stage_sittings_isValid;
}

bool OAIStageSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_sittings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStageSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
