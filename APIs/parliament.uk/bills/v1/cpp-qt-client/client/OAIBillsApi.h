/**
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBillsApi_H
#define OAI_OAIBillsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBill.h"
#include "OAIBillSortOrder.h"
#include "OAIBillStageDetails.h"
#include "OAIBillSummarySearchResult.h"
#include "OAIHouse.h"
#include "OAIOriginatingHouse.h"
#include "OAIProblemDetails.h"
#include "OAIStageSummarySearchResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBillsApi : public QObject {
    Q_OBJECT

public:
    OAIBillsApi(const int timeOut = 0);
    ~OAIBillsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  bill_id qint32 [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void apiV1BillsBillIdStagesGet(const qint32 &bill_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  bill_id qint32 [required]
    */
    virtual void getBill(const qint32 &bill_id);

    /**
    * @param[in]  bill_id qint32 [required]
    * @param[in]  bill_stage_id qint32 [required]
    */
    virtual void getBillStageDetails(const qint32 &bill_id, const qint32 &bill_stage_id);

    /**
    * @param[in]  search_term QString [optional]
    * @param[in]  session qint32 [optional]
    * @param[in]  current_house OAIHouse [optional]
    * @param[in]  originating_house OAIOriginatingHouse [optional]
    * @param[in]  member_id qint32 [optional]
    * @param[in]  department_id qint32 [optional]
    * @param[in]  bill_stage QList<qint32> [optional]
    * @param[in]  bill_stages_excluded QList<qint32> [optional]
    * @param[in]  is_defeated bool [optional]
    * @param[in]  is_withdrawn bool [optional]
    * @param[in]  bill_type QList<qint32> [optional]
    * @param[in]  sort_order OAIBillSortOrder [optional]
    * @param[in]  bill_ids QList<qint32> [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void getBills(const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &session = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIHouse> &current_house = ::OpenAPI::OptionalParam<OAIHouse>(), const ::OpenAPI::OptionalParam<OAIOriginatingHouse> &originating_house = ::OpenAPI::OptionalParam<OAIOriginatingHouse>(), const ::OpenAPI::OptionalParam<qint32> &member_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &department_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &bill_stage = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &bill_stages_excluded = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &is_defeated = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_withdrawn = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &bill_type = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<OAIBillSortOrder> &sort_order = ::OpenAPI::OptionalParam<OAIBillSortOrder>(), const ::OpenAPI::OptionalParam<QList<qint32>> &bill_ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV1BillsBillIdStagesGetCallback(OAIHttpRequestWorker *worker);
    void getBillCallback(OAIHttpRequestWorker *worker);
    void getBillStageDetailsCallback(OAIHttpRequestWorker *worker);
    void getBillsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV1BillsBillIdStagesGetSignal(OAIStageSummarySearchResult summary);
    void getBillSignal(OAIBill summary);
    void getBillStageDetailsSignal(OAIBillStageDetails summary);
    void getBillsSignal(OAIBillSummarySearchResult summary);


    void apiV1BillsBillIdStagesGetSignalFull(OAIHttpRequestWorker *worker, OAIStageSummarySearchResult summary);
    void getBillSignalFull(OAIHttpRequestWorker *worker, OAIBill summary);
    void getBillStageDetailsSignalFull(OAIHttpRequestWorker *worker, OAIBillStageDetails summary);
    void getBillsSignalFull(OAIHttpRequestWorker *worker, OAIBillSummarySearchResult summary);

    Q_DECL_DEPRECATED_X("Use apiV1BillsBillIdStagesGetSignalError() instead")
    void apiV1BillsBillIdStagesGetSignalE(OAIStageSummarySearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1BillsBillIdStagesGetSignalError(OAIStageSummarySearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBillSignalError() instead")
    void getBillSignalE(OAIBill summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBillSignalError(OAIBill summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBillStageDetailsSignalError() instead")
    void getBillStageDetailsSignalE(OAIBillStageDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBillStageDetailsSignalError(OAIBillStageDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBillsSignalError() instead")
    void getBillsSignalE(OAIBillSummarySearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBillsSignalError(OAIBillSummarySearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV1BillsBillIdStagesGetSignalErrorFull() instead")
    void apiV1BillsBillIdStagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1BillsBillIdStagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBillSignalErrorFull() instead")
    void getBillSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBillSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBillStageDetailsSignalErrorFull() instead")
    void getBillStageDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBillStageDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBillsSignalErrorFull() instead")
    void getBillsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBillsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
