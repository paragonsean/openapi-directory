/**
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmendmentDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmendmentDetail::OAIAmendmentDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmendmentDetail::OAIAmendmentDetail() {
    this->initializeModel();
}

OAIAmendmentDetail::~OAIAmendmentDetail() {}

void OAIAmendmentDetail::initializeModel() {

    m_amendment_id_isSet = false;
    m_amendment_id_isValid = false;

    m_amendment_lines_isSet = false;
    m_amendment_lines_isValid = false;

    m_amendment_note_isSet = false;
    m_amendment_note_isValid = false;

    m_amendment_position_isSet = false;
    m_amendment_position_isValid = false;

    m_amendment_type_isSet = false;
    m_amendment_type_isValid = false;

    m_bill_id_isSet = false;
    m_bill_id_isValid = false;

    m_bill_stage_id_isSet = false;
    m_bill_stage_id_isValid = false;

    m_clause_isSet = false;
    m_clause_isValid = false;

    m_decision_isSet = false;
    m_decision_isValid = false;

    m_explanatory_text_isSet = false;
    m_explanatory_text_isValid = false;

    m_explanatory_text_prefix_isSet = false;
    m_explanatory_text_prefix_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_marshalled_list_text_isSet = false;
    m_marshalled_list_text_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_sponsors_isSet = false;
    m_sponsors_isValid = false;
}

void OAIAmendmentDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmendmentDetail::fromJsonObject(QJsonObject json) {

    m_amendment_id_isValid = ::OpenAPI::fromJsonValue(m_amendment_id, json[QString("amendmentId")]);
    m_amendment_id_isSet = !json[QString("amendmentId")].isNull() && m_amendment_id_isValid;

    m_amendment_lines_isValid = ::OpenAPI::fromJsonValue(m_amendment_lines, json[QString("amendmentLines")]);
    m_amendment_lines_isSet = !json[QString("amendmentLines")].isNull() && m_amendment_lines_isValid;

    m_amendment_note_isValid = ::OpenAPI::fromJsonValue(m_amendment_note, json[QString("amendmentNote")]);
    m_amendment_note_isSet = !json[QString("amendmentNote")].isNull() && m_amendment_note_isValid;

    m_amendment_position_isValid = ::OpenAPI::fromJsonValue(m_amendment_position, json[QString("amendmentPosition")]);
    m_amendment_position_isSet = !json[QString("amendmentPosition")].isNull() && m_amendment_position_isValid;

    m_amendment_type_isValid = ::OpenAPI::fromJsonValue(m_amendment_type, json[QString("amendmentType")]);
    m_amendment_type_isSet = !json[QString("amendmentType")].isNull() && m_amendment_type_isValid;

    m_bill_id_isValid = ::OpenAPI::fromJsonValue(m_bill_id, json[QString("billId")]);
    m_bill_id_isSet = !json[QString("billId")].isNull() && m_bill_id_isValid;

    m_bill_stage_id_isValid = ::OpenAPI::fromJsonValue(m_bill_stage_id, json[QString("billStageId")]);
    m_bill_stage_id_isSet = !json[QString("billStageId")].isNull() && m_bill_stage_id_isValid;

    m_clause_isValid = ::OpenAPI::fromJsonValue(m_clause, json[QString("clause")]);
    m_clause_isSet = !json[QString("clause")].isNull() && m_clause_isValid;

    m_decision_isValid = ::OpenAPI::fromJsonValue(m_decision, json[QString("decision")]);
    m_decision_isSet = !json[QString("decision")].isNull() && m_decision_isValid;

    m_explanatory_text_isValid = ::OpenAPI::fromJsonValue(m_explanatory_text, json[QString("explanatoryText")]);
    m_explanatory_text_isSet = !json[QString("explanatoryText")].isNull() && m_explanatory_text_isValid;

    m_explanatory_text_prefix_isValid = ::OpenAPI::fromJsonValue(m_explanatory_text_prefix, json[QString("explanatoryTextPrefix")]);
    m_explanatory_text_prefix_isSet = !json[QString("explanatoryTextPrefix")].isNull() && m_explanatory_text_prefix_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_marshalled_list_text_isValid = ::OpenAPI::fromJsonValue(m_marshalled_list_text, json[QString("marshalledListText")]);
    m_marshalled_list_text_isSet = !json[QString("marshalledListText")].isNull() && m_marshalled_list_text_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_sponsors_isValid = ::OpenAPI::fromJsonValue(m_sponsors, json[QString("sponsors")]);
    m_sponsors_isSet = !json[QString("sponsors")].isNull() && m_sponsors_isValid;
}

QString OAIAmendmentDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmendmentDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_amendment_id_isSet) {
        obj.insert(QString("amendmentId"), ::OpenAPI::toJsonValue(m_amendment_id));
    }
    if (m_amendment_lines.size() > 0) {
        obj.insert(QString("amendmentLines"), ::OpenAPI::toJsonValue(m_amendment_lines));
    }
    if (m_amendment_note_isSet) {
        obj.insert(QString("amendmentNote"), ::OpenAPI::toJsonValue(m_amendment_note));
    }
    if (m_amendment_position_isSet) {
        obj.insert(QString("amendmentPosition"), ::OpenAPI::toJsonValue(m_amendment_position));
    }
    if (m_amendment_type.isSet()) {
        obj.insert(QString("amendmentType"), ::OpenAPI::toJsonValue(m_amendment_type));
    }
    if (m_bill_id_isSet) {
        obj.insert(QString("billId"), ::OpenAPI::toJsonValue(m_bill_id));
    }
    if (m_bill_stage_id_isSet) {
        obj.insert(QString("billStageId"), ::OpenAPI::toJsonValue(m_bill_stage_id));
    }
    if (m_clause_isSet) {
        obj.insert(QString("clause"), ::OpenAPI::toJsonValue(m_clause));
    }
    if (m_decision.isSet()) {
        obj.insert(QString("decision"), ::OpenAPI::toJsonValue(m_decision));
    }
    if (m_explanatory_text_isSet) {
        obj.insert(QString("explanatoryText"), ::OpenAPI::toJsonValue(m_explanatory_text));
    }
    if (m_explanatory_text_prefix_isSet) {
        obj.insert(QString("explanatoryTextPrefix"), ::OpenAPI::toJsonValue(m_explanatory_text_prefix));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_marshalled_list_text_isSet) {
        obj.insert(QString("marshalledListText"), ::OpenAPI::toJsonValue(m_marshalled_list_text));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_schedule_isSet) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_sponsors.size() > 0) {
        obj.insert(QString("sponsors"), ::OpenAPI::toJsonValue(m_sponsors));
    }
    return obj;
}

qint32 OAIAmendmentDetail::getAmendmentId() const {
    return m_amendment_id;
}
void OAIAmendmentDetail::setAmendmentId(const qint32 &amendment_id) {
    m_amendment_id = amendment_id;
    m_amendment_id_isSet = true;
}

bool OAIAmendmentDetail::is_amendment_id_Set() const{
    return m_amendment_id_isSet;
}

bool OAIAmendmentDetail::is_amendment_id_Valid() const{
    return m_amendment_id_isValid;
}

QList<OAIAmendmentLine> OAIAmendmentDetail::getAmendmentLines() const {
    return m_amendment_lines;
}
void OAIAmendmentDetail::setAmendmentLines(const QList<OAIAmendmentLine> &amendment_lines) {
    m_amendment_lines = amendment_lines;
    m_amendment_lines_isSet = true;
}

bool OAIAmendmentDetail::is_amendment_lines_Set() const{
    return m_amendment_lines_isSet;
}

bool OAIAmendmentDetail::is_amendment_lines_Valid() const{
    return m_amendment_lines_isValid;
}

QString OAIAmendmentDetail::getAmendmentNote() const {
    return m_amendment_note;
}
void OAIAmendmentDetail::setAmendmentNote(const QString &amendment_note) {
    m_amendment_note = amendment_note;
    m_amendment_note_isSet = true;
}

bool OAIAmendmentDetail::is_amendment_note_Set() const{
    return m_amendment_note_isSet;
}

bool OAIAmendmentDetail::is_amendment_note_Valid() const{
    return m_amendment_note_isValid;
}

QString OAIAmendmentDetail::getAmendmentPosition() const {
    return m_amendment_position;
}
void OAIAmendmentDetail::setAmendmentPosition(const QString &amendment_position) {
    m_amendment_position = amendment_position;
    m_amendment_position_isSet = true;
}

bool OAIAmendmentDetail::is_amendment_position_Set() const{
    return m_amendment_position_isSet;
}

bool OAIAmendmentDetail::is_amendment_position_Valid() const{
    return m_amendment_position_isValid;
}

OAIAmendmentType OAIAmendmentDetail::getAmendmentType() const {
    return m_amendment_type;
}
void OAIAmendmentDetail::setAmendmentType(const OAIAmendmentType &amendment_type) {
    m_amendment_type = amendment_type;
    m_amendment_type_isSet = true;
}

bool OAIAmendmentDetail::is_amendment_type_Set() const{
    return m_amendment_type_isSet;
}

bool OAIAmendmentDetail::is_amendment_type_Valid() const{
    return m_amendment_type_isValid;
}

qint32 OAIAmendmentDetail::getBillId() const {
    return m_bill_id;
}
void OAIAmendmentDetail::setBillId(const qint32 &bill_id) {
    m_bill_id = bill_id;
    m_bill_id_isSet = true;
}

bool OAIAmendmentDetail::is_bill_id_Set() const{
    return m_bill_id_isSet;
}

bool OAIAmendmentDetail::is_bill_id_Valid() const{
    return m_bill_id_isValid;
}

qint32 OAIAmendmentDetail::getBillStageId() const {
    return m_bill_stage_id;
}
void OAIAmendmentDetail::setBillStageId(const qint32 &bill_stage_id) {
    m_bill_stage_id = bill_stage_id;
    m_bill_stage_id_isSet = true;
}

bool OAIAmendmentDetail::is_bill_stage_id_Set() const{
    return m_bill_stage_id_isSet;
}

bool OAIAmendmentDetail::is_bill_stage_id_Valid() const{
    return m_bill_stage_id_isValid;
}

qint32 OAIAmendmentDetail::getClause() const {
    return m_clause;
}
void OAIAmendmentDetail::setClause(const qint32 &clause) {
    m_clause = clause;
    m_clause_isSet = true;
}

bool OAIAmendmentDetail::is_clause_Set() const{
    return m_clause_isSet;
}

bool OAIAmendmentDetail::is_clause_Valid() const{
    return m_clause_isValid;
}

OAIAmendmentDecision OAIAmendmentDetail::getDecision() const {
    return m_decision;
}
void OAIAmendmentDetail::setDecision(const OAIAmendmentDecision &decision) {
    m_decision = decision;
    m_decision_isSet = true;
}

bool OAIAmendmentDetail::is_decision_Set() const{
    return m_decision_isSet;
}

bool OAIAmendmentDetail::is_decision_Valid() const{
    return m_decision_isValid;
}

QString OAIAmendmentDetail::getExplanatoryText() const {
    return m_explanatory_text;
}
void OAIAmendmentDetail::setExplanatoryText(const QString &explanatory_text) {
    m_explanatory_text = explanatory_text;
    m_explanatory_text_isSet = true;
}

bool OAIAmendmentDetail::is_explanatory_text_Set() const{
    return m_explanatory_text_isSet;
}

bool OAIAmendmentDetail::is_explanatory_text_Valid() const{
    return m_explanatory_text_isValid;
}

QString OAIAmendmentDetail::getExplanatoryTextPrefix() const {
    return m_explanatory_text_prefix;
}
void OAIAmendmentDetail::setExplanatoryTextPrefix(const QString &explanatory_text_prefix) {
    m_explanatory_text_prefix = explanatory_text_prefix;
    m_explanatory_text_prefix_isSet = true;
}

bool OAIAmendmentDetail::is_explanatory_text_prefix_Set() const{
    return m_explanatory_text_prefix_isSet;
}

bool OAIAmendmentDetail::is_explanatory_text_prefix_Valid() const{
    return m_explanatory_text_prefix_isValid;
}

qint32 OAIAmendmentDetail::getLineNumber() const {
    return m_line_number;
}
void OAIAmendmentDetail::setLineNumber(const qint32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIAmendmentDetail::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIAmendmentDetail::is_line_number_Valid() const{
    return m_line_number_isValid;
}

QString OAIAmendmentDetail::getMarshalledListText() const {
    return m_marshalled_list_text;
}
void OAIAmendmentDetail::setMarshalledListText(const QString &marshalled_list_text) {
    m_marshalled_list_text = marshalled_list_text;
    m_marshalled_list_text_isSet = true;
}

bool OAIAmendmentDetail::is_marshalled_list_text_Set() const{
    return m_marshalled_list_text_isSet;
}

bool OAIAmendmentDetail::is_marshalled_list_text_Valid() const{
    return m_marshalled_list_text_isValid;
}

qint32 OAIAmendmentDetail::getPageNumber() const {
    return m_page_number;
}
void OAIAmendmentDetail::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIAmendmentDetail::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIAmendmentDetail::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAIAmendmentDetail::getSchedule() const {
    return m_schedule;
}
void OAIAmendmentDetail::setSchedule(const qint32 &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIAmendmentDetail::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIAmendmentDetail::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QList<OAIAmendmentMember> OAIAmendmentDetail::getSponsors() const {
    return m_sponsors;
}
void OAIAmendmentDetail::setSponsors(const QList<OAIAmendmentMember> &sponsors) {
    m_sponsors = sponsors;
    m_sponsors_isSet = true;
}

bool OAIAmendmentDetail::is_sponsors_Set() const{
    return m_sponsors_isSet;
}

bool OAIAmendmentDetail::is_sponsors_Valid() const{
    return m_sponsors_isValid;
}

bool OAIAmendmentDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amendment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amendment_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amendment_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amendment_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amendment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bill_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bill_stage_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decision.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_explanatory_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explanatory_text_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marshalled_list_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sponsors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmendmentDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
