/**
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStageReferenceSearchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStageReferenceSearchResult::OAIStageReferenceSearchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStageReferenceSearchResult::OAIStageReferenceSearchResult() {
    this->initializeModel();
}

OAIStageReferenceSearchResult::~OAIStageReferenceSearchResult() {}

void OAIStageReferenceSearchResult::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_items_per_page_isSet = false;
    m_items_per_page_isValid = false;

    m_total_results_isSet = false;
    m_total_results_isValid = false;
}

void OAIStageReferenceSearchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStageReferenceSearchResult::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_items_per_page_isValid = ::OpenAPI::fromJsonValue(m_items_per_page, json[QString("itemsPerPage")]);
    m_items_per_page_isSet = !json[QString("itemsPerPage")].isNull() && m_items_per_page_isValid;

    m_total_results_isValid = ::OpenAPI::fromJsonValue(m_total_results, json[QString("totalResults")]);
    m_total_results_isSet = !json[QString("totalResults")].isNull() && m_total_results_isValid;
}

QString OAIStageReferenceSearchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStageReferenceSearchResult::asJsonObject() const {
    QJsonObject obj;
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_items_per_page_isSet) {
        obj.insert(QString("itemsPerPage"), ::OpenAPI::toJsonValue(m_items_per_page));
    }
    if (m_total_results_isSet) {
        obj.insert(QString("totalResults"), ::OpenAPI::toJsonValue(m_total_results));
    }
    return obj;
}

QList<OAIStageReference> OAIStageReferenceSearchResult::getItems() const {
    return m_items;
}
void OAIStageReferenceSearchResult::setItems(const QList<OAIStageReference> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIStageReferenceSearchResult::is_items_Set() const{
    return m_items_isSet;
}

bool OAIStageReferenceSearchResult::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAIStageReferenceSearchResult::getItemsPerPage() const {
    return m_items_per_page;
}
void OAIStageReferenceSearchResult::setItemsPerPage(const qint32 &items_per_page) {
    m_items_per_page = items_per_page;
    m_items_per_page_isSet = true;
}

bool OAIStageReferenceSearchResult::is_items_per_page_Set() const{
    return m_items_per_page_isSet;
}

bool OAIStageReferenceSearchResult::is_items_per_page_Valid() const{
    return m_items_per_page_isValid;
}

qint32 OAIStageReferenceSearchResult::getTotalResults() const {
    return m_total_results;
}
void OAIStageReferenceSearchResult::setTotalResults(const qint32 &total_results) {
    m_total_results = total_results;
    m_total_results_isSet = true;
}

bool OAIStageReferenceSearchResult::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAIStageReferenceSearchResult::is_total_results_Valid() const{
    return m_total_results_isValid;
}

bool OAIStageReferenceSearchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStageReferenceSearchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
