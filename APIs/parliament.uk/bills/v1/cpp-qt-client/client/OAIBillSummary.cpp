/**
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillSummary::OAIBillSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillSummary::OAIBillSummary() {
    this->initializeModel();
}

OAIBillSummary::~OAIBillSummary() {}

void OAIBillSummary::initializeModel() {

    m_bill_id_isSet = false;
    m_bill_id_isValid = false;

    m_bill_type_id_isSet = false;
    m_bill_type_id_isValid = false;

    m_bill_withdrawn_isSet = false;
    m_bill_withdrawn_isValid = false;

    m_current_house_isSet = false;
    m_current_house_isValid = false;

    m_current_stage_isSet = false;
    m_current_stage_isValid = false;

    m_included_session_ids_isSet = false;
    m_included_session_ids_isValid = false;

    m_introduced_session_id_isSet = false;
    m_introduced_session_id_isValid = false;

    m_is_act_isSet = false;
    m_is_act_isValid = false;

    m_is_defeated_isSet = false;
    m_is_defeated_isValid = false;

    m_last_update_isSet = false;
    m_last_update_isValid = false;

    m_originating_house_isSet = false;
    m_originating_house_isValid = false;

    m_short_title_isSet = false;
    m_short_title_isValid = false;
}

void OAIBillSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBillSummary::fromJsonObject(QJsonObject json) {

    m_bill_id_isValid = ::OpenAPI::fromJsonValue(m_bill_id, json[QString("billId")]);
    m_bill_id_isSet = !json[QString("billId")].isNull() && m_bill_id_isValid;

    m_bill_type_id_isValid = ::OpenAPI::fromJsonValue(m_bill_type_id, json[QString("billTypeId")]);
    m_bill_type_id_isSet = !json[QString("billTypeId")].isNull() && m_bill_type_id_isValid;

    m_bill_withdrawn_isValid = ::OpenAPI::fromJsonValue(m_bill_withdrawn, json[QString("billWithdrawn")]);
    m_bill_withdrawn_isSet = !json[QString("billWithdrawn")].isNull() && m_bill_withdrawn_isValid;

    m_current_house_isValid = ::OpenAPI::fromJsonValue(m_current_house, json[QString("currentHouse")]);
    m_current_house_isSet = !json[QString("currentHouse")].isNull() && m_current_house_isValid;

    m_current_stage_isValid = ::OpenAPI::fromJsonValue(m_current_stage, json[QString("currentStage")]);
    m_current_stage_isSet = !json[QString("currentStage")].isNull() && m_current_stage_isValid;

    m_included_session_ids_isValid = ::OpenAPI::fromJsonValue(m_included_session_ids, json[QString("includedSessionIds")]);
    m_included_session_ids_isSet = !json[QString("includedSessionIds")].isNull() && m_included_session_ids_isValid;

    m_introduced_session_id_isValid = ::OpenAPI::fromJsonValue(m_introduced_session_id, json[QString("introducedSessionId")]);
    m_introduced_session_id_isSet = !json[QString("introducedSessionId")].isNull() && m_introduced_session_id_isValid;

    m_is_act_isValid = ::OpenAPI::fromJsonValue(m_is_act, json[QString("isAct")]);
    m_is_act_isSet = !json[QString("isAct")].isNull() && m_is_act_isValid;

    m_is_defeated_isValid = ::OpenAPI::fromJsonValue(m_is_defeated, json[QString("isDefeated")]);
    m_is_defeated_isSet = !json[QString("isDefeated")].isNull() && m_is_defeated_isValid;

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("lastUpdate")]);
    m_last_update_isSet = !json[QString("lastUpdate")].isNull() && m_last_update_isValid;

    m_originating_house_isValid = ::OpenAPI::fromJsonValue(m_originating_house, json[QString("originatingHouse")]);
    m_originating_house_isSet = !json[QString("originatingHouse")].isNull() && m_originating_house_isValid;

    m_short_title_isValid = ::OpenAPI::fromJsonValue(m_short_title, json[QString("shortTitle")]);
    m_short_title_isSet = !json[QString("shortTitle")].isNull() && m_short_title_isValid;
}

QString OAIBillSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBillSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_bill_id_isSet) {
        obj.insert(QString("billId"), ::OpenAPI::toJsonValue(m_bill_id));
    }
    if (m_bill_type_id_isSet) {
        obj.insert(QString("billTypeId"), ::OpenAPI::toJsonValue(m_bill_type_id));
    }
    if (m_bill_withdrawn_isSet) {
        obj.insert(QString("billWithdrawn"), ::OpenAPI::toJsonValue(m_bill_withdrawn));
    }
    if (m_current_house.isSet()) {
        obj.insert(QString("currentHouse"), ::OpenAPI::toJsonValue(m_current_house));
    }
    if (m_current_stage.isSet()) {
        obj.insert(QString("currentStage"), ::OpenAPI::toJsonValue(m_current_stage));
    }
    if (m_included_session_ids.size() > 0) {
        obj.insert(QString("includedSessionIds"), ::OpenAPI::toJsonValue(m_included_session_ids));
    }
    if (m_introduced_session_id_isSet) {
        obj.insert(QString("introducedSessionId"), ::OpenAPI::toJsonValue(m_introduced_session_id));
    }
    if (m_is_act_isSet) {
        obj.insert(QString("isAct"), ::OpenAPI::toJsonValue(m_is_act));
    }
    if (m_is_defeated_isSet) {
        obj.insert(QString("isDefeated"), ::OpenAPI::toJsonValue(m_is_defeated));
    }
    if (m_last_update_isSet) {
        obj.insert(QString("lastUpdate"), ::OpenAPI::toJsonValue(m_last_update));
    }
    if (m_originating_house.isSet()) {
        obj.insert(QString("originatingHouse"), ::OpenAPI::toJsonValue(m_originating_house));
    }
    if (m_short_title_isSet) {
        obj.insert(QString("shortTitle"), ::OpenAPI::toJsonValue(m_short_title));
    }
    return obj;
}

qint32 OAIBillSummary::getBillId() const {
    return m_bill_id;
}
void OAIBillSummary::setBillId(const qint32 &bill_id) {
    m_bill_id = bill_id;
    m_bill_id_isSet = true;
}

bool OAIBillSummary::is_bill_id_Set() const{
    return m_bill_id_isSet;
}

bool OAIBillSummary::is_bill_id_Valid() const{
    return m_bill_id_isValid;
}

qint32 OAIBillSummary::getBillTypeId() const {
    return m_bill_type_id;
}
void OAIBillSummary::setBillTypeId(const qint32 &bill_type_id) {
    m_bill_type_id = bill_type_id;
    m_bill_type_id_isSet = true;
}

bool OAIBillSummary::is_bill_type_id_Set() const{
    return m_bill_type_id_isSet;
}

bool OAIBillSummary::is_bill_type_id_Valid() const{
    return m_bill_type_id_isValid;
}

QDateTime OAIBillSummary::getBillWithdrawn() const {
    return m_bill_withdrawn;
}
void OAIBillSummary::setBillWithdrawn(const QDateTime &bill_withdrawn) {
    m_bill_withdrawn = bill_withdrawn;
    m_bill_withdrawn_isSet = true;
}

bool OAIBillSummary::is_bill_withdrawn_Set() const{
    return m_bill_withdrawn_isSet;
}

bool OAIBillSummary::is_bill_withdrawn_Valid() const{
    return m_bill_withdrawn_isValid;
}

OAIHouse OAIBillSummary::getCurrentHouse() const {
    return m_current_house;
}
void OAIBillSummary::setCurrentHouse(const OAIHouse &current_house) {
    m_current_house = current_house;
    m_current_house_isSet = true;
}

bool OAIBillSummary::is_current_house_Set() const{
    return m_current_house_isSet;
}

bool OAIBillSummary::is_current_house_Valid() const{
    return m_current_house_isValid;
}

OAIStageSummary OAIBillSummary::getCurrentStage() const {
    return m_current_stage;
}
void OAIBillSummary::setCurrentStage(const OAIStageSummary &current_stage) {
    m_current_stage = current_stage;
    m_current_stage_isSet = true;
}

bool OAIBillSummary::is_current_stage_Set() const{
    return m_current_stage_isSet;
}

bool OAIBillSummary::is_current_stage_Valid() const{
    return m_current_stage_isValid;
}

QList<qint32> OAIBillSummary::getIncludedSessionIds() const {
    return m_included_session_ids;
}
void OAIBillSummary::setIncludedSessionIds(const QList<qint32> &included_session_ids) {
    m_included_session_ids = included_session_ids;
    m_included_session_ids_isSet = true;
}

bool OAIBillSummary::is_included_session_ids_Set() const{
    return m_included_session_ids_isSet;
}

bool OAIBillSummary::is_included_session_ids_Valid() const{
    return m_included_session_ids_isValid;
}

qint32 OAIBillSummary::getIntroducedSessionId() const {
    return m_introduced_session_id;
}
void OAIBillSummary::setIntroducedSessionId(const qint32 &introduced_session_id) {
    m_introduced_session_id = introduced_session_id;
    m_introduced_session_id_isSet = true;
}

bool OAIBillSummary::is_introduced_session_id_Set() const{
    return m_introduced_session_id_isSet;
}

bool OAIBillSummary::is_introduced_session_id_Valid() const{
    return m_introduced_session_id_isValid;
}

bool OAIBillSummary::isIsAct() const {
    return m_is_act;
}
void OAIBillSummary::setIsAct(const bool &is_act) {
    m_is_act = is_act;
    m_is_act_isSet = true;
}

bool OAIBillSummary::is_is_act_Set() const{
    return m_is_act_isSet;
}

bool OAIBillSummary::is_is_act_Valid() const{
    return m_is_act_isValid;
}

bool OAIBillSummary::isIsDefeated() const {
    return m_is_defeated;
}
void OAIBillSummary::setIsDefeated(const bool &is_defeated) {
    m_is_defeated = is_defeated;
    m_is_defeated_isSet = true;
}

bool OAIBillSummary::is_is_defeated_Set() const{
    return m_is_defeated_isSet;
}

bool OAIBillSummary::is_is_defeated_Valid() const{
    return m_is_defeated_isValid;
}

QDateTime OAIBillSummary::getLastUpdate() const {
    return m_last_update;
}
void OAIBillSummary::setLastUpdate(const QDateTime &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAIBillSummary::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAIBillSummary::is_last_update_Valid() const{
    return m_last_update_isValid;
}

OAIHouse OAIBillSummary::getOriginatingHouse() const {
    return m_originating_house;
}
void OAIBillSummary::setOriginatingHouse(const OAIHouse &originating_house) {
    m_originating_house = originating_house;
    m_originating_house_isSet = true;
}

bool OAIBillSummary::is_originating_house_Set() const{
    return m_originating_house_isSet;
}

bool OAIBillSummary::is_originating_house_Valid() const{
    return m_originating_house_isValid;
}

QString OAIBillSummary::getShortTitle() const {
    return m_short_title;
}
void OAIBillSummary::setShortTitle(const QString &short_title) {
    m_short_title = short_title;
    m_short_title_isSet = true;
}

bool OAIBillSummary::is_short_title_Set() const{
    return m_short_title_isSet;
}

bool OAIBillSummary::is_short_title_Valid() const{
    return m_short_title_isValid;
}

bool OAIBillSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bill_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bill_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bill_withdrawn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_house.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_stage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_session_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_introduced_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_act_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_defeated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originating_house.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBillSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
