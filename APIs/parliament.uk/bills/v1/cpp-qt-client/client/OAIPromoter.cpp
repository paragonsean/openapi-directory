/**
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPromoter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPromoter::OAIPromoter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPromoter::OAIPromoter() {
    this->initializeModel();
}

OAIPromoter::~OAIPromoter() {}

void OAIPromoter::initializeModel() {

    m_organisation_name_isSet = false;
    m_organisation_name_isValid = false;

    m_organisation_url_isSet = false;
    m_organisation_url_isValid = false;
}

void OAIPromoter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPromoter::fromJsonObject(QJsonObject json) {

    m_organisation_name_isValid = ::OpenAPI::fromJsonValue(m_organisation_name, json[QString("organisationName")]);
    m_organisation_name_isSet = !json[QString("organisationName")].isNull() && m_organisation_name_isValid;

    m_organisation_url_isValid = ::OpenAPI::fromJsonValue(m_organisation_url, json[QString("organisationUrl")]);
    m_organisation_url_isSet = !json[QString("organisationUrl")].isNull() && m_organisation_url_isValid;
}

QString OAIPromoter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPromoter::asJsonObject() const {
    QJsonObject obj;
    if (m_organisation_name_isSet) {
        obj.insert(QString("organisationName"), ::OpenAPI::toJsonValue(m_organisation_name));
    }
    if (m_organisation_url_isSet) {
        obj.insert(QString("organisationUrl"), ::OpenAPI::toJsonValue(m_organisation_url));
    }
    return obj;
}

QString OAIPromoter::getOrganisationName() const {
    return m_organisation_name;
}
void OAIPromoter::setOrganisationName(const QString &organisation_name) {
    m_organisation_name = organisation_name;
    m_organisation_name_isSet = true;
}

bool OAIPromoter::is_organisation_name_Set() const{
    return m_organisation_name_isSet;
}

bool OAIPromoter::is_organisation_name_Valid() const{
    return m_organisation_name_isValid;
}

QString OAIPromoter::getOrganisationUrl() const {
    return m_organisation_url;
}
void OAIPromoter::setOrganisationUrl(const QString &organisation_url) {
    m_organisation_url = organisation_url;
    m_organisation_url_isSet = true;
}

bool OAIPromoter::is_organisation_url_Set() const{
    return m_organisation_url_isSet;
}

bool OAIPromoter::is_organisation_url_Valid() const{
    return m_organisation_url_isValid;
}

bool OAIPromoter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_organisation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organisation_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPromoter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
