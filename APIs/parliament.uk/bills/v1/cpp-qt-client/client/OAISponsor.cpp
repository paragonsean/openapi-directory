/**
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISponsor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISponsor::OAISponsor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISponsor::OAISponsor() {
    this->initializeModel();
}

OAISponsor::~OAISponsor() {}

void OAISponsor::initializeModel() {

    m_member_isSet = false;
    m_member_isValid = false;

    m_organisation_isSet = false;
    m_organisation_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAISponsor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISponsor::fromJsonObject(QJsonObject json) {

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;

    m_organisation_isValid = ::OpenAPI::fromJsonValue(m_organisation, json[QString("organisation")]);
    m_organisation_isSet = !json[QString("organisation")].isNull() && m_organisation_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;
}

QString OAISponsor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISponsor::asJsonObject() const {
    QJsonObject obj;
    if (m_member.isSet()) {
        obj.insert(QString("member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_organisation.isSet()) {
        obj.insert(QString("organisation"), ::OpenAPI::toJsonValue(m_organisation));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

OAIMember OAISponsor::getMember() const {
    return m_member;
}
void OAISponsor::setMember(const OAIMember &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAISponsor::is_member_Set() const{
    return m_member_isSet;
}

bool OAISponsor::is_member_Valid() const{
    return m_member_isValid;
}

OAIOrganisation OAISponsor::getOrganisation() const {
    return m_organisation;
}
void OAISponsor::setOrganisation(const OAIOrganisation &organisation) {
    m_organisation = organisation;
    m_organisation_isSet = true;
}

bool OAISponsor::is_organisation_Set() const{
    return m_organisation_isSet;
}

bool OAISponsor::is_organisation_Valid() const{
    return m_organisation_isValid;
}

qint32 OAISponsor::getSortOrder() const {
    return m_sort_order;
}
void OAISponsor::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAISponsor::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAISponsor::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAISponsor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_organisation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISponsor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
