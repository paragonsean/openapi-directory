/*
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Bill;
import org.openapitools.client.model.BillSortOrder;
import org.openapitools.client.model.BillStageDetails;
import org.openapitools.client.model.BillSummarySearchResult;
import org.openapitools.client.model.House;
import org.openapitools.client.model.OriginatingHouse;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.StageSummarySearchResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BillsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BillsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV1BillsBillIdStagesGet
     * @param billId Stages relating to a Bill with Bill ID specified (required)
     * @param skip  (optional)
     * @param take  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1BillsBillIdStagesGetCall(Integer billId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Bills/{billId}/Stages"
            .replace("{" + "billId" + "}", localVarApiClient.escapeString(billId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Take", take));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1BillsBillIdStagesGetValidateBeforeCall(Integer billId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billId' is set
        if (billId == null) {
            throw new ApiException("Missing the required parameter 'billId' when calling apiV1BillsBillIdStagesGet(Async)");
        }

        return apiV1BillsBillIdStagesGetCall(billId, skip, take, _callback);

    }

    /**
     * Returns all Bill stages.
     * 
     * @param billId Stages relating to a Bill with Bill ID specified (required)
     * @param skip  (optional)
     * @param take  (optional)
     * @return StageSummarySearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public StageSummarySearchResult apiV1BillsBillIdStagesGet(Integer billId, Integer skip, Integer take) throws ApiException {
        ApiResponse<StageSummarySearchResult> localVarResp = apiV1BillsBillIdStagesGetWithHttpInfo(billId, skip, take);
        return localVarResp.getData();
    }

    /**
     * Returns all Bill stages.
     * 
     * @param billId Stages relating to a Bill with Bill ID specified (required)
     * @param skip  (optional)
     * @param take  (optional)
     * @return ApiResponse&lt;StageSummarySearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StageSummarySearchResult> apiV1BillsBillIdStagesGetWithHttpInfo(Integer billId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = apiV1BillsBillIdStagesGetValidateBeforeCall(billId, skip, take, null);
        Type localVarReturnType = new TypeToken<StageSummarySearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all Bill stages. (asynchronously)
     * 
     * @param billId Stages relating to a Bill with Bill ID specified (required)
     * @param skip  (optional)
     * @param take  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1BillsBillIdStagesGetAsync(Integer billId, Integer skip, Integer take, final ApiCallback<StageSummarySearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1BillsBillIdStagesGetValidateBeforeCall(billId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<StageSummarySearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBill
     * @param billId Bill with ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillCall(Integer billId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Bills/{billId}"
            .replace("{" + "billId" + "}", localVarApiClient.escapeString(billId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBillValidateBeforeCall(Integer billId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billId' is set
        if (billId == null) {
            throw new ApiException("Missing the required parameter 'billId' when calling getBill(Async)");
        }

        return getBillCall(billId, _callback);

    }

    /**
     * Return a Bill.
     * 
     * @param billId Bill with ID specified (required)
     * @return Bill
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Bill getBill(Integer billId) throws ApiException {
        ApiResponse<Bill> localVarResp = getBillWithHttpInfo(billId);
        return localVarResp.getData();
    }

    /**
     * Return a Bill.
     * 
     * @param billId Bill with ID specified (required)
     * @return ApiResponse&lt;Bill&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Bill> getBillWithHttpInfo(Integer billId) throws ApiException {
        okhttp3.Call localVarCall = getBillValidateBeforeCall(billId, null);
        Type localVarReturnType = new TypeToken<Bill>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a Bill. (asynchronously)
     * 
     * @param billId Bill with ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillAsync(Integer billId, final ApiCallback<Bill> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBillValidateBeforeCall(billId, _callback);
        Type localVarReturnType = new TypeToken<Bill>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBillStageDetails
     * @param billId Bill stage relating to Bill with Bill ID specified (required)
     * @param billStageId Bill stage with ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillStageDetailsCall(Integer billId, Integer billStageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Bills/{billId}/Stages/{billStageId}"
            .replace("{" + "billId" + "}", localVarApiClient.escapeString(billId.toString()))
            .replace("{" + "billStageId" + "}", localVarApiClient.escapeString(billStageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBillStageDetailsValidateBeforeCall(Integer billId, Integer billStageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billId' is set
        if (billId == null) {
            throw new ApiException("Missing the required parameter 'billId' when calling getBillStageDetails(Async)");
        }

        // verify the required parameter 'billStageId' is set
        if (billStageId == null) {
            throw new ApiException("Missing the required parameter 'billStageId' when calling getBillStageDetails(Async)");
        }

        return getBillStageDetailsCall(billId, billStageId, _callback);

    }

    /**
     * Returns a Bill stage.
     * 
     * @param billId Bill stage relating to Bill with Bill ID specified (required)
     * @param billStageId Bill stage with ID specified (required)
     * @return BillStageDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public BillStageDetails getBillStageDetails(Integer billId, Integer billStageId) throws ApiException {
        ApiResponse<BillStageDetails> localVarResp = getBillStageDetailsWithHttpInfo(billId, billStageId);
        return localVarResp.getData();
    }

    /**
     * Returns a Bill stage.
     * 
     * @param billId Bill stage relating to Bill with Bill ID specified (required)
     * @param billStageId Bill stage with ID specified (required)
     * @return ApiResponse&lt;BillStageDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillStageDetails> getBillStageDetailsWithHttpInfo(Integer billId, Integer billStageId) throws ApiException {
        okhttp3.Call localVarCall = getBillStageDetailsValidateBeforeCall(billId, billStageId, null);
        Type localVarReturnType = new TypeToken<BillStageDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a Bill stage. (asynchronously)
     * 
     * @param billId Bill stage relating to Bill with Bill ID specified (required)
     * @param billStageId Bill stage with ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillStageDetailsAsync(Integer billId, Integer billStageId, final ApiCallback<BillStageDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBillStageDetailsValidateBeforeCall(billId, billStageId, _callback);
        Type localVarReturnType = new TypeToken<BillStageDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBills
     * @param searchTerm  (optional)
     * @param session  (optional)
     * @param currentHouse  (optional)
     * @param originatingHouse  (optional)
     * @param memberId  (optional)
     * @param departmentId  (optional)
     * @param billStage  (optional)
     * @param billStagesExcluded  (optional)
     * @param isDefeated  (optional)
     * @param isWithdrawn  (optional)
     * @param billType  (optional)
     * @param sortOrder  (optional)
     * @param billIds  (optional)
     * @param skip  (optional)
     * @param take  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillsCall(String searchTerm, Integer session, House currentHouse, OriginatingHouse originatingHouse, Integer memberId, Integer departmentId, List<Integer> billStage, List<Integer> billStagesExcluded, Boolean isDefeated, Boolean isWithdrawn, List<Integer> billType, BillSortOrder sortOrder, List<Integer> billIds, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Bills";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SearchTerm", searchTerm));
        }

        if (session != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Session", session));
        }

        if (currentHouse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CurrentHouse", currentHouse));
        }

        if (originatingHouse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OriginatingHouse", originatingHouse));
        }

        if (memberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MemberId", memberId));
        }

        if (departmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DepartmentId", departmentId));
        }

        if (billStage != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "BillStage", billStage));
        }

        if (billStagesExcluded != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "BillStagesExcluded", billStagesExcluded));
        }

        if (isDefeated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IsDefeated", isDefeated));
        }

        if (isWithdrawn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IsWithdrawn", isWithdrawn));
        }

        if (billType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "BillType", billType));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SortOrder", sortOrder));
        }

        if (billIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "BillIds", billIds));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Take", take));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBillsValidateBeforeCall(String searchTerm, Integer session, House currentHouse, OriginatingHouse originatingHouse, Integer memberId, Integer departmentId, List<Integer> billStage, List<Integer> billStagesExcluded, Boolean isDefeated, Boolean isWithdrawn, List<Integer> billType, BillSortOrder sortOrder, List<Integer> billIds, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        return getBillsCall(searchTerm, session, currentHouse, originatingHouse, memberId, departmentId, billStage, billStagesExcluded, isDefeated, isWithdrawn, billType, sortOrder, billIds, skip, take, _callback);

    }

    /**
     * Returns a list of Bills.
     * 
     * @param searchTerm  (optional)
     * @param session  (optional)
     * @param currentHouse  (optional)
     * @param originatingHouse  (optional)
     * @param memberId  (optional)
     * @param departmentId  (optional)
     * @param billStage  (optional)
     * @param billStagesExcluded  (optional)
     * @param isDefeated  (optional)
     * @param isWithdrawn  (optional)
     * @param billType  (optional)
     * @param sortOrder  (optional)
     * @param billIds  (optional)
     * @param skip  (optional)
     * @param take  (optional)
     * @return BillSummarySearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public BillSummarySearchResult getBills(String searchTerm, Integer session, House currentHouse, OriginatingHouse originatingHouse, Integer memberId, Integer departmentId, List<Integer> billStage, List<Integer> billStagesExcluded, Boolean isDefeated, Boolean isWithdrawn, List<Integer> billType, BillSortOrder sortOrder, List<Integer> billIds, Integer skip, Integer take) throws ApiException {
        ApiResponse<BillSummarySearchResult> localVarResp = getBillsWithHttpInfo(searchTerm, session, currentHouse, originatingHouse, memberId, departmentId, billStage, billStagesExcluded, isDefeated, isWithdrawn, billType, sortOrder, billIds, skip, take);
        return localVarResp.getData();
    }

    /**
     * Returns a list of Bills.
     * 
     * @param searchTerm  (optional)
     * @param session  (optional)
     * @param currentHouse  (optional)
     * @param originatingHouse  (optional)
     * @param memberId  (optional)
     * @param departmentId  (optional)
     * @param billStage  (optional)
     * @param billStagesExcluded  (optional)
     * @param isDefeated  (optional)
     * @param isWithdrawn  (optional)
     * @param billType  (optional)
     * @param sortOrder  (optional)
     * @param billIds  (optional)
     * @param skip  (optional)
     * @param take  (optional)
     * @return ApiResponse&lt;BillSummarySearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillSummarySearchResult> getBillsWithHttpInfo(String searchTerm, Integer session, House currentHouse, OriginatingHouse originatingHouse, Integer memberId, Integer departmentId, List<Integer> billStage, List<Integer> billStagesExcluded, Boolean isDefeated, Boolean isWithdrawn, List<Integer> billType, BillSortOrder sortOrder, List<Integer> billIds, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = getBillsValidateBeforeCall(searchTerm, session, currentHouse, originatingHouse, memberId, departmentId, billStage, billStagesExcluded, isDefeated, isWithdrawn, billType, sortOrder, billIds, skip, take, null);
        Type localVarReturnType = new TypeToken<BillSummarySearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of Bills. (asynchronously)
     * 
     * @param searchTerm  (optional)
     * @param session  (optional)
     * @param currentHouse  (optional)
     * @param originatingHouse  (optional)
     * @param memberId  (optional)
     * @param departmentId  (optional)
     * @param billStage  (optional)
     * @param billStagesExcluded  (optional)
     * @param isDefeated  (optional)
     * @param isWithdrawn  (optional)
     * @param billType  (optional)
     * @param sortOrder  (optional)
     * @param billIds  (optional)
     * @param skip  (optional)
     * @param take  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillsAsync(String searchTerm, Integer session, House currentHouse, OriginatingHouse originatingHouse, Integer memberId, Integer departmentId, List<Integer> billStage, List<Integer> billStagesExcluded, Boolean isDefeated, Boolean isWithdrawn, List<Integer> billType, BillSortOrder sortOrder, List<Integer> billIds, Integer skip, Integer take, final ApiCallback<BillSummarySearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBillsValidateBeforeCall(searchTerm, session, currentHouse, originatingHouse, memberId, departmentId, billStage, billStagesExcluded, isDefeated, isWithdrawn, billType, sortOrder, billIds, skip, take, _callback);
        Type localVarReturnType = new TypeToken<BillSummarySearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
