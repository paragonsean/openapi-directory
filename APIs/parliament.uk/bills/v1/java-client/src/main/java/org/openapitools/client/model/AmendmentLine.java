/*
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AmendmentLine
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:41.110497-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AmendmentLine {
  public static final String SERIALIZED_NAME_HANGING_INDENTATION = "hangingIndentation";
  @SerializedName(SERIALIZED_NAME_HANGING_INDENTATION)
  private String hangingIndentation;

  public static final String SERIALIZED_NAME_IMAGE_TYPE = "imageType";
  @SerializedName(SERIALIZED_NAME_IMAGE_TYPE)
  private String imageType;

  public static final String SERIALIZED_NAME_INDENTATION = "indentation";
  @SerializedName(SERIALIZED_NAME_INDENTATION)
  private Integer indentation;

  public static final String SERIALIZED_NAME_IS_IMAGE = "isImage";
  @SerializedName(SERIALIZED_NAME_IS_IMAGE)
  private Boolean isImage;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public AmendmentLine() {
  }

  public AmendmentLine hangingIndentation(String hangingIndentation) {
    this.hangingIndentation = hangingIndentation;
    return this;
  }

  /**
   * Get hangingIndentation
   * @return hangingIndentation
   */
  @javax.annotation.Nullable
  public String getHangingIndentation() {
    return hangingIndentation;
  }

  public void setHangingIndentation(String hangingIndentation) {
    this.hangingIndentation = hangingIndentation;
  }


  public AmendmentLine imageType(String imageType) {
    this.imageType = imageType;
    return this;
  }

  /**
   * Get imageType
   * @return imageType
   */
  @javax.annotation.Nullable
  public String getImageType() {
    return imageType;
  }

  public void setImageType(String imageType) {
    this.imageType = imageType;
  }


  public AmendmentLine indentation(Integer indentation) {
    this.indentation = indentation;
    return this;
  }

  /**
   * Get indentation
   * @return indentation
   */
  @javax.annotation.Nullable
  public Integer getIndentation() {
    return indentation;
  }

  public void setIndentation(Integer indentation) {
    this.indentation = indentation;
  }


  public AmendmentLine isImage(Boolean isImage) {
    this.isImage = isImage;
    return this;
  }

  /**
   * Get isImage
   * @return isImage
   */
  @javax.annotation.Nullable
  public Boolean getIsImage() {
    return isImage;
  }

  public void setIsImage(Boolean isImage) {
    this.isImage = isImage;
  }


  public AmendmentLine text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AmendmentLine amendmentLine = (AmendmentLine) o;
    return Objects.equals(this.hangingIndentation, amendmentLine.hangingIndentation) &&
        Objects.equals(this.imageType, amendmentLine.imageType) &&
        Objects.equals(this.indentation, amendmentLine.indentation) &&
        Objects.equals(this.isImage, amendmentLine.isImage) &&
        Objects.equals(this.text, amendmentLine.text);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hangingIndentation, imageType, indentation, isImage, text);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AmendmentLine {\n");
    sb.append("    hangingIndentation: ").append(toIndentedString(hangingIndentation)).append("\n");
    sb.append("    imageType: ").append(toIndentedString(imageType)).append("\n");
    sb.append("    indentation: ").append(toIndentedString(indentation)).append("\n");
    sb.append("    isImage: ").append(toIndentedString(isImage)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hangingIndentation");
    openapiFields.add("imageType");
    openapiFields.add("indentation");
    openapiFields.add("isImage");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AmendmentLine
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AmendmentLine.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AmendmentLine is not found in the empty JSON string", AmendmentLine.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AmendmentLine.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AmendmentLine` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hangingIndentation") != null && !jsonObj.get("hangingIndentation").isJsonNull()) && !jsonObj.get("hangingIndentation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hangingIndentation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hangingIndentation").toString()));
      }
      if ((jsonObj.get("imageType") != null && !jsonObj.get("imageType").isJsonNull()) && !jsonObj.get("imageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageType").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AmendmentLine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AmendmentLine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AmendmentLine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AmendmentLine.class));

       return (TypeAdapter<T>) new TypeAdapter<AmendmentLine>() {
           @Override
           public void write(JsonWriter out, AmendmentLine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AmendmentLine read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AmendmentLine given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AmendmentLine
   * @throws IOException if the JSON string is invalid with respect to AmendmentLine
   */
  public static AmendmentLine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AmendmentLine.class);
  }

  /**
   * Convert an instance of AmendmentLine to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

