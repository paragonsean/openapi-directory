/*
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.House;
import org.openapitools.client.model.PublicationDocument;
import org.openapitools.client.model.PublicationLink;
import org.openapitools.client.model.PublicationType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BillPublication
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:41.110497-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BillPublication {
  public static final String SERIALIZED_NAME_DISPLAY_DATE = "displayDate";
  @SerializedName(SERIALIZED_NAME_DISPLAY_DATE)
  private OffsetDateTime displayDate;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<PublicationDocument> files;

  public static final String SERIALIZED_NAME_HOUSE = "house";
  @SerializedName(SERIALIZED_NAME_HOUSE)
  private House house;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<PublicationLink> links;

  public static final String SERIALIZED_NAME_PUBLICATION_TYPE = "publicationType";
  @SerializedName(SERIALIZED_NAME_PUBLICATION_TYPE)
  private PublicationType publicationType;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public BillPublication() {
  }

  public BillPublication displayDate(OffsetDateTime displayDate) {
    this.displayDate = displayDate;
    return this;
  }

  /**
   * Get displayDate
   * @return displayDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDisplayDate() {
    return displayDate;
  }

  public void setDisplayDate(OffsetDateTime displayDate) {
    this.displayDate = displayDate;
  }


  public BillPublication files(List<PublicationDocument> files) {
    this.files = files;
    return this;
  }

  public BillPublication addFilesItem(PublicationDocument filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * Get files
   * @return files
   */
  @javax.annotation.Nullable
  public List<PublicationDocument> getFiles() {
    return files;
  }

  public void setFiles(List<PublicationDocument> files) {
    this.files = files;
  }


  public BillPublication house(House house) {
    this.house = house;
    return this;
  }

  /**
   * Get house
   * @return house
   */
  @javax.annotation.Nullable
  public House getHouse() {
    return house;
  }

  public void setHouse(House house) {
    this.house = house;
  }


  public BillPublication id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public BillPublication links(List<PublicationLink> links) {
    this.links = links;
    return this;
  }

  public BillPublication addLinksItem(PublicationLink linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public List<PublicationLink> getLinks() {
    return links;
  }

  public void setLinks(List<PublicationLink> links) {
    this.links = links;
  }


  public BillPublication publicationType(PublicationType publicationType) {
    this.publicationType = publicationType;
    return this;
  }

  /**
   * Get publicationType
   * @return publicationType
   */
  @javax.annotation.Nullable
  public PublicationType getPublicationType() {
    return publicationType;
  }

  public void setPublicationType(PublicationType publicationType) {
    this.publicationType = publicationType;
  }


  public BillPublication title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillPublication billPublication = (BillPublication) o;
    return Objects.equals(this.displayDate, billPublication.displayDate) &&
        Objects.equals(this.files, billPublication.files) &&
        Objects.equals(this.house, billPublication.house) &&
        Objects.equals(this.id, billPublication.id) &&
        Objects.equals(this.links, billPublication.links) &&
        Objects.equals(this.publicationType, billPublication.publicationType) &&
        Objects.equals(this.title, billPublication.title);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayDate, files, house, id, links, publicationType, title);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillPublication {\n");
    sb.append("    displayDate: ").append(toIndentedString(displayDate)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    house: ").append(toIndentedString(house)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    publicationType: ").append(toIndentedString(publicationType)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayDate");
    openapiFields.add("files");
    openapiFields.add("house");
    openapiFields.add("id");
    openapiFields.add("links");
    openapiFields.add("publicationType");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BillPublication
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillPublication.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillPublication is not found in the empty JSON string", BillPublication.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillPublication.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillPublication` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            PublicationDocument.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      // validate the optional field `house`
      if (jsonObj.get("house") != null && !jsonObj.get("house").isJsonNull()) {
        House.validateJsonElement(jsonObj.get("house"));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            PublicationLink.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      // validate the optional field `publicationType`
      if (jsonObj.get("publicationType") != null && !jsonObj.get("publicationType").isJsonNull()) {
        PublicationType.validateJsonElement(jsonObj.get("publicationType"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillPublication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillPublication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillPublication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillPublication.class));

       return (TypeAdapter<T>) new TypeAdapter<BillPublication>() {
           @Override
           public void write(JsonWriter out, BillPublication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillPublication read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BillPublication given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BillPublication
   * @throws IOException if the JSON string is invalid with respect to BillPublication
   */
  public static BillPublication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillPublication.class);
  }

  /**
   * Convert an instance of BillPublication to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

