/*
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BillAgent;
import org.openapitools.client.model.House;
import org.openapitools.client.model.Promoter;
import org.openapitools.client.model.Sponsor;
import org.openapitools.client.model.StageSummary;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Bill
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:41.110497-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Bill {
  public static final String SERIALIZED_NAME_AGENT = "agent";
  @SerializedName(SERIALIZED_NAME_AGENT)
  private BillAgent agent;

  public static final String SERIALIZED_NAME_BILL_ID = "billId";
  @SerializedName(SERIALIZED_NAME_BILL_ID)
  private Integer billId;

  public static final String SERIALIZED_NAME_BILL_TYPE_ID = "billTypeId";
  @SerializedName(SERIALIZED_NAME_BILL_TYPE_ID)
  private Integer billTypeId;

  public static final String SERIALIZED_NAME_BILL_WITHDRAWN = "billWithdrawn";
  @SerializedName(SERIALIZED_NAME_BILL_WITHDRAWN)
  private OffsetDateTime billWithdrawn;

  public static final String SERIALIZED_NAME_CURRENT_HOUSE = "currentHouse";
  @SerializedName(SERIALIZED_NAME_CURRENT_HOUSE)
  private House currentHouse;

  public static final String SERIALIZED_NAME_CURRENT_STAGE = "currentStage";
  @SerializedName(SERIALIZED_NAME_CURRENT_STAGE)
  private StageSummary currentStage;

  public static final String SERIALIZED_NAME_INCLUDED_SESSION_IDS = "includedSessionIds";
  @SerializedName(SERIALIZED_NAME_INCLUDED_SESSION_IDS)
  private List<Integer> includedSessionIds;

  public static final String SERIALIZED_NAME_INTRODUCED_SESSION_ID = "introducedSessionId";
  @SerializedName(SERIALIZED_NAME_INTRODUCED_SESSION_ID)
  private Integer introducedSessionId;

  public static final String SERIALIZED_NAME_IS_ACT = "isAct";
  @SerializedName(SERIALIZED_NAME_IS_ACT)
  private Boolean isAct;

  public static final String SERIALIZED_NAME_IS_DEFEATED = "isDefeated";
  @SerializedName(SERIALIZED_NAME_IS_DEFEATED)
  private Boolean isDefeated;

  public static final String SERIALIZED_NAME_LAST_UPDATE = "lastUpdate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE)
  private OffsetDateTime lastUpdate;

  public static final String SERIALIZED_NAME_LONG_TITLE = "longTitle";
  @SerializedName(SERIALIZED_NAME_LONG_TITLE)
  private String longTitle;

  public static final String SERIALIZED_NAME_ORIGINATING_HOUSE = "originatingHouse";
  @SerializedName(SERIALIZED_NAME_ORIGINATING_HOUSE)
  private House originatingHouse;

  public static final String SERIALIZED_NAME_PETITION_INFORMATION = "petitionInformation";
  @SerializedName(SERIALIZED_NAME_PETITION_INFORMATION)
  private String petitionInformation;

  public static final String SERIALIZED_NAME_PETITIONING_PERIOD = "petitioningPeriod";
  @SerializedName(SERIALIZED_NAME_PETITIONING_PERIOD)
  private String petitioningPeriod;

  public static final String SERIALIZED_NAME_PROMOTERS = "promoters";
  @SerializedName(SERIALIZED_NAME_PROMOTERS)
  private List<Promoter> promoters;

  public static final String SERIALIZED_NAME_SHORT_TITLE = "shortTitle";
  @SerializedName(SERIALIZED_NAME_SHORT_TITLE)
  private String shortTitle;

  public static final String SERIALIZED_NAME_SPONSORS = "sponsors";
  @SerializedName(SERIALIZED_NAME_SPONSORS)
  private List<Sponsor> sponsors;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public Bill() {
  }

  public Bill agent(BillAgent agent) {
    this.agent = agent;
    return this;
  }

  /**
   * Get agent
   * @return agent
   */
  @javax.annotation.Nullable
  public BillAgent getAgent() {
    return agent;
  }

  public void setAgent(BillAgent agent) {
    this.agent = agent;
  }


  public Bill billId(Integer billId) {
    this.billId = billId;
    return this;
  }

  /**
   * Get billId
   * @return billId
   */
  @javax.annotation.Nullable
  public Integer getBillId() {
    return billId;
  }

  public void setBillId(Integer billId) {
    this.billId = billId;
  }


  public Bill billTypeId(Integer billTypeId) {
    this.billTypeId = billTypeId;
    return this;
  }

  /**
   * Get billTypeId
   * @return billTypeId
   */
  @javax.annotation.Nullable
  public Integer getBillTypeId() {
    return billTypeId;
  }

  public void setBillTypeId(Integer billTypeId) {
    this.billTypeId = billTypeId;
  }


  public Bill billWithdrawn(OffsetDateTime billWithdrawn) {
    this.billWithdrawn = billWithdrawn;
    return this;
  }

  /**
   * Get billWithdrawn
   * @return billWithdrawn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBillWithdrawn() {
    return billWithdrawn;
  }

  public void setBillWithdrawn(OffsetDateTime billWithdrawn) {
    this.billWithdrawn = billWithdrawn;
  }


  public Bill currentHouse(House currentHouse) {
    this.currentHouse = currentHouse;
    return this;
  }

  /**
   * Get currentHouse
   * @return currentHouse
   */
  @javax.annotation.Nullable
  public House getCurrentHouse() {
    return currentHouse;
  }

  public void setCurrentHouse(House currentHouse) {
    this.currentHouse = currentHouse;
  }


  public Bill currentStage(StageSummary currentStage) {
    this.currentStage = currentStage;
    return this;
  }

  /**
   * Get currentStage
   * @return currentStage
   */
  @javax.annotation.Nullable
  public StageSummary getCurrentStage() {
    return currentStage;
  }

  public void setCurrentStage(StageSummary currentStage) {
    this.currentStage = currentStage;
  }


  public Bill includedSessionIds(List<Integer> includedSessionIds) {
    this.includedSessionIds = includedSessionIds;
    return this;
  }

  public Bill addIncludedSessionIdsItem(Integer includedSessionIdsItem) {
    if (this.includedSessionIds == null) {
      this.includedSessionIds = new ArrayList<>();
    }
    this.includedSessionIds.add(includedSessionIdsItem);
    return this;
  }

  /**
   * Get includedSessionIds
   * @return includedSessionIds
   */
  @javax.annotation.Nullable
  public List<Integer> getIncludedSessionIds() {
    return includedSessionIds;
  }

  public void setIncludedSessionIds(List<Integer> includedSessionIds) {
    this.includedSessionIds = includedSessionIds;
  }


  public Bill introducedSessionId(Integer introducedSessionId) {
    this.introducedSessionId = introducedSessionId;
    return this;
  }

  /**
   * Get introducedSessionId
   * @return introducedSessionId
   */
  @javax.annotation.Nullable
  public Integer getIntroducedSessionId() {
    return introducedSessionId;
  }

  public void setIntroducedSessionId(Integer introducedSessionId) {
    this.introducedSessionId = introducedSessionId;
  }


  public Bill isAct(Boolean isAct) {
    this.isAct = isAct;
    return this;
  }

  /**
   * Get isAct
   * @return isAct
   */
  @javax.annotation.Nullable
  public Boolean getIsAct() {
    return isAct;
  }

  public void setIsAct(Boolean isAct) {
    this.isAct = isAct;
  }


  public Bill isDefeated(Boolean isDefeated) {
    this.isDefeated = isDefeated;
    return this;
  }

  /**
   * Get isDefeated
   * @return isDefeated
   */
  @javax.annotation.Nullable
  public Boolean getIsDefeated() {
    return isDefeated;
  }

  public void setIsDefeated(Boolean isDefeated) {
    this.isDefeated = isDefeated;
  }


  public Bill lastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

  /**
   * Get lastUpdate
   * @return lastUpdate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
  }


  public Bill longTitle(String longTitle) {
    this.longTitle = longTitle;
    return this;
  }

  /**
   * Get longTitle
   * @return longTitle
   */
  @javax.annotation.Nullable
  public String getLongTitle() {
    return longTitle;
  }

  public void setLongTitle(String longTitle) {
    this.longTitle = longTitle;
  }


  public Bill originatingHouse(House originatingHouse) {
    this.originatingHouse = originatingHouse;
    return this;
  }

  /**
   * Get originatingHouse
   * @return originatingHouse
   */
  @javax.annotation.Nullable
  public House getOriginatingHouse() {
    return originatingHouse;
  }

  public void setOriginatingHouse(House originatingHouse) {
    this.originatingHouse = originatingHouse;
  }


  public Bill petitionInformation(String petitionInformation) {
    this.petitionInformation = petitionInformation;
    return this;
  }

  /**
   * Get petitionInformation
   * @return petitionInformation
   */
  @javax.annotation.Nullable
  public String getPetitionInformation() {
    return petitionInformation;
  }

  public void setPetitionInformation(String petitionInformation) {
    this.petitionInformation = petitionInformation;
  }


  public Bill petitioningPeriod(String petitioningPeriod) {
    this.petitioningPeriod = petitioningPeriod;
    return this;
  }

  /**
   * Get petitioningPeriod
   * @return petitioningPeriod
   */
  @javax.annotation.Nullable
  public String getPetitioningPeriod() {
    return petitioningPeriod;
  }

  public void setPetitioningPeriod(String petitioningPeriod) {
    this.petitioningPeriod = petitioningPeriod;
  }


  public Bill promoters(List<Promoter> promoters) {
    this.promoters = promoters;
    return this;
  }

  public Bill addPromotersItem(Promoter promotersItem) {
    if (this.promoters == null) {
      this.promoters = new ArrayList<>();
    }
    this.promoters.add(promotersItem);
    return this;
  }

  /**
   * Get promoters
   * @return promoters
   */
  @javax.annotation.Nullable
  public List<Promoter> getPromoters() {
    return promoters;
  }

  public void setPromoters(List<Promoter> promoters) {
    this.promoters = promoters;
  }


  public Bill shortTitle(String shortTitle) {
    this.shortTitle = shortTitle;
    return this;
  }

  /**
   * Get shortTitle
   * @return shortTitle
   */
  @javax.annotation.Nullable
  public String getShortTitle() {
    return shortTitle;
  }

  public void setShortTitle(String shortTitle) {
    this.shortTitle = shortTitle;
  }


  public Bill sponsors(List<Sponsor> sponsors) {
    this.sponsors = sponsors;
    return this;
  }

  public Bill addSponsorsItem(Sponsor sponsorsItem) {
    if (this.sponsors == null) {
      this.sponsors = new ArrayList<>();
    }
    this.sponsors.add(sponsorsItem);
    return this;
  }

  /**
   * Get sponsors
   * @return sponsors
   */
  @javax.annotation.Nullable
  public List<Sponsor> getSponsors() {
    return sponsors;
  }

  public void setSponsors(List<Sponsor> sponsors) {
    this.sponsors = sponsors;
  }


  public Bill summary(String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Get summary
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Bill bill = (Bill) o;
    return Objects.equals(this.agent, bill.agent) &&
        Objects.equals(this.billId, bill.billId) &&
        Objects.equals(this.billTypeId, bill.billTypeId) &&
        Objects.equals(this.billWithdrawn, bill.billWithdrawn) &&
        Objects.equals(this.currentHouse, bill.currentHouse) &&
        Objects.equals(this.currentStage, bill.currentStage) &&
        Objects.equals(this.includedSessionIds, bill.includedSessionIds) &&
        Objects.equals(this.introducedSessionId, bill.introducedSessionId) &&
        Objects.equals(this.isAct, bill.isAct) &&
        Objects.equals(this.isDefeated, bill.isDefeated) &&
        Objects.equals(this.lastUpdate, bill.lastUpdate) &&
        Objects.equals(this.longTitle, bill.longTitle) &&
        Objects.equals(this.originatingHouse, bill.originatingHouse) &&
        Objects.equals(this.petitionInformation, bill.petitionInformation) &&
        Objects.equals(this.petitioningPeriod, bill.petitioningPeriod) &&
        Objects.equals(this.promoters, bill.promoters) &&
        Objects.equals(this.shortTitle, bill.shortTitle) &&
        Objects.equals(this.sponsors, bill.sponsors) &&
        Objects.equals(this.summary, bill.summary);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(agent, billId, billTypeId, billWithdrawn, currentHouse, currentStage, includedSessionIds, introducedSessionId, isAct, isDefeated, lastUpdate, longTitle, originatingHouse, petitionInformation, petitioningPeriod, promoters, shortTitle, sponsors, summary);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Bill {\n");
    sb.append("    agent: ").append(toIndentedString(agent)).append("\n");
    sb.append("    billId: ").append(toIndentedString(billId)).append("\n");
    sb.append("    billTypeId: ").append(toIndentedString(billTypeId)).append("\n");
    sb.append("    billWithdrawn: ").append(toIndentedString(billWithdrawn)).append("\n");
    sb.append("    currentHouse: ").append(toIndentedString(currentHouse)).append("\n");
    sb.append("    currentStage: ").append(toIndentedString(currentStage)).append("\n");
    sb.append("    includedSessionIds: ").append(toIndentedString(includedSessionIds)).append("\n");
    sb.append("    introducedSessionId: ").append(toIndentedString(introducedSessionId)).append("\n");
    sb.append("    isAct: ").append(toIndentedString(isAct)).append("\n");
    sb.append("    isDefeated: ").append(toIndentedString(isDefeated)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("    longTitle: ").append(toIndentedString(longTitle)).append("\n");
    sb.append("    originatingHouse: ").append(toIndentedString(originatingHouse)).append("\n");
    sb.append("    petitionInformation: ").append(toIndentedString(petitionInformation)).append("\n");
    sb.append("    petitioningPeriod: ").append(toIndentedString(petitioningPeriod)).append("\n");
    sb.append("    promoters: ").append(toIndentedString(promoters)).append("\n");
    sb.append("    shortTitle: ").append(toIndentedString(shortTitle)).append("\n");
    sb.append("    sponsors: ").append(toIndentedString(sponsors)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agent");
    openapiFields.add("billId");
    openapiFields.add("billTypeId");
    openapiFields.add("billWithdrawn");
    openapiFields.add("currentHouse");
    openapiFields.add("currentStage");
    openapiFields.add("includedSessionIds");
    openapiFields.add("introducedSessionId");
    openapiFields.add("isAct");
    openapiFields.add("isDefeated");
    openapiFields.add("lastUpdate");
    openapiFields.add("longTitle");
    openapiFields.add("originatingHouse");
    openapiFields.add("petitionInformation");
    openapiFields.add("petitioningPeriod");
    openapiFields.add("promoters");
    openapiFields.add("shortTitle");
    openapiFields.add("sponsors");
    openapiFields.add("summary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Bill
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Bill.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Bill is not found in the empty JSON string", Bill.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Bill.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Bill` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `agent`
      if (jsonObj.get("agent") != null && !jsonObj.get("agent").isJsonNull()) {
        BillAgent.validateJsonElement(jsonObj.get("agent"));
      }
      // validate the optional field `currentHouse`
      if (jsonObj.get("currentHouse") != null && !jsonObj.get("currentHouse").isJsonNull()) {
        House.validateJsonElement(jsonObj.get("currentHouse"));
      }
      // validate the optional field `currentStage`
      if (jsonObj.get("currentStage") != null && !jsonObj.get("currentStage").isJsonNull()) {
        StageSummary.validateJsonElement(jsonObj.get("currentStage"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedSessionIds") != null && !jsonObj.get("includedSessionIds").isJsonNull() && !jsonObj.get("includedSessionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedSessionIds` to be an array in the JSON string but got `%s`", jsonObj.get("includedSessionIds").toString()));
      }
      if ((jsonObj.get("longTitle") != null && !jsonObj.get("longTitle").isJsonNull()) && !jsonObj.get("longTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longTitle").toString()));
      }
      // validate the optional field `originatingHouse`
      if (jsonObj.get("originatingHouse") != null && !jsonObj.get("originatingHouse").isJsonNull()) {
        House.validateJsonElement(jsonObj.get("originatingHouse"));
      }
      if ((jsonObj.get("petitionInformation") != null && !jsonObj.get("petitionInformation").isJsonNull()) && !jsonObj.get("petitionInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `petitionInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("petitionInformation").toString()));
      }
      if ((jsonObj.get("petitioningPeriod") != null && !jsonObj.get("petitioningPeriod").isJsonNull()) && !jsonObj.get("petitioningPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `petitioningPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("petitioningPeriod").toString()));
      }
      if (jsonObj.get("promoters") != null && !jsonObj.get("promoters").isJsonNull()) {
        JsonArray jsonArraypromoters = jsonObj.getAsJsonArray("promoters");
        if (jsonArraypromoters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("promoters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `promoters` to be an array in the JSON string but got `%s`", jsonObj.get("promoters").toString()));
          }

          // validate the optional field `promoters` (array)
          for (int i = 0; i < jsonArraypromoters.size(); i++) {
            Promoter.validateJsonElement(jsonArraypromoters.get(i));
          };
        }
      }
      if ((jsonObj.get("shortTitle") != null && !jsonObj.get("shortTitle").isJsonNull()) && !jsonObj.get("shortTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortTitle").toString()));
      }
      if (jsonObj.get("sponsors") != null && !jsonObj.get("sponsors").isJsonNull()) {
        JsonArray jsonArraysponsors = jsonObj.getAsJsonArray("sponsors");
        if (jsonArraysponsors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sponsors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sponsors` to be an array in the JSON string but got `%s`", jsonObj.get("sponsors").toString()));
          }

          // validate the optional field `sponsors` (array)
          for (int i = 0; i < jsonArraysponsors.size(); i++) {
            Sponsor.validateJsonElement(jsonArraysponsors.get(i));
          };
        }
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Bill.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Bill' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Bill> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Bill.class));

       return (TypeAdapter<T>) new TypeAdapter<Bill>() {
           @Override
           public void write(JsonWriter out, Bill value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Bill read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Bill given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Bill
   * @throws IOException if the JSON string is invalid with respect to Bill
   */
  public static Bill fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Bill.class);
  }

  /**
   * Convert an instance of Bill to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

