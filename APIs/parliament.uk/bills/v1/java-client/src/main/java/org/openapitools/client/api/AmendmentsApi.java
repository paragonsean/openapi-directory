/*
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AmendmentDetail;
import org.openapitools.client.model.AmendmentSearchItemSearchResult;
import org.openapitools.client.model.Decision;
import org.openapitools.client.model.ProblemDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AmendmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AmendmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AmendmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAmendment
     * @param billId Amendment relating to a bill with bill ID specified (required)
     * @param billStageId Amendment relating to a bill stage with bill stage ID specified (required)
     * @param amendmentId Amendment with amendment ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAmendmentCall(Integer billId, Integer billStageId, Integer amendmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Bills/{billId}/Stages/{billStageId}/Amendments/{amendmentId}"
            .replace("{" + "billId" + "}", localVarApiClient.escapeString(billId.toString()))
            .replace("{" + "billStageId" + "}", localVarApiClient.escapeString(billStageId.toString()))
            .replace("{" + "amendmentId" + "}", localVarApiClient.escapeString(amendmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAmendmentValidateBeforeCall(Integer billId, Integer billStageId, Integer amendmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billId' is set
        if (billId == null) {
            throw new ApiException("Missing the required parameter 'billId' when calling getAmendment(Async)");
        }

        // verify the required parameter 'billStageId' is set
        if (billStageId == null) {
            throw new ApiException("Missing the required parameter 'billStageId' when calling getAmendment(Async)");
        }

        // verify the required parameter 'amendmentId' is set
        if (amendmentId == null) {
            throw new ApiException("Missing the required parameter 'amendmentId' when calling getAmendment(Async)");
        }

        return getAmendmentCall(billId, billStageId, amendmentId, _callback);

    }

    /**
     * Returns an amendment.
     * 
     * @param billId Amendment relating to a bill with bill ID specified (required)
     * @param billStageId Amendment relating to a bill stage with bill stage ID specified (required)
     * @param amendmentId Amendment with amendment ID specified (required)
     * @return AmendmentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public AmendmentDetail getAmendment(Integer billId, Integer billStageId, Integer amendmentId) throws ApiException {
        ApiResponse<AmendmentDetail> localVarResp = getAmendmentWithHttpInfo(billId, billStageId, amendmentId);
        return localVarResp.getData();
    }

    /**
     * Returns an amendment.
     * 
     * @param billId Amendment relating to a bill with bill ID specified (required)
     * @param billStageId Amendment relating to a bill stage with bill stage ID specified (required)
     * @param amendmentId Amendment with amendment ID specified (required)
     * @return ApiResponse&lt;AmendmentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AmendmentDetail> getAmendmentWithHttpInfo(Integer billId, Integer billStageId, Integer amendmentId) throws ApiException {
        okhttp3.Call localVarCall = getAmendmentValidateBeforeCall(billId, billStageId, amendmentId, null);
        Type localVarReturnType = new TypeToken<AmendmentDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns an amendment. (asynchronously)
     * 
     * @param billId Amendment relating to a bill with bill ID specified (required)
     * @param billStageId Amendment relating to a bill stage with bill stage ID specified (required)
     * @param amendmentId Amendment with amendment ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAmendmentAsync(Integer billId, Integer billStageId, Integer amendmentId, final ApiCallback<AmendmentDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAmendmentValidateBeforeCall(billId, billStageId, amendmentId, _callback);
        Type localVarReturnType = new TypeToken<AmendmentDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAmendments
     * @param billId Amendments relating to a Bill with Bill ID specified (required)
     * @param billStageId Amendments relating to a Bill stage with Bill stage ID specified (required)
     * @param searchTerm  (optional)
     * @param decision  (optional)
     * @param memberId  (optional)
     * @param skip  (optional)
     * @param take  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAmendmentsCall(Integer billId, Integer billStageId, String searchTerm, Decision decision, Integer memberId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Bills/{billId}/Stages/{billStageId}/Amendments"
            .replace("{" + "billId" + "}", localVarApiClient.escapeString(billId.toString()))
            .replace("{" + "billStageId" + "}", localVarApiClient.escapeString(billStageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SearchTerm", searchTerm));
        }

        if (decision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Decision", decision));
        }

        if (memberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MemberId", memberId));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Take", take));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAmendmentsValidateBeforeCall(Integer billId, Integer billStageId, String searchTerm, Decision decision, Integer memberId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billId' is set
        if (billId == null) {
            throw new ApiException("Missing the required parameter 'billId' when calling getAmendments(Async)");
        }

        // verify the required parameter 'billStageId' is set
        if (billStageId == null) {
            throw new ApiException("Missing the required parameter 'billStageId' when calling getAmendments(Async)");
        }

        return getAmendmentsCall(billId, billStageId, searchTerm, decision, memberId, skip, take, _callback);

    }

    /**
     * Returns a list of amendments.
     * 
     * @param billId Amendments relating to a Bill with Bill ID specified (required)
     * @param billStageId Amendments relating to a Bill stage with Bill stage ID specified (required)
     * @param searchTerm  (optional)
     * @param decision  (optional)
     * @param memberId  (optional)
     * @param skip  (optional)
     * @param take  (optional)
     * @return AmendmentSearchItemSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public AmendmentSearchItemSearchResult getAmendments(Integer billId, Integer billStageId, String searchTerm, Decision decision, Integer memberId, Integer skip, Integer take) throws ApiException {
        ApiResponse<AmendmentSearchItemSearchResult> localVarResp = getAmendmentsWithHttpInfo(billId, billStageId, searchTerm, decision, memberId, skip, take);
        return localVarResp.getData();
    }

    /**
     * Returns a list of amendments.
     * 
     * @param billId Amendments relating to a Bill with Bill ID specified (required)
     * @param billStageId Amendments relating to a Bill stage with Bill stage ID specified (required)
     * @param searchTerm  (optional)
     * @param decision  (optional)
     * @param memberId  (optional)
     * @param skip  (optional)
     * @param take  (optional)
     * @return ApiResponse&lt;AmendmentSearchItemSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AmendmentSearchItemSearchResult> getAmendmentsWithHttpInfo(Integer billId, Integer billStageId, String searchTerm, Decision decision, Integer memberId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = getAmendmentsValidateBeforeCall(billId, billStageId, searchTerm, decision, memberId, skip, take, null);
        Type localVarReturnType = new TypeToken<AmendmentSearchItemSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of amendments. (asynchronously)
     * 
     * @param billId Amendments relating to a Bill with Bill ID specified (required)
     * @param billStageId Amendments relating to a Bill stage with Bill stage ID specified (required)
     * @param searchTerm  (optional)
     * @param decision  (optional)
     * @param memberId  (optional)
     * @param skip  (optional)
     * @param take  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAmendmentsAsync(Integer billId, Integer billStageId, String searchTerm, Decision decision, Integer memberId, Integer skip, Integer take, final ApiCallback<AmendmentSearchItemSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAmendmentsValidateBeforeCall(billId, billStageId, searchTerm, decision, memberId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<AmendmentSearchItemSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
