/*
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.House;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Member
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:41.110497-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Member {
  public static final String SERIALIZED_NAME_HOUSE = "house";
  @SerializedName(SERIALIZED_NAME_HOUSE)
  private House house;

  public static final String SERIALIZED_NAME_MEMBER_FROM = "memberFrom";
  @SerializedName(SERIALIZED_NAME_MEMBER_FROM)
  private String memberFrom;

  public static final String SERIALIZED_NAME_MEMBER_ID = "memberId";
  @SerializedName(SERIALIZED_NAME_MEMBER_ID)
  private Integer memberId;

  public static final String SERIALIZED_NAME_MEMBER_PAGE = "memberPage";
  @SerializedName(SERIALIZED_NAME_MEMBER_PAGE)
  private String memberPage;

  public static final String SERIALIZED_NAME_MEMBER_PHOTO = "memberPhoto";
  @SerializedName(SERIALIZED_NAME_MEMBER_PHOTO)
  private String memberPhoto;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARTY = "party";
  @SerializedName(SERIALIZED_NAME_PARTY)
  private String party;

  public static final String SERIALIZED_NAME_PARTY_COLOUR = "partyColour";
  @SerializedName(SERIALIZED_NAME_PARTY_COLOUR)
  private String partyColour;

  public Member() {
  }

  public Member house(House house) {
    this.house = house;
    return this;
  }

  /**
   * Get house
   * @return house
   */
  @javax.annotation.Nullable
  public House getHouse() {
    return house;
  }

  public void setHouse(House house) {
    this.house = house;
  }


  public Member memberFrom(String memberFrom) {
    this.memberFrom = memberFrom;
    return this;
  }

  /**
   * Get memberFrom
   * @return memberFrom
   */
  @javax.annotation.Nullable
  public String getMemberFrom() {
    return memberFrom;
  }

  public void setMemberFrom(String memberFrom) {
    this.memberFrom = memberFrom;
  }


  public Member memberId(Integer memberId) {
    this.memberId = memberId;
    return this;
  }

  /**
   * Get memberId
   * @return memberId
   */
  @javax.annotation.Nullable
  public Integer getMemberId() {
    return memberId;
  }

  public void setMemberId(Integer memberId) {
    this.memberId = memberId;
  }


  public Member memberPage(String memberPage) {
    this.memberPage = memberPage;
    return this;
  }

  /**
   * Get memberPage
   * @return memberPage
   */
  @javax.annotation.Nullable
  public String getMemberPage() {
    return memberPage;
  }

  public void setMemberPage(String memberPage) {
    this.memberPage = memberPage;
  }


  public Member memberPhoto(String memberPhoto) {
    this.memberPhoto = memberPhoto;
    return this;
  }

  /**
   * Get memberPhoto
   * @return memberPhoto
   */
  @javax.annotation.Nullable
  public String getMemberPhoto() {
    return memberPhoto;
  }

  public void setMemberPhoto(String memberPhoto) {
    this.memberPhoto = memberPhoto;
  }


  public Member name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Member party(String party) {
    this.party = party;
    return this;
  }

  /**
   * Get party
   * @return party
   */
  @javax.annotation.Nullable
  public String getParty() {
    return party;
  }

  public void setParty(String party) {
    this.party = party;
  }


  public Member partyColour(String partyColour) {
    this.partyColour = partyColour;
    return this;
  }

  /**
   * Get partyColour
   * @return partyColour
   */
  @javax.annotation.Nullable
  public String getPartyColour() {
    return partyColour;
  }

  public void setPartyColour(String partyColour) {
    this.partyColour = partyColour;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Member member = (Member) o;
    return Objects.equals(this.house, member.house) &&
        Objects.equals(this.memberFrom, member.memberFrom) &&
        Objects.equals(this.memberId, member.memberId) &&
        Objects.equals(this.memberPage, member.memberPage) &&
        Objects.equals(this.memberPhoto, member.memberPhoto) &&
        Objects.equals(this.name, member.name) &&
        Objects.equals(this.party, member.party) &&
        Objects.equals(this.partyColour, member.partyColour);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(house, memberFrom, memberId, memberPage, memberPhoto, name, party, partyColour);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Member {\n");
    sb.append("    house: ").append(toIndentedString(house)).append("\n");
    sb.append("    memberFrom: ").append(toIndentedString(memberFrom)).append("\n");
    sb.append("    memberId: ").append(toIndentedString(memberId)).append("\n");
    sb.append("    memberPage: ").append(toIndentedString(memberPage)).append("\n");
    sb.append("    memberPhoto: ").append(toIndentedString(memberPhoto)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    party: ").append(toIndentedString(party)).append("\n");
    sb.append("    partyColour: ").append(toIndentedString(partyColour)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("house");
    openapiFields.add("memberFrom");
    openapiFields.add("memberId");
    openapiFields.add("memberPage");
    openapiFields.add("memberPhoto");
    openapiFields.add("name");
    openapiFields.add("party");
    openapiFields.add("partyColour");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Member
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Member.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Member is not found in the empty JSON string", Member.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Member.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Member` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `house`
      if (jsonObj.get("house") != null && !jsonObj.get("house").isJsonNull()) {
        House.validateJsonElement(jsonObj.get("house"));
      }
      if ((jsonObj.get("memberFrom") != null && !jsonObj.get("memberFrom").isJsonNull()) && !jsonObj.get("memberFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memberFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memberFrom").toString()));
      }
      if ((jsonObj.get("memberPage") != null && !jsonObj.get("memberPage").isJsonNull()) && !jsonObj.get("memberPage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memberPage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memberPage").toString()));
      }
      if ((jsonObj.get("memberPhoto") != null && !jsonObj.get("memberPhoto").isJsonNull()) && !jsonObj.get("memberPhoto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memberPhoto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memberPhoto").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("party") != null && !jsonObj.get("party").isJsonNull()) && !jsonObj.get("party").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party").toString()));
      }
      if ((jsonObj.get("partyColour") != null && !jsonObj.get("partyColour").isJsonNull()) && !jsonObj.get("partyColour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partyColour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partyColour").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Member.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Member' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Member> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Member.class));

       return (TypeAdapter<T>) new TypeAdapter<Member>() {
           @Override
           public void write(JsonWriter out, Member value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Member read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Member given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Member
   * @throws IOException if the JSON string is invalid with respect to Member
   */
  public static Member fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Member.class);
  }

  /**
   * Convert an instance of Member to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

