/**
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import House from './House';

/**
 * The AmendmentMember model module.
 * @module model/AmendmentMember
 * @version v1
 */
class AmendmentMember {
    /**
     * Constructs a new <code>AmendmentMember</code>.
     * @alias module:model/AmendmentMember
     */
    constructor() { 
        
        AmendmentMember.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AmendmentMember</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AmendmentMember} obj Optional instance to populate.
     * @return {module:model/AmendmentMember} The populated <code>AmendmentMember</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AmendmentMember();

            if (data.hasOwnProperty('house')) {
                obj['house'] = House.constructFromObject(data['house']);
            }
            if (data.hasOwnProperty('isLead')) {
                obj['isLead'] = ApiClient.convertToType(data['isLead'], 'Boolean');
            }
            if (data.hasOwnProperty('memberFrom')) {
                obj['memberFrom'] = ApiClient.convertToType(data['memberFrom'], 'String');
            }
            if (data.hasOwnProperty('memberId')) {
                obj['memberId'] = ApiClient.convertToType(data['memberId'], 'Number');
            }
            if (data.hasOwnProperty('memberPage')) {
                obj['memberPage'] = ApiClient.convertToType(data['memberPage'], 'String');
            }
            if (data.hasOwnProperty('memberPhoto')) {
                obj['memberPhoto'] = ApiClient.convertToType(data['memberPhoto'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('party')) {
                obj['party'] = ApiClient.convertToType(data['party'], 'String');
            }
            if (data.hasOwnProperty('partyColour')) {
                obj['partyColour'] = ApiClient.convertToType(data['partyColour'], 'String');
            }
            if (data.hasOwnProperty('sortOrder')) {
                obj['sortOrder'] = ApiClient.convertToType(data['sortOrder'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AmendmentMember</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AmendmentMember</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['memberFrom'] && !(typeof data['memberFrom'] === 'string' || data['memberFrom'] instanceof String)) {
            throw new Error("Expected the field `memberFrom` to be a primitive type in the JSON string but got " + data['memberFrom']);
        }
        // ensure the json data is a string
        if (data['memberPage'] && !(typeof data['memberPage'] === 'string' || data['memberPage'] instanceof String)) {
            throw new Error("Expected the field `memberPage` to be a primitive type in the JSON string but got " + data['memberPage']);
        }
        // ensure the json data is a string
        if (data['memberPhoto'] && !(typeof data['memberPhoto'] === 'string' || data['memberPhoto'] instanceof String)) {
            throw new Error("Expected the field `memberPhoto` to be a primitive type in the JSON string but got " + data['memberPhoto']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['party'] && !(typeof data['party'] === 'string' || data['party'] instanceof String)) {
            throw new Error("Expected the field `party` to be a primitive type in the JSON string but got " + data['party']);
        }
        // ensure the json data is a string
        if (data['partyColour'] && !(typeof data['partyColour'] === 'string' || data['partyColour'] instanceof String)) {
            throw new Error("Expected the field `partyColour` to be a primitive type in the JSON string but got " + data['partyColour']);
        }

        return true;
    }


}



/**
 * @member {module:model/House} house
 */
AmendmentMember.prototype['house'] = undefined;

/**
 * @member {Boolean} isLead
 */
AmendmentMember.prototype['isLead'] = undefined;

/**
 * @member {String} memberFrom
 */
AmendmentMember.prototype['memberFrom'] = undefined;

/**
 * @member {Number} memberId
 */
AmendmentMember.prototype['memberId'] = undefined;

/**
 * @member {String} memberPage
 */
AmendmentMember.prototype['memberPage'] = undefined;

/**
 * @member {String} memberPhoto
 */
AmendmentMember.prototype['memberPhoto'] = undefined;

/**
 * @member {String} name
 */
AmendmentMember.prototype['name'] = undefined;

/**
 * @member {String} party
 */
AmendmentMember.prototype['party'] = undefined;

/**
 * @member {String} partyColour
 */
AmendmentMember.prototype['partyColour'] = undefined;

/**
 * @member {Number} sortOrder
 */
AmendmentMember.prototype['sortOrder'] = undefined;






export default AmendmentMember;

