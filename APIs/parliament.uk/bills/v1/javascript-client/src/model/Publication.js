/**
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PublicationDocument from './PublicationDocument';
import PublicationLink from './PublicationLink';
import PublicationType from './PublicationType';

/**
 * The Publication model module.
 * @module model/Publication
 * @version v1
 */
class Publication {
    /**
     * Constructs a new <code>Publication</code>.
     * @alias module:model/Publication
     */
    constructor() { 
        
        Publication.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Publication</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Publication} obj Optional instance to populate.
     * @return {module:model/Publication} The populated <code>Publication</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Publication();

            if (data.hasOwnProperty('displayDate')) {
                obj['displayDate'] = ApiClient.convertToType(data['displayDate'], 'Date');
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], [PublicationDocument]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [PublicationLink]);
            }
            if (data.hasOwnProperty('publicationType')) {
                obj['publicationType'] = PublicationType.constructFromObject(data['publicationType']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Publication</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Publication</code>.
     */
    static validateJSON(data) {
        if (data['files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['files'])) {
                throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
            }
            // validate the optional field `files` (array)
            for (const item of data['files']) {
                PublicationDocument.validateJSON(item);
            };
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                PublicationLink.validateJSON(item);
            };
        }
        // validate the optional field `publicationType`
        if (data['publicationType']) { // data not null
          PublicationType.validateJSON(data['publicationType']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {Date} displayDate
 */
Publication.prototype['displayDate'] = undefined;

/**
 * @member {Array.<module:model/PublicationDocument>} files
 */
Publication.prototype['files'] = undefined;

/**
 * @member {Number} id
 */
Publication.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/PublicationLink>} links
 */
Publication.prototype['links'] = undefined;

/**
 * @member {module:model/PublicationType} publicationType
 */
Publication.prototype['publicationType'] = undefined;

/**
 * @member {String} title
 */
Publication.prototype['title'] = undefined;






export default Publication;

