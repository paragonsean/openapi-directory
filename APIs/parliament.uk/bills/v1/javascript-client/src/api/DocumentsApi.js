/**
 * Bills API
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../model/ProblemDetails';
import PublicationDocument from '../model/PublicationDocument';

/**
* Documents service.
* @module api/DocumentsApi
* @version v1
*/
export default class DocumentsApi {

    /**
    * Constructs a new DocumentsApi. 
    * @alias module:api/DocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1PublicationsPublicationIdDocumentsDocumentIdDownloadGet operation.
     * @callback module:api/DocumentsApi~apiV1PublicationsPublicationIdDocumentsDocumentIdDownloadGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a document.
     * @param {Number} publicationId Document with publication Id specified
     * @param {Number} documentId Document with Id specified
     * @param {module:api/DocumentsApi~apiV1PublicationsPublicationIdDocumentsDocumentIdDownloadGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1PublicationsPublicationIdDocumentsDocumentIdDownloadGet(publicationId, documentId, callback) {
      let postBody = null;
      // verify the required parameter 'publicationId' is set
      if (publicationId === undefined || publicationId === null) {
        throw new Error("Missing the required parameter 'publicationId' when calling apiV1PublicationsPublicationIdDocumentsDocumentIdDownloadGet");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling apiV1PublicationsPublicationIdDocumentsDocumentIdDownloadGet");
      }

      let pathParams = {
        'publicationId': publicationId,
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/Publications/{publicationId}/Documents/{documentId}/Download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1PublicationsPublicationIdDocumentsDocumentIdGet operation.
     * @callback module:api/DocumentsApi~apiV1PublicationsPublicationIdDocumentsDocumentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicationDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return information on a document.
     * @param {Number} publicationId Document with publication Id specified
     * @param {Number} documentId Document with Id specified
     * @param {module:api/DocumentsApi~apiV1PublicationsPublicationIdDocumentsDocumentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicationDocument}
     */
    apiV1PublicationsPublicationIdDocumentsDocumentIdGet(publicationId, documentId, callback) {
      let postBody = null;
      // verify the required parameter 'publicationId' is set
      if (publicationId === undefined || publicationId === null) {
        throw new Error("Missing the required parameter 'publicationId' when calling apiV1PublicationsPublicationIdDocumentsDocumentIdGet");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling apiV1PublicationsPublicationIdDocumentsDocumentIdGet");
      }

      let pathParams = {
        'publicationId': publicationId,
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = PublicationDocument;
      return this.apiClient.callApi(
        '/api/v1/Publications/{publicationId}/Documents/{documentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
