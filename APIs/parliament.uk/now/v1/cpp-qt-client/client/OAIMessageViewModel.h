/**
 * Annunciator content API
 * Get data from the annunciator system.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMessageViewModel.h
 *
 * 
 */

#ifndef OAIMessageViewModel_H
#define OAIMessageViewModel_H

#include <QJsonObject>

#include "OAIAnnunciatorMessageType.h"
#include "OAIScrollingMessageViewModel.h"
#include "OAISlideViewModel.h"
#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIScrollingMessageViewModel;
class OAISlideViewModel;

class OAIMessageViewModel : public OAIObject {
public:
    OAIMessageViewModel();
    OAIMessageViewModel(QString json);
    ~OAIMessageViewModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAnnunciatorDisabled() const;
    void setAnnunciatorDisabled(const bool &annunciator_disabled);
    bool is_annunciator_disabled_Set() const;
    bool is_annunciator_disabled_Valid() const;

    OAIAnnunciatorMessageType getAnnunciatorType() const;
    void setAnnunciatorType(const OAIAnnunciatorMessageType &annunciator_type);
    bool is_annunciator_type_Set() const;
    bool is_annunciator_type_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsSecurityOverride() const;
    void setIsSecurityOverride(const bool &is_security_override);
    bool is_is_security_override_Set() const;
    bool is_is_security_override_Valid() const;

    QDateTime getPublishTime() const;
    void setPublishTime(const QDateTime &publish_time);
    bool is_publish_time_Set() const;
    bool is_publish_time_Valid() const;

    QList<OAIScrollingMessageViewModel> getScrollingMessages() const;
    void setScrollingMessages(const QList<OAIScrollingMessageViewModel> &scrolling_messages);
    bool is_scrolling_messages_Set() const;
    bool is_scrolling_messages_Valid() const;

    bool isShowCommonsBell() const;
    void setShowCommonsBell(const bool &show_commons_bell);
    bool is_show_commons_bell_Set() const;
    bool is_show_commons_bell_Valid() const;

    bool isShowLordsBell() const;
    void setShowLordsBell(const bool &show_lords_bell);
    bool is_show_lords_bell_Set() const;
    bool is_show_lords_bell_Valid() const;

    QList<OAISlideViewModel> getSlides() const;
    void setSlides(const QList<OAISlideViewModel> &slides);
    bool is_slides_Set() const;
    bool is_slides_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_annunciator_disabled;
    bool m_annunciator_disabled_isSet;
    bool m_annunciator_disabled_isValid;

    OAIAnnunciatorMessageType m_annunciator_type;
    bool m_annunciator_type_isSet;
    bool m_annunciator_type_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_security_override;
    bool m_is_security_override_isSet;
    bool m_is_security_override_isValid;

    QDateTime m_publish_time;
    bool m_publish_time_isSet;
    bool m_publish_time_isValid;

    QList<OAIScrollingMessageViewModel> m_scrolling_messages;
    bool m_scrolling_messages_isSet;
    bool m_scrolling_messages_isValid;

    bool m_show_commons_bell;
    bool m_show_commons_bell_isSet;
    bool m_show_commons_bell_isValid;

    bool m_show_lords_bell;
    bool m_show_lords_bell_isSet;
    bool m_show_lords_bell_isValid;

    QList<OAISlideViewModel> m_slides;
    bool m_slides_isSet;
    bool m_slides_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMessageViewModel)

#endif // OAIMessageViewModel_H
