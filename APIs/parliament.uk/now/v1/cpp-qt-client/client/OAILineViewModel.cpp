/**
 * Annunciator content API
 * Get data from the annunciator system.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineViewModel::OAILineViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineViewModel::OAILineViewModel() {
    this->initializeModel();
}

OAILineViewModel::~OAILineViewModel() {}

void OAILineViewModel::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_content_additional_json_isSet = false;
    m_content_additional_json_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_content_url_isSet = false;
    m_content_url_isValid = false;

    m_display_order_isSet = false;
    m_display_order_isValid = false;

    m_force_capitalisation_isSet = false;
    m_force_capitalisation_isValid = false;

    m_horizontal_alignment_isSet = false;
    m_horizontal_alignment_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;

    m_vertical_alignment_isSet = false;
    m_vertical_alignment_isValid = false;
}

void OAILineViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineViewModel::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_content_additional_json_isValid = ::OpenAPI::fromJsonValue(m_content_additional_json, json[QString("contentAdditionalJson")]);
    m_content_additional_json_isSet = !json[QString("contentAdditionalJson")].isNull() && m_content_additional_json_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_content_url_isValid = ::OpenAPI::fromJsonValue(m_content_url, json[QString("contentUrl")]);
    m_content_url_isSet = !json[QString("contentUrl")].isNull() && m_content_url_isValid;

    m_display_order_isValid = ::OpenAPI::fromJsonValue(m_display_order, json[QString("displayOrder")]);
    m_display_order_isSet = !json[QString("displayOrder")].isNull() && m_display_order_isValid;

    m_force_capitalisation_isValid = ::OpenAPI::fromJsonValue(m_force_capitalisation, json[QString("forceCapitalisation")]);
    m_force_capitalisation_isSet = !json[QString("forceCapitalisation")].isNull() && m_force_capitalisation_isValid;

    m_horizontal_alignment_isValid = ::OpenAPI::fromJsonValue(m_horizontal_alignment, json[QString("horizontalAlignment")]);
    m_horizontal_alignment_isSet = !json[QString("horizontalAlignment")].isNull() && m_horizontal_alignment_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("style")]);
    m_style_isSet = !json[QString("style")].isNull() && m_style_isValid;

    m_vertical_alignment_isValid = ::OpenAPI::fromJsonValue(m_vertical_alignment, json[QString("verticalAlignment")]);
    m_vertical_alignment_isSet = !json[QString("verticalAlignment")].isNull() && m_vertical_alignment_isValid;
}

QString OAILineViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_content_additional_json_isSet) {
        obj.insert(QString("contentAdditionalJson"), ::OpenAPI::toJsonValue(m_content_additional_json));
    }
    if (m_content_type.isSet()) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_content_url_isSet) {
        obj.insert(QString("contentUrl"), ::OpenAPI::toJsonValue(m_content_url));
    }
    if (m_display_order_isSet) {
        obj.insert(QString("displayOrder"), ::OpenAPI::toJsonValue(m_display_order));
    }
    if (m_force_capitalisation_isSet) {
        obj.insert(QString("forceCapitalisation"), ::OpenAPI::toJsonValue(m_force_capitalisation));
    }
    if (m_horizontal_alignment.isSet()) {
        obj.insert(QString("horizontalAlignment"), ::OpenAPI::toJsonValue(m_horizontal_alignment));
    }
    if (m_member.isSet()) {
        obj.insert(QString("member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_style.isSet()) {
        obj.insert(QString("style"), ::OpenAPI::toJsonValue(m_style));
    }
    if (m_vertical_alignment.isSet()) {
        obj.insert(QString("verticalAlignment"), ::OpenAPI::toJsonValue(m_vertical_alignment));
    }
    return obj;
}

QString OAILineViewModel::getContent() const {
    return m_content;
}
void OAILineViewModel::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAILineViewModel::is_content_Set() const{
    return m_content_isSet;
}

bool OAILineViewModel::is_content_Valid() const{
    return m_content_isValid;
}

QString OAILineViewModel::getContentAdditionalJson() const {
    return m_content_additional_json;
}
void OAILineViewModel::setContentAdditionalJson(const QString &content_additional_json) {
    m_content_additional_json = content_additional_json;
    m_content_additional_json_isSet = true;
}

bool OAILineViewModel::is_content_additional_json_Set() const{
    return m_content_additional_json_isSet;
}

bool OAILineViewModel::is_content_additional_json_Valid() const{
    return m_content_additional_json_isValid;
}

OAIContentType OAILineViewModel::getContentType() const {
    return m_content_type;
}
void OAILineViewModel::setContentType(const OAIContentType &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAILineViewModel::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAILineViewModel::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAILineViewModel::getContentUrl() const {
    return m_content_url;
}
void OAILineViewModel::setContentUrl(const QString &content_url) {
    m_content_url = content_url;
    m_content_url_isSet = true;
}

bool OAILineViewModel::is_content_url_Set() const{
    return m_content_url_isSet;
}

bool OAILineViewModel::is_content_url_Valid() const{
    return m_content_url_isValid;
}

qint32 OAILineViewModel::getDisplayOrder() const {
    return m_display_order;
}
void OAILineViewModel::setDisplayOrder(const qint32 &display_order) {
    m_display_order = display_order;
    m_display_order_isSet = true;
}

bool OAILineViewModel::is_display_order_Set() const{
    return m_display_order_isSet;
}

bool OAILineViewModel::is_display_order_Valid() const{
    return m_display_order_isValid;
}

bool OAILineViewModel::isForceCapitalisation() const {
    return m_force_capitalisation;
}
void OAILineViewModel::setForceCapitalisation(const bool &force_capitalisation) {
    m_force_capitalisation = force_capitalisation;
    m_force_capitalisation_isSet = true;
}

bool OAILineViewModel::is_force_capitalisation_Set() const{
    return m_force_capitalisation_isSet;
}

bool OAILineViewModel::is_force_capitalisation_Valid() const{
    return m_force_capitalisation_isValid;
}

OAIHorizontalAlignment OAILineViewModel::getHorizontalAlignment() const {
    return m_horizontal_alignment;
}
void OAILineViewModel::setHorizontalAlignment(const OAIHorizontalAlignment &horizontal_alignment) {
    m_horizontal_alignment = horizontal_alignment;
    m_horizontal_alignment_isSet = true;
}

bool OAILineViewModel::is_horizontal_alignment_Set() const{
    return m_horizontal_alignment_isSet;
}

bool OAILineViewModel::is_horizontal_alignment_Valid() const{
    return m_horizontal_alignment_isValid;
}

OAIMemberViewModel OAILineViewModel::getMember() const {
    return m_member;
}
void OAILineViewModel::setMember(const OAIMemberViewModel &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAILineViewModel::is_member_Set() const{
    return m_member_isSet;
}

bool OAILineViewModel::is_member_Valid() const{
    return m_member_isValid;
}

OAIContentStyle OAILineViewModel::getStyle() const {
    return m_style;
}
void OAILineViewModel::setStyle(const OAIContentStyle &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAILineViewModel::is_style_Set() const{
    return m_style_isSet;
}

bool OAILineViewModel::is_style_Valid() const{
    return m_style_isValid;
}

OAIVerticalAlignment OAILineViewModel::getVerticalAlignment() const {
    return m_vertical_alignment;
}
void OAILineViewModel::setVerticalAlignment(const OAIVerticalAlignment &vertical_alignment) {
    m_vertical_alignment = vertical_alignment;
    m_vertical_alignment_isSet = true;
}

bool OAILineViewModel::is_vertical_alignment_Set() const{
    return m_vertical_alignment_isSet;
}

bool OAILineViewModel::is_vertical_alignment_Valid() const{
    return m_vertical_alignment_isValid;
}

bool OAILineViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_additional_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_capitalisation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_alignment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_alignment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
