/**
 * Annunciator content API
 * Get data from the annunciator system.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageViewModel::OAIMessageViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageViewModel::OAIMessageViewModel() {
    this->initializeModel();
}

OAIMessageViewModel::~OAIMessageViewModel() {}

void OAIMessageViewModel::initializeModel() {

    m_annunciator_disabled_isSet = false;
    m_annunciator_disabled_isValid = false;

    m_annunciator_type_isSet = false;
    m_annunciator_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_security_override_isSet = false;
    m_is_security_override_isValid = false;

    m_publish_time_isSet = false;
    m_publish_time_isValid = false;

    m_scrolling_messages_isSet = false;
    m_scrolling_messages_isValid = false;

    m_show_commons_bell_isSet = false;
    m_show_commons_bell_isValid = false;

    m_show_lords_bell_isSet = false;
    m_show_lords_bell_isValid = false;

    m_slides_isSet = false;
    m_slides_isValid = false;
}

void OAIMessageViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageViewModel::fromJsonObject(QJsonObject json) {

    m_annunciator_disabled_isValid = ::OpenAPI::fromJsonValue(m_annunciator_disabled, json[QString("annunciatorDisabled")]);
    m_annunciator_disabled_isSet = !json[QString("annunciatorDisabled")].isNull() && m_annunciator_disabled_isValid;

    m_annunciator_type_isValid = ::OpenAPI::fromJsonValue(m_annunciator_type, json[QString("annunciatorType")]);
    m_annunciator_type_isSet = !json[QString("annunciatorType")].isNull() && m_annunciator_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_security_override_isValid = ::OpenAPI::fromJsonValue(m_is_security_override, json[QString("isSecurityOverride")]);
    m_is_security_override_isSet = !json[QString("isSecurityOverride")].isNull() && m_is_security_override_isValid;

    m_publish_time_isValid = ::OpenAPI::fromJsonValue(m_publish_time, json[QString("publishTime")]);
    m_publish_time_isSet = !json[QString("publishTime")].isNull() && m_publish_time_isValid;

    m_scrolling_messages_isValid = ::OpenAPI::fromJsonValue(m_scrolling_messages, json[QString("scrollingMessages")]);
    m_scrolling_messages_isSet = !json[QString("scrollingMessages")].isNull() && m_scrolling_messages_isValid;

    m_show_commons_bell_isValid = ::OpenAPI::fromJsonValue(m_show_commons_bell, json[QString("showCommonsBell")]);
    m_show_commons_bell_isSet = !json[QString("showCommonsBell")].isNull() && m_show_commons_bell_isValid;

    m_show_lords_bell_isValid = ::OpenAPI::fromJsonValue(m_show_lords_bell, json[QString("showLordsBell")]);
    m_show_lords_bell_isSet = !json[QString("showLordsBell")].isNull() && m_show_lords_bell_isValid;

    m_slides_isValid = ::OpenAPI::fromJsonValue(m_slides, json[QString("slides")]);
    m_slides_isSet = !json[QString("slides")].isNull() && m_slides_isValid;
}

QString OAIMessageViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_annunciator_disabled_isSet) {
        obj.insert(QString("annunciatorDisabled"), ::OpenAPI::toJsonValue(m_annunciator_disabled));
    }
    if (m_annunciator_type.isSet()) {
        obj.insert(QString("annunciatorType"), ::OpenAPI::toJsonValue(m_annunciator_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_security_override_isSet) {
        obj.insert(QString("isSecurityOverride"), ::OpenAPI::toJsonValue(m_is_security_override));
    }
    if (m_publish_time_isSet) {
        obj.insert(QString("publishTime"), ::OpenAPI::toJsonValue(m_publish_time));
    }
    if (m_scrolling_messages.size() > 0) {
        obj.insert(QString("scrollingMessages"), ::OpenAPI::toJsonValue(m_scrolling_messages));
    }
    if (m_show_commons_bell_isSet) {
        obj.insert(QString("showCommonsBell"), ::OpenAPI::toJsonValue(m_show_commons_bell));
    }
    if (m_show_lords_bell_isSet) {
        obj.insert(QString("showLordsBell"), ::OpenAPI::toJsonValue(m_show_lords_bell));
    }
    if (m_slides.size() > 0) {
        obj.insert(QString("slides"), ::OpenAPI::toJsonValue(m_slides));
    }
    return obj;
}

bool OAIMessageViewModel::isAnnunciatorDisabled() const {
    return m_annunciator_disabled;
}
void OAIMessageViewModel::setAnnunciatorDisabled(const bool &annunciator_disabled) {
    m_annunciator_disabled = annunciator_disabled;
    m_annunciator_disabled_isSet = true;
}

bool OAIMessageViewModel::is_annunciator_disabled_Set() const{
    return m_annunciator_disabled_isSet;
}

bool OAIMessageViewModel::is_annunciator_disabled_Valid() const{
    return m_annunciator_disabled_isValid;
}

OAIAnnunciatorMessageType OAIMessageViewModel::getAnnunciatorType() const {
    return m_annunciator_type;
}
void OAIMessageViewModel::setAnnunciatorType(const OAIAnnunciatorMessageType &annunciator_type) {
    m_annunciator_type = annunciator_type;
    m_annunciator_type_isSet = true;
}

bool OAIMessageViewModel::is_annunciator_type_Set() const{
    return m_annunciator_type_isSet;
}

bool OAIMessageViewModel::is_annunciator_type_Valid() const{
    return m_annunciator_type_isValid;
}

qint32 OAIMessageViewModel::getId() const {
    return m_id;
}
void OAIMessageViewModel::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMessageViewModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMessageViewModel::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIMessageViewModel::isIsSecurityOverride() const {
    return m_is_security_override;
}
void OAIMessageViewModel::setIsSecurityOverride(const bool &is_security_override) {
    m_is_security_override = is_security_override;
    m_is_security_override_isSet = true;
}

bool OAIMessageViewModel::is_is_security_override_Set() const{
    return m_is_security_override_isSet;
}

bool OAIMessageViewModel::is_is_security_override_Valid() const{
    return m_is_security_override_isValid;
}

QDateTime OAIMessageViewModel::getPublishTime() const {
    return m_publish_time;
}
void OAIMessageViewModel::setPublishTime(const QDateTime &publish_time) {
    m_publish_time = publish_time;
    m_publish_time_isSet = true;
}

bool OAIMessageViewModel::is_publish_time_Set() const{
    return m_publish_time_isSet;
}

bool OAIMessageViewModel::is_publish_time_Valid() const{
    return m_publish_time_isValid;
}

QList<OAIScrollingMessageViewModel> OAIMessageViewModel::getScrollingMessages() const {
    return m_scrolling_messages;
}
void OAIMessageViewModel::setScrollingMessages(const QList<OAIScrollingMessageViewModel> &scrolling_messages) {
    m_scrolling_messages = scrolling_messages;
    m_scrolling_messages_isSet = true;
}

bool OAIMessageViewModel::is_scrolling_messages_Set() const{
    return m_scrolling_messages_isSet;
}

bool OAIMessageViewModel::is_scrolling_messages_Valid() const{
    return m_scrolling_messages_isValid;
}

bool OAIMessageViewModel::isShowCommonsBell() const {
    return m_show_commons_bell;
}
void OAIMessageViewModel::setShowCommonsBell(const bool &show_commons_bell) {
    m_show_commons_bell = show_commons_bell;
    m_show_commons_bell_isSet = true;
}

bool OAIMessageViewModel::is_show_commons_bell_Set() const{
    return m_show_commons_bell_isSet;
}

bool OAIMessageViewModel::is_show_commons_bell_Valid() const{
    return m_show_commons_bell_isValid;
}

bool OAIMessageViewModel::isShowLordsBell() const {
    return m_show_lords_bell;
}
void OAIMessageViewModel::setShowLordsBell(const bool &show_lords_bell) {
    m_show_lords_bell = show_lords_bell;
    m_show_lords_bell_isSet = true;
}

bool OAIMessageViewModel::is_show_lords_bell_Set() const{
    return m_show_lords_bell_isSet;
}

bool OAIMessageViewModel::is_show_lords_bell_Valid() const{
    return m_show_lords_bell_isValid;
}

QList<OAISlideViewModel> OAIMessageViewModel::getSlides() const {
    return m_slides;
}
void OAIMessageViewModel::setSlides(const QList<OAISlideViewModel> &slides) {
    m_slides = slides;
    m_slides_isSet = true;
}

bool OAIMessageViewModel::is_slides_Set() const{
    return m_slides_isSet;
}

bool OAIMessageViewModel::is_slides_Valid() const{
    return m_slides_isValid;
}

bool OAIMessageViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annunciator_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annunciator_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_security_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scrolling_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_commons_bell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_lords_bell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slides.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
