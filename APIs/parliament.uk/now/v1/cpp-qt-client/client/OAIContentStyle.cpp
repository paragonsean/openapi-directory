/**
 * Annunciator content API
 * Get data from the annunciator system.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentStyle::OAIContentStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentStyle::OAIContentStyle() {
    this->initializeModel();
}

OAIContentStyle::~OAIContentStyle() {}

void OAIContentStyle::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIContentStyle::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIContentStyle::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DividerSolid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::DIVIDERSOLID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EmptyLine", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::EMPTYLINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Member", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::MEMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Footer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::FOOTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AnsweringBody", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::ANSWERINGBODY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WestminsterHallInfo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::WESTMINSTERHALLINFO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GrandCommitteeInfo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::GRANDCOMMITTEEINFO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DividerDotted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::DIVIDERDOTTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DividerDashed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::DIVIDERDASHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Division", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::DIVISION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Text150", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::TEXT150;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Text140", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::TEXT140;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Text130", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::TEXT130;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Text120", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::TEXT120;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Text110", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::TEXT110;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Text100", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::TEXT100;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Text90", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::TEXT90;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Text80", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::TEXT80;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Text70", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentStyle::TEXT70;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIContentStyle::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIContentStyle::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIContentStyle::DIVIDERSOLID:
            val = "DividerSolid";
            break;
        case eOAIContentStyle::EMPTYLINE:
            val = "EmptyLine";
            break;
        case eOAIContentStyle::MEMBER:
            val = "Member";
            break;
        case eOAIContentStyle::FOOTER:
            val = "Footer";
            break;
        case eOAIContentStyle::ANSWERINGBODY:
            val = "AnsweringBody";
            break;
        case eOAIContentStyle::WESTMINSTERHALLINFO:
            val = "WestminsterHallInfo";
            break;
        case eOAIContentStyle::GRANDCOMMITTEEINFO:
            val = "GrandCommitteeInfo";
            break;
        case eOAIContentStyle::DIVIDERDOTTED:
            val = "DividerDotted";
            break;
        case eOAIContentStyle::DIVIDERDASHED:
            val = "DividerDashed";
            break;
        case eOAIContentStyle::DIVISION:
            val = "Division";
            break;
        case eOAIContentStyle::TEXT150:
            val = "Text150";
            break;
        case eOAIContentStyle::TEXT140:
            val = "Text140";
            break;
        case eOAIContentStyle::TEXT130:
            val = "Text130";
            break;
        case eOAIContentStyle::TEXT120:
            val = "Text120";
            break;
        case eOAIContentStyle::TEXT110:
            val = "Text110";
            break;
        case eOAIContentStyle::TEXT100:
            val = "Text100";
            break;
        case eOAIContentStyle::TEXT90:
            val = "Text90";
            break;
        case eOAIContentStyle::TEXT80:
            val = "Text80";
            break;
        case eOAIContentStyle::TEXT70:
            val = "Text70";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIContentStyle::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIContentStyle::eOAIContentStyle OAIContentStyle::getValue() const {
    return m_value;
}

void OAIContentStyle::setValue(const OAIContentStyle::eOAIContentStyle& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIContentStyle::isSet() const {
    
    return m_value_isSet;
}

bool OAIContentStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
