/**
 * Annunciator content API
 * Get data from the annunciator system.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlideViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlideViewModel::OAISlideViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlideViewModel::OAISlideViewModel() {
    this->initializeModel();
}

OAISlideViewModel::~OAISlideViewModel() {}

void OAISlideViewModel::initializeModel() {

    m_carousel_display_seconds_isSet = false;
    m_carousel_display_seconds_isValid = false;

    m_carousel_order_isSet = false;
    m_carousel_order_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_slide_time_isSet = false;
    m_slide_time_isValid = false;

    m_sound_to_play_isSet = false;
    m_sound_to_play_isValid = false;

    m_speaker_time_isSet = false;
    m_speaker_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISlideViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlideViewModel::fromJsonObject(QJsonObject json) {

    m_carousel_display_seconds_isValid = ::OpenAPI::fromJsonValue(m_carousel_display_seconds, json[QString("carouselDisplaySeconds")]);
    m_carousel_display_seconds_isSet = !json[QString("carouselDisplaySeconds")].isNull() && m_carousel_display_seconds_isValid;

    m_carousel_order_isValid = ::OpenAPI::fromJsonValue(m_carousel_order, json[QString("carouselOrder")]);
    m_carousel_order_isSet = !json[QString("carouselOrder")].isNull() && m_carousel_order_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_slide_time_isValid = ::OpenAPI::fromJsonValue(m_slide_time, json[QString("slideTime")]);
    m_slide_time_isSet = !json[QString("slideTime")].isNull() && m_slide_time_isValid;

    m_sound_to_play_isValid = ::OpenAPI::fromJsonValue(m_sound_to_play, json[QString("soundToPlay")]);
    m_sound_to_play_isSet = !json[QString("soundToPlay")].isNull() && m_sound_to_play_isValid;

    m_speaker_time_isValid = ::OpenAPI::fromJsonValue(m_speaker_time, json[QString("speakerTime")]);
    m_speaker_time_isSet = !json[QString("speakerTime")].isNull() && m_speaker_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISlideViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlideViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_carousel_display_seconds_isSet) {
        obj.insert(QString("carouselDisplaySeconds"), ::OpenAPI::toJsonValue(m_carousel_display_seconds));
    }
    if (m_carousel_order_isSet) {
        obj.insert(QString("carouselOrder"), ::OpenAPI::toJsonValue(m_carousel_order));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_slide_time_isSet) {
        obj.insert(QString("slideTime"), ::OpenAPI::toJsonValue(m_slide_time));
    }
    if (m_sound_to_play.isSet()) {
        obj.insert(QString("soundToPlay"), ::OpenAPI::toJsonValue(m_sound_to_play));
    }
    if (m_speaker_time_isSet) {
        obj.insert(QString("speakerTime"), ::OpenAPI::toJsonValue(m_speaker_time));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAISlideViewModel::getCarouselDisplaySeconds() const {
    return m_carousel_display_seconds;
}
void OAISlideViewModel::setCarouselDisplaySeconds(const qint32 &carousel_display_seconds) {
    m_carousel_display_seconds = carousel_display_seconds;
    m_carousel_display_seconds_isSet = true;
}

bool OAISlideViewModel::is_carousel_display_seconds_Set() const{
    return m_carousel_display_seconds_isSet;
}

bool OAISlideViewModel::is_carousel_display_seconds_Valid() const{
    return m_carousel_display_seconds_isValid;
}

qint32 OAISlideViewModel::getCarouselOrder() const {
    return m_carousel_order;
}
void OAISlideViewModel::setCarouselOrder(const qint32 &carousel_order) {
    m_carousel_order = carousel_order;
    m_carousel_order_isSet = true;
}

bool OAISlideViewModel::is_carousel_order_Set() const{
    return m_carousel_order_isSet;
}

bool OAISlideViewModel::is_carousel_order_Valid() const{
    return m_carousel_order_isValid;
}

qint32 OAISlideViewModel::getId() const {
    return m_id;
}
void OAISlideViewModel::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISlideViewModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAISlideViewModel::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAILineViewModel> OAISlideViewModel::getLines() const {
    return m_lines;
}
void OAISlideViewModel::setLines(const QList<OAILineViewModel> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAISlideViewModel::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAISlideViewModel::is_lines_Valid() const{
    return m_lines_isValid;
}

QDateTime OAISlideViewModel::getSlideTime() const {
    return m_slide_time;
}
void OAISlideViewModel::setSlideTime(const QDateTime &slide_time) {
    m_slide_time = slide_time;
    m_slide_time_isSet = true;
}

bool OAISlideViewModel::is_slide_time_Set() const{
    return m_slide_time_isSet;
}

bool OAISlideViewModel::is_slide_time_Valid() const{
    return m_slide_time_isValid;
}

OAISounds OAISlideViewModel::getSoundToPlay() const {
    return m_sound_to_play;
}
void OAISlideViewModel::setSoundToPlay(const OAISounds &sound_to_play) {
    m_sound_to_play = sound_to_play;
    m_sound_to_play_isSet = true;
}

bool OAISlideViewModel::is_sound_to_play_Set() const{
    return m_sound_to_play_isSet;
}

bool OAISlideViewModel::is_sound_to_play_Valid() const{
    return m_sound_to_play_isValid;
}

QDateTime OAISlideViewModel::getSpeakerTime() const {
    return m_speaker_time;
}
void OAISlideViewModel::setSpeakerTime(const QDateTime &speaker_time) {
    m_speaker_time = speaker_time;
    m_speaker_time_isSet = true;
}

bool OAISlideViewModel::is_speaker_time_Set() const{
    return m_speaker_time_isSet;
}

bool OAISlideViewModel::is_speaker_time_Valid() const{
    return m_speaker_time_isValid;
}

OAISlideType OAISlideViewModel::getType() const {
    return m_type;
}
void OAISlideViewModel::setType(const OAISlideType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISlideViewModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAISlideViewModel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISlideViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_carousel_display_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carousel_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_slide_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sound_to_play.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_speaker_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlideViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
