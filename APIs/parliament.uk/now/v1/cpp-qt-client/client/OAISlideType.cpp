/**
 * Annunciator content API
 * Get data from the annunciator system.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlideType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlideType::OAISlideType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlideType::OAISlideType() {
    this->initializeModel();
}

OAISlideType::~OAISlideType() {}

void OAISlideType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISlideType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISlideType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Debate", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlideType::DEBATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Division", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlideType::DIVISION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OralQuestionTime", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlideType::ORALQUESTIONTIME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UrgentQuestion", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlideType::URGENTQUESTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Statement", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlideType::STATEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Prayers", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlideType::PRAYERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HouseRisen", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlideType::HOUSERISEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Generic", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlideType::GENERIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotSitting", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlideType::NOTSITTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PrimeMinistersQuestions", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlideType::PRIMEMINISTERSQUESTIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PointsOfOrder", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlideType::POINTSOFORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BlankSlide", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlideType::BLANKSLIDE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISlideType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISlideType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISlideType::DEBATE:
            val = "Debate";
            break;
        case eOAISlideType::DIVISION:
            val = "Division";
            break;
        case eOAISlideType::ORALQUESTIONTIME:
            val = "OralQuestionTime";
            break;
        case eOAISlideType::URGENTQUESTION:
            val = "UrgentQuestion";
            break;
        case eOAISlideType::STATEMENT:
            val = "Statement";
            break;
        case eOAISlideType::PRAYERS:
            val = "Prayers";
            break;
        case eOAISlideType::HOUSERISEN:
            val = "HouseRisen";
            break;
        case eOAISlideType::GENERIC:
            val = "Generic";
            break;
        case eOAISlideType::NOTSITTING:
            val = "NotSitting";
            break;
        case eOAISlideType::PRIMEMINISTERSQUESTIONS:
            val = "PrimeMinistersQuestions";
            break;
        case eOAISlideType::POINTSOFORDER:
            val = "PointsOfOrder";
            break;
        case eOAISlideType::BLANKSLIDE:
            val = "BlankSlide";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISlideType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISlideType::eOAISlideType OAISlideType::getValue() const {
    return m_value;
}

void OAISlideType::setValue(const OAISlideType::eOAISlideType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISlideType::isSet() const {
    
    return m_value_isSet;
}

bool OAISlideType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
