/**
 * Annunciator content API
 * Get data from the annunciator system.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScrollingMessageViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScrollingMessageViewModel::OAIScrollingMessageViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScrollingMessageViewModel::OAIScrollingMessageViewModel() {
    this->initializeModel();
}

OAIScrollingMessageViewModel::~OAIScrollingMessageViewModel() {}

void OAIScrollingMessageViewModel::initializeModel() {

    m_alert_type_isSet = false;
    m_alert_type_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_display_from_isSet = false;
    m_display_from_isValid = false;

    m_display_to_isSet = false;
    m_display_to_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_vertical_alignment_isSet = false;
    m_vertical_alignment_isValid = false;
}

void OAIScrollingMessageViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScrollingMessageViewModel::fromJsonObject(QJsonObject json) {

    m_alert_type_isValid = ::OpenAPI::fromJsonValue(m_alert_type, json[QString("alertType")]);
    m_alert_type_isSet = !json[QString("alertType")].isNull() && m_alert_type_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_display_from_isValid = ::OpenAPI::fromJsonValue(m_display_from, json[QString("displayFrom")]);
    m_display_from_isSet = !json[QString("displayFrom")].isNull() && m_display_from_isValid;

    m_display_to_isValid = ::OpenAPI::fromJsonValue(m_display_to, json[QString("displayTo")]);
    m_display_to_isSet = !json[QString("displayTo")].isNull() && m_display_to_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_vertical_alignment_isValid = ::OpenAPI::fromJsonValue(m_vertical_alignment, json[QString("verticalAlignment")]);
    m_vertical_alignment_isSet = !json[QString("verticalAlignment")].isNull() && m_vertical_alignment_isValid;
}

QString OAIScrollingMessageViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScrollingMessageViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_type.isSet()) {
        obj.insert(QString("alertType"), ::OpenAPI::toJsonValue(m_alert_type));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_display_from_isSet) {
        obj.insert(QString("displayFrom"), ::OpenAPI::toJsonValue(m_display_from));
    }
    if (m_display_to_isSet) {
        obj.insert(QString("displayTo"), ::OpenAPI::toJsonValue(m_display_to));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_vertical_alignment.isSet()) {
        obj.insert(QString("verticalAlignment"), ::OpenAPI::toJsonValue(m_vertical_alignment));
    }
    return obj;
}

OAIScrollingMessageAlertType OAIScrollingMessageViewModel::getAlertType() const {
    return m_alert_type;
}
void OAIScrollingMessageViewModel::setAlertType(const OAIScrollingMessageAlertType &alert_type) {
    m_alert_type = alert_type;
    m_alert_type_isSet = true;
}

bool OAIScrollingMessageViewModel::is_alert_type_Set() const{
    return m_alert_type_isSet;
}

bool OAIScrollingMessageViewModel::is_alert_type_Valid() const{
    return m_alert_type_isValid;
}

QString OAIScrollingMessageViewModel::getContent() const {
    return m_content;
}
void OAIScrollingMessageViewModel::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIScrollingMessageViewModel::is_content_Set() const{
    return m_content_isSet;
}

bool OAIScrollingMessageViewModel::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAIScrollingMessageViewModel::getDisplayFrom() const {
    return m_display_from;
}
void OAIScrollingMessageViewModel::setDisplayFrom(const QDateTime &display_from) {
    m_display_from = display_from;
    m_display_from_isSet = true;
}

bool OAIScrollingMessageViewModel::is_display_from_Set() const{
    return m_display_from_isSet;
}

bool OAIScrollingMessageViewModel::is_display_from_Valid() const{
    return m_display_from_isValid;
}

QDateTime OAIScrollingMessageViewModel::getDisplayTo() const {
    return m_display_to;
}
void OAIScrollingMessageViewModel::setDisplayTo(const QDateTime &display_to) {
    m_display_to = display_to;
    m_display_to_isSet = true;
}

bool OAIScrollingMessageViewModel::is_display_to_Set() const{
    return m_display_to_isSet;
}

bool OAIScrollingMessageViewModel::is_display_to_Valid() const{
    return m_display_to_isValid;
}

qint32 OAIScrollingMessageViewModel::getId() const {
    return m_id;
}
void OAIScrollingMessageViewModel::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScrollingMessageViewModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScrollingMessageViewModel::is_id_Valid() const{
    return m_id_isValid;
}

OAIVerticalAlignment OAIScrollingMessageViewModel::getVerticalAlignment() const {
    return m_vertical_alignment;
}
void OAIScrollingMessageViewModel::setVerticalAlignment(const OAIVerticalAlignment &vertical_alignment) {
    m_vertical_alignment = vertical_alignment;
    m_vertical_alignment_isSet = true;
}

bool OAIScrollingMessageViewModel::is_vertical_alignment_Set() const{
    return m_vertical_alignment_isSet;
}

bool OAIScrollingMessageViewModel::is_vertical_alignment_Valid() const{
    return m_vertical_alignment_isValid;
}

bool OAIScrollingMessageViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_alignment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScrollingMessageViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
