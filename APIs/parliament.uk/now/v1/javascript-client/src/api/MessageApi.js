/**
 * Annunciator content API
 * Get data from the annunciator system.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnnunciatorMessageType from '../model/AnnunciatorMessageType';
import MessageViewModel from '../model/MessageViewModel';

/**
* Message service.
* @module api/MessageApi
* @version v1
*/
export default class MessageApi {

    /**
    * Constructs a new MessageApi. 
    * @alias module:api/MessageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiMessageMessageAnnunciatorCurrentGet operation.
     * @callback module:api/MessageApi~apiMessageMessageAnnunciatorCurrentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the current message by annunciator type
     * @param {module:model/AnnunciatorMessageType} annunciator Current message by annunciator
     * @param {module:api/MessageApi~apiMessageMessageAnnunciatorCurrentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageViewModel}
     */
    apiMessageMessageAnnunciatorCurrentGet(annunciator, callback) {
      let postBody = null;
      // verify the required parameter 'annunciator' is set
      if (annunciator === undefined || annunciator === null) {
        throw new Error("Missing the required parameter 'annunciator' when calling apiMessageMessageAnnunciatorCurrentGet");
      }

      let pathParams = {
        'annunciator': annunciator
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = MessageViewModel;
      return this.apiClient.callApi(
        '/api/Message/message/{annunciator}/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMessageMessageAnnunciatorDateGet operation.
     * @callback module:api/MessageApi~apiMessageMessageAnnunciatorDateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the most recent message by annunciator after date time specified
     * @param {module:model/AnnunciatorMessageType} annunciator Message by annunciator type
     * @param {Date} date First message after date time specified
     * @param {module:api/MessageApi~apiMessageMessageAnnunciatorDateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageViewModel}
     */
    apiMessageMessageAnnunciatorDateGet(annunciator, date, callback) {
      let postBody = null;
      // verify the required parameter 'annunciator' is set
      if (annunciator === undefined || annunciator === null) {
        throw new Error("Missing the required parameter 'annunciator' when calling apiMessageMessageAnnunciatorDateGet");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling apiMessageMessageAnnunciatorDateGet");
      }

      let pathParams = {
        'annunciator': annunciator,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = MessageViewModel;
      return this.apiClient.callApi(
        '/api/Message/message/{annunciator}/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
