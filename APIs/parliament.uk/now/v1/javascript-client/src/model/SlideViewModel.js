/**
 * Annunciator content API
 * Get data from the annunciator system.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LineViewModel from './LineViewModel';
import SlideType from './SlideType';
import Sounds from './Sounds';

/**
 * The SlideViewModel model module.
 * @module model/SlideViewModel
 * @version v1
 */
class SlideViewModel {
    /**
     * Constructs a new <code>SlideViewModel</code>.
     * @alias module:model/SlideViewModel
     */
    constructor() { 
        
        SlideViewModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SlideViewModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SlideViewModel} obj Optional instance to populate.
     * @return {module:model/SlideViewModel} The populated <code>SlideViewModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SlideViewModel();

            if (data.hasOwnProperty('carouselDisplaySeconds')) {
                obj['carouselDisplaySeconds'] = ApiClient.convertToType(data['carouselDisplaySeconds'], 'Number');
            }
            if (data.hasOwnProperty('carouselOrder')) {
                obj['carouselOrder'] = ApiClient.convertToType(data['carouselOrder'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lines')) {
                obj['lines'] = ApiClient.convertToType(data['lines'], [LineViewModel]);
            }
            if (data.hasOwnProperty('slideTime')) {
                obj['slideTime'] = ApiClient.convertToType(data['slideTime'], 'Date');
            }
            if (data.hasOwnProperty('soundToPlay')) {
                obj['soundToPlay'] = Sounds.constructFromObject(data['soundToPlay']);
            }
            if (data.hasOwnProperty('speakerTime')) {
                obj['speakerTime'] = ApiClient.convertToType(data['speakerTime'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = SlideType.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SlideViewModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SlideViewModel</code>.
     */
    static validateJSON(data) {
        if (data['lines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lines'])) {
                throw new Error("Expected the field `lines` to be an array in the JSON data but got " + data['lines']);
            }
            // validate the optional field `lines` (array)
            for (const item of data['lines']) {
                LineViewModel.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Number} carouselDisplaySeconds
 */
SlideViewModel.prototype['carouselDisplaySeconds'] = undefined;

/**
 * @member {Number} carouselOrder
 */
SlideViewModel.prototype['carouselOrder'] = undefined;

/**
 * @member {Number} id
 */
SlideViewModel.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/LineViewModel>} lines
 */
SlideViewModel.prototype['lines'] = undefined;

/**
 * @member {Date} slideTime
 */
SlideViewModel.prototype['slideTime'] = undefined;

/**
 * @member {module:model/Sounds} soundToPlay
 */
SlideViewModel.prototype['soundToPlay'] = undefined;

/**
 * @member {Date} speakerTime
 */
SlideViewModel.prototype['speakerTime'] = undefined;

/**
 * @member {module:model/SlideType} type
 */
SlideViewModel.prototype['type'] = undefined;






export default SlideViewModel;

