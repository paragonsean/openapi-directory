/**
 * Annunciator content API
 * Get data from the annunciator system.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentStyle from './ContentStyle';
import ContentType from './ContentType';
import HorizontalAlignment from './HorizontalAlignment';
import MemberViewModel from './MemberViewModel';
import VerticalAlignment from './VerticalAlignment';

/**
 * The LineViewModel model module.
 * @module model/LineViewModel
 * @version v1
 */
class LineViewModel {
    /**
     * Constructs a new <code>LineViewModel</code>.
     * @alias module:model/LineViewModel
     */
    constructor() { 
        
        LineViewModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LineViewModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LineViewModel} obj Optional instance to populate.
     * @return {module:model/LineViewModel} The populated <code>LineViewModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LineViewModel();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('contentAdditionalJson')) {
                obj['contentAdditionalJson'] = ApiClient.convertToType(data['contentAdditionalJson'], 'String');
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ContentType.constructFromObject(data['contentType']);
            }
            if (data.hasOwnProperty('contentUrl')) {
                obj['contentUrl'] = ApiClient.convertToType(data['contentUrl'], 'String');
            }
            if (data.hasOwnProperty('displayOrder')) {
                obj['displayOrder'] = ApiClient.convertToType(data['displayOrder'], 'Number');
            }
            if (data.hasOwnProperty('forceCapitalisation')) {
                obj['forceCapitalisation'] = ApiClient.convertToType(data['forceCapitalisation'], 'Boolean');
            }
            if (data.hasOwnProperty('horizontalAlignment')) {
                obj['horizontalAlignment'] = HorizontalAlignment.constructFromObject(data['horizontalAlignment']);
            }
            if (data.hasOwnProperty('member')) {
                obj['member'] = MemberViewModel.constructFromObject(data['member']);
            }
            if (data.hasOwnProperty('style')) {
                obj['style'] = ContentStyle.constructFromObject(data['style']);
            }
            if (data.hasOwnProperty('verticalAlignment')) {
                obj['verticalAlignment'] = VerticalAlignment.constructFromObject(data['verticalAlignment']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LineViewModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LineViewModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['contentAdditionalJson'] && !(typeof data['contentAdditionalJson'] === 'string' || data['contentAdditionalJson'] instanceof String)) {
            throw new Error("Expected the field `contentAdditionalJson` to be a primitive type in the JSON string but got " + data['contentAdditionalJson']);
        }
        // ensure the json data is a string
        if (data['contentUrl'] && !(typeof data['contentUrl'] === 'string' || data['contentUrl'] instanceof String)) {
            throw new Error("Expected the field `contentUrl` to be a primitive type in the JSON string but got " + data['contentUrl']);
        }
        // validate the optional field `member`
        if (data['member']) { // data not null
          MemberViewModel.validateJSON(data['member']);
        }

        return true;
    }


}



/**
 * @member {String} content
 */
LineViewModel.prototype['content'] = undefined;

/**
 * @member {String} contentAdditionalJson
 */
LineViewModel.prototype['contentAdditionalJson'] = undefined;

/**
 * @member {module:model/ContentType} contentType
 */
LineViewModel.prototype['contentType'] = undefined;

/**
 * @member {String} contentUrl
 */
LineViewModel.prototype['contentUrl'] = undefined;

/**
 * @member {Number} displayOrder
 */
LineViewModel.prototype['displayOrder'] = undefined;

/**
 * @member {Boolean} forceCapitalisation
 */
LineViewModel.prototype['forceCapitalisation'] = undefined;

/**
 * @member {module:model/HorizontalAlignment} horizontalAlignment
 */
LineViewModel.prototype['horizontalAlignment'] = undefined;

/**
 * @member {module:model/MemberViewModel} member
 */
LineViewModel.prototype['member'] = undefined;

/**
 * @member {module:model/ContentStyle} style
 */
LineViewModel.prototype['style'] = undefined;

/**
 * @member {module:model/VerticalAlignment} verticalAlignment
 */
LineViewModel.prototype['verticalAlignment'] = undefined;






export default LineViewModel;

