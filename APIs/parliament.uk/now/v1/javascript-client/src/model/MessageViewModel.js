/**
 * Annunciator content API
 * Get data from the annunciator system.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnnunciatorMessageType from './AnnunciatorMessageType';
import ScrollingMessageViewModel from './ScrollingMessageViewModel';
import SlideViewModel from './SlideViewModel';

/**
 * The MessageViewModel model module.
 * @module model/MessageViewModel
 * @version v1
 */
class MessageViewModel {
    /**
     * Constructs a new <code>MessageViewModel</code>.
     * @alias module:model/MessageViewModel
     */
    constructor() { 
        
        MessageViewModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MessageViewModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessageViewModel} obj Optional instance to populate.
     * @return {module:model/MessageViewModel} The populated <code>MessageViewModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessageViewModel();

            if (data.hasOwnProperty('annunciatorDisabled')) {
                obj['annunciatorDisabled'] = ApiClient.convertToType(data['annunciatorDisabled'], 'Boolean');
            }
            if (data.hasOwnProperty('annunciatorType')) {
                obj['annunciatorType'] = AnnunciatorMessageType.constructFromObject(data['annunciatorType']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isSecurityOverride')) {
                obj['isSecurityOverride'] = ApiClient.convertToType(data['isSecurityOverride'], 'Boolean');
            }
            if (data.hasOwnProperty('publishTime')) {
                obj['publishTime'] = ApiClient.convertToType(data['publishTime'], 'Date');
            }
            if (data.hasOwnProperty('scrollingMessages')) {
                obj['scrollingMessages'] = ApiClient.convertToType(data['scrollingMessages'], [ScrollingMessageViewModel]);
            }
            if (data.hasOwnProperty('showCommonsBell')) {
                obj['showCommonsBell'] = ApiClient.convertToType(data['showCommonsBell'], 'Boolean');
            }
            if (data.hasOwnProperty('showLordsBell')) {
                obj['showLordsBell'] = ApiClient.convertToType(data['showLordsBell'], 'Boolean');
            }
            if (data.hasOwnProperty('slides')) {
                obj['slides'] = ApiClient.convertToType(data['slides'], [SlideViewModel]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessageViewModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessageViewModel</code>.
     */
    static validateJSON(data) {
        if (data['scrollingMessages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['scrollingMessages'])) {
                throw new Error("Expected the field `scrollingMessages` to be an array in the JSON data but got " + data['scrollingMessages']);
            }
            // validate the optional field `scrollingMessages` (array)
            for (const item of data['scrollingMessages']) {
                ScrollingMessageViewModel.validateJSON(item);
            };
        }
        if (data['slides']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['slides'])) {
                throw new Error("Expected the field `slides` to be an array in the JSON data but got " + data['slides']);
            }
            // validate the optional field `slides` (array)
            for (const item of data['slides']) {
                SlideViewModel.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Boolean} annunciatorDisabled
 */
MessageViewModel.prototype['annunciatorDisabled'] = undefined;

/**
 * @member {module:model/AnnunciatorMessageType} annunciatorType
 */
MessageViewModel.prototype['annunciatorType'] = undefined;

/**
 * @member {Number} id
 */
MessageViewModel.prototype['id'] = undefined;

/**
 * @member {Boolean} isSecurityOverride
 */
MessageViewModel.prototype['isSecurityOverride'] = undefined;

/**
 * @member {Date} publishTime
 */
MessageViewModel.prototype['publishTime'] = undefined;

/**
 * @member {Array.<module:model/ScrollingMessageViewModel>} scrollingMessages
 */
MessageViewModel.prototype['scrollingMessages'] = undefined;

/**
 * @member {Boolean} showCommonsBell
 */
MessageViewModel.prototype['showCommonsBell'] = undefined;

/**
 * @member {Boolean} showLordsBell
 */
MessageViewModel.prototype['showLordsBell'] = undefined;

/**
 * @member {Array.<module:model/SlideViewModel>} slides
 */
MessageViewModel.prototype['slides'] = undefined;






export default MessageViewModel;

