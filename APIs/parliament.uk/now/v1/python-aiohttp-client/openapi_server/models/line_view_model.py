# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_style import ContentStyle
from openapi_server.models.content_type import ContentType
from openapi_server.models.horizontal_alignment import HorizontalAlignment
from openapi_server.models.member_view_model import MemberViewModel
from openapi_server.models.vertical_alignment import VerticalAlignment
from openapi_server import util


class LineViewModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, content_additional_json: str=None, content_type: ContentType=None, content_url: str=None, display_order: int=None, force_capitalisation: bool=None, horizontal_alignment: HorizontalAlignment=None, member: MemberViewModel=None, style: ContentStyle=None, vertical_alignment: VerticalAlignment=None):
        """LineViewModel - a model defined in OpenAPI

        :param content: The content of this LineViewModel.
        :param content_additional_json: The content_additional_json of this LineViewModel.
        :param content_type: The content_type of this LineViewModel.
        :param content_url: The content_url of this LineViewModel.
        :param display_order: The display_order of this LineViewModel.
        :param force_capitalisation: The force_capitalisation of this LineViewModel.
        :param horizontal_alignment: The horizontal_alignment of this LineViewModel.
        :param member: The member of this LineViewModel.
        :param style: The style of this LineViewModel.
        :param vertical_alignment: The vertical_alignment of this LineViewModel.
        """
        self.openapi_types = {
            'content': str,
            'content_additional_json': str,
            'content_type': ContentType,
            'content_url': str,
            'display_order': int,
            'force_capitalisation': bool,
            'horizontal_alignment': HorizontalAlignment,
            'member': MemberViewModel,
            'style': ContentStyle,
            'vertical_alignment': VerticalAlignment
        }

        self.attribute_map = {
            'content': 'content',
            'content_additional_json': 'contentAdditionalJson',
            'content_type': 'contentType',
            'content_url': 'contentUrl',
            'display_order': 'displayOrder',
            'force_capitalisation': 'forceCapitalisation',
            'horizontal_alignment': 'horizontalAlignment',
            'member': 'member',
            'style': 'style',
            'vertical_alignment': 'verticalAlignment'
        }

        self._content = content
        self._content_additional_json = content_additional_json
        self._content_type = content_type
        self._content_url = content_url
        self._display_order = display_order
        self._force_capitalisation = force_capitalisation
        self._horizontal_alignment = horizontal_alignment
        self._member = member
        self._style = style
        self._vertical_alignment = vertical_alignment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LineViewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LineViewModel of this LineViewModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this LineViewModel.


        :return: The content of this LineViewModel.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this LineViewModel.


        :param content: The content of this LineViewModel.
        :type content: str
        """

        self._content = content

    @property
    def content_additional_json(self):
        """Gets the content_additional_json of this LineViewModel.


        :return: The content_additional_json of this LineViewModel.
        :rtype: str
        """
        return self._content_additional_json

    @content_additional_json.setter
    def content_additional_json(self, content_additional_json):
        """Sets the content_additional_json of this LineViewModel.


        :param content_additional_json: The content_additional_json of this LineViewModel.
        :type content_additional_json: str
        """

        self._content_additional_json = content_additional_json

    @property
    def content_type(self):
        """Gets the content_type of this LineViewModel.


        :return: The content_type of this LineViewModel.
        :rtype: ContentType
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this LineViewModel.


        :param content_type: The content_type of this LineViewModel.
        :type content_type: ContentType
        """

        self._content_type = content_type

    @property
    def content_url(self):
        """Gets the content_url of this LineViewModel.


        :return: The content_url of this LineViewModel.
        :rtype: str
        """
        return self._content_url

    @content_url.setter
    def content_url(self, content_url):
        """Sets the content_url of this LineViewModel.


        :param content_url: The content_url of this LineViewModel.
        :type content_url: str
        """

        self._content_url = content_url

    @property
    def display_order(self):
        """Gets the display_order of this LineViewModel.


        :return: The display_order of this LineViewModel.
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this LineViewModel.


        :param display_order: The display_order of this LineViewModel.
        :type display_order: int
        """

        self._display_order = display_order

    @property
    def force_capitalisation(self):
        """Gets the force_capitalisation of this LineViewModel.


        :return: The force_capitalisation of this LineViewModel.
        :rtype: bool
        """
        return self._force_capitalisation

    @force_capitalisation.setter
    def force_capitalisation(self, force_capitalisation):
        """Sets the force_capitalisation of this LineViewModel.


        :param force_capitalisation: The force_capitalisation of this LineViewModel.
        :type force_capitalisation: bool
        """

        self._force_capitalisation = force_capitalisation

    @property
    def horizontal_alignment(self):
        """Gets the horizontal_alignment of this LineViewModel.


        :return: The horizontal_alignment of this LineViewModel.
        :rtype: HorizontalAlignment
        """
        return self._horizontal_alignment

    @horizontal_alignment.setter
    def horizontal_alignment(self, horizontal_alignment):
        """Sets the horizontal_alignment of this LineViewModel.


        :param horizontal_alignment: The horizontal_alignment of this LineViewModel.
        :type horizontal_alignment: HorizontalAlignment
        """

        self._horizontal_alignment = horizontal_alignment

    @property
    def member(self):
        """Gets the member of this LineViewModel.


        :return: The member of this LineViewModel.
        :rtype: MemberViewModel
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this LineViewModel.


        :param member: The member of this LineViewModel.
        :type member: MemberViewModel
        """

        self._member = member

    @property
    def style(self):
        """Gets the style of this LineViewModel.


        :return: The style of this LineViewModel.
        :rtype: ContentStyle
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this LineViewModel.


        :param style: The style of this LineViewModel.
        :type style: ContentStyle
        """

        self._style = style

    @property
    def vertical_alignment(self):
        """Gets the vertical_alignment of this LineViewModel.


        :return: The vertical_alignment of this LineViewModel.
        :rtype: VerticalAlignment
        """
        return self._vertical_alignment

    @vertical_alignment.setter
    def vertical_alignment(self, vertical_alignment):
        """Sets the vertical_alignment of this LineViewModel.


        :param vertical_alignment: The vertical_alignment of this LineViewModel.
        :type vertical_alignment: VerticalAlignment
        """

        self._vertical_alignment = vertical_alignment
