# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.annunciator_message_type import AnnunciatorMessageType
from openapi_server.models.scrolling_message_view_model import ScrollingMessageViewModel
from openapi_server.models.slide_view_model import SlideViewModel
from openapi_server import util


class MessageViewModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annunciator_disabled: bool=None, annunciator_type: AnnunciatorMessageType=None, id: int=None, is_security_override: bool=None, publish_time: datetime=None, scrolling_messages: List[ScrollingMessageViewModel]=None, show_commons_bell: bool=None, show_lords_bell: bool=None, slides: List[SlideViewModel]=None):
        """MessageViewModel - a model defined in OpenAPI

        :param annunciator_disabled: The annunciator_disabled of this MessageViewModel.
        :param annunciator_type: The annunciator_type of this MessageViewModel.
        :param id: The id of this MessageViewModel.
        :param is_security_override: The is_security_override of this MessageViewModel.
        :param publish_time: The publish_time of this MessageViewModel.
        :param scrolling_messages: The scrolling_messages of this MessageViewModel.
        :param show_commons_bell: The show_commons_bell of this MessageViewModel.
        :param show_lords_bell: The show_lords_bell of this MessageViewModel.
        :param slides: The slides of this MessageViewModel.
        """
        self.openapi_types = {
            'annunciator_disabled': bool,
            'annunciator_type': AnnunciatorMessageType,
            'id': int,
            'is_security_override': bool,
            'publish_time': datetime,
            'scrolling_messages': List[ScrollingMessageViewModel],
            'show_commons_bell': bool,
            'show_lords_bell': bool,
            'slides': List[SlideViewModel]
        }

        self.attribute_map = {
            'annunciator_disabled': 'annunciatorDisabled',
            'annunciator_type': 'annunciatorType',
            'id': 'id',
            'is_security_override': 'isSecurityOverride',
            'publish_time': 'publishTime',
            'scrolling_messages': 'scrollingMessages',
            'show_commons_bell': 'showCommonsBell',
            'show_lords_bell': 'showLordsBell',
            'slides': 'slides'
        }

        self._annunciator_disabled = annunciator_disabled
        self._annunciator_type = annunciator_type
        self._id = id
        self._is_security_override = is_security_override
        self._publish_time = publish_time
        self._scrolling_messages = scrolling_messages
        self._show_commons_bell = show_commons_bell
        self._show_lords_bell = show_lords_bell
        self._slides = slides

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageViewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageViewModel of this MessageViewModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annunciator_disabled(self):
        """Gets the annunciator_disabled of this MessageViewModel.


        :return: The annunciator_disabled of this MessageViewModel.
        :rtype: bool
        """
        return self._annunciator_disabled

    @annunciator_disabled.setter
    def annunciator_disabled(self, annunciator_disabled):
        """Sets the annunciator_disabled of this MessageViewModel.


        :param annunciator_disabled: The annunciator_disabled of this MessageViewModel.
        :type annunciator_disabled: bool
        """

        self._annunciator_disabled = annunciator_disabled

    @property
    def annunciator_type(self):
        """Gets the annunciator_type of this MessageViewModel.


        :return: The annunciator_type of this MessageViewModel.
        :rtype: AnnunciatorMessageType
        """
        return self._annunciator_type

    @annunciator_type.setter
    def annunciator_type(self, annunciator_type):
        """Sets the annunciator_type of this MessageViewModel.


        :param annunciator_type: The annunciator_type of this MessageViewModel.
        :type annunciator_type: AnnunciatorMessageType
        """

        self._annunciator_type = annunciator_type

    @property
    def id(self):
        """Gets the id of this MessageViewModel.


        :return: The id of this MessageViewModel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageViewModel.


        :param id: The id of this MessageViewModel.
        :type id: int
        """

        self._id = id

    @property
    def is_security_override(self):
        """Gets the is_security_override of this MessageViewModel.


        :return: The is_security_override of this MessageViewModel.
        :rtype: bool
        """
        return self._is_security_override

    @is_security_override.setter
    def is_security_override(self, is_security_override):
        """Sets the is_security_override of this MessageViewModel.


        :param is_security_override: The is_security_override of this MessageViewModel.
        :type is_security_override: bool
        """

        self._is_security_override = is_security_override

    @property
    def publish_time(self):
        """Gets the publish_time of this MessageViewModel.


        :return: The publish_time of this MessageViewModel.
        :rtype: datetime
        """
        return self._publish_time

    @publish_time.setter
    def publish_time(self, publish_time):
        """Sets the publish_time of this MessageViewModel.


        :param publish_time: The publish_time of this MessageViewModel.
        :type publish_time: datetime
        """

        self._publish_time = publish_time

    @property
    def scrolling_messages(self):
        """Gets the scrolling_messages of this MessageViewModel.


        :return: The scrolling_messages of this MessageViewModel.
        :rtype: List[ScrollingMessageViewModel]
        """
        return self._scrolling_messages

    @scrolling_messages.setter
    def scrolling_messages(self, scrolling_messages):
        """Sets the scrolling_messages of this MessageViewModel.


        :param scrolling_messages: The scrolling_messages of this MessageViewModel.
        :type scrolling_messages: List[ScrollingMessageViewModel]
        """

        self._scrolling_messages = scrolling_messages

    @property
    def show_commons_bell(self):
        """Gets the show_commons_bell of this MessageViewModel.


        :return: The show_commons_bell of this MessageViewModel.
        :rtype: bool
        """
        return self._show_commons_bell

    @show_commons_bell.setter
    def show_commons_bell(self, show_commons_bell):
        """Sets the show_commons_bell of this MessageViewModel.


        :param show_commons_bell: The show_commons_bell of this MessageViewModel.
        :type show_commons_bell: bool
        """

        self._show_commons_bell = show_commons_bell

    @property
    def show_lords_bell(self):
        """Gets the show_lords_bell of this MessageViewModel.


        :return: The show_lords_bell of this MessageViewModel.
        :rtype: bool
        """
        return self._show_lords_bell

    @show_lords_bell.setter
    def show_lords_bell(self, show_lords_bell):
        """Sets the show_lords_bell of this MessageViewModel.


        :param show_lords_bell: The show_lords_bell of this MessageViewModel.
        :type show_lords_bell: bool
        """

        self._show_lords_bell = show_lords_bell

    @property
    def slides(self):
        """Gets the slides of this MessageViewModel.


        :return: The slides of this MessageViewModel.
        :rtype: List[SlideViewModel]
        """
        return self._slides

    @slides.setter
    def slides(self, slides):
        """Sets the slides of this MessageViewModel.


        :param slides: The slides of this MessageViewModel.
        :type slides: List[SlideViewModel]
        """

        self._slides = slides
