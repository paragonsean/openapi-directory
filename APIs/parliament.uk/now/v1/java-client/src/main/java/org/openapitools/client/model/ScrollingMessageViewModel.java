/*
 * Annunciator content API
 * Get data from the annunciator system.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ScrollingMessageAlertType;
import org.openapitools.client.model.VerticalAlignment;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScrollingMessageViewModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:29.992112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScrollingMessageViewModel {
  public static final String SERIALIZED_NAME_ALERT_TYPE = "alertType";
  @SerializedName(SERIALIZED_NAME_ALERT_TYPE)
  private ScrollingMessageAlertType alertType;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_DISPLAY_FROM = "displayFrom";
  @SerializedName(SERIALIZED_NAME_DISPLAY_FROM)
  private OffsetDateTime displayFrom;

  public static final String SERIALIZED_NAME_DISPLAY_TO = "displayTo";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TO)
  private OffsetDateTime displayTo;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_VERTICAL_ALIGNMENT = "verticalAlignment";
  @SerializedName(SERIALIZED_NAME_VERTICAL_ALIGNMENT)
  private VerticalAlignment verticalAlignment;

  public ScrollingMessageViewModel() {
  }

  public ScrollingMessageViewModel alertType(ScrollingMessageAlertType alertType) {
    this.alertType = alertType;
    return this;
  }

  /**
   * Get alertType
   * @return alertType
   */
  @javax.annotation.Nullable
  public ScrollingMessageAlertType getAlertType() {
    return alertType;
  }

  public void setAlertType(ScrollingMessageAlertType alertType) {
    this.alertType = alertType;
  }


  public ScrollingMessageViewModel content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public ScrollingMessageViewModel displayFrom(OffsetDateTime displayFrom) {
    this.displayFrom = displayFrom;
    return this;
  }

  /**
   * Get displayFrom
   * @return displayFrom
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDisplayFrom() {
    return displayFrom;
  }

  public void setDisplayFrom(OffsetDateTime displayFrom) {
    this.displayFrom = displayFrom;
  }


  public ScrollingMessageViewModel displayTo(OffsetDateTime displayTo) {
    this.displayTo = displayTo;
    return this;
  }

  /**
   * Get displayTo
   * @return displayTo
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDisplayTo() {
    return displayTo;
  }

  public void setDisplayTo(OffsetDateTime displayTo) {
    this.displayTo = displayTo;
  }


  public ScrollingMessageViewModel id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ScrollingMessageViewModel verticalAlignment(VerticalAlignment verticalAlignment) {
    this.verticalAlignment = verticalAlignment;
    return this;
  }

  /**
   * Get verticalAlignment
   * @return verticalAlignment
   */
  @javax.annotation.Nullable
  public VerticalAlignment getVerticalAlignment() {
    return verticalAlignment;
  }

  public void setVerticalAlignment(VerticalAlignment verticalAlignment) {
    this.verticalAlignment = verticalAlignment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScrollingMessageViewModel scrollingMessageViewModel = (ScrollingMessageViewModel) o;
    return Objects.equals(this.alertType, scrollingMessageViewModel.alertType) &&
        Objects.equals(this.content, scrollingMessageViewModel.content) &&
        Objects.equals(this.displayFrom, scrollingMessageViewModel.displayFrom) &&
        Objects.equals(this.displayTo, scrollingMessageViewModel.displayTo) &&
        Objects.equals(this.id, scrollingMessageViewModel.id) &&
        Objects.equals(this.verticalAlignment, scrollingMessageViewModel.verticalAlignment);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertType, content, displayFrom, displayTo, id, verticalAlignment);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScrollingMessageViewModel {\n");
    sb.append("    alertType: ").append(toIndentedString(alertType)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    displayFrom: ").append(toIndentedString(displayFrom)).append("\n");
    sb.append("    displayTo: ").append(toIndentedString(displayTo)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    verticalAlignment: ").append(toIndentedString(verticalAlignment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertType");
    openapiFields.add("content");
    openapiFields.add("displayFrom");
    openapiFields.add("displayTo");
    openapiFields.add("id");
    openapiFields.add("verticalAlignment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScrollingMessageViewModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScrollingMessageViewModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScrollingMessageViewModel is not found in the empty JSON string", ScrollingMessageViewModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScrollingMessageViewModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScrollingMessageViewModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alertType`
      if (jsonObj.get("alertType") != null && !jsonObj.get("alertType").isJsonNull()) {
        ScrollingMessageAlertType.validateJsonElement(jsonObj.get("alertType"));
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      // validate the optional field `verticalAlignment`
      if (jsonObj.get("verticalAlignment") != null && !jsonObj.get("verticalAlignment").isJsonNull()) {
        VerticalAlignment.validateJsonElement(jsonObj.get("verticalAlignment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScrollingMessageViewModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScrollingMessageViewModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScrollingMessageViewModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScrollingMessageViewModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ScrollingMessageViewModel>() {
           @Override
           public void write(JsonWriter out, ScrollingMessageViewModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScrollingMessageViewModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScrollingMessageViewModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScrollingMessageViewModel
   * @throws IOException if the JSON string is invalid with respect to ScrollingMessageViewModel
   */
  public static ScrollingMessageViewModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScrollingMessageViewModel.class);
  }

  /**
   * Convert an instance of ScrollingMessageViewModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

