/*
 * Annunciator content API
 * Get data from the annunciator system.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LineViewModel;
import org.openapitools.client.model.SlideType;
import org.openapitools.client.model.Sounds;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SlideViewModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:29.992112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SlideViewModel {
  public static final String SERIALIZED_NAME_CAROUSEL_DISPLAY_SECONDS = "carouselDisplaySeconds";
  @SerializedName(SERIALIZED_NAME_CAROUSEL_DISPLAY_SECONDS)
  private Integer carouselDisplaySeconds;

  public static final String SERIALIZED_NAME_CAROUSEL_ORDER = "carouselOrder";
  @SerializedName(SERIALIZED_NAME_CAROUSEL_ORDER)
  private Integer carouselOrder;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LINES = "lines";
  @SerializedName(SERIALIZED_NAME_LINES)
  private List<LineViewModel> lines;

  public static final String SERIALIZED_NAME_SLIDE_TIME = "slideTime";
  @SerializedName(SERIALIZED_NAME_SLIDE_TIME)
  private OffsetDateTime slideTime;

  public static final String SERIALIZED_NAME_SOUND_TO_PLAY = "soundToPlay";
  @SerializedName(SERIALIZED_NAME_SOUND_TO_PLAY)
  private Sounds soundToPlay;

  public static final String SERIALIZED_NAME_SPEAKER_TIME = "speakerTime";
  @SerializedName(SERIALIZED_NAME_SPEAKER_TIME)
  private OffsetDateTime speakerTime;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private SlideType type;

  public SlideViewModel() {
  }

  public SlideViewModel carouselDisplaySeconds(Integer carouselDisplaySeconds) {
    this.carouselDisplaySeconds = carouselDisplaySeconds;
    return this;
  }

  /**
   * Get carouselDisplaySeconds
   * @return carouselDisplaySeconds
   */
  @javax.annotation.Nullable
  public Integer getCarouselDisplaySeconds() {
    return carouselDisplaySeconds;
  }

  public void setCarouselDisplaySeconds(Integer carouselDisplaySeconds) {
    this.carouselDisplaySeconds = carouselDisplaySeconds;
  }


  public SlideViewModel carouselOrder(Integer carouselOrder) {
    this.carouselOrder = carouselOrder;
    return this;
  }

  /**
   * Get carouselOrder
   * @return carouselOrder
   */
  @javax.annotation.Nullable
  public Integer getCarouselOrder() {
    return carouselOrder;
  }

  public void setCarouselOrder(Integer carouselOrder) {
    this.carouselOrder = carouselOrder;
  }


  public SlideViewModel id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public SlideViewModel lines(List<LineViewModel> lines) {
    this.lines = lines;
    return this;
  }

  public SlideViewModel addLinesItem(LineViewModel linesItem) {
    if (this.lines == null) {
      this.lines = new ArrayList<>();
    }
    this.lines.add(linesItem);
    return this;
  }

  /**
   * Get lines
   * @return lines
   */
  @javax.annotation.Nullable
  public List<LineViewModel> getLines() {
    return lines;
  }

  public void setLines(List<LineViewModel> lines) {
    this.lines = lines;
  }


  public SlideViewModel slideTime(OffsetDateTime slideTime) {
    this.slideTime = slideTime;
    return this;
  }

  /**
   * Get slideTime
   * @return slideTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSlideTime() {
    return slideTime;
  }

  public void setSlideTime(OffsetDateTime slideTime) {
    this.slideTime = slideTime;
  }


  public SlideViewModel soundToPlay(Sounds soundToPlay) {
    this.soundToPlay = soundToPlay;
    return this;
  }

  /**
   * Get soundToPlay
   * @return soundToPlay
   */
  @javax.annotation.Nullable
  public Sounds getSoundToPlay() {
    return soundToPlay;
  }

  public void setSoundToPlay(Sounds soundToPlay) {
    this.soundToPlay = soundToPlay;
  }


  public SlideViewModel speakerTime(OffsetDateTime speakerTime) {
    this.speakerTime = speakerTime;
    return this;
  }

  /**
   * Get speakerTime
   * @return speakerTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSpeakerTime() {
    return speakerTime;
  }

  public void setSpeakerTime(OffsetDateTime speakerTime) {
    this.speakerTime = speakerTime;
  }


  public SlideViewModel type(SlideType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public SlideType getType() {
    return type;
  }

  public void setType(SlideType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlideViewModel slideViewModel = (SlideViewModel) o;
    return Objects.equals(this.carouselDisplaySeconds, slideViewModel.carouselDisplaySeconds) &&
        Objects.equals(this.carouselOrder, slideViewModel.carouselOrder) &&
        Objects.equals(this.id, slideViewModel.id) &&
        Objects.equals(this.lines, slideViewModel.lines) &&
        Objects.equals(this.slideTime, slideViewModel.slideTime) &&
        Objects.equals(this.soundToPlay, slideViewModel.soundToPlay) &&
        Objects.equals(this.speakerTime, slideViewModel.speakerTime) &&
        Objects.equals(this.type, slideViewModel.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(carouselDisplaySeconds, carouselOrder, id, lines, slideTime, soundToPlay, speakerTime, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlideViewModel {\n");
    sb.append("    carouselDisplaySeconds: ").append(toIndentedString(carouselDisplaySeconds)).append("\n");
    sb.append("    carouselOrder: ").append(toIndentedString(carouselOrder)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lines: ").append(toIndentedString(lines)).append("\n");
    sb.append("    slideTime: ").append(toIndentedString(slideTime)).append("\n");
    sb.append("    soundToPlay: ").append(toIndentedString(soundToPlay)).append("\n");
    sb.append("    speakerTime: ").append(toIndentedString(speakerTime)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("carouselDisplaySeconds");
    openapiFields.add("carouselOrder");
    openapiFields.add("id");
    openapiFields.add("lines");
    openapiFields.add("slideTime");
    openapiFields.add("soundToPlay");
    openapiFields.add("speakerTime");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SlideViewModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SlideViewModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SlideViewModel is not found in the empty JSON string", SlideViewModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SlideViewModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SlideViewModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("lines") != null && !jsonObj.get("lines").isJsonNull()) {
        JsonArray jsonArraylines = jsonObj.getAsJsonArray("lines");
        if (jsonArraylines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lines` to be an array in the JSON string but got `%s`", jsonObj.get("lines").toString()));
          }

          // validate the optional field `lines` (array)
          for (int i = 0; i < jsonArraylines.size(); i++) {
            LineViewModel.validateJsonElement(jsonArraylines.get(i));
          };
        }
      }
      // validate the optional field `soundToPlay`
      if (jsonObj.get("soundToPlay") != null && !jsonObj.get("soundToPlay").isJsonNull()) {
        Sounds.validateJsonElement(jsonObj.get("soundToPlay"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        SlideType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SlideViewModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SlideViewModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SlideViewModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SlideViewModel.class));

       return (TypeAdapter<T>) new TypeAdapter<SlideViewModel>() {
           @Override
           public void write(JsonWriter out, SlideViewModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SlideViewModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SlideViewModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SlideViewModel
   * @throws IOException if the JSON string is invalid with respect to SlideViewModel
   */
  public static SlideViewModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SlideViewModel.class);
  }

  /**
   * Convert an instance of SlideViewModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

