/*
 * Annunciator content API
 * Get data from the annunciator system.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets ContentStyle
 */
@JsonAdapter(ContentStyle.Adapter.class)
public enum ContentStyle {
  
  DIVIDER_SOLID("DividerSolid"),
  
  EMPTY_LINE("EmptyLine"),
  
  MEMBER("Member"),
  
  FOOTER("Footer"),
  
  ANSWERING_BODY("AnsweringBody"),
  
  WESTMINSTER_HALL_INFO("WestminsterHallInfo"),
  
  GRAND_COMMITTEE_INFO("GrandCommitteeInfo"),
  
  DIVIDER_DOTTED("DividerDotted"),
  
  DIVIDER_DASHED("DividerDashed"),
  
  DIVISION("Division"),
  
  TEXT150("Text150"),
  
  TEXT140("Text140"),
  
  TEXT130("Text130"),
  
  TEXT120("Text120"),
  
  TEXT110("Text110"),
  
  TEXT100("Text100"),
  
  TEXT90("Text90"),
  
  TEXT80("Text80"),
  
  TEXT70("Text70");

  private String value;

  ContentStyle(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ContentStyle fromValue(String value) {
    for (ContentStyle b : ContentStyle.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ContentStyle> {
    @Override
    public void write(final JsonWriter jsonWriter, final ContentStyle enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ContentStyle read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ContentStyle.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ContentStyle.fromValue(value);
  }
}

