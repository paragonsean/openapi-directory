/*
 * Annunciator content API
 * Get data from the annunciator system.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnnunciatorMessageType;
import org.openapitools.client.model.ScrollingMessageViewModel;
import org.openapitools.client.model.SlideViewModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MessageViewModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:29.992112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessageViewModel {
  public static final String SERIALIZED_NAME_ANNUNCIATOR_DISABLED = "annunciatorDisabled";
  @SerializedName(SERIALIZED_NAME_ANNUNCIATOR_DISABLED)
  private Boolean annunciatorDisabled;

  public static final String SERIALIZED_NAME_ANNUNCIATOR_TYPE = "annunciatorType";
  @SerializedName(SERIALIZED_NAME_ANNUNCIATOR_TYPE)
  private AnnunciatorMessageType annunciatorType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_SECURITY_OVERRIDE = "isSecurityOverride";
  @SerializedName(SERIALIZED_NAME_IS_SECURITY_OVERRIDE)
  private Boolean isSecurityOverride;

  public static final String SERIALIZED_NAME_PUBLISH_TIME = "publishTime";
  @SerializedName(SERIALIZED_NAME_PUBLISH_TIME)
  private OffsetDateTime publishTime;

  public static final String SERIALIZED_NAME_SCROLLING_MESSAGES = "scrollingMessages";
  @SerializedName(SERIALIZED_NAME_SCROLLING_MESSAGES)
  private List<ScrollingMessageViewModel> scrollingMessages;

  public static final String SERIALIZED_NAME_SHOW_COMMONS_BELL = "showCommonsBell";
  @SerializedName(SERIALIZED_NAME_SHOW_COMMONS_BELL)
  private Boolean showCommonsBell;

  public static final String SERIALIZED_NAME_SHOW_LORDS_BELL = "showLordsBell";
  @SerializedName(SERIALIZED_NAME_SHOW_LORDS_BELL)
  private Boolean showLordsBell;

  public static final String SERIALIZED_NAME_SLIDES = "slides";
  @SerializedName(SERIALIZED_NAME_SLIDES)
  private List<SlideViewModel> slides;

  public MessageViewModel() {
  }

  public MessageViewModel annunciatorDisabled(Boolean annunciatorDisabled) {
    this.annunciatorDisabled = annunciatorDisabled;
    return this;
  }

  /**
   * Get annunciatorDisabled
   * @return annunciatorDisabled
   */
  @javax.annotation.Nullable
  public Boolean getAnnunciatorDisabled() {
    return annunciatorDisabled;
  }

  public void setAnnunciatorDisabled(Boolean annunciatorDisabled) {
    this.annunciatorDisabled = annunciatorDisabled;
  }


  public MessageViewModel annunciatorType(AnnunciatorMessageType annunciatorType) {
    this.annunciatorType = annunciatorType;
    return this;
  }

  /**
   * Get annunciatorType
   * @return annunciatorType
   */
  @javax.annotation.Nullable
  public AnnunciatorMessageType getAnnunciatorType() {
    return annunciatorType;
  }

  public void setAnnunciatorType(AnnunciatorMessageType annunciatorType) {
    this.annunciatorType = annunciatorType;
  }


  public MessageViewModel id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public MessageViewModel isSecurityOverride(Boolean isSecurityOverride) {
    this.isSecurityOverride = isSecurityOverride;
    return this;
  }

  /**
   * Get isSecurityOverride
   * @return isSecurityOverride
   */
  @javax.annotation.Nullable
  public Boolean getIsSecurityOverride() {
    return isSecurityOverride;
  }

  public void setIsSecurityOverride(Boolean isSecurityOverride) {
    this.isSecurityOverride = isSecurityOverride;
  }


  public MessageViewModel publishTime(OffsetDateTime publishTime) {
    this.publishTime = publishTime;
    return this;
  }

  /**
   * Get publishTime
   * @return publishTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPublishTime() {
    return publishTime;
  }

  public void setPublishTime(OffsetDateTime publishTime) {
    this.publishTime = publishTime;
  }


  public MessageViewModel scrollingMessages(List<ScrollingMessageViewModel> scrollingMessages) {
    this.scrollingMessages = scrollingMessages;
    return this;
  }

  public MessageViewModel addScrollingMessagesItem(ScrollingMessageViewModel scrollingMessagesItem) {
    if (this.scrollingMessages == null) {
      this.scrollingMessages = new ArrayList<>();
    }
    this.scrollingMessages.add(scrollingMessagesItem);
    return this;
  }

  /**
   * Get scrollingMessages
   * @return scrollingMessages
   */
  @javax.annotation.Nullable
  public List<ScrollingMessageViewModel> getScrollingMessages() {
    return scrollingMessages;
  }

  public void setScrollingMessages(List<ScrollingMessageViewModel> scrollingMessages) {
    this.scrollingMessages = scrollingMessages;
  }


  public MessageViewModel showCommonsBell(Boolean showCommonsBell) {
    this.showCommonsBell = showCommonsBell;
    return this;
  }

  /**
   * Get showCommonsBell
   * @return showCommonsBell
   */
  @javax.annotation.Nullable
  public Boolean getShowCommonsBell() {
    return showCommonsBell;
  }

  public void setShowCommonsBell(Boolean showCommonsBell) {
    this.showCommonsBell = showCommonsBell;
  }


  public MessageViewModel showLordsBell(Boolean showLordsBell) {
    this.showLordsBell = showLordsBell;
    return this;
  }

  /**
   * Get showLordsBell
   * @return showLordsBell
   */
  @javax.annotation.Nullable
  public Boolean getShowLordsBell() {
    return showLordsBell;
  }

  public void setShowLordsBell(Boolean showLordsBell) {
    this.showLordsBell = showLordsBell;
  }


  public MessageViewModel slides(List<SlideViewModel> slides) {
    this.slides = slides;
    return this;
  }

  public MessageViewModel addSlidesItem(SlideViewModel slidesItem) {
    if (this.slides == null) {
      this.slides = new ArrayList<>();
    }
    this.slides.add(slidesItem);
    return this;
  }

  /**
   * Get slides
   * @return slides
   */
  @javax.annotation.Nullable
  public List<SlideViewModel> getSlides() {
    return slides;
  }

  public void setSlides(List<SlideViewModel> slides) {
    this.slides = slides;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageViewModel messageViewModel = (MessageViewModel) o;
    return Objects.equals(this.annunciatorDisabled, messageViewModel.annunciatorDisabled) &&
        Objects.equals(this.annunciatorType, messageViewModel.annunciatorType) &&
        Objects.equals(this.id, messageViewModel.id) &&
        Objects.equals(this.isSecurityOverride, messageViewModel.isSecurityOverride) &&
        Objects.equals(this.publishTime, messageViewModel.publishTime) &&
        Objects.equals(this.scrollingMessages, messageViewModel.scrollingMessages) &&
        Objects.equals(this.showCommonsBell, messageViewModel.showCommonsBell) &&
        Objects.equals(this.showLordsBell, messageViewModel.showLordsBell) &&
        Objects.equals(this.slides, messageViewModel.slides);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(annunciatorDisabled, annunciatorType, id, isSecurityOverride, publishTime, scrollingMessages, showCommonsBell, showLordsBell, slides);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageViewModel {\n");
    sb.append("    annunciatorDisabled: ").append(toIndentedString(annunciatorDisabled)).append("\n");
    sb.append("    annunciatorType: ").append(toIndentedString(annunciatorType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isSecurityOverride: ").append(toIndentedString(isSecurityOverride)).append("\n");
    sb.append("    publishTime: ").append(toIndentedString(publishTime)).append("\n");
    sb.append("    scrollingMessages: ").append(toIndentedString(scrollingMessages)).append("\n");
    sb.append("    showCommonsBell: ").append(toIndentedString(showCommonsBell)).append("\n");
    sb.append("    showLordsBell: ").append(toIndentedString(showLordsBell)).append("\n");
    sb.append("    slides: ").append(toIndentedString(slides)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annunciatorDisabled");
    openapiFields.add("annunciatorType");
    openapiFields.add("id");
    openapiFields.add("isSecurityOverride");
    openapiFields.add("publishTime");
    openapiFields.add("scrollingMessages");
    openapiFields.add("showCommonsBell");
    openapiFields.add("showLordsBell");
    openapiFields.add("slides");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MessageViewModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessageViewModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessageViewModel is not found in the empty JSON string", MessageViewModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MessageViewModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessageViewModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `annunciatorType`
      if (jsonObj.get("annunciatorType") != null && !jsonObj.get("annunciatorType").isJsonNull()) {
        AnnunciatorMessageType.validateJsonElement(jsonObj.get("annunciatorType"));
      }
      if (jsonObj.get("scrollingMessages") != null && !jsonObj.get("scrollingMessages").isJsonNull()) {
        JsonArray jsonArrayscrollingMessages = jsonObj.getAsJsonArray("scrollingMessages");
        if (jsonArrayscrollingMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scrollingMessages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scrollingMessages` to be an array in the JSON string but got `%s`", jsonObj.get("scrollingMessages").toString()));
          }

          // validate the optional field `scrollingMessages` (array)
          for (int i = 0; i < jsonArrayscrollingMessages.size(); i++) {
            ScrollingMessageViewModel.validateJsonElement(jsonArrayscrollingMessages.get(i));
          };
        }
      }
      if (jsonObj.get("slides") != null && !jsonObj.get("slides").isJsonNull()) {
        JsonArray jsonArrayslides = jsonObj.getAsJsonArray("slides");
        if (jsonArrayslides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("slides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `slides` to be an array in the JSON string but got `%s`", jsonObj.get("slides").toString()));
          }

          // validate the optional field `slides` (array)
          for (int i = 0; i < jsonArrayslides.size(); i++) {
            SlideViewModel.validateJsonElement(jsonArrayslides.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessageViewModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessageViewModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessageViewModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessageViewModel.class));

       return (TypeAdapter<T>) new TypeAdapter<MessageViewModel>() {
           @Override
           public void write(JsonWriter out, MessageViewModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessageViewModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MessageViewModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MessageViewModel
   * @throws IOException if the JSON string is invalid with respect to MessageViewModel
   */
  public static MessageViewModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessageViewModel.class);
  }

  /**
   * Convert an instance of MessageViewModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

