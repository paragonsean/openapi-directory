/*
 * Annunciator content API
 * Get data from the annunciator system.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ContentStyle;
import org.openapitools.client.model.ContentType;
import org.openapitools.client.model.HorizontalAlignment;
import org.openapitools.client.model.MemberViewModel;
import org.openapitools.client.model.VerticalAlignment;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LineViewModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:29.992112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LineViewModel {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_CONTENT_ADDITIONAL_JSON = "contentAdditionalJson";
  @SerializedName(SERIALIZED_NAME_CONTENT_ADDITIONAL_JSON)
  private String contentAdditionalJson;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private ContentType contentType;

  public static final String SERIALIZED_NAME_CONTENT_URL = "contentUrl";
  @SerializedName(SERIALIZED_NAME_CONTENT_URL)
  private String contentUrl;

  public static final String SERIALIZED_NAME_DISPLAY_ORDER = "displayOrder";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ORDER)
  private Integer displayOrder;

  public static final String SERIALIZED_NAME_FORCE_CAPITALISATION = "forceCapitalisation";
  @SerializedName(SERIALIZED_NAME_FORCE_CAPITALISATION)
  private Boolean forceCapitalisation;

  public static final String SERIALIZED_NAME_HORIZONTAL_ALIGNMENT = "horizontalAlignment";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_ALIGNMENT)
  private HorizontalAlignment horizontalAlignment;

  public static final String SERIALIZED_NAME_MEMBER = "member";
  @SerializedName(SERIALIZED_NAME_MEMBER)
  private MemberViewModel member;

  public static final String SERIALIZED_NAME_STYLE = "style";
  @SerializedName(SERIALIZED_NAME_STYLE)
  private ContentStyle style;

  public static final String SERIALIZED_NAME_VERTICAL_ALIGNMENT = "verticalAlignment";
  @SerializedName(SERIALIZED_NAME_VERTICAL_ALIGNMENT)
  private VerticalAlignment verticalAlignment;

  public LineViewModel() {
  }

  public LineViewModel content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public LineViewModel contentAdditionalJson(String contentAdditionalJson) {
    this.contentAdditionalJson = contentAdditionalJson;
    return this;
  }

  /**
   * Get contentAdditionalJson
   * @return contentAdditionalJson
   */
  @javax.annotation.Nullable
  public String getContentAdditionalJson() {
    return contentAdditionalJson;
  }

  public void setContentAdditionalJson(String contentAdditionalJson) {
    this.contentAdditionalJson = contentAdditionalJson;
  }


  public LineViewModel contentType(ContentType contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nullable
  public ContentType getContentType() {
    return contentType;
  }

  public void setContentType(ContentType contentType) {
    this.contentType = contentType;
  }


  public LineViewModel contentUrl(String contentUrl) {
    this.contentUrl = contentUrl;
    return this;
  }

  /**
   * Get contentUrl
   * @return contentUrl
   */
  @javax.annotation.Nullable
  public String getContentUrl() {
    return contentUrl;
  }

  public void setContentUrl(String contentUrl) {
    this.contentUrl = contentUrl;
  }


  public LineViewModel displayOrder(Integer displayOrder) {
    this.displayOrder = displayOrder;
    return this;
  }

  /**
   * Get displayOrder
   * @return displayOrder
   */
  @javax.annotation.Nullable
  public Integer getDisplayOrder() {
    return displayOrder;
  }

  public void setDisplayOrder(Integer displayOrder) {
    this.displayOrder = displayOrder;
  }


  public LineViewModel forceCapitalisation(Boolean forceCapitalisation) {
    this.forceCapitalisation = forceCapitalisation;
    return this;
  }

  /**
   * Get forceCapitalisation
   * @return forceCapitalisation
   */
  @javax.annotation.Nullable
  public Boolean getForceCapitalisation() {
    return forceCapitalisation;
  }

  public void setForceCapitalisation(Boolean forceCapitalisation) {
    this.forceCapitalisation = forceCapitalisation;
  }


  public LineViewModel horizontalAlignment(HorizontalAlignment horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }

  /**
   * Get horizontalAlignment
   * @return horizontalAlignment
   */
  @javax.annotation.Nullable
  public HorizontalAlignment getHorizontalAlignment() {
    return horizontalAlignment;
  }

  public void setHorizontalAlignment(HorizontalAlignment horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
  }


  public LineViewModel member(MemberViewModel member) {
    this.member = member;
    return this;
  }

  /**
   * Get member
   * @return member
   */
  @javax.annotation.Nullable
  public MemberViewModel getMember() {
    return member;
  }

  public void setMember(MemberViewModel member) {
    this.member = member;
  }


  public LineViewModel style(ContentStyle style) {
    this.style = style;
    return this;
  }

  /**
   * Get style
   * @return style
   */
  @javax.annotation.Nullable
  public ContentStyle getStyle() {
    return style;
  }

  public void setStyle(ContentStyle style) {
    this.style = style;
  }


  public LineViewModel verticalAlignment(VerticalAlignment verticalAlignment) {
    this.verticalAlignment = verticalAlignment;
    return this;
  }

  /**
   * Get verticalAlignment
   * @return verticalAlignment
   */
  @javax.annotation.Nullable
  public VerticalAlignment getVerticalAlignment() {
    return verticalAlignment;
  }

  public void setVerticalAlignment(VerticalAlignment verticalAlignment) {
    this.verticalAlignment = verticalAlignment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineViewModel lineViewModel = (LineViewModel) o;
    return Objects.equals(this.content, lineViewModel.content) &&
        Objects.equals(this.contentAdditionalJson, lineViewModel.contentAdditionalJson) &&
        Objects.equals(this.contentType, lineViewModel.contentType) &&
        Objects.equals(this.contentUrl, lineViewModel.contentUrl) &&
        Objects.equals(this.displayOrder, lineViewModel.displayOrder) &&
        Objects.equals(this.forceCapitalisation, lineViewModel.forceCapitalisation) &&
        Objects.equals(this.horizontalAlignment, lineViewModel.horizontalAlignment) &&
        Objects.equals(this.member, lineViewModel.member) &&
        Objects.equals(this.style, lineViewModel.style) &&
        Objects.equals(this.verticalAlignment, lineViewModel.verticalAlignment);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, contentAdditionalJson, contentType, contentUrl, displayOrder, forceCapitalisation, horizontalAlignment, member, style, verticalAlignment);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineViewModel {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentAdditionalJson: ").append(toIndentedString(contentAdditionalJson)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    contentUrl: ").append(toIndentedString(contentUrl)).append("\n");
    sb.append("    displayOrder: ").append(toIndentedString(displayOrder)).append("\n");
    sb.append("    forceCapitalisation: ").append(toIndentedString(forceCapitalisation)).append("\n");
    sb.append("    horizontalAlignment: ").append(toIndentedString(horizontalAlignment)).append("\n");
    sb.append("    member: ").append(toIndentedString(member)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    verticalAlignment: ").append(toIndentedString(verticalAlignment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("contentAdditionalJson");
    openapiFields.add("contentType");
    openapiFields.add("contentUrl");
    openapiFields.add("displayOrder");
    openapiFields.add("forceCapitalisation");
    openapiFields.add("horizontalAlignment");
    openapiFields.add("member");
    openapiFields.add("style");
    openapiFields.add("verticalAlignment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LineViewModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LineViewModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineViewModel is not found in the empty JSON string", LineViewModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LineViewModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LineViewModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("contentAdditionalJson") != null && !jsonObj.get("contentAdditionalJson").isJsonNull()) && !jsonObj.get("contentAdditionalJson").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentAdditionalJson` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentAdditionalJson").toString()));
      }
      // validate the optional field `contentType`
      if (jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) {
        ContentType.validateJsonElement(jsonObj.get("contentType"));
      }
      if ((jsonObj.get("contentUrl") != null && !jsonObj.get("contentUrl").isJsonNull()) && !jsonObj.get("contentUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentUrl").toString()));
      }
      // validate the optional field `horizontalAlignment`
      if (jsonObj.get("horizontalAlignment") != null && !jsonObj.get("horizontalAlignment").isJsonNull()) {
        HorizontalAlignment.validateJsonElement(jsonObj.get("horizontalAlignment"));
      }
      // validate the optional field `member`
      if (jsonObj.get("member") != null && !jsonObj.get("member").isJsonNull()) {
        MemberViewModel.validateJsonElement(jsonObj.get("member"));
      }
      // validate the optional field `style`
      if (jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) {
        ContentStyle.validateJsonElement(jsonObj.get("style"));
      }
      // validate the optional field `verticalAlignment`
      if (jsonObj.get("verticalAlignment") != null && !jsonObj.get("verticalAlignment").isJsonNull()) {
        VerticalAlignment.validateJsonElement(jsonObj.get("verticalAlignment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineViewModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineViewModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineViewModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineViewModel.class));

       return (TypeAdapter<T>) new TypeAdapter<LineViewModel>() {
           @Override
           public void write(JsonWriter out, LineViewModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LineViewModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LineViewModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LineViewModel
   * @throws IOException if the JSON string is invalid with respect to LineViewModel
   */
  public static LineViewModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineViewModel.class);
  }

  /**
   * Convert an instance of LineViewModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

