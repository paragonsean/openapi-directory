# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.erskine_may_index_term_see_link import ErskineMayIndexTermSeeLink
from openapi_server.models.erskine_may_paragraph_search_result import ErskineMayParagraphSearchResult
from openapi_server import util


class ErskineMayIndexTerm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, child_terms: List[ErskineMayIndexTerm]=None, display_as: str=None, id: int=None, parent_term: ErskineMayIndexTerm=None, references: List[ErskineMayParagraphSearchResult]=None, see_links: List[ErskineMayIndexTermSeeLink]=None, term: str=None):
        """ErskineMayIndexTerm - a model defined in OpenAPI

        :param child_terms: The child_terms of this ErskineMayIndexTerm.
        :param display_as: The display_as of this ErskineMayIndexTerm.
        :param id: The id of this ErskineMayIndexTerm.
        :param parent_term: The parent_term of this ErskineMayIndexTerm.
        :param references: The references of this ErskineMayIndexTerm.
        :param see_links: The see_links of this ErskineMayIndexTerm.
        :param term: The term of this ErskineMayIndexTerm.
        """
        self.openapi_types = {
            'child_terms': List[ErskineMayIndexTerm],
            'display_as': str,
            'id': int,
            'parent_term': ErskineMayIndexTerm,
            'references': List[ErskineMayParagraphSearchResult],
            'see_links': List[ErskineMayIndexTermSeeLink],
            'term': str
        }

        self.attribute_map = {
            'child_terms': 'childTerms',
            'display_as': 'displayAs',
            'id': 'id',
            'parent_term': 'parentTerm',
            'references': 'references',
            'see_links': 'seeLinks',
            'term': 'term'
        }

        self._child_terms = child_terms
        self._display_as = display_as
        self._id = id
        self._parent_term = parent_term
        self._references = references
        self._see_links = see_links
        self._term = term

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErskineMayIndexTerm':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErskineMayIndexTerm of this ErskineMayIndexTerm.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def child_terms(self):
        """Gets the child_terms of this ErskineMayIndexTerm.


        :return: The child_terms of this ErskineMayIndexTerm.
        :rtype: List[ErskineMayIndexTerm]
        """
        return self._child_terms

    @child_terms.setter
    def child_terms(self, child_terms):
        """Sets the child_terms of this ErskineMayIndexTerm.


        :param child_terms: The child_terms of this ErskineMayIndexTerm.
        :type child_terms: List[ErskineMayIndexTerm]
        """

        self._child_terms = child_terms

    @property
    def display_as(self):
        """Gets the display_as of this ErskineMayIndexTerm.


        :return: The display_as of this ErskineMayIndexTerm.
        :rtype: str
        """
        return self._display_as

    @display_as.setter
    def display_as(self, display_as):
        """Sets the display_as of this ErskineMayIndexTerm.


        :param display_as: The display_as of this ErskineMayIndexTerm.
        :type display_as: str
        """

        self._display_as = display_as

    @property
    def id(self):
        """Gets the id of this ErskineMayIndexTerm.


        :return: The id of this ErskineMayIndexTerm.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ErskineMayIndexTerm.


        :param id: The id of this ErskineMayIndexTerm.
        :type id: int
        """

        self._id = id

    @property
    def parent_term(self):
        """Gets the parent_term of this ErskineMayIndexTerm.


        :return: The parent_term of this ErskineMayIndexTerm.
        :rtype: ErskineMayIndexTerm
        """
        return self._parent_term

    @parent_term.setter
    def parent_term(self, parent_term):
        """Sets the parent_term of this ErskineMayIndexTerm.


        :param parent_term: The parent_term of this ErskineMayIndexTerm.
        :type parent_term: ErskineMayIndexTerm
        """

        self._parent_term = parent_term

    @property
    def references(self):
        """Gets the references of this ErskineMayIndexTerm.


        :return: The references of this ErskineMayIndexTerm.
        :rtype: List[ErskineMayParagraphSearchResult]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this ErskineMayIndexTerm.


        :param references: The references of this ErskineMayIndexTerm.
        :type references: List[ErskineMayParagraphSearchResult]
        """

        self._references = references

    @property
    def see_links(self):
        """Gets the see_links of this ErskineMayIndexTerm.


        :return: The see_links of this ErskineMayIndexTerm.
        :rtype: List[ErskineMayIndexTermSeeLink]
        """
        return self._see_links

    @see_links.setter
    def see_links(self, see_links):
        """Sets the see_links of this ErskineMayIndexTerm.


        :param see_links: The see_links of this ErskineMayIndexTerm.
        :type see_links: List[ErskineMayIndexTermSeeLink]
        """

        self._see_links = see_links

    @property
    def term(self):
        """Gets the term of this ErskineMayIndexTerm.


        :return: The term of this ErskineMayIndexTerm.
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this ErskineMayIndexTerm.


        :param term: The term of this ErskineMayIndexTerm.
        :type term: str
        """

        self._term = term
