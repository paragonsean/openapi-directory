/*
 * Erskine May API
 * An API that allows querying of Erskine May data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ErskineMayIndexTermSeeLink;
import org.openapitools.client.model.ErskineMayParagraphSearchResult;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ErskineMayIndexTerm
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:38.289716-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ErskineMayIndexTerm {
  public static final String SERIALIZED_NAME_CHILD_TERMS = "childTerms";
  @SerializedName(SERIALIZED_NAME_CHILD_TERMS)
  private List<ErskineMayIndexTerm> childTerms;

  public static final String SERIALIZED_NAME_DISPLAY_AS = "displayAs";
  @SerializedName(SERIALIZED_NAME_DISPLAY_AS)
  private String displayAs;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PARENT_TERM = "parentTerm";
  @SerializedName(SERIALIZED_NAME_PARENT_TERM)
  private ErskineMayIndexTerm parentTerm;

  public static final String SERIALIZED_NAME_REFERENCES = "references";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  private List<ErskineMayParagraphSearchResult> references;

  public static final String SERIALIZED_NAME_SEE_LINKS = "seeLinks";
  @SerializedName(SERIALIZED_NAME_SEE_LINKS)
  private List<ErskineMayIndexTermSeeLink> seeLinks;

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private String term;

  public ErskineMayIndexTerm() {
  }

  public ErskineMayIndexTerm childTerms(List<ErskineMayIndexTerm> childTerms) {
    this.childTerms = childTerms;
    return this;
  }

  public ErskineMayIndexTerm addChildTermsItem(ErskineMayIndexTerm childTermsItem) {
    if (this.childTerms == null) {
      this.childTerms = new ArrayList<>();
    }
    this.childTerms.add(childTermsItem);
    return this;
  }

  /**
   * Get childTerms
   * @return childTerms
   */
  @javax.annotation.Nullable
  public List<ErskineMayIndexTerm> getChildTerms() {
    return childTerms;
  }

  public void setChildTerms(List<ErskineMayIndexTerm> childTerms) {
    this.childTerms = childTerms;
  }


  public ErskineMayIndexTerm displayAs(String displayAs) {
    this.displayAs = displayAs;
    return this;
  }

  /**
   * Get displayAs
   * @return displayAs
   */
  @javax.annotation.Nullable
  public String getDisplayAs() {
    return displayAs;
  }

  public void setDisplayAs(String displayAs) {
    this.displayAs = displayAs;
  }


  public ErskineMayIndexTerm id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ErskineMayIndexTerm parentTerm(ErskineMayIndexTerm parentTerm) {
    this.parentTerm = parentTerm;
    return this;
  }

  /**
   * Get parentTerm
   * @return parentTerm
   */
  @javax.annotation.Nullable
  public ErskineMayIndexTerm getParentTerm() {
    return parentTerm;
  }

  public void setParentTerm(ErskineMayIndexTerm parentTerm) {
    this.parentTerm = parentTerm;
  }


  public ErskineMayIndexTerm references(List<ErskineMayParagraphSearchResult> references) {
    this.references = references;
    return this;
  }

  public ErskineMayIndexTerm addReferencesItem(ErskineMayParagraphSearchResult referencesItem) {
    if (this.references == null) {
      this.references = new ArrayList<>();
    }
    this.references.add(referencesItem);
    return this;
  }

  /**
   * Get references
   * @return references
   */
  @javax.annotation.Nullable
  public List<ErskineMayParagraphSearchResult> getReferences() {
    return references;
  }

  public void setReferences(List<ErskineMayParagraphSearchResult> references) {
    this.references = references;
  }


  public ErskineMayIndexTerm seeLinks(List<ErskineMayIndexTermSeeLink> seeLinks) {
    this.seeLinks = seeLinks;
    return this;
  }

  public ErskineMayIndexTerm addSeeLinksItem(ErskineMayIndexTermSeeLink seeLinksItem) {
    if (this.seeLinks == null) {
      this.seeLinks = new ArrayList<>();
    }
    this.seeLinks.add(seeLinksItem);
    return this;
  }

  /**
   * Get seeLinks
   * @return seeLinks
   */
  @javax.annotation.Nullable
  public List<ErskineMayIndexTermSeeLink> getSeeLinks() {
    return seeLinks;
  }

  public void setSeeLinks(List<ErskineMayIndexTermSeeLink> seeLinks) {
    this.seeLinks = seeLinks;
  }


  public ErskineMayIndexTerm term(String term) {
    this.term = term;
    return this;
  }

  /**
   * Get term
   * @return term
   */
  @javax.annotation.Nullable
  public String getTerm() {
    return term;
  }

  public void setTerm(String term) {
    this.term = term;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErskineMayIndexTerm erskineMayIndexTerm = (ErskineMayIndexTerm) o;
    return Objects.equals(this.childTerms, erskineMayIndexTerm.childTerms) &&
        Objects.equals(this.displayAs, erskineMayIndexTerm.displayAs) &&
        Objects.equals(this.id, erskineMayIndexTerm.id) &&
        Objects.equals(this.parentTerm, erskineMayIndexTerm.parentTerm) &&
        Objects.equals(this.references, erskineMayIndexTerm.references) &&
        Objects.equals(this.seeLinks, erskineMayIndexTerm.seeLinks) &&
        Objects.equals(this.term, erskineMayIndexTerm.term);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(childTerms, displayAs, id, parentTerm, references, seeLinks, term);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErskineMayIndexTerm {\n");
    sb.append("    childTerms: ").append(toIndentedString(childTerms)).append("\n");
    sb.append("    displayAs: ").append(toIndentedString(displayAs)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parentTerm: ").append(toIndentedString(parentTerm)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    seeLinks: ").append(toIndentedString(seeLinks)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("childTerms");
    openapiFields.add("displayAs");
    openapiFields.add("id");
    openapiFields.add("parentTerm");
    openapiFields.add("references");
    openapiFields.add("seeLinks");
    openapiFields.add("term");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ErskineMayIndexTerm
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ErskineMayIndexTerm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ErskineMayIndexTerm is not found in the empty JSON string", ErskineMayIndexTerm.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ErskineMayIndexTerm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ErskineMayIndexTerm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("childTerms") != null && !jsonObj.get("childTerms").isJsonNull()) {
        JsonArray jsonArraychildTerms = jsonObj.getAsJsonArray("childTerms");
        if (jsonArraychildTerms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("childTerms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `childTerms` to be an array in the JSON string but got `%s`", jsonObj.get("childTerms").toString()));
          }

          // validate the optional field `childTerms` (array)
          for (int i = 0; i < jsonArraychildTerms.size(); i++) {
            ErskineMayIndexTerm.validateJsonElement(jsonArraychildTerms.get(i));
          };
        }
      }
      if ((jsonObj.get("displayAs") != null && !jsonObj.get("displayAs").isJsonNull()) && !jsonObj.get("displayAs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayAs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayAs").toString()));
      }
      // validate the optional field `parentTerm`
      if (jsonObj.get("parentTerm") != null && !jsonObj.get("parentTerm").isJsonNull()) {
        ErskineMayIndexTerm.validateJsonElement(jsonObj.get("parentTerm"));
      }
      if (jsonObj.get("references") != null && !jsonObj.get("references").isJsonNull()) {
        JsonArray jsonArrayreferences = jsonObj.getAsJsonArray("references");
        if (jsonArrayreferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("references").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `references` to be an array in the JSON string but got `%s`", jsonObj.get("references").toString()));
          }

          // validate the optional field `references` (array)
          for (int i = 0; i < jsonArrayreferences.size(); i++) {
            ErskineMayParagraphSearchResult.validateJsonElement(jsonArrayreferences.get(i));
          };
        }
      }
      if (jsonObj.get("seeLinks") != null && !jsonObj.get("seeLinks").isJsonNull()) {
        JsonArray jsonArrayseeLinks = jsonObj.getAsJsonArray("seeLinks");
        if (jsonArrayseeLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seeLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seeLinks` to be an array in the JSON string but got `%s`", jsonObj.get("seeLinks").toString()));
          }

          // validate the optional field `seeLinks` (array)
          for (int i = 0; i < jsonArrayseeLinks.size(); i++) {
            ErskineMayIndexTermSeeLink.validateJsonElement(jsonArrayseeLinks.get(i));
          };
        }
      }
      if ((jsonObj.get("term") != null && !jsonObj.get("term").isJsonNull()) && !jsonObj.get("term").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `term` to be a primitive type in the JSON string but got `%s`", jsonObj.get("term").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ErskineMayIndexTerm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ErskineMayIndexTerm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ErskineMayIndexTerm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ErskineMayIndexTerm.class));

       return (TypeAdapter<T>) new TypeAdapter<ErskineMayIndexTerm>() {
           @Override
           public void write(JsonWriter out, ErskineMayIndexTerm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ErskineMayIndexTerm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ErskineMayIndexTerm given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ErskineMayIndexTerm
   * @throws IOException if the JSON string is invalid with respect to ErskineMayIndexTerm
   */
  public static ErskineMayIndexTerm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ErskineMayIndexTerm.class);
  }

  /**
   * Convert an instance of ErskineMayIndexTerm to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

