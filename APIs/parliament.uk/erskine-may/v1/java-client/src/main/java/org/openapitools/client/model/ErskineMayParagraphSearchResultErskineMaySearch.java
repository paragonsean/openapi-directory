/*
 * Erskine May API
 * An API that allows querying of Erskine May data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ErskineMayParagraphSearchResult;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ErskineMayParagraphSearchResultErskineMaySearch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:38.289716-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ErskineMayParagraphSearchResultErskineMaySearch {
  public static final String SERIALIZED_NAME_SEARCH_RESULTS = "searchResults";
  @SerializedName(SERIALIZED_NAME_SEARCH_RESULTS)
  private List<ErskineMayParagraphSearchResult> searchResults;

  public static final String SERIALIZED_NAME_SEARCH_TERM = "searchTerm";
  @SerializedName(SERIALIZED_NAME_SEARCH_TERM)
  private String searchTerm;

  public static final String SERIALIZED_NAME_SEARCH_TERMS = "searchTerms";
  @SerializedName(SERIALIZED_NAME_SEARCH_TERMS)
  private List<String> searchTerms;

  public static final String SERIALIZED_NAME_SKIP = "skip";
  @SerializedName(SERIALIZED_NAME_SKIP)
  private Integer skip;

  public static final String SERIALIZED_NAME_SUGGESTED_SEARCH = "suggestedSearch";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_SEARCH)
  private String suggestedSearch;

  public static final String SERIALIZED_NAME_TAKE = "take";
  @SerializedName(SERIALIZED_NAME_TAKE)
  private Integer take;

  public static final String SERIALIZED_NAME_TOTAL_RESULTS = "totalResults";
  @SerializedName(SERIALIZED_NAME_TOTAL_RESULTS)
  private Integer totalResults;

  public ErskineMayParagraphSearchResultErskineMaySearch() {
  }

  public ErskineMayParagraphSearchResultErskineMaySearch searchResults(List<ErskineMayParagraphSearchResult> searchResults) {
    this.searchResults = searchResults;
    return this;
  }

  public ErskineMayParagraphSearchResultErskineMaySearch addSearchResultsItem(ErskineMayParagraphSearchResult searchResultsItem) {
    if (this.searchResults == null) {
      this.searchResults = new ArrayList<>();
    }
    this.searchResults.add(searchResultsItem);
    return this;
  }

  /**
   * Get searchResults
   * @return searchResults
   */
  @javax.annotation.Nullable
  public List<ErskineMayParagraphSearchResult> getSearchResults() {
    return searchResults;
  }

  public void setSearchResults(List<ErskineMayParagraphSearchResult> searchResults) {
    this.searchResults = searchResults;
  }


  public ErskineMayParagraphSearchResultErskineMaySearch searchTerm(String searchTerm) {
    this.searchTerm = searchTerm;
    return this;
  }

  /**
   * Get searchTerm
   * @return searchTerm
   */
  @javax.annotation.Nullable
  public String getSearchTerm() {
    return searchTerm;
  }

  public void setSearchTerm(String searchTerm) {
    this.searchTerm = searchTerm;
  }


  public ErskineMayParagraphSearchResultErskineMaySearch searchTerms(List<String> searchTerms) {
    this.searchTerms = searchTerms;
    return this;
  }

  public ErskineMayParagraphSearchResultErskineMaySearch addSearchTermsItem(String searchTermsItem) {
    if (this.searchTerms == null) {
      this.searchTerms = new ArrayList<>();
    }
    this.searchTerms.add(searchTermsItem);
    return this;
  }

  /**
   * Get searchTerms
   * @return searchTerms
   */
  @javax.annotation.Nullable
  public List<String> getSearchTerms() {
    return searchTerms;
  }

  public void setSearchTerms(List<String> searchTerms) {
    this.searchTerms = searchTerms;
  }


  public ErskineMayParagraphSearchResultErskineMaySearch skip(Integer skip) {
    this.skip = skip;
    return this;
  }

  /**
   * Get skip
   * @return skip
   */
  @javax.annotation.Nullable
  public Integer getSkip() {
    return skip;
  }

  public void setSkip(Integer skip) {
    this.skip = skip;
  }


  public ErskineMayParagraphSearchResultErskineMaySearch suggestedSearch(String suggestedSearch) {
    this.suggestedSearch = suggestedSearch;
    return this;
  }

  /**
   * Get suggestedSearch
   * @return suggestedSearch
   */
  @javax.annotation.Nullable
  public String getSuggestedSearch() {
    return suggestedSearch;
  }

  public void setSuggestedSearch(String suggestedSearch) {
    this.suggestedSearch = suggestedSearch;
  }


  public ErskineMayParagraphSearchResultErskineMaySearch take(Integer take) {
    this.take = take;
    return this;
  }

  /**
   * Get take
   * @return take
   */
  @javax.annotation.Nullable
  public Integer getTake() {
    return take;
  }

  public void setTake(Integer take) {
    this.take = take;
  }


  public ErskineMayParagraphSearchResultErskineMaySearch totalResults(Integer totalResults) {
    this.totalResults = totalResults;
    return this;
  }

  /**
   * Get totalResults
   * @return totalResults
   */
  @javax.annotation.Nullable
  public Integer getTotalResults() {
    return totalResults;
  }

  public void setTotalResults(Integer totalResults) {
    this.totalResults = totalResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErskineMayParagraphSearchResultErskineMaySearch erskineMayParagraphSearchResultErskineMaySearch = (ErskineMayParagraphSearchResultErskineMaySearch) o;
    return Objects.equals(this.searchResults, erskineMayParagraphSearchResultErskineMaySearch.searchResults) &&
        Objects.equals(this.searchTerm, erskineMayParagraphSearchResultErskineMaySearch.searchTerm) &&
        Objects.equals(this.searchTerms, erskineMayParagraphSearchResultErskineMaySearch.searchTerms) &&
        Objects.equals(this.skip, erskineMayParagraphSearchResultErskineMaySearch.skip) &&
        Objects.equals(this.suggestedSearch, erskineMayParagraphSearchResultErskineMaySearch.suggestedSearch) &&
        Objects.equals(this.take, erskineMayParagraphSearchResultErskineMaySearch.take) &&
        Objects.equals(this.totalResults, erskineMayParagraphSearchResultErskineMaySearch.totalResults);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(searchResults, searchTerm, searchTerms, skip, suggestedSearch, take, totalResults);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErskineMayParagraphSearchResultErskineMaySearch {\n");
    sb.append("    searchResults: ").append(toIndentedString(searchResults)).append("\n");
    sb.append("    searchTerm: ").append(toIndentedString(searchTerm)).append("\n");
    sb.append("    searchTerms: ").append(toIndentedString(searchTerms)).append("\n");
    sb.append("    skip: ").append(toIndentedString(skip)).append("\n");
    sb.append("    suggestedSearch: ").append(toIndentedString(suggestedSearch)).append("\n");
    sb.append("    take: ").append(toIndentedString(take)).append("\n");
    sb.append("    totalResults: ").append(toIndentedString(totalResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("searchResults");
    openapiFields.add("searchTerm");
    openapiFields.add("searchTerms");
    openapiFields.add("skip");
    openapiFields.add("suggestedSearch");
    openapiFields.add("take");
    openapiFields.add("totalResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ErskineMayParagraphSearchResultErskineMaySearch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ErskineMayParagraphSearchResultErskineMaySearch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ErskineMayParagraphSearchResultErskineMaySearch is not found in the empty JSON string", ErskineMayParagraphSearchResultErskineMaySearch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ErskineMayParagraphSearchResultErskineMaySearch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ErskineMayParagraphSearchResultErskineMaySearch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("searchResults") != null && !jsonObj.get("searchResults").isJsonNull()) {
        JsonArray jsonArraysearchResults = jsonObj.getAsJsonArray("searchResults");
        if (jsonArraysearchResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("searchResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `searchResults` to be an array in the JSON string but got `%s`", jsonObj.get("searchResults").toString()));
          }

          // validate the optional field `searchResults` (array)
          for (int i = 0; i < jsonArraysearchResults.size(); i++) {
            ErskineMayParagraphSearchResult.validateJsonElement(jsonArraysearchResults.get(i));
          };
        }
      }
      if ((jsonObj.get("searchTerm") != null && !jsonObj.get("searchTerm").isJsonNull()) && !jsonObj.get("searchTerm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchTerm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchTerm").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("searchTerms") != null && !jsonObj.get("searchTerms").isJsonNull() && !jsonObj.get("searchTerms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchTerms` to be an array in the JSON string but got `%s`", jsonObj.get("searchTerms").toString()));
      }
      if ((jsonObj.get("suggestedSearch") != null && !jsonObj.get("suggestedSearch").isJsonNull()) && !jsonObj.get("suggestedSearch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suggestedSearch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suggestedSearch").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ErskineMayParagraphSearchResultErskineMaySearch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ErskineMayParagraphSearchResultErskineMaySearch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ErskineMayParagraphSearchResultErskineMaySearch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ErskineMayParagraphSearchResultErskineMaySearch.class));

       return (TypeAdapter<T>) new TypeAdapter<ErskineMayParagraphSearchResultErskineMaySearch>() {
           @Override
           public void write(JsonWriter out, ErskineMayParagraphSearchResultErskineMaySearch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ErskineMayParagraphSearchResultErskineMaySearch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ErskineMayParagraphSearchResultErskineMaySearch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ErskineMayParagraphSearchResultErskineMaySearch
   * @throws IOException if the JSON string is invalid with respect to ErskineMayParagraphSearchResultErskineMaySearch
   */
  public static ErskineMayParagraphSearchResultErskineMaySearch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ErskineMayParagraphSearchResultErskineMaySearch.class);
  }

  /**
   * Convert an instance of ErskineMayParagraphSearchResultErskineMaySearch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

