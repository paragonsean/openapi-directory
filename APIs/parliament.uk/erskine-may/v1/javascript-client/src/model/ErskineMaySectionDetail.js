/**
 * Erskine May API
 * An API that allows querying of Erskine May data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErskineMayFootnote from './ErskineMayFootnote';
import ErskineMaySectionOverview from './ErskineMaySectionOverview';

/**
 * The ErskineMaySectionDetail model module.
 * @module model/ErskineMaySectionDetail
 * @version v1
 */
class ErskineMaySectionDetail {
    /**
     * Constructs a new <code>ErskineMaySectionDetail</code>.
     * @alias module:model/ErskineMaySectionDetail
     */
    constructor() { 
        
        ErskineMaySectionDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ErskineMaySectionDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErskineMaySectionDetail} obj Optional instance to populate.
     * @return {module:model/ErskineMaySectionDetail} The populated <code>ErskineMaySectionDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErskineMaySectionDetail();

            if (data.hasOwnProperty('chapterNumber')) {
                obj['chapterNumber'] = ApiClient.convertToType(data['chapterNumber'], 'Number');
            }
            if (data.hasOwnProperty('chapterTitle')) {
                obj['chapterTitle'] = ApiClient.convertToType(data['chapterTitle'], 'String');
            }
            if (data.hasOwnProperty('contentHtml')) {
                obj['contentHtml'] = ApiClient.convertToType(data['contentHtml'], 'String');
            }
            if (data.hasOwnProperty('footnotes')) {
                obj['footnotes'] = ApiClient.convertToType(data['footnotes'], [ErskineMayFootnote]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isUpdated')) {
                obj['isUpdated'] = ApiClient.convertToType(data['isUpdated'], 'Boolean');
            }
            if (data.hasOwnProperty('parentSectionId')) {
                obj['parentSectionId'] = ApiClient.convertToType(data['parentSectionId'], 'Number');
            }
            if (data.hasOwnProperty('parentSectionTitle')) {
                obj['parentSectionTitle'] = ApiClient.convertToType(data['parentSectionTitle'], 'String');
            }
            if (data.hasOwnProperty('partNumber')) {
                obj['partNumber'] = ApiClient.convertToType(data['partNumber'], 'Number');
            }
            if (data.hasOwnProperty('partTitle')) {
                obj['partTitle'] = ApiClient.convertToType(data['partTitle'], 'String');
            }
            if (data.hasOwnProperty('subSections')) {
                obj['subSections'] = ApiClient.convertToType(data['subSections'], [ErskineMaySectionOverview]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('titleChain')) {
                obj['titleChain'] = ApiClient.convertToType(data['titleChain'], 'String');
            }
            if (data.hasOwnProperty('updatedDate')) {
                obj['updatedDate'] = ApiClient.convertToType(data['updatedDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErskineMaySectionDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErskineMaySectionDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['chapterTitle'] && !(typeof data['chapterTitle'] === 'string' || data['chapterTitle'] instanceof String)) {
            throw new Error("Expected the field `chapterTitle` to be a primitive type in the JSON string but got " + data['chapterTitle']);
        }
        // ensure the json data is a string
        if (data['contentHtml'] && !(typeof data['contentHtml'] === 'string' || data['contentHtml'] instanceof String)) {
            throw new Error("Expected the field `contentHtml` to be a primitive type in the JSON string but got " + data['contentHtml']);
        }
        if (data['footnotes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['footnotes'])) {
                throw new Error("Expected the field `footnotes` to be an array in the JSON data but got " + data['footnotes']);
            }
            // validate the optional field `footnotes` (array)
            for (const item of data['footnotes']) {
                ErskineMayFootnote.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['parentSectionTitle'] && !(typeof data['parentSectionTitle'] === 'string' || data['parentSectionTitle'] instanceof String)) {
            throw new Error("Expected the field `parentSectionTitle` to be a primitive type in the JSON string but got " + data['parentSectionTitle']);
        }
        // ensure the json data is a string
        if (data['partTitle'] && !(typeof data['partTitle'] === 'string' || data['partTitle'] instanceof String)) {
            throw new Error("Expected the field `partTitle` to be a primitive type in the JSON string but got " + data['partTitle']);
        }
        if (data['subSections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subSections'])) {
                throw new Error("Expected the field `subSections` to be an array in the JSON data but got " + data['subSections']);
            }
            // validate the optional field `subSections` (array)
            for (const item of data['subSections']) {
                ErskineMaySectionOverview.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['titleChain'] && !(typeof data['titleChain'] === 'string' || data['titleChain'] instanceof String)) {
            throw new Error("Expected the field `titleChain` to be a primitive type in the JSON string but got " + data['titleChain']);
        }

        return true;
    }


}



/**
 * @member {Number} chapterNumber
 */
ErskineMaySectionDetail.prototype['chapterNumber'] = undefined;

/**
 * @member {String} chapterTitle
 */
ErskineMaySectionDetail.prototype['chapterTitle'] = undefined;

/**
 * @member {String} contentHtml
 */
ErskineMaySectionDetail.prototype['contentHtml'] = undefined;

/**
 * @member {Array.<module:model/ErskineMayFootnote>} footnotes
 */
ErskineMaySectionDetail.prototype['footnotes'] = undefined;

/**
 * @member {Number} id
 */
ErskineMaySectionDetail.prototype['id'] = undefined;

/**
 * @member {Boolean} isUpdated
 */
ErskineMaySectionDetail.prototype['isUpdated'] = undefined;

/**
 * @member {Number} parentSectionId
 */
ErskineMaySectionDetail.prototype['parentSectionId'] = undefined;

/**
 * @member {String} parentSectionTitle
 */
ErskineMaySectionDetail.prototype['parentSectionTitle'] = undefined;

/**
 * @member {Number} partNumber
 */
ErskineMaySectionDetail.prototype['partNumber'] = undefined;

/**
 * @member {String} partTitle
 */
ErskineMaySectionDetail.prototype['partTitle'] = undefined;

/**
 * @member {Array.<module:model/ErskineMaySectionOverview>} subSections
 */
ErskineMaySectionDetail.prototype['subSections'] = undefined;

/**
 * @member {String} title
 */
ErskineMaySectionDetail.prototype['title'] = undefined;

/**
 * @member {String} titleChain
 */
ErskineMaySectionDetail.prototype['titleChain'] = undefined;

/**
 * @member {Date} updatedDate
 */
ErskineMaySectionDetail.prototype['updatedDate'] = undefined;






export default ErskineMaySectionDetail;

