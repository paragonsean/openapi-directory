/**
 * Erskine May API
 * An API that allows querying of Erskine May data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErskineMayIndexTermSeeLink from './ErskineMayIndexTermSeeLink';
import ErskineMayParagraphSearchResult from './ErskineMayParagraphSearchResult';

/**
 * The ErskineMayIndexTerm model module.
 * @module model/ErskineMayIndexTerm
 * @version v1
 */
class ErskineMayIndexTerm {
    /**
     * Constructs a new <code>ErskineMayIndexTerm</code>.
     * @alias module:model/ErskineMayIndexTerm
     */
    constructor() { 
        
        ErskineMayIndexTerm.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ErskineMayIndexTerm</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErskineMayIndexTerm} obj Optional instance to populate.
     * @return {module:model/ErskineMayIndexTerm} The populated <code>ErskineMayIndexTerm</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErskineMayIndexTerm();

            if (data.hasOwnProperty('childTerms')) {
                obj['childTerms'] = ApiClient.convertToType(data['childTerms'], [ErskineMayIndexTerm]);
            }
            if (data.hasOwnProperty('displayAs')) {
                obj['displayAs'] = ApiClient.convertToType(data['displayAs'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('parentTerm')) {
                obj['parentTerm'] = ErskineMayIndexTerm.constructFromObject(data['parentTerm']);
            }
            if (data.hasOwnProperty('references')) {
                obj['references'] = ApiClient.convertToType(data['references'], [ErskineMayParagraphSearchResult]);
            }
            if (data.hasOwnProperty('seeLinks')) {
                obj['seeLinks'] = ApiClient.convertToType(data['seeLinks'], [ErskineMayIndexTermSeeLink]);
            }
            if (data.hasOwnProperty('term')) {
                obj['term'] = ApiClient.convertToType(data['term'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErskineMayIndexTerm</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErskineMayIndexTerm</code>.
     */
    static validateJSON(data) {
        if (data['childTerms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['childTerms'])) {
                throw new Error("Expected the field `childTerms` to be an array in the JSON data but got " + data['childTerms']);
            }
            // validate the optional field `childTerms` (array)
            for (const item of data['childTerms']) {
                ErskineMayIndexTerm.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayAs'] && !(typeof data['displayAs'] === 'string' || data['displayAs'] instanceof String)) {
            throw new Error("Expected the field `displayAs` to be a primitive type in the JSON string but got " + data['displayAs']);
        }
        // validate the optional field `parentTerm`
        if (data['parentTerm']) { // data not null
          ErskineMayIndexTerm.validateJSON(data['parentTerm']);
        }
        if (data['references']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['references'])) {
                throw new Error("Expected the field `references` to be an array in the JSON data but got " + data['references']);
            }
            // validate the optional field `references` (array)
            for (const item of data['references']) {
                ErskineMayParagraphSearchResult.validateJSON(item);
            };
        }
        if (data['seeLinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['seeLinks'])) {
                throw new Error("Expected the field `seeLinks` to be an array in the JSON data but got " + data['seeLinks']);
            }
            // validate the optional field `seeLinks` (array)
            for (const item of data['seeLinks']) {
                ErskineMayIndexTermSeeLink.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['term'] && !(typeof data['term'] === 'string' || data['term'] instanceof String)) {
            throw new Error("Expected the field `term` to be a primitive type in the JSON string but got " + data['term']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/ErskineMayIndexTerm>} childTerms
 */
ErskineMayIndexTerm.prototype['childTerms'] = undefined;

/**
 * @member {String} displayAs
 */
ErskineMayIndexTerm.prototype['displayAs'] = undefined;

/**
 * @member {Number} id
 */
ErskineMayIndexTerm.prototype['id'] = undefined;

/**
 * @member {module:model/ErskineMayIndexTerm} parentTerm
 */
ErskineMayIndexTerm.prototype['parentTerm'] = undefined;

/**
 * @member {Array.<module:model/ErskineMayParagraphSearchResult>} references
 */
ErskineMayIndexTerm.prototype['references'] = undefined;

/**
 * @member {Array.<module:model/ErskineMayIndexTermSeeLink>} seeLinks
 */
ErskineMayIndexTerm.prototype['seeLinks'] = undefined;

/**
 * @member {String} term
 */
ErskineMayIndexTerm.prototype['term'] = undefined;






export default ErskineMayIndexTerm;

