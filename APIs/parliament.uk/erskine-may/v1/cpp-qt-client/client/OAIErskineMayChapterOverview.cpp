/**
 * Erskine May API
 * An API that allows querying of Erskine May data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErskineMayChapterOverview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErskineMayChapterOverview::OAIErskineMayChapterOverview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErskineMayChapterOverview::OAIErskineMayChapterOverview() {
    this->initializeModel();
}

OAIErskineMayChapterOverview::~OAIErskineMayChapterOverview() {}

void OAIErskineMayChapterOverview::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_part_number_isSet = false;
    m_part_number_isValid = false;

    m_sections_isSet = false;
    m_sections_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIErskineMayChapterOverview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErskineMayChapterOverview::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_part_number_isValid = ::OpenAPI::fromJsonValue(m_part_number, json[QString("partNumber")]);
    m_part_number_isSet = !json[QString("partNumber")].isNull() && m_part_number_isValid;

    m_sections_isValid = ::OpenAPI::fromJsonValue(m_sections, json[QString("sections")]);
    m_sections_isSet = !json[QString("sections")].isNull() && m_sections_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIErskineMayChapterOverview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErskineMayChapterOverview::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_part_number_isSet) {
        obj.insert(QString("partNumber"), ::OpenAPI::toJsonValue(m_part_number));
    }
    if (m_sections.size() > 0) {
        obj.insert(QString("sections"), ::OpenAPI::toJsonValue(m_sections));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIErskineMayChapterOverview::getDescription() const {
    return m_description;
}
void OAIErskineMayChapterOverview::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIErskineMayChapterOverview::is_description_Set() const{
    return m_description_isSet;
}

bool OAIErskineMayChapterOverview::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIErskineMayChapterOverview::getNumber() const {
    return m_number;
}
void OAIErskineMayChapterOverview::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIErskineMayChapterOverview::is_number_Set() const{
    return m_number_isSet;
}

bool OAIErskineMayChapterOverview::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIErskineMayChapterOverview::getPartNumber() const {
    return m_part_number;
}
void OAIErskineMayChapterOverview::setPartNumber(const qint32 &part_number) {
    m_part_number = part_number;
    m_part_number_isSet = true;
}

bool OAIErskineMayChapterOverview::is_part_number_Set() const{
    return m_part_number_isSet;
}

bool OAIErskineMayChapterOverview::is_part_number_Valid() const{
    return m_part_number_isValid;
}

QList<OAIErskineMaySectionOverview> OAIErskineMayChapterOverview::getSections() const {
    return m_sections;
}
void OAIErskineMayChapterOverview::setSections(const QList<OAIErskineMaySectionOverview> &sections) {
    m_sections = sections;
    m_sections_isSet = true;
}

bool OAIErskineMayChapterOverview::is_sections_Set() const{
    return m_sections_isSet;
}

bool OAIErskineMayChapterOverview::is_sections_Valid() const{
    return m_sections_isValid;
}

QString OAIErskineMayChapterOverview::getTitle() const {
    return m_title;
}
void OAIErskineMayChapterOverview::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIErskineMayChapterOverview::is_title_Set() const{
    return m_title_isSet;
}

bool OAIErskineMayChapterOverview::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIErskineMayChapterOverview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErskineMayChapterOverview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
