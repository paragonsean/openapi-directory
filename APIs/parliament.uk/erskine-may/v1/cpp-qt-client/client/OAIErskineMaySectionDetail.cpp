/**
 * Erskine May API
 * An API that allows querying of Erskine May data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErskineMaySectionDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErskineMaySectionDetail::OAIErskineMaySectionDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErskineMaySectionDetail::OAIErskineMaySectionDetail() {
    this->initializeModel();
}

OAIErskineMaySectionDetail::~OAIErskineMaySectionDetail() {}

void OAIErskineMaySectionDetail::initializeModel() {

    m_chapter_number_isSet = false;
    m_chapter_number_isValid = false;

    m_chapter_title_isSet = false;
    m_chapter_title_isValid = false;

    m_content_html_isSet = false;
    m_content_html_isValid = false;

    m_footnotes_isSet = false;
    m_footnotes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_updated_isSet = false;
    m_is_updated_isValid = false;

    m_parent_section_id_isSet = false;
    m_parent_section_id_isValid = false;

    m_parent_section_title_isSet = false;
    m_parent_section_title_isValid = false;

    m_part_number_isSet = false;
    m_part_number_isValid = false;

    m_part_title_isSet = false;
    m_part_title_isValid = false;

    m_sub_sections_isSet = false;
    m_sub_sections_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_title_chain_isSet = false;
    m_title_chain_isValid = false;

    m_updated_date_isSet = false;
    m_updated_date_isValid = false;
}

void OAIErskineMaySectionDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErskineMaySectionDetail::fromJsonObject(QJsonObject json) {

    m_chapter_number_isValid = ::OpenAPI::fromJsonValue(m_chapter_number, json[QString("chapterNumber")]);
    m_chapter_number_isSet = !json[QString("chapterNumber")].isNull() && m_chapter_number_isValid;

    m_chapter_title_isValid = ::OpenAPI::fromJsonValue(m_chapter_title, json[QString("chapterTitle")]);
    m_chapter_title_isSet = !json[QString("chapterTitle")].isNull() && m_chapter_title_isValid;

    m_content_html_isValid = ::OpenAPI::fromJsonValue(m_content_html, json[QString("contentHtml")]);
    m_content_html_isSet = !json[QString("contentHtml")].isNull() && m_content_html_isValid;

    m_footnotes_isValid = ::OpenAPI::fromJsonValue(m_footnotes, json[QString("footnotes")]);
    m_footnotes_isSet = !json[QString("footnotes")].isNull() && m_footnotes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_updated_isValid = ::OpenAPI::fromJsonValue(m_is_updated, json[QString("isUpdated")]);
    m_is_updated_isSet = !json[QString("isUpdated")].isNull() && m_is_updated_isValid;

    m_parent_section_id_isValid = ::OpenAPI::fromJsonValue(m_parent_section_id, json[QString("parentSectionId")]);
    m_parent_section_id_isSet = !json[QString("parentSectionId")].isNull() && m_parent_section_id_isValid;

    m_parent_section_title_isValid = ::OpenAPI::fromJsonValue(m_parent_section_title, json[QString("parentSectionTitle")]);
    m_parent_section_title_isSet = !json[QString("parentSectionTitle")].isNull() && m_parent_section_title_isValid;

    m_part_number_isValid = ::OpenAPI::fromJsonValue(m_part_number, json[QString("partNumber")]);
    m_part_number_isSet = !json[QString("partNumber")].isNull() && m_part_number_isValid;

    m_part_title_isValid = ::OpenAPI::fromJsonValue(m_part_title, json[QString("partTitle")]);
    m_part_title_isSet = !json[QString("partTitle")].isNull() && m_part_title_isValid;

    m_sub_sections_isValid = ::OpenAPI::fromJsonValue(m_sub_sections, json[QString("subSections")]);
    m_sub_sections_isSet = !json[QString("subSections")].isNull() && m_sub_sections_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_title_chain_isValid = ::OpenAPI::fromJsonValue(m_title_chain, json[QString("titleChain")]);
    m_title_chain_isSet = !json[QString("titleChain")].isNull() && m_title_chain_isValid;

    m_updated_date_isValid = ::OpenAPI::fromJsonValue(m_updated_date, json[QString("updatedDate")]);
    m_updated_date_isSet = !json[QString("updatedDate")].isNull() && m_updated_date_isValid;
}

QString OAIErskineMaySectionDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErskineMaySectionDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_chapter_number_isSet) {
        obj.insert(QString("chapterNumber"), ::OpenAPI::toJsonValue(m_chapter_number));
    }
    if (m_chapter_title_isSet) {
        obj.insert(QString("chapterTitle"), ::OpenAPI::toJsonValue(m_chapter_title));
    }
    if (m_content_html_isSet) {
        obj.insert(QString("contentHtml"), ::OpenAPI::toJsonValue(m_content_html));
    }
    if (m_footnotes.size() > 0) {
        obj.insert(QString("footnotes"), ::OpenAPI::toJsonValue(m_footnotes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_updated_isSet) {
        obj.insert(QString("isUpdated"), ::OpenAPI::toJsonValue(m_is_updated));
    }
    if (m_parent_section_id_isSet) {
        obj.insert(QString("parentSectionId"), ::OpenAPI::toJsonValue(m_parent_section_id));
    }
    if (m_parent_section_title_isSet) {
        obj.insert(QString("parentSectionTitle"), ::OpenAPI::toJsonValue(m_parent_section_title));
    }
    if (m_part_number_isSet) {
        obj.insert(QString("partNumber"), ::OpenAPI::toJsonValue(m_part_number));
    }
    if (m_part_title_isSet) {
        obj.insert(QString("partTitle"), ::OpenAPI::toJsonValue(m_part_title));
    }
    if (m_sub_sections.size() > 0) {
        obj.insert(QString("subSections"), ::OpenAPI::toJsonValue(m_sub_sections));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_title_chain_isSet) {
        obj.insert(QString("titleChain"), ::OpenAPI::toJsonValue(m_title_chain));
    }
    if (m_updated_date_isSet) {
        obj.insert(QString("updatedDate"), ::OpenAPI::toJsonValue(m_updated_date));
    }
    return obj;
}

qint32 OAIErskineMaySectionDetail::getChapterNumber() const {
    return m_chapter_number;
}
void OAIErskineMaySectionDetail::setChapterNumber(const qint32 &chapter_number) {
    m_chapter_number = chapter_number;
    m_chapter_number_isSet = true;
}

bool OAIErskineMaySectionDetail::is_chapter_number_Set() const{
    return m_chapter_number_isSet;
}

bool OAIErskineMaySectionDetail::is_chapter_number_Valid() const{
    return m_chapter_number_isValid;
}

QString OAIErskineMaySectionDetail::getChapterTitle() const {
    return m_chapter_title;
}
void OAIErskineMaySectionDetail::setChapterTitle(const QString &chapter_title) {
    m_chapter_title = chapter_title;
    m_chapter_title_isSet = true;
}

bool OAIErskineMaySectionDetail::is_chapter_title_Set() const{
    return m_chapter_title_isSet;
}

bool OAIErskineMaySectionDetail::is_chapter_title_Valid() const{
    return m_chapter_title_isValid;
}

QString OAIErskineMaySectionDetail::getContentHtml() const {
    return m_content_html;
}
void OAIErskineMaySectionDetail::setContentHtml(const QString &content_html) {
    m_content_html = content_html;
    m_content_html_isSet = true;
}

bool OAIErskineMaySectionDetail::is_content_html_Set() const{
    return m_content_html_isSet;
}

bool OAIErskineMaySectionDetail::is_content_html_Valid() const{
    return m_content_html_isValid;
}

QList<OAIErskineMayFootnote> OAIErskineMaySectionDetail::getFootnotes() const {
    return m_footnotes;
}
void OAIErskineMaySectionDetail::setFootnotes(const QList<OAIErskineMayFootnote> &footnotes) {
    m_footnotes = footnotes;
    m_footnotes_isSet = true;
}

bool OAIErskineMaySectionDetail::is_footnotes_Set() const{
    return m_footnotes_isSet;
}

bool OAIErskineMaySectionDetail::is_footnotes_Valid() const{
    return m_footnotes_isValid;
}

qint32 OAIErskineMaySectionDetail::getId() const {
    return m_id;
}
void OAIErskineMaySectionDetail::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIErskineMaySectionDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIErskineMaySectionDetail::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIErskineMaySectionDetail::isIsUpdated() const {
    return m_is_updated;
}
void OAIErskineMaySectionDetail::setIsUpdated(const bool &is_updated) {
    m_is_updated = is_updated;
    m_is_updated_isSet = true;
}

bool OAIErskineMaySectionDetail::is_is_updated_Set() const{
    return m_is_updated_isSet;
}

bool OAIErskineMaySectionDetail::is_is_updated_Valid() const{
    return m_is_updated_isValid;
}

qint32 OAIErskineMaySectionDetail::getParentSectionId() const {
    return m_parent_section_id;
}
void OAIErskineMaySectionDetail::setParentSectionId(const qint32 &parent_section_id) {
    m_parent_section_id = parent_section_id;
    m_parent_section_id_isSet = true;
}

bool OAIErskineMaySectionDetail::is_parent_section_id_Set() const{
    return m_parent_section_id_isSet;
}

bool OAIErskineMaySectionDetail::is_parent_section_id_Valid() const{
    return m_parent_section_id_isValid;
}

QString OAIErskineMaySectionDetail::getParentSectionTitle() const {
    return m_parent_section_title;
}
void OAIErskineMaySectionDetail::setParentSectionTitle(const QString &parent_section_title) {
    m_parent_section_title = parent_section_title;
    m_parent_section_title_isSet = true;
}

bool OAIErskineMaySectionDetail::is_parent_section_title_Set() const{
    return m_parent_section_title_isSet;
}

bool OAIErskineMaySectionDetail::is_parent_section_title_Valid() const{
    return m_parent_section_title_isValid;
}

qint32 OAIErskineMaySectionDetail::getPartNumber() const {
    return m_part_number;
}
void OAIErskineMaySectionDetail::setPartNumber(const qint32 &part_number) {
    m_part_number = part_number;
    m_part_number_isSet = true;
}

bool OAIErskineMaySectionDetail::is_part_number_Set() const{
    return m_part_number_isSet;
}

bool OAIErskineMaySectionDetail::is_part_number_Valid() const{
    return m_part_number_isValid;
}

QString OAIErskineMaySectionDetail::getPartTitle() const {
    return m_part_title;
}
void OAIErskineMaySectionDetail::setPartTitle(const QString &part_title) {
    m_part_title = part_title;
    m_part_title_isSet = true;
}

bool OAIErskineMaySectionDetail::is_part_title_Set() const{
    return m_part_title_isSet;
}

bool OAIErskineMaySectionDetail::is_part_title_Valid() const{
    return m_part_title_isValid;
}

QList<OAIErskineMaySectionOverview> OAIErskineMaySectionDetail::getSubSections() const {
    return m_sub_sections;
}
void OAIErskineMaySectionDetail::setSubSections(const QList<OAIErskineMaySectionOverview> &sub_sections) {
    m_sub_sections = sub_sections;
    m_sub_sections_isSet = true;
}

bool OAIErskineMaySectionDetail::is_sub_sections_Set() const{
    return m_sub_sections_isSet;
}

bool OAIErskineMaySectionDetail::is_sub_sections_Valid() const{
    return m_sub_sections_isValid;
}

QString OAIErskineMaySectionDetail::getTitle() const {
    return m_title;
}
void OAIErskineMaySectionDetail::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIErskineMaySectionDetail::is_title_Set() const{
    return m_title_isSet;
}

bool OAIErskineMaySectionDetail::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIErskineMaySectionDetail::getTitleChain() const {
    return m_title_chain;
}
void OAIErskineMaySectionDetail::setTitleChain(const QString &title_chain) {
    m_title_chain = title_chain;
    m_title_chain_isSet = true;
}

bool OAIErskineMaySectionDetail::is_title_chain_Set() const{
    return m_title_chain_isSet;
}

bool OAIErskineMaySectionDetail::is_title_chain_Valid() const{
    return m_title_chain_isValid;
}

QDateTime OAIErskineMaySectionDetail::getUpdatedDate() const {
    return m_updated_date;
}
void OAIErskineMaySectionDetail::setUpdatedDate(const QDateTime &updated_date) {
    m_updated_date = updated_date;
    m_updated_date_isSet = true;
}

bool OAIErskineMaySectionDetail::is_updated_date_Set() const{
    return m_updated_date_isSet;
}

bool OAIErskineMaySectionDetail::is_updated_date_Valid() const{
    return m_updated_date_isValid;
}

bool OAIErskineMaySectionDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chapter_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chapter_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_footnotes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_section_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_section_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_sections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_chain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErskineMaySectionDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
