/**
 * Erskine May API
 * An API that allows querying of Erskine May data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErskineMayIndexTerm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErskineMayIndexTerm::OAIErskineMayIndexTerm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErskineMayIndexTerm::OAIErskineMayIndexTerm() {
    this->initializeModel();
}

OAIErskineMayIndexTerm::~OAIErskineMayIndexTerm() {}

void OAIErskineMayIndexTerm::initializeModel() {

    m_child_terms_isSet = false;
    m_child_terms_isValid = false;

    m_display_as_isSet = false;
    m_display_as_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_parent_term_isSet = false;
    m_parent_term_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;

    m_see_links_isSet = false;
    m_see_links_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;
}

void OAIErskineMayIndexTerm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErskineMayIndexTerm::fromJsonObject(QJsonObject json) {

    m_child_terms_isValid = ::OpenAPI::fromJsonValue(m_child_terms, json[QString("childTerms")]);
    m_child_terms_isSet = !json[QString("childTerms")].isNull() && m_child_terms_isValid;

    m_display_as_isValid = ::OpenAPI::fromJsonValue(m_display_as, json[QString("displayAs")]);
    m_display_as_isSet = !json[QString("displayAs")].isNull() && m_display_as_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_parent_term_isValid = ::OpenAPI::fromJsonValue(m_parent_term, json[QString("parentTerm")]);
    m_parent_term_isSet = !json[QString("parentTerm")].isNull() && m_parent_term_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;

    m_see_links_isValid = ::OpenAPI::fromJsonValue(m_see_links, json[QString("seeLinks")]);
    m_see_links_isSet = !json[QString("seeLinks")].isNull() && m_see_links_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;
}

QString OAIErskineMayIndexTerm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErskineMayIndexTerm::asJsonObject() const {
    QJsonObject obj;
    if (m_child_terms.size() > 0) {
        obj.insert(QString("childTerms"), ::OpenAPI::toJsonValue(m_child_terms));
    }
    if (m_display_as_isSet) {
        obj.insert(QString("displayAs"), ::OpenAPI::toJsonValue(m_display_as));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_parent_term.isSet()) {
        obj.insert(QString("parentTerm"), ::OpenAPI::toJsonValue(m_parent_term));
    }
    if (m_references.size() > 0) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(m_references));
    }
    if (m_see_links.size() > 0) {
        obj.insert(QString("seeLinks"), ::OpenAPI::toJsonValue(m_see_links));
    }
    if (m_term_isSet) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    return obj;
}

QList<OAIErskineMayIndexTerm> OAIErskineMayIndexTerm::getChildTerms() const {
    return m_child_terms;
}
void OAIErskineMayIndexTerm::setChildTerms(const QList<OAIErskineMayIndexTerm> &child_terms) {
    m_child_terms = child_terms;
    m_child_terms_isSet = true;
}

bool OAIErskineMayIndexTerm::is_child_terms_Set() const{
    return m_child_terms_isSet;
}

bool OAIErskineMayIndexTerm::is_child_terms_Valid() const{
    return m_child_terms_isValid;
}

QString OAIErskineMayIndexTerm::getDisplayAs() const {
    return m_display_as;
}
void OAIErskineMayIndexTerm::setDisplayAs(const QString &display_as) {
    m_display_as = display_as;
    m_display_as_isSet = true;
}

bool OAIErskineMayIndexTerm::is_display_as_Set() const{
    return m_display_as_isSet;
}

bool OAIErskineMayIndexTerm::is_display_as_Valid() const{
    return m_display_as_isValid;
}

qint32 OAIErskineMayIndexTerm::getId() const {
    return m_id;
}
void OAIErskineMayIndexTerm::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIErskineMayIndexTerm::is_id_Set() const{
    return m_id_isSet;
}

bool OAIErskineMayIndexTerm::is_id_Valid() const{
    return m_id_isValid;
}

OAIErskineMayIndexTerm OAIErskineMayIndexTerm::getParentTerm() const {
    return m_parent_term;
}
void OAIErskineMayIndexTerm::setParentTerm(const OAIErskineMayIndexTerm &parent_term) {
    m_parent_term = parent_term;
    m_parent_term_isSet = true;
}

bool OAIErskineMayIndexTerm::is_parent_term_Set() const{
    return m_parent_term_isSet;
}

bool OAIErskineMayIndexTerm::is_parent_term_Valid() const{
    return m_parent_term_isValid;
}

QList<OAIErskineMayParagraphSearchResult> OAIErskineMayIndexTerm::getReferences() const {
    return m_references;
}
void OAIErskineMayIndexTerm::setReferences(const QList<OAIErskineMayParagraphSearchResult> &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAIErskineMayIndexTerm::is_references_Set() const{
    return m_references_isSet;
}

bool OAIErskineMayIndexTerm::is_references_Valid() const{
    return m_references_isValid;
}

QList<OAIErskineMayIndexTermSeeLink> OAIErskineMayIndexTerm::getSeeLinks() const {
    return m_see_links;
}
void OAIErskineMayIndexTerm::setSeeLinks(const QList<OAIErskineMayIndexTermSeeLink> &see_links) {
    m_see_links = see_links;
    m_see_links_isSet = true;
}

bool OAIErskineMayIndexTerm::is_see_links_Set() const{
    return m_see_links_isSet;
}

bool OAIErskineMayIndexTerm::is_see_links_Valid() const{
    return m_see_links_isValid;
}

QString OAIErskineMayIndexTerm::getTerm() const {
    return m_term;
}
void OAIErskineMayIndexTerm::setTerm(const QString &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAIErskineMayIndexTerm::is_term_Set() const{
    return m_term_isSet;
}

bool OAIErskineMayIndexTerm::is_term_Valid() const{
    return m_term_isValid;
}

bool OAIErskineMayIndexTerm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_terms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_as_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_term.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_see_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErskineMayIndexTerm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
