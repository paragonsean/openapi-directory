/**
 * Erskine May API
 * An API that allows querying of Erskine May data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErskineMaySectionOverview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErskineMaySectionOverview::OAIErskineMaySectionOverview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErskineMaySectionOverview::OAIErskineMaySectionOverview() {
    this->initializeModel();
}

OAIErskineMaySectionOverview::~OAIErskineMaySectionOverview() {}

void OAIErskineMaySectionOverview::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_sub_sections_isSet = false;
    m_sub_sections_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_title_chain_isSet = false;
    m_title_chain_isValid = false;
}

void OAIErskineMaySectionOverview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErskineMaySectionOverview::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_sub_sections_isValid = ::OpenAPI::fromJsonValue(m_sub_sections, json[QString("subSections")]);
    m_sub_sections_isSet = !json[QString("subSections")].isNull() && m_sub_sections_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_title_chain_isValid = ::OpenAPI::fromJsonValue(m_title_chain, json[QString("titleChain")]);
    m_title_chain_isSet = !json[QString("titleChain")].isNull() && m_title_chain_isValid;
}

QString OAIErskineMaySectionOverview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErskineMaySectionOverview::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_sub_sections.size() > 0) {
        obj.insert(QString("subSections"), ::OpenAPI::toJsonValue(m_sub_sections));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_title_chain_isSet) {
        obj.insert(QString("titleChain"), ::OpenAPI::toJsonValue(m_title_chain));
    }
    return obj;
}

qint32 OAIErskineMaySectionOverview::getId() const {
    return m_id;
}
void OAIErskineMaySectionOverview::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIErskineMaySectionOverview::is_id_Set() const{
    return m_id_isSet;
}

bool OAIErskineMaySectionOverview::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIErskineMaySectionOverview> OAIErskineMaySectionOverview::getSubSections() const {
    return m_sub_sections;
}
void OAIErskineMaySectionOverview::setSubSections(const QList<OAIErskineMaySectionOverview> &sub_sections) {
    m_sub_sections = sub_sections;
    m_sub_sections_isSet = true;
}

bool OAIErskineMaySectionOverview::is_sub_sections_Set() const{
    return m_sub_sections_isSet;
}

bool OAIErskineMaySectionOverview::is_sub_sections_Valid() const{
    return m_sub_sections_isValid;
}

QString OAIErskineMaySectionOverview::getTitle() const {
    return m_title;
}
void OAIErskineMaySectionOverview::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIErskineMaySectionOverview::is_title_Set() const{
    return m_title_isSet;
}

bool OAIErskineMaySectionOverview::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIErskineMaySectionOverview::getTitleChain() const {
    return m_title_chain;
}
void OAIErskineMaySectionOverview::setTitleChain(const QString &title_chain) {
    m_title_chain = title_chain;
    m_title_chain_isSet = true;
}

bool OAIErskineMaySectionOverview::is_title_chain_Set() const{
    return m_title_chain_isSet;
}

bool OAIErskineMaySectionOverview::is_title_chain_Valid() const{
    return m_title_chain_isValid;
}

bool OAIErskineMaySectionOverview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_sections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_chain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErskineMaySectionOverview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
