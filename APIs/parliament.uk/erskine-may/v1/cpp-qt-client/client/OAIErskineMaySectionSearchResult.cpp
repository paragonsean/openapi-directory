/**
 * Erskine May API
 * An API that allows querying of Erskine May data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErskineMaySectionSearchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErskineMaySectionSearchResult::OAIErskineMaySectionSearchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErskineMaySectionSearchResult::OAIErskineMaySectionSearchResult() {
    this->initializeModel();
}

OAIErskineMaySectionSearchResult::~OAIErskineMaySectionSearchResult() {}

void OAIErskineMaySectionSearchResult::initializeModel() {

    m_chapter_number_isSet = false;
    m_chapter_number_isValid = false;

    m_chapter_title_isSet = false;
    m_chapter_title_isValid = false;

    m_part_number_isSet = false;
    m_part_number_isValid = false;

    m_section_id_isSet = false;
    m_section_id_isValid = false;

    m_section_title_isSet = false;
    m_section_title_isValid = false;

    m_section_title_chain_isSet = false;
    m_section_title_chain_isValid = false;
}

void OAIErskineMaySectionSearchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErskineMaySectionSearchResult::fromJsonObject(QJsonObject json) {

    m_chapter_number_isValid = ::OpenAPI::fromJsonValue(m_chapter_number, json[QString("chapterNumber")]);
    m_chapter_number_isSet = !json[QString("chapterNumber")].isNull() && m_chapter_number_isValid;

    m_chapter_title_isValid = ::OpenAPI::fromJsonValue(m_chapter_title, json[QString("chapterTitle")]);
    m_chapter_title_isSet = !json[QString("chapterTitle")].isNull() && m_chapter_title_isValid;

    m_part_number_isValid = ::OpenAPI::fromJsonValue(m_part_number, json[QString("partNumber")]);
    m_part_number_isSet = !json[QString("partNumber")].isNull() && m_part_number_isValid;

    m_section_id_isValid = ::OpenAPI::fromJsonValue(m_section_id, json[QString("sectionId")]);
    m_section_id_isSet = !json[QString("sectionId")].isNull() && m_section_id_isValid;

    m_section_title_isValid = ::OpenAPI::fromJsonValue(m_section_title, json[QString("sectionTitle")]);
    m_section_title_isSet = !json[QString("sectionTitle")].isNull() && m_section_title_isValid;

    m_section_title_chain_isValid = ::OpenAPI::fromJsonValue(m_section_title_chain, json[QString("sectionTitleChain")]);
    m_section_title_chain_isSet = !json[QString("sectionTitleChain")].isNull() && m_section_title_chain_isValid;
}

QString OAIErskineMaySectionSearchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErskineMaySectionSearchResult::asJsonObject() const {
    QJsonObject obj;
    if (m_chapter_number_isSet) {
        obj.insert(QString("chapterNumber"), ::OpenAPI::toJsonValue(m_chapter_number));
    }
    if (m_chapter_title_isSet) {
        obj.insert(QString("chapterTitle"), ::OpenAPI::toJsonValue(m_chapter_title));
    }
    if (m_part_number_isSet) {
        obj.insert(QString("partNumber"), ::OpenAPI::toJsonValue(m_part_number));
    }
    if (m_section_id_isSet) {
        obj.insert(QString("sectionId"), ::OpenAPI::toJsonValue(m_section_id));
    }
    if (m_section_title_isSet) {
        obj.insert(QString("sectionTitle"), ::OpenAPI::toJsonValue(m_section_title));
    }
    if (m_section_title_chain_isSet) {
        obj.insert(QString("sectionTitleChain"), ::OpenAPI::toJsonValue(m_section_title_chain));
    }
    return obj;
}

qint32 OAIErskineMaySectionSearchResult::getChapterNumber() const {
    return m_chapter_number;
}
void OAIErskineMaySectionSearchResult::setChapterNumber(const qint32 &chapter_number) {
    m_chapter_number = chapter_number;
    m_chapter_number_isSet = true;
}

bool OAIErskineMaySectionSearchResult::is_chapter_number_Set() const{
    return m_chapter_number_isSet;
}

bool OAIErskineMaySectionSearchResult::is_chapter_number_Valid() const{
    return m_chapter_number_isValid;
}

QString OAIErskineMaySectionSearchResult::getChapterTitle() const {
    return m_chapter_title;
}
void OAIErskineMaySectionSearchResult::setChapterTitle(const QString &chapter_title) {
    m_chapter_title = chapter_title;
    m_chapter_title_isSet = true;
}

bool OAIErskineMaySectionSearchResult::is_chapter_title_Set() const{
    return m_chapter_title_isSet;
}

bool OAIErskineMaySectionSearchResult::is_chapter_title_Valid() const{
    return m_chapter_title_isValid;
}

qint32 OAIErskineMaySectionSearchResult::getPartNumber() const {
    return m_part_number;
}
void OAIErskineMaySectionSearchResult::setPartNumber(const qint32 &part_number) {
    m_part_number = part_number;
    m_part_number_isSet = true;
}

bool OAIErskineMaySectionSearchResult::is_part_number_Set() const{
    return m_part_number_isSet;
}

bool OAIErskineMaySectionSearchResult::is_part_number_Valid() const{
    return m_part_number_isValid;
}

qint32 OAIErskineMaySectionSearchResult::getSectionId() const {
    return m_section_id;
}
void OAIErskineMaySectionSearchResult::setSectionId(const qint32 &section_id) {
    m_section_id = section_id;
    m_section_id_isSet = true;
}

bool OAIErskineMaySectionSearchResult::is_section_id_Set() const{
    return m_section_id_isSet;
}

bool OAIErskineMaySectionSearchResult::is_section_id_Valid() const{
    return m_section_id_isValid;
}

QString OAIErskineMaySectionSearchResult::getSectionTitle() const {
    return m_section_title;
}
void OAIErskineMaySectionSearchResult::setSectionTitle(const QString &section_title) {
    m_section_title = section_title;
    m_section_title_isSet = true;
}

bool OAIErskineMaySectionSearchResult::is_section_title_Set() const{
    return m_section_title_isSet;
}

bool OAIErskineMaySectionSearchResult::is_section_title_Valid() const{
    return m_section_title_isValid;
}

QString OAIErskineMaySectionSearchResult::getSectionTitleChain() const {
    return m_section_title_chain;
}
void OAIErskineMaySectionSearchResult::setSectionTitleChain(const QString &section_title_chain) {
    m_section_title_chain = section_title_chain;
    m_section_title_chain_isSet = true;
}

bool OAIErskineMaySectionSearchResult::is_section_title_chain_Set() const{
    return m_section_title_chain_isSet;
}

bool OAIErskineMaySectionSearchResult::is_section_title_chain_Valid() const{
    return m_section_title_chain_isValid;
}

bool OAIErskineMaySectionSearchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chapter_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chapter_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_title_chain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErskineMaySectionSearchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
