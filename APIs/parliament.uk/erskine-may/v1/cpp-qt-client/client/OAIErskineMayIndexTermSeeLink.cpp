/**
 * Erskine May API
 * An API that allows querying of Erskine May data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErskineMayIndexTermSeeLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErskineMayIndexTermSeeLink::OAIErskineMayIndexTermSeeLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErskineMayIndexTermSeeLink::OAIErskineMayIndexTermSeeLink() {
    this->initializeModel();
}

OAIErskineMayIndexTermSeeLink::~OAIErskineMayIndexTermSeeLink() {}

void OAIErskineMayIndexTermSeeLink::initializeModel() {

    m_index_term_id_isSet = false;
    m_index_term_id_isValid = false;

    m_see_type_isSet = false;
    m_see_type_isValid = false;

    m_see_value_isSet = false;
    m_see_value_isValid = false;
}

void OAIErskineMayIndexTermSeeLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErskineMayIndexTermSeeLink::fromJsonObject(QJsonObject json) {

    m_index_term_id_isValid = ::OpenAPI::fromJsonValue(m_index_term_id, json[QString("indexTermId")]);
    m_index_term_id_isSet = !json[QString("indexTermId")].isNull() && m_index_term_id_isValid;

    m_see_type_isValid = ::OpenAPI::fromJsonValue(m_see_type, json[QString("seeType")]);
    m_see_type_isSet = !json[QString("seeType")].isNull() && m_see_type_isValid;

    m_see_value_isValid = ::OpenAPI::fromJsonValue(m_see_value, json[QString("seeValue")]);
    m_see_value_isSet = !json[QString("seeValue")].isNull() && m_see_value_isValid;
}

QString OAIErskineMayIndexTermSeeLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErskineMayIndexTermSeeLink::asJsonObject() const {
    QJsonObject obj;
    if (m_index_term_id_isSet) {
        obj.insert(QString("indexTermId"), ::OpenAPI::toJsonValue(m_index_term_id));
    }
    if (m_see_type_isSet) {
        obj.insert(QString("seeType"), ::OpenAPI::toJsonValue(m_see_type));
    }
    if (m_see_value_isSet) {
        obj.insert(QString("seeValue"), ::OpenAPI::toJsonValue(m_see_value));
    }
    return obj;
}

qint32 OAIErskineMayIndexTermSeeLink::getIndexTermId() const {
    return m_index_term_id;
}
void OAIErskineMayIndexTermSeeLink::setIndexTermId(const qint32 &index_term_id) {
    m_index_term_id = index_term_id;
    m_index_term_id_isSet = true;
}

bool OAIErskineMayIndexTermSeeLink::is_index_term_id_Set() const{
    return m_index_term_id_isSet;
}

bool OAIErskineMayIndexTermSeeLink::is_index_term_id_Valid() const{
    return m_index_term_id_isValid;
}

QString OAIErskineMayIndexTermSeeLink::getSeeType() const {
    return m_see_type;
}
void OAIErskineMayIndexTermSeeLink::setSeeType(const QString &see_type) {
    m_see_type = see_type;
    m_see_type_isSet = true;
}

bool OAIErskineMayIndexTermSeeLink::is_see_type_Set() const{
    return m_see_type_isSet;
}

bool OAIErskineMayIndexTermSeeLink::is_see_type_Valid() const{
    return m_see_type_isValid;
}

QString OAIErskineMayIndexTermSeeLink::getSeeValue() const {
    return m_see_value;
}
void OAIErskineMayIndexTermSeeLink::setSeeValue(const QString &see_value) {
    m_see_value = see_value;
    m_see_value_isSet = true;
}

bool OAIErskineMayIndexTermSeeLink::is_see_value_Set() const{
    return m_see_value_isSet;
}

bool OAIErskineMayIndexTermSeeLink::is_see_value_Valid() const{
    return m_see_value_isValid;
}

bool OAIErskineMayIndexTermSeeLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_term_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_see_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_see_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErskineMayIndexTermSeeLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
