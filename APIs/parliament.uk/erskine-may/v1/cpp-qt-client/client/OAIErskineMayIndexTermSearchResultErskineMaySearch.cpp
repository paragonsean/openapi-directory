/**
 * Erskine May API
 * An API that allows querying of Erskine May data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErskineMayIndexTermSearchResultErskineMaySearch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErskineMayIndexTermSearchResultErskineMaySearch::OAIErskineMayIndexTermSearchResultErskineMaySearch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErskineMayIndexTermSearchResultErskineMaySearch::OAIErskineMayIndexTermSearchResultErskineMaySearch() {
    this->initializeModel();
}

OAIErskineMayIndexTermSearchResultErskineMaySearch::~OAIErskineMayIndexTermSearchResultErskineMaySearch() {}

void OAIErskineMayIndexTermSearchResultErskineMaySearch::initializeModel() {

    m_search_results_isSet = false;
    m_search_results_isValid = false;

    m_search_term_isSet = false;
    m_search_term_isValid = false;

    m_search_terms_isSet = false;
    m_search_terms_isValid = false;

    m_skip_isSet = false;
    m_skip_isValid = false;

    m_suggested_search_isSet = false;
    m_suggested_search_isValid = false;

    m_take_isSet = false;
    m_take_isValid = false;

    m_total_results_isSet = false;
    m_total_results_isValid = false;
}

void OAIErskineMayIndexTermSearchResultErskineMaySearch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErskineMayIndexTermSearchResultErskineMaySearch::fromJsonObject(QJsonObject json) {

    m_search_results_isValid = ::OpenAPI::fromJsonValue(m_search_results, json[QString("searchResults")]);
    m_search_results_isSet = !json[QString("searchResults")].isNull() && m_search_results_isValid;

    m_search_term_isValid = ::OpenAPI::fromJsonValue(m_search_term, json[QString("searchTerm")]);
    m_search_term_isSet = !json[QString("searchTerm")].isNull() && m_search_term_isValid;

    m_search_terms_isValid = ::OpenAPI::fromJsonValue(m_search_terms, json[QString("searchTerms")]);
    m_search_terms_isSet = !json[QString("searchTerms")].isNull() && m_search_terms_isValid;

    m_skip_isValid = ::OpenAPI::fromJsonValue(m_skip, json[QString("skip")]);
    m_skip_isSet = !json[QString("skip")].isNull() && m_skip_isValid;

    m_suggested_search_isValid = ::OpenAPI::fromJsonValue(m_suggested_search, json[QString("suggestedSearch")]);
    m_suggested_search_isSet = !json[QString("suggestedSearch")].isNull() && m_suggested_search_isValid;

    m_take_isValid = ::OpenAPI::fromJsonValue(m_take, json[QString("take")]);
    m_take_isSet = !json[QString("take")].isNull() && m_take_isValid;

    m_total_results_isValid = ::OpenAPI::fromJsonValue(m_total_results, json[QString("totalResults")]);
    m_total_results_isSet = !json[QString("totalResults")].isNull() && m_total_results_isValid;
}

QString OAIErskineMayIndexTermSearchResultErskineMaySearch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErskineMayIndexTermSearchResultErskineMaySearch::asJsonObject() const {
    QJsonObject obj;
    if (m_search_results.size() > 0) {
        obj.insert(QString("searchResults"), ::OpenAPI::toJsonValue(m_search_results));
    }
    if (m_search_term_isSet) {
        obj.insert(QString("searchTerm"), ::OpenAPI::toJsonValue(m_search_term));
    }
    if (m_search_terms.size() > 0) {
        obj.insert(QString("searchTerms"), ::OpenAPI::toJsonValue(m_search_terms));
    }
    if (m_skip_isSet) {
        obj.insert(QString("skip"), ::OpenAPI::toJsonValue(m_skip));
    }
    if (m_suggested_search_isSet) {
        obj.insert(QString("suggestedSearch"), ::OpenAPI::toJsonValue(m_suggested_search));
    }
    if (m_take_isSet) {
        obj.insert(QString("take"), ::OpenAPI::toJsonValue(m_take));
    }
    if (m_total_results_isSet) {
        obj.insert(QString("totalResults"), ::OpenAPI::toJsonValue(m_total_results));
    }
    return obj;
}

QList<OAIErskineMayIndexTermSearchResult> OAIErskineMayIndexTermSearchResultErskineMaySearch::getSearchResults() const {
    return m_search_results;
}
void OAIErskineMayIndexTermSearchResultErskineMaySearch::setSearchResults(const QList<OAIErskineMayIndexTermSearchResult> &search_results) {
    m_search_results = search_results;
    m_search_results_isSet = true;
}

bool OAIErskineMayIndexTermSearchResultErskineMaySearch::is_search_results_Set() const{
    return m_search_results_isSet;
}

bool OAIErskineMayIndexTermSearchResultErskineMaySearch::is_search_results_Valid() const{
    return m_search_results_isValid;
}

QString OAIErskineMayIndexTermSearchResultErskineMaySearch::getSearchTerm() const {
    return m_search_term;
}
void OAIErskineMayIndexTermSearchResultErskineMaySearch::setSearchTerm(const QString &search_term) {
    m_search_term = search_term;
    m_search_term_isSet = true;
}

bool OAIErskineMayIndexTermSearchResultErskineMaySearch::is_search_term_Set() const{
    return m_search_term_isSet;
}

bool OAIErskineMayIndexTermSearchResultErskineMaySearch::is_search_term_Valid() const{
    return m_search_term_isValid;
}

QList<QString> OAIErskineMayIndexTermSearchResultErskineMaySearch::getSearchTerms() const {
    return m_search_terms;
}
void OAIErskineMayIndexTermSearchResultErskineMaySearch::setSearchTerms(const QList<QString> &search_terms) {
    m_search_terms = search_terms;
    m_search_terms_isSet = true;
}

bool OAIErskineMayIndexTermSearchResultErskineMaySearch::is_search_terms_Set() const{
    return m_search_terms_isSet;
}

bool OAIErskineMayIndexTermSearchResultErskineMaySearch::is_search_terms_Valid() const{
    return m_search_terms_isValid;
}

qint32 OAIErskineMayIndexTermSearchResultErskineMaySearch::getSkip() const {
    return m_skip;
}
void OAIErskineMayIndexTermSearchResultErskineMaySearch::setSkip(const qint32 &skip) {
    m_skip = skip;
    m_skip_isSet = true;
}

bool OAIErskineMayIndexTermSearchResultErskineMaySearch::is_skip_Set() const{
    return m_skip_isSet;
}

bool OAIErskineMayIndexTermSearchResultErskineMaySearch::is_skip_Valid() const{
    return m_skip_isValid;
}

QString OAIErskineMayIndexTermSearchResultErskineMaySearch::getSuggestedSearch() const {
    return m_suggested_search;
}
void OAIErskineMayIndexTermSearchResultErskineMaySearch::setSuggestedSearch(const QString &suggested_search) {
    m_suggested_search = suggested_search;
    m_suggested_search_isSet = true;
}

bool OAIErskineMayIndexTermSearchResultErskineMaySearch::is_suggested_search_Set() const{
    return m_suggested_search_isSet;
}

bool OAIErskineMayIndexTermSearchResultErskineMaySearch::is_suggested_search_Valid() const{
    return m_suggested_search_isValid;
}

qint32 OAIErskineMayIndexTermSearchResultErskineMaySearch::getTake() const {
    return m_take;
}
void OAIErskineMayIndexTermSearchResultErskineMaySearch::setTake(const qint32 &take) {
    m_take = take;
    m_take_isSet = true;
}

bool OAIErskineMayIndexTermSearchResultErskineMaySearch::is_take_Set() const{
    return m_take_isSet;
}

bool OAIErskineMayIndexTermSearchResultErskineMaySearch::is_take_Valid() const{
    return m_take_isValid;
}

qint32 OAIErskineMayIndexTermSearchResultErskineMaySearch::getTotalResults() const {
    return m_total_results;
}
void OAIErskineMayIndexTermSearchResultErskineMaySearch::setTotalResults(const qint32 &total_results) {
    m_total_results = total_results;
    m_total_results_isSet = true;
}

bool OAIErskineMayIndexTermSearchResultErskineMaySearch::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAIErskineMayIndexTermSearchResultErskineMaySearch::is_total_results_Valid() const{
    return m_total_results_isValid;
}

bool OAIErskineMayIndexTermSearchResultErskineMaySearch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_search_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_terms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_take_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErskineMayIndexTermSearchResultErskineMaySearch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
