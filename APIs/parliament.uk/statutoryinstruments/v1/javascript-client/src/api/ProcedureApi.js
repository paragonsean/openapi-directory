/**
 * Statutory Instruments API
 * An API exposing details of the various types of Statutory Instruments laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../model/ProblemDetails';
import ProcedureDetailsResource from '../model/ProcedureDetailsResource';
import ProcedureResourceCollection from '../model/ProcedureResourceCollection';

/**
* Procedure service.
* @module api/ProcedureApi
* @version v1
*/
export default class ProcedureApi {

    /**
    * Constructs a new ProcedureApi. 
    * @alias module:api/ProcedureApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getProceduresByIdV1 operation.
     * @callback module:api/ProcedureApi~getProceduresByIdV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcedureDetailsResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns procedure by ID.
     * @param {String} id Procedure with the ID specified
     * @param {module:api/ProcedureApi~getProceduresByIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcedureDetailsResource}
     */
    getProceduresByIdV1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProceduresByIdV1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ProcedureDetailsResource;
      return this.apiClient.callApi(
        '/api/v1/Procedure/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProceduresV1 operation.
     * @callback module:api/ProcedureApi~getProceduresV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcedureResourceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all procedures.
     * @param {module:api/ProcedureApi~getProceduresV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcedureResourceCollection}
     */
    getProceduresV1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ProcedureResourceCollection;
      return this.apiClient.callApi(
        '/api/v1/Procedure', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
