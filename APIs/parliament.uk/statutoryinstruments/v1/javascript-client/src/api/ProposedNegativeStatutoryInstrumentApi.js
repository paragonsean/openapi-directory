/**
 * Statutory Instruments API
 * An API exposing details of the various types of Statutory Instruments laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BusinessItemResourceCollection from '../model/BusinessItemResourceCollection';
import ProblemDetails from '../model/ProblemDetails';
import ProposedNegativeStatutoryInstrumentResource from '../model/ProposedNegativeStatutoryInstrumentResource';
import ProposedNegativeStatutoryInstrumentResourceCollection from '../model/ProposedNegativeStatutoryInstrumentResourceCollection';

/**
* ProposedNegativeStatutoryInstrument service.
* @module api/ProposedNegativeStatutoryInstrumentApi
* @version v1
*/
export default class ProposedNegativeStatutoryInstrumentApi {

    /**
    * Constructs a new ProposedNegativeStatutoryInstrumentApi. 
    * @alias module:api/ProposedNegativeStatutoryInstrumentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getBusinessItemsByProposedNegativeStatutoryInstrumentId operation.
     * @callback module:api/ProposedNegativeStatutoryInstrumentApi~getBusinessItemsByProposedNegativeStatutoryInstrumentIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BusinessItemResourceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns business items belonging to a proposed negative statutory instrument.
     * @param {String} id Business items belonging to proposed negative statutory instrument with the ID specified
     * @param {module:api/ProposedNegativeStatutoryInstrumentApi~getBusinessItemsByProposedNegativeStatutoryInstrumentIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BusinessItemResourceCollection}
     */
    getBusinessItemsByProposedNegativeStatutoryInstrumentId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBusinessItemsByProposedNegativeStatutoryInstrumentId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = BusinessItemResourceCollection;
      return this.apiClient.callApi(
        '/api/v1/ProposedNegativeStatutoryInstrument/{id}/BusinessItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProposedNegativeStatutoryInstrumentById operation.
     * @callback module:api/ProposedNegativeStatutoryInstrumentApi~getProposedNegativeStatutoryInstrumentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProposedNegativeStatutoryInstrumentResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns proposed negative statutory instrument by ID.
     * @param {String} id Proposed negative statutory instrument with the ID specified
     * @param {module:api/ProposedNegativeStatutoryInstrumentApi~getProposedNegativeStatutoryInstrumentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProposedNegativeStatutoryInstrumentResource}
     */
    getProposedNegativeStatutoryInstrumentById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProposedNegativeStatutoryInstrumentById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ProposedNegativeStatutoryInstrumentResource;
      return this.apiClient.callApi(
        '/api/v1/ProposedNegativeStatutoryInstrument/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProposedNegativeStatutoryInstruments operation.
     * @callback module:api/ProposedNegativeStatutoryInstrumentApi~getProposedNegativeStatutoryInstrumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProposedNegativeStatutoryInstrumentResourceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of proposed negative statutory instruments.
     * @param {Object} opts Optional parameters
     * @param {String} [name] Proposed negative statutory instruments with the name provided
     * @param {Boolean} [recommendedForProcedureChange] Proposed negative statutory instruments recommended for procedure change
     * @param {Number} [departmentId] Proposed negative statutory instruments with the department ID specified
     * @param {String} [layingBodyId] Proposed negative statutory instruments with the laying body ID specified
     * @param {Number} [skip] The number of records to skip from the first, default is 0
     * @param {Number} [take] The number of records to return, default is 20
     * @param {module:api/ProposedNegativeStatutoryInstrumentApi~getProposedNegativeStatutoryInstrumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProposedNegativeStatutoryInstrumentResourceCollection}
     */
    getProposedNegativeStatutoryInstruments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Name': opts['name'],
        'RecommendedForProcedureChange': opts['recommendedForProcedureChange'],
        'DepartmentId': opts['departmentId'],
        'LayingBodyId': opts['layingBodyId'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ProposedNegativeStatutoryInstrumentResourceCollection;
      return this.apiClient.callApi(
        '/api/v1/ProposedNegativeStatutoryInstrument', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
