/**
 * Statutory Instruments API
 * An API exposing details of the various types of Statutory Instruments laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BusinessItemResourceCollection from '../model/BusinessItemResourceCollection';
import House from '../model/House';
import ParliamentaryProcess from '../model/ParliamentaryProcess';
import ProblemDetails from '../model/ProblemDetails';
import StatutoryInstrumentResource from '../model/StatutoryInstrumentResource';
import StatutoryInstrumentResourceCollection from '../model/StatutoryInstrumentResourceCollection';
import StatutoryInstrumentType from '../model/StatutoryInstrumentType';

/**
* StatutoryInstrument service.
* @module api/StatutoryInstrumentApi
* @version v1
*/
export default class StatutoryInstrumentApi {

    /**
    * Constructs a new StatutoryInstrumentApi. 
    * @alias module:api/StatutoryInstrumentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getBusinessItemsByStatutoryInstrumentId operation.
     * @callback module:api/StatutoryInstrumentApi~getBusinessItemsByStatutoryInstrumentIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BusinessItemResourceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns business items belonging to statutory instrument with ID.
     * @param {String} id Business items belonging to statutory instrument with the ID specified
     * @param {module:api/StatutoryInstrumentApi~getBusinessItemsByStatutoryInstrumentIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BusinessItemResourceCollection}
     */
    getBusinessItemsByStatutoryInstrumentId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBusinessItemsByStatutoryInstrumentId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = BusinessItemResourceCollection;
      return this.apiClient.callApi(
        '/api/v1/StatutoryInstrument/{id}/BusinessItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatutoryInstrumentById operation.
     * @callback module:api/StatutoryInstrumentApi~getStatutoryInstrumentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatutoryInstrumentResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a statutory instrument by ID.
     * @param {String} id Statutory instrument with the ID specified
     * @param {module:api/StatutoryInstrumentApi~getStatutoryInstrumentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatutoryInstrumentResource}
     */
    getStatutoryInstrumentById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStatutoryInstrumentById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = StatutoryInstrumentResource;
      return this.apiClient.callApi(
        '/api/v1/StatutoryInstrument/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatutoryInstruments operation.
     * @callback module:api/StatutoryInstrumentApi~getStatutoryInstrumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatutoryInstrumentResourceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of statutory instruments.
     * @param {Object} opts Optional parameters
     * @param {String} [name] Statutory instruments with the name specified
     * @param {module:model/StatutoryInstrumentType} [statutoryInstrumentType] Statutory instruments where the statutory instrument type is the type provided
     * @param {Boolean} [scheduledDebate] Statutory instrument which contains a scheduled debate
     * @param {Boolean} [motionToStop] Statutory instruments which contains a motion to stop
     * @param {Boolean} [concernsRaisedByCommittee] Statutory instruments which contains concerns raised by committee
     * @param {module:model/ParliamentaryProcess} [parliamentaryProcessConcluded] Statutory instruments where the parliamentary process is concluded or notconcluded
     * @param {Number} [departmentId] Statutory instruments with the department ID specified
     * @param {String} [layingBodyId] Statutory instruments with the laying body ID specified
     * @param {module:model/House} [house] Statutory instruments laid in the house specified
     * @param {Number} [skip] The number of records to skip from the first, default is 0
     * @param {Number} [take] The number of records to return, default is 20
     * @param {module:api/StatutoryInstrumentApi~getStatutoryInstrumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatutoryInstrumentResourceCollection}
     */
    getStatutoryInstruments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Name': opts['name'],
        'StatutoryInstrumentType': opts['statutoryInstrumentType'],
        'ScheduledDebate': opts['scheduledDebate'],
        'MotionToStop': opts['motionToStop'],
        'ConcernsRaisedByCommittee': opts['concernsRaisedByCommittee'],
        'ParliamentaryProcessConcluded': opts['parliamentaryProcessConcluded'],
        'DepartmentId': opts['departmentId'],
        'LayingBodyId': opts['layingBodyId'],
        'House': opts['house'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = StatutoryInstrumentResourceCollection;
      return this.apiClient.callApi(
        '/api/v1/StatutoryInstrument', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
