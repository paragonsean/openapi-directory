/**
 * Statutory Instruments API
 * An API exposing details of the various types of Statutory Instruments laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Department from './Department';
import LaidPaperSummary from './LaidPaperSummary';
import Procedure from './Procedure';

/**
 * The ProposedNegativeStatutoryInstrument model module.
 * @module model/ProposedNegativeStatutoryInstrument
 * @version v1
 */
class ProposedNegativeStatutoryInstrument {
    /**
     * Constructs a new <code>ProposedNegativeStatutoryInstrument</code>.
     * @alias module:model/ProposedNegativeStatutoryInstrument
     */
    constructor() { 
        
        ProposedNegativeStatutoryInstrument.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProposedNegativeStatutoryInstrument</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProposedNegativeStatutoryInstrument} obj Optional instance to populate.
     * @return {module:model/ProposedNegativeStatutoryInstrument} The populated <code>ProposedNegativeStatutoryInstrument</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProposedNegativeStatutoryInstrument();

            if (data.hasOwnProperty('commonsLayingDate')) {
                obj['commonsLayingDate'] = ApiClient.convertToType(data['commonsLayingDate'], 'Date');
            }
            if (data.hasOwnProperty('commonsPublishedDate')) {
                obj['commonsPublishedDate'] = ApiClient.convertToType(data['commonsPublishedDate'], 'Date');
            }
            if (data.hasOwnProperty('departmentId')) {
                obj['departmentId'] = ApiClient.convertToType(data['departmentId'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('layingBodyDepartment')) {
                obj['layingBodyDepartment'] = Department.constructFromObject(data['layingBodyDepartment']);
            }
            if (data.hasOwnProperty('layingBodyId')) {
                obj['layingBodyId'] = ApiClient.convertToType(data['layingBodyId'], 'String');
            }
            if (data.hasOwnProperty('layingBodyName')) {
                obj['layingBodyName'] = ApiClient.convertToType(data['layingBodyName'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('lordsLayingDate')) {
                obj['lordsLayingDate'] = ApiClient.convertToType(data['lordsLayingDate'], 'Date');
            }
            if (data.hasOwnProperty('lordsPublishedDate')) {
                obj['lordsPublishedDate'] = ApiClient.convertToType(data['lordsPublishedDate'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('procedure')) {
                obj['procedure'] = Procedure.constructFromObject(data['procedure']);
            }
            if (data.hasOwnProperty('procedureName')) {
                obj['procedureName'] = ApiClient.convertToType(data['procedureName'], 'String');
            }
            if (data.hasOwnProperty('procedureUri')) {
                obj['procedureUri'] = ApiClient.convertToType(data['procedureUri'], 'String');
            }
            if (data.hasOwnProperty('statutoryInstrument')) {
                obj['statutoryInstrument'] = LaidPaperSummary.constructFromObject(data['statutoryInstrument']);
            }
            if (data.hasOwnProperty('statutoryInstrumentPaperId')) {
                obj['statutoryInstrumentPaperId'] = ApiClient.convertToType(data['statutoryInstrumentPaperId'], 'String');
            }
            if (data.hasOwnProperty('statutoryInstrumentPaperName')) {
                obj['statutoryInstrumentPaperName'] = ApiClient.convertToType(data['statutoryInstrumentPaperName'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProposedNegativeStatutoryInstrument</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProposedNegativeStatutoryInstrument</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `layingBodyDepartment`
        if (data['layingBodyDepartment']) { // data not null
          Department.validateJSON(data['layingBodyDepartment']);
        }
        // ensure the json data is a string
        if (data['layingBodyId'] && !(typeof data['layingBodyId'] === 'string' || data['layingBodyId'] instanceof String)) {
            throw new Error("Expected the field `layingBodyId` to be a primitive type in the JSON string but got " + data['layingBodyId']);
        }
        // ensure the json data is a string
        if (data['layingBodyName'] && !(typeof data['layingBodyName'] === 'string' || data['layingBodyName'] instanceof String)) {
            throw new Error("Expected the field `layingBodyName` to be a primitive type in the JSON string but got " + data['layingBodyName']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `procedure`
        if (data['procedure']) { // data not null
          Procedure.validateJSON(data['procedure']);
        }
        // ensure the json data is a string
        if (data['procedureName'] && !(typeof data['procedureName'] === 'string' || data['procedureName'] instanceof String)) {
            throw new Error("Expected the field `procedureName` to be a primitive type in the JSON string but got " + data['procedureName']);
        }
        // ensure the json data is a string
        if (data['procedureUri'] && !(typeof data['procedureUri'] === 'string' || data['procedureUri'] instanceof String)) {
            throw new Error("Expected the field `procedureUri` to be a primitive type in the JSON string but got " + data['procedureUri']);
        }
        // validate the optional field `statutoryInstrument`
        if (data['statutoryInstrument']) { // data not null
          LaidPaperSummary.validateJSON(data['statutoryInstrument']);
        }
        // ensure the json data is a string
        if (data['statutoryInstrumentPaperId'] && !(typeof data['statutoryInstrumentPaperId'] === 'string' || data['statutoryInstrumentPaperId'] instanceof String)) {
            throw new Error("Expected the field `statutoryInstrumentPaperId` to be a primitive type in the JSON string but got " + data['statutoryInstrumentPaperId']);
        }
        // ensure the json data is a string
        if (data['statutoryInstrumentPaperName'] && !(typeof data['statutoryInstrumentPaperName'] === 'string' || data['statutoryInstrumentPaperName'] instanceof String)) {
            throw new Error("Expected the field `statutoryInstrumentPaperName` to be a primitive type in the JSON string but got " + data['statutoryInstrumentPaperName']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * @member {Date} commonsLayingDate
 */
ProposedNegativeStatutoryInstrument.prototype['commonsLayingDate'] = undefined;

/**
 * @member {Date} commonsPublishedDate
 */
ProposedNegativeStatutoryInstrument.prototype['commonsPublishedDate'] = undefined;

/**
 * @member {Number} departmentId
 */
ProposedNegativeStatutoryInstrument.prototype['departmentId'] = undefined;

/**
 * @member {String} id
 */
ProposedNegativeStatutoryInstrument.prototype['id'] = undefined;

/**
 * @member {module:model/Department} layingBodyDepartment
 */
ProposedNegativeStatutoryInstrument.prototype['layingBodyDepartment'] = undefined;

/**
 * @member {String} layingBodyId
 */
ProposedNegativeStatutoryInstrument.prototype['layingBodyId'] = undefined;

/**
 * @member {String} layingBodyName
 */
ProposedNegativeStatutoryInstrument.prototype['layingBodyName'] = undefined;

/**
 * @member {String} link
 */
ProposedNegativeStatutoryInstrument.prototype['link'] = undefined;

/**
 * @member {Date} lordsLayingDate
 */
ProposedNegativeStatutoryInstrument.prototype['lordsLayingDate'] = undefined;

/**
 * @member {Date} lordsPublishedDate
 */
ProposedNegativeStatutoryInstrument.prototype['lordsPublishedDate'] = undefined;

/**
 * @member {String} name
 */
ProposedNegativeStatutoryInstrument.prototype['name'] = undefined;

/**
 * @member {module:model/Procedure} procedure
 */
ProposedNegativeStatutoryInstrument.prototype['procedure'] = undefined;

/**
 * @member {String} procedureName
 */
ProposedNegativeStatutoryInstrument.prototype['procedureName'] = undefined;

/**
 * @member {String} procedureUri
 */
ProposedNegativeStatutoryInstrument.prototype['procedureUri'] = undefined;

/**
 * @member {module:model/LaidPaperSummary} statutoryInstrument
 */
ProposedNegativeStatutoryInstrument.prototype['statutoryInstrument'] = undefined;

/**
 * @member {String} statutoryInstrumentPaperId
 */
ProposedNegativeStatutoryInstrument.prototype['statutoryInstrumentPaperId'] = undefined;

/**
 * @member {String} statutoryInstrumentPaperName
 */
ProposedNegativeStatutoryInstrument.prototype['statutoryInstrumentPaperName'] = undefined;

/**
 * @member {String} uri
 */
ProposedNegativeStatutoryInstrument.prototype['uri'] = undefined;






export default ProposedNegativeStatutoryInstrument;

