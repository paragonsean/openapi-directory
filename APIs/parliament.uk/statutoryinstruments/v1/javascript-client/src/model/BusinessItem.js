/**
 * Statutory Instruments API
 * An API exposing details of the various types of Statutory Instruments laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BusinessItemHouse from './BusinessItemHouse';
import LaidPaperType from './LaidPaperType';

/**
 * The BusinessItem model module.
 * @module model/BusinessItem
 * @version v1
 */
class BusinessItem {
    /**
     * Constructs a new <code>BusinessItem</code>.
     * @alias module:model/BusinessItem
     */
    constructor() { 
        
        BusinessItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BusinessItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BusinessItem} obj Optional instance to populate.
     * @return {module:model/BusinessItem} The populated <code>BusinessItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BusinessItem();

            if (data.hasOwnProperty('businessItemUri')) {
                obj['businessItemUri'] = ApiClient.convertToType(data['businessItemUri'], 'String');
            }
            if (data.hasOwnProperty('houseId')) {
                obj['houseId'] = ApiClient.convertToType(data['houseId'], 'String');
            }
            if (data.hasOwnProperty('houseName')) {
                obj['houseName'] = ApiClient.convertToType(data['houseName'], 'String');
            }
            if (data.hasOwnProperty('houseUri')) {
                obj['houseUri'] = ApiClient.convertToType(data['houseUri'], 'String');
            }
            if (data.hasOwnProperty('houses')) {
                obj['houses'] = ApiClient.convertToType(data['houses'], [BusinessItemHouse]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('itemDate')) {
                obj['itemDate'] = ApiClient.convertToType(data['itemDate'], 'Date');
            }
            if (data.hasOwnProperty('laidPaperType')) {
                obj['laidPaperType'] = LaidPaperType.constructFromObject(data['laidPaperType']);
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('procedureStepId')) {
                obj['procedureStepId'] = ApiClient.convertToType(data['procedureStepId'], 'String');
            }
            if (data.hasOwnProperty('procedureStepUri')) {
                obj['procedureStepUri'] = ApiClient.convertToType(data['procedureStepUri'], 'String');
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'Number');
            }
            if (data.hasOwnProperty('statutoryInstrumentId')) {
                obj['statutoryInstrumentId'] = ApiClient.convertToType(data['statutoryInstrumentId'], 'String');
            }
            if (data.hasOwnProperty('statutoryInstrumentUri')) {
                obj['statutoryInstrumentUri'] = ApiClient.convertToType(data['statutoryInstrumentUri'], 'String');
            }
            if (data.hasOwnProperty('stepName')) {
                obj['stepName'] = ApiClient.convertToType(data['stepName'], 'String');
            }
            if (data.hasOwnProperty('workpackageProcedureUri')) {
                obj['workpackageProcedureUri'] = ApiClient.convertToType(data['workpackageProcedureUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BusinessItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BusinessItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['businessItemUri'] && !(typeof data['businessItemUri'] === 'string' || data['businessItemUri'] instanceof String)) {
            throw new Error("Expected the field `businessItemUri` to be a primitive type in the JSON string but got " + data['businessItemUri']);
        }
        // ensure the json data is a string
        if (data['houseId'] && !(typeof data['houseId'] === 'string' || data['houseId'] instanceof String)) {
            throw new Error("Expected the field `houseId` to be a primitive type in the JSON string but got " + data['houseId']);
        }
        // ensure the json data is a string
        if (data['houseName'] && !(typeof data['houseName'] === 'string' || data['houseName'] instanceof String)) {
            throw new Error("Expected the field `houseName` to be a primitive type in the JSON string but got " + data['houseName']);
        }
        // ensure the json data is a string
        if (data['houseUri'] && !(typeof data['houseUri'] === 'string' || data['houseUri'] instanceof String)) {
            throw new Error("Expected the field `houseUri` to be a primitive type in the JSON string but got " + data['houseUri']);
        }
        if (data['houses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['houses'])) {
                throw new Error("Expected the field `houses` to be an array in the JSON data but got " + data['houses']);
            }
            // validate the optional field `houses` (array)
            for (const item of data['houses']) {
                BusinessItemHouse.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['procedureStepId'] && !(typeof data['procedureStepId'] === 'string' || data['procedureStepId'] instanceof String)) {
            throw new Error("Expected the field `procedureStepId` to be a primitive type in the JSON string but got " + data['procedureStepId']);
        }
        // ensure the json data is a string
        if (data['procedureStepUri'] && !(typeof data['procedureStepUri'] === 'string' || data['procedureStepUri'] instanceof String)) {
            throw new Error("Expected the field `procedureStepUri` to be a primitive type in the JSON string but got " + data['procedureStepUri']);
        }
        // ensure the json data is a string
        if (data['statutoryInstrumentId'] && !(typeof data['statutoryInstrumentId'] === 'string' || data['statutoryInstrumentId'] instanceof String)) {
            throw new Error("Expected the field `statutoryInstrumentId` to be a primitive type in the JSON string but got " + data['statutoryInstrumentId']);
        }
        // ensure the json data is a string
        if (data['statutoryInstrumentUri'] && !(typeof data['statutoryInstrumentUri'] === 'string' || data['statutoryInstrumentUri'] instanceof String)) {
            throw new Error("Expected the field `statutoryInstrumentUri` to be a primitive type in the JSON string but got " + data['statutoryInstrumentUri']);
        }
        // ensure the json data is a string
        if (data['stepName'] && !(typeof data['stepName'] === 'string' || data['stepName'] instanceof String)) {
            throw new Error("Expected the field `stepName` to be a primitive type in the JSON string but got " + data['stepName']);
        }
        // ensure the json data is a string
        if (data['workpackageProcedureUri'] && !(typeof data['workpackageProcedureUri'] === 'string' || data['workpackageProcedureUri'] instanceof String)) {
            throw new Error("Expected the field `workpackageProcedureUri` to be a primitive type in the JSON string but got " + data['workpackageProcedureUri']);
        }

        return true;
    }


}



/**
 * @member {String} businessItemUri
 */
BusinessItem.prototype['businessItemUri'] = undefined;

/**
 * @member {String} houseId
 */
BusinessItem.prototype['houseId'] = undefined;

/**
 * @member {String} houseName
 */
BusinessItem.prototype['houseName'] = undefined;

/**
 * @member {String} houseUri
 */
BusinessItem.prototype['houseUri'] = undefined;

/**
 * @member {Array.<module:model/BusinessItemHouse>} houses
 */
BusinessItem.prototype['houses'] = undefined;

/**
 * @member {String} id
 */
BusinessItem.prototype['id'] = undefined;

/**
 * @member {Date} itemDate
 */
BusinessItem.prototype['itemDate'] = undefined;

/**
 * @member {module:model/LaidPaperType} laidPaperType
 */
BusinessItem.prototype['laidPaperType'] = undefined;

/**
 * @member {String} link
 */
BusinessItem.prototype['link'] = undefined;

/**
 * @member {String} procedureStepId
 */
BusinessItem.prototype['procedureStepId'] = undefined;

/**
 * @member {String} procedureStepUri
 */
BusinessItem.prototype['procedureStepUri'] = undefined;

/**
 * @member {Number} sequence
 */
BusinessItem.prototype['sequence'] = undefined;

/**
 * @member {String} statutoryInstrumentId
 */
BusinessItem.prototype['statutoryInstrumentId'] = undefined;

/**
 * @member {String} statutoryInstrumentUri
 */
BusinessItem.prototype['statutoryInstrumentUri'] = undefined;

/**
 * @member {String} stepName
 */
BusinessItem.prototype['stepName'] = undefined;

/**
 * @member {String} workpackageProcedureUri
 */
BusinessItem.prototype['workpackageProcedureUri'] = undefined;






export default BusinessItem;

