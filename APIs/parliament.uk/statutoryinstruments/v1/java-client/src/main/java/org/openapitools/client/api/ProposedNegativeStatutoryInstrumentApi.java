/*
 * Statutory Instruments API
 * An API exposing details of the various types of Statutory Instruments laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BusinessItemResourceCollection;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.ProposedNegativeStatutoryInstrumentResource;
import org.openapitools.client.model.ProposedNegativeStatutoryInstrumentResourceCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProposedNegativeStatutoryInstrumentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProposedNegativeStatutoryInstrumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProposedNegativeStatutoryInstrumentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBusinessItemsByProposedNegativeStatutoryInstrumentId
     * @param id Business items belonging to proposed negative statutory instrument with the ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBusinessItemsByProposedNegativeStatutoryInstrumentIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/ProposedNegativeStatutoryInstrument/{id}/BusinessItems"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBusinessItemsByProposedNegativeStatutoryInstrumentIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBusinessItemsByProposedNegativeStatutoryInstrumentId(Async)");
        }

        return getBusinessItemsByProposedNegativeStatutoryInstrumentIdCall(id, _callback);

    }

    /**
     * Returns business items belonging to a proposed negative statutory instrument.
     * 
     * @param id Business items belonging to proposed negative statutory instrument with the ID specified (required)
     * @return BusinessItemResourceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public BusinessItemResourceCollection getBusinessItemsByProposedNegativeStatutoryInstrumentId(String id) throws ApiException {
        ApiResponse<BusinessItemResourceCollection> localVarResp = getBusinessItemsByProposedNegativeStatutoryInstrumentIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Returns business items belonging to a proposed negative statutory instrument.
     * 
     * @param id Business items belonging to proposed negative statutory instrument with the ID specified (required)
     * @return ApiResponse&lt;BusinessItemResourceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessItemResourceCollection> getBusinessItemsByProposedNegativeStatutoryInstrumentIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getBusinessItemsByProposedNegativeStatutoryInstrumentIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BusinessItemResourceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns business items belonging to a proposed negative statutory instrument. (asynchronously)
     * 
     * @param id Business items belonging to proposed negative statutory instrument with the ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBusinessItemsByProposedNegativeStatutoryInstrumentIdAsync(String id, final ApiCallback<BusinessItemResourceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBusinessItemsByProposedNegativeStatutoryInstrumentIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BusinessItemResourceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProposedNegativeStatutoryInstrumentById
     * @param id Proposed negative statutory instrument with the ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProposedNegativeStatutoryInstrumentByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/ProposedNegativeStatutoryInstrument/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProposedNegativeStatutoryInstrumentByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProposedNegativeStatutoryInstrumentById(Async)");
        }

        return getProposedNegativeStatutoryInstrumentByIdCall(id, _callback);

    }

    /**
     * Returns proposed negative statutory instrument by ID.
     * 
     * @param id Proposed negative statutory instrument with the ID specified (required)
     * @return ProposedNegativeStatutoryInstrumentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProposedNegativeStatutoryInstrumentResource getProposedNegativeStatutoryInstrumentById(String id) throws ApiException {
        ApiResponse<ProposedNegativeStatutoryInstrumentResource> localVarResp = getProposedNegativeStatutoryInstrumentByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Returns proposed negative statutory instrument by ID.
     * 
     * @param id Proposed negative statutory instrument with the ID specified (required)
     * @return ApiResponse&lt;ProposedNegativeStatutoryInstrumentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProposedNegativeStatutoryInstrumentResource> getProposedNegativeStatutoryInstrumentByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getProposedNegativeStatutoryInstrumentByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ProposedNegativeStatutoryInstrumentResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns proposed negative statutory instrument by ID. (asynchronously)
     * 
     * @param id Proposed negative statutory instrument with the ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProposedNegativeStatutoryInstrumentByIdAsync(String id, final ApiCallback<ProposedNegativeStatutoryInstrumentResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProposedNegativeStatutoryInstrumentByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ProposedNegativeStatutoryInstrumentResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProposedNegativeStatutoryInstruments
     * @param name Proposed negative statutory instruments with the name provided (optional)
     * @param recommendedForProcedureChange Proposed negative statutory instruments recommended for procedure change (optional)
     * @param departmentId Proposed negative statutory instruments with the department ID specified (optional)
     * @param layingBodyId Proposed negative statutory instruments with the laying body ID specified (optional)
     * @param skip The number of records to skip from the first, default is 0 (optional)
     * @param take The number of records to return, default is 20 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProposedNegativeStatutoryInstrumentsCall(String name, Boolean recommendedForProcedureChange, Integer departmentId, String layingBodyId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/ProposedNegativeStatutoryInstrument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        if (recommendedForProcedureChange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RecommendedForProcedureChange", recommendedForProcedureChange));
        }

        if (departmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DepartmentId", departmentId));
        }

        if (layingBodyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LayingBodyId", layingBodyId));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Take", take));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProposedNegativeStatutoryInstrumentsValidateBeforeCall(String name, Boolean recommendedForProcedureChange, Integer departmentId, String layingBodyId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        return getProposedNegativeStatutoryInstrumentsCall(name, recommendedForProcedureChange, departmentId, layingBodyId, skip, take, _callback);

    }

    /**
     * Returns a list of proposed negative statutory instruments.
     * 
     * @param name Proposed negative statutory instruments with the name provided (optional)
     * @param recommendedForProcedureChange Proposed negative statutory instruments recommended for procedure change (optional)
     * @param departmentId Proposed negative statutory instruments with the department ID specified (optional)
     * @param layingBodyId Proposed negative statutory instruments with the laying body ID specified (optional)
     * @param skip The number of records to skip from the first, default is 0 (optional)
     * @param take The number of records to return, default is 20 (optional)
     * @return ProposedNegativeStatutoryInstrumentResourceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ProposedNegativeStatutoryInstrumentResourceCollection getProposedNegativeStatutoryInstruments(String name, Boolean recommendedForProcedureChange, Integer departmentId, String layingBodyId, Integer skip, Integer take) throws ApiException {
        ApiResponse<ProposedNegativeStatutoryInstrumentResourceCollection> localVarResp = getProposedNegativeStatutoryInstrumentsWithHttpInfo(name, recommendedForProcedureChange, departmentId, layingBodyId, skip, take);
        return localVarResp.getData();
    }

    /**
     * Returns a list of proposed negative statutory instruments.
     * 
     * @param name Proposed negative statutory instruments with the name provided (optional)
     * @param recommendedForProcedureChange Proposed negative statutory instruments recommended for procedure change (optional)
     * @param departmentId Proposed negative statutory instruments with the department ID specified (optional)
     * @param layingBodyId Proposed negative statutory instruments with the laying body ID specified (optional)
     * @param skip The number of records to skip from the first, default is 0 (optional)
     * @param take The number of records to return, default is 20 (optional)
     * @return ApiResponse&lt;ProposedNegativeStatutoryInstrumentResourceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProposedNegativeStatutoryInstrumentResourceCollection> getProposedNegativeStatutoryInstrumentsWithHttpInfo(String name, Boolean recommendedForProcedureChange, Integer departmentId, String layingBodyId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = getProposedNegativeStatutoryInstrumentsValidateBeforeCall(name, recommendedForProcedureChange, departmentId, layingBodyId, skip, take, null);
        Type localVarReturnType = new TypeToken<ProposedNegativeStatutoryInstrumentResourceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of proposed negative statutory instruments. (asynchronously)
     * 
     * @param name Proposed negative statutory instruments with the name provided (optional)
     * @param recommendedForProcedureChange Proposed negative statutory instruments recommended for procedure change (optional)
     * @param departmentId Proposed negative statutory instruments with the department ID specified (optional)
     * @param layingBodyId Proposed negative statutory instruments with the laying body ID specified (optional)
     * @param skip The number of records to skip from the first, default is 0 (optional)
     * @param take The number of records to return, default is 20 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProposedNegativeStatutoryInstrumentsAsync(String name, Boolean recommendedForProcedureChange, Integer departmentId, String layingBodyId, Integer skip, Integer take, final ApiCallback<ProposedNegativeStatutoryInstrumentResourceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProposedNegativeStatutoryInstrumentsValidateBeforeCall(name, recommendedForProcedureChange, departmentId, layingBodyId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<ProposedNegativeStatutoryInstrumentResourceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
