/*
 * Statutory Instruments API
 * An API exposing details of the various types of Statutory Instruments laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Department;
import org.openapitools.client.model.LaidPaperSummary;
import org.openapitools.client.model.Procedure;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StatutoryInstrument
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:32.816140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StatutoryInstrument {
  public static final String SERIALIZED_NAME_COMMONS_LAYING_DATE = "commonsLayingDate";
  @SerializedName(SERIALIZED_NAME_COMMONS_LAYING_DATE)
  private OffsetDateTime commonsLayingDate;

  public static final String SERIALIZED_NAME_COMMONS_PUBLISHED_DATE = "commonsPublishedDate";
  @SerializedName(SERIALIZED_NAME_COMMONS_PUBLISHED_DATE)
  private OffsetDateTime commonsPublishedDate;

  public static final String SERIALIZED_NAME_DEPARTMENT_ID = "departmentId";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_ID)
  private Integer departmentId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAYING_BODY_DEPARTMENT = "layingBodyDepartment";
  @SerializedName(SERIALIZED_NAME_LAYING_BODY_DEPARTMENT)
  private Department layingBodyDepartment;

  public static final String SERIALIZED_NAME_LAYING_BODY_ID = "layingBodyId";
  @SerializedName(SERIALIZED_NAME_LAYING_BODY_ID)
  private String layingBodyId;

  public static final String SERIALIZED_NAME_LAYING_BODY_NAME = "layingBodyName";
  @SerializedName(SERIALIZED_NAME_LAYING_BODY_NAME)
  private String layingBodyName;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LORDS_LAYING_DATE = "lordsLayingDate";
  @SerializedName(SERIALIZED_NAME_LORDS_LAYING_DATE)
  private OffsetDateTime lordsLayingDate;

  public static final String SERIALIZED_NAME_LORDS_PUBLISHED_DATE = "lordsPublishedDate";
  @SerializedName(SERIALIZED_NAME_LORDS_PUBLISHED_DATE)
  private OffsetDateTime lordsPublishedDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAPER_COMING_INTO_FORCE_DATE = "paperComingIntoForceDate";
  @SerializedName(SERIALIZED_NAME_PAPER_COMING_INTO_FORCE_DATE)
  private OffsetDateTime paperComingIntoForceDate;

  public static final String SERIALIZED_NAME_PAPER_COMING_INTO_FORCE_NOTE = "paperComingIntoForceNote";
  @SerializedName(SERIALIZED_NAME_PAPER_COMING_INTO_FORCE_NOTE)
  private String paperComingIntoForceNote;

  public static final String SERIALIZED_NAME_PAPER_MADE_DATE = "paperMadeDate";
  @SerializedName(SERIALIZED_NAME_PAPER_MADE_DATE)
  private OffsetDateTime paperMadeDate;

  public static final String SERIALIZED_NAME_PAPER_NUMBER = "paperNumber";
  @SerializedName(SERIALIZED_NAME_PAPER_NUMBER)
  private Integer paperNumber;

  public static final String SERIALIZED_NAME_PAPER_PREFIX = "paperPrefix";
  @SerializedName(SERIALIZED_NAME_PAPER_PREFIX)
  private String paperPrefix;

  public static final String SERIALIZED_NAME_PAPER_YEAR = "paperYear";
  @SerializedName(SERIALIZED_NAME_PAPER_YEAR)
  private String paperYear;

  public static final String SERIALIZED_NAME_PROCEDURE = "procedure";
  @SerializedName(SERIALIZED_NAME_PROCEDURE)
  private Procedure procedure;

  public static final String SERIALIZED_NAME_PROCEDURE_NAME = "procedureName";
  @SerializedName(SERIALIZED_NAME_PROCEDURE_NAME)
  private String procedureName;

  public static final String SERIALIZED_NAME_PROCEDURE_URI = "procedureUri";
  @SerializedName(SERIALIZED_NAME_PROCEDURE_URI)
  private String procedureUri;

  public static final String SERIALIZED_NAME_PROPOSED_NEGATIVE_STATUTORY_INSTRUMENT = "proposedNegativeStatutoryInstrument";
  @SerializedName(SERIALIZED_NAME_PROPOSED_NEGATIVE_STATUTORY_INSTRUMENT)
  private LaidPaperSummary proposedNegativeStatutoryInstrument;

  public static final String SERIALIZED_NAME_PROPOSED_NEGATIVE_STATUTORY_INSTRUMENT_PAPER_ID = "proposedNegativeStatutoryInstrumentPaperId";
  @SerializedName(SERIALIZED_NAME_PROPOSED_NEGATIVE_STATUTORY_INSTRUMENT_PAPER_ID)
  private String proposedNegativeStatutoryInstrumentPaperId;

  public static final String SERIALIZED_NAME_PROPOSED_NEGATIVE_STATUTORY_INSTRUMENT_PAPER_NAME = "proposedNegativeStatutoryInstrumentPaperName";
  @SerializedName(SERIALIZED_NAME_PROPOSED_NEGATIVE_STATUTORY_INSTRUMENT_PAPER_NAME)
  private String proposedNegativeStatutoryInstrumentPaperName;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public StatutoryInstrument() {
  }

  public StatutoryInstrument commonsLayingDate(OffsetDateTime commonsLayingDate) {
    this.commonsLayingDate = commonsLayingDate;
    return this;
  }

  /**
   * Get commonsLayingDate
   * @return commonsLayingDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCommonsLayingDate() {
    return commonsLayingDate;
  }

  public void setCommonsLayingDate(OffsetDateTime commonsLayingDate) {
    this.commonsLayingDate = commonsLayingDate;
  }


  public StatutoryInstrument commonsPublishedDate(OffsetDateTime commonsPublishedDate) {
    this.commonsPublishedDate = commonsPublishedDate;
    return this;
  }

  /**
   * Get commonsPublishedDate
   * @return commonsPublishedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCommonsPublishedDate() {
    return commonsPublishedDate;
  }

  public void setCommonsPublishedDate(OffsetDateTime commonsPublishedDate) {
    this.commonsPublishedDate = commonsPublishedDate;
  }


  public StatutoryInstrument departmentId(Integer departmentId) {
    this.departmentId = departmentId;
    return this;
  }

  /**
   * Get departmentId
   * @return departmentId
   */
  @javax.annotation.Nullable
  public Integer getDepartmentId() {
    return departmentId;
  }

  public void setDepartmentId(Integer departmentId) {
    this.departmentId = departmentId;
  }


  public StatutoryInstrument id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public StatutoryInstrument layingBodyDepartment(Department layingBodyDepartment) {
    this.layingBodyDepartment = layingBodyDepartment;
    return this;
  }

  /**
   * Get layingBodyDepartment
   * @return layingBodyDepartment
   */
  @javax.annotation.Nullable
  public Department getLayingBodyDepartment() {
    return layingBodyDepartment;
  }

  public void setLayingBodyDepartment(Department layingBodyDepartment) {
    this.layingBodyDepartment = layingBodyDepartment;
  }


  public StatutoryInstrument layingBodyId(String layingBodyId) {
    this.layingBodyId = layingBodyId;
    return this;
  }

  /**
   * Get layingBodyId
   * @return layingBodyId
   */
  @javax.annotation.Nullable
  public String getLayingBodyId() {
    return layingBodyId;
  }

  public void setLayingBodyId(String layingBodyId) {
    this.layingBodyId = layingBodyId;
  }


  public StatutoryInstrument layingBodyName(String layingBodyName) {
    this.layingBodyName = layingBodyName;
    return this;
  }

  /**
   * Get layingBodyName
   * @return layingBodyName
   */
  @javax.annotation.Nullable
  public String getLayingBodyName() {
    return layingBodyName;
  }

  public void setLayingBodyName(String layingBodyName) {
    this.layingBodyName = layingBodyName;
  }


  public StatutoryInstrument link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public StatutoryInstrument lordsLayingDate(OffsetDateTime lordsLayingDate) {
    this.lordsLayingDate = lordsLayingDate;
    return this;
  }

  /**
   * Get lordsLayingDate
   * @return lordsLayingDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLordsLayingDate() {
    return lordsLayingDate;
  }

  public void setLordsLayingDate(OffsetDateTime lordsLayingDate) {
    this.lordsLayingDate = lordsLayingDate;
  }


  public StatutoryInstrument lordsPublishedDate(OffsetDateTime lordsPublishedDate) {
    this.lordsPublishedDate = lordsPublishedDate;
    return this;
  }

  /**
   * Get lordsPublishedDate
   * @return lordsPublishedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLordsPublishedDate() {
    return lordsPublishedDate;
  }

  public void setLordsPublishedDate(OffsetDateTime lordsPublishedDate) {
    this.lordsPublishedDate = lordsPublishedDate;
  }


  public StatutoryInstrument name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StatutoryInstrument paperComingIntoForceDate(OffsetDateTime paperComingIntoForceDate) {
    this.paperComingIntoForceDate = paperComingIntoForceDate;
    return this;
  }

  /**
   * Get paperComingIntoForceDate
   * @return paperComingIntoForceDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPaperComingIntoForceDate() {
    return paperComingIntoForceDate;
  }

  public void setPaperComingIntoForceDate(OffsetDateTime paperComingIntoForceDate) {
    this.paperComingIntoForceDate = paperComingIntoForceDate;
  }


  public StatutoryInstrument paperComingIntoForceNote(String paperComingIntoForceNote) {
    this.paperComingIntoForceNote = paperComingIntoForceNote;
    return this;
  }

  /**
   * Get paperComingIntoForceNote
   * @return paperComingIntoForceNote
   */
  @javax.annotation.Nullable
  public String getPaperComingIntoForceNote() {
    return paperComingIntoForceNote;
  }

  public void setPaperComingIntoForceNote(String paperComingIntoForceNote) {
    this.paperComingIntoForceNote = paperComingIntoForceNote;
  }


  public StatutoryInstrument paperMadeDate(OffsetDateTime paperMadeDate) {
    this.paperMadeDate = paperMadeDate;
    return this;
  }

  /**
   * Get paperMadeDate
   * @return paperMadeDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPaperMadeDate() {
    return paperMadeDate;
  }

  public void setPaperMadeDate(OffsetDateTime paperMadeDate) {
    this.paperMadeDate = paperMadeDate;
  }


  public StatutoryInstrument paperNumber(Integer paperNumber) {
    this.paperNumber = paperNumber;
    return this;
  }

  /**
   * Get paperNumber
   * @return paperNumber
   */
  @javax.annotation.Nullable
  public Integer getPaperNumber() {
    return paperNumber;
  }

  public void setPaperNumber(Integer paperNumber) {
    this.paperNumber = paperNumber;
  }


  public StatutoryInstrument paperPrefix(String paperPrefix) {
    this.paperPrefix = paperPrefix;
    return this;
  }

  /**
   * Get paperPrefix
   * @return paperPrefix
   */
  @javax.annotation.Nullable
  public String getPaperPrefix() {
    return paperPrefix;
  }

  public void setPaperPrefix(String paperPrefix) {
    this.paperPrefix = paperPrefix;
  }


  public StatutoryInstrument paperYear(String paperYear) {
    this.paperYear = paperYear;
    return this;
  }

  /**
   * Get paperYear
   * @return paperYear
   */
  @javax.annotation.Nullable
  public String getPaperYear() {
    return paperYear;
  }

  public void setPaperYear(String paperYear) {
    this.paperYear = paperYear;
  }


  public StatutoryInstrument procedure(Procedure procedure) {
    this.procedure = procedure;
    return this;
  }

  /**
   * Get procedure
   * @return procedure
   */
  @javax.annotation.Nullable
  public Procedure getProcedure() {
    return procedure;
  }

  public void setProcedure(Procedure procedure) {
    this.procedure = procedure;
  }


  public StatutoryInstrument procedureName(String procedureName) {
    this.procedureName = procedureName;
    return this;
  }

  /**
   * Get procedureName
   * @return procedureName
   */
  @javax.annotation.Nullable
  public String getProcedureName() {
    return procedureName;
  }

  public void setProcedureName(String procedureName) {
    this.procedureName = procedureName;
  }


  public StatutoryInstrument procedureUri(String procedureUri) {
    this.procedureUri = procedureUri;
    return this;
  }

  /**
   * Get procedureUri
   * @return procedureUri
   */
  @javax.annotation.Nullable
  public String getProcedureUri() {
    return procedureUri;
  }

  public void setProcedureUri(String procedureUri) {
    this.procedureUri = procedureUri;
  }


  public StatutoryInstrument proposedNegativeStatutoryInstrument(LaidPaperSummary proposedNegativeStatutoryInstrument) {
    this.proposedNegativeStatutoryInstrument = proposedNegativeStatutoryInstrument;
    return this;
  }

  /**
   * Get proposedNegativeStatutoryInstrument
   * @return proposedNegativeStatutoryInstrument
   */
  @javax.annotation.Nullable
  public LaidPaperSummary getProposedNegativeStatutoryInstrument() {
    return proposedNegativeStatutoryInstrument;
  }

  public void setProposedNegativeStatutoryInstrument(LaidPaperSummary proposedNegativeStatutoryInstrument) {
    this.proposedNegativeStatutoryInstrument = proposedNegativeStatutoryInstrument;
  }


  public StatutoryInstrument proposedNegativeStatutoryInstrumentPaperId(String proposedNegativeStatutoryInstrumentPaperId) {
    this.proposedNegativeStatutoryInstrumentPaperId = proposedNegativeStatutoryInstrumentPaperId;
    return this;
  }

  /**
   * Get proposedNegativeStatutoryInstrumentPaperId
   * @return proposedNegativeStatutoryInstrumentPaperId
   */
  @javax.annotation.Nullable
  public String getProposedNegativeStatutoryInstrumentPaperId() {
    return proposedNegativeStatutoryInstrumentPaperId;
  }

  public void setProposedNegativeStatutoryInstrumentPaperId(String proposedNegativeStatutoryInstrumentPaperId) {
    this.proposedNegativeStatutoryInstrumentPaperId = proposedNegativeStatutoryInstrumentPaperId;
  }


  public StatutoryInstrument proposedNegativeStatutoryInstrumentPaperName(String proposedNegativeStatutoryInstrumentPaperName) {
    this.proposedNegativeStatutoryInstrumentPaperName = proposedNegativeStatutoryInstrumentPaperName;
    return this;
  }

  /**
   * Get proposedNegativeStatutoryInstrumentPaperName
   * @return proposedNegativeStatutoryInstrumentPaperName
   */
  @javax.annotation.Nullable
  public String getProposedNegativeStatutoryInstrumentPaperName() {
    return proposedNegativeStatutoryInstrumentPaperName;
  }

  public void setProposedNegativeStatutoryInstrumentPaperName(String proposedNegativeStatutoryInstrumentPaperName) {
    this.proposedNegativeStatutoryInstrumentPaperName = proposedNegativeStatutoryInstrumentPaperName;
  }


  public StatutoryInstrument uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Get uri
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatutoryInstrument statutoryInstrument = (StatutoryInstrument) o;
    return Objects.equals(this.commonsLayingDate, statutoryInstrument.commonsLayingDate) &&
        Objects.equals(this.commonsPublishedDate, statutoryInstrument.commonsPublishedDate) &&
        Objects.equals(this.departmentId, statutoryInstrument.departmentId) &&
        Objects.equals(this.id, statutoryInstrument.id) &&
        Objects.equals(this.layingBodyDepartment, statutoryInstrument.layingBodyDepartment) &&
        Objects.equals(this.layingBodyId, statutoryInstrument.layingBodyId) &&
        Objects.equals(this.layingBodyName, statutoryInstrument.layingBodyName) &&
        Objects.equals(this.link, statutoryInstrument.link) &&
        Objects.equals(this.lordsLayingDate, statutoryInstrument.lordsLayingDate) &&
        Objects.equals(this.lordsPublishedDate, statutoryInstrument.lordsPublishedDate) &&
        Objects.equals(this.name, statutoryInstrument.name) &&
        Objects.equals(this.paperComingIntoForceDate, statutoryInstrument.paperComingIntoForceDate) &&
        Objects.equals(this.paperComingIntoForceNote, statutoryInstrument.paperComingIntoForceNote) &&
        Objects.equals(this.paperMadeDate, statutoryInstrument.paperMadeDate) &&
        Objects.equals(this.paperNumber, statutoryInstrument.paperNumber) &&
        Objects.equals(this.paperPrefix, statutoryInstrument.paperPrefix) &&
        Objects.equals(this.paperYear, statutoryInstrument.paperYear) &&
        Objects.equals(this.procedure, statutoryInstrument.procedure) &&
        Objects.equals(this.procedureName, statutoryInstrument.procedureName) &&
        Objects.equals(this.procedureUri, statutoryInstrument.procedureUri) &&
        Objects.equals(this.proposedNegativeStatutoryInstrument, statutoryInstrument.proposedNegativeStatutoryInstrument) &&
        Objects.equals(this.proposedNegativeStatutoryInstrumentPaperId, statutoryInstrument.proposedNegativeStatutoryInstrumentPaperId) &&
        Objects.equals(this.proposedNegativeStatutoryInstrumentPaperName, statutoryInstrument.proposedNegativeStatutoryInstrumentPaperName) &&
        Objects.equals(this.uri, statutoryInstrument.uri);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonsLayingDate, commonsPublishedDate, departmentId, id, layingBodyDepartment, layingBodyId, layingBodyName, link, lordsLayingDate, lordsPublishedDate, name, paperComingIntoForceDate, paperComingIntoForceNote, paperMadeDate, paperNumber, paperPrefix, paperYear, procedure, procedureName, procedureUri, proposedNegativeStatutoryInstrument, proposedNegativeStatutoryInstrumentPaperId, proposedNegativeStatutoryInstrumentPaperName, uri);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatutoryInstrument {\n");
    sb.append("    commonsLayingDate: ").append(toIndentedString(commonsLayingDate)).append("\n");
    sb.append("    commonsPublishedDate: ").append(toIndentedString(commonsPublishedDate)).append("\n");
    sb.append("    departmentId: ").append(toIndentedString(departmentId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    layingBodyDepartment: ").append(toIndentedString(layingBodyDepartment)).append("\n");
    sb.append("    layingBodyId: ").append(toIndentedString(layingBodyId)).append("\n");
    sb.append("    layingBodyName: ").append(toIndentedString(layingBodyName)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    lordsLayingDate: ").append(toIndentedString(lordsLayingDate)).append("\n");
    sb.append("    lordsPublishedDate: ").append(toIndentedString(lordsPublishedDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    paperComingIntoForceDate: ").append(toIndentedString(paperComingIntoForceDate)).append("\n");
    sb.append("    paperComingIntoForceNote: ").append(toIndentedString(paperComingIntoForceNote)).append("\n");
    sb.append("    paperMadeDate: ").append(toIndentedString(paperMadeDate)).append("\n");
    sb.append("    paperNumber: ").append(toIndentedString(paperNumber)).append("\n");
    sb.append("    paperPrefix: ").append(toIndentedString(paperPrefix)).append("\n");
    sb.append("    paperYear: ").append(toIndentedString(paperYear)).append("\n");
    sb.append("    procedure: ").append(toIndentedString(procedure)).append("\n");
    sb.append("    procedureName: ").append(toIndentedString(procedureName)).append("\n");
    sb.append("    procedureUri: ").append(toIndentedString(procedureUri)).append("\n");
    sb.append("    proposedNegativeStatutoryInstrument: ").append(toIndentedString(proposedNegativeStatutoryInstrument)).append("\n");
    sb.append("    proposedNegativeStatutoryInstrumentPaperId: ").append(toIndentedString(proposedNegativeStatutoryInstrumentPaperId)).append("\n");
    sb.append("    proposedNegativeStatutoryInstrumentPaperName: ").append(toIndentedString(proposedNegativeStatutoryInstrumentPaperName)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commonsLayingDate");
    openapiFields.add("commonsPublishedDate");
    openapiFields.add("departmentId");
    openapiFields.add("id");
    openapiFields.add("layingBodyDepartment");
    openapiFields.add("layingBodyId");
    openapiFields.add("layingBodyName");
    openapiFields.add("link");
    openapiFields.add("lordsLayingDate");
    openapiFields.add("lordsPublishedDate");
    openapiFields.add("name");
    openapiFields.add("paperComingIntoForceDate");
    openapiFields.add("paperComingIntoForceNote");
    openapiFields.add("paperMadeDate");
    openapiFields.add("paperNumber");
    openapiFields.add("paperPrefix");
    openapiFields.add("paperYear");
    openapiFields.add("procedure");
    openapiFields.add("procedureName");
    openapiFields.add("procedureUri");
    openapiFields.add("proposedNegativeStatutoryInstrument");
    openapiFields.add("proposedNegativeStatutoryInstrumentPaperId");
    openapiFields.add("proposedNegativeStatutoryInstrumentPaperName");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StatutoryInstrument
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StatutoryInstrument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatutoryInstrument is not found in the empty JSON string", StatutoryInstrument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StatutoryInstrument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatutoryInstrument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `layingBodyDepartment`
      if (jsonObj.get("layingBodyDepartment") != null && !jsonObj.get("layingBodyDepartment").isJsonNull()) {
        Department.validateJsonElement(jsonObj.get("layingBodyDepartment"));
      }
      if ((jsonObj.get("layingBodyId") != null && !jsonObj.get("layingBodyId").isJsonNull()) && !jsonObj.get("layingBodyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layingBodyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layingBodyId").toString()));
      }
      if ((jsonObj.get("layingBodyName") != null && !jsonObj.get("layingBodyName").isJsonNull()) && !jsonObj.get("layingBodyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layingBodyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layingBodyName").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("paperComingIntoForceNote") != null && !jsonObj.get("paperComingIntoForceNote").isJsonNull()) && !jsonObj.get("paperComingIntoForceNote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paperComingIntoForceNote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paperComingIntoForceNote").toString()));
      }
      if ((jsonObj.get("paperPrefix") != null && !jsonObj.get("paperPrefix").isJsonNull()) && !jsonObj.get("paperPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paperPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paperPrefix").toString()));
      }
      if ((jsonObj.get("paperYear") != null && !jsonObj.get("paperYear").isJsonNull()) && !jsonObj.get("paperYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paperYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paperYear").toString()));
      }
      // validate the optional field `procedure`
      if (jsonObj.get("procedure") != null && !jsonObj.get("procedure").isJsonNull()) {
        Procedure.validateJsonElement(jsonObj.get("procedure"));
      }
      if ((jsonObj.get("procedureName") != null && !jsonObj.get("procedureName").isJsonNull()) && !jsonObj.get("procedureName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `procedureName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("procedureName").toString()));
      }
      if ((jsonObj.get("procedureUri") != null && !jsonObj.get("procedureUri").isJsonNull()) && !jsonObj.get("procedureUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `procedureUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("procedureUri").toString()));
      }
      // validate the optional field `proposedNegativeStatutoryInstrument`
      if (jsonObj.get("proposedNegativeStatutoryInstrument") != null && !jsonObj.get("proposedNegativeStatutoryInstrument").isJsonNull()) {
        LaidPaperSummary.validateJsonElement(jsonObj.get("proposedNegativeStatutoryInstrument"));
      }
      if ((jsonObj.get("proposedNegativeStatutoryInstrumentPaperId") != null && !jsonObj.get("proposedNegativeStatutoryInstrumentPaperId").isJsonNull()) && !jsonObj.get("proposedNegativeStatutoryInstrumentPaperId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proposedNegativeStatutoryInstrumentPaperId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proposedNegativeStatutoryInstrumentPaperId").toString()));
      }
      if ((jsonObj.get("proposedNegativeStatutoryInstrumentPaperName") != null && !jsonObj.get("proposedNegativeStatutoryInstrumentPaperName").isJsonNull()) && !jsonObj.get("proposedNegativeStatutoryInstrumentPaperName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proposedNegativeStatutoryInstrumentPaperName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proposedNegativeStatutoryInstrumentPaperName").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatutoryInstrument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatutoryInstrument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatutoryInstrument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatutoryInstrument.class));

       return (TypeAdapter<T>) new TypeAdapter<StatutoryInstrument>() {
           @Override
           public void write(JsonWriter out, StatutoryInstrument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatutoryInstrument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StatutoryInstrument given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StatutoryInstrument
   * @throws IOException if the JSON string is invalid with respect to StatutoryInstrument
   */
  public static StatutoryInstrument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatutoryInstrument.class);
  }

  /**
   * Convert an instance of StatutoryInstrument to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

