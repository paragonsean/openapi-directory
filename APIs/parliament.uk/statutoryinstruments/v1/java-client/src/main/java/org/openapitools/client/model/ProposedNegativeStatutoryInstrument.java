/*
 * Statutory Instruments API
 * An API exposing details of the various types of Statutory Instruments laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Department;
import org.openapitools.client.model.LaidPaperSummary;
import org.openapitools.client.model.Procedure;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProposedNegativeStatutoryInstrument
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:32.816140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProposedNegativeStatutoryInstrument {
  public static final String SERIALIZED_NAME_COMMONS_LAYING_DATE = "commonsLayingDate";
  @SerializedName(SERIALIZED_NAME_COMMONS_LAYING_DATE)
  private OffsetDateTime commonsLayingDate;

  public static final String SERIALIZED_NAME_COMMONS_PUBLISHED_DATE = "commonsPublishedDate";
  @SerializedName(SERIALIZED_NAME_COMMONS_PUBLISHED_DATE)
  private OffsetDateTime commonsPublishedDate;

  public static final String SERIALIZED_NAME_DEPARTMENT_ID = "departmentId";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_ID)
  private Integer departmentId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAYING_BODY_DEPARTMENT = "layingBodyDepartment";
  @SerializedName(SERIALIZED_NAME_LAYING_BODY_DEPARTMENT)
  private Department layingBodyDepartment;

  public static final String SERIALIZED_NAME_LAYING_BODY_ID = "layingBodyId";
  @SerializedName(SERIALIZED_NAME_LAYING_BODY_ID)
  private String layingBodyId;

  public static final String SERIALIZED_NAME_LAYING_BODY_NAME = "layingBodyName";
  @SerializedName(SERIALIZED_NAME_LAYING_BODY_NAME)
  private String layingBodyName;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LORDS_LAYING_DATE = "lordsLayingDate";
  @SerializedName(SERIALIZED_NAME_LORDS_LAYING_DATE)
  private OffsetDateTime lordsLayingDate;

  public static final String SERIALIZED_NAME_LORDS_PUBLISHED_DATE = "lordsPublishedDate";
  @SerializedName(SERIALIZED_NAME_LORDS_PUBLISHED_DATE)
  private OffsetDateTime lordsPublishedDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROCEDURE = "procedure";
  @SerializedName(SERIALIZED_NAME_PROCEDURE)
  private Procedure procedure;

  public static final String SERIALIZED_NAME_PROCEDURE_NAME = "procedureName";
  @SerializedName(SERIALIZED_NAME_PROCEDURE_NAME)
  private String procedureName;

  public static final String SERIALIZED_NAME_PROCEDURE_URI = "procedureUri";
  @SerializedName(SERIALIZED_NAME_PROCEDURE_URI)
  private String procedureUri;

  public static final String SERIALIZED_NAME_STATUTORY_INSTRUMENT = "statutoryInstrument";
  @SerializedName(SERIALIZED_NAME_STATUTORY_INSTRUMENT)
  private LaidPaperSummary statutoryInstrument;

  public static final String SERIALIZED_NAME_STATUTORY_INSTRUMENT_PAPER_ID = "statutoryInstrumentPaperId";
  @SerializedName(SERIALIZED_NAME_STATUTORY_INSTRUMENT_PAPER_ID)
  private String statutoryInstrumentPaperId;

  public static final String SERIALIZED_NAME_STATUTORY_INSTRUMENT_PAPER_NAME = "statutoryInstrumentPaperName";
  @SerializedName(SERIALIZED_NAME_STATUTORY_INSTRUMENT_PAPER_NAME)
  private String statutoryInstrumentPaperName;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public ProposedNegativeStatutoryInstrument() {
  }

  public ProposedNegativeStatutoryInstrument commonsLayingDate(OffsetDateTime commonsLayingDate) {
    this.commonsLayingDate = commonsLayingDate;
    return this;
  }

  /**
   * Get commonsLayingDate
   * @return commonsLayingDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCommonsLayingDate() {
    return commonsLayingDate;
  }

  public void setCommonsLayingDate(OffsetDateTime commonsLayingDate) {
    this.commonsLayingDate = commonsLayingDate;
  }


  public ProposedNegativeStatutoryInstrument commonsPublishedDate(OffsetDateTime commonsPublishedDate) {
    this.commonsPublishedDate = commonsPublishedDate;
    return this;
  }

  /**
   * Get commonsPublishedDate
   * @return commonsPublishedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCommonsPublishedDate() {
    return commonsPublishedDate;
  }

  public void setCommonsPublishedDate(OffsetDateTime commonsPublishedDate) {
    this.commonsPublishedDate = commonsPublishedDate;
  }


  public ProposedNegativeStatutoryInstrument departmentId(Integer departmentId) {
    this.departmentId = departmentId;
    return this;
  }

  /**
   * Get departmentId
   * @return departmentId
   */
  @javax.annotation.Nullable
  public Integer getDepartmentId() {
    return departmentId;
  }

  public void setDepartmentId(Integer departmentId) {
    this.departmentId = departmentId;
  }


  public ProposedNegativeStatutoryInstrument id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ProposedNegativeStatutoryInstrument layingBodyDepartment(Department layingBodyDepartment) {
    this.layingBodyDepartment = layingBodyDepartment;
    return this;
  }

  /**
   * Get layingBodyDepartment
   * @return layingBodyDepartment
   */
  @javax.annotation.Nullable
  public Department getLayingBodyDepartment() {
    return layingBodyDepartment;
  }

  public void setLayingBodyDepartment(Department layingBodyDepartment) {
    this.layingBodyDepartment = layingBodyDepartment;
  }


  public ProposedNegativeStatutoryInstrument layingBodyId(String layingBodyId) {
    this.layingBodyId = layingBodyId;
    return this;
  }

  /**
   * Get layingBodyId
   * @return layingBodyId
   */
  @javax.annotation.Nullable
  public String getLayingBodyId() {
    return layingBodyId;
  }

  public void setLayingBodyId(String layingBodyId) {
    this.layingBodyId = layingBodyId;
  }


  public ProposedNegativeStatutoryInstrument layingBodyName(String layingBodyName) {
    this.layingBodyName = layingBodyName;
    return this;
  }

  /**
   * Get layingBodyName
   * @return layingBodyName
   */
  @javax.annotation.Nullable
  public String getLayingBodyName() {
    return layingBodyName;
  }

  public void setLayingBodyName(String layingBodyName) {
    this.layingBodyName = layingBodyName;
  }


  public ProposedNegativeStatutoryInstrument link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public ProposedNegativeStatutoryInstrument lordsLayingDate(OffsetDateTime lordsLayingDate) {
    this.lordsLayingDate = lordsLayingDate;
    return this;
  }

  /**
   * Get lordsLayingDate
   * @return lordsLayingDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLordsLayingDate() {
    return lordsLayingDate;
  }

  public void setLordsLayingDate(OffsetDateTime lordsLayingDate) {
    this.lordsLayingDate = lordsLayingDate;
  }


  public ProposedNegativeStatutoryInstrument lordsPublishedDate(OffsetDateTime lordsPublishedDate) {
    this.lordsPublishedDate = lordsPublishedDate;
    return this;
  }

  /**
   * Get lordsPublishedDate
   * @return lordsPublishedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLordsPublishedDate() {
    return lordsPublishedDate;
  }

  public void setLordsPublishedDate(OffsetDateTime lordsPublishedDate) {
    this.lordsPublishedDate = lordsPublishedDate;
  }


  public ProposedNegativeStatutoryInstrument name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProposedNegativeStatutoryInstrument procedure(Procedure procedure) {
    this.procedure = procedure;
    return this;
  }

  /**
   * Get procedure
   * @return procedure
   */
  @javax.annotation.Nullable
  public Procedure getProcedure() {
    return procedure;
  }

  public void setProcedure(Procedure procedure) {
    this.procedure = procedure;
  }


  public ProposedNegativeStatutoryInstrument procedureName(String procedureName) {
    this.procedureName = procedureName;
    return this;
  }

  /**
   * Get procedureName
   * @return procedureName
   */
  @javax.annotation.Nullable
  public String getProcedureName() {
    return procedureName;
  }

  public void setProcedureName(String procedureName) {
    this.procedureName = procedureName;
  }


  public ProposedNegativeStatutoryInstrument procedureUri(String procedureUri) {
    this.procedureUri = procedureUri;
    return this;
  }

  /**
   * Get procedureUri
   * @return procedureUri
   */
  @javax.annotation.Nullable
  public String getProcedureUri() {
    return procedureUri;
  }

  public void setProcedureUri(String procedureUri) {
    this.procedureUri = procedureUri;
  }


  public ProposedNegativeStatutoryInstrument statutoryInstrument(LaidPaperSummary statutoryInstrument) {
    this.statutoryInstrument = statutoryInstrument;
    return this;
  }

  /**
   * Get statutoryInstrument
   * @return statutoryInstrument
   */
  @javax.annotation.Nullable
  public LaidPaperSummary getStatutoryInstrument() {
    return statutoryInstrument;
  }

  public void setStatutoryInstrument(LaidPaperSummary statutoryInstrument) {
    this.statutoryInstrument = statutoryInstrument;
  }


  public ProposedNegativeStatutoryInstrument statutoryInstrumentPaperId(String statutoryInstrumentPaperId) {
    this.statutoryInstrumentPaperId = statutoryInstrumentPaperId;
    return this;
  }

  /**
   * Get statutoryInstrumentPaperId
   * @return statutoryInstrumentPaperId
   */
  @javax.annotation.Nullable
  public String getStatutoryInstrumentPaperId() {
    return statutoryInstrumentPaperId;
  }

  public void setStatutoryInstrumentPaperId(String statutoryInstrumentPaperId) {
    this.statutoryInstrumentPaperId = statutoryInstrumentPaperId;
  }


  public ProposedNegativeStatutoryInstrument statutoryInstrumentPaperName(String statutoryInstrumentPaperName) {
    this.statutoryInstrumentPaperName = statutoryInstrumentPaperName;
    return this;
  }

  /**
   * Get statutoryInstrumentPaperName
   * @return statutoryInstrumentPaperName
   */
  @javax.annotation.Nullable
  public String getStatutoryInstrumentPaperName() {
    return statutoryInstrumentPaperName;
  }

  public void setStatutoryInstrumentPaperName(String statutoryInstrumentPaperName) {
    this.statutoryInstrumentPaperName = statutoryInstrumentPaperName;
  }


  public ProposedNegativeStatutoryInstrument uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Get uri
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProposedNegativeStatutoryInstrument proposedNegativeStatutoryInstrument = (ProposedNegativeStatutoryInstrument) o;
    return Objects.equals(this.commonsLayingDate, proposedNegativeStatutoryInstrument.commonsLayingDate) &&
        Objects.equals(this.commonsPublishedDate, proposedNegativeStatutoryInstrument.commonsPublishedDate) &&
        Objects.equals(this.departmentId, proposedNegativeStatutoryInstrument.departmentId) &&
        Objects.equals(this.id, proposedNegativeStatutoryInstrument.id) &&
        Objects.equals(this.layingBodyDepartment, proposedNegativeStatutoryInstrument.layingBodyDepartment) &&
        Objects.equals(this.layingBodyId, proposedNegativeStatutoryInstrument.layingBodyId) &&
        Objects.equals(this.layingBodyName, proposedNegativeStatutoryInstrument.layingBodyName) &&
        Objects.equals(this.link, proposedNegativeStatutoryInstrument.link) &&
        Objects.equals(this.lordsLayingDate, proposedNegativeStatutoryInstrument.lordsLayingDate) &&
        Objects.equals(this.lordsPublishedDate, proposedNegativeStatutoryInstrument.lordsPublishedDate) &&
        Objects.equals(this.name, proposedNegativeStatutoryInstrument.name) &&
        Objects.equals(this.procedure, proposedNegativeStatutoryInstrument.procedure) &&
        Objects.equals(this.procedureName, proposedNegativeStatutoryInstrument.procedureName) &&
        Objects.equals(this.procedureUri, proposedNegativeStatutoryInstrument.procedureUri) &&
        Objects.equals(this.statutoryInstrument, proposedNegativeStatutoryInstrument.statutoryInstrument) &&
        Objects.equals(this.statutoryInstrumentPaperId, proposedNegativeStatutoryInstrument.statutoryInstrumentPaperId) &&
        Objects.equals(this.statutoryInstrumentPaperName, proposedNegativeStatutoryInstrument.statutoryInstrumentPaperName) &&
        Objects.equals(this.uri, proposedNegativeStatutoryInstrument.uri);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonsLayingDate, commonsPublishedDate, departmentId, id, layingBodyDepartment, layingBodyId, layingBodyName, link, lordsLayingDate, lordsPublishedDate, name, procedure, procedureName, procedureUri, statutoryInstrument, statutoryInstrumentPaperId, statutoryInstrumentPaperName, uri);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProposedNegativeStatutoryInstrument {\n");
    sb.append("    commonsLayingDate: ").append(toIndentedString(commonsLayingDate)).append("\n");
    sb.append("    commonsPublishedDate: ").append(toIndentedString(commonsPublishedDate)).append("\n");
    sb.append("    departmentId: ").append(toIndentedString(departmentId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    layingBodyDepartment: ").append(toIndentedString(layingBodyDepartment)).append("\n");
    sb.append("    layingBodyId: ").append(toIndentedString(layingBodyId)).append("\n");
    sb.append("    layingBodyName: ").append(toIndentedString(layingBodyName)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    lordsLayingDate: ").append(toIndentedString(lordsLayingDate)).append("\n");
    sb.append("    lordsPublishedDate: ").append(toIndentedString(lordsPublishedDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    procedure: ").append(toIndentedString(procedure)).append("\n");
    sb.append("    procedureName: ").append(toIndentedString(procedureName)).append("\n");
    sb.append("    procedureUri: ").append(toIndentedString(procedureUri)).append("\n");
    sb.append("    statutoryInstrument: ").append(toIndentedString(statutoryInstrument)).append("\n");
    sb.append("    statutoryInstrumentPaperId: ").append(toIndentedString(statutoryInstrumentPaperId)).append("\n");
    sb.append("    statutoryInstrumentPaperName: ").append(toIndentedString(statutoryInstrumentPaperName)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commonsLayingDate");
    openapiFields.add("commonsPublishedDate");
    openapiFields.add("departmentId");
    openapiFields.add("id");
    openapiFields.add("layingBodyDepartment");
    openapiFields.add("layingBodyId");
    openapiFields.add("layingBodyName");
    openapiFields.add("link");
    openapiFields.add("lordsLayingDate");
    openapiFields.add("lordsPublishedDate");
    openapiFields.add("name");
    openapiFields.add("procedure");
    openapiFields.add("procedureName");
    openapiFields.add("procedureUri");
    openapiFields.add("statutoryInstrument");
    openapiFields.add("statutoryInstrumentPaperId");
    openapiFields.add("statutoryInstrumentPaperName");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProposedNegativeStatutoryInstrument
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProposedNegativeStatutoryInstrument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProposedNegativeStatutoryInstrument is not found in the empty JSON string", ProposedNegativeStatutoryInstrument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProposedNegativeStatutoryInstrument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProposedNegativeStatutoryInstrument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `layingBodyDepartment`
      if (jsonObj.get("layingBodyDepartment") != null && !jsonObj.get("layingBodyDepartment").isJsonNull()) {
        Department.validateJsonElement(jsonObj.get("layingBodyDepartment"));
      }
      if ((jsonObj.get("layingBodyId") != null && !jsonObj.get("layingBodyId").isJsonNull()) && !jsonObj.get("layingBodyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layingBodyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layingBodyId").toString()));
      }
      if ((jsonObj.get("layingBodyName") != null && !jsonObj.get("layingBodyName").isJsonNull()) && !jsonObj.get("layingBodyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layingBodyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layingBodyName").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `procedure`
      if (jsonObj.get("procedure") != null && !jsonObj.get("procedure").isJsonNull()) {
        Procedure.validateJsonElement(jsonObj.get("procedure"));
      }
      if ((jsonObj.get("procedureName") != null && !jsonObj.get("procedureName").isJsonNull()) && !jsonObj.get("procedureName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `procedureName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("procedureName").toString()));
      }
      if ((jsonObj.get("procedureUri") != null && !jsonObj.get("procedureUri").isJsonNull()) && !jsonObj.get("procedureUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `procedureUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("procedureUri").toString()));
      }
      // validate the optional field `statutoryInstrument`
      if (jsonObj.get("statutoryInstrument") != null && !jsonObj.get("statutoryInstrument").isJsonNull()) {
        LaidPaperSummary.validateJsonElement(jsonObj.get("statutoryInstrument"));
      }
      if ((jsonObj.get("statutoryInstrumentPaperId") != null && !jsonObj.get("statutoryInstrumentPaperId").isJsonNull()) && !jsonObj.get("statutoryInstrumentPaperId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statutoryInstrumentPaperId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statutoryInstrumentPaperId").toString()));
      }
      if ((jsonObj.get("statutoryInstrumentPaperName") != null && !jsonObj.get("statutoryInstrumentPaperName").isJsonNull()) && !jsonObj.get("statutoryInstrumentPaperName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statutoryInstrumentPaperName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statutoryInstrumentPaperName").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProposedNegativeStatutoryInstrument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProposedNegativeStatutoryInstrument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProposedNegativeStatutoryInstrument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProposedNegativeStatutoryInstrument.class));

       return (TypeAdapter<T>) new TypeAdapter<ProposedNegativeStatutoryInstrument>() {
           @Override
           public void write(JsonWriter out, ProposedNegativeStatutoryInstrument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProposedNegativeStatutoryInstrument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProposedNegativeStatutoryInstrument given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProposedNegativeStatutoryInstrument
   * @throws IOException if the JSON string is invalid with respect to ProposedNegativeStatutoryInstrument
   */
  public static ProposedNegativeStatutoryInstrument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProposedNegativeStatutoryInstrument.class);
  }

  /**
   * Convert an instance of ProposedNegativeStatutoryInstrument to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

