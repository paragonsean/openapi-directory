/**
 * Statutory Instruments API
 * An API exposing details of the various types of Statutory Instruments laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBusinessItem.h
 *
 * 
 */

#ifndef OAIBusinessItem_H
#define OAIBusinessItem_H

#include <QJsonObject>

#include "OAIBusinessItemHouse.h"
#include "OAILaidPaperType.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBusinessItemHouse;

class OAIBusinessItem : public OAIObject {
public:
    OAIBusinessItem();
    OAIBusinessItem(QString json);
    ~OAIBusinessItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBusinessItemUri() const;
    void setBusinessItemUri(const QString &business_item_uri);
    bool is_business_item_uri_Set() const;
    bool is_business_item_uri_Valid() const;

    QString getHouseId() const;
    void setHouseId(const QString &house_id);
    bool is_house_id_Set() const;
    bool is_house_id_Valid() const;

    QString getHouseName() const;
    void setHouseName(const QString &house_name);
    bool is_house_name_Set() const;
    bool is_house_name_Valid() const;

    QString getHouseUri() const;
    void setHouseUri(const QString &house_uri);
    bool is_house_uri_Set() const;
    bool is_house_uri_Valid() const;

    QList<OAIBusinessItemHouse> getHouses() const;
    void setHouses(const QList<OAIBusinessItemHouse> &houses);
    bool is_houses_Set() const;
    bool is_houses_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QDateTime getItemDate() const;
    void setItemDate(const QDateTime &item_date);
    bool is_item_date_Set() const;
    bool is_item_date_Valid() const;

    OAILaidPaperType getLaidPaperType() const;
    void setLaidPaperType(const OAILaidPaperType &laid_paper_type);
    bool is_laid_paper_type_Set() const;
    bool is_laid_paper_type_Valid() const;

    QString getLink() const;
    void setLink(const QString &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    QString getProcedureStepId() const;
    void setProcedureStepId(const QString &procedure_step_id);
    bool is_procedure_step_id_Set() const;
    bool is_procedure_step_id_Valid() const;

    QString getProcedureStepUri() const;
    void setProcedureStepUri(const QString &procedure_step_uri);
    bool is_procedure_step_uri_Set() const;
    bool is_procedure_step_uri_Valid() const;

    qint32 getSequence() const;
    void setSequence(const qint32 &sequence);
    bool is_sequence_Set() const;
    bool is_sequence_Valid() const;

    QString getStatutoryInstrumentId() const;
    void setStatutoryInstrumentId(const QString &statutory_instrument_id);
    bool is_statutory_instrument_id_Set() const;
    bool is_statutory_instrument_id_Valid() const;

    QString getStatutoryInstrumentUri() const;
    void setStatutoryInstrumentUri(const QString &statutory_instrument_uri);
    bool is_statutory_instrument_uri_Set() const;
    bool is_statutory_instrument_uri_Valid() const;

    QString getStepName() const;
    void setStepName(const QString &step_name);
    bool is_step_name_Set() const;
    bool is_step_name_Valid() const;

    QString getWorkpackageProcedureUri() const;
    void setWorkpackageProcedureUri(const QString &workpackage_procedure_uri);
    bool is_workpackage_procedure_uri_Set() const;
    bool is_workpackage_procedure_uri_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_business_item_uri;
    bool m_business_item_uri_isSet;
    bool m_business_item_uri_isValid;

    QString m_house_id;
    bool m_house_id_isSet;
    bool m_house_id_isValid;

    QString m_house_name;
    bool m_house_name_isSet;
    bool m_house_name_isValid;

    QString m_house_uri;
    bool m_house_uri_isSet;
    bool m_house_uri_isValid;

    QList<OAIBusinessItemHouse> m_houses;
    bool m_houses_isSet;
    bool m_houses_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QDateTime m_item_date;
    bool m_item_date_isSet;
    bool m_item_date_isValid;

    OAILaidPaperType m_laid_paper_type;
    bool m_laid_paper_type_isSet;
    bool m_laid_paper_type_isValid;

    QString m_link;
    bool m_link_isSet;
    bool m_link_isValid;

    QString m_procedure_step_id;
    bool m_procedure_step_id_isSet;
    bool m_procedure_step_id_isValid;

    QString m_procedure_step_uri;
    bool m_procedure_step_uri_isSet;
    bool m_procedure_step_uri_isValid;

    qint32 m_sequence;
    bool m_sequence_isSet;
    bool m_sequence_isValid;

    QString m_statutory_instrument_id;
    bool m_statutory_instrument_id_isSet;
    bool m_statutory_instrument_id_isValid;

    QString m_statutory_instrument_uri;
    bool m_statutory_instrument_uri_isSet;
    bool m_statutory_instrument_uri_isValid;

    QString m_step_name;
    bool m_step_name_isSet;
    bool m_step_name_isValid;

    QString m_workpackage_procedure_uri;
    bool m_workpackage_procedure_uri_isSet;
    bool m_workpackage_procedure_uri_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBusinessItem)

#endif // OAIBusinessItem_H
