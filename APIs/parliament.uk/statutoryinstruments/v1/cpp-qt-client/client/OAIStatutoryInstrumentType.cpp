/**
 * Statutory Instruments API
 * An API exposing details of the various types of Statutory Instruments laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatutoryInstrumentType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatutoryInstrumentType::OAIStatutoryInstrumentType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatutoryInstrumentType::OAIStatutoryInstrumentType() {
    this->initializeModel();
}

OAIStatutoryInstrumentType::~OAIStatutoryInstrumentType() {}

void OAIStatutoryInstrumentType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIStatutoryInstrumentType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIStatutoryInstrumentType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DraftAffirmative", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatutoryInstrumentType::DRAFTAFFIRMATIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DraftNegative", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatutoryInstrumentType::DRAFTNEGATIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MadeAffirmative", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatutoryInstrumentType::MADEAFFIRMATIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MadeNegative", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatutoryInstrumentType::MADENEGATIVE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIStatutoryInstrumentType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIStatutoryInstrumentType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIStatutoryInstrumentType::DRAFTAFFIRMATIVE:
            val = "DraftAffirmative";
            break;
        case eOAIStatutoryInstrumentType::DRAFTNEGATIVE:
            val = "DraftNegative";
            break;
        case eOAIStatutoryInstrumentType::MADEAFFIRMATIVE:
            val = "MadeAffirmative";
            break;
        case eOAIStatutoryInstrumentType::MADENEGATIVE:
            val = "MadeNegative";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIStatutoryInstrumentType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIStatutoryInstrumentType::eOAIStatutoryInstrumentType OAIStatutoryInstrumentType::getValue() const {
    return m_value;
}

void OAIStatutoryInstrumentType::setValue(const OAIStatutoryInstrumentType::eOAIStatutoryInstrumentType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIStatutoryInstrumentType::isSet() const {
    
    return m_value_isSet;
}

bool OAIStatutoryInstrumentType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
