/**
 * Statutory Instruments API
 * An API exposing details of the various types of Statutory Instruments laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatutoryInstrument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatutoryInstrument::OAIStatutoryInstrument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatutoryInstrument::OAIStatutoryInstrument() {
    this->initializeModel();
}

OAIStatutoryInstrument::~OAIStatutoryInstrument() {}

void OAIStatutoryInstrument::initializeModel() {

    m_commons_laying_date_isSet = false;
    m_commons_laying_date_isValid = false;

    m_commons_published_date_isSet = false;
    m_commons_published_date_isValid = false;

    m_department_id_isSet = false;
    m_department_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_laying_body_department_isSet = false;
    m_laying_body_department_isValid = false;

    m_laying_body_id_isSet = false;
    m_laying_body_id_isValid = false;

    m_laying_body_name_isSet = false;
    m_laying_body_name_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_lords_laying_date_isSet = false;
    m_lords_laying_date_isValid = false;

    m_lords_published_date_isSet = false;
    m_lords_published_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_paper_coming_into_force_date_isSet = false;
    m_paper_coming_into_force_date_isValid = false;

    m_paper_coming_into_force_note_isSet = false;
    m_paper_coming_into_force_note_isValid = false;

    m_paper_made_date_isSet = false;
    m_paper_made_date_isValid = false;

    m_paper_number_isSet = false;
    m_paper_number_isValid = false;

    m_paper_prefix_isSet = false;
    m_paper_prefix_isValid = false;

    m_paper_year_isSet = false;
    m_paper_year_isValid = false;

    m_procedure_isSet = false;
    m_procedure_isValid = false;

    m_procedure_name_isSet = false;
    m_procedure_name_isValid = false;

    m_procedure_uri_isSet = false;
    m_procedure_uri_isValid = false;

    m_proposed_negative_statutory_instrument_isSet = false;
    m_proposed_negative_statutory_instrument_isValid = false;

    m_proposed_negative_statutory_instrument_paper_id_isSet = false;
    m_proposed_negative_statutory_instrument_paper_id_isValid = false;

    m_proposed_negative_statutory_instrument_paper_name_isSet = false;
    m_proposed_negative_statutory_instrument_paper_name_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIStatutoryInstrument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatutoryInstrument::fromJsonObject(QJsonObject json) {

    m_commons_laying_date_isValid = ::OpenAPI::fromJsonValue(m_commons_laying_date, json[QString("commonsLayingDate")]);
    m_commons_laying_date_isSet = !json[QString("commonsLayingDate")].isNull() && m_commons_laying_date_isValid;

    m_commons_published_date_isValid = ::OpenAPI::fromJsonValue(m_commons_published_date, json[QString("commonsPublishedDate")]);
    m_commons_published_date_isSet = !json[QString("commonsPublishedDate")].isNull() && m_commons_published_date_isValid;

    m_department_id_isValid = ::OpenAPI::fromJsonValue(m_department_id, json[QString("departmentId")]);
    m_department_id_isSet = !json[QString("departmentId")].isNull() && m_department_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_laying_body_department_isValid = ::OpenAPI::fromJsonValue(m_laying_body_department, json[QString("layingBodyDepartment")]);
    m_laying_body_department_isSet = !json[QString("layingBodyDepartment")].isNull() && m_laying_body_department_isValid;

    m_laying_body_id_isValid = ::OpenAPI::fromJsonValue(m_laying_body_id, json[QString("layingBodyId")]);
    m_laying_body_id_isSet = !json[QString("layingBodyId")].isNull() && m_laying_body_id_isValid;

    m_laying_body_name_isValid = ::OpenAPI::fromJsonValue(m_laying_body_name, json[QString("layingBodyName")]);
    m_laying_body_name_isSet = !json[QString("layingBodyName")].isNull() && m_laying_body_name_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_lords_laying_date_isValid = ::OpenAPI::fromJsonValue(m_lords_laying_date, json[QString("lordsLayingDate")]);
    m_lords_laying_date_isSet = !json[QString("lordsLayingDate")].isNull() && m_lords_laying_date_isValid;

    m_lords_published_date_isValid = ::OpenAPI::fromJsonValue(m_lords_published_date, json[QString("lordsPublishedDate")]);
    m_lords_published_date_isSet = !json[QString("lordsPublishedDate")].isNull() && m_lords_published_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_paper_coming_into_force_date_isValid = ::OpenAPI::fromJsonValue(m_paper_coming_into_force_date, json[QString("paperComingIntoForceDate")]);
    m_paper_coming_into_force_date_isSet = !json[QString("paperComingIntoForceDate")].isNull() && m_paper_coming_into_force_date_isValid;

    m_paper_coming_into_force_note_isValid = ::OpenAPI::fromJsonValue(m_paper_coming_into_force_note, json[QString("paperComingIntoForceNote")]);
    m_paper_coming_into_force_note_isSet = !json[QString("paperComingIntoForceNote")].isNull() && m_paper_coming_into_force_note_isValid;

    m_paper_made_date_isValid = ::OpenAPI::fromJsonValue(m_paper_made_date, json[QString("paperMadeDate")]);
    m_paper_made_date_isSet = !json[QString("paperMadeDate")].isNull() && m_paper_made_date_isValid;

    m_paper_number_isValid = ::OpenAPI::fromJsonValue(m_paper_number, json[QString("paperNumber")]);
    m_paper_number_isSet = !json[QString("paperNumber")].isNull() && m_paper_number_isValid;

    m_paper_prefix_isValid = ::OpenAPI::fromJsonValue(m_paper_prefix, json[QString("paperPrefix")]);
    m_paper_prefix_isSet = !json[QString("paperPrefix")].isNull() && m_paper_prefix_isValid;

    m_paper_year_isValid = ::OpenAPI::fromJsonValue(m_paper_year, json[QString("paperYear")]);
    m_paper_year_isSet = !json[QString("paperYear")].isNull() && m_paper_year_isValid;

    m_procedure_isValid = ::OpenAPI::fromJsonValue(m_procedure, json[QString("procedure")]);
    m_procedure_isSet = !json[QString("procedure")].isNull() && m_procedure_isValid;

    m_procedure_name_isValid = ::OpenAPI::fromJsonValue(m_procedure_name, json[QString("procedureName")]);
    m_procedure_name_isSet = !json[QString("procedureName")].isNull() && m_procedure_name_isValid;

    m_procedure_uri_isValid = ::OpenAPI::fromJsonValue(m_procedure_uri, json[QString("procedureUri")]);
    m_procedure_uri_isSet = !json[QString("procedureUri")].isNull() && m_procedure_uri_isValid;

    m_proposed_negative_statutory_instrument_isValid = ::OpenAPI::fromJsonValue(m_proposed_negative_statutory_instrument, json[QString("proposedNegativeStatutoryInstrument")]);
    m_proposed_negative_statutory_instrument_isSet = !json[QString("proposedNegativeStatutoryInstrument")].isNull() && m_proposed_negative_statutory_instrument_isValid;

    m_proposed_negative_statutory_instrument_paper_id_isValid = ::OpenAPI::fromJsonValue(m_proposed_negative_statutory_instrument_paper_id, json[QString("proposedNegativeStatutoryInstrumentPaperId")]);
    m_proposed_negative_statutory_instrument_paper_id_isSet = !json[QString("proposedNegativeStatutoryInstrumentPaperId")].isNull() && m_proposed_negative_statutory_instrument_paper_id_isValid;

    m_proposed_negative_statutory_instrument_paper_name_isValid = ::OpenAPI::fromJsonValue(m_proposed_negative_statutory_instrument_paper_name, json[QString("proposedNegativeStatutoryInstrumentPaperName")]);
    m_proposed_negative_statutory_instrument_paper_name_isSet = !json[QString("proposedNegativeStatutoryInstrumentPaperName")].isNull() && m_proposed_negative_statutory_instrument_paper_name_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIStatutoryInstrument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatutoryInstrument::asJsonObject() const {
    QJsonObject obj;
    if (m_commons_laying_date_isSet) {
        obj.insert(QString("commonsLayingDate"), ::OpenAPI::toJsonValue(m_commons_laying_date));
    }
    if (m_commons_published_date_isSet) {
        obj.insert(QString("commonsPublishedDate"), ::OpenAPI::toJsonValue(m_commons_published_date));
    }
    if (m_department_id_isSet) {
        obj.insert(QString("departmentId"), ::OpenAPI::toJsonValue(m_department_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_laying_body_department.isSet()) {
        obj.insert(QString("layingBodyDepartment"), ::OpenAPI::toJsonValue(m_laying_body_department));
    }
    if (m_laying_body_id_isSet) {
        obj.insert(QString("layingBodyId"), ::OpenAPI::toJsonValue(m_laying_body_id));
    }
    if (m_laying_body_name_isSet) {
        obj.insert(QString("layingBodyName"), ::OpenAPI::toJsonValue(m_laying_body_name));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_lords_laying_date_isSet) {
        obj.insert(QString("lordsLayingDate"), ::OpenAPI::toJsonValue(m_lords_laying_date));
    }
    if (m_lords_published_date_isSet) {
        obj.insert(QString("lordsPublishedDate"), ::OpenAPI::toJsonValue(m_lords_published_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_paper_coming_into_force_date_isSet) {
        obj.insert(QString("paperComingIntoForceDate"), ::OpenAPI::toJsonValue(m_paper_coming_into_force_date));
    }
    if (m_paper_coming_into_force_note_isSet) {
        obj.insert(QString("paperComingIntoForceNote"), ::OpenAPI::toJsonValue(m_paper_coming_into_force_note));
    }
    if (m_paper_made_date_isSet) {
        obj.insert(QString("paperMadeDate"), ::OpenAPI::toJsonValue(m_paper_made_date));
    }
    if (m_paper_number_isSet) {
        obj.insert(QString("paperNumber"), ::OpenAPI::toJsonValue(m_paper_number));
    }
    if (m_paper_prefix_isSet) {
        obj.insert(QString("paperPrefix"), ::OpenAPI::toJsonValue(m_paper_prefix));
    }
    if (m_paper_year_isSet) {
        obj.insert(QString("paperYear"), ::OpenAPI::toJsonValue(m_paper_year));
    }
    if (m_procedure.isSet()) {
        obj.insert(QString("procedure"), ::OpenAPI::toJsonValue(m_procedure));
    }
    if (m_procedure_name_isSet) {
        obj.insert(QString("procedureName"), ::OpenAPI::toJsonValue(m_procedure_name));
    }
    if (m_procedure_uri_isSet) {
        obj.insert(QString("procedureUri"), ::OpenAPI::toJsonValue(m_procedure_uri));
    }
    if (m_proposed_negative_statutory_instrument.isSet()) {
        obj.insert(QString("proposedNegativeStatutoryInstrument"), ::OpenAPI::toJsonValue(m_proposed_negative_statutory_instrument));
    }
    if (m_proposed_negative_statutory_instrument_paper_id_isSet) {
        obj.insert(QString("proposedNegativeStatutoryInstrumentPaperId"), ::OpenAPI::toJsonValue(m_proposed_negative_statutory_instrument_paper_id));
    }
    if (m_proposed_negative_statutory_instrument_paper_name_isSet) {
        obj.insert(QString("proposedNegativeStatutoryInstrumentPaperName"), ::OpenAPI::toJsonValue(m_proposed_negative_statutory_instrument_paper_name));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QDateTime OAIStatutoryInstrument::getCommonsLayingDate() const {
    return m_commons_laying_date;
}
void OAIStatutoryInstrument::setCommonsLayingDate(const QDateTime &commons_laying_date) {
    m_commons_laying_date = commons_laying_date;
    m_commons_laying_date_isSet = true;
}

bool OAIStatutoryInstrument::is_commons_laying_date_Set() const{
    return m_commons_laying_date_isSet;
}

bool OAIStatutoryInstrument::is_commons_laying_date_Valid() const{
    return m_commons_laying_date_isValid;
}

QDateTime OAIStatutoryInstrument::getCommonsPublishedDate() const {
    return m_commons_published_date;
}
void OAIStatutoryInstrument::setCommonsPublishedDate(const QDateTime &commons_published_date) {
    m_commons_published_date = commons_published_date;
    m_commons_published_date_isSet = true;
}

bool OAIStatutoryInstrument::is_commons_published_date_Set() const{
    return m_commons_published_date_isSet;
}

bool OAIStatutoryInstrument::is_commons_published_date_Valid() const{
    return m_commons_published_date_isValid;
}

qint32 OAIStatutoryInstrument::getDepartmentId() const {
    return m_department_id;
}
void OAIStatutoryInstrument::setDepartmentId(const qint32 &department_id) {
    m_department_id = department_id;
    m_department_id_isSet = true;
}

bool OAIStatutoryInstrument::is_department_id_Set() const{
    return m_department_id_isSet;
}

bool OAIStatutoryInstrument::is_department_id_Valid() const{
    return m_department_id_isValid;
}

QString OAIStatutoryInstrument::getId() const {
    return m_id;
}
void OAIStatutoryInstrument::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStatutoryInstrument::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStatutoryInstrument::is_id_Valid() const{
    return m_id_isValid;
}

OAIDepartment OAIStatutoryInstrument::getLayingBodyDepartment() const {
    return m_laying_body_department;
}
void OAIStatutoryInstrument::setLayingBodyDepartment(const OAIDepartment &laying_body_department) {
    m_laying_body_department = laying_body_department;
    m_laying_body_department_isSet = true;
}

bool OAIStatutoryInstrument::is_laying_body_department_Set() const{
    return m_laying_body_department_isSet;
}

bool OAIStatutoryInstrument::is_laying_body_department_Valid() const{
    return m_laying_body_department_isValid;
}

QString OAIStatutoryInstrument::getLayingBodyId() const {
    return m_laying_body_id;
}
void OAIStatutoryInstrument::setLayingBodyId(const QString &laying_body_id) {
    m_laying_body_id = laying_body_id;
    m_laying_body_id_isSet = true;
}

bool OAIStatutoryInstrument::is_laying_body_id_Set() const{
    return m_laying_body_id_isSet;
}

bool OAIStatutoryInstrument::is_laying_body_id_Valid() const{
    return m_laying_body_id_isValid;
}

QString OAIStatutoryInstrument::getLayingBodyName() const {
    return m_laying_body_name;
}
void OAIStatutoryInstrument::setLayingBodyName(const QString &laying_body_name) {
    m_laying_body_name = laying_body_name;
    m_laying_body_name_isSet = true;
}

bool OAIStatutoryInstrument::is_laying_body_name_Set() const{
    return m_laying_body_name_isSet;
}

bool OAIStatutoryInstrument::is_laying_body_name_Valid() const{
    return m_laying_body_name_isValid;
}

QString OAIStatutoryInstrument::getLink() const {
    return m_link;
}
void OAIStatutoryInstrument::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIStatutoryInstrument::is_link_Set() const{
    return m_link_isSet;
}

bool OAIStatutoryInstrument::is_link_Valid() const{
    return m_link_isValid;
}

QDateTime OAIStatutoryInstrument::getLordsLayingDate() const {
    return m_lords_laying_date;
}
void OAIStatutoryInstrument::setLordsLayingDate(const QDateTime &lords_laying_date) {
    m_lords_laying_date = lords_laying_date;
    m_lords_laying_date_isSet = true;
}

bool OAIStatutoryInstrument::is_lords_laying_date_Set() const{
    return m_lords_laying_date_isSet;
}

bool OAIStatutoryInstrument::is_lords_laying_date_Valid() const{
    return m_lords_laying_date_isValid;
}

QDateTime OAIStatutoryInstrument::getLordsPublishedDate() const {
    return m_lords_published_date;
}
void OAIStatutoryInstrument::setLordsPublishedDate(const QDateTime &lords_published_date) {
    m_lords_published_date = lords_published_date;
    m_lords_published_date_isSet = true;
}

bool OAIStatutoryInstrument::is_lords_published_date_Set() const{
    return m_lords_published_date_isSet;
}

bool OAIStatutoryInstrument::is_lords_published_date_Valid() const{
    return m_lords_published_date_isValid;
}

QString OAIStatutoryInstrument::getName() const {
    return m_name;
}
void OAIStatutoryInstrument::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStatutoryInstrument::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStatutoryInstrument::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIStatutoryInstrument::getPaperComingIntoForceDate() const {
    return m_paper_coming_into_force_date;
}
void OAIStatutoryInstrument::setPaperComingIntoForceDate(const QDateTime &paper_coming_into_force_date) {
    m_paper_coming_into_force_date = paper_coming_into_force_date;
    m_paper_coming_into_force_date_isSet = true;
}

bool OAIStatutoryInstrument::is_paper_coming_into_force_date_Set() const{
    return m_paper_coming_into_force_date_isSet;
}

bool OAIStatutoryInstrument::is_paper_coming_into_force_date_Valid() const{
    return m_paper_coming_into_force_date_isValid;
}

QString OAIStatutoryInstrument::getPaperComingIntoForceNote() const {
    return m_paper_coming_into_force_note;
}
void OAIStatutoryInstrument::setPaperComingIntoForceNote(const QString &paper_coming_into_force_note) {
    m_paper_coming_into_force_note = paper_coming_into_force_note;
    m_paper_coming_into_force_note_isSet = true;
}

bool OAIStatutoryInstrument::is_paper_coming_into_force_note_Set() const{
    return m_paper_coming_into_force_note_isSet;
}

bool OAIStatutoryInstrument::is_paper_coming_into_force_note_Valid() const{
    return m_paper_coming_into_force_note_isValid;
}

QDateTime OAIStatutoryInstrument::getPaperMadeDate() const {
    return m_paper_made_date;
}
void OAIStatutoryInstrument::setPaperMadeDate(const QDateTime &paper_made_date) {
    m_paper_made_date = paper_made_date;
    m_paper_made_date_isSet = true;
}

bool OAIStatutoryInstrument::is_paper_made_date_Set() const{
    return m_paper_made_date_isSet;
}

bool OAIStatutoryInstrument::is_paper_made_date_Valid() const{
    return m_paper_made_date_isValid;
}

qint32 OAIStatutoryInstrument::getPaperNumber() const {
    return m_paper_number;
}
void OAIStatutoryInstrument::setPaperNumber(const qint32 &paper_number) {
    m_paper_number = paper_number;
    m_paper_number_isSet = true;
}

bool OAIStatutoryInstrument::is_paper_number_Set() const{
    return m_paper_number_isSet;
}

bool OAIStatutoryInstrument::is_paper_number_Valid() const{
    return m_paper_number_isValid;
}

QString OAIStatutoryInstrument::getPaperPrefix() const {
    return m_paper_prefix;
}
void OAIStatutoryInstrument::setPaperPrefix(const QString &paper_prefix) {
    m_paper_prefix = paper_prefix;
    m_paper_prefix_isSet = true;
}

bool OAIStatutoryInstrument::is_paper_prefix_Set() const{
    return m_paper_prefix_isSet;
}

bool OAIStatutoryInstrument::is_paper_prefix_Valid() const{
    return m_paper_prefix_isValid;
}

QString OAIStatutoryInstrument::getPaperYear() const {
    return m_paper_year;
}
void OAIStatutoryInstrument::setPaperYear(const QString &paper_year) {
    m_paper_year = paper_year;
    m_paper_year_isSet = true;
}

bool OAIStatutoryInstrument::is_paper_year_Set() const{
    return m_paper_year_isSet;
}

bool OAIStatutoryInstrument::is_paper_year_Valid() const{
    return m_paper_year_isValid;
}

OAIProcedure OAIStatutoryInstrument::getProcedure() const {
    return m_procedure;
}
void OAIStatutoryInstrument::setProcedure(const OAIProcedure &procedure) {
    m_procedure = procedure;
    m_procedure_isSet = true;
}

bool OAIStatutoryInstrument::is_procedure_Set() const{
    return m_procedure_isSet;
}

bool OAIStatutoryInstrument::is_procedure_Valid() const{
    return m_procedure_isValid;
}

QString OAIStatutoryInstrument::getProcedureName() const {
    return m_procedure_name;
}
void OAIStatutoryInstrument::setProcedureName(const QString &procedure_name) {
    m_procedure_name = procedure_name;
    m_procedure_name_isSet = true;
}

bool OAIStatutoryInstrument::is_procedure_name_Set() const{
    return m_procedure_name_isSet;
}

bool OAIStatutoryInstrument::is_procedure_name_Valid() const{
    return m_procedure_name_isValid;
}

QString OAIStatutoryInstrument::getProcedureUri() const {
    return m_procedure_uri;
}
void OAIStatutoryInstrument::setProcedureUri(const QString &procedure_uri) {
    m_procedure_uri = procedure_uri;
    m_procedure_uri_isSet = true;
}

bool OAIStatutoryInstrument::is_procedure_uri_Set() const{
    return m_procedure_uri_isSet;
}

bool OAIStatutoryInstrument::is_procedure_uri_Valid() const{
    return m_procedure_uri_isValid;
}

OAILaidPaperSummary OAIStatutoryInstrument::getProposedNegativeStatutoryInstrument() const {
    return m_proposed_negative_statutory_instrument;
}
void OAIStatutoryInstrument::setProposedNegativeStatutoryInstrument(const OAILaidPaperSummary &proposed_negative_statutory_instrument) {
    m_proposed_negative_statutory_instrument = proposed_negative_statutory_instrument;
    m_proposed_negative_statutory_instrument_isSet = true;
}

bool OAIStatutoryInstrument::is_proposed_negative_statutory_instrument_Set() const{
    return m_proposed_negative_statutory_instrument_isSet;
}

bool OAIStatutoryInstrument::is_proposed_negative_statutory_instrument_Valid() const{
    return m_proposed_negative_statutory_instrument_isValid;
}

QString OAIStatutoryInstrument::getProposedNegativeStatutoryInstrumentPaperId() const {
    return m_proposed_negative_statutory_instrument_paper_id;
}
void OAIStatutoryInstrument::setProposedNegativeStatutoryInstrumentPaperId(const QString &proposed_negative_statutory_instrument_paper_id) {
    m_proposed_negative_statutory_instrument_paper_id = proposed_negative_statutory_instrument_paper_id;
    m_proposed_negative_statutory_instrument_paper_id_isSet = true;
}

bool OAIStatutoryInstrument::is_proposed_negative_statutory_instrument_paper_id_Set() const{
    return m_proposed_negative_statutory_instrument_paper_id_isSet;
}

bool OAIStatutoryInstrument::is_proposed_negative_statutory_instrument_paper_id_Valid() const{
    return m_proposed_negative_statutory_instrument_paper_id_isValid;
}

QString OAIStatutoryInstrument::getProposedNegativeStatutoryInstrumentPaperName() const {
    return m_proposed_negative_statutory_instrument_paper_name;
}
void OAIStatutoryInstrument::setProposedNegativeStatutoryInstrumentPaperName(const QString &proposed_negative_statutory_instrument_paper_name) {
    m_proposed_negative_statutory_instrument_paper_name = proposed_negative_statutory_instrument_paper_name;
    m_proposed_negative_statutory_instrument_paper_name_isSet = true;
}

bool OAIStatutoryInstrument::is_proposed_negative_statutory_instrument_paper_name_Set() const{
    return m_proposed_negative_statutory_instrument_paper_name_isSet;
}

bool OAIStatutoryInstrument::is_proposed_negative_statutory_instrument_paper_name_Valid() const{
    return m_proposed_negative_statutory_instrument_paper_name_isValid;
}

QString OAIStatutoryInstrument::getUri() const {
    return m_uri;
}
void OAIStatutoryInstrument::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIStatutoryInstrument::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIStatutoryInstrument::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIStatutoryInstrument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commons_laying_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commons_published_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_laying_body_department.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_laying_body_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_laying_body_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lords_laying_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lords_published_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paper_coming_into_force_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paper_coming_into_force_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paper_made_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paper_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paper_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paper_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_procedure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_procedure_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_procedure_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposed_negative_statutory_instrument.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposed_negative_statutory_instrument_paper_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposed_negative_statutory_instrument_paper_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatutoryInstrument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
