/**
 * Statutory Instruments API
 * An API exposing details of the various types of Statutory Instruments laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILaidPaperType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILaidPaperType::OAILaidPaperType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILaidPaperType::OAILaidPaperType() {
    this->initializeModel();
}

OAILaidPaperType::~OAILaidPaperType() {}

void OAILaidPaperType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILaidPaperType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILaidPaperType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("StatutoryInstrument", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaidPaperType::STATUTORYINSTRUMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ProposedNegative", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaidPaperType::PROPOSEDNEGATIVE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILaidPaperType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILaidPaperType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILaidPaperType::STATUTORYINSTRUMENT:
            val = "StatutoryInstrument";
            break;
        case eOAILaidPaperType::PROPOSEDNEGATIVE:
            val = "ProposedNegative";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILaidPaperType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILaidPaperType::eOAILaidPaperType OAILaidPaperType::getValue() const {
    return m_value;
}

void OAILaidPaperType::setValue(const OAILaidPaperType::eOAILaidPaperType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILaidPaperType::isSet() const {
    
    return m_value_isSet;
}

bool OAILaidPaperType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
