/**
 * Statutory Instruments API
 * An API exposing details of the various types of Statutory Instruments laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBusinessItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBusinessItem::OAIBusinessItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBusinessItem::OAIBusinessItem() {
    this->initializeModel();
}

OAIBusinessItem::~OAIBusinessItem() {}

void OAIBusinessItem::initializeModel() {

    m_business_item_uri_isSet = false;
    m_business_item_uri_isValid = false;

    m_house_id_isSet = false;
    m_house_id_isValid = false;

    m_house_name_isSet = false;
    m_house_name_isValid = false;

    m_house_uri_isSet = false;
    m_house_uri_isValid = false;

    m_houses_isSet = false;
    m_houses_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_item_date_isSet = false;
    m_item_date_isValid = false;

    m_laid_paper_type_isSet = false;
    m_laid_paper_type_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_procedure_step_id_isSet = false;
    m_procedure_step_id_isValid = false;

    m_procedure_step_uri_isSet = false;
    m_procedure_step_uri_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_statutory_instrument_id_isSet = false;
    m_statutory_instrument_id_isValid = false;

    m_statutory_instrument_uri_isSet = false;
    m_statutory_instrument_uri_isValid = false;

    m_step_name_isSet = false;
    m_step_name_isValid = false;

    m_workpackage_procedure_uri_isSet = false;
    m_workpackage_procedure_uri_isValid = false;
}

void OAIBusinessItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBusinessItem::fromJsonObject(QJsonObject json) {

    m_business_item_uri_isValid = ::OpenAPI::fromJsonValue(m_business_item_uri, json[QString("businessItemUri")]);
    m_business_item_uri_isSet = !json[QString("businessItemUri")].isNull() && m_business_item_uri_isValid;

    m_house_id_isValid = ::OpenAPI::fromJsonValue(m_house_id, json[QString("houseId")]);
    m_house_id_isSet = !json[QString("houseId")].isNull() && m_house_id_isValid;

    m_house_name_isValid = ::OpenAPI::fromJsonValue(m_house_name, json[QString("houseName")]);
    m_house_name_isSet = !json[QString("houseName")].isNull() && m_house_name_isValid;

    m_house_uri_isValid = ::OpenAPI::fromJsonValue(m_house_uri, json[QString("houseUri")]);
    m_house_uri_isSet = !json[QString("houseUri")].isNull() && m_house_uri_isValid;

    m_houses_isValid = ::OpenAPI::fromJsonValue(m_houses, json[QString("houses")]);
    m_houses_isSet = !json[QString("houses")].isNull() && m_houses_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_item_date_isValid = ::OpenAPI::fromJsonValue(m_item_date, json[QString("itemDate")]);
    m_item_date_isSet = !json[QString("itemDate")].isNull() && m_item_date_isValid;

    m_laid_paper_type_isValid = ::OpenAPI::fromJsonValue(m_laid_paper_type, json[QString("laidPaperType")]);
    m_laid_paper_type_isSet = !json[QString("laidPaperType")].isNull() && m_laid_paper_type_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_procedure_step_id_isValid = ::OpenAPI::fromJsonValue(m_procedure_step_id, json[QString("procedureStepId")]);
    m_procedure_step_id_isSet = !json[QString("procedureStepId")].isNull() && m_procedure_step_id_isValid;

    m_procedure_step_uri_isValid = ::OpenAPI::fromJsonValue(m_procedure_step_uri, json[QString("procedureStepUri")]);
    m_procedure_step_uri_isSet = !json[QString("procedureStepUri")].isNull() && m_procedure_step_uri_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;

    m_statutory_instrument_id_isValid = ::OpenAPI::fromJsonValue(m_statutory_instrument_id, json[QString("statutoryInstrumentId")]);
    m_statutory_instrument_id_isSet = !json[QString("statutoryInstrumentId")].isNull() && m_statutory_instrument_id_isValid;

    m_statutory_instrument_uri_isValid = ::OpenAPI::fromJsonValue(m_statutory_instrument_uri, json[QString("statutoryInstrumentUri")]);
    m_statutory_instrument_uri_isSet = !json[QString("statutoryInstrumentUri")].isNull() && m_statutory_instrument_uri_isValid;

    m_step_name_isValid = ::OpenAPI::fromJsonValue(m_step_name, json[QString("stepName")]);
    m_step_name_isSet = !json[QString("stepName")].isNull() && m_step_name_isValid;

    m_workpackage_procedure_uri_isValid = ::OpenAPI::fromJsonValue(m_workpackage_procedure_uri, json[QString("workpackageProcedureUri")]);
    m_workpackage_procedure_uri_isSet = !json[QString("workpackageProcedureUri")].isNull() && m_workpackage_procedure_uri_isValid;
}

QString OAIBusinessItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBusinessItem::asJsonObject() const {
    QJsonObject obj;
    if (m_business_item_uri_isSet) {
        obj.insert(QString("businessItemUri"), ::OpenAPI::toJsonValue(m_business_item_uri));
    }
    if (m_house_id_isSet) {
        obj.insert(QString("houseId"), ::OpenAPI::toJsonValue(m_house_id));
    }
    if (m_house_name_isSet) {
        obj.insert(QString("houseName"), ::OpenAPI::toJsonValue(m_house_name));
    }
    if (m_house_uri_isSet) {
        obj.insert(QString("houseUri"), ::OpenAPI::toJsonValue(m_house_uri));
    }
    if (m_houses.size() > 0) {
        obj.insert(QString("houses"), ::OpenAPI::toJsonValue(m_houses));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_item_date_isSet) {
        obj.insert(QString("itemDate"), ::OpenAPI::toJsonValue(m_item_date));
    }
    if (m_laid_paper_type.isSet()) {
        obj.insert(QString("laidPaperType"), ::OpenAPI::toJsonValue(m_laid_paper_type));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_procedure_step_id_isSet) {
        obj.insert(QString("procedureStepId"), ::OpenAPI::toJsonValue(m_procedure_step_id));
    }
    if (m_procedure_step_uri_isSet) {
        obj.insert(QString("procedureStepUri"), ::OpenAPI::toJsonValue(m_procedure_step_uri));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_statutory_instrument_id_isSet) {
        obj.insert(QString("statutoryInstrumentId"), ::OpenAPI::toJsonValue(m_statutory_instrument_id));
    }
    if (m_statutory_instrument_uri_isSet) {
        obj.insert(QString("statutoryInstrumentUri"), ::OpenAPI::toJsonValue(m_statutory_instrument_uri));
    }
    if (m_step_name_isSet) {
        obj.insert(QString("stepName"), ::OpenAPI::toJsonValue(m_step_name));
    }
    if (m_workpackage_procedure_uri_isSet) {
        obj.insert(QString("workpackageProcedureUri"), ::OpenAPI::toJsonValue(m_workpackage_procedure_uri));
    }
    return obj;
}

QString OAIBusinessItem::getBusinessItemUri() const {
    return m_business_item_uri;
}
void OAIBusinessItem::setBusinessItemUri(const QString &business_item_uri) {
    m_business_item_uri = business_item_uri;
    m_business_item_uri_isSet = true;
}

bool OAIBusinessItem::is_business_item_uri_Set() const{
    return m_business_item_uri_isSet;
}

bool OAIBusinessItem::is_business_item_uri_Valid() const{
    return m_business_item_uri_isValid;
}

QString OAIBusinessItem::getHouseId() const {
    return m_house_id;
}
void OAIBusinessItem::setHouseId(const QString &house_id) {
    m_house_id = house_id;
    m_house_id_isSet = true;
}

bool OAIBusinessItem::is_house_id_Set() const{
    return m_house_id_isSet;
}

bool OAIBusinessItem::is_house_id_Valid() const{
    return m_house_id_isValid;
}

QString OAIBusinessItem::getHouseName() const {
    return m_house_name;
}
void OAIBusinessItem::setHouseName(const QString &house_name) {
    m_house_name = house_name;
    m_house_name_isSet = true;
}

bool OAIBusinessItem::is_house_name_Set() const{
    return m_house_name_isSet;
}

bool OAIBusinessItem::is_house_name_Valid() const{
    return m_house_name_isValid;
}

QString OAIBusinessItem::getHouseUri() const {
    return m_house_uri;
}
void OAIBusinessItem::setHouseUri(const QString &house_uri) {
    m_house_uri = house_uri;
    m_house_uri_isSet = true;
}

bool OAIBusinessItem::is_house_uri_Set() const{
    return m_house_uri_isSet;
}

bool OAIBusinessItem::is_house_uri_Valid() const{
    return m_house_uri_isValid;
}

QList<OAIBusinessItemHouse> OAIBusinessItem::getHouses() const {
    return m_houses;
}
void OAIBusinessItem::setHouses(const QList<OAIBusinessItemHouse> &houses) {
    m_houses = houses;
    m_houses_isSet = true;
}

bool OAIBusinessItem::is_houses_Set() const{
    return m_houses_isSet;
}

bool OAIBusinessItem::is_houses_Valid() const{
    return m_houses_isValid;
}

QString OAIBusinessItem::getId() const {
    return m_id;
}
void OAIBusinessItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBusinessItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBusinessItem::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIBusinessItem::getItemDate() const {
    return m_item_date;
}
void OAIBusinessItem::setItemDate(const QDateTime &item_date) {
    m_item_date = item_date;
    m_item_date_isSet = true;
}

bool OAIBusinessItem::is_item_date_Set() const{
    return m_item_date_isSet;
}

bool OAIBusinessItem::is_item_date_Valid() const{
    return m_item_date_isValid;
}

OAILaidPaperType OAIBusinessItem::getLaidPaperType() const {
    return m_laid_paper_type;
}
void OAIBusinessItem::setLaidPaperType(const OAILaidPaperType &laid_paper_type) {
    m_laid_paper_type = laid_paper_type;
    m_laid_paper_type_isSet = true;
}

bool OAIBusinessItem::is_laid_paper_type_Set() const{
    return m_laid_paper_type_isSet;
}

bool OAIBusinessItem::is_laid_paper_type_Valid() const{
    return m_laid_paper_type_isValid;
}

QString OAIBusinessItem::getLink() const {
    return m_link;
}
void OAIBusinessItem::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIBusinessItem::is_link_Set() const{
    return m_link_isSet;
}

bool OAIBusinessItem::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIBusinessItem::getProcedureStepId() const {
    return m_procedure_step_id;
}
void OAIBusinessItem::setProcedureStepId(const QString &procedure_step_id) {
    m_procedure_step_id = procedure_step_id;
    m_procedure_step_id_isSet = true;
}

bool OAIBusinessItem::is_procedure_step_id_Set() const{
    return m_procedure_step_id_isSet;
}

bool OAIBusinessItem::is_procedure_step_id_Valid() const{
    return m_procedure_step_id_isValid;
}

QString OAIBusinessItem::getProcedureStepUri() const {
    return m_procedure_step_uri;
}
void OAIBusinessItem::setProcedureStepUri(const QString &procedure_step_uri) {
    m_procedure_step_uri = procedure_step_uri;
    m_procedure_step_uri_isSet = true;
}

bool OAIBusinessItem::is_procedure_step_uri_Set() const{
    return m_procedure_step_uri_isSet;
}

bool OAIBusinessItem::is_procedure_step_uri_Valid() const{
    return m_procedure_step_uri_isValid;
}

qint32 OAIBusinessItem::getSequence() const {
    return m_sequence;
}
void OAIBusinessItem::setSequence(const qint32 &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIBusinessItem::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIBusinessItem::is_sequence_Valid() const{
    return m_sequence_isValid;
}

QString OAIBusinessItem::getStatutoryInstrumentId() const {
    return m_statutory_instrument_id;
}
void OAIBusinessItem::setStatutoryInstrumentId(const QString &statutory_instrument_id) {
    m_statutory_instrument_id = statutory_instrument_id;
    m_statutory_instrument_id_isSet = true;
}

bool OAIBusinessItem::is_statutory_instrument_id_Set() const{
    return m_statutory_instrument_id_isSet;
}

bool OAIBusinessItem::is_statutory_instrument_id_Valid() const{
    return m_statutory_instrument_id_isValid;
}

QString OAIBusinessItem::getStatutoryInstrumentUri() const {
    return m_statutory_instrument_uri;
}
void OAIBusinessItem::setStatutoryInstrumentUri(const QString &statutory_instrument_uri) {
    m_statutory_instrument_uri = statutory_instrument_uri;
    m_statutory_instrument_uri_isSet = true;
}

bool OAIBusinessItem::is_statutory_instrument_uri_Set() const{
    return m_statutory_instrument_uri_isSet;
}

bool OAIBusinessItem::is_statutory_instrument_uri_Valid() const{
    return m_statutory_instrument_uri_isValid;
}

QString OAIBusinessItem::getStepName() const {
    return m_step_name;
}
void OAIBusinessItem::setStepName(const QString &step_name) {
    m_step_name = step_name;
    m_step_name_isSet = true;
}

bool OAIBusinessItem::is_step_name_Set() const{
    return m_step_name_isSet;
}

bool OAIBusinessItem::is_step_name_Valid() const{
    return m_step_name_isValid;
}

QString OAIBusinessItem::getWorkpackageProcedureUri() const {
    return m_workpackage_procedure_uri;
}
void OAIBusinessItem::setWorkpackageProcedureUri(const QString &workpackage_procedure_uri) {
    m_workpackage_procedure_uri = workpackage_procedure_uri;
    m_workpackage_procedure_uri_isSet = true;
}

bool OAIBusinessItem::is_workpackage_procedure_uri_Set() const{
    return m_workpackage_procedure_uri_isSet;
}

bool OAIBusinessItem::is_workpackage_procedure_uri_Valid() const{
    return m_workpackage_procedure_uri_isValid;
}

bool OAIBusinessItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_item_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_houses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_laid_paper_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_procedure_step_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_procedure_step_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statutory_instrument_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statutory_instrument_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workpackage_procedure_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBusinessItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
