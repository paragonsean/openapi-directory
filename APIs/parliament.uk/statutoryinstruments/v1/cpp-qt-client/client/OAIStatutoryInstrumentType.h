/**
 * Statutory Instruments API
 * An API exposing details of the various types of Statutory Instruments laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStatutoryInstrumentType.h
 *
 * 
 */

#ifndef OAIStatutoryInstrumentType_H
#define OAIStatutoryInstrumentType_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStatutoryInstrumentType : public OAIEnum {
public:
    OAIStatutoryInstrumentType();
    OAIStatutoryInstrumentType(QString json);
    ~OAIStatutoryInstrumentType() override;

    QString asJson() const override;
    QJsonValue asJsonValue() const override;
    void fromJsonValue(QJsonValue json) override;
    void fromJson(QString jsonString) override;

    enum class eOAIStatutoryInstrumentType {
        INVALID_VALUE_OPENAPI_GENERATED = 0,
        DRAFTAFFIRMATIVE, 
        DRAFTNEGATIVE, 
        MADEAFFIRMATIVE, 
        MADENEGATIVE
    };
    OAIStatutoryInstrumentType::eOAIStatutoryInstrumentType getValue() const;
    void setValue(const OAIStatutoryInstrumentType::eOAIStatutoryInstrumentType& value);
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    eOAIStatutoryInstrumentType m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStatutoryInstrumentType)

#endif // OAIStatutoryInstrumentType_H
