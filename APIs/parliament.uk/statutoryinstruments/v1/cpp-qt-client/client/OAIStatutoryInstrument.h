/**
 * Statutory Instruments API
 * An API exposing details of the various types of Statutory Instruments laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStatutoryInstrument.h
 *
 * 
 */

#ifndef OAIStatutoryInstrument_H
#define OAIStatutoryInstrument_H

#include <QJsonObject>

#include "OAIDepartment.h"
#include "OAILaidPaperSummary.h"
#include "OAIProcedure.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDepartment;
class OAIProcedure;
class OAILaidPaperSummary;

class OAIStatutoryInstrument : public OAIObject {
public:
    OAIStatutoryInstrument();
    OAIStatutoryInstrument(QString json);
    ~OAIStatutoryInstrument() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCommonsLayingDate() const;
    void setCommonsLayingDate(const QDateTime &commons_laying_date);
    bool is_commons_laying_date_Set() const;
    bool is_commons_laying_date_Valid() const;

    QDateTime getCommonsPublishedDate() const;
    void setCommonsPublishedDate(const QDateTime &commons_published_date);
    bool is_commons_published_date_Set() const;
    bool is_commons_published_date_Valid() const;

    qint32 getDepartmentId() const;
    void setDepartmentId(const qint32 &department_id);
    bool is_department_id_Set() const;
    bool is_department_id_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIDepartment getLayingBodyDepartment() const;
    void setLayingBodyDepartment(const OAIDepartment &laying_body_department);
    bool is_laying_body_department_Set() const;
    bool is_laying_body_department_Valid() const;

    QString getLayingBodyId() const;
    void setLayingBodyId(const QString &laying_body_id);
    bool is_laying_body_id_Set() const;
    bool is_laying_body_id_Valid() const;

    QString getLayingBodyName() const;
    void setLayingBodyName(const QString &laying_body_name);
    bool is_laying_body_name_Set() const;
    bool is_laying_body_name_Valid() const;

    QString getLink() const;
    void setLink(const QString &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    QDateTime getLordsLayingDate() const;
    void setLordsLayingDate(const QDateTime &lords_laying_date);
    bool is_lords_laying_date_Set() const;
    bool is_lords_laying_date_Valid() const;

    QDateTime getLordsPublishedDate() const;
    void setLordsPublishedDate(const QDateTime &lords_published_date);
    bool is_lords_published_date_Set() const;
    bool is_lords_published_date_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QDateTime getPaperComingIntoForceDate() const;
    void setPaperComingIntoForceDate(const QDateTime &paper_coming_into_force_date);
    bool is_paper_coming_into_force_date_Set() const;
    bool is_paper_coming_into_force_date_Valid() const;

    QString getPaperComingIntoForceNote() const;
    void setPaperComingIntoForceNote(const QString &paper_coming_into_force_note);
    bool is_paper_coming_into_force_note_Set() const;
    bool is_paper_coming_into_force_note_Valid() const;

    QDateTime getPaperMadeDate() const;
    void setPaperMadeDate(const QDateTime &paper_made_date);
    bool is_paper_made_date_Set() const;
    bool is_paper_made_date_Valid() const;

    qint32 getPaperNumber() const;
    void setPaperNumber(const qint32 &paper_number);
    bool is_paper_number_Set() const;
    bool is_paper_number_Valid() const;

    QString getPaperPrefix() const;
    void setPaperPrefix(const QString &paper_prefix);
    bool is_paper_prefix_Set() const;
    bool is_paper_prefix_Valid() const;

    QString getPaperYear() const;
    void setPaperYear(const QString &paper_year);
    bool is_paper_year_Set() const;
    bool is_paper_year_Valid() const;

    OAIProcedure getProcedure() const;
    void setProcedure(const OAIProcedure &procedure);
    bool is_procedure_Set() const;
    bool is_procedure_Valid() const;

    QString getProcedureName() const;
    void setProcedureName(const QString &procedure_name);
    bool is_procedure_name_Set() const;
    bool is_procedure_name_Valid() const;

    QString getProcedureUri() const;
    void setProcedureUri(const QString &procedure_uri);
    bool is_procedure_uri_Set() const;
    bool is_procedure_uri_Valid() const;

    OAILaidPaperSummary getProposedNegativeStatutoryInstrument() const;
    void setProposedNegativeStatutoryInstrument(const OAILaidPaperSummary &proposed_negative_statutory_instrument);
    bool is_proposed_negative_statutory_instrument_Set() const;
    bool is_proposed_negative_statutory_instrument_Valid() const;

    QString getProposedNegativeStatutoryInstrumentPaperId() const;
    void setProposedNegativeStatutoryInstrumentPaperId(const QString &proposed_negative_statutory_instrument_paper_id);
    bool is_proposed_negative_statutory_instrument_paper_id_Set() const;
    bool is_proposed_negative_statutory_instrument_paper_id_Valid() const;

    QString getProposedNegativeStatutoryInstrumentPaperName() const;
    void setProposedNegativeStatutoryInstrumentPaperName(const QString &proposed_negative_statutory_instrument_paper_name);
    bool is_proposed_negative_statutory_instrument_paper_name_Set() const;
    bool is_proposed_negative_statutory_instrument_paper_name_Valid() const;

    QString getUri() const;
    void setUri(const QString &uri);
    bool is_uri_Set() const;
    bool is_uri_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_commons_laying_date;
    bool m_commons_laying_date_isSet;
    bool m_commons_laying_date_isValid;

    QDateTime m_commons_published_date;
    bool m_commons_published_date_isSet;
    bool m_commons_published_date_isValid;

    qint32 m_department_id;
    bool m_department_id_isSet;
    bool m_department_id_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIDepartment m_laying_body_department;
    bool m_laying_body_department_isSet;
    bool m_laying_body_department_isValid;

    QString m_laying_body_id;
    bool m_laying_body_id_isSet;
    bool m_laying_body_id_isValid;

    QString m_laying_body_name;
    bool m_laying_body_name_isSet;
    bool m_laying_body_name_isValid;

    QString m_link;
    bool m_link_isSet;
    bool m_link_isValid;

    QDateTime m_lords_laying_date;
    bool m_lords_laying_date_isSet;
    bool m_lords_laying_date_isValid;

    QDateTime m_lords_published_date;
    bool m_lords_published_date_isSet;
    bool m_lords_published_date_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QDateTime m_paper_coming_into_force_date;
    bool m_paper_coming_into_force_date_isSet;
    bool m_paper_coming_into_force_date_isValid;

    QString m_paper_coming_into_force_note;
    bool m_paper_coming_into_force_note_isSet;
    bool m_paper_coming_into_force_note_isValid;

    QDateTime m_paper_made_date;
    bool m_paper_made_date_isSet;
    bool m_paper_made_date_isValid;

    qint32 m_paper_number;
    bool m_paper_number_isSet;
    bool m_paper_number_isValid;

    QString m_paper_prefix;
    bool m_paper_prefix_isSet;
    bool m_paper_prefix_isValid;

    QString m_paper_year;
    bool m_paper_year_isSet;
    bool m_paper_year_isValid;

    OAIProcedure m_procedure;
    bool m_procedure_isSet;
    bool m_procedure_isValid;

    QString m_procedure_name;
    bool m_procedure_name_isSet;
    bool m_procedure_name_isValid;

    QString m_procedure_uri;
    bool m_procedure_uri_isSet;
    bool m_procedure_uri_isValid;

    OAILaidPaperSummary m_proposed_negative_statutory_instrument;
    bool m_proposed_negative_statutory_instrument_isSet;
    bool m_proposed_negative_statutory_instrument_isValid;

    QString m_proposed_negative_statutory_instrument_paper_id;
    bool m_proposed_negative_statutory_instrument_paper_id_isSet;
    bool m_proposed_negative_statutory_instrument_paper_id_isValid;

    QString m_proposed_negative_statutory_instrument_paper_name;
    bool m_proposed_negative_statutory_instrument_paper_name_isSet;
    bool m_proposed_negative_statutory_instrument_paper_name_isValid;

    QString m_uri;
    bool m_uri_isSet;
    bool m_uri_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStatutoryInstrument)

#endif // OAIStatutoryInstrument_H
