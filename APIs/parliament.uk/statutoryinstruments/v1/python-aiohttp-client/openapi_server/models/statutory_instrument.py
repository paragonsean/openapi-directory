# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.department import Department
from openapi_server.models.laid_paper_summary import LaidPaperSummary
from openapi_server.models.procedure import Procedure
from openapi_server import util


class StatutoryInstrument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commons_laying_date: datetime=None, commons_published_date: datetime=None, department_id: int=None, id: str=None, laying_body_department: Department=None, laying_body_id: str=None, laying_body_name: str=None, link: str=None, lords_laying_date: datetime=None, lords_published_date: datetime=None, name: str=None, paper_coming_into_force_date: datetime=None, paper_coming_into_force_note: str=None, paper_made_date: datetime=None, paper_number: int=None, paper_prefix: str=None, paper_year: str=None, procedure: Procedure=None, procedure_name: str=None, procedure_uri: str=None, proposed_negative_statutory_instrument: LaidPaperSummary=None, proposed_negative_statutory_instrument_paper_id: str=None, proposed_negative_statutory_instrument_paper_name: str=None, uri: str=None):
        """StatutoryInstrument - a model defined in OpenAPI

        :param commons_laying_date: The commons_laying_date of this StatutoryInstrument.
        :param commons_published_date: The commons_published_date of this StatutoryInstrument.
        :param department_id: The department_id of this StatutoryInstrument.
        :param id: The id of this StatutoryInstrument.
        :param laying_body_department: The laying_body_department of this StatutoryInstrument.
        :param laying_body_id: The laying_body_id of this StatutoryInstrument.
        :param laying_body_name: The laying_body_name of this StatutoryInstrument.
        :param link: The link of this StatutoryInstrument.
        :param lords_laying_date: The lords_laying_date of this StatutoryInstrument.
        :param lords_published_date: The lords_published_date of this StatutoryInstrument.
        :param name: The name of this StatutoryInstrument.
        :param paper_coming_into_force_date: The paper_coming_into_force_date of this StatutoryInstrument.
        :param paper_coming_into_force_note: The paper_coming_into_force_note of this StatutoryInstrument.
        :param paper_made_date: The paper_made_date of this StatutoryInstrument.
        :param paper_number: The paper_number of this StatutoryInstrument.
        :param paper_prefix: The paper_prefix of this StatutoryInstrument.
        :param paper_year: The paper_year of this StatutoryInstrument.
        :param procedure: The procedure of this StatutoryInstrument.
        :param procedure_name: The procedure_name of this StatutoryInstrument.
        :param procedure_uri: The procedure_uri of this StatutoryInstrument.
        :param proposed_negative_statutory_instrument: The proposed_negative_statutory_instrument of this StatutoryInstrument.
        :param proposed_negative_statutory_instrument_paper_id: The proposed_negative_statutory_instrument_paper_id of this StatutoryInstrument.
        :param proposed_negative_statutory_instrument_paper_name: The proposed_negative_statutory_instrument_paper_name of this StatutoryInstrument.
        :param uri: The uri of this StatutoryInstrument.
        """
        self.openapi_types = {
            'commons_laying_date': datetime,
            'commons_published_date': datetime,
            'department_id': int,
            'id': str,
            'laying_body_department': Department,
            'laying_body_id': str,
            'laying_body_name': str,
            'link': str,
            'lords_laying_date': datetime,
            'lords_published_date': datetime,
            'name': str,
            'paper_coming_into_force_date': datetime,
            'paper_coming_into_force_note': str,
            'paper_made_date': datetime,
            'paper_number': int,
            'paper_prefix': str,
            'paper_year': str,
            'procedure': Procedure,
            'procedure_name': str,
            'procedure_uri': str,
            'proposed_negative_statutory_instrument': LaidPaperSummary,
            'proposed_negative_statutory_instrument_paper_id': str,
            'proposed_negative_statutory_instrument_paper_name': str,
            'uri': str
        }

        self.attribute_map = {
            'commons_laying_date': 'commonsLayingDate',
            'commons_published_date': 'commonsPublishedDate',
            'department_id': 'departmentId',
            'id': 'id',
            'laying_body_department': 'layingBodyDepartment',
            'laying_body_id': 'layingBodyId',
            'laying_body_name': 'layingBodyName',
            'link': 'link',
            'lords_laying_date': 'lordsLayingDate',
            'lords_published_date': 'lordsPublishedDate',
            'name': 'name',
            'paper_coming_into_force_date': 'paperComingIntoForceDate',
            'paper_coming_into_force_note': 'paperComingIntoForceNote',
            'paper_made_date': 'paperMadeDate',
            'paper_number': 'paperNumber',
            'paper_prefix': 'paperPrefix',
            'paper_year': 'paperYear',
            'procedure': 'procedure',
            'procedure_name': 'procedureName',
            'procedure_uri': 'procedureUri',
            'proposed_negative_statutory_instrument': 'proposedNegativeStatutoryInstrument',
            'proposed_negative_statutory_instrument_paper_id': 'proposedNegativeStatutoryInstrumentPaperId',
            'proposed_negative_statutory_instrument_paper_name': 'proposedNegativeStatutoryInstrumentPaperName',
            'uri': 'uri'
        }

        self._commons_laying_date = commons_laying_date
        self._commons_published_date = commons_published_date
        self._department_id = department_id
        self._id = id
        self._laying_body_department = laying_body_department
        self._laying_body_id = laying_body_id
        self._laying_body_name = laying_body_name
        self._link = link
        self._lords_laying_date = lords_laying_date
        self._lords_published_date = lords_published_date
        self._name = name
        self._paper_coming_into_force_date = paper_coming_into_force_date
        self._paper_coming_into_force_note = paper_coming_into_force_note
        self._paper_made_date = paper_made_date
        self._paper_number = paper_number
        self._paper_prefix = paper_prefix
        self._paper_year = paper_year
        self._procedure = procedure
        self._procedure_name = procedure_name
        self._procedure_uri = procedure_uri
        self._proposed_negative_statutory_instrument = proposed_negative_statutory_instrument
        self._proposed_negative_statutory_instrument_paper_id = proposed_negative_statutory_instrument_paper_id
        self._proposed_negative_statutory_instrument_paper_name = proposed_negative_statutory_instrument_paper_name
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatutoryInstrument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatutoryInstrument of this StatutoryInstrument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commons_laying_date(self):
        """Gets the commons_laying_date of this StatutoryInstrument.


        :return: The commons_laying_date of this StatutoryInstrument.
        :rtype: datetime
        """
        return self._commons_laying_date

    @commons_laying_date.setter
    def commons_laying_date(self, commons_laying_date):
        """Sets the commons_laying_date of this StatutoryInstrument.


        :param commons_laying_date: The commons_laying_date of this StatutoryInstrument.
        :type commons_laying_date: datetime
        """

        self._commons_laying_date = commons_laying_date

    @property
    def commons_published_date(self):
        """Gets the commons_published_date of this StatutoryInstrument.


        :return: The commons_published_date of this StatutoryInstrument.
        :rtype: datetime
        """
        return self._commons_published_date

    @commons_published_date.setter
    def commons_published_date(self, commons_published_date):
        """Sets the commons_published_date of this StatutoryInstrument.


        :param commons_published_date: The commons_published_date of this StatutoryInstrument.
        :type commons_published_date: datetime
        """

        self._commons_published_date = commons_published_date

    @property
    def department_id(self):
        """Gets the department_id of this StatutoryInstrument.


        :return: The department_id of this StatutoryInstrument.
        :rtype: int
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this StatutoryInstrument.


        :param department_id: The department_id of this StatutoryInstrument.
        :type department_id: int
        """

        self._department_id = department_id

    @property
    def id(self):
        """Gets the id of this StatutoryInstrument.


        :return: The id of this StatutoryInstrument.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StatutoryInstrument.


        :param id: The id of this StatutoryInstrument.
        :type id: str
        """

        self._id = id

    @property
    def laying_body_department(self):
        """Gets the laying_body_department of this StatutoryInstrument.


        :return: The laying_body_department of this StatutoryInstrument.
        :rtype: Department
        """
        return self._laying_body_department

    @laying_body_department.setter
    def laying_body_department(self, laying_body_department):
        """Sets the laying_body_department of this StatutoryInstrument.


        :param laying_body_department: The laying_body_department of this StatutoryInstrument.
        :type laying_body_department: Department
        """

        self._laying_body_department = laying_body_department

    @property
    def laying_body_id(self):
        """Gets the laying_body_id of this StatutoryInstrument.


        :return: The laying_body_id of this StatutoryInstrument.
        :rtype: str
        """
        return self._laying_body_id

    @laying_body_id.setter
    def laying_body_id(self, laying_body_id):
        """Sets the laying_body_id of this StatutoryInstrument.


        :param laying_body_id: The laying_body_id of this StatutoryInstrument.
        :type laying_body_id: str
        """

        self._laying_body_id = laying_body_id

    @property
    def laying_body_name(self):
        """Gets the laying_body_name of this StatutoryInstrument.


        :return: The laying_body_name of this StatutoryInstrument.
        :rtype: str
        """
        return self._laying_body_name

    @laying_body_name.setter
    def laying_body_name(self, laying_body_name):
        """Sets the laying_body_name of this StatutoryInstrument.


        :param laying_body_name: The laying_body_name of this StatutoryInstrument.
        :type laying_body_name: str
        """

        self._laying_body_name = laying_body_name

    @property
    def link(self):
        """Gets the link of this StatutoryInstrument.


        :return: The link of this StatutoryInstrument.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this StatutoryInstrument.


        :param link: The link of this StatutoryInstrument.
        :type link: str
        """

        self._link = link

    @property
    def lords_laying_date(self):
        """Gets the lords_laying_date of this StatutoryInstrument.


        :return: The lords_laying_date of this StatutoryInstrument.
        :rtype: datetime
        """
        return self._lords_laying_date

    @lords_laying_date.setter
    def lords_laying_date(self, lords_laying_date):
        """Sets the lords_laying_date of this StatutoryInstrument.


        :param lords_laying_date: The lords_laying_date of this StatutoryInstrument.
        :type lords_laying_date: datetime
        """

        self._lords_laying_date = lords_laying_date

    @property
    def lords_published_date(self):
        """Gets the lords_published_date of this StatutoryInstrument.


        :return: The lords_published_date of this StatutoryInstrument.
        :rtype: datetime
        """
        return self._lords_published_date

    @lords_published_date.setter
    def lords_published_date(self, lords_published_date):
        """Sets the lords_published_date of this StatutoryInstrument.


        :param lords_published_date: The lords_published_date of this StatutoryInstrument.
        :type lords_published_date: datetime
        """

        self._lords_published_date = lords_published_date

    @property
    def name(self):
        """Gets the name of this StatutoryInstrument.


        :return: The name of this StatutoryInstrument.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatutoryInstrument.


        :param name: The name of this StatutoryInstrument.
        :type name: str
        """

        self._name = name

    @property
    def paper_coming_into_force_date(self):
        """Gets the paper_coming_into_force_date of this StatutoryInstrument.


        :return: The paper_coming_into_force_date of this StatutoryInstrument.
        :rtype: datetime
        """
        return self._paper_coming_into_force_date

    @paper_coming_into_force_date.setter
    def paper_coming_into_force_date(self, paper_coming_into_force_date):
        """Sets the paper_coming_into_force_date of this StatutoryInstrument.


        :param paper_coming_into_force_date: The paper_coming_into_force_date of this StatutoryInstrument.
        :type paper_coming_into_force_date: datetime
        """

        self._paper_coming_into_force_date = paper_coming_into_force_date

    @property
    def paper_coming_into_force_note(self):
        """Gets the paper_coming_into_force_note of this StatutoryInstrument.


        :return: The paper_coming_into_force_note of this StatutoryInstrument.
        :rtype: str
        """
        return self._paper_coming_into_force_note

    @paper_coming_into_force_note.setter
    def paper_coming_into_force_note(self, paper_coming_into_force_note):
        """Sets the paper_coming_into_force_note of this StatutoryInstrument.


        :param paper_coming_into_force_note: The paper_coming_into_force_note of this StatutoryInstrument.
        :type paper_coming_into_force_note: str
        """

        self._paper_coming_into_force_note = paper_coming_into_force_note

    @property
    def paper_made_date(self):
        """Gets the paper_made_date of this StatutoryInstrument.


        :return: The paper_made_date of this StatutoryInstrument.
        :rtype: datetime
        """
        return self._paper_made_date

    @paper_made_date.setter
    def paper_made_date(self, paper_made_date):
        """Sets the paper_made_date of this StatutoryInstrument.


        :param paper_made_date: The paper_made_date of this StatutoryInstrument.
        :type paper_made_date: datetime
        """

        self._paper_made_date = paper_made_date

    @property
    def paper_number(self):
        """Gets the paper_number of this StatutoryInstrument.


        :return: The paper_number of this StatutoryInstrument.
        :rtype: int
        """
        return self._paper_number

    @paper_number.setter
    def paper_number(self, paper_number):
        """Sets the paper_number of this StatutoryInstrument.


        :param paper_number: The paper_number of this StatutoryInstrument.
        :type paper_number: int
        """

        self._paper_number = paper_number

    @property
    def paper_prefix(self):
        """Gets the paper_prefix of this StatutoryInstrument.


        :return: The paper_prefix of this StatutoryInstrument.
        :rtype: str
        """
        return self._paper_prefix

    @paper_prefix.setter
    def paper_prefix(self, paper_prefix):
        """Sets the paper_prefix of this StatutoryInstrument.


        :param paper_prefix: The paper_prefix of this StatutoryInstrument.
        :type paper_prefix: str
        """

        self._paper_prefix = paper_prefix

    @property
    def paper_year(self):
        """Gets the paper_year of this StatutoryInstrument.


        :return: The paper_year of this StatutoryInstrument.
        :rtype: str
        """
        return self._paper_year

    @paper_year.setter
    def paper_year(self, paper_year):
        """Sets the paper_year of this StatutoryInstrument.


        :param paper_year: The paper_year of this StatutoryInstrument.
        :type paper_year: str
        """

        self._paper_year = paper_year

    @property
    def procedure(self):
        """Gets the procedure of this StatutoryInstrument.


        :return: The procedure of this StatutoryInstrument.
        :rtype: Procedure
        """
        return self._procedure

    @procedure.setter
    def procedure(self, procedure):
        """Sets the procedure of this StatutoryInstrument.


        :param procedure: The procedure of this StatutoryInstrument.
        :type procedure: Procedure
        """

        self._procedure = procedure

    @property
    def procedure_name(self):
        """Gets the procedure_name of this StatutoryInstrument.


        :return: The procedure_name of this StatutoryInstrument.
        :rtype: str
        """
        return self._procedure_name

    @procedure_name.setter
    def procedure_name(self, procedure_name):
        """Sets the procedure_name of this StatutoryInstrument.


        :param procedure_name: The procedure_name of this StatutoryInstrument.
        :type procedure_name: str
        """

        self._procedure_name = procedure_name

    @property
    def procedure_uri(self):
        """Gets the procedure_uri of this StatutoryInstrument.


        :return: The procedure_uri of this StatutoryInstrument.
        :rtype: str
        """
        return self._procedure_uri

    @procedure_uri.setter
    def procedure_uri(self, procedure_uri):
        """Sets the procedure_uri of this StatutoryInstrument.


        :param procedure_uri: The procedure_uri of this StatutoryInstrument.
        :type procedure_uri: str
        """

        self._procedure_uri = procedure_uri

    @property
    def proposed_negative_statutory_instrument(self):
        """Gets the proposed_negative_statutory_instrument of this StatutoryInstrument.


        :return: The proposed_negative_statutory_instrument of this StatutoryInstrument.
        :rtype: LaidPaperSummary
        """
        return self._proposed_negative_statutory_instrument

    @proposed_negative_statutory_instrument.setter
    def proposed_negative_statutory_instrument(self, proposed_negative_statutory_instrument):
        """Sets the proposed_negative_statutory_instrument of this StatutoryInstrument.


        :param proposed_negative_statutory_instrument: The proposed_negative_statutory_instrument of this StatutoryInstrument.
        :type proposed_negative_statutory_instrument: LaidPaperSummary
        """

        self._proposed_negative_statutory_instrument = proposed_negative_statutory_instrument

    @property
    def proposed_negative_statutory_instrument_paper_id(self):
        """Gets the proposed_negative_statutory_instrument_paper_id of this StatutoryInstrument.


        :return: The proposed_negative_statutory_instrument_paper_id of this StatutoryInstrument.
        :rtype: str
        """
        return self._proposed_negative_statutory_instrument_paper_id

    @proposed_negative_statutory_instrument_paper_id.setter
    def proposed_negative_statutory_instrument_paper_id(self, proposed_negative_statutory_instrument_paper_id):
        """Sets the proposed_negative_statutory_instrument_paper_id of this StatutoryInstrument.


        :param proposed_negative_statutory_instrument_paper_id: The proposed_negative_statutory_instrument_paper_id of this StatutoryInstrument.
        :type proposed_negative_statutory_instrument_paper_id: str
        """

        self._proposed_negative_statutory_instrument_paper_id = proposed_negative_statutory_instrument_paper_id

    @property
    def proposed_negative_statutory_instrument_paper_name(self):
        """Gets the proposed_negative_statutory_instrument_paper_name of this StatutoryInstrument.


        :return: The proposed_negative_statutory_instrument_paper_name of this StatutoryInstrument.
        :rtype: str
        """
        return self._proposed_negative_statutory_instrument_paper_name

    @proposed_negative_statutory_instrument_paper_name.setter
    def proposed_negative_statutory_instrument_paper_name(self, proposed_negative_statutory_instrument_paper_name):
        """Sets the proposed_negative_statutory_instrument_paper_name of this StatutoryInstrument.


        :param proposed_negative_statutory_instrument_paper_name: The proposed_negative_statutory_instrument_paper_name of this StatutoryInstrument.
        :type proposed_negative_statutory_instrument_paper_name: str
        """

        self._proposed_negative_statutory_instrument_paper_name = proposed_negative_statutory_instrument_paper_name

    @property
    def uri(self):
        """Gets the uri of this StatutoryInstrument.


        :return: The uri of this StatutoryInstrument.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this StatutoryInstrument.


        :param uri: The uri of this StatutoryInstrument.
        :type uri: str
        """

        self._uri = uri
