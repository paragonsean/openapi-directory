/**
 * UK Parliament Search Service
 * Performs search on parliament.uk domain. Implements [OpenSearch specification](https://github.com/dewitt/opensearch). Throttled at 10 requests per second per IP address.
 *
 * The version of the OpenAPI document: Live
 * Contact: data@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Query service.
* @module api/QueryApi
* @version Live
*/
export default class QueryApi {

    /**
    * Constructs a new QueryApi. 
    * @alias module:api/QueryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the queryExtensionGet operation.
     * @callback module:api/QueryApi~queryExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search results
     * @param {module:model/String} extension extension
     * @param {String} q 
     * @param {Object} opts Optional parameters
     * @param {Number} [start] 
     * @param {Number} [count] 
     * @param {String} [subdomains] 
     * @param {String} [inUrlPrefixes] 
     * @param {module:api/QueryApi~queryExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    queryExtensionGet(extension, q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'extension' is set
      if (extension === undefined || extension === null) {
        throw new Error("Missing the required parameter 'extension' when calling queryExtensionGet");
      }
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling queryExtensionGet");
      }

      let pathParams = {
        'extension': extension
      };
      let queryParams = {
        'q': q,
        'start': opts['start'],
        'count': opts['count'],
        'subdomains': opts['subdomains'],
        'inUrlPrefixes': opts['inUrlPrefixes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/atom+xml', 'application/json', 'application/rss+xml', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/query.{extension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryGet operation.
     * @callback module:api/QueryApi~queryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search results
     * @param {String} q 
     * @param {Object} opts Optional parameters
     * @param {Number} [start] 
     * @param {Number} [count] 
     * @param {String} [subdomains] 
     * @param {String} [inUrlPrefixes] 
     * @param {module:api/QueryApi~queryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    queryGet(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling queryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'start': opts['start'],
        'count': opts['count'],
        'subdomains': opts['subdomains'],
        'inUrlPrefixes': opts['inUrlPrefixes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/atom+xml', 'application/json', 'application/rss+xml', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
