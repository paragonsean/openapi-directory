# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.biography_item import BiographyItem
from openapi_server import util


class MemberBiography(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, committee_memberships: List[BiographyItem]=None, elections_contested: List[BiographyItem]=None, government_posts: List[BiographyItem]=None, house_memberships: List[BiographyItem]=None, opposition_posts: List[BiographyItem]=None, other_posts: List[BiographyItem]=None, party_affiliations: List[BiographyItem]=None, representations: List[BiographyItem]=None):
        """MemberBiography - a model defined in OpenAPI

        :param committee_memberships: The committee_memberships of this MemberBiography.
        :param elections_contested: The elections_contested of this MemberBiography.
        :param government_posts: The government_posts of this MemberBiography.
        :param house_memberships: The house_memberships of this MemberBiography.
        :param opposition_posts: The opposition_posts of this MemberBiography.
        :param other_posts: The other_posts of this MemberBiography.
        :param party_affiliations: The party_affiliations of this MemberBiography.
        :param representations: The representations of this MemberBiography.
        """
        self.openapi_types = {
            'committee_memberships': List[BiographyItem],
            'elections_contested': List[BiographyItem],
            'government_posts': List[BiographyItem],
            'house_memberships': List[BiographyItem],
            'opposition_posts': List[BiographyItem],
            'other_posts': List[BiographyItem],
            'party_affiliations': List[BiographyItem],
            'representations': List[BiographyItem]
        }

        self.attribute_map = {
            'committee_memberships': 'committeeMemberships',
            'elections_contested': 'electionsContested',
            'government_posts': 'governmentPosts',
            'house_memberships': 'houseMemberships',
            'opposition_posts': 'oppositionPosts',
            'other_posts': 'otherPosts',
            'party_affiliations': 'partyAffiliations',
            'representations': 'representations'
        }

        self._committee_memberships = committee_memberships
        self._elections_contested = elections_contested
        self._government_posts = government_posts
        self._house_memberships = house_memberships
        self._opposition_posts = opposition_posts
        self._other_posts = other_posts
        self._party_affiliations = party_affiliations
        self._representations = representations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MemberBiography':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MemberBiography of this MemberBiography.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def committee_memberships(self):
        """Gets the committee_memberships of this MemberBiography.


        :return: The committee_memberships of this MemberBiography.
        :rtype: List[BiographyItem]
        """
        return self._committee_memberships

    @committee_memberships.setter
    def committee_memberships(self, committee_memberships):
        """Sets the committee_memberships of this MemberBiography.


        :param committee_memberships: The committee_memberships of this MemberBiography.
        :type committee_memberships: List[BiographyItem]
        """

        self._committee_memberships = committee_memberships

    @property
    def elections_contested(self):
        """Gets the elections_contested of this MemberBiography.


        :return: The elections_contested of this MemberBiography.
        :rtype: List[BiographyItem]
        """
        return self._elections_contested

    @elections_contested.setter
    def elections_contested(self, elections_contested):
        """Sets the elections_contested of this MemberBiography.


        :param elections_contested: The elections_contested of this MemberBiography.
        :type elections_contested: List[BiographyItem]
        """

        self._elections_contested = elections_contested

    @property
    def government_posts(self):
        """Gets the government_posts of this MemberBiography.


        :return: The government_posts of this MemberBiography.
        :rtype: List[BiographyItem]
        """
        return self._government_posts

    @government_posts.setter
    def government_posts(self, government_posts):
        """Sets the government_posts of this MemberBiography.


        :param government_posts: The government_posts of this MemberBiography.
        :type government_posts: List[BiographyItem]
        """

        self._government_posts = government_posts

    @property
    def house_memberships(self):
        """Gets the house_memberships of this MemberBiography.


        :return: The house_memberships of this MemberBiography.
        :rtype: List[BiographyItem]
        """
        return self._house_memberships

    @house_memberships.setter
    def house_memberships(self, house_memberships):
        """Sets the house_memberships of this MemberBiography.


        :param house_memberships: The house_memberships of this MemberBiography.
        :type house_memberships: List[BiographyItem]
        """

        self._house_memberships = house_memberships

    @property
    def opposition_posts(self):
        """Gets the opposition_posts of this MemberBiography.


        :return: The opposition_posts of this MemberBiography.
        :rtype: List[BiographyItem]
        """
        return self._opposition_posts

    @opposition_posts.setter
    def opposition_posts(self, opposition_posts):
        """Sets the opposition_posts of this MemberBiography.


        :param opposition_posts: The opposition_posts of this MemberBiography.
        :type opposition_posts: List[BiographyItem]
        """

        self._opposition_posts = opposition_posts

    @property
    def other_posts(self):
        """Gets the other_posts of this MemberBiography.


        :return: The other_posts of this MemberBiography.
        :rtype: List[BiographyItem]
        """
        return self._other_posts

    @other_posts.setter
    def other_posts(self, other_posts):
        """Sets the other_posts of this MemberBiography.


        :param other_posts: The other_posts of this MemberBiography.
        :type other_posts: List[BiographyItem]
        """

        self._other_posts = other_posts

    @property
    def party_affiliations(self):
        """Gets the party_affiliations of this MemberBiography.


        :return: The party_affiliations of this MemberBiography.
        :rtype: List[BiographyItem]
        """
        return self._party_affiliations

    @party_affiliations.setter
    def party_affiliations(self, party_affiliations):
        """Sets the party_affiliations of this MemberBiography.


        :param party_affiliations: The party_affiliations of this MemberBiography.
        :type party_affiliations: List[BiographyItem]
        """

        self._party_affiliations = party_affiliations

    @property
    def representations(self):
        """Gets the representations of this MemberBiography.


        :return: The representations of this MemberBiography.
        :rtype: List[BiographyItem]
        """
        return self._representations

    @representations.setter
    def representations(self, representations):
        """Sets the representations of this MemberBiography.


        :param representations: The representations of this MemberBiography.
        :type representations: List[BiographyItem]
        """

        self._representations = representations
