# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.government_type import GovernmentType
from openapi_server import util


class Party(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abbreviation: str=None, background_colour: str=None, foreground_colour: str=None, government_type: GovernmentType=None, id: int=None, is_independent_party: bool=None, is_lords_main_party: bool=None, is_lords_spiritual_party: bool=None, name: str=None):
        """Party - a model defined in OpenAPI

        :param abbreviation: The abbreviation of this Party.
        :param background_colour: The background_colour of this Party.
        :param foreground_colour: The foreground_colour of this Party.
        :param government_type: The government_type of this Party.
        :param id: The id of this Party.
        :param is_independent_party: The is_independent_party of this Party.
        :param is_lords_main_party: The is_lords_main_party of this Party.
        :param is_lords_spiritual_party: The is_lords_spiritual_party of this Party.
        :param name: The name of this Party.
        """
        self.openapi_types = {
            'abbreviation': str,
            'background_colour': str,
            'foreground_colour': str,
            'government_type': GovernmentType,
            'id': int,
            'is_independent_party': bool,
            'is_lords_main_party': bool,
            'is_lords_spiritual_party': bool,
            'name': str
        }

        self.attribute_map = {
            'abbreviation': 'abbreviation',
            'background_colour': 'backgroundColour',
            'foreground_colour': 'foregroundColour',
            'government_type': 'governmentType',
            'id': 'id',
            'is_independent_party': 'isIndependentParty',
            'is_lords_main_party': 'isLordsMainParty',
            'is_lords_spiritual_party': 'isLordsSpiritualParty',
            'name': 'name'
        }

        self._abbreviation = abbreviation
        self._background_colour = background_colour
        self._foreground_colour = foreground_colour
        self._government_type = government_type
        self._id = id
        self._is_independent_party = is_independent_party
        self._is_lords_main_party = is_lords_main_party
        self._is_lords_spiritual_party = is_lords_spiritual_party
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Party':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Party of this Party.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abbreviation(self):
        """Gets the abbreviation of this Party.


        :return: The abbreviation of this Party.
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this Party.


        :param abbreviation: The abbreviation of this Party.
        :type abbreviation: str
        """

        self._abbreviation = abbreviation

    @property
    def background_colour(self):
        """Gets the background_colour of this Party.


        :return: The background_colour of this Party.
        :rtype: str
        """
        return self._background_colour

    @background_colour.setter
    def background_colour(self, background_colour):
        """Sets the background_colour of this Party.


        :param background_colour: The background_colour of this Party.
        :type background_colour: str
        """

        self._background_colour = background_colour

    @property
    def foreground_colour(self):
        """Gets the foreground_colour of this Party.


        :return: The foreground_colour of this Party.
        :rtype: str
        """
        return self._foreground_colour

    @foreground_colour.setter
    def foreground_colour(self, foreground_colour):
        """Sets the foreground_colour of this Party.


        :param foreground_colour: The foreground_colour of this Party.
        :type foreground_colour: str
        """

        self._foreground_colour = foreground_colour

    @property
    def government_type(self):
        """Gets the government_type of this Party.


        :return: The government_type of this Party.
        :rtype: GovernmentType
        """
        return self._government_type

    @government_type.setter
    def government_type(self, government_type):
        """Sets the government_type of this Party.


        :param government_type: The government_type of this Party.
        :type government_type: GovernmentType
        """

        self._government_type = government_type

    @property
    def id(self):
        """Gets the id of this Party.


        :return: The id of this Party.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Party.


        :param id: The id of this Party.
        :type id: int
        """

        self._id = id

    @property
    def is_independent_party(self):
        """Gets the is_independent_party of this Party.


        :return: The is_independent_party of this Party.
        :rtype: bool
        """
        return self._is_independent_party

    @is_independent_party.setter
    def is_independent_party(self, is_independent_party):
        """Sets the is_independent_party of this Party.


        :param is_independent_party: The is_independent_party of this Party.
        :type is_independent_party: bool
        """

        self._is_independent_party = is_independent_party

    @property
    def is_lords_main_party(self):
        """Gets the is_lords_main_party of this Party.


        :return: The is_lords_main_party of this Party.
        :rtype: bool
        """
        return self._is_lords_main_party

    @is_lords_main_party.setter
    def is_lords_main_party(self, is_lords_main_party):
        """Sets the is_lords_main_party of this Party.


        :param is_lords_main_party: The is_lords_main_party of this Party.
        :type is_lords_main_party: bool
        """

        self._is_lords_main_party = is_lords_main_party

    @property
    def is_lords_spiritual_party(self):
        """Gets the is_lords_spiritual_party of this Party.


        :return: The is_lords_spiritual_party of this Party.
        :rtype: bool
        """
        return self._is_lords_spiritual_party

    @is_lords_spiritual_party.setter
    def is_lords_spiritual_party(self, is_lords_spiritual_party):
        """Sets the is_lords_spiritual_party of this Party.


        :param is_lords_spiritual_party: The is_lords_spiritual_party of this Party.
        :type is_lords_spiritual_party: bool
        """

        self._is_lords_spiritual_party = is_lords_spiritual_party

    @property
    def name(self):
        """Gets the name of this Party.


        :return: The name of this Party.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Party.


        :param name: The name of this Party.
        :type name: str
        """

        self._name = name
