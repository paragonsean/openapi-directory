# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.house import House
from openapi_server import util


class Vote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acted_as_teller: bool=None, _date: datetime=None, division_number: int=None, house: House=None, id: int=None, in_affirmative_lobby: bool=None, number_against: int=None, number_in_favour: int=None, title: str=None):
        """Vote - a model defined in OpenAPI

        :param acted_as_teller: The acted_as_teller of this Vote.
        :param _date: The _date of this Vote.
        :param division_number: The division_number of this Vote.
        :param house: The house of this Vote.
        :param id: The id of this Vote.
        :param in_affirmative_lobby: The in_affirmative_lobby of this Vote.
        :param number_against: The number_against of this Vote.
        :param number_in_favour: The number_in_favour of this Vote.
        :param title: The title of this Vote.
        """
        self.openapi_types = {
            'acted_as_teller': bool,
            '_date': datetime,
            'division_number': int,
            'house': House,
            'id': int,
            'in_affirmative_lobby': bool,
            'number_against': int,
            'number_in_favour': int,
            'title': str
        }

        self.attribute_map = {
            'acted_as_teller': 'actedAsTeller',
            '_date': 'date',
            'division_number': 'divisionNumber',
            'house': 'house',
            'id': 'id',
            'in_affirmative_lobby': 'inAffirmativeLobby',
            'number_against': 'numberAgainst',
            'number_in_favour': 'numberInFavour',
            'title': 'title'
        }

        self._acted_as_teller = acted_as_teller
        self.__date = _date
        self._division_number = division_number
        self._house = house
        self._id = id
        self._in_affirmative_lobby = in_affirmative_lobby
        self._number_against = number_against
        self._number_in_favour = number_in_favour
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Vote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Vote of this Vote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acted_as_teller(self):
        """Gets the acted_as_teller of this Vote.


        :return: The acted_as_teller of this Vote.
        :rtype: bool
        """
        return self._acted_as_teller

    @acted_as_teller.setter
    def acted_as_teller(self, acted_as_teller):
        """Sets the acted_as_teller of this Vote.


        :param acted_as_teller: The acted_as_teller of this Vote.
        :type acted_as_teller: bool
        """

        self._acted_as_teller = acted_as_teller

    @property
    def _date(self):
        """Gets the _date of this Vote.


        :return: The _date of this Vote.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Vote.


        :param _date: The _date of this Vote.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def division_number(self):
        """Gets the division_number of this Vote.


        :return: The division_number of this Vote.
        :rtype: int
        """
        return self._division_number

    @division_number.setter
    def division_number(self, division_number):
        """Sets the division_number of this Vote.


        :param division_number: The division_number of this Vote.
        :type division_number: int
        """

        self._division_number = division_number

    @property
    def house(self):
        """Gets the house of this Vote.


        :return: The house of this Vote.
        :rtype: House
        """
        return self._house

    @house.setter
    def house(self, house):
        """Sets the house of this Vote.


        :param house: The house of this Vote.
        :type house: House
        """

        self._house = house

    @property
    def id(self):
        """Gets the id of this Vote.


        :return: The id of this Vote.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Vote.


        :param id: The id of this Vote.
        :type id: int
        """

        self._id = id

    @property
    def in_affirmative_lobby(self):
        """Gets the in_affirmative_lobby of this Vote.


        :return: The in_affirmative_lobby of this Vote.
        :rtype: bool
        """
        return self._in_affirmative_lobby

    @in_affirmative_lobby.setter
    def in_affirmative_lobby(self, in_affirmative_lobby):
        """Sets the in_affirmative_lobby of this Vote.


        :param in_affirmative_lobby: The in_affirmative_lobby of this Vote.
        :type in_affirmative_lobby: bool
        """

        self._in_affirmative_lobby = in_affirmative_lobby

    @property
    def number_against(self):
        """Gets the number_against of this Vote.


        :return: The number_against of this Vote.
        :rtype: int
        """
        return self._number_against

    @number_against.setter
    def number_against(self, number_against):
        """Sets the number_against of this Vote.


        :param number_against: The number_against of this Vote.
        :type number_against: int
        """

        self._number_against = number_against

    @property
    def number_in_favour(self):
        """Gets the number_in_favour of this Vote.


        :return: The number_in_favour of this Vote.
        :rtype: int
        """
        return self._number_in_favour

    @number_in_favour.setter
    def number_in_favour(self, number_in_favour):
        """Sets the number_in_favour of this Vote.


        :param number_in_favour: The number_in_favour of this Vote.
        :type number_in_favour: int
        """

        self._number_in_favour = number_in_favour

    @property
    def title(self):
        """Gets the title of this Vote.


        :return: The title of this Vote.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Vote.


        :param title: The title of this Vote.
        :type title: str
        """

        self._title = title
