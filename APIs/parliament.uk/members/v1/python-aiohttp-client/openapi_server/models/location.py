# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location_context import LocationContext
from openapi_server.models.party_seat_count import PartySeatCount
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, child_contexts: List[LocationContext]=None, context: LocationContext=None, parent_context: LocationContext=None, state_of_the_parties: List[PartySeatCount]=None):
        """Location - a model defined in OpenAPI

        :param child_contexts: The child_contexts of this Location.
        :param context: The context of this Location.
        :param parent_context: The parent_context of this Location.
        :param state_of_the_parties: The state_of_the_parties of this Location.
        """
        self.openapi_types = {
            'child_contexts': List[LocationContext],
            'context': LocationContext,
            'parent_context': LocationContext,
            'state_of_the_parties': List[PartySeatCount]
        }

        self.attribute_map = {
            'child_contexts': 'childContexts',
            'context': 'context',
            'parent_context': 'parentContext',
            'state_of_the_parties': 'stateOfTheParties'
        }

        self._child_contexts = child_contexts
        self._context = context
        self._parent_context = parent_context
        self._state_of_the_parties = state_of_the_parties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def child_contexts(self):
        """Gets the child_contexts of this Location.


        :return: The child_contexts of this Location.
        :rtype: List[LocationContext]
        """
        return self._child_contexts

    @child_contexts.setter
    def child_contexts(self, child_contexts):
        """Sets the child_contexts of this Location.


        :param child_contexts: The child_contexts of this Location.
        :type child_contexts: List[LocationContext]
        """

        self._child_contexts = child_contexts

    @property
    def context(self):
        """Gets the context of this Location.


        :return: The context of this Location.
        :rtype: LocationContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Location.


        :param context: The context of this Location.
        :type context: LocationContext
        """

        self._context = context

    @property
    def parent_context(self):
        """Gets the parent_context of this Location.


        :return: The parent_context of this Location.
        :rtype: LocationContext
        """
        return self._parent_context

    @parent_context.setter
    def parent_context(self, parent_context):
        """Sets the parent_context of this Location.


        :param parent_context: The parent_context of this Location.
        :type parent_context: LocationContext
        """

        self._parent_context = parent_context

    @property
    def state_of_the_parties(self):
        """Gets the state_of_the_parties of this Location.


        :return: The state_of_the_parties of this Location.
        :rtype: List[PartySeatCount]
        """
        return self._state_of_the_parties

    @state_of_the_parties.setter
    def state_of_the_parties(self, state_of_the_parties):
        """Sets the state_of_the_parties of this Location.


        :param state_of_the_parties: The state_of_the_parties of this Location.
        :type state_of_the_parties: List[PartySeatCount]
        """

        self._state_of_the_parties = state_of_the_parties
