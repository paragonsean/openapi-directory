# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.party import Party
from openapi_server import util


class LordsByType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bishop: int=None, hereditary: int=None, life: int=None, party: Party=None, total: int=None):
        """LordsByType - a model defined in OpenAPI

        :param bishop: The bishop of this LordsByType.
        :param hereditary: The hereditary of this LordsByType.
        :param life: The life of this LordsByType.
        :param party: The party of this LordsByType.
        :param total: The total of this LordsByType.
        """
        self.openapi_types = {
            'bishop': int,
            'hereditary': int,
            'life': int,
            'party': Party,
            'total': int
        }

        self.attribute_map = {
            'bishop': 'bishop',
            'hereditary': 'hereditary',
            'life': 'life',
            'party': 'party',
            'total': 'total'
        }

        self._bishop = bishop
        self._hereditary = hereditary
        self._life = life
        self._party = party
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LordsByType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LordsByType of this LordsByType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bishop(self):
        """Gets the bishop of this LordsByType.


        :return: The bishop of this LordsByType.
        :rtype: int
        """
        return self._bishop

    @bishop.setter
    def bishop(self, bishop):
        """Sets the bishop of this LordsByType.


        :param bishop: The bishop of this LordsByType.
        :type bishop: int
        """

        self._bishop = bishop

    @property
    def hereditary(self):
        """Gets the hereditary of this LordsByType.


        :return: The hereditary of this LordsByType.
        :rtype: int
        """
        return self._hereditary

    @hereditary.setter
    def hereditary(self, hereditary):
        """Sets the hereditary of this LordsByType.


        :param hereditary: The hereditary of this LordsByType.
        :type hereditary: int
        """

        self._hereditary = hereditary

    @property
    def life(self):
        """Gets the life of this LordsByType.


        :return: The life of this LordsByType.
        :rtype: int
        """
        return self._life

    @life.setter
    def life(self, life):
        """Sets the life of this LordsByType.


        :param life: The life of this LordsByType.
        :type life: int
        """

        self._life = life

    @property
    def party(self):
        """Gets the party of this LordsByType.


        :return: The party of this LordsByType.
        :rtype: Party
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this LordsByType.


        :param party: The party of this LordsByType.
        :type party: Party
        """

        self._party = party

    @property
    def total(self):
        """Gets the total of this LordsByType.


        :return: The total of this LordsByType.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this LordsByType.


        :param total: The total of this LordsByType.
        :type total: int
        """

        self._total = total
