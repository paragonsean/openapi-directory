# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location_type import LocationType
from openapi_server import util


class LocationContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, type: LocationType=None, type_name: str=None):
        """LocationContext - a model defined in OpenAPI

        :param id: The id of this LocationContext.
        :param name: The name of this LocationContext.
        :param type: The type of this LocationContext.
        :param type_name: The type_name of this LocationContext.
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'type': LocationType,
            'type_name': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'type': 'type',
            'type_name': 'typeName'
        }

        self._id = id
        self._name = name
        self._type = type
        self._type_name = type_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationContext of this LocationContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this LocationContext.


        :return: The id of this LocationContext.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LocationContext.


        :param id: The id of this LocationContext.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LocationContext.


        :return: The name of this LocationContext.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocationContext.


        :param name: The name of this LocationContext.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this LocationContext.


        :return: The type of this LocationContext.
        :rtype: LocationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LocationContext.


        :param type: The type of this LocationContext.
        :type type: LocationType
        """

        self._type = type

    @property
    def type_name(self):
        """Gets the type_name of this LocationContext.


        :return: The type_name of this LocationContext.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this LocationContext.


        :param type_name: The type_name of this LocationContext.
        :type type_name: str
        """

        self._type_name = type_name
