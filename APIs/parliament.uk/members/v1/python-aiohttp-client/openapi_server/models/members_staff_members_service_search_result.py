# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link import Link
from openapi_server.models.members_staff_item import MembersStaffItem
from openapi_server import util


class MembersStaffMembersServiceSearchResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[MembersStaffItem]=None, links: List[Link]=None, result_context: str=None, skip: int=None, take: int=None, total_results: int=None):
        """MembersStaffMembersServiceSearchResult - a model defined in OpenAPI

        :param items: The items of this MembersStaffMembersServiceSearchResult.
        :param links: The links of this MembersStaffMembersServiceSearchResult.
        :param result_context: The result_context of this MembersStaffMembersServiceSearchResult.
        :param skip: The skip of this MembersStaffMembersServiceSearchResult.
        :param take: The take of this MembersStaffMembersServiceSearchResult.
        :param total_results: The total_results of this MembersStaffMembersServiceSearchResult.
        """
        self.openapi_types = {
            'items': List[MembersStaffItem],
            'links': List[Link],
            'result_context': str,
            'skip': int,
            'take': int,
            'total_results': int
        }

        self.attribute_map = {
            'items': 'items',
            'links': 'links',
            'result_context': 'resultContext',
            'skip': 'skip',
            'take': 'take',
            'total_results': 'totalResults'
        }

        self._items = items
        self._links = links
        self._result_context = result_context
        self._skip = skip
        self._take = take
        self._total_results = total_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MembersStaffMembersServiceSearchResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MembersStaffMembersServiceSearchResult of this MembersStaffMembersServiceSearchResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this MembersStaffMembersServiceSearchResult.


        :return: The items of this MembersStaffMembersServiceSearchResult.
        :rtype: List[MembersStaffItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this MembersStaffMembersServiceSearchResult.


        :param items: The items of this MembersStaffMembersServiceSearchResult.
        :type items: List[MembersStaffItem]
        """

        self._items = items

    @property
    def links(self):
        """Gets the links of this MembersStaffMembersServiceSearchResult.


        :return: The links of this MembersStaffMembersServiceSearchResult.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MembersStaffMembersServiceSearchResult.


        :param links: The links of this MembersStaffMembersServiceSearchResult.
        :type links: List[Link]
        """

        self._links = links

    @property
    def result_context(self):
        """Gets the result_context of this MembersStaffMembersServiceSearchResult.


        :return: The result_context of this MembersStaffMembersServiceSearchResult.
        :rtype: str
        """
        return self._result_context

    @result_context.setter
    def result_context(self, result_context):
        """Sets the result_context of this MembersStaffMembersServiceSearchResult.


        :param result_context: The result_context of this MembersStaffMembersServiceSearchResult.
        :type result_context: str
        """

        self._result_context = result_context

    @property
    def skip(self):
        """Gets the skip of this MembersStaffMembersServiceSearchResult.


        :return: The skip of this MembersStaffMembersServiceSearchResult.
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this MembersStaffMembersServiceSearchResult.


        :param skip: The skip of this MembersStaffMembersServiceSearchResult.
        :type skip: int
        """

        self._skip = skip

    @property
    def take(self):
        """Gets the take of this MembersStaffMembersServiceSearchResult.


        :return: The take of this MembersStaffMembersServiceSearchResult.
        :rtype: int
        """
        return self._take

    @take.setter
    def take(self, take):
        """Sets the take of this MembersStaffMembersServiceSearchResult.


        :param take: The take of this MembersStaffMembersServiceSearchResult.
        :type take: int
        """

        self._take = take

    @property
    def total_results(self):
        """Gets the total_results of this MembersStaffMembersServiceSearchResult.


        :return: The total_results of this MembersStaffMembersServiceSearchResult.
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this MembersStaffMembersServiceSearchResult.


        :param total_results: The total_results of this MembersStaffMembersServiceSearchResult.
        :type total_results: int
        """

        self._total_results = total_results
