# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.party import Party
from openapi_server import util


class PartySeatCount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, female: int=None, male: int=None, non_binary: int=None, party: Party=None, total: int=None):
        """PartySeatCount - a model defined in OpenAPI

        :param female: The female of this PartySeatCount.
        :param male: The male of this PartySeatCount.
        :param non_binary: The non_binary of this PartySeatCount.
        :param party: The party of this PartySeatCount.
        :param total: The total of this PartySeatCount.
        """
        self.openapi_types = {
            'female': int,
            'male': int,
            'non_binary': int,
            'party': Party,
            'total': int
        }

        self.attribute_map = {
            'female': 'female',
            'male': 'male',
            'non_binary': 'nonBinary',
            'party': 'party',
            'total': 'total'
        }

        self._female = female
        self._male = male
        self._non_binary = non_binary
        self._party = party
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartySeatCount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartySeatCount of this PartySeatCount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def female(self):
        """Gets the female of this PartySeatCount.


        :return: The female of this PartySeatCount.
        :rtype: int
        """
        return self._female

    @female.setter
    def female(self, female):
        """Sets the female of this PartySeatCount.


        :param female: The female of this PartySeatCount.
        :type female: int
        """

        self._female = female

    @property
    def male(self):
        """Gets the male of this PartySeatCount.


        :return: The male of this PartySeatCount.
        :rtype: int
        """
        return self._male

    @male.setter
    def male(self, male):
        """Sets the male of this PartySeatCount.


        :param male: The male of this PartySeatCount.
        :type male: int
        """

        self._male = male

    @property
    def non_binary(self):
        """Gets the non_binary of this PartySeatCount.


        :return: The non_binary of this PartySeatCount.
        :rtype: int
        """
        return self._non_binary

    @non_binary.setter
    def non_binary(self, non_binary):
        """Sets the non_binary of this PartySeatCount.


        :param non_binary: The non_binary of this PartySeatCount.
        :type non_binary: int
        """

        self._non_binary = non_binary

    @property
    def party(self):
        """Gets the party of this PartySeatCount.


        :return: The party of this PartySeatCount.
        :rtype: Party
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this PartySeatCount.


        :param party: The party of this PartySeatCount.
        :type party: Party
        """

        self._party = party

    @property
    def total(self):
        """Gets the total of this PartySeatCount.


        :return: The total of this PartySeatCount.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PartySeatCount.


        :param total: The total of this PartySeatCount.
        :type total: int
        """

        self._total = total
