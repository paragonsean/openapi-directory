# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegisteredInterest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, child_interests: List[RegisteredInterest]=None, created_when: datetime=None, deleted_when: datetime=None, id: int=None, interest: str=None, is_correction: bool=None, last_amended_when: datetime=None):
        """RegisteredInterest - a model defined in OpenAPI

        :param child_interests: The child_interests of this RegisteredInterest.
        :param created_when: The created_when of this RegisteredInterest.
        :param deleted_when: The deleted_when of this RegisteredInterest.
        :param id: The id of this RegisteredInterest.
        :param interest: The interest of this RegisteredInterest.
        :param is_correction: The is_correction of this RegisteredInterest.
        :param last_amended_when: The last_amended_when of this RegisteredInterest.
        """
        self.openapi_types = {
            'child_interests': List[RegisteredInterest],
            'created_when': datetime,
            'deleted_when': datetime,
            'id': int,
            'interest': str,
            'is_correction': bool,
            'last_amended_when': datetime
        }

        self.attribute_map = {
            'child_interests': 'childInterests',
            'created_when': 'createdWhen',
            'deleted_when': 'deletedWhen',
            'id': 'id',
            'interest': 'interest',
            'is_correction': 'isCorrection',
            'last_amended_when': 'lastAmendedWhen'
        }

        self._child_interests = child_interests
        self._created_when = created_when
        self._deleted_when = deleted_when
        self._id = id
        self._interest = interest
        self._is_correction = is_correction
        self._last_amended_when = last_amended_when

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisteredInterest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisteredInterest of this RegisteredInterest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def child_interests(self):
        """Gets the child_interests of this RegisteredInterest.


        :return: The child_interests of this RegisteredInterest.
        :rtype: List[RegisteredInterest]
        """
        return self._child_interests

    @child_interests.setter
    def child_interests(self, child_interests):
        """Sets the child_interests of this RegisteredInterest.


        :param child_interests: The child_interests of this RegisteredInterest.
        :type child_interests: List[RegisteredInterest]
        """

        self._child_interests = child_interests

    @property
    def created_when(self):
        """Gets the created_when of this RegisteredInterest.


        :return: The created_when of this RegisteredInterest.
        :rtype: datetime
        """
        return self._created_when

    @created_when.setter
    def created_when(self, created_when):
        """Sets the created_when of this RegisteredInterest.


        :param created_when: The created_when of this RegisteredInterest.
        :type created_when: datetime
        """

        self._created_when = created_when

    @property
    def deleted_when(self):
        """Gets the deleted_when of this RegisteredInterest.


        :return: The deleted_when of this RegisteredInterest.
        :rtype: datetime
        """
        return self._deleted_when

    @deleted_when.setter
    def deleted_when(self, deleted_when):
        """Sets the deleted_when of this RegisteredInterest.


        :param deleted_when: The deleted_when of this RegisteredInterest.
        :type deleted_when: datetime
        """

        self._deleted_when = deleted_when

    @property
    def id(self):
        """Gets the id of this RegisteredInterest.


        :return: The id of this RegisteredInterest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RegisteredInterest.


        :param id: The id of this RegisteredInterest.
        :type id: int
        """

        self._id = id

    @property
    def interest(self):
        """Gets the interest of this RegisteredInterest.


        :return: The interest of this RegisteredInterest.
        :rtype: str
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this RegisteredInterest.


        :param interest: The interest of this RegisteredInterest.
        :type interest: str
        """

        self._interest = interest

    @property
    def is_correction(self):
        """Gets the is_correction of this RegisteredInterest.


        :return: The is_correction of this RegisteredInterest.
        :rtype: bool
        """
        return self._is_correction

    @is_correction.setter
    def is_correction(self, is_correction):
        """Sets the is_correction of this RegisteredInterest.


        :param is_correction: The is_correction of this RegisteredInterest.
        :type is_correction: bool
        """

        self._is_correction = is_correction

    @property
    def last_amended_when(self):
        """Gets the last_amended_when of this RegisteredInterest.


        :return: The last_amended_when of this RegisteredInterest.
        :rtype: datetime
        """
        return self._last_amended_when

    @last_amended_when.setter
    def last_amended_when(self, last_amended_when):
        """Sets the last_amended_when of this RegisteredInterest.


        :param last_amended_when: The last_amended_when of this RegisteredInterest.
        :type last_amended_when: datetime
        """

        self._last_amended_when = last_amended_when
