# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.party import Party
from openapi_server import util


class ElectionCandidate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, member_id: int=None, name: str=None, party: Party=None, rank_order: int=None, result_change: str=None, vote_share: float=None, votes: int=None):
        """ElectionCandidate - a model defined in OpenAPI

        :param member_id: The member_id of this ElectionCandidate.
        :param name: The name of this ElectionCandidate.
        :param party: The party of this ElectionCandidate.
        :param rank_order: The rank_order of this ElectionCandidate.
        :param result_change: The result_change of this ElectionCandidate.
        :param vote_share: The vote_share of this ElectionCandidate.
        :param votes: The votes of this ElectionCandidate.
        """
        self.openapi_types = {
            'member_id': int,
            'name': str,
            'party': Party,
            'rank_order': int,
            'result_change': str,
            'vote_share': float,
            'votes': int
        }

        self.attribute_map = {
            'member_id': 'memberId',
            'name': 'name',
            'party': 'party',
            'rank_order': 'rankOrder',
            'result_change': 'resultChange',
            'vote_share': 'voteShare',
            'votes': 'votes'
        }

        self._member_id = member_id
        self._name = name
        self._party = party
        self._rank_order = rank_order
        self._result_change = result_change
        self._vote_share = vote_share
        self._votes = votes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElectionCandidate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElectionCandidate of this ElectionCandidate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def member_id(self):
        """Gets the member_id of this ElectionCandidate.


        :return: The member_id of this ElectionCandidate.
        :rtype: int
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this ElectionCandidate.


        :param member_id: The member_id of this ElectionCandidate.
        :type member_id: int
        """

        self._member_id = member_id

    @property
    def name(self):
        """Gets the name of this ElectionCandidate.


        :return: The name of this ElectionCandidate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ElectionCandidate.


        :param name: The name of this ElectionCandidate.
        :type name: str
        """

        self._name = name

    @property
    def party(self):
        """Gets the party of this ElectionCandidate.


        :return: The party of this ElectionCandidate.
        :rtype: Party
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this ElectionCandidate.


        :param party: The party of this ElectionCandidate.
        :type party: Party
        """

        self._party = party

    @property
    def rank_order(self):
        """Gets the rank_order of this ElectionCandidate.


        :return: The rank_order of this ElectionCandidate.
        :rtype: int
        """
        return self._rank_order

    @rank_order.setter
    def rank_order(self, rank_order):
        """Sets the rank_order of this ElectionCandidate.


        :param rank_order: The rank_order of this ElectionCandidate.
        :type rank_order: int
        """

        self._rank_order = rank_order

    @property
    def result_change(self):
        """Gets the result_change of this ElectionCandidate.


        :return: The result_change of this ElectionCandidate.
        :rtype: str
        """
        return self._result_change

    @result_change.setter
    def result_change(self, result_change):
        """Sets the result_change of this ElectionCandidate.


        :param result_change: The result_change of this ElectionCandidate.
        :type result_change: str
        """

        self._result_change = result_change

    @property
    def vote_share(self):
        """Gets the vote_share of this ElectionCandidate.


        :return: The vote_share of this ElectionCandidate.
        :rtype: float
        """
        return self._vote_share

    @vote_share.setter
    def vote_share(self, vote_share):
        """Sets the vote_share of this ElectionCandidate.


        :param vote_share: The vote_share of this ElectionCandidate.
        :type vote_share: float
        """

        self._vote_share = vote_share

    @property
    def votes(self):
        """Gets the votes of this ElectionCandidate.


        :return: The votes of this ElectionCandidate.
        :rtype: int
        """
        return self._votes

    @votes.setter
    def votes(self, votes):
        """Sets the votes of this ElectionCandidate.


        :param votes: The votes of this ElectionCandidate.
        :type votes: int
        """

        self._votes = votes
