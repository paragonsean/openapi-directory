# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.government_department import GovernmentDepartment
from openapi_server import util


class AnsweringBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, department: GovernmentDepartment=None, id: int=None, name: str=None, short_name: str=None, target: str=None):
        """AnsweringBody - a model defined in OpenAPI

        :param department: The department of this AnsweringBody.
        :param id: The id of this AnsweringBody.
        :param name: The name of this AnsweringBody.
        :param short_name: The short_name of this AnsweringBody.
        :param target: The target of this AnsweringBody.
        """
        self.openapi_types = {
            'department': GovernmentDepartment,
            'id': int,
            'name': str,
            'short_name': str,
            'target': str
        }

        self.attribute_map = {
            'department': 'department',
            'id': 'id',
            'name': 'name',
            'short_name': 'shortName',
            'target': 'target'
        }

        self._department = department
        self._id = id
        self._name = name
        self._short_name = short_name
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnsweringBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnsweringBody of this AnsweringBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def department(self):
        """Gets the department of this AnsweringBody.


        :return: The department of this AnsweringBody.
        :rtype: GovernmentDepartment
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this AnsweringBody.


        :param department: The department of this AnsweringBody.
        :type department: GovernmentDepartment
        """

        self._department = department

    @property
    def id(self):
        """Gets the id of this AnsweringBody.


        :return: The id of this AnsweringBody.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnsweringBody.


        :param id: The id of this AnsweringBody.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AnsweringBody.


        :return: The name of this AnsweringBody.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnsweringBody.


        :param name: The name of this AnsweringBody.
        :type name: str
        """

        self._name = name

    @property
    def short_name(self):
        """Gets the short_name of this AnsweringBody.


        :return: The short_name of this AnsweringBody.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this AnsweringBody.


        :param short_name: The short_name of this AnsweringBody.
        :type short_name: str
        """

        self._short_name = short_name

    @property
    def target(self):
        """Gets the target of this AnsweringBody.


        :return: The target of this AnsweringBody.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this AnsweringBody.


        :param target: The target of this AnsweringBody.
        :type target: str
        """

        self._target = target
