# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.election_candidate import ElectionCandidate
from openapi_server.models.party import Party
from openapi_server import util


class ElectionResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidates: List[ElectionCandidate]=None, constituency_name: str=None, election_date: datetime=None, election_id: int=None, election_title: str=None, electorate: int=None, is_general_election: bool=None, is_notional: bool=None, majority: int=None, result: str=None, turnout: int=None, winning_party: Party=None):
        """ElectionResult - a model defined in OpenAPI

        :param candidates: The candidates of this ElectionResult.
        :param constituency_name: The constituency_name of this ElectionResult.
        :param election_date: The election_date of this ElectionResult.
        :param election_id: The election_id of this ElectionResult.
        :param election_title: The election_title of this ElectionResult.
        :param electorate: The electorate of this ElectionResult.
        :param is_general_election: The is_general_election of this ElectionResult.
        :param is_notional: The is_notional of this ElectionResult.
        :param majority: The majority of this ElectionResult.
        :param result: The result of this ElectionResult.
        :param turnout: The turnout of this ElectionResult.
        :param winning_party: The winning_party of this ElectionResult.
        """
        self.openapi_types = {
            'candidates': List[ElectionCandidate],
            'constituency_name': str,
            'election_date': datetime,
            'election_id': int,
            'election_title': str,
            'electorate': int,
            'is_general_election': bool,
            'is_notional': bool,
            'majority': int,
            'result': str,
            'turnout': int,
            'winning_party': Party
        }

        self.attribute_map = {
            'candidates': 'candidates',
            'constituency_name': 'constituencyName',
            'election_date': 'electionDate',
            'election_id': 'electionId',
            'election_title': 'electionTitle',
            'electorate': 'electorate',
            'is_general_election': 'isGeneralElection',
            'is_notional': 'isNotional',
            'majority': 'majority',
            'result': 'result',
            'turnout': 'turnout',
            'winning_party': 'winningParty'
        }

        self._candidates = candidates
        self._constituency_name = constituency_name
        self._election_date = election_date
        self._election_id = election_id
        self._election_title = election_title
        self._electorate = electorate
        self._is_general_election = is_general_election
        self._is_notional = is_notional
        self._majority = majority
        self._result = result
        self._turnout = turnout
        self._winning_party = winning_party

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElectionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElectionResult of this ElectionResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidates(self):
        """Gets the candidates of this ElectionResult.


        :return: The candidates of this ElectionResult.
        :rtype: List[ElectionCandidate]
        """
        return self._candidates

    @candidates.setter
    def candidates(self, candidates):
        """Sets the candidates of this ElectionResult.


        :param candidates: The candidates of this ElectionResult.
        :type candidates: List[ElectionCandidate]
        """

        self._candidates = candidates

    @property
    def constituency_name(self):
        """Gets the constituency_name of this ElectionResult.


        :return: The constituency_name of this ElectionResult.
        :rtype: str
        """
        return self._constituency_name

    @constituency_name.setter
    def constituency_name(self, constituency_name):
        """Sets the constituency_name of this ElectionResult.


        :param constituency_name: The constituency_name of this ElectionResult.
        :type constituency_name: str
        """

        self._constituency_name = constituency_name

    @property
    def election_date(self):
        """Gets the election_date of this ElectionResult.


        :return: The election_date of this ElectionResult.
        :rtype: datetime
        """
        return self._election_date

    @election_date.setter
    def election_date(self, election_date):
        """Sets the election_date of this ElectionResult.


        :param election_date: The election_date of this ElectionResult.
        :type election_date: datetime
        """

        self._election_date = election_date

    @property
    def election_id(self):
        """Gets the election_id of this ElectionResult.


        :return: The election_id of this ElectionResult.
        :rtype: int
        """
        return self._election_id

    @election_id.setter
    def election_id(self, election_id):
        """Sets the election_id of this ElectionResult.


        :param election_id: The election_id of this ElectionResult.
        :type election_id: int
        """

        self._election_id = election_id

    @property
    def election_title(self):
        """Gets the election_title of this ElectionResult.


        :return: The election_title of this ElectionResult.
        :rtype: str
        """
        return self._election_title

    @election_title.setter
    def election_title(self, election_title):
        """Sets the election_title of this ElectionResult.


        :param election_title: The election_title of this ElectionResult.
        :type election_title: str
        """

        self._election_title = election_title

    @property
    def electorate(self):
        """Gets the electorate of this ElectionResult.


        :return: The electorate of this ElectionResult.
        :rtype: int
        """
        return self._electorate

    @electorate.setter
    def electorate(self, electorate):
        """Sets the electorate of this ElectionResult.


        :param electorate: The electorate of this ElectionResult.
        :type electorate: int
        """

        self._electorate = electorate

    @property
    def is_general_election(self):
        """Gets the is_general_election of this ElectionResult.


        :return: The is_general_election of this ElectionResult.
        :rtype: bool
        """
        return self._is_general_election

    @is_general_election.setter
    def is_general_election(self, is_general_election):
        """Sets the is_general_election of this ElectionResult.


        :param is_general_election: The is_general_election of this ElectionResult.
        :type is_general_election: bool
        """

        self._is_general_election = is_general_election

    @property
    def is_notional(self):
        """Gets the is_notional of this ElectionResult.


        :return: The is_notional of this ElectionResult.
        :rtype: bool
        """
        return self._is_notional

    @is_notional.setter
    def is_notional(self, is_notional):
        """Sets the is_notional of this ElectionResult.


        :param is_notional: The is_notional of this ElectionResult.
        :type is_notional: bool
        """

        self._is_notional = is_notional

    @property
    def majority(self):
        """Gets the majority of this ElectionResult.


        :return: The majority of this ElectionResult.
        :rtype: int
        """
        return self._majority

    @majority.setter
    def majority(self, majority):
        """Sets the majority of this ElectionResult.


        :param majority: The majority of this ElectionResult.
        :type majority: int
        """

        self._majority = majority

    @property
    def result(self):
        """Gets the result of this ElectionResult.


        :return: The result of this ElectionResult.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ElectionResult.


        :param result: The result of this ElectionResult.
        :type result: str
        """

        self._result = result

    @property
    def turnout(self):
        """Gets the turnout of this ElectionResult.


        :return: The turnout of this ElectionResult.
        :rtype: int
        """
        return self._turnout

    @turnout.setter
    def turnout(self, turnout):
        """Sets the turnout of this ElectionResult.


        :param turnout: The turnout of this ElectionResult.
        :type turnout: int
        """

        self._turnout = turnout

    @property
    def winning_party(self):
        """Gets the winning_party of this ElectionResult.


        :return: The winning_party of this ElectionResult.
        :rtype: Party
        """
        return self._winning_party

    @winning_party.setter
    def winning_party(self, winning_party):
        """Sets the winning_party of this ElectionResult.


        :param winning_party: The winning_party of this ElectionResult.
        :type winning_party: Party
        """

        self._winning_party = winning_party
