# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DebateContribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answer_count: int=None, debate_id: int=None, debate_title: str=None, debate_website_id: str=None, first_timecode: datetime=None, house: str=None, intervention_count: int=None, points_of_order_count: int=None, question_count: int=None, section: str=None, sitting_date: datetime=None, speech_count: int=None, statements_count: int=None, supplementary_question_count: int=None, total_contributions: int=None):
        """DebateContribution - a model defined in OpenAPI

        :param answer_count: The answer_count of this DebateContribution.
        :param debate_id: The debate_id of this DebateContribution.
        :param debate_title: The debate_title of this DebateContribution.
        :param debate_website_id: The debate_website_id of this DebateContribution.
        :param first_timecode: The first_timecode of this DebateContribution.
        :param house: The house of this DebateContribution.
        :param intervention_count: The intervention_count of this DebateContribution.
        :param points_of_order_count: The points_of_order_count of this DebateContribution.
        :param question_count: The question_count of this DebateContribution.
        :param section: The section of this DebateContribution.
        :param sitting_date: The sitting_date of this DebateContribution.
        :param speech_count: The speech_count of this DebateContribution.
        :param statements_count: The statements_count of this DebateContribution.
        :param supplementary_question_count: The supplementary_question_count of this DebateContribution.
        :param total_contributions: The total_contributions of this DebateContribution.
        """
        self.openapi_types = {
            'answer_count': int,
            'debate_id': int,
            'debate_title': str,
            'debate_website_id': str,
            'first_timecode': datetime,
            'house': str,
            'intervention_count': int,
            'points_of_order_count': int,
            'question_count': int,
            'section': str,
            'sitting_date': datetime,
            'speech_count': int,
            'statements_count': int,
            'supplementary_question_count': int,
            'total_contributions': int
        }

        self.attribute_map = {
            'answer_count': 'answerCount',
            'debate_id': 'debateId',
            'debate_title': 'debateTitle',
            'debate_website_id': 'debateWebsiteId',
            'first_timecode': 'firstTimecode',
            'house': 'house',
            'intervention_count': 'interventionCount',
            'points_of_order_count': 'pointsOfOrderCount',
            'question_count': 'questionCount',
            'section': 'section',
            'sitting_date': 'sittingDate',
            'speech_count': 'speechCount',
            'statements_count': 'statementsCount',
            'supplementary_question_count': 'supplementaryQuestionCount',
            'total_contributions': 'totalContributions'
        }

        self._answer_count = answer_count
        self._debate_id = debate_id
        self._debate_title = debate_title
        self._debate_website_id = debate_website_id
        self._first_timecode = first_timecode
        self._house = house
        self._intervention_count = intervention_count
        self._points_of_order_count = points_of_order_count
        self._question_count = question_count
        self._section = section
        self._sitting_date = sitting_date
        self._speech_count = speech_count
        self._statements_count = statements_count
        self._supplementary_question_count = supplementary_question_count
        self._total_contributions = total_contributions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DebateContribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DebateContribution of this DebateContribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answer_count(self):
        """Gets the answer_count of this DebateContribution.


        :return: The answer_count of this DebateContribution.
        :rtype: int
        """
        return self._answer_count

    @answer_count.setter
    def answer_count(self, answer_count):
        """Sets the answer_count of this DebateContribution.


        :param answer_count: The answer_count of this DebateContribution.
        :type answer_count: int
        """

        self._answer_count = answer_count

    @property
    def debate_id(self):
        """Gets the debate_id of this DebateContribution.


        :return: The debate_id of this DebateContribution.
        :rtype: int
        """
        return self._debate_id

    @debate_id.setter
    def debate_id(self, debate_id):
        """Sets the debate_id of this DebateContribution.


        :param debate_id: The debate_id of this DebateContribution.
        :type debate_id: int
        """

        self._debate_id = debate_id

    @property
    def debate_title(self):
        """Gets the debate_title of this DebateContribution.


        :return: The debate_title of this DebateContribution.
        :rtype: str
        """
        return self._debate_title

    @debate_title.setter
    def debate_title(self, debate_title):
        """Sets the debate_title of this DebateContribution.


        :param debate_title: The debate_title of this DebateContribution.
        :type debate_title: str
        """

        self._debate_title = debate_title

    @property
    def debate_website_id(self):
        """Gets the debate_website_id of this DebateContribution.


        :return: The debate_website_id of this DebateContribution.
        :rtype: str
        """
        return self._debate_website_id

    @debate_website_id.setter
    def debate_website_id(self, debate_website_id):
        """Sets the debate_website_id of this DebateContribution.


        :param debate_website_id: The debate_website_id of this DebateContribution.
        :type debate_website_id: str
        """

        self._debate_website_id = debate_website_id

    @property
    def first_timecode(self):
        """Gets the first_timecode of this DebateContribution.


        :return: The first_timecode of this DebateContribution.
        :rtype: datetime
        """
        return self._first_timecode

    @first_timecode.setter
    def first_timecode(self, first_timecode):
        """Sets the first_timecode of this DebateContribution.


        :param first_timecode: The first_timecode of this DebateContribution.
        :type first_timecode: datetime
        """

        self._first_timecode = first_timecode

    @property
    def house(self):
        """Gets the house of this DebateContribution.


        :return: The house of this DebateContribution.
        :rtype: str
        """
        return self._house

    @house.setter
    def house(self, house):
        """Sets the house of this DebateContribution.


        :param house: The house of this DebateContribution.
        :type house: str
        """

        self._house = house

    @property
    def intervention_count(self):
        """Gets the intervention_count of this DebateContribution.


        :return: The intervention_count of this DebateContribution.
        :rtype: int
        """
        return self._intervention_count

    @intervention_count.setter
    def intervention_count(self, intervention_count):
        """Sets the intervention_count of this DebateContribution.


        :param intervention_count: The intervention_count of this DebateContribution.
        :type intervention_count: int
        """

        self._intervention_count = intervention_count

    @property
    def points_of_order_count(self):
        """Gets the points_of_order_count of this DebateContribution.


        :return: The points_of_order_count of this DebateContribution.
        :rtype: int
        """
        return self._points_of_order_count

    @points_of_order_count.setter
    def points_of_order_count(self, points_of_order_count):
        """Sets the points_of_order_count of this DebateContribution.


        :param points_of_order_count: The points_of_order_count of this DebateContribution.
        :type points_of_order_count: int
        """

        self._points_of_order_count = points_of_order_count

    @property
    def question_count(self):
        """Gets the question_count of this DebateContribution.


        :return: The question_count of this DebateContribution.
        :rtype: int
        """
        return self._question_count

    @question_count.setter
    def question_count(self, question_count):
        """Sets the question_count of this DebateContribution.


        :param question_count: The question_count of this DebateContribution.
        :type question_count: int
        """

        self._question_count = question_count

    @property
    def section(self):
        """Gets the section of this DebateContribution.


        :return: The section of this DebateContribution.
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this DebateContribution.


        :param section: The section of this DebateContribution.
        :type section: str
        """

        self._section = section

    @property
    def sitting_date(self):
        """Gets the sitting_date of this DebateContribution.


        :return: The sitting_date of this DebateContribution.
        :rtype: datetime
        """
        return self._sitting_date

    @sitting_date.setter
    def sitting_date(self, sitting_date):
        """Sets the sitting_date of this DebateContribution.


        :param sitting_date: The sitting_date of this DebateContribution.
        :type sitting_date: datetime
        """

        self._sitting_date = sitting_date

    @property
    def speech_count(self):
        """Gets the speech_count of this DebateContribution.


        :return: The speech_count of this DebateContribution.
        :rtype: int
        """
        return self._speech_count

    @speech_count.setter
    def speech_count(self, speech_count):
        """Sets the speech_count of this DebateContribution.


        :param speech_count: The speech_count of this DebateContribution.
        :type speech_count: int
        """

        self._speech_count = speech_count

    @property
    def statements_count(self):
        """Gets the statements_count of this DebateContribution.


        :return: The statements_count of this DebateContribution.
        :rtype: int
        """
        return self._statements_count

    @statements_count.setter
    def statements_count(self, statements_count):
        """Sets the statements_count of this DebateContribution.


        :param statements_count: The statements_count of this DebateContribution.
        :type statements_count: int
        """

        self._statements_count = statements_count

    @property
    def supplementary_question_count(self):
        """Gets the supplementary_question_count of this DebateContribution.


        :return: The supplementary_question_count of this DebateContribution.
        :rtype: int
        """
        return self._supplementary_question_count

    @supplementary_question_count.setter
    def supplementary_question_count(self, supplementary_question_count):
        """Sets the supplementary_question_count of this DebateContribution.


        :param supplementary_question_count: The supplementary_question_count of this DebateContribution.
        :type supplementary_question_count: int
        """

        self._supplementary_question_count = supplementary_question_count

    @property
    def total_contributions(self):
        """Gets the total_contributions of this DebateContribution.


        :return: The total_contributions of this DebateContribution.
        :rtype: int
        """
        return self._total_contributions

    @total_contributions.setter
    def total_contributions(self, total_contributions):
        """Sets the total_contributions of this DebateContribution.


        :param total_contributions: The total_contributions of this DebateContribution.
        :type total_contributions: int
        """

        self._total_contributions = total_contributions
