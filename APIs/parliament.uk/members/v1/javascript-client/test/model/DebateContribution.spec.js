/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MembersApi);
  }
}(this, function(expect, MembersApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MembersApi.DebateContribution();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DebateContribution', function() {
    it('should create an instance of DebateContribution', function() {
      // uncomment below and update the code to test DebateContribution
      //var instance = new MembersApi.DebateContribution();
      //expect(instance).to.be.a(MembersApi.DebateContribution);
    });

    it('should have the property answerCount (base name: "answerCount")', function() {
      // uncomment below and update the code to test the property answerCount
      //var instance = new MembersApi.DebateContribution();
      //expect(instance).to.be();
    });

    it('should have the property debateId (base name: "debateId")', function() {
      // uncomment below and update the code to test the property debateId
      //var instance = new MembersApi.DebateContribution();
      //expect(instance).to.be();
    });

    it('should have the property debateTitle (base name: "debateTitle")', function() {
      // uncomment below and update the code to test the property debateTitle
      //var instance = new MembersApi.DebateContribution();
      //expect(instance).to.be();
    });

    it('should have the property debateWebsiteId (base name: "debateWebsiteId")', function() {
      // uncomment below and update the code to test the property debateWebsiteId
      //var instance = new MembersApi.DebateContribution();
      //expect(instance).to.be();
    });

    it('should have the property firstTimecode (base name: "firstTimecode")', function() {
      // uncomment below and update the code to test the property firstTimecode
      //var instance = new MembersApi.DebateContribution();
      //expect(instance).to.be();
    });

    it('should have the property house (base name: "house")', function() {
      // uncomment below and update the code to test the property house
      //var instance = new MembersApi.DebateContribution();
      //expect(instance).to.be();
    });

    it('should have the property interventionCount (base name: "interventionCount")', function() {
      // uncomment below and update the code to test the property interventionCount
      //var instance = new MembersApi.DebateContribution();
      //expect(instance).to.be();
    });

    it('should have the property pointsOfOrderCount (base name: "pointsOfOrderCount")', function() {
      // uncomment below and update the code to test the property pointsOfOrderCount
      //var instance = new MembersApi.DebateContribution();
      //expect(instance).to.be();
    });

    it('should have the property questionCount (base name: "questionCount")', function() {
      // uncomment below and update the code to test the property questionCount
      //var instance = new MembersApi.DebateContribution();
      //expect(instance).to.be();
    });

    it('should have the property section (base name: "section")', function() {
      // uncomment below and update the code to test the property section
      //var instance = new MembersApi.DebateContribution();
      //expect(instance).to.be();
    });

    it('should have the property sittingDate (base name: "sittingDate")', function() {
      // uncomment below and update the code to test the property sittingDate
      //var instance = new MembersApi.DebateContribution();
      //expect(instance).to.be();
    });

    it('should have the property speechCount (base name: "speechCount")', function() {
      // uncomment below and update the code to test the property speechCount
      //var instance = new MembersApi.DebateContribution();
      //expect(instance).to.be();
    });

    it('should have the property statementsCount (base name: "statementsCount")', function() {
      // uncomment below and update the code to test the property statementsCount
      //var instance = new MembersApi.DebateContribution();
      //expect(instance).to.be();
    });

    it('should have the property supplementaryQuestionCount (base name: "supplementaryQuestionCount")', function() {
      // uncomment below and update the code to test the property supplementaryQuestionCount
      //var instance = new MembersApi.DebateContribution();
      //expect(instance).to.be();
    });

    it('should have the property totalContributions (base name: "totalContributions")', function() {
      // uncomment below and update the code to test the property totalContributions
      //var instance = new MembersApi.DebateContribution();
      //expect(instance).to.be();
    });

  });

}));
