/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ElectionCandidate from './ElectionCandidate';
import Party from './Party';

/**
 * The ElectionResult model module.
 * @module model/ElectionResult
 * @version v1
 */
class ElectionResult {
    /**
     * Constructs a new <code>ElectionResult</code>.
     * @alias module:model/ElectionResult
     */
    constructor() { 
        
        ElectionResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ElectionResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ElectionResult} obj Optional instance to populate.
     * @return {module:model/ElectionResult} The populated <code>ElectionResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ElectionResult();

            if (data.hasOwnProperty('candidates')) {
                obj['candidates'] = ApiClient.convertToType(data['candidates'], [ElectionCandidate]);
            }
            if (data.hasOwnProperty('constituencyName')) {
                obj['constituencyName'] = ApiClient.convertToType(data['constituencyName'], 'String');
            }
            if (data.hasOwnProperty('electionDate')) {
                obj['electionDate'] = ApiClient.convertToType(data['electionDate'], 'Date');
            }
            if (data.hasOwnProperty('electionId')) {
                obj['electionId'] = ApiClient.convertToType(data['electionId'], 'Number');
            }
            if (data.hasOwnProperty('electionTitle')) {
                obj['electionTitle'] = ApiClient.convertToType(data['electionTitle'], 'String');
            }
            if (data.hasOwnProperty('electorate')) {
                obj['electorate'] = ApiClient.convertToType(data['electorate'], 'Number');
            }
            if (data.hasOwnProperty('isGeneralElection')) {
                obj['isGeneralElection'] = ApiClient.convertToType(data['isGeneralElection'], 'Boolean');
            }
            if (data.hasOwnProperty('isNotional')) {
                obj['isNotional'] = ApiClient.convertToType(data['isNotional'], 'Boolean');
            }
            if (data.hasOwnProperty('majority')) {
                obj['majority'] = ApiClient.convertToType(data['majority'], 'Number');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('turnout')) {
                obj['turnout'] = ApiClient.convertToType(data['turnout'], 'Number');
            }
            if (data.hasOwnProperty('winningParty')) {
                obj['winningParty'] = Party.constructFromObject(data['winningParty']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ElectionResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ElectionResult</code>.
     */
    static validateJSON(data) {
        if (data['candidates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['candidates'])) {
                throw new Error("Expected the field `candidates` to be an array in the JSON data but got " + data['candidates']);
            }
            // validate the optional field `candidates` (array)
            for (const item of data['candidates']) {
                ElectionCandidate.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['constituencyName'] && !(typeof data['constituencyName'] === 'string' || data['constituencyName'] instanceof String)) {
            throw new Error("Expected the field `constituencyName` to be a primitive type in the JSON string but got " + data['constituencyName']);
        }
        // ensure the json data is a string
        if (data['electionTitle'] && !(typeof data['electionTitle'] === 'string' || data['electionTitle'] instanceof String)) {
            throw new Error("Expected the field `electionTitle` to be a primitive type in the JSON string but got " + data['electionTitle']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }
        // validate the optional field `winningParty`
        if (data['winningParty']) { // data not null
          Party.validateJSON(data['winningParty']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/ElectionCandidate>} candidates
 */
ElectionResult.prototype['candidates'] = undefined;

/**
 * @member {String} constituencyName
 */
ElectionResult.prototype['constituencyName'] = undefined;

/**
 * @member {Date} electionDate
 */
ElectionResult.prototype['electionDate'] = undefined;

/**
 * @member {Number} electionId
 */
ElectionResult.prototype['electionId'] = undefined;

/**
 * @member {String} electionTitle
 */
ElectionResult.prototype['electionTitle'] = undefined;

/**
 * @member {Number} electorate
 */
ElectionResult.prototype['electorate'] = undefined;

/**
 * @member {Boolean} isGeneralElection
 */
ElectionResult.prototype['isGeneralElection'] = undefined;

/**
 * @member {Boolean} isNotional
 */
ElectionResult.prototype['isNotional'] = undefined;

/**
 * @member {Number} majority
 */
ElectionResult.prototype['majority'] = undefined;

/**
 * @member {String} result
 */
ElectionResult.prototype['result'] = undefined;

/**
 * @member {Number} turnout
 */
ElectionResult.prototype['turnout'] = undefined;

/**
 * @member {module:model/Party} winningParty
 */
ElectionResult.prototype['winningParty'] = undefined;






export default ElectionResult;

