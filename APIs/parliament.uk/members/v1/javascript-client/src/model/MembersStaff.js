/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Member from './Member';
import Staff from './Staff';

/**
 * The MembersStaff model module.
 * @module model/MembersStaff
 * @version v1
 */
class MembersStaff {
    /**
     * Constructs a new <code>MembersStaff</code>.
     * @alias module:model/MembersStaff
     */
    constructor() { 
        
        MembersStaff.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MembersStaff</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MembersStaff} obj Optional instance to populate.
     * @return {module:model/MembersStaff} The populated <code>MembersStaff</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MembersStaff();

            if (data.hasOwnProperty('member')) {
                obj['member'] = Member.constructFromObject(data['member']);
            }
            if (data.hasOwnProperty('staff')) {
                obj['staff'] = ApiClient.convertToType(data['staff'], [Staff]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MembersStaff</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MembersStaff</code>.
     */
    static validateJSON(data) {
        // validate the optional field `member`
        if (data['member']) { // data not null
          Member.validateJSON(data['member']);
        }
        if (data['staff']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['staff'])) {
                throw new Error("Expected the field `staff` to be an array in the JSON data but got " + data['staff']);
            }
            // validate the optional field `staff` (array)
            for (const item of data['staff']) {
                Staff.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/Member} member
 */
MembersStaff.prototype['member'] = undefined;

/**
 * @member {Array.<module:model/Staff>} staff
 */
MembersStaff.prototype['staff'] = undefined;






export default MembersStaff;

