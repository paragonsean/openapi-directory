/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DebateContribution model module.
 * @module model/DebateContribution
 * @version v1
 */
class DebateContribution {
    /**
     * Constructs a new <code>DebateContribution</code>.
     * @alias module:model/DebateContribution
     */
    constructor() { 
        
        DebateContribution.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DebateContribution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DebateContribution} obj Optional instance to populate.
     * @return {module:model/DebateContribution} The populated <code>DebateContribution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DebateContribution();

            if (data.hasOwnProperty('answerCount')) {
                obj['answerCount'] = ApiClient.convertToType(data['answerCount'], 'Number');
            }
            if (data.hasOwnProperty('debateId')) {
                obj['debateId'] = ApiClient.convertToType(data['debateId'], 'Number');
            }
            if (data.hasOwnProperty('debateTitle')) {
                obj['debateTitle'] = ApiClient.convertToType(data['debateTitle'], 'String');
            }
            if (data.hasOwnProperty('debateWebsiteId')) {
                obj['debateWebsiteId'] = ApiClient.convertToType(data['debateWebsiteId'], 'String');
            }
            if (data.hasOwnProperty('firstTimecode')) {
                obj['firstTimecode'] = ApiClient.convertToType(data['firstTimecode'], 'Date');
            }
            if (data.hasOwnProperty('house')) {
                obj['house'] = ApiClient.convertToType(data['house'], 'String');
            }
            if (data.hasOwnProperty('interventionCount')) {
                obj['interventionCount'] = ApiClient.convertToType(data['interventionCount'], 'Number');
            }
            if (data.hasOwnProperty('pointsOfOrderCount')) {
                obj['pointsOfOrderCount'] = ApiClient.convertToType(data['pointsOfOrderCount'], 'Number');
            }
            if (data.hasOwnProperty('questionCount')) {
                obj['questionCount'] = ApiClient.convertToType(data['questionCount'], 'Number');
            }
            if (data.hasOwnProperty('section')) {
                obj['section'] = ApiClient.convertToType(data['section'], 'String');
            }
            if (data.hasOwnProperty('sittingDate')) {
                obj['sittingDate'] = ApiClient.convertToType(data['sittingDate'], 'Date');
            }
            if (data.hasOwnProperty('speechCount')) {
                obj['speechCount'] = ApiClient.convertToType(data['speechCount'], 'Number');
            }
            if (data.hasOwnProperty('statementsCount')) {
                obj['statementsCount'] = ApiClient.convertToType(data['statementsCount'], 'Number');
            }
            if (data.hasOwnProperty('supplementaryQuestionCount')) {
                obj['supplementaryQuestionCount'] = ApiClient.convertToType(data['supplementaryQuestionCount'], 'Number');
            }
            if (data.hasOwnProperty('totalContributions')) {
                obj['totalContributions'] = ApiClient.convertToType(data['totalContributions'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DebateContribution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DebateContribution</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['debateTitle'] && !(typeof data['debateTitle'] === 'string' || data['debateTitle'] instanceof String)) {
            throw new Error("Expected the field `debateTitle` to be a primitive type in the JSON string but got " + data['debateTitle']);
        }
        // ensure the json data is a string
        if (data['debateWebsiteId'] && !(typeof data['debateWebsiteId'] === 'string' || data['debateWebsiteId'] instanceof String)) {
            throw new Error("Expected the field `debateWebsiteId` to be a primitive type in the JSON string but got " + data['debateWebsiteId']);
        }
        // ensure the json data is a string
        if (data['house'] && !(typeof data['house'] === 'string' || data['house'] instanceof String)) {
            throw new Error("Expected the field `house` to be a primitive type in the JSON string but got " + data['house']);
        }
        // ensure the json data is a string
        if (data['section'] && !(typeof data['section'] === 'string' || data['section'] instanceof String)) {
            throw new Error("Expected the field `section` to be a primitive type in the JSON string but got " + data['section']);
        }

        return true;
    }


}



/**
 * @member {Number} answerCount
 */
DebateContribution.prototype['answerCount'] = undefined;

/**
 * @member {Number} debateId
 */
DebateContribution.prototype['debateId'] = undefined;

/**
 * @member {String} debateTitle
 */
DebateContribution.prototype['debateTitle'] = undefined;

/**
 * @member {String} debateWebsiteId
 */
DebateContribution.prototype['debateWebsiteId'] = undefined;

/**
 * @member {Date} firstTimecode
 */
DebateContribution.prototype['firstTimecode'] = undefined;

/**
 * @member {String} house
 */
DebateContribution.prototype['house'] = undefined;

/**
 * @member {Number} interventionCount
 */
DebateContribution.prototype['interventionCount'] = undefined;

/**
 * @member {Number} pointsOfOrderCount
 */
DebateContribution.prototype['pointsOfOrderCount'] = undefined;

/**
 * @member {Number} questionCount
 */
DebateContribution.prototype['questionCount'] = undefined;

/**
 * @member {String} section
 */
DebateContribution.prototype['section'] = undefined;

/**
 * @member {Date} sittingDate
 */
DebateContribution.prototype['sittingDate'] = undefined;

/**
 * @member {Number} speechCount
 */
DebateContribution.prototype['speechCount'] = undefined;

/**
 * @member {Number} statementsCount
 */
DebateContribution.prototype['statementsCount'] = undefined;

/**
 * @member {Number} supplementaryQuestionCount
 */
DebateContribution.prototype['supplementaryQuestionCount'] = undefined;

/**
 * @member {Number} totalContributions
 */
DebateContribution.prototype['totalContributions'] = undefined;






export default DebateContribution;

