/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnsweringBody from './AnsweringBody';
import GroupedQuestion from './GroupedQuestion';
import House from './House';
import Member from './Member';

/**
 * The WrittenQuestion model module.
 * @module model/WrittenQuestion
 * @version v1
 */
class WrittenQuestion {
    /**
     * Constructs a new <code>WrittenQuestion</code>.
     * @alias module:model/WrittenQuestion
     */
    constructor() { 
        
        WrittenQuestion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WrittenQuestion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WrittenQuestion} obj Optional instance to populate.
     * @return {module:model/WrittenQuestion} The populated <code>WrittenQuestion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WrittenQuestion();

            if (data.hasOwnProperty('answerIsCorrection')) {
                obj['answerIsCorrection'] = ApiClient.convertToType(data['answerIsCorrection'], 'Boolean');
            }
            if (data.hasOwnProperty('answerIsHolding')) {
                obj['answerIsHolding'] = ApiClient.convertToType(data['answerIsHolding'], 'Boolean');
            }
            if (data.hasOwnProperty('answerText')) {
                obj['answerText'] = ApiClient.convertToType(data['answerText'], 'String');
            }
            if (data.hasOwnProperty('answeringBody')) {
                obj['answeringBody'] = AnsweringBody.constructFromObject(data['answeringBody']);
            }
            if (data.hasOwnProperty('answeringBodyId')) {
                obj['answeringBodyId'] = ApiClient.convertToType(data['answeringBodyId'], 'Number');
            }
            if (data.hasOwnProperty('answeringMember')) {
                obj['answeringMember'] = Member.constructFromObject(data['answeringMember']);
            }
            if (data.hasOwnProperty('answeringMemberId')) {
                obj['answeringMemberId'] = ApiClient.convertToType(data['answeringMemberId'], 'Number');
            }
            if (data.hasOwnProperty('askingMemberId')) {
                obj['askingMemberId'] = ApiClient.convertToType(data['askingMemberId'], 'Number');
            }
            if (data.hasOwnProperty('attachmentCount')) {
                obj['attachmentCount'] = ApiClient.convertToType(data['attachmentCount'], 'Number');
            }
            if (data.hasOwnProperty('correctingMember')) {
                obj['correctingMember'] = Member.constructFromObject(data['correctingMember']);
            }
            if (data.hasOwnProperty('correctingMemberId')) {
                obj['correctingMemberId'] = ApiClient.convertToType(data['correctingMemberId'], 'Number');
            }
            if (data.hasOwnProperty('dateAnswered')) {
                obj['dateAnswered'] = ApiClient.convertToType(data['dateAnswered'], 'Date');
            }
            if (data.hasOwnProperty('dateForAnswer')) {
                obj['dateForAnswer'] = ApiClient.convertToType(data['dateForAnswer'], 'Date');
            }
            if (data.hasOwnProperty('dateTabled')) {
                obj['dateTabled'] = ApiClient.convertToType(data['dateTabled'], 'Date');
            }
            if (data.hasOwnProperty('groupedQuestions')) {
                obj['groupedQuestions'] = ApiClient.convertToType(data['groupedQuestions'], ['String']);
            }
            if (data.hasOwnProperty('groupedQuestionsDates')) {
                obj['groupedQuestionsDates'] = ApiClient.convertToType(data['groupedQuestionsDates'], [GroupedQuestion]);
            }
            if (data.hasOwnProperty('heading')) {
                obj['heading'] = ApiClient.convertToType(data['heading'], 'String');
            }
            if (data.hasOwnProperty('house')) {
                obj['house'] = House.constructFromObject(data['house']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isNamedDay')) {
                obj['isNamedDay'] = ApiClient.convertToType(data['isNamedDay'], 'Boolean');
            }
            if (data.hasOwnProperty('isWithdrawn')) {
                obj['isWithdrawn'] = ApiClient.convertToType(data['isWithdrawn'], 'Boolean');
            }
            if (data.hasOwnProperty('memberHasInterest')) {
                obj['memberHasInterest'] = ApiClient.convertToType(data['memberHasInterest'], 'Boolean');
            }
            if (data.hasOwnProperty('questionText')) {
                obj['questionText'] = ApiClient.convertToType(data['questionText'], 'String');
            }
            if (data.hasOwnProperty('uin')) {
                obj['uin'] = ApiClient.convertToType(data['uin'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WrittenQuestion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WrittenQuestion</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['answerText'] && !(typeof data['answerText'] === 'string' || data['answerText'] instanceof String)) {
            throw new Error("Expected the field `answerText` to be a primitive type in the JSON string but got " + data['answerText']);
        }
        // validate the optional field `answeringBody`
        if (data['answeringBody']) { // data not null
          AnsweringBody.validateJSON(data['answeringBody']);
        }
        // validate the optional field `answeringMember`
        if (data['answeringMember']) { // data not null
          Member.validateJSON(data['answeringMember']);
        }
        // validate the optional field `correctingMember`
        if (data['correctingMember']) { // data not null
          Member.validateJSON(data['correctingMember']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['groupedQuestions'])) {
            throw new Error("Expected the field `groupedQuestions` to be an array in the JSON data but got " + data['groupedQuestions']);
        }
        if (data['groupedQuestionsDates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groupedQuestionsDates'])) {
                throw new Error("Expected the field `groupedQuestionsDates` to be an array in the JSON data but got " + data['groupedQuestionsDates']);
            }
            // validate the optional field `groupedQuestionsDates` (array)
            for (const item of data['groupedQuestionsDates']) {
                GroupedQuestion.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['heading'] && !(typeof data['heading'] === 'string' || data['heading'] instanceof String)) {
            throw new Error("Expected the field `heading` to be a primitive type in the JSON string but got " + data['heading']);
        }
        // ensure the json data is a string
        if (data['questionText'] && !(typeof data['questionText'] === 'string' || data['questionText'] instanceof String)) {
            throw new Error("Expected the field `questionText` to be a primitive type in the JSON string but got " + data['questionText']);
        }
        // ensure the json data is a string
        if (data['uin'] && !(typeof data['uin'] === 'string' || data['uin'] instanceof String)) {
            throw new Error("Expected the field `uin` to be a primitive type in the JSON string but got " + data['uin']);
        }

        return true;
    }


}



/**
 * @member {Boolean} answerIsCorrection
 */
WrittenQuestion.prototype['answerIsCorrection'] = undefined;

/**
 * @member {Boolean} answerIsHolding
 */
WrittenQuestion.prototype['answerIsHolding'] = undefined;

/**
 * @member {String} answerText
 */
WrittenQuestion.prototype['answerText'] = undefined;

/**
 * @member {module:model/AnsweringBody} answeringBody
 */
WrittenQuestion.prototype['answeringBody'] = undefined;

/**
 * @member {Number} answeringBodyId
 */
WrittenQuestion.prototype['answeringBodyId'] = undefined;

/**
 * @member {module:model/Member} answeringMember
 */
WrittenQuestion.prototype['answeringMember'] = undefined;

/**
 * @member {Number} answeringMemberId
 */
WrittenQuestion.prototype['answeringMemberId'] = undefined;

/**
 * @member {Number} askingMemberId
 */
WrittenQuestion.prototype['askingMemberId'] = undefined;

/**
 * @member {Number} attachmentCount
 */
WrittenQuestion.prototype['attachmentCount'] = undefined;

/**
 * @member {module:model/Member} correctingMember
 */
WrittenQuestion.prototype['correctingMember'] = undefined;

/**
 * @member {Number} correctingMemberId
 */
WrittenQuestion.prototype['correctingMemberId'] = undefined;

/**
 * @member {Date} dateAnswered
 */
WrittenQuestion.prototype['dateAnswered'] = undefined;

/**
 * @member {Date} dateForAnswer
 */
WrittenQuestion.prototype['dateForAnswer'] = undefined;

/**
 * @member {Date} dateTabled
 */
WrittenQuestion.prototype['dateTabled'] = undefined;

/**
 * @member {Array.<String>} groupedQuestions
 */
WrittenQuestion.prototype['groupedQuestions'] = undefined;

/**
 * @member {Array.<module:model/GroupedQuestion>} groupedQuestionsDates
 */
WrittenQuestion.prototype['groupedQuestionsDates'] = undefined;

/**
 * @member {String} heading
 */
WrittenQuestion.prototype['heading'] = undefined;

/**
 * @member {module:model/House} house
 */
WrittenQuestion.prototype['house'] = undefined;

/**
 * @member {Number} id
 */
WrittenQuestion.prototype['id'] = undefined;

/**
 * @member {Boolean} isNamedDay
 */
WrittenQuestion.prototype['isNamedDay'] = undefined;

/**
 * @member {Boolean} isWithdrawn
 */
WrittenQuestion.prototype['isWithdrawn'] = undefined;

/**
 * @member {Boolean} memberHasInterest
 */
WrittenQuestion.prototype['memberHasInterest'] = undefined;

/**
 * @member {String} questionText
 */
WrittenQuestion.prototype['questionText'] = undefined;

/**
 * @member {String} uin
 */
WrittenQuestion.prototype['uin'] = undefined;






export default WrittenQuestion;

