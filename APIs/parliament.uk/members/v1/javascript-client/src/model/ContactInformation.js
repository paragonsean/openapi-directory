/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContactInformation model module.
 * @module model/ContactInformation
 * @version v1
 */
class ContactInformation {
    /**
     * Constructs a new <code>ContactInformation</code>.
     * @alias module:model/ContactInformation
     */
    constructor() { 
        
        ContactInformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContactInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactInformation} obj Optional instance to populate.
     * @return {module:model/ContactInformation} The populated <code>ContactInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactInformation();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fax')) {
                obj['fax'] = ApiClient.convertToType(data['fax'], 'String');
            }
            if (data.hasOwnProperty('isPreferred')) {
                obj['isPreferred'] = ApiClient.convertToType(data['isPreferred'], 'Boolean');
            }
            if (data.hasOwnProperty('isWebAddress')) {
                obj['isWebAddress'] = ApiClient.convertToType(data['isWebAddress'], 'Boolean');
            }
            if (data.hasOwnProperty('line1')) {
                obj['line1'] = ApiClient.convertToType(data['line1'], 'String');
            }
            if (data.hasOwnProperty('line2')) {
                obj['line2'] = ApiClient.convertToType(data['line2'], 'String');
            }
            if (data.hasOwnProperty('line3')) {
                obj['line3'] = ApiClient.convertToType(data['line3'], 'String');
            }
            if (data.hasOwnProperty('line4')) {
                obj['line4'] = ApiClient.convertToType(data['line4'], 'String');
            }
            if (data.hasOwnProperty('line5')) {
                obj['line5'] = ApiClient.convertToType(data['line5'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('postcode')) {
                obj['postcode'] = ApiClient.convertToType(data['postcode'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('typeDescription')) {
                obj['typeDescription'] = ApiClient.convertToType(data['typeDescription'], 'String');
            }
            if (data.hasOwnProperty('typeId')) {
                obj['typeId'] = ApiClient.convertToType(data['typeId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactInformation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fax'] && !(typeof data['fax'] === 'string' || data['fax'] instanceof String)) {
            throw new Error("Expected the field `fax` to be a primitive type in the JSON string but got " + data['fax']);
        }
        // ensure the json data is a string
        if (data['line1'] && !(typeof data['line1'] === 'string' || data['line1'] instanceof String)) {
            throw new Error("Expected the field `line1` to be a primitive type in the JSON string but got " + data['line1']);
        }
        // ensure the json data is a string
        if (data['line2'] && !(typeof data['line2'] === 'string' || data['line2'] instanceof String)) {
            throw new Error("Expected the field `line2` to be a primitive type in the JSON string but got " + data['line2']);
        }
        // ensure the json data is a string
        if (data['line3'] && !(typeof data['line3'] === 'string' || data['line3'] instanceof String)) {
            throw new Error("Expected the field `line3` to be a primitive type in the JSON string but got " + data['line3']);
        }
        // ensure the json data is a string
        if (data['line4'] && !(typeof data['line4'] === 'string' || data['line4'] instanceof String)) {
            throw new Error("Expected the field `line4` to be a primitive type in the JSON string but got " + data['line4']);
        }
        // ensure the json data is a string
        if (data['line5'] && !(typeof data['line5'] === 'string' || data['line5'] instanceof String)) {
            throw new Error("Expected the field `line5` to be a primitive type in the JSON string but got " + data['line5']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['postcode'] && !(typeof data['postcode'] === 'string' || data['postcode'] instanceof String)) {
            throw new Error("Expected the field `postcode` to be a primitive type in the JSON string but got " + data['postcode']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['typeDescription'] && !(typeof data['typeDescription'] === 'string' || data['typeDescription'] instanceof String)) {
            throw new Error("Expected the field `typeDescription` to be a primitive type in the JSON string but got " + data['typeDescription']);
        }

        return true;
    }


}



/**
 * @member {String} email
 */
ContactInformation.prototype['email'] = undefined;

/**
 * @member {String} fax
 */
ContactInformation.prototype['fax'] = undefined;

/**
 * @member {Boolean} isPreferred
 */
ContactInformation.prototype['isPreferred'] = undefined;

/**
 * @member {Boolean} isWebAddress
 */
ContactInformation.prototype['isWebAddress'] = undefined;

/**
 * @member {String} line1
 */
ContactInformation.prototype['line1'] = undefined;

/**
 * @member {String} line2
 */
ContactInformation.prototype['line2'] = undefined;

/**
 * @member {String} line3
 */
ContactInformation.prototype['line3'] = undefined;

/**
 * @member {String} line4
 */
ContactInformation.prototype['line4'] = undefined;

/**
 * @member {String} line5
 */
ContactInformation.prototype['line5'] = undefined;

/**
 * @member {String} notes
 */
ContactInformation.prototype['notes'] = undefined;

/**
 * @member {String} phone
 */
ContactInformation.prototype['phone'] = undefined;

/**
 * @member {String} postcode
 */
ContactInformation.prototype['postcode'] = undefined;

/**
 * @member {String} type
 */
ContactInformation.prototype['type'] = undefined;

/**
 * @member {String} typeDescription
 */
ContactInformation.prototype['typeDescription'] = undefined;

/**
 * @member {Number} typeId
 */
ContactInformation.prototype['typeId'] = undefined;






export default ContactInformation;

