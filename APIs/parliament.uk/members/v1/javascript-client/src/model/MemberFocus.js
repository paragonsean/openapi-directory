/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MemberFocus model module.
 * @module model/MemberFocus
 * @version v1
 */
class MemberFocus {
    /**
     * Constructs a new <code>MemberFocus</code>.
     * @alias module:model/MemberFocus
     */
    constructor() { 
        
        MemberFocus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MemberFocus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MemberFocus} obj Optional instance to populate.
     * @return {module:model/MemberFocus} The populated <code>MemberFocus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MemberFocus();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('focus')) {
                obj['focus'] = ApiClient.convertToType(data['focus'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MemberFocus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MemberFocus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['focus'])) {
            throw new Error("Expected the field `focus` to be an array in the JSON data but got " + data['focus']);
        }

        return true;
    }


}



/**
 * @member {String} category
 */
MemberFocus.prototype['category'] = undefined;

/**
 * @member {Array.<String>} focus
 */
MemberFocus.prototype['focus'] = undefined;






export default MemberFocus;

