/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RegisteredInterest model module.
 * @module model/RegisteredInterest
 * @version v1
 */
class RegisteredInterest {
    /**
     * Constructs a new <code>RegisteredInterest</code>.
     * @alias module:model/RegisteredInterest
     */
    constructor() { 
        
        RegisteredInterest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RegisteredInterest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegisteredInterest} obj Optional instance to populate.
     * @return {module:model/RegisteredInterest} The populated <code>RegisteredInterest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegisteredInterest();

            if (data.hasOwnProperty('childInterests')) {
                obj['childInterests'] = ApiClient.convertToType(data['childInterests'], [RegisteredInterest]);
            }
            if (data.hasOwnProperty('createdWhen')) {
                obj['createdWhen'] = ApiClient.convertToType(data['createdWhen'], 'Date');
            }
            if (data.hasOwnProperty('deletedWhen')) {
                obj['deletedWhen'] = ApiClient.convertToType(data['deletedWhen'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('interest')) {
                obj['interest'] = ApiClient.convertToType(data['interest'], 'String');
            }
            if (data.hasOwnProperty('isCorrection')) {
                obj['isCorrection'] = ApiClient.convertToType(data['isCorrection'], 'Boolean');
            }
            if (data.hasOwnProperty('lastAmendedWhen')) {
                obj['lastAmendedWhen'] = ApiClient.convertToType(data['lastAmendedWhen'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegisteredInterest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegisteredInterest</code>.
     */
    static validateJSON(data) {
        if (data['childInterests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['childInterests'])) {
                throw new Error("Expected the field `childInterests` to be an array in the JSON data but got " + data['childInterests']);
            }
            // validate the optional field `childInterests` (array)
            for (const item of data['childInterests']) {
                RegisteredInterest.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['interest'] && !(typeof data['interest'] === 'string' || data['interest'] instanceof String)) {
            throw new Error("Expected the field `interest` to be a primitive type in the JSON string but got " + data['interest']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/RegisteredInterest>} childInterests
 */
RegisteredInterest.prototype['childInterests'] = undefined;

/**
 * @member {Date} createdWhen
 */
RegisteredInterest.prototype['createdWhen'] = undefined;

/**
 * @member {Date} deletedWhen
 */
RegisteredInterest.prototype['deletedWhen'] = undefined;

/**
 * @member {Number} id
 */
RegisteredInterest.prototype['id'] = undefined;

/**
 * @member {String} interest
 */
RegisteredInterest.prototype['interest'] = undefined;

/**
 * @member {Boolean} isCorrection
 */
RegisteredInterest.prototype['isCorrection'] = undefined;

/**
 * @member {Date} lastAmendedWhen
 */
RegisteredInterest.prototype['lastAmendedWhen'] = undefined;






export default RegisteredInterest;

