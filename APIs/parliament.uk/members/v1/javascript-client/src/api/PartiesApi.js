/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import House from '../model/House';
import LordsByTypeMembersServiceSearchResult from '../model/LordsByTypeMembersServiceSearchResult';
import PartyMembersServiceSearchResult from '../model/PartyMembersServiceSearchResult';
import PartySeatCountMembersServiceSearchResult from '../model/PartySeatCountMembersServiceSearchResult';

/**
* Parties service.
* @module api/PartiesApi
* @version v1
*/
export default class PartiesApi {

    /**
    * Constructs a new PartiesApi. 
    * @alias module:api/PartiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiPartiesGetActiveHouseGet operation.
     * @callback module:api/PartiesApi~apiPartiesGetActiveHouseGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartyMembersServiceSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of current parties with at least one active member.
     * @param {module:model/House} house Current parties by house
     * @param {module:api/PartiesApi~apiPartiesGetActiveHouseGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartyMembersServiceSearchResult}
     */
    apiPartiesGetActiveHouseGet(house, callback) {
      let postBody = null;
      // verify the required parameter 'house' is set
      if (house === undefined || house === null) {
        throw new Error("Missing the required parameter 'house' when calling apiPartiesGetActiveHouseGet");
      }

      let pathParams = {
        'house': house
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = PartyMembersServiceSearchResult;
      return this.apiClient.callApi(
        '/api/Parties/GetActive/{house}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPartiesLordsByTypeForDateGet operation.
     * @callback module:api/PartiesApi~apiPartiesLordsByTypeForDateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LordsByTypeMembersServiceSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the composition of the House of Lords by peerage type.
     * @param {Date} forDate Composition of the Lords for date specified.
     * @param {module:api/PartiesApi~apiPartiesLordsByTypeForDateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LordsByTypeMembersServiceSearchResult}
     */
    apiPartiesLordsByTypeForDateGet(forDate, callback) {
      let postBody = null;
      // verify the required parameter 'forDate' is set
      if (forDate === undefined || forDate === null) {
        throw new Error("Missing the required parameter 'forDate' when calling apiPartiesLordsByTypeForDateGet");
      }

      let pathParams = {
        'forDate': forDate
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = LordsByTypeMembersServiceSearchResult;
      return this.apiClient.callApi(
        '/api/Parties/LordsByType/{forDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPartiesStateOfThePartiesHouseForDateGet operation.
     * @callback module:api/PartiesApi~apiPartiesStateOfThePartiesHouseForDateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartySeatCountMembersServiceSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns current state of parties
     * @param {module:model/House} house State of parties in Commons or Lords.
     * @param {Date} forDate State of parties for the date specified
     * @param {module:api/PartiesApi~apiPartiesStateOfThePartiesHouseForDateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartySeatCountMembersServiceSearchResult}
     */
    apiPartiesStateOfThePartiesHouseForDateGet(house, forDate, callback) {
      let postBody = null;
      // verify the required parameter 'house' is set
      if (house === undefined || house === null) {
        throw new Error("Missing the required parameter 'house' when calling apiPartiesStateOfThePartiesHouseForDateGet");
      }
      // verify the required parameter 'forDate' is set
      if (forDate === undefined || forDate === null) {
        throw new Error("Missing the required parameter 'forDate' when calling apiPartiesStateOfThePartiesHouseForDateGet");
      }

      let pathParams = {
        'house': house,
        'forDate': forDate
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = PartySeatCountMembersServiceSearchResult;
      return this.apiClient.callApi(
        '/api/Parties/StateOfTheParties/{house}/{forDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
