/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConstituencyItem from '../model/ConstituencyItem';
import ConstituencyMembersServiceSearchResult from '../model/ConstituencyMembersServiceSearchResult';
import ConstituencyRepresentationListItem from '../model/ConstituencyRepresentationListItem';
import ElectionResultItem from '../model/ElectionResultItem';
import ElectionResultListItem from '../model/ElectionResultListItem';
import LocationItem from '../model/LocationItem';
import LocationType from '../model/LocationType';
import StringItem from '../model/StringItem';

/**
* Location service.
* @module api/LocationApi
* @version v1
*/
export default class LocationApi {

    /**
    * Constructs a new LocationApi. 
    * @alias module:api/LocationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiLocationBrowseLocationTypeLocationNameGet operation.
     * @callback module:api/LocationApi~apiLocationBrowseLocationTypeLocationNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of locations, both parent and child
     * @param {module:model/LocationType} locationType Location by type of location
     * @param {String} locationName Location by name specified
     * @param {module:api/LocationApi~apiLocationBrowseLocationTypeLocationNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationItem}
     */
    apiLocationBrowseLocationTypeLocationNameGet(locationType, locationName, callback) {
      let postBody = null;
      // verify the required parameter 'locationType' is set
      if (locationType === undefined || locationType === null) {
        throw new Error("Missing the required parameter 'locationType' when calling apiLocationBrowseLocationTypeLocationNameGet");
      }
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling apiLocationBrowseLocationTypeLocationNameGet");
      }

      let pathParams = {
        'locationType': locationType,
        'locationName': locationName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = LocationItem;
      return this.apiClient.callApi(
        '/api/Location/Browse/{locationType}/{locationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLocationConstituencyIdElectionResultElectionIdGet operation.
     * @callback module:api/LocationApi~apiLocationConstituencyIdElectionResultElectionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElectionResultItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an election result by constituency and election id
     * @param {Number} id Election result by constituency id
     * @param {Number} electionId Election result by election id
     * @param {module:api/LocationApi~apiLocationConstituencyIdElectionResultElectionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElectionResultItem}
     */
    apiLocationConstituencyIdElectionResultElectionIdGet(id, electionId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiLocationConstituencyIdElectionResultElectionIdGet");
      }
      // verify the required parameter 'electionId' is set
      if (electionId === undefined || electionId === null) {
        throw new Error("Missing the required parameter 'electionId' when calling apiLocationConstituencyIdElectionResultElectionIdGet");
      }

      let pathParams = {
        'id': id,
        'electionId': electionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ElectionResultItem;
      return this.apiClient.callApi(
        '/api/Location/Constituency/{id}/ElectionResult/{electionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLocationConstituencyIdElectionResultLatestGet operation.
     * @callback module:api/LocationApi~apiLocationConstituencyIdElectionResultLatestGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElectionResultItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns latest election result by constituency id
     * @param {Number} id Latest election result by constituency id
     * @param {module:api/LocationApi~apiLocationConstituencyIdElectionResultLatestGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElectionResultItem}
     */
    apiLocationConstituencyIdElectionResultLatestGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiLocationConstituencyIdElectionResultLatestGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ElectionResultItem;
      return this.apiClient.callApi(
        '/api/Location/Constituency/{id}/ElectionResult/Latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLocationConstituencyIdElectionResultsGet operation.
     * @callback module:api/LocationApi~apiLocationConstituencyIdElectionResultsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElectionResultListItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of election results by constituency ID
     * @param {Number} id Elections results by constituency ID
     * @param {module:api/LocationApi~apiLocationConstituencyIdElectionResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElectionResultListItem}
     */
    apiLocationConstituencyIdElectionResultsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiLocationConstituencyIdElectionResultsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ElectionResultListItem;
      return this.apiClient.callApi(
        '/api/Location/Constituency/{id}/ElectionResults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLocationConstituencyIdGeometryGet operation.
     * @callback module:api/LocationApi~apiLocationConstituencyIdGeometryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns geometry by constituency ID
     * @param {Number} id Geometry by constituency ID
     * @param {module:api/LocationApi~apiLocationConstituencyIdGeometryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringItem}
     */
    apiLocationConstituencyIdGeometryGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiLocationConstituencyIdGeometryGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = StringItem;
      return this.apiClient.callApi(
        '/api/Location/Constituency/{id}/Geometry', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLocationConstituencyIdGet operation.
     * @callback module:api/LocationApi~apiLocationConstituencyIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConstituencyItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a constituency by ID
     * @param {Number} id Constituency by ID
     * @param {module:api/LocationApi~apiLocationConstituencyIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConstituencyItem}
     */
    apiLocationConstituencyIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiLocationConstituencyIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ConstituencyItem;
      return this.apiClient.callApi(
        '/api/Location/Constituency/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLocationConstituencyIdRepresentationsGet operation.
     * @callback module:api/LocationApi~apiLocationConstituencyIdRepresentationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConstituencyRepresentationListItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of representations by constituency ID
     * @param {Number} id Representations by constituency ID
     * @param {module:api/LocationApi~apiLocationConstituencyIdRepresentationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConstituencyRepresentationListItem}
     */
    apiLocationConstituencyIdRepresentationsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiLocationConstituencyIdRepresentationsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ConstituencyRepresentationListItem;
      return this.apiClient.callApi(
        '/api/Location/Constituency/{id}/Representations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLocationConstituencyIdSynopsisGet operation.
     * @callback module:api/LocationApi~apiLocationConstituencyIdSynopsisGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a synopsis by constituency ID
     * @param {Number} id Synopsis by constituency ID
     * @param {module:api/LocationApi~apiLocationConstituencyIdSynopsisGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringItem}
     */
    apiLocationConstituencyIdSynopsisGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiLocationConstituencyIdSynopsisGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = StringItem;
      return this.apiClient.callApi(
        '/api/Location/Constituency/{id}/Synopsis', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLocationConstituencySearchGet operation.
     * @callback module:api/LocationApi~apiLocationConstituencySearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConstituencyMembersServiceSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of constituencies
     * @param {Object} opts Optional parameters
     * @param {String} [searchText] Constituencies containing serach term in their name
     * @param {Number} [skip = 0)] The number of records to skip from the first, default is 0
     * @param {Number} [take = 20)] The number of records to return, default is 20. Maximum is 20
     * @param {module:api/LocationApi~apiLocationConstituencySearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConstituencyMembersServiceSearchResult}
     */
    apiLocationConstituencySearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'searchText': opts['searchText'],
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ConstituencyMembersServiceSearchResult;
      return this.apiClient.callApi(
        '/api/Location/Constituency/Search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
