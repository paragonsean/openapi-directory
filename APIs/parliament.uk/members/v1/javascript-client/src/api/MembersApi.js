/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BiographyExperienceListItem from '../model/BiographyExperienceListItem';
import ContactInformationListItem from '../model/ContactInformationListItem';
import DebateContributionMembersServiceSearchResult from '../model/DebateContributionMembersServiceSearchResult';
import EarlyDayMotionMembersServiceSearchResult from '../model/EarlyDayMotionMembersServiceSearchResult';
import ElectionResultItem from '../model/ElectionResultItem';
import House from '../model/House';
import MemberBiographyItem from '../model/MemberBiographyItem';
import MemberFocusListItem from '../model/MemberFocusListItem';
import MemberHistoryItem from '../model/MemberHistoryItem';
import MemberItem from '../model/MemberItem';
import MemberMembersServiceSearchResult from '../model/MemberMembersServiceSearchResult';
import PortraitCropEnum from '../model/PortraitCropEnum';
import RegisteredInterestCategoryListItem from '../model/RegisteredInterestCategoryListItem';
import StaffListItem from '../model/StaffListItem';
import StringItem from '../model/StringItem';
import VoteMembersServiceSearchResult from '../model/VoteMembersServiceSearchResult';
import WrittenQuestionMembersServiceSearchResult from '../model/WrittenQuestionMembersServiceSearchResult';

/**
* Members service.
* @module api/MembersApi
* @version v1
*/
export default class MembersApi {

    /**
    * Constructs a new MembersApi. 
    * @alias module:api/MembersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiMembersHistoryGet operation.
     * @callback module:api/MembersApi~apiMembersHistoryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MemberHistoryItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return members by ID with list of their historical names, parties and memberships
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [ids] List of MemberIds to find
     * @param {module:api/MembersApi~apiMembersHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MemberHistoryItem>}
     */
    apiMembersHistoryGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [MemberHistoryItem];
      return this.apiClient.callApi(
        '/api/Members/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersIdBiographyGet operation.
     * @callback module:api/MembersApi~apiMembersIdBiographyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberBiographyItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return biography of member by ID
     * @param {Number} id Biography of Member by ID specified
     * @param {module:api/MembersApi~apiMembersIdBiographyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberBiographyItem}
     */
    apiMembersIdBiographyGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMembersIdBiographyGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = MemberBiographyItem;
      return this.apiClient.callApi(
        '/api/Members/{id}/Biography', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersIdContactGet operation.
     * @callback module:api/MembersApi~apiMembersIdContactGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactInformationListItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return list of contact details of member by ID
     * @param {Number} id Contact details of Member by ID specified
     * @param {module:api/MembersApi~apiMembersIdContactGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactInformationListItem}
     */
    apiMembersIdContactGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMembersIdContactGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ContactInformationListItem;
      return this.apiClient.callApi(
        '/api/Members/{id}/Contact', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersIdContributionSummaryGet operation.
     * @callback module:api/MembersApi~apiMembersIdContributionSummaryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DebateContributionMembersServiceSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return contribution summary of member by ID
     * @param {Number} id Contribution summary of Member by ID specified
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {module:api/MembersApi~apiMembersIdContributionSummaryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DebateContributionMembersServiceSearchResult}
     */
    apiMembersIdContributionSummaryGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMembersIdContributionSummaryGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = DebateContributionMembersServiceSearchResult;
      return this.apiClient.callApi(
        '/api/Members/{id}/ContributionSummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersIdEdmsGet operation.
     * @callback module:api/MembersApi~apiMembersIdEdmsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EarlyDayMotionMembersServiceSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return list of early day motions of member by ID
     * @param {Number} id Early day motions of Member by ID specified
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {module:api/MembersApi~apiMembersIdEdmsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EarlyDayMotionMembersServiceSearchResult}
     */
    apiMembersIdEdmsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMembersIdEdmsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = EarlyDayMotionMembersServiceSearchResult;
      return this.apiClient.callApi(
        '/api/Members/{id}/Edms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersIdExperienceGet operation.
     * @callback module:api/MembersApi~apiMembersIdExperienceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BiographyExperienceListItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return experience of member by ID
     * @param {Number} id Experience of Member by ID specified
     * @param {module:api/MembersApi~apiMembersIdExperienceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BiographyExperienceListItem}
     */
    apiMembersIdExperienceGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMembersIdExperienceGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = BiographyExperienceListItem;
      return this.apiClient.callApi(
        '/api/Members/{id}/Experience', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersIdFocusGet operation.
     * @callback module:api/MembersApi~apiMembersIdFocusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberFocusListItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return list of areas of focus of member by ID
     * @param {Number} id Areas of focus of Member by ID specified
     * @param {module:api/MembersApi~apiMembersIdFocusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberFocusListItem}
     */
    apiMembersIdFocusGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMembersIdFocusGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = MemberFocusListItem;
      return this.apiClient.callApi(
        '/api/Members/{id}/Focus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersIdGet operation.
     * @callback module:api/MembersApi~apiMembersIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return member by ID
     * @param {Number} id Member by ID specified
     * @param {Object} opts Optional parameters
     * @param {Date} [detailsForDate] Member object will be populated with details from the date specified
     * @param {module:api/MembersApi~apiMembersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberItem}
     */
    apiMembersIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMembersIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'detailsForDate': opts['detailsForDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = MemberItem;
      return this.apiClient.callApi(
        '/api/Members/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersIdLatestElectionResultGet operation.
     * @callback module:api/MembersApi~apiMembersIdLatestElectionResultGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElectionResultItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return latest election result of member by ID
     * @param {Number} id Latest election result of Member by ID specified
     * @param {module:api/MembersApi~apiMembersIdLatestElectionResultGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElectionResultItem}
     */
    apiMembersIdLatestElectionResultGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMembersIdLatestElectionResultGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ElectionResultItem;
      return this.apiClient.callApi(
        '/api/Members/{id}/LatestElectionResult', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersIdPortraitGet operation.
     * @callback module:api/MembersApi~apiMembersIdPortraitGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return portrait of member by ID
     * @param {Number} id Portrait of Member by ID specified
     * @param {Object} opts Optional parameters
     * @param {module:model/PortraitCropEnum} [cropType] 
     * @param {Boolean} [webVersion = true)] 
     * @param {module:api/MembersApi~apiMembersIdPortraitGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiMembersIdPortraitGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMembersIdPortraitGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'cropType': opts['cropType'],
        'webVersion': opts['webVersion']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Members/{id}/Portrait', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersIdPortraitUrlGet operation.
     * @callback module:api/MembersApi~apiMembersIdPortraitUrlGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return portrait url of member by ID
     * @param {Number} id Portrait url of Member by ID specified
     * @param {module:api/MembersApi~apiMembersIdPortraitUrlGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringItem}
     */
    apiMembersIdPortraitUrlGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMembersIdPortraitUrlGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = StringItem;
      return this.apiClient.callApi(
        '/api/Members/{id}/PortraitUrl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersIdRegisteredInterestsGet operation.
     * @callback module:api/MembersApi~apiMembersIdRegisteredInterestsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisteredInterestCategoryListItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return list of registered interests of member by ID
     * @param {Number} id Registered interests of Member by ID specified
     * @param {Object} opts Optional parameters
     * @param {module:model/House} [house] Registered interests of Member by House specified
     * @param {module:api/MembersApi~apiMembersIdRegisteredInterestsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisteredInterestCategoryListItem}
     */
    apiMembersIdRegisteredInterestsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMembersIdRegisteredInterestsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'house': opts['house']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = RegisteredInterestCategoryListItem;
      return this.apiClient.callApi(
        '/api/Members/{id}/RegisteredInterests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersIdStaffGet operation.
     * @callback module:api/MembersApi~apiMembersIdStaffGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StaffListItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return list of staff of member by ID
     * @param {Number} id Staff of Member by ID specified
     * @param {module:api/MembersApi~apiMembersIdStaffGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StaffListItem}
     */
    apiMembersIdStaffGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMembersIdStaffGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = StaffListItem;
      return this.apiClient.callApi(
        '/api/Members/{id}/Staff', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersIdSynopsisGet operation.
     * @callback module:api/MembersApi~apiMembersIdSynopsisGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return synopsis of member by ID
     * @param {Number} id Synopsis of Member by ID specified
     * @param {module:api/MembersApi~apiMembersIdSynopsisGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringItem}
     */
    apiMembersIdSynopsisGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMembersIdSynopsisGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = StringItem;
      return this.apiClient.callApi(
        '/api/Members/{id}/Synopsis', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersIdThumbnailGet operation.
     * @callback module:api/MembersApi~apiMembersIdThumbnailGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return thumbnail of member by ID
     * @param {Number} id Thumbnail of Member by ID specified
     * @param {module:api/MembersApi~apiMembersIdThumbnailGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiMembersIdThumbnailGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMembersIdThumbnailGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Members/{id}/Thumbnail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersIdThumbnailUrlGet operation.
     * @callback module:api/MembersApi~apiMembersIdThumbnailUrlGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return thumbnail url of member by ID
     * @param {Number} id Thumbnail url of Member by ID specified
     * @param {module:api/MembersApi~apiMembersIdThumbnailUrlGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringItem}
     */
    apiMembersIdThumbnailUrlGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMembersIdThumbnailUrlGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = StringItem;
      return this.apiClient.callApi(
        '/api/Members/{id}/ThumbnailUrl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersIdVotingGet operation.
     * @callback module:api/MembersApi~apiMembersIdVotingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VoteMembersServiceSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return list of votes by member by ID
     * @param {Number} id Votes by Member by ID specified
     * @param {module:model/House} house 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {module:api/MembersApi~apiMembersIdVotingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VoteMembersServiceSearchResult}
     */
    apiMembersIdVotingGet(id, house, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMembersIdVotingGet");
      }
      // verify the required parameter 'house' is set
      if (house === undefined || house === null) {
        throw new Error("Missing the required parameter 'house' when calling apiMembersIdVotingGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'house': house,
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = VoteMembersServiceSearchResult;
      return this.apiClient.callApi(
        '/api/Members/{id}/Voting', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersIdWrittenQuestionsGet operation.
     * @callback module:api/MembersApi~apiMembersIdWrittenQuestionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WrittenQuestionMembersServiceSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return list of written questions by member by ID
     * @param {Number} id Written questions by Member by ID specified
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {module:api/MembersApi~apiMembersIdWrittenQuestionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WrittenQuestionMembersServiceSearchResult}
     */
    apiMembersIdWrittenQuestionsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMembersIdWrittenQuestionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = WrittenQuestionMembersServiceSearchResult;
      return this.apiClient.callApi(
        '/api/Members/{id}/WrittenQuestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersSearchGet operation.
     * @callback module:api/MembersApi~apiMembersSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberMembersServiceSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of current members of the Commons or Lords
     * @param {Object} opts Optional parameters
     * @param {String} [name] Members where name contains term specified
     * @param {String} [location] Members where postcode or geographical location matches the term specified
     * @param {String} [postTitle] Members which have held the post specified
     * @param {Number} [partyId] Members which are currently affiliated with party with party ID
     * @param {module:model/House} [house] Members where their most recent house is the house specified
     * @param {Number} [constituencyId] Members which currently hold the constituency with constituency id
     * @param {String} [nameStartsWith] Members with surname begining with letter(s) specified
     * @param {String} [gender] Members with the gender specified
     * @param {Date} [membershipStartedSince] Members who started on or after the date given
     * @param {Date} [membershipEndedMembershipEndedSince] Members who left the House on or after the date given
     * @param {Array.<Number>} [membershipEndedMembershipEndReasonIds] 
     * @param {Date} [membershipInDateRangeWasMemberOnOrAfter] Members who were active on or after the date specified
     * @param {Date} [membershipInDateRangeWasMemberOnOrBefore] Members who were active on or before the date specified
     * @param {module:model/House} [membershipInDateRangeWasMemberOfHouse] Members who were active in the house specifid
     * @param {Boolean} [isEligible] Members currently Eligible to sit in their House
     * @param {Boolean} [isCurrentMember] Members who are current or former members
     * @param {Number} [policyInterestId] Members with specified policy interest
     * @param {String} [experience] Members with specified experience
     * @param {Number} [skip = 0)] The number of records to skip from the first, default is 0
     * @param {Number} [take = 20)] The number of records to return, default is 20. Maximum is 20
     * @param {module:api/MembersApi~apiMembersSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberMembersServiceSearchResult}
     */
    apiMembersSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Name': opts['name'],
        'Location': opts['location'],
        'PostTitle': opts['postTitle'],
        'PartyId': opts['partyId'],
        'House': opts['house'],
        'ConstituencyId': opts['constituencyId'],
        'NameStartsWith': opts['nameStartsWith'],
        'Gender': opts['gender'],
        'MembershipStartedSince': opts['membershipStartedSince'],
        'MembershipEnded.MembershipEndedSince': opts['membershipEndedMembershipEndedSince'],
        'MembershipEnded.MembershipEndReasonIds': this.apiClient.buildCollectionParam(opts['membershipEndedMembershipEndReasonIds'], 'multi'),
        'MembershipInDateRange.WasMemberOnOrAfter': opts['membershipInDateRangeWasMemberOnOrAfter'],
        'MembershipInDateRange.WasMemberOnOrBefore': opts['membershipInDateRangeWasMemberOnOrBefore'],
        'MembershipInDateRange.WasMemberOfHouse': opts['membershipInDateRangeWasMemberOfHouse'],
        'IsEligible': opts['isEligible'],
        'IsCurrentMember': opts['isCurrentMember'],
        'PolicyInterestId': opts['policyInterestId'],
        'Experience': opts['experience'],
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = MemberMembersServiceSearchResult;
      return this.apiClient.callApi(
        '/api/Members/Search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMembersSearchHistoricalGet operation.
     * @callback module:api/MembersApi~apiMembersSearchHistoricalGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberMembersServiceSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of members of the Commons or Lords
     * @param {Object} opts Optional parameters
     * @param {String} [name] Members with names containing the term specified
     * @param {Date} [dateToSearchFor] Members that were an active member of the Commons or Lords on the date specified
     * @param {Number} [skip = 0)] The number of records to skip from the first, default is 0
     * @param {Number} [take = 20)] The number of records to return, default is 20. Maximum is 20
     * @param {module:api/MembersApi~apiMembersSearchHistoricalGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberMembersServiceSearchResult}
     */
    apiMembersSearchHistoricalGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'dateToSearchFor': opts['dateToSearchFor'],
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = MemberMembersServiceSearchResult;
      return this.apiClient.callApi(
        '/api/Members/SearchHistorical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
