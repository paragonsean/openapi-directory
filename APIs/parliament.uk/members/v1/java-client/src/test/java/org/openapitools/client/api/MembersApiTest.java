/*
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BiographyExperienceListItem;
import org.openapitools.client.model.ContactInformationListItem;
import org.openapitools.client.model.DebateContributionMembersServiceSearchResult;
import org.openapitools.client.model.EarlyDayMotionMembersServiceSearchResult;
import org.openapitools.client.model.ElectionResultItem;
import org.openapitools.client.model.House;
import org.openapitools.client.model.MemberBiographyItem;
import org.openapitools.client.model.MemberFocusListItem;
import org.openapitools.client.model.MemberHistoryItem;
import org.openapitools.client.model.MemberItem;
import org.openapitools.client.model.MemberMembersServiceSearchResult;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PortraitCropEnum;
import org.openapitools.client.model.RegisteredInterestCategoryListItem;
import org.openapitools.client.model.StaffListItem;
import org.openapitools.client.model.StringItem;
import org.openapitools.client.model.VoteMembersServiceSearchResult;
import org.openapitools.client.model.WrittenQuestionMembersServiceSearchResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MembersApi
 */
@Disabled
public class MembersApiTest {

    private final MembersApi api = new MembersApi();

    /**
     * Return members by ID with list of their historical names, parties and memberships
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersHistoryGetTest() throws ApiException {
        List<Integer> ids = null;
        List<MemberHistoryItem> response = api.apiMembersHistoryGet(ids);
        // TODO: test validations
    }

    /**
     * Return biography of member by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersIdBiographyGetTest() throws ApiException {
        Integer id = null;
        MemberBiographyItem response = api.apiMembersIdBiographyGet(id);
        // TODO: test validations
    }

    /**
     * Return list of contact details of member by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersIdContactGetTest() throws ApiException {
        Integer id = null;
        ContactInformationListItem response = api.apiMembersIdContactGet(id);
        // TODO: test validations
    }

    /**
     * Return contribution summary of member by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersIdContributionSummaryGetTest() throws ApiException {
        Integer id = null;
        Integer page = null;
        DebateContributionMembersServiceSearchResult response = api.apiMembersIdContributionSummaryGet(id, page);
        // TODO: test validations
    }

    /**
     * Return list of early day motions of member by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersIdEdmsGetTest() throws ApiException {
        Integer id = null;
        Integer page = null;
        EarlyDayMotionMembersServiceSearchResult response = api.apiMembersIdEdmsGet(id, page);
        // TODO: test validations
    }

    /**
     * Return experience of member by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersIdExperienceGetTest() throws ApiException {
        Integer id = null;
        BiographyExperienceListItem response = api.apiMembersIdExperienceGet(id);
        // TODO: test validations
    }

    /**
     * Return list of areas of focus of member by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersIdFocusGetTest() throws ApiException {
        Integer id = null;
        MemberFocusListItem response = api.apiMembersIdFocusGet(id);
        // TODO: test validations
    }

    /**
     * Return member by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersIdGetTest() throws ApiException {
        Integer id = null;
        OffsetDateTime detailsForDate = null;
        MemberItem response = api.apiMembersIdGet(id, detailsForDate);
        // TODO: test validations
    }

    /**
     * Return latest election result of member by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersIdLatestElectionResultGetTest() throws ApiException {
        Integer id = null;
        ElectionResultItem response = api.apiMembersIdLatestElectionResultGet(id);
        // TODO: test validations
    }

    /**
     * Return portrait of member by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersIdPortraitGetTest() throws ApiException {
        Integer id = null;
        PortraitCropEnum cropType = null;
        Boolean webVersion = null;
        api.apiMembersIdPortraitGet(id, cropType, webVersion);
        // TODO: test validations
    }

    /**
     * Return portrait url of member by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersIdPortraitUrlGetTest() throws ApiException {
        Integer id = null;
        StringItem response = api.apiMembersIdPortraitUrlGet(id);
        // TODO: test validations
    }

    /**
     * Return list of registered interests of member by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersIdRegisteredInterestsGetTest() throws ApiException {
        Integer id = null;
        House house = null;
        RegisteredInterestCategoryListItem response = api.apiMembersIdRegisteredInterestsGet(id, house);
        // TODO: test validations
    }

    /**
     * Return list of staff of member by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersIdStaffGetTest() throws ApiException {
        Integer id = null;
        StaffListItem response = api.apiMembersIdStaffGet(id);
        // TODO: test validations
    }

    /**
     * Return synopsis of member by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersIdSynopsisGetTest() throws ApiException {
        Integer id = null;
        StringItem response = api.apiMembersIdSynopsisGet(id);
        // TODO: test validations
    }

    /**
     * Return thumbnail of member by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersIdThumbnailGetTest() throws ApiException {
        Integer id = null;
        api.apiMembersIdThumbnailGet(id);
        // TODO: test validations
    }

    /**
     * Return thumbnail url of member by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersIdThumbnailUrlGetTest() throws ApiException {
        Integer id = null;
        StringItem response = api.apiMembersIdThumbnailUrlGet(id);
        // TODO: test validations
    }

    /**
     * Return list of votes by member by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersIdVotingGetTest() throws ApiException {
        Integer id = null;
        House house = null;
        Integer page = null;
        VoteMembersServiceSearchResult response = api.apiMembersIdVotingGet(id, house, page);
        // TODO: test validations
    }

    /**
     * Return list of written questions by member by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersIdWrittenQuestionsGetTest() throws ApiException {
        Integer id = null;
        Integer page = null;
        WrittenQuestionMembersServiceSearchResult response = api.apiMembersIdWrittenQuestionsGet(id, page);
        // TODO: test validations
    }

    /**
     * Returns a list of current members of the Commons or Lords
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersSearchGetTest() throws ApiException {
        String name = null;
        String location = null;
        String postTitle = null;
        Integer partyId = null;
        House house = null;
        Integer constituencyId = null;
        String nameStartsWith = null;
        String gender = null;
        OffsetDateTime membershipStartedSince = null;
        OffsetDateTime membershipEndedMembershipEndedSince = null;
        List<Integer> membershipEndedMembershipEndReasonIds = null;
        OffsetDateTime membershipInDateRangeWasMemberOnOrAfter = null;
        OffsetDateTime membershipInDateRangeWasMemberOnOrBefore = null;
        House membershipInDateRangeWasMemberOfHouse = null;
        Boolean isEligible = null;
        Boolean isCurrentMember = null;
        Integer policyInterestId = null;
        String experience = null;
        Integer skip = null;
        Integer take = null;
        MemberMembersServiceSearchResult response = api.apiMembersSearchGet(name, location, postTitle, partyId, house, constituencyId, nameStartsWith, gender, membershipStartedSince, membershipEndedMembershipEndedSince, membershipEndedMembershipEndReasonIds, membershipInDateRangeWasMemberOnOrAfter, membershipInDateRangeWasMemberOnOrBefore, membershipInDateRangeWasMemberOfHouse, isEligible, isCurrentMember, policyInterestId, experience, skip, take);
        // TODO: test validations
    }

    /**
     * Returns a list of members of the Commons or Lords
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMembersSearchHistoricalGetTest() throws ApiException {
        String name = null;
        OffsetDateTime dateToSearchFor = null;
        Integer skip = null;
        Integer take = null;
        MemberMembersServiceSearchResult response = api.apiMembersSearchHistoricalGet(name, dateToSearchFor, skip, take);
        // TODO: test validations
    }

}
