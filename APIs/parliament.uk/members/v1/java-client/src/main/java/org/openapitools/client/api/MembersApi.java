/*
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BiographyExperienceListItem;
import org.openapitools.client.model.ContactInformationListItem;
import org.openapitools.client.model.DebateContributionMembersServiceSearchResult;
import org.openapitools.client.model.EarlyDayMotionMembersServiceSearchResult;
import org.openapitools.client.model.ElectionResultItem;
import org.openapitools.client.model.House;
import org.openapitools.client.model.MemberBiographyItem;
import org.openapitools.client.model.MemberFocusListItem;
import org.openapitools.client.model.MemberHistoryItem;
import org.openapitools.client.model.MemberItem;
import org.openapitools.client.model.MemberMembersServiceSearchResult;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PortraitCropEnum;
import org.openapitools.client.model.RegisteredInterestCategoryListItem;
import org.openapitools.client.model.StaffListItem;
import org.openapitools.client.model.StringItem;
import org.openapitools.client.model.VoteMembersServiceSearchResult;
import org.openapitools.client.model.WrittenQuestionMembersServiceSearchResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MembersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MembersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MembersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiMembersHistoryGet
     * @param ids List of MemberIds to find (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersHistoryGetCall(List<Integer> ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/History";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersHistoryGetValidateBeforeCall(List<Integer> ids, final ApiCallback _callback) throws ApiException {
        return apiMembersHistoryGetCall(ids, _callback);

    }

    /**
     * Return members by ID with list of their historical names, parties and memberships
     * 
     * @param ids List of MemberIds to find (optional)
     * @return List&lt;MemberHistoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<MemberHistoryItem> apiMembersHistoryGet(List<Integer> ids) throws ApiException {
        ApiResponse<List<MemberHistoryItem>> localVarResp = apiMembersHistoryGetWithHttpInfo(ids);
        return localVarResp.getData();
    }

    /**
     * Return members by ID with list of their historical names, parties and memberships
     * 
     * @param ids List of MemberIds to find (optional)
     * @return ApiResponse&lt;List&lt;MemberHistoryItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MemberHistoryItem>> apiMembersHistoryGetWithHttpInfo(List<Integer> ids) throws ApiException {
        okhttp3.Call localVarCall = apiMembersHistoryGetValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<List<MemberHistoryItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return members by ID with list of their historical names, parties and memberships (asynchronously)
     * 
     * @param ids List of MemberIds to find (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersHistoryGetAsync(List<Integer> ids, final ApiCallback<List<MemberHistoryItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersHistoryGetValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<List<MemberHistoryItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersIdBiographyGet
     * @param id Biography of Member by ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdBiographyGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/{id}/Biography"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersIdBiographyGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiMembersIdBiographyGet(Async)");
        }

        return apiMembersIdBiographyGetCall(id, _callback);

    }

    /**
     * Return biography of member by ID
     * 
     * @param id Biography of Member by ID specified (required)
     * @return MemberBiographyItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public MemberBiographyItem apiMembersIdBiographyGet(Integer id) throws ApiException {
        ApiResponse<MemberBiographyItem> localVarResp = apiMembersIdBiographyGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Return biography of member by ID
     * 
     * @param id Biography of Member by ID specified (required)
     * @return ApiResponse&lt;MemberBiographyItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MemberBiographyItem> apiMembersIdBiographyGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiMembersIdBiographyGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MemberBiographyItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return biography of member by ID (asynchronously)
     * 
     * @param id Biography of Member by ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdBiographyGetAsync(Integer id, final ApiCallback<MemberBiographyItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersIdBiographyGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MemberBiographyItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersIdContactGet
     * @param id Contact details of Member by ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdContactGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/{id}/Contact"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersIdContactGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiMembersIdContactGet(Async)");
        }

        return apiMembersIdContactGetCall(id, _callback);

    }

    /**
     * Return list of contact details of member by ID
     * 
     * @param id Contact details of Member by ID specified (required)
     * @return ContactInformationListItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ContactInformationListItem apiMembersIdContactGet(Integer id) throws ApiException {
        ApiResponse<ContactInformationListItem> localVarResp = apiMembersIdContactGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Return list of contact details of member by ID
     * 
     * @param id Contact details of Member by ID specified (required)
     * @return ApiResponse&lt;ContactInformationListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactInformationListItem> apiMembersIdContactGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiMembersIdContactGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ContactInformationListItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return list of contact details of member by ID (asynchronously)
     * 
     * @param id Contact details of Member by ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdContactGetAsync(Integer id, final ApiCallback<ContactInformationListItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersIdContactGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ContactInformationListItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersIdContributionSummaryGet
     * @param id Contribution summary of Member by ID specified (required)
     * @param page  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdContributionSummaryGetCall(Integer id, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/{id}/ContributionSummary"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersIdContributionSummaryGetValidateBeforeCall(Integer id, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiMembersIdContributionSummaryGet(Async)");
        }

        return apiMembersIdContributionSummaryGetCall(id, page, _callback);

    }

    /**
     * Return contribution summary of member by ID
     * 
     * @param id Contribution summary of Member by ID specified (required)
     * @param page  (optional)
     * @return DebateContributionMembersServiceSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DebateContributionMembersServiceSearchResult apiMembersIdContributionSummaryGet(Integer id, Integer page) throws ApiException {
        ApiResponse<DebateContributionMembersServiceSearchResult> localVarResp = apiMembersIdContributionSummaryGetWithHttpInfo(id, page);
        return localVarResp.getData();
    }

    /**
     * Return contribution summary of member by ID
     * 
     * @param id Contribution summary of Member by ID specified (required)
     * @param page  (optional)
     * @return ApiResponse&lt;DebateContributionMembersServiceSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DebateContributionMembersServiceSearchResult> apiMembersIdContributionSummaryGetWithHttpInfo(Integer id, Integer page) throws ApiException {
        okhttp3.Call localVarCall = apiMembersIdContributionSummaryGetValidateBeforeCall(id, page, null);
        Type localVarReturnType = new TypeToken<DebateContributionMembersServiceSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return contribution summary of member by ID (asynchronously)
     * 
     * @param id Contribution summary of Member by ID specified (required)
     * @param page  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdContributionSummaryGetAsync(Integer id, Integer page, final ApiCallback<DebateContributionMembersServiceSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersIdContributionSummaryGetValidateBeforeCall(id, page, _callback);
        Type localVarReturnType = new TypeToken<DebateContributionMembersServiceSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersIdEdmsGet
     * @param id Early day motions of Member by ID specified (required)
     * @param page  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdEdmsGetCall(Integer id, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/{id}/Edms"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersIdEdmsGetValidateBeforeCall(Integer id, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiMembersIdEdmsGet(Async)");
        }

        return apiMembersIdEdmsGetCall(id, page, _callback);

    }

    /**
     * Return list of early day motions of member by ID
     * 
     * @param id Early day motions of Member by ID specified (required)
     * @param page  (optional)
     * @return EarlyDayMotionMembersServiceSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EarlyDayMotionMembersServiceSearchResult apiMembersIdEdmsGet(Integer id, Integer page) throws ApiException {
        ApiResponse<EarlyDayMotionMembersServiceSearchResult> localVarResp = apiMembersIdEdmsGetWithHttpInfo(id, page);
        return localVarResp.getData();
    }

    /**
     * Return list of early day motions of member by ID
     * 
     * @param id Early day motions of Member by ID specified (required)
     * @param page  (optional)
     * @return ApiResponse&lt;EarlyDayMotionMembersServiceSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EarlyDayMotionMembersServiceSearchResult> apiMembersIdEdmsGetWithHttpInfo(Integer id, Integer page) throws ApiException {
        okhttp3.Call localVarCall = apiMembersIdEdmsGetValidateBeforeCall(id, page, null);
        Type localVarReturnType = new TypeToken<EarlyDayMotionMembersServiceSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return list of early day motions of member by ID (asynchronously)
     * 
     * @param id Early day motions of Member by ID specified (required)
     * @param page  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdEdmsGetAsync(Integer id, Integer page, final ApiCallback<EarlyDayMotionMembersServiceSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersIdEdmsGetValidateBeforeCall(id, page, _callback);
        Type localVarReturnType = new TypeToken<EarlyDayMotionMembersServiceSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersIdExperienceGet
     * @param id Experience of Member by ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdExperienceGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/{id}/Experience"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersIdExperienceGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiMembersIdExperienceGet(Async)");
        }

        return apiMembersIdExperienceGetCall(id, _callback);

    }

    /**
     * Return experience of member by ID
     * 
     * @param id Experience of Member by ID specified (required)
     * @return BiographyExperienceListItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public BiographyExperienceListItem apiMembersIdExperienceGet(Integer id) throws ApiException {
        ApiResponse<BiographyExperienceListItem> localVarResp = apiMembersIdExperienceGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Return experience of member by ID
     * 
     * @param id Experience of Member by ID specified (required)
     * @return ApiResponse&lt;BiographyExperienceListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BiographyExperienceListItem> apiMembersIdExperienceGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiMembersIdExperienceGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BiographyExperienceListItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return experience of member by ID (asynchronously)
     * 
     * @param id Experience of Member by ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdExperienceGetAsync(Integer id, final ApiCallback<BiographyExperienceListItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersIdExperienceGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BiographyExperienceListItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersIdFocusGet
     * @param id Areas of focus of Member by ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdFocusGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/{id}/Focus"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersIdFocusGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiMembersIdFocusGet(Async)");
        }

        return apiMembersIdFocusGetCall(id, _callback);

    }

    /**
     * Return list of areas of focus of member by ID
     * 
     * @param id Areas of focus of Member by ID specified (required)
     * @return MemberFocusListItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public MemberFocusListItem apiMembersIdFocusGet(Integer id) throws ApiException {
        ApiResponse<MemberFocusListItem> localVarResp = apiMembersIdFocusGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Return list of areas of focus of member by ID
     * 
     * @param id Areas of focus of Member by ID specified (required)
     * @return ApiResponse&lt;MemberFocusListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MemberFocusListItem> apiMembersIdFocusGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiMembersIdFocusGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MemberFocusListItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return list of areas of focus of member by ID (asynchronously)
     * 
     * @param id Areas of focus of Member by ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdFocusGetAsync(Integer id, final ApiCallback<MemberFocusListItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersIdFocusGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MemberFocusListItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersIdGet
     * @param id Member by ID specified (required)
     * @param detailsForDate Member object will be populated with details from the date specified (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdGetCall(Integer id, OffsetDateTime detailsForDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (detailsForDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detailsForDate", detailsForDate));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersIdGetValidateBeforeCall(Integer id, OffsetDateTime detailsForDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiMembersIdGet(Async)");
        }

        return apiMembersIdGetCall(id, detailsForDate, _callback);

    }

    /**
     * Return member by ID
     * 
     * @param id Member by ID specified (required)
     * @param detailsForDate Member object will be populated with details from the date specified (optional)
     * @return MemberItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public MemberItem apiMembersIdGet(Integer id, OffsetDateTime detailsForDate) throws ApiException {
        ApiResponse<MemberItem> localVarResp = apiMembersIdGetWithHttpInfo(id, detailsForDate);
        return localVarResp.getData();
    }

    /**
     * Return member by ID
     * 
     * @param id Member by ID specified (required)
     * @param detailsForDate Member object will be populated with details from the date specified (optional)
     * @return ApiResponse&lt;MemberItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MemberItem> apiMembersIdGetWithHttpInfo(Integer id, OffsetDateTime detailsForDate) throws ApiException {
        okhttp3.Call localVarCall = apiMembersIdGetValidateBeforeCall(id, detailsForDate, null);
        Type localVarReturnType = new TypeToken<MemberItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return member by ID (asynchronously)
     * 
     * @param id Member by ID specified (required)
     * @param detailsForDate Member object will be populated with details from the date specified (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdGetAsync(Integer id, OffsetDateTime detailsForDate, final ApiCallback<MemberItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersIdGetValidateBeforeCall(id, detailsForDate, _callback);
        Type localVarReturnType = new TypeToken<MemberItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersIdLatestElectionResultGet
     * @param id Latest election result of Member by ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdLatestElectionResultGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/{id}/LatestElectionResult"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersIdLatestElectionResultGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiMembersIdLatestElectionResultGet(Async)");
        }

        return apiMembersIdLatestElectionResultGetCall(id, _callback);

    }

    /**
     * Return latest election result of member by ID
     * 
     * @param id Latest election result of Member by ID specified (required)
     * @return ElectionResultItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ElectionResultItem apiMembersIdLatestElectionResultGet(Integer id) throws ApiException {
        ApiResponse<ElectionResultItem> localVarResp = apiMembersIdLatestElectionResultGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Return latest election result of member by ID
     * 
     * @param id Latest election result of Member by ID specified (required)
     * @return ApiResponse&lt;ElectionResultItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ElectionResultItem> apiMembersIdLatestElectionResultGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiMembersIdLatestElectionResultGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ElectionResultItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return latest election result of member by ID (asynchronously)
     * 
     * @param id Latest election result of Member by ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdLatestElectionResultGetAsync(Integer id, final ApiCallback<ElectionResultItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersIdLatestElectionResultGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ElectionResultItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersIdPortraitGet
     * @param id Portrait of Member by ID specified (required)
     * @param cropType  (optional)
     * @param webVersion  (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdPortraitGetCall(Integer id, PortraitCropEnum cropType, Boolean webVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/{id}/Portrait"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cropType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cropType", cropType));
        }

        if (webVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webVersion", webVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersIdPortraitGetValidateBeforeCall(Integer id, PortraitCropEnum cropType, Boolean webVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiMembersIdPortraitGet(Async)");
        }

        return apiMembersIdPortraitGetCall(id, cropType, webVersion, _callback);

    }

    /**
     * Return portrait of member by ID
     * 
     * @param id Portrait of Member by ID specified (required)
     * @param cropType  (optional)
     * @param webVersion  (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void apiMembersIdPortraitGet(Integer id, PortraitCropEnum cropType, Boolean webVersion) throws ApiException {
        apiMembersIdPortraitGetWithHttpInfo(id, cropType, webVersion);
    }

    /**
     * Return portrait of member by ID
     * 
     * @param id Portrait of Member by ID specified (required)
     * @param cropType  (optional)
     * @param webVersion  (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiMembersIdPortraitGetWithHttpInfo(Integer id, PortraitCropEnum cropType, Boolean webVersion) throws ApiException {
        okhttp3.Call localVarCall = apiMembersIdPortraitGetValidateBeforeCall(id, cropType, webVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return portrait of member by ID (asynchronously)
     * 
     * @param id Portrait of Member by ID specified (required)
     * @param cropType  (optional)
     * @param webVersion  (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdPortraitGetAsync(Integer id, PortraitCropEnum cropType, Boolean webVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersIdPortraitGetValidateBeforeCall(id, cropType, webVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersIdPortraitUrlGet
     * @param id Portrait url of Member by ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdPortraitUrlGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/{id}/PortraitUrl"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersIdPortraitUrlGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiMembersIdPortraitUrlGet(Async)");
        }

        return apiMembersIdPortraitUrlGetCall(id, _callback);

    }

    /**
     * Return portrait url of member by ID
     * 
     * @param id Portrait url of Member by ID specified (required)
     * @return StringItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public StringItem apiMembersIdPortraitUrlGet(Integer id) throws ApiException {
        ApiResponse<StringItem> localVarResp = apiMembersIdPortraitUrlGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Return portrait url of member by ID
     * 
     * @param id Portrait url of Member by ID specified (required)
     * @return ApiResponse&lt;StringItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringItem> apiMembersIdPortraitUrlGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiMembersIdPortraitUrlGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<StringItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return portrait url of member by ID (asynchronously)
     * 
     * @param id Portrait url of Member by ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdPortraitUrlGetAsync(Integer id, final ApiCallback<StringItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersIdPortraitUrlGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<StringItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersIdRegisteredInterestsGet
     * @param id Registered interests of Member by ID specified (required)
     * @param house Registered interests of Member by House specified (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdRegisteredInterestsGetCall(Integer id, House house, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/{id}/RegisteredInterests"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (house != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("house", house));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersIdRegisteredInterestsGetValidateBeforeCall(Integer id, House house, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiMembersIdRegisteredInterestsGet(Async)");
        }

        return apiMembersIdRegisteredInterestsGetCall(id, house, _callback);

    }

    /**
     * Return list of registered interests of member by ID
     * 
     * @param id Registered interests of Member by ID specified (required)
     * @param house Registered interests of Member by House specified (optional)
     * @return RegisteredInterestCategoryListItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RegisteredInterestCategoryListItem apiMembersIdRegisteredInterestsGet(Integer id, House house) throws ApiException {
        ApiResponse<RegisteredInterestCategoryListItem> localVarResp = apiMembersIdRegisteredInterestsGetWithHttpInfo(id, house);
        return localVarResp.getData();
    }

    /**
     * Return list of registered interests of member by ID
     * 
     * @param id Registered interests of Member by ID specified (required)
     * @param house Registered interests of Member by House specified (optional)
     * @return ApiResponse&lt;RegisteredInterestCategoryListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisteredInterestCategoryListItem> apiMembersIdRegisteredInterestsGetWithHttpInfo(Integer id, House house) throws ApiException {
        okhttp3.Call localVarCall = apiMembersIdRegisteredInterestsGetValidateBeforeCall(id, house, null);
        Type localVarReturnType = new TypeToken<RegisteredInterestCategoryListItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return list of registered interests of member by ID (asynchronously)
     * 
     * @param id Registered interests of Member by ID specified (required)
     * @param house Registered interests of Member by House specified (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdRegisteredInterestsGetAsync(Integer id, House house, final ApiCallback<RegisteredInterestCategoryListItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersIdRegisteredInterestsGetValidateBeforeCall(id, house, _callback);
        Type localVarReturnType = new TypeToken<RegisteredInterestCategoryListItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersIdStaffGet
     * @param id Staff of Member by ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdStaffGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/{id}/Staff"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersIdStaffGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiMembersIdStaffGet(Async)");
        }

        return apiMembersIdStaffGetCall(id, _callback);

    }

    /**
     * Return list of staff of member by ID
     * 
     * @param id Staff of Member by ID specified (required)
     * @return StaffListItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public StaffListItem apiMembersIdStaffGet(Integer id) throws ApiException {
        ApiResponse<StaffListItem> localVarResp = apiMembersIdStaffGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Return list of staff of member by ID
     * 
     * @param id Staff of Member by ID specified (required)
     * @return ApiResponse&lt;StaffListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StaffListItem> apiMembersIdStaffGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiMembersIdStaffGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<StaffListItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return list of staff of member by ID (asynchronously)
     * 
     * @param id Staff of Member by ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdStaffGetAsync(Integer id, final ApiCallback<StaffListItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersIdStaffGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<StaffListItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersIdSynopsisGet
     * @param id Synopsis of Member by ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdSynopsisGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/{id}/Synopsis"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersIdSynopsisGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiMembersIdSynopsisGet(Async)");
        }

        return apiMembersIdSynopsisGetCall(id, _callback);

    }

    /**
     * Return synopsis of member by ID
     * 
     * @param id Synopsis of Member by ID specified (required)
     * @return StringItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public StringItem apiMembersIdSynopsisGet(Integer id) throws ApiException {
        ApiResponse<StringItem> localVarResp = apiMembersIdSynopsisGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Return synopsis of member by ID
     * 
     * @param id Synopsis of Member by ID specified (required)
     * @return ApiResponse&lt;StringItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringItem> apiMembersIdSynopsisGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiMembersIdSynopsisGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<StringItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return synopsis of member by ID (asynchronously)
     * 
     * @param id Synopsis of Member by ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdSynopsisGetAsync(Integer id, final ApiCallback<StringItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersIdSynopsisGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<StringItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersIdThumbnailGet
     * @param id Thumbnail of Member by ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdThumbnailGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/{id}/Thumbnail"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersIdThumbnailGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiMembersIdThumbnailGet(Async)");
        }

        return apiMembersIdThumbnailGetCall(id, _callback);

    }

    /**
     * Return thumbnail of member by ID
     * 
     * @param id Thumbnail of Member by ID specified (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void apiMembersIdThumbnailGet(Integer id) throws ApiException {
        apiMembersIdThumbnailGetWithHttpInfo(id);
    }

    /**
     * Return thumbnail of member by ID
     * 
     * @param id Thumbnail of Member by ID specified (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiMembersIdThumbnailGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiMembersIdThumbnailGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return thumbnail of member by ID (asynchronously)
     * 
     * @param id Thumbnail of Member by ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdThumbnailGetAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersIdThumbnailGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersIdThumbnailUrlGet
     * @param id Thumbnail url of Member by ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdThumbnailUrlGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/{id}/ThumbnailUrl"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersIdThumbnailUrlGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiMembersIdThumbnailUrlGet(Async)");
        }

        return apiMembersIdThumbnailUrlGetCall(id, _callback);

    }

    /**
     * Return thumbnail url of member by ID
     * 
     * @param id Thumbnail url of Member by ID specified (required)
     * @return StringItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public StringItem apiMembersIdThumbnailUrlGet(Integer id) throws ApiException {
        ApiResponse<StringItem> localVarResp = apiMembersIdThumbnailUrlGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Return thumbnail url of member by ID
     * 
     * @param id Thumbnail url of Member by ID specified (required)
     * @return ApiResponse&lt;StringItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringItem> apiMembersIdThumbnailUrlGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiMembersIdThumbnailUrlGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<StringItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return thumbnail url of member by ID (asynchronously)
     * 
     * @param id Thumbnail url of Member by ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdThumbnailUrlGetAsync(Integer id, final ApiCallback<StringItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersIdThumbnailUrlGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<StringItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersIdVotingGet
     * @param id Votes by Member by ID specified (required)
     * @param house  (required)
     * @param page  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdVotingGetCall(Integer id, House house, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/{id}/Voting"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (house != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("house", house));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersIdVotingGetValidateBeforeCall(Integer id, House house, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiMembersIdVotingGet(Async)");
        }

        // verify the required parameter 'house' is set
        if (house == null) {
            throw new ApiException("Missing the required parameter 'house' when calling apiMembersIdVotingGet(Async)");
        }

        return apiMembersIdVotingGetCall(id, house, page, _callback);

    }

    /**
     * Return list of votes by member by ID
     * 
     * @param id Votes by Member by ID specified (required)
     * @param house  (required)
     * @param page  (optional)
     * @return VoteMembersServiceSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public VoteMembersServiceSearchResult apiMembersIdVotingGet(Integer id, House house, Integer page) throws ApiException {
        ApiResponse<VoteMembersServiceSearchResult> localVarResp = apiMembersIdVotingGetWithHttpInfo(id, house, page);
        return localVarResp.getData();
    }

    /**
     * Return list of votes by member by ID
     * 
     * @param id Votes by Member by ID specified (required)
     * @param house  (required)
     * @param page  (optional)
     * @return ApiResponse&lt;VoteMembersServiceSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VoteMembersServiceSearchResult> apiMembersIdVotingGetWithHttpInfo(Integer id, House house, Integer page) throws ApiException {
        okhttp3.Call localVarCall = apiMembersIdVotingGetValidateBeforeCall(id, house, page, null);
        Type localVarReturnType = new TypeToken<VoteMembersServiceSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return list of votes by member by ID (asynchronously)
     * 
     * @param id Votes by Member by ID specified (required)
     * @param house  (required)
     * @param page  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdVotingGetAsync(Integer id, House house, Integer page, final ApiCallback<VoteMembersServiceSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersIdVotingGetValidateBeforeCall(id, house, page, _callback);
        Type localVarReturnType = new TypeToken<VoteMembersServiceSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersIdWrittenQuestionsGet
     * @param id Written questions by Member by ID specified (required)
     * @param page  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdWrittenQuestionsGetCall(Integer id, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/{id}/WrittenQuestions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersIdWrittenQuestionsGetValidateBeforeCall(Integer id, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiMembersIdWrittenQuestionsGet(Async)");
        }

        return apiMembersIdWrittenQuestionsGetCall(id, page, _callback);

    }

    /**
     * Return list of written questions by member by ID
     * 
     * @param id Written questions by Member by ID specified (required)
     * @param page  (optional)
     * @return WrittenQuestionMembersServiceSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public WrittenQuestionMembersServiceSearchResult apiMembersIdWrittenQuestionsGet(Integer id, Integer page) throws ApiException {
        ApiResponse<WrittenQuestionMembersServiceSearchResult> localVarResp = apiMembersIdWrittenQuestionsGetWithHttpInfo(id, page);
        return localVarResp.getData();
    }

    /**
     * Return list of written questions by member by ID
     * 
     * @param id Written questions by Member by ID specified (required)
     * @param page  (optional)
     * @return ApiResponse&lt;WrittenQuestionMembersServiceSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WrittenQuestionMembersServiceSearchResult> apiMembersIdWrittenQuestionsGetWithHttpInfo(Integer id, Integer page) throws ApiException {
        okhttp3.Call localVarCall = apiMembersIdWrittenQuestionsGetValidateBeforeCall(id, page, null);
        Type localVarReturnType = new TypeToken<WrittenQuestionMembersServiceSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return list of written questions by member by ID (asynchronously)
     * 
     * @param id Written questions by Member by ID specified (required)
     * @param page  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersIdWrittenQuestionsGetAsync(Integer id, Integer page, final ApiCallback<WrittenQuestionMembersServiceSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersIdWrittenQuestionsGetValidateBeforeCall(id, page, _callback);
        Type localVarReturnType = new TypeToken<WrittenQuestionMembersServiceSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersSearchGet
     * @param name Members where name contains term specified (optional)
     * @param location Members where postcode or geographical location matches the term specified (optional)
     * @param postTitle Members which have held the post specified (optional)
     * @param partyId Members which are currently affiliated with party with party ID (optional)
     * @param house Members where their most recent house is the house specified (optional)
     * @param constituencyId Members which currently hold the constituency with constituency id (optional)
     * @param nameStartsWith Members with surname begining with letter(s) specified (optional)
     * @param gender Members with the gender specified (optional)
     * @param membershipStartedSince Members who started on or after the date given (optional)
     * @param membershipEndedMembershipEndedSince Members who left the House on or after the date given (optional)
     * @param membershipEndedMembershipEndReasonIds  (optional)
     * @param membershipInDateRangeWasMemberOnOrAfter Members who were active on or after the date specified (optional)
     * @param membershipInDateRangeWasMemberOnOrBefore Members who were active on or before the date specified (optional)
     * @param membershipInDateRangeWasMemberOfHouse Members who were active in the house specifid (optional)
     * @param isEligible Members currently Eligible to sit in their House (optional)
     * @param isCurrentMember Members who are current or former members (optional)
     * @param policyInterestId Members with specified policy interest (optional)
     * @param experience Members with specified experience (optional)
     * @param skip The number of records to skip from the first, default is 0 (optional, default to 0)
     * @param take The number of records to return, default is 20. Maximum is 20 (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersSearchGetCall(String name, String location, String postTitle, Integer partyId, House house, Integer constituencyId, String nameStartsWith, String gender, OffsetDateTime membershipStartedSince, OffsetDateTime membershipEndedMembershipEndedSince, List<Integer> membershipEndedMembershipEndReasonIds, OffsetDateTime membershipInDateRangeWasMemberOnOrAfter, OffsetDateTime membershipInDateRangeWasMemberOnOrBefore, House membershipInDateRangeWasMemberOfHouse, Boolean isEligible, Boolean isCurrentMember, Integer policyInterestId, String experience, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/Search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (postTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PostTitle", postTitle));
        }

        if (partyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PartyId", partyId));
        }

        if (house != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("House", house));
        }

        if (constituencyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ConstituencyId", constituencyId));
        }

        if (nameStartsWith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NameStartsWith", nameStartsWith));
        }

        if (gender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Gender", gender));
        }

        if (membershipStartedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MembershipStartedSince", membershipStartedSince));
        }

        if (membershipEndedMembershipEndedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MembershipEnded.MembershipEndedSince", membershipEndedMembershipEndedSince));
        }

        if (membershipEndedMembershipEndReasonIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "MembershipEnded.MembershipEndReasonIds", membershipEndedMembershipEndReasonIds));
        }

        if (membershipInDateRangeWasMemberOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MembershipInDateRange.WasMemberOnOrAfter", membershipInDateRangeWasMemberOnOrAfter));
        }

        if (membershipInDateRangeWasMemberOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MembershipInDateRange.WasMemberOnOrBefore", membershipInDateRangeWasMemberOnOrBefore));
        }

        if (membershipInDateRangeWasMemberOfHouse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MembershipInDateRange.WasMemberOfHouse", membershipInDateRangeWasMemberOfHouse));
        }

        if (isEligible != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IsEligible", isEligible));
        }

        if (isCurrentMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IsCurrentMember", isCurrentMember));
        }

        if (policyInterestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PolicyInterestId", policyInterestId));
        }

        if (experience != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Experience", experience));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersSearchGetValidateBeforeCall(String name, String location, String postTitle, Integer partyId, House house, Integer constituencyId, String nameStartsWith, String gender, OffsetDateTime membershipStartedSince, OffsetDateTime membershipEndedMembershipEndedSince, List<Integer> membershipEndedMembershipEndReasonIds, OffsetDateTime membershipInDateRangeWasMemberOnOrAfter, OffsetDateTime membershipInDateRangeWasMemberOnOrBefore, House membershipInDateRangeWasMemberOfHouse, Boolean isEligible, Boolean isCurrentMember, Integer policyInterestId, String experience, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        return apiMembersSearchGetCall(name, location, postTitle, partyId, house, constituencyId, nameStartsWith, gender, membershipStartedSince, membershipEndedMembershipEndedSince, membershipEndedMembershipEndReasonIds, membershipInDateRangeWasMemberOnOrAfter, membershipInDateRangeWasMemberOnOrBefore, membershipInDateRangeWasMemberOfHouse, isEligible, isCurrentMember, policyInterestId, experience, skip, take, _callback);

    }

    /**
     * Returns a list of current members of the Commons or Lords
     * 
     * @param name Members where name contains term specified (optional)
     * @param location Members where postcode or geographical location matches the term specified (optional)
     * @param postTitle Members which have held the post specified (optional)
     * @param partyId Members which are currently affiliated with party with party ID (optional)
     * @param house Members where their most recent house is the house specified (optional)
     * @param constituencyId Members which currently hold the constituency with constituency id (optional)
     * @param nameStartsWith Members with surname begining with letter(s) specified (optional)
     * @param gender Members with the gender specified (optional)
     * @param membershipStartedSince Members who started on or after the date given (optional)
     * @param membershipEndedMembershipEndedSince Members who left the House on or after the date given (optional)
     * @param membershipEndedMembershipEndReasonIds  (optional)
     * @param membershipInDateRangeWasMemberOnOrAfter Members who were active on or after the date specified (optional)
     * @param membershipInDateRangeWasMemberOnOrBefore Members who were active on or before the date specified (optional)
     * @param membershipInDateRangeWasMemberOfHouse Members who were active in the house specifid (optional)
     * @param isEligible Members currently Eligible to sit in their House (optional)
     * @param isCurrentMember Members who are current or former members (optional)
     * @param policyInterestId Members with specified policy interest (optional)
     * @param experience Members with specified experience (optional)
     * @param skip The number of records to skip from the first, default is 0 (optional, default to 0)
     * @param take The number of records to return, default is 20. Maximum is 20 (optional, default to 20)
     * @return MemberMembersServiceSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public MemberMembersServiceSearchResult apiMembersSearchGet(String name, String location, String postTitle, Integer partyId, House house, Integer constituencyId, String nameStartsWith, String gender, OffsetDateTime membershipStartedSince, OffsetDateTime membershipEndedMembershipEndedSince, List<Integer> membershipEndedMembershipEndReasonIds, OffsetDateTime membershipInDateRangeWasMemberOnOrAfter, OffsetDateTime membershipInDateRangeWasMemberOnOrBefore, House membershipInDateRangeWasMemberOfHouse, Boolean isEligible, Boolean isCurrentMember, Integer policyInterestId, String experience, Integer skip, Integer take) throws ApiException {
        ApiResponse<MemberMembersServiceSearchResult> localVarResp = apiMembersSearchGetWithHttpInfo(name, location, postTitle, partyId, house, constituencyId, nameStartsWith, gender, membershipStartedSince, membershipEndedMembershipEndedSince, membershipEndedMembershipEndReasonIds, membershipInDateRangeWasMemberOnOrAfter, membershipInDateRangeWasMemberOnOrBefore, membershipInDateRangeWasMemberOfHouse, isEligible, isCurrentMember, policyInterestId, experience, skip, take);
        return localVarResp.getData();
    }

    /**
     * Returns a list of current members of the Commons or Lords
     * 
     * @param name Members where name contains term specified (optional)
     * @param location Members where postcode or geographical location matches the term specified (optional)
     * @param postTitle Members which have held the post specified (optional)
     * @param partyId Members which are currently affiliated with party with party ID (optional)
     * @param house Members where their most recent house is the house specified (optional)
     * @param constituencyId Members which currently hold the constituency with constituency id (optional)
     * @param nameStartsWith Members with surname begining with letter(s) specified (optional)
     * @param gender Members with the gender specified (optional)
     * @param membershipStartedSince Members who started on or after the date given (optional)
     * @param membershipEndedMembershipEndedSince Members who left the House on or after the date given (optional)
     * @param membershipEndedMembershipEndReasonIds  (optional)
     * @param membershipInDateRangeWasMemberOnOrAfter Members who were active on or after the date specified (optional)
     * @param membershipInDateRangeWasMemberOnOrBefore Members who were active on or before the date specified (optional)
     * @param membershipInDateRangeWasMemberOfHouse Members who were active in the house specifid (optional)
     * @param isEligible Members currently Eligible to sit in their House (optional)
     * @param isCurrentMember Members who are current or former members (optional)
     * @param policyInterestId Members with specified policy interest (optional)
     * @param experience Members with specified experience (optional)
     * @param skip The number of records to skip from the first, default is 0 (optional, default to 0)
     * @param take The number of records to return, default is 20. Maximum is 20 (optional, default to 20)
     * @return ApiResponse&lt;MemberMembersServiceSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MemberMembersServiceSearchResult> apiMembersSearchGetWithHttpInfo(String name, String location, String postTitle, Integer partyId, House house, Integer constituencyId, String nameStartsWith, String gender, OffsetDateTime membershipStartedSince, OffsetDateTime membershipEndedMembershipEndedSince, List<Integer> membershipEndedMembershipEndReasonIds, OffsetDateTime membershipInDateRangeWasMemberOnOrAfter, OffsetDateTime membershipInDateRangeWasMemberOnOrBefore, House membershipInDateRangeWasMemberOfHouse, Boolean isEligible, Boolean isCurrentMember, Integer policyInterestId, String experience, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = apiMembersSearchGetValidateBeforeCall(name, location, postTitle, partyId, house, constituencyId, nameStartsWith, gender, membershipStartedSince, membershipEndedMembershipEndedSince, membershipEndedMembershipEndReasonIds, membershipInDateRangeWasMemberOnOrAfter, membershipInDateRangeWasMemberOnOrBefore, membershipInDateRangeWasMemberOfHouse, isEligible, isCurrentMember, policyInterestId, experience, skip, take, null);
        Type localVarReturnType = new TypeToken<MemberMembersServiceSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of current members of the Commons or Lords (asynchronously)
     * 
     * @param name Members where name contains term specified (optional)
     * @param location Members where postcode or geographical location matches the term specified (optional)
     * @param postTitle Members which have held the post specified (optional)
     * @param partyId Members which are currently affiliated with party with party ID (optional)
     * @param house Members where their most recent house is the house specified (optional)
     * @param constituencyId Members which currently hold the constituency with constituency id (optional)
     * @param nameStartsWith Members with surname begining with letter(s) specified (optional)
     * @param gender Members with the gender specified (optional)
     * @param membershipStartedSince Members who started on or after the date given (optional)
     * @param membershipEndedMembershipEndedSince Members who left the House on or after the date given (optional)
     * @param membershipEndedMembershipEndReasonIds  (optional)
     * @param membershipInDateRangeWasMemberOnOrAfter Members who were active on or after the date specified (optional)
     * @param membershipInDateRangeWasMemberOnOrBefore Members who were active on or before the date specified (optional)
     * @param membershipInDateRangeWasMemberOfHouse Members who were active in the house specifid (optional)
     * @param isEligible Members currently Eligible to sit in their House (optional)
     * @param isCurrentMember Members who are current or former members (optional)
     * @param policyInterestId Members with specified policy interest (optional)
     * @param experience Members with specified experience (optional)
     * @param skip The number of records to skip from the first, default is 0 (optional, default to 0)
     * @param take The number of records to return, default is 20. Maximum is 20 (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersSearchGetAsync(String name, String location, String postTitle, Integer partyId, House house, Integer constituencyId, String nameStartsWith, String gender, OffsetDateTime membershipStartedSince, OffsetDateTime membershipEndedMembershipEndedSince, List<Integer> membershipEndedMembershipEndReasonIds, OffsetDateTime membershipInDateRangeWasMemberOnOrAfter, OffsetDateTime membershipInDateRangeWasMemberOnOrBefore, House membershipInDateRangeWasMemberOfHouse, Boolean isEligible, Boolean isCurrentMember, Integer policyInterestId, String experience, Integer skip, Integer take, final ApiCallback<MemberMembersServiceSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersSearchGetValidateBeforeCall(name, location, postTitle, partyId, house, constituencyId, nameStartsWith, gender, membershipStartedSince, membershipEndedMembershipEndedSince, membershipEndedMembershipEndReasonIds, membershipInDateRangeWasMemberOnOrAfter, membershipInDateRangeWasMemberOnOrBefore, membershipInDateRangeWasMemberOfHouse, isEligible, isCurrentMember, policyInterestId, experience, skip, take, _callback);
        Type localVarReturnType = new TypeToken<MemberMembersServiceSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMembersSearchHistoricalGet
     * @param name Members with names containing the term specified (optional)
     * @param dateToSearchFor Members that were an active member of the Commons or Lords on the date specified (optional)
     * @param skip The number of records to skip from the first, default is 0 (optional, default to 0)
     * @param take The number of records to return, default is 20. Maximum is 20 (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersSearchHistoricalGetCall(String name, OffsetDateTime dateToSearchFor, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Members/SearchHistorical";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (dateToSearchFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateToSearchFor", dateToSearchFor));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMembersSearchHistoricalGetValidateBeforeCall(String name, OffsetDateTime dateToSearchFor, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        return apiMembersSearchHistoricalGetCall(name, dateToSearchFor, skip, take, _callback);

    }

    /**
     * Returns a list of members of the Commons or Lords
     * 
     * @param name Members with names containing the term specified (optional)
     * @param dateToSearchFor Members that were an active member of the Commons or Lords on the date specified (optional)
     * @param skip The number of records to skip from the first, default is 0 (optional, default to 0)
     * @param take The number of records to return, default is 20. Maximum is 20 (optional, default to 20)
     * @return MemberMembersServiceSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public MemberMembersServiceSearchResult apiMembersSearchHistoricalGet(String name, OffsetDateTime dateToSearchFor, Integer skip, Integer take) throws ApiException {
        ApiResponse<MemberMembersServiceSearchResult> localVarResp = apiMembersSearchHistoricalGetWithHttpInfo(name, dateToSearchFor, skip, take);
        return localVarResp.getData();
    }

    /**
     * Returns a list of members of the Commons or Lords
     * 
     * @param name Members with names containing the term specified (optional)
     * @param dateToSearchFor Members that were an active member of the Commons or Lords on the date specified (optional)
     * @param skip The number of records to skip from the first, default is 0 (optional, default to 0)
     * @param take The number of records to return, default is 20. Maximum is 20 (optional, default to 20)
     * @return ApiResponse&lt;MemberMembersServiceSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MemberMembersServiceSearchResult> apiMembersSearchHistoricalGetWithHttpInfo(String name, OffsetDateTime dateToSearchFor, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = apiMembersSearchHistoricalGetValidateBeforeCall(name, dateToSearchFor, skip, take, null);
        Type localVarReturnType = new TypeToken<MemberMembersServiceSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of members of the Commons or Lords (asynchronously)
     * 
     * @param name Members with names containing the term specified (optional)
     * @param dateToSearchFor Members that were an active member of the Commons or Lords on the date specified (optional)
     * @param skip The number of records to skip from the first, default is 0 (optional, default to 0)
     * @param take The number of records to return, default is 20. Maximum is 20 (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMembersSearchHistoricalGetAsync(String name, OffsetDateTime dateToSearchFor, Integer skip, Integer take, final ApiCallback<MemberMembersServiceSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMembersSearchHistoricalGetValidateBeforeCall(name, dateToSearchFor, skip, take, _callback);
        Type localVarReturnType = new TypeToken<MemberMembersServiceSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
