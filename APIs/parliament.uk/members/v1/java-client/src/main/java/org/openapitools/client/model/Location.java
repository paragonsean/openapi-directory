/*
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LocationContext;
import org.openapitools.client.model.PartySeatCount;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Location
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:33.493029-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Location {
  public static final String SERIALIZED_NAME_CHILD_CONTEXTS = "childContexts";
  @SerializedName(SERIALIZED_NAME_CHILD_CONTEXTS)
  private List<LocationContext> childContexts;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private LocationContext context;

  public static final String SERIALIZED_NAME_PARENT_CONTEXT = "parentContext";
  @SerializedName(SERIALIZED_NAME_PARENT_CONTEXT)
  private LocationContext parentContext;

  public static final String SERIALIZED_NAME_STATE_OF_THE_PARTIES = "stateOfTheParties";
  @SerializedName(SERIALIZED_NAME_STATE_OF_THE_PARTIES)
  private List<PartySeatCount> stateOfTheParties;

  public Location() {
  }

  public Location childContexts(List<LocationContext> childContexts) {
    this.childContexts = childContexts;
    return this;
  }

  public Location addChildContextsItem(LocationContext childContextsItem) {
    if (this.childContexts == null) {
      this.childContexts = new ArrayList<>();
    }
    this.childContexts.add(childContextsItem);
    return this;
  }

  /**
   * Get childContexts
   * @return childContexts
   */
  @javax.annotation.Nullable
  public List<LocationContext> getChildContexts() {
    return childContexts;
  }

  public void setChildContexts(List<LocationContext> childContexts) {
    this.childContexts = childContexts;
  }


  public Location context(LocationContext context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public LocationContext getContext() {
    return context;
  }

  public void setContext(LocationContext context) {
    this.context = context;
  }


  public Location parentContext(LocationContext parentContext) {
    this.parentContext = parentContext;
    return this;
  }

  /**
   * Get parentContext
   * @return parentContext
   */
  @javax.annotation.Nullable
  public LocationContext getParentContext() {
    return parentContext;
  }

  public void setParentContext(LocationContext parentContext) {
    this.parentContext = parentContext;
  }


  public Location stateOfTheParties(List<PartySeatCount> stateOfTheParties) {
    this.stateOfTheParties = stateOfTheParties;
    return this;
  }

  public Location addStateOfThePartiesItem(PartySeatCount stateOfThePartiesItem) {
    if (this.stateOfTheParties == null) {
      this.stateOfTheParties = new ArrayList<>();
    }
    this.stateOfTheParties.add(stateOfThePartiesItem);
    return this;
  }

  /**
   * Get stateOfTheParties
   * @return stateOfTheParties
   */
  @javax.annotation.Nullable
  public List<PartySeatCount> getStateOfTheParties() {
    return stateOfTheParties;
  }

  public void setStateOfTheParties(List<PartySeatCount> stateOfTheParties) {
    this.stateOfTheParties = stateOfTheParties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Location location = (Location) o;
    return Objects.equals(this.childContexts, location.childContexts) &&
        Objects.equals(this.context, location.context) &&
        Objects.equals(this.parentContext, location.parentContext) &&
        Objects.equals(this.stateOfTheParties, location.stateOfTheParties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(childContexts, context, parentContext, stateOfTheParties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Location {\n");
    sb.append("    childContexts: ").append(toIndentedString(childContexts)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    parentContext: ").append(toIndentedString(parentContext)).append("\n");
    sb.append("    stateOfTheParties: ").append(toIndentedString(stateOfTheParties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("childContexts");
    openapiFields.add("context");
    openapiFields.add("parentContext");
    openapiFields.add("stateOfTheParties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Location
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Location.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Location is not found in the empty JSON string", Location.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Location.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Location` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("childContexts") != null && !jsonObj.get("childContexts").isJsonNull()) {
        JsonArray jsonArraychildContexts = jsonObj.getAsJsonArray("childContexts");
        if (jsonArraychildContexts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("childContexts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `childContexts` to be an array in the JSON string but got `%s`", jsonObj.get("childContexts").toString()));
          }

          // validate the optional field `childContexts` (array)
          for (int i = 0; i < jsonArraychildContexts.size(); i++) {
            LocationContext.validateJsonElement(jsonArraychildContexts.get(i));
          };
        }
      }
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        LocationContext.validateJsonElement(jsonObj.get("context"));
      }
      // validate the optional field `parentContext`
      if (jsonObj.get("parentContext") != null && !jsonObj.get("parentContext").isJsonNull()) {
        LocationContext.validateJsonElement(jsonObj.get("parentContext"));
      }
      if (jsonObj.get("stateOfTheParties") != null && !jsonObj.get("stateOfTheParties").isJsonNull()) {
        JsonArray jsonArraystateOfTheParties = jsonObj.getAsJsonArray("stateOfTheParties");
        if (jsonArraystateOfTheParties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stateOfTheParties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stateOfTheParties` to be an array in the JSON string but got `%s`", jsonObj.get("stateOfTheParties").toString()));
          }

          // validate the optional field `stateOfTheParties` (array)
          for (int i = 0; i < jsonArraystateOfTheParties.size(); i++) {
            PartySeatCount.validateJsonElement(jsonArraystateOfTheParties.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Location.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Location' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Location> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Location.class));

       return (TypeAdapter<T>) new TypeAdapter<Location>() {
           @Override
           public void write(JsonWriter out, Location value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Location read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Location given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Location
   * @throws IOException if the JSON string is invalid with respect to Location
   */
  public static Location fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Location.class);
  }

  /**
   * Convert an instance of Location to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

