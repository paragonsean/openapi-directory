/*
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.House;
import org.openapitools.client.model.LordsByTypeMembersServiceSearchResult;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PartyMembersServiceSearchResult;
import org.openapitools.client.model.PartySeatCountMembersServiceSearchResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PartiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PartiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PartiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiPartiesGetActiveHouseGet
     * @param house Current parties by house (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPartiesGetActiveHouseGetCall(House house, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Parties/GetActive/{house}"
            .replace("{" + "house" + "}", localVarApiClient.escapeString(house.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPartiesGetActiveHouseGetValidateBeforeCall(House house, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'house' is set
        if (house == null) {
            throw new ApiException("Missing the required parameter 'house' when calling apiPartiesGetActiveHouseGet(Async)");
        }

        return apiPartiesGetActiveHouseGetCall(house, _callback);

    }

    /**
     * Returns a list of current parties with at least one active member.
     * 
     * @param house Current parties by house (required)
     * @return PartyMembersServiceSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PartyMembersServiceSearchResult apiPartiesGetActiveHouseGet(House house) throws ApiException {
        ApiResponse<PartyMembersServiceSearchResult> localVarResp = apiPartiesGetActiveHouseGetWithHttpInfo(house);
        return localVarResp.getData();
    }

    /**
     * Returns a list of current parties with at least one active member.
     * 
     * @param house Current parties by house (required)
     * @return ApiResponse&lt;PartyMembersServiceSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartyMembersServiceSearchResult> apiPartiesGetActiveHouseGetWithHttpInfo(House house) throws ApiException {
        okhttp3.Call localVarCall = apiPartiesGetActiveHouseGetValidateBeforeCall(house, null);
        Type localVarReturnType = new TypeToken<PartyMembersServiceSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of current parties with at least one active member. (asynchronously)
     * 
     * @param house Current parties by house (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPartiesGetActiveHouseGetAsync(House house, final ApiCallback<PartyMembersServiceSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPartiesGetActiveHouseGetValidateBeforeCall(house, _callback);
        Type localVarReturnType = new TypeToken<PartyMembersServiceSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPartiesLordsByTypeForDateGet
     * @param forDate Composition of the Lords for date specified. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPartiesLordsByTypeForDateGetCall(OffsetDateTime forDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Parties/LordsByType/{forDate}"
            .replace("{" + "forDate" + "}", localVarApiClient.escapeString(forDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPartiesLordsByTypeForDateGetValidateBeforeCall(OffsetDateTime forDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'forDate' is set
        if (forDate == null) {
            throw new ApiException("Missing the required parameter 'forDate' when calling apiPartiesLordsByTypeForDateGet(Async)");
        }

        return apiPartiesLordsByTypeForDateGetCall(forDate, _callback);

    }

    /**
     * Returns the composition of the House of Lords by peerage type.
     * 
     * @param forDate Composition of the Lords for date specified. (required)
     * @return LordsByTypeMembersServiceSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public LordsByTypeMembersServiceSearchResult apiPartiesLordsByTypeForDateGet(OffsetDateTime forDate) throws ApiException {
        ApiResponse<LordsByTypeMembersServiceSearchResult> localVarResp = apiPartiesLordsByTypeForDateGetWithHttpInfo(forDate);
        return localVarResp.getData();
    }

    /**
     * Returns the composition of the House of Lords by peerage type.
     * 
     * @param forDate Composition of the Lords for date specified. (required)
     * @return ApiResponse&lt;LordsByTypeMembersServiceSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LordsByTypeMembersServiceSearchResult> apiPartiesLordsByTypeForDateGetWithHttpInfo(OffsetDateTime forDate) throws ApiException {
        okhttp3.Call localVarCall = apiPartiesLordsByTypeForDateGetValidateBeforeCall(forDate, null);
        Type localVarReturnType = new TypeToken<LordsByTypeMembersServiceSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the composition of the House of Lords by peerage type. (asynchronously)
     * 
     * @param forDate Composition of the Lords for date specified. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPartiesLordsByTypeForDateGetAsync(OffsetDateTime forDate, final ApiCallback<LordsByTypeMembersServiceSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPartiesLordsByTypeForDateGetValidateBeforeCall(forDate, _callback);
        Type localVarReturnType = new TypeToken<LordsByTypeMembersServiceSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPartiesStateOfThePartiesHouseForDateGet
     * @param house State of parties in Commons or Lords. (required)
     * @param forDate State of parties for the date specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPartiesStateOfThePartiesHouseForDateGetCall(House house, OffsetDateTime forDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Parties/StateOfTheParties/{house}/{forDate}"
            .replace("{" + "house" + "}", localVarApiClient.escapeString(house.toString()))
            .replace("{" + "forDate" + "}", localVarApiClient.escapeString(forDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPartiesStateOfThePartiesHouseForDateGetValidateBeforeCall(House house, OffsetDateTime forDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'house' is set
        if (house == null) {
            throw new ApiException("Missing the required parameter 'house' when calling apiPartiesStateOfThePartiesHouseForDateGet(Async)");
        }

        // verify the required parameter 'forDate' is set
        if (forDate == null) {
            throw new ApiException("Missing the required parameter 'forDate' when calling apiPartiesStateOfThePartiesHouseForDateGet(Async)");
        }

        return apiPartiesStateOfThePartiesHouseForDateGetCall(house, forDate, _callback);

    }

    /**
     * Returns current state of parties
     * 
     * @param house State of parties in Commons or Lords. (required)
     * @param forDate State of parties for the date specified (required)
     * @return PartySeatCountMembersServiceSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PartySeatCountMembersServiceSearchResult apiPartiesStateOfThePartiesHouseForDateGet(House house, OffsetDateTime forDate) throws ApiException {
        ApiResponse<PartySeatCountMembersServiceSearchResult> localVarResp = apiPartiesStateOfThePartiesHouseForDateGetWithHttpInfo(house, forDate);
        return localVarResp.getData();
    }

    /**
     * Returns current state of parties
     * 
     * @param house State of parties in Commons or Lords. (required)
     * @param forDate State of parties for the date specified (required)
     * @return ApiResponse&lt;PartySeatCountMembersServiceSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartySeatCountMembersServiceSearchResult> apiPartiesStateOfThePartiesHouseForDateGetWithHttpInfo(House house, OffsetDateTime forDate) throws ApiException {
        okhttp3.Call localVarCall = apiPartiesStateOfThePartiesHouseForDateGetValidateBeforeCall(house, forDate, null);
        Type localVarReturnType = new TypeToken<PartySeatCountMembersServiceSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns current state of parties (asynchronously)
     * 
     * @param house State of parties in Commons or Lords. (required)
     * @param forDate State of parties for the date specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPartiesStateOfThePartiesHouseForDateGetAsync(House house, OffsetDateTime forDate, final ApiCallback<PartySeatCountMembersServiceSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPartiesStateOfThePartiesHouseForDateGetValidateBeforeCall(house, forDate, _callback);
        Type localVarReturnType = new TypeToken<PartySeatCountMembersServiceSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
