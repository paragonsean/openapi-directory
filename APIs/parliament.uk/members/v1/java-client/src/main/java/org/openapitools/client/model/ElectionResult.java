/*
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ElectionCandidate;
import org.openapitools.client.model.Party;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ElectionResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:33.493029-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ElectionResult {
  public static final String SERIALIZED_NAME_CANDIDATES = "candidates";
  @SerializedName(SERIALIZED_NAME_CANDIDATES)
  private List<ElectionCandidate> candidates;

  public static final String SERIALIZED_NAME_CONSTITUENCY_NAME = "constituencyName";
  @SerializedName(SERIALIZED_NAME_CONSTITUENCY_NAME)
  private String constituencyName;

  public static final String SERIALIZED_NAME_ELECTION_DATE = "electionDate";
  @SerializedName(SERIALIZED_NAME_ELECTION_DATE)
  private OffsetDateTime electionDate;

  public static final String SERIALIZED_NAME_ELECTION_ID = "electionId";
  @SerializedName(SERIALIZED_NAME_ELECTION_ID)
  private Integer electionId;

  public static final String SERIALIZED_NAME_ELECTION_TITLE = "electionTitle";
  @SerializedName(SERIALIZED_NAME_ELECTION_TITLE)
  private String electionTitle;

  public static final String SERIALIZED_NAME_ELECTORATE = "electorate";
  @SerializedName(SERIALIZED_NAME_ELECTORATE)
  private Integer electorate;

  public static final String SERIALIZED_NAME_IS_GENERAL_ELECTION = "isGeneralElection";
  @SerializedName(SERIALIZED_NAME_IS_GENERAL_ELECTION)
  private Boolean isGeneralElection;

  public static final String SERIALIZED_NAME_IS_NOTIONAL = "isNotional";
  @SerializedName(SERIALIZED_NAME_IS_NOTIONAL)
  private Boolean isNotional;

  public static final String SERIALIZED_NAME_MAJORITY = "majority";
  @SerializedName(SERIALIZED_NAME_MAJORITY)
  private Integer majority;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private String result;

  public static final String SERIALIZED_NAME_TURNOUT = "turnout";
  @SerializedName(SERIALIZED_NAME_TURNOUT)
  private Integer turnout;

  public static final String SERIALIZED_NAME_WINNING_PARTY = "winningParty";
  @SerializedName(SERIALIZED_NAME_WINNING_PARTY)
  private Party winningParty;

  public ElectionResult() {
  }

  public ElectionResult candidates(List<ElectionCandidate> candidates) {
    this.candidates = candidates;
    return this;
  }

  public ElectionResult addCandidatesItem(ElectionCandidate candidatesItem) {
    if (this.candidates == null) {
      this.candidates = new ArrayList<>();
    }
    this.candidates.add(candidatesItem);
    return this;
  }

  /**
   * Get candidates
   * @return candidates
   */
  @javax.annotation.Nullable
  public List<ElectionCandidate> getCandidates() {
    return candidates;
  }

  public void setCandidates(List<ElectionCandidate> candidates) {
    this.candidates = candidates;
  }


  public ElectionResult constituencyName(String constituencyName) {
    this.constituencyName = constituencyName;
    return this;
  }

  /**
   * Get constituencyName
   * @return constituencyName
   */
  @javax.annotation.Nullable
  public String getConstituencyName() {
    return constituencyName;
  }

  public void setConstituencyName(String constituencyName) {
    this.constituencyName = constituencyName;
  }


  public ElectionResult electionDate(OffsetDateTime electionDate) {
    this.electionDate = electionDate;
    return this;
  }

  /**
   * Get electionDate
   * @return electionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getElectionDate() {
    return electionDate;
  }

  public void setElectionDate(OffsetDateTime electionDate) {
    this.electionDate = electionDate;
  }


  public ElectionResult electionId(Integer electionId) {
    this.electionId = electionId;
    return this;
  }

  /**
   * Get electionId
   * @return electionId
   */
  @javax.annotation.Nullable
  public Integer getElectionId() {
    return electionId;
  }

  public void setElectionId(Integer electionId) {
    this.electionId = electionId;
  }


  public ElectionResult electionTitle(String electionTitle) {
    this.electionTitle = electionTitle;
    return this;
  }

  /**
   * Get electionTitle
   * @return electionTitle
   */
  @javax.annotation.Nullable
  public String getElectionTitle() {
    return electionTitle;
  }

  public void setElectionTitle(String electionTitle) {
    this.electionTitle = electionTitle;
  }


  public ElectionResult electorate(Integer electorate) {
    this.electorate = electorate;
    return this;
  }

  /**
   * Get electorate
   * @return electorate
   */
  @javax.annotation.Nullable
  public Integer getElectorate() {
    return electorate;
  }

  public void setElectorate(Integer electorate) {
    this.electorate = electorate;
  }


  public ElectionResult isGeneralElection(Boolean isGeneralElection) {
    this.isGeneralElection = isGeneralElection;
    return this;
  }

  /**
   * Get isGeneralElection
   * @return isGeneralElection
   */
  @javax.annotation.Nullable
  public Boolean getIsGeneralElection() {
    return isGeneralElection;
  }

  public void setIsGeneralElection(Boolean isGeneralElection) {
    this.isGeneralElection = isGeneralElection;
  }


  public ElectionResult isNotional(Boolean isNotional) {
    this.isNotional = isNotional;
    return this;
  }

  /**
   * Get isNotional
   * @return isNotional
   */
  @javax.annotation.Nullable
  public Boolean getIsNotional() {
    return isNotional;
  }

  public void setIsNotional(Boolean isNotional) {
    this.isNotional = isNotional;
  }


  public ElectionResult majority(Integer majority) {
    this.majority = majority;
    return this;
  }

  /**
   * Get majority
   * @return majority
   */
  @javax.annotation.Nullable
  public Integer getMajority() {
    return majority;
  }

  public void setMajority(Integer majority) {
    this.majority = majority;
  }


  public ElectionResult result(String result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public String getResult() {
    return result;
  }

  public void setResult(String result) {
    this.result = result;
  }


  public ElectionResult turnout(Integer turnout) {
    this.turnout = turnout;
    return this;
  }

  /**
   * Get turnout
   * @return turnout
   */
  @javax.annotation.Nullable
  public Integer getTurnout() {
    return turnout;
  }

  public void setTurnout(Integer turnout) {
    this.turnout = turnout;
  }


  public ElectionResult winningParty(Party winningParty) {
    this.winningParty = winningParty;
    return this;
  }

  /**
   * Get winningParty
   * @return winningParty
   */
  @javax.annotation.Nullable
  public Party getWinningParty() {
    return winningParty;
  }

  public void setWinningParty(Party winningParty) {
    this.winningParty = winningParty;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElectionResult electionResult = (ElectionResult) o;
    return Objects.equals(this.candidates, electionResult.candidates) &&
        Objects.equals(this.constituencyName, electionResult.constituencyName) &&
        Objects.equals(this.electionDate, electionResult.electionDate) &&
        Objects.equals(this.electionId, electionResult.electionId) &&
        Objects.equals(this.electionTitle, electionResult.electionTitle) &&
        Objects.equals(this.electorate, electionResult.electorate) &&
        Objects.equals(this.isGeneralElection, electionResult.isGeneralElection) &&
        Objects.equals(this.isNotional, electionResult.isNotional) &&
        Objects.equals(this.majority, electionResult.majority) &&
        Objects.equals(this.result, electionResult.result) &&
        Objects.equals(this.turnout, electionResult.turnout) &&
        Objects.equals(this.winningParty, electionResult.winningParty);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(candidates, constituencyName, electionDate, electionId, electionTitle, electorate, isGeneralElection, isNotional, majority, result, turnout, winningParty);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElectionResult {\n");
    sb.append("    candidates: ").append(toIndentedString(candidates)).append("\n");
    sb.append("    constituencyName: ").append(toIndentedString(constituencyName)).append("\n");
    sb.append("    electionDate: ").append(toIndentedString(electionDate)).append("\n");
    sb.append("    electionId: ").append(toIndentedString(electionId)).append("\n");
    sb.append("    electionTitle: ").append(toIndentedString(electionTitle)).append("\n");
    sb.append("    electorate: ").append(toIndentedString(electorate)).append("\n");
    sb.append("    isGeneralElection: ").append(toIndentedString(isGeneralElection)).append("\n");
    sb.append("    isNotional: ").append(toIndentedString(isNotional)).append("\n");
    sb.append("    majority: ").append(toIndentedString(majority)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    turnout: ").append(toIndentedString(turnout)).append("\n");
    sb.append("    winningParty: ").append(toIndentedString(winningParty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("candidates");
    openapiFields.add("constituencyName");
    openapiFields.add("electionDate");
    openapiFields.add("electionId");
    openapiFields.add("electionTitle");
    openapiFields.add("electorate");
    openapiFields.add("isGeneralElection");
    openapiFields.add("isNotional");
    openapiFields.add("majority");
    openapiFields.add("result");
    openapiFields.add("turnout");
    openapiFields.add("winningParty");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ElectionResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ElectionResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ElectionResult is not found in the empty JSON string", ElectionResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ElectionResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ElectionResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("candidates") != null && !jsonObj.get("candidates").isJsonNull()) {
        JsonArray jsonArraycandidates = jsonObj.getAsJsonArray("candidates");
        if (jsonArraycandidates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("candidates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `candidates` to be an array in the JSON string but got `%s`", jsonObj.get("candidates").toString()));
          }

          // validate the optional field `candidates` (array)
          for (int i = 0; i < jsonArraycandidates.size(); i++) {
            ElectionCandidate.validateJsonElement(jsonArraycandidates.get(i));
          };
        }
      }
      if ((jsonObj.get("constituencyName") != null && !jsonObj.get("constituencyName").isJsonNull()) && !jsonObj.get("constituencyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `constituencyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("constituencyName").toString()));
      }
      if ((jsonObj.get("electionTitle") != null && !jsonObj.get("electionTitle").isJsonNull()) && !jsonObj.get("electionTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electionTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electionTitle").toString()));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      // validate the optional field `winningParty`
      if (jsonObj.get("winningParty") != null && !jsonObj.get("winningParty").isJsonNull()) {
        Party.validateJsonElement(jsonObj.get("winningParty"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ElectionResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ElectionResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ElectionResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ElectionResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ElectionResult>() {
           @Override
           public void write(JsonWriter out, ElectionResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ElectionResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ElectionResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ElectionResult
   * @throws IOException if the JSON string is invalid with respect to ElectionResult
   */
  public static ElectionResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ElectionResult.class);
  }

  /**
   * Convert an instance of ElectionResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

