/*
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DebateContribution
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:33.493029-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DebateContribution {
  public static final String SERIALIZED_NAME_ANSWER_COUNT = "answerCount";
  @SerializedName(SERIALIZED_NAME_ANSWER_COUNT)
  private Integer answerCount;

  public static final String SERIALIZED_NAME_DEBATE_ID = "debateId";
  @SerializedName(SERIALIZED_NAME_DEBATE_ID)
  private Integer debateId;

  public static final String SERIALIZED_NAME_DEBATE_TITLE = "debateTitle";
  @SerializedName(SERIALIZED_NAME_DEBATE_TITLE)
  private String debateTitle;

  public static final String SERIALIZED_NAME_DEBATE_WEBSITE_ID = "debateWebsiteId";
  @SerializedName(SERIALIZED_NAME_DEBATE_WEBSITE_ID)
  private String debateWebsiteId;

  public static final String SERIALIZED_NAME_FIRST_TIMECODE = "firstTimecode";
  @SerializedName(SERIALIZED_NAME_FIRST_TIMECODE)
  private OffsetDateTime firstTimecode;

  public static final String SERIALIZED_NAME_HOUSE = "house";
  @SerializedName(SERIALIZED_NAME_HOUSE)
  private String house;

  public static final String SERIALIZED_NAME_INTERVENTION_COUNT = "interventionCount";
  @SerializedName(SERIALIZED_NAME_INTERVENTION_COUNT)
  private Integer interventionCount;

  public static final String SERIALIZED_NAME_POINTS_OF_ORDER_COUNT = "pointsOfOrderCount";
  @SerializedName(SERIALIZED_NAME_POINTS_OF_ORDER_COUNT)
  private Integer pointsOfOrderCount;

  public static final String SERIALIZED_NAME_QUESTION_COUNT = "questionCount";
  @SerializedName(SERIALIZED_NAME_QUESTION_COUNT)
  private Integer questionCount;

  public static final String SERIALIZED_NAME_SECTION = "section";
  @SerializedName(SERIALIZED_NAME_SECTION)
  private String section;

  public static final String SERIALIZED_NAME_SITTING_DATE = "sittingDate";
  @SerializedName(SERIALIZED_NAME_SITTING_DATE)
  private OffsetDateTime sittingDate;

  public static final String SERIALIZED_NAME_SPEECH_COUNT = "speechCount";
  @SerializedName(SERIALIZED_NAME_SPEECH_COUNT)
  private Integer speechCount;

  public static final String SERIALIZED_NAME_STATEMENTS_COUNT = "statementsCount";
  @SerializedName(SERIALIZED_NAME_STATEMENTS_COUNT)
  private Integer statementsCount;

  public static final String SERIALIZED_NAME_SUPPLEMENTARY_QUESTION_COUNT = "supplementaryQuestionCount";
  @SerializedName(SERIALIZED_NAME_SUPPLEMENTARY_QUESTION_COUNT)
  private Integer supplementaryQuestionCount;

  public static final String SERIALIZED_NAME_TOTAL_CONTRIBUTIONS = "totalContributions";
  @SerializedName(SERIALIZED_NAME_TOTAL_CONTRIBUTIONS)
  private Integer totalContributions;

  public DebateContribution() {
  }

  public DebateContribution answerCount(Integer answerCount) {
    this.answerCount = answerCount;
    return this;
  }

  /**
   * Get answerCount
   * @return answerCount
   */
  @javax.annotation.Nullable
  public Integer getAnswerCount() {
    return answerCount;
  }

  public void setAnswerCount(Integer answerCount) {
    this.answerCount = answerCount;
  }


  public DebateContribution debateId(Integer debateId) {
    this.debateId = debateId;
    return this;
  }

  /**
   * Get debateId
   * @return debateId
   */
  @javax.annotation.Nullable
  public Integer getDebateId() {
    return debateId;
  }

  public void setDebateId(Integer debateId) {
    this.debateId = debateId;
  }


  public DebateContribution debateTitle(String debateTitle) {
    this.debateTitle = debateTitle;
    return this;
  }

  /**
   * Get debateTitle
   * @return debateTitle
   */
  @javax.annotation.Nullable
  public String getDebateTitle() {
    return debateTitle;
  }

  public void setDebateTitle(String debateTitle) {
    this.debateTitle = debateTitle;
  }


  public DebateContribution debateWebsiteId(String debateWebsiteId) {
    this.debateWebsiteId = debateWebsiteId;
    return this;
  }

  /**
   * Get debateWebsiteId
   * @return debateWebsiteId
   */
  @javax.annotation.Nullable
  public String getDebateWebsiteId() {
    return debateWebsiteId;
  }

  public void setDebateWebsiteId(String debateWebsiteId) {
    this.debateWebsiteId = debateWebsiteId;
  }


  public DebateContribution firstTimecode(OffsetDateTime firstTimecode) {
    this.firstTimecode = firstTimecode;
    return this;
  }

  /**
   * Get firstTimecode
   * @return firstTimecode
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFirstTimecode() {
    return firstTimecode;
  }

  public void setFirstTimecode(OffsetDateTime firstTimecode) {
    this.firstTimecode = firstTimecode;
  }


  public DebateContribution house(String house) {
    this.house = house;
    return this;
  }

  /**
   * Get house
   * @return house
   */
  @javax.annotation.Nullable
  public String getHouse() {
    return house;
  }

  public void setHouse(String house) {
    this.house = house;
  }


  public DebateContribution interventionCount(Integer interventionCount) {
    this.interventionCount = interventionCount;
    return this;
  }

  /**
   * Get interventionCount
   * @return interventionCount
   */
  @javax.annotation.Nullable
  public Integer getInterventionCount() {
    return interventionCount;
  }

  public void setInterventionCount(Integer interventionCount) {
    this.interventionCount = interventionCount;
  }


  public DebateContribution pointsOfOrderCount(Integer pointsOfOrderCount) {
    this.pointsOfOrderCount = pointsOfOrderCount;
    return this;
  }

  /**
   * Get pointsOfOrderCount
   * @return pointsOfOrderCount
   */
  @javax.annotation.Nullable
  public Integer getPointsOfOrderCount() {
    return pointsOfOrderCount;
  }

  public void setPointsOfOrderCount(Integer pointsOfOrderCount) {
    this.pointsOfOrderCount = pointsOfOrderCount;
  }


  public DebateContribution questionCount(Integer questionCount) {
    this.questionCount = questionCount;
    return this;
  }

  /**
   * Get questionCount
   * @return questionCount
   */
  @javax.annotation.Nullable
  public Integer getQuestionCount() {
    return questionCount;
  }

  public void setQuestionCount(Integer questionCount) {
    this.questionCount = questionCount;
  }


  public DebateContribution section(String section) {
    this.section = section;
    return this;
  }

  /**
   * Get section
   * @return section
   */
  @javax.annotation.Nullable
  public String getSection() {
    return section;
  }

  public void setSection(String section) {
    this.section = section;
  }


  public DebateContribution sittingDate(OffsetDateTime sittingDate) {
    this.sittingDate = sittingDate;
    return this;
  }

  /**
   * Get sittingDate
   * @return sittingDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSittingDate() {
    return sittingDate;
  }

  public void setSittingDate(OffsetDateTime sittingDate) {
    this.sittingDate = sittingDate;
  }


  public DebateContribution speechCount(Integer speechCount) {
    this.speechCount = speechCount;
    return this;
  }

  /**
   * Get speechCount
   * @return speechCount
   */
  @javax.annotation.Nullable
  public Integer getSpeechCount() {
    return speechCount;
  }

  public void setSpeechCount(Integer speechCount) {
    this.speechCount = speechCount;
  }


  public DebateContribution statementsCount(Integer statementsCount) {
    this.statementsCount = statementsCount;
    return this;
  }

  /**
   * Get statementsCount
   * @return statementsCount
   */
  @javax.annotation.Nullable
  public Integer getStatementsCount() {
    return statementsCount;
  }

  public void setStatementsCount(Integer statementsCount) {
    this.statementsCount = statementsCount;
  }


  public DebateContribution supplementaryQuestionCount(Integer supplementaryQuestionCount) {
    this.supplementaryQuestionCount = supplementaryQuestionCount;
    return this;
  }

  /**
   * Get supplementaryQuestionCount
   * @return supplementaryQuestionCount
   */
  @javax.annotation.Nullable
  public Integer getSupplementaryQuestionCount() {
    return supplementaryQuestionCount;
  }

  public void setSupplementaryQuestionCount(Integer supplementaryQuestionCount) {
    this.supplementaryQuestionCount = supplementaryQuestionCount;
  }


  public DebateContribution totalContributions(Integer totalContributions) {
    this.totalContributions = totalContributions;
    return this;
  }

  /**
   * Get totalContributions
   * @return totalContributions
   */
  @javax.annotation.Nullable
  public Integer getTotalContributions() {
    return totalContributions;
  }

  public void setTotalContributions(Integer totalContributions) {
    this.totalContributions = totalContributions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DebateContribution debateContribution = (DebateContribution) o;
    return Objects.equals(this.answerCount, debateContribution.answerCount) &&
        Objects.equals(this.debateId, debateContribution.debateId) &&
        Objects.equals(this.debateTitle, debateContribution.debateTitle) &&
        Objects.equals(this.debateWebsiteId, debateContribution.debateWebsiteId) &&
        Objects.equals(this.firstTimecode, debateContribution.firstTimecode) &&
        Objects.equals(this.house, debateContribution.house) &&
        Objects.equals(this.interventionCount, debateContribution.interventionCount) &&
        Objects.equals(this.pointsOfOrderCount, debateContribution.pointsOfOrderCount) &&
        Objects.equals(this.questionCount, debateContribution.questionCount) &&
        Objects.equals(this.section, debateContribution.section) &&
        Objects.equals(this.sittingDate, debateContribution.sittingDate) &&
        Objects.equals(this.speechCount, debateContribution.speechCount) &&
        Objects.equals(this.statementsCount, debateContribution.statementsCount) &&
        Objects.equals(this.supplementaryQuestionCount, debateContribution.supplementaryQuestionCount) &&
        Objects.equals(this.totalContributions, debateContribution.totalContributions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(answerCount, debateId, debateTitle, debateWebsiteId, firstTimecode, house, interventionCount, pointsOfOrderCount, questionCount, section, sittingDate, speechCount, statementsCount, supplementaryQuestionCount, totalContributions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DebateContribution {\n");
    sb.append("    answerCount: ").append(toIndentedString(answerCount)).append("\n");
    sb.append("    debateId: ").append(toIndentedString(debateId)).append("\n");
    sb.append("    debateTitle: ").append(toIndentedString(debateTitle)).append("\n");
    sb.append("    debateWebsiteId: ").append(toIndentedString(debateWebsiteId)).append("\n");
    sb.append("    firstTimecode: ").append(toIndentedString(firstTimecode)).append("\n");
    sb.append("    house: ").append(toIndentedString(house)).append("\n");
    sb.append("    interventionCount: ").append(toIndentedString(interventionCount)).append("\n");
    sb.append("    pointsOfOrderCount: ").append(toIndentedString(pointsOfOrderCount)).append("\n");
    sb.append("    questionCount: ").append(toIndentedString(questionCount)).append("\n");
    sb.append("    section: ").append(toIndentedString(section)).append("\n");
    sb.append("    sittingDate: ").append(toIndentedString(sittingDate)).append("\n");
    sb.append("    speechCount: ").append(toIndentedString(speechCount)).append("\n");
    sb.append("    statementsCount: ").append(toIndentedString(statementsCount)).append("\n");
    sb.append("    supplementaryQuestionCount: ").append(toIndentedString(supplementaryQuestionCount)).append("\n");
    sb.append("    totalContributions: ").append(toIndentedString(totalContributions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answerCount");
    openapiFields.add("debateId");
    openapiFields.add("debateTitle");
    openapiFields.add("debateWebsiteId");
    openapiFields.add("firstTimecode");
    openapiFields.add("house");
    openapiFields.add("interventionCount");
    openapiFields.add("pointsOfOrderCount");
    openapiFields.add("questionCount");
    openapiFields.add("section");
    openapiFields.add("sittingDate");
    openapiFields.add("speechCount");
    openapiFields.add("statementsCount");
    openapiFields.add("supplementaryQuestionCount");
    openapiFields.add("totalContributions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DebateContribution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DebateContribution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DebateContribution is not found in the empty JSON string", DebateContribution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DebateContribution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DebateContribution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("debateTitle") != null && !jsonObj.get("debateTitle").isJsonNull()) && !jsonObj.get("debateTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debateTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debateTitle").toString()));
      }
      if ((jsonObj.get("debateWebsiteId") != null && !jsonObj.get("debateWebsiteId").isJsonNull()) && !jsonObj.get("debateWebsiteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debateWebsiteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debateWebsiteId").toString()));
      }
      if ((jsonObj.get("house") != null && !jsonObj.get("house").isJsonNull()) && !jsonObj.get("house").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `house` to be a primitive type in the JSON string but got `%s`", jsonObj.get("house").toString()));
      }
      if ((jsonObj.get("section") != null && !jsonObj.get("section").isJsonNull()) && !jsonObj.get("section").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `section` to be a primitive type in the JSON string but got `%s`", jsonObj.get("section").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DebateContribution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DebateContribution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DebateContribution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DebateContribution.class));

       return (TypeAdapter<T>) new TypeAdapter<DebateContribution>() {
           @Override
           public void write(JsonWriter out, DebateContribution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DebateContribution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DebateContribution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DebateContribution
   * @throws IOException if the JSON string is invalid with respect to DebateContribution
   */
  public static DebateContribution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DebateContribution.class);
  }

  /**
   * Convert an instance of DebateContribution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

