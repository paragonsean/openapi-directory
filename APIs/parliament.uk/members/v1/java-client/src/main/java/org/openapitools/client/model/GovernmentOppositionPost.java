/*
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GovernmentDepartment;
import org.openapitools.client.model.GovernmentOppositionPostHolder;
import org.openapitools.client.model.PostType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GovernmentOppositionPost
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:33.493029-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GovernmentOppositionPost {
  public static final String SERIALIZED_NAME_CREATED_WHEN = "createdWhen";
  @SerializedName(SERIALIZED_NAME_CREATED_WHEN)
  private OffsetDateTime createdWhen;

  public static final String SERIALIZED_NAME_GOVERNMENT_DEPARTMENTS = "governmentDepartments";
  @SerializedName(SERIALIZED_NAME_GOVERNMENT_DEPARTMENTS)
  private List<GovernmentDepartment> governmentDepartments;

  public static final String SERIALIZED_NAME_HANSARD_NAME = "hansardName";
  @SerializedName(SERIALIZED_NAME_HANSARD_NAME)
  private String hansardName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_POST_HOLDERS = "postHolders";
  @SerializedName(SERIALIZED_NAME_POST_HOLDERS)
  private List<GovernmentOppositionPostHolder> postHolders;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private PostType type;

  public GovernmentOppositionPost() {
  }

  public GovernmentOppositionPost createdWhen(OffsetDateTime createdWhen) {
    this.createdWhen = createdWhen;
    return this;
  }

  /**
   * Get createdWhen
   * @return createdWhen
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedWhen() {
    return createdWhen;
  }

  public void setCreatedWhen(OffsetDateTime createdWhen) {
    this.createdWhen = createdWhen;
  }


  public GovernmentOppositionPost governmentDepartments(List<GovernmentDepartment> governmentDepartments) {
    this.governmentDepartments = governmentDepartments;
    return this;
  }

  public GovernmentOppositionPost addGovernmentDepartmentsItem(GovernmentDepartment governmentDepartmentsItem) {
    if (this.governmentDepartments == null) {
      this.governmentDepartments = new ArrayList<>();
    }
    this.governmentDepartments.add(governmentDepartmentsItem);
    return this;
  }

  /**
   * Get governmentDepartments
   * @return governmentDepartments
   */
  @javax.annotation.Nullable
  public List<GovernmentDepartment> getGovernmentDepartments() {
    return governmentDepartments;
  }

  public void setGovernmentDepartments(List<GovernmentDepartment> governmentDepartments) {
    this.governmentDepartments = governmentDepartments;
  }


  public GovernmentOppositionPost hansardName(String hansardName) {
    this.hansardName = hansardName;
    return this;
  }

  /**
   * Get hansardName
   * @return hansardName
   */
  @javax.annotation.Nullable
  public String getHansardName() {
    return hansardName;
  }

  public void setHansardName(String hansardName) {
    this.hansardName = hansardName;
  }


  public GovernmentOppositionPost id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public GovernmentOppositionPost name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GovernmentOppositionPost order(Integer order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  public GovernmentOppositionPost postHolders(List<GovernmentOppositionPostHolder> postHolders) {
    this.postHolders = postHolders;
    return this;
  }

  public GovernmentOppositionPost addPostHoldersItem(GovernmentOppositionPostHolder postHoldersItem) {
    if (this.postHolders == null) {
      this.postHolders = new ArrayList<>();
    }
    this.postHolders.add(postHoldersItem);
    return this;
  }

  /**
   * Get postHolders
   * @return postHolders
   */
  @javax.annotation.Nullable
  public List<GovernmentOppositionPostHolder> getPostHolders() {
    return postHolders;
  }

  public void setPostHolders(List<GovernmentOppositionPostHolder> postHolders) {
    this.postHolders = postHolders;
  }


  public GovernmentOppositionPost type(PostType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public PostType getType() {
    return type;
  }

  public void setType(PostType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GovernmentOppositionPost governmentOppositionPost = (GovernmentOppositionPost) o;
    return Objects.equals(this.createdWhen, governmentOppositionPost.createdWhen) &&
        Objects.equals(this.governmentDepartments, governmentOppositionPost.governmentDepartments) &&
        Objects.equals(this.hansardName, governmentOppositionPost.hansardName) &&
        Objects.equals(this.id, governmentOppositionPost.id) &&
        Objects.equals(this.name, governmentOppositionPost.name) &&
        Objects.equals(this.order, governmentOppositionPost.order) &&
        Objects.equals(this.postHolders, governmentOppositionPost.postHolders) &&
        Objects.equals(this.type, governmentOppositionPost.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdWhen, governmentDepartments, hansardName, id, name, order, postHolders, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GovernmentOppositionPost {\n");
    sb.append("    createdWhen: ").append(toIndentedString(createdWhen)).append("\n");
    sb.append("    governmentDepartments: ").append(toIndentedString(governmentDepartments)).append("\n");
    sb.append("    hansardName: ").append(toIndentedString(hansardName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    postHolders: ").append(toIndentedString(postHolders)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdWhen");
    openapiFields.add("governmentDepartments");
    openapiFields.add("hansardName");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("order");
    openapiFields.add("postHolders");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GovernmentOppositionPost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GovernmentOppositionPost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GovernmentOppositionPost is not found in the empty JSON string", GovernmentOppositionPost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GovernmentOppositionPost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GovernmentOppositionPost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("governmentDepartments") != null && !jsonObj.get("governmentDepartments").isJsonNull()) {
        JsonArray jsonArraygovernmentDepartments = jsonObj.getAsJsonArray("governmentDepartments");
        if (jsonArraygovernmentDepartments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("governmentDepartments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `governmentDepartments` to be an array in the JSON string but got `%s`", jsonObj.get("governmentDepartments").toString()));
          }

          // validate the optional field `governmentDepartments` (array)
          for (int i = 0; i < jsonArraygovernmentDepartments.size(); i++) {
            GovernmentDepartment.validateJsonElement(jsonArraygovernmentDepartments.get(i));
          };
        }
      }
      if ((jsonObj.get("hansardName") != null && !jsonObj.get("hansardName").isJsonNull()) && !jsonObj.get("hansardName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hansardName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hansardName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("postHolders") != null && !jsonObj.get("postHolders").isJsonNull()) {
        JsonArray jsonArraypostHolders = jsonObj.getAsJsonArray("postHolders");
        if (jsonArraypostHolders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("postHolders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `postHolders` to be an array in the JSON string but got `%s`", jsonObj.get("postHolders").toString()));
          }

          // validate the optional field `postHolders` (array)
          for (int i = 0; i < jsonArraypostHolders.size(); i++) {
            GovernmentOppositionPostHolder.validateJsonElement(jsonArraypostHolders.get(i));
          };
        }
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        PostType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GovernmentOppositionPost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GovernmentOppositionPost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GovernmentOppositionPost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GovernmentOppositionPost.class));

       return (TypeAdapter<T>) new TypeAdapter<GovernmentOppositionPost>() {
           @Override
           public void write(JsonWriter out, GovernmentOppositionPost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GovernmentOppositionPost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GovernmentOppositionPost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GovernmentOppositionPost
   * @throws IOException if the JSON string is invalid with respect to GovernmentOppositionPost
   */
  public static GovernmentOppositionPost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GovernmentOppositionPost.class);
  }

  /**
   * Convert an instance of GovernmentOppositionPost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

