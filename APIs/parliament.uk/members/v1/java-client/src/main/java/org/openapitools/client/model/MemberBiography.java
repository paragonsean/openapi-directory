/*
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BiographyItem;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MemberBiography
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:33.493029-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MemberBiography {
  public static final String SERIALIZED_NAME_COMMITTEE_MEMBERSHIPS = "committeeMemberships";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_MEMBERSHIPS)
  private List<BiographyItem> committeeMemberships;

  public static final String SERIALIZED_NAME_ELECTIONS_CONTESTED = "electionsContested";
  @SerializedName(SERIALIZED_NAME_ELECTIONS_CONTESTED)
  private List<BiographyItem> electionsContested;

  public static final String SERIALIZED_NAME_GOVERNMENT_POSTS = "governmentPosts";
  @SerializedName(SERIALIZED_NAME_GOVERNMENT_POSTS)
  private List<BiographyItem> governmentPosts;

  public static final String SERIALIZED_NAME_HOUSE_MEMBERSHIPS = "houseMemberships";
  @SerializedName(SERIALIZED_NAME_HOUSE_MEMBERSHIPS)
  private List<BiographyItem> houseMemberships;

  public static final String SERIALIZED_NAME_OPPOSITION_POSTS = "oppositionPosts";
  @SerializedName(SERIALIZED_NAME_OPPOSITION_POSTS)
  private List<BiographyItem> oppositionPosts;

  public static final String SERIALIZED_NAME_OTHER_POSTS = "otherPosts";
  @SerializedName(SERIALIZED_NAME_OTHER_POSTS)
  private List<BiographyItem> otherPosts;

  public static final String SERIALIZED_NAME_PARTY_AFFILIATIONS = "partyAffiliations";
  @SerializedName(SERIALIZED_NAME_PARTY_AFFILIATIONS)
  private List<BiographyItem> partyAffiliations;

  public static final String SERIALIZED_NAME_REPRESENTATIONS = "representations";
  @SerializedName(SERIALIZED_NAME_REPRESENTATIONS)
  private List<BiographyItem> representations;

  public MemberBiography() {
  }

  public MemberBiography committeeMemberships(List<BiographyItem> committeeMemberships) {
    this.committeeMemberships = committeeMemberships;
    return this;
  }

  public MemberBiography addCommitteeMembershipsItem(BiographyItem committeeMembershipsItem) {
    if (this.committeeMemberships == null) {
      this.committeeMemberships = new ArrayList<>();
    }
    this.committeeMemberships.add(committeeMembershipsItem);
    return this;
  }

  /**
   * Get committeeMemberships
   * @return committeeMemberships
   */
  @javax.annotation.Nullable
  public List<BiographyItem> getCommitteeMemberships() {
    return committeeMemberships;
  }

  public void setCommitteeMemberships(List<BiographyItem> committeeMemberships) {
    this.committeeMemberships = committeeMemberships;
  }


  public MemberBiography electionsContested(List<BiographyItem> electionsContested) {
    this.electionsContested = electionsContested;
    return this;
  }

  public MemberBiography addElectionsContestedItem(BiographyItem electionsContestedItem) {
    if (this.electionsContested == null) {
      this.electionsContested = new ArrayList<>();
    }
    this.electionsContested.add(electionsContestedItem);
    return this;
  }

  /**
   * Get electionsContested
   * @return electionsContested
   */
  @javax.annotation.Nullable
  public List<BiographyItem> getElectionsContested() {
    return electionsContested;
  }

  public void setElectionsContested(List<BiographyItem> electionsContested) {
    this.electionsContested = electionsContested;
  }


  public MemberBiography governmentPosts(List<BiographyItem> governmentPosts) {
    this.governmentPosts = governmentPosts;
    return this;
  }

  public MemberBiography addGovernmentPostsItem(BiographyItem governmentPostsItem) {
    if (this.governmentPosts == null) {
      this.governmentPosts = new ArrayList<>();
    }
    this.governmentPosts.add(governmentPostsItem);
    return this;
  }

  /**
   * Get governmentPosts
   * @return governmentPosts
   */
  @javax.annotation.Nullable
  public List<BiographyItem> getGovernmentPosts() {
    return governmentPosts;
  }

  public void setGovernmentPosts(List<BiographyItem> governmentPosts) {
    this.governmentPosts = governmentPosts;
  }


  public MemberBiography houseMemberships(List<BiographyItem> houseMemberships) {
    this.houseMemberships = houseMemberships;
    return this;
  }

  public MemberBiography addHouseMembershipsItem(BiographyItem houseMembershipsItem) {
    if (this.houseMemberships == null) {
      this.houseMemberships = new ArrayList<>();
    }
    this.houseMemberships.add(houseMembershipsItem);
    return this;
  }

  /**
   * Get houseMemberships
   * @return houseMemberships
   */
  @javax.annotation.Nullable
  public List<BiographyItem> getHouseMemberships() {
    return houseMemberships;
  }

  public void setHouseMemberships(List<BiographyItem> houseMemberships) {
    this.houseMemberships = houseMemberships;
  }


  public MemberBiography oppositionPosts(List<BiographyItem> oppositionPosts) {
    this.oppositionPosts = oppositionPosts;
    return this;
  }

  public MemberBiography addOppositionPostsItem(BiographyItem oppositionPostsItem) {
    if (this.oppositionPosts == null) {
      this.oppositionPosts = new ArrayList<>();
    }
    this.oppositionPosts.add(oppositionPostsItem);
    return this;
  }

  /**
   * Get oppositionPosts
   * @return oppositionPosts
   */
  @javax.annotation.Nullable
  public List<BiographyItem> getOppositionPosts() {
    return oppositionPosts;
  }

  public void setOppositionPosts(List<BiographyItem> oppositionPosts) {
    this.oppositionPosts = oppositionPosts;
  }


  public MemberBiography otherPosts(List<BiographyItem> otherPosts) {
    this.otherPosts = otherPosts;
    return this;
  }

  public MemberBiography addOtherPostsItem(BiographyItem otherPostsItem) {
    if (this.otherPosts == null) {
      this.otherPosts = new ArrayList<>();
    }
    this.otherPosts.add(otherPostsItem);
    return this;
  }

  /**
   * Get otherPosts
   * @return otherPosts
   */
  @javax.annotation.Nullable
  public List<BiographyItem> getOtherPosts() {
    return otherPosts;
  }

  public void setOtherPosts(List<BiographyItem> otherPosts) {
    this.otherPosts = otherPosts;
  }


  public MemberBiography partyAffiliations(List<BiographyItem> partyAffiliations) {
    this.partyAffiliations = partyAffiliations;
    return this;
  }

  public MemberBiography addPartyAffiliationsItem(BiographyItem partyAffiliationsItem) {
    if (this.partyAffiliations == null) {
      this.partyAffiliations = new ArrayList<>();
    }
    this.partyAffiliations.add(partyAffiliationsItem);
    return this;
  }

  /**
   * Get partyAffiliations
   * @return partyAffiliations
   */
  @javax.annotation.Nullable
  public List<BiographyItem> getPartyAffiliations() {
    return partyAffiliations;
  }

  public void setPartyAffiliations(List<BiographyItem> partyAffiliations) {
    this.partyAffiliations = partyAffiliations;
  }


  public MemberBiography representations(List<BiographyItem> representations) {
    this.representations = representations;
    return this;
  }

  public MemberBiography addRepresentationsItem(BiographyItem representationsItem) {
    if (this.representations == null) {
      this.representations = new ArrayList<>();
    }
    this.representations.add(representationsItem);
    return this;
  }

  /**
   * Get representations
   * @return representations
   */
  @javax.annotation.Nullable
  public List<BiographyItem> getRepresentations() {
    return representations;
  }

  public void setRepresentations(List<BiographyItem> representations) {
    this.representations = representations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MemberBiography memberBiography = (MemberBiography) o;
    return Objects.equals(this.committeeMemberships, memberBiography.committeeMemberships) &&
        Objects.equals(this.electionsContested, memberBiography.electionsContested) &&
        Objects.equals(this.governmentPosts, memberBiography.governmentPosts) &&
        Objects.equals(this.houseMemberships, memberBiography.houseMemberships) &&
        Objects.equals(this.oppositionPosts, memberBiography.oppositionPosts) &&
        Objects.equals(this.otherPosts, memberBiography.otherPosts) &&
        Objects.equals(this.partyAffiliations, memberBiography.partyAffiliations) &&
        Objects.equals(this.representations, memberBiography.representations);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(committeeMemberships, electionsContested, governmentPosts, houseMemberships, oppositionPosts, otherPosts, partyAffiliations, representations);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MemberBiography {\n");
    sb.append("    committeeMemberships: ").append(toIndentedString(committeeMemberships)).append("\n");
    sb.append("    electionsContested: ").append(toIndentedString(electionsContested)).append("\n");
    sb.append("    governmentPosts: ").append(toIndentedString(governmentPosts)).append("\n");
    sb.append("    houseMemberships: ").append(toIndentedString(houseMemberships)).append("\n");
    sb.append("    oppositionPosts: ").append(toIndentedString(oppositionPosts)).append("\n");
    sb.append("    otherPosts: ").append(toIndentedString(otherPosts)).append("\n");
    sb.append("    partyAffiliations: ").append(toIndentedString(partyAffiliations)).append("\n");
    sb.append("    representations: ").append(toIndentedString(representations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("committeeMemberships");
    openapiFields.add("electionsContested");
    openapiFields.add("governmentPosts");
    openapiFields.add("houseMemberships");
    openapiFields.add("oppositionPosts");
    openapiFields.add("otherPosts");
    openapiFields.add("partyAffiliations");
    openapiFields.add("representations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MemberBiography
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MemberBiography.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MemberBiography is not found in the empty JSON string", MemberBiography.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MemberBiography.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MemberBiography` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("committeeMemberships") != null && !jsonObj.get("committeeMemberships").isJsonNull()) {
        JsonArray jsonArraycommitteeMemberships = jsonObj.getAsJsonArray("committeeMemberships");
        if (jsonArraycommitteeMemberships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("committeeMemberships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `committeeMemberships` to be an array in the JSON string but got `%s`", jsonObj.get("committeeMemberships").toString()));
          }

          // validate the optional field `committeeMemberships` (array)
          for (int i = 0; i < jsonArraycommitteeMemberships.size(); i++) {
            BiographyItem.validateJsonElement(jsonArraycommitteeMemberships.get(i));
          };
        }
      }
      if (jsonObj.get("electionsContested") != null && !jsonObj.get("electionsContested").isJsonNull()) {
        JsonArray jsonArrayelectionsContested = jsonObj.getAsJsonArray("electionsContested");
        if (jsonArrayelectionsContested != null) {
          // ensure the json data is an array
          if (!jsonObj.get("electionsContested").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `electionsContested` to be an array in the JSON string but got `%s`", jsonObj.get("electionsContested").toString()));
          }

          // validate the optional field `electionsContested` (array)
          for (int i = 0; i < jsonArrayelectionsContested.size(); i++) {
            BiographyItem.validateJsonElement(jsonArrayelectionsContested.get(i));
          };
        }
      }
      if (jsonObj.get("governmentPosts") != null && !jsonObj.get("governmentPosts").isJsonNull()) {
        JsonArray jsonArraygovernmentPosts = jsonObj.getAsJsonArray("governmentPosts");
        if (jsonArraygovernmentPosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("governmentPosts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `governmentPosts` to be an array in the JSON string but got `%s`", jsonObj.get("governmentPosts").toString()));
          }

          // validate the optional field `governmentPosts` (array)
          for (int i = 0; i < jsonArraygovernmentPosts.size(); i++) {
            BiographyItem.validateJsonElement(jsonArraygovernmentPosts.get(i));
          };
        }
      }
      if (jsonObj.get("houseMemberships") != null && !jsonObj.get("houseMemberships").isJsonNull()) {
        JsonArray jsonArrayhouseMemberships = jsonObj.getAsJsonArray("houseMemberships");
        if (jsonArrayhouseMemberships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("houseMemberships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `houseMemberships` to be an array in the JSON string but got `%s`", jsonObj.get("houseMemberships").toString()));
          }

          // validate the optional field `houseMemberships` (array)
          for (int i = 0; i < jsonArrayhouseMemberships.size(); i++) {
            BiographyItem.validateJsonElement(jsonArrayhouseMemberships.get(i));
          };
        }
      }
      if (jsonObj.get("oppositionPosts") != null && !jsonObj.get("oppositionPosts").isJsonNull()) {
        JsonArray jsonArrayoppositionPosts = jsonObj.getAsJsonArray("oppositionPosts");
        if (jsonArrayoppositionPosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("oppositionPosts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `oppositionPosts` to be an array in the JSON string but got `%s`", jsonObj.get("oppositionPosts").toString()));
          }

          // validate the optional field `oppositionPosts` (array)
          for (int i = 0; i < jsonArrayoppositionPosts.size(); i++) {
            BiographyItem.validateJsonElement(jsonArrayoppositionPosts.get(i));
          };
        }
      }
      if (jsonObj.get("otherPosts") != null && !jsonObj.get("otherPosts").isJsonNull()) {
        JsonArray jsonArrayotherPosts = jsonObj.getAsJsonArray("otherPosts");
        if (jsonArrayotherPosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("otherPosts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `otherPosts` to be an array in the JSON string but got `%s`", jsonObj.get("otherPosts").toString()));
          }

          // validate the optional field `otherPosts` (array)
          for (int i = 0; i < jsonArrayotherPosts.size(); i++) {
            BiographyItem.validateJsonElement(jsonArrayotherPosts.get(i));
          };
        }
      }
      if (jsonObj.get("partyAffiliations") != null && !jsonObj.get("partyAffiliations").isJsonNull()) {
        JsonArray jsonArraypartyAffiliations = jsonObj.getAsJsonArray("partyAffiliations");
        if (jsonArraypartyAffiliations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("partyAffiliations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `partyAffiliations` to be an array in the JSON string but got `%s`", jsonObj.get("partyAffiliations").toString()));
          }

          // validate the optional field `partyAffiliations` (array)
          for (int i = 0; i < jsonArraypartyAffiliations.size(); i++) {
            BiographyItem.validateJsonElement(jsonArraypartyAffiliations.get(i));
          };
        }
      }
      if (jsonObj.get("representations") != null && !jsonObj.get("representations").isJsonNull()) {
        JsonArray jsonArrayrepresentations = jsonObj.getAsJsonArray("representations");
        if (jsonArrayrepresentations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("representations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `representations` to be an array in the JSON string but got `%s`", jsonObj.get("representations").toString()));
          }

          // validate the optional field `representations` (array)
          for (int i = 0; i < jsonArrayrepresentations.size(); i++) {
            BiographyItem.validateJsonElement(jsonArrayrepresentations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MemberBiography.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MemberBiography' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MemberBiography> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MemberBiography.class));

       return (TypeAdapter<T>) new TypeAdapter<MemberBiography>() {
           @Override
           public void write(JsonWriter out, MemberBiography value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MemberBiography read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MemberBiography given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MemberBiography
   * @throws IOException if the JSON string is invalid with respect to MemberBiography
   */
  public static MemberBiography fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MemberBiography.class);
  }

  /**
   * Convert an instance of MemberBiography to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

