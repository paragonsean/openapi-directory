/*
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.House;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Vote
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:33.493029-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Vote {
  public static final String SERIALIZED_NAME_ACTED_AS_TELLER = "actedAsTeller";
  @SerializedName(SERIALIZED_NAME_ACTED_AS_TELLER)
  private Boolean actedAsTeller;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DIVISION_NUMBER = "divisionNumber";
  @SerializedName(SERIALIZED_NAME_DIVISION_NUMBER)
  private Integer divisionNumber;

  public static final String SERIALIZED_NAME_HOUSE = "house";
  @SerializedName(SERIALIZED_NAME_HOUSE)
  private House house;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IN_AFFIRMATIVE_LOBBY = "inAffirmativeLobby";
  @SerializedName(SERIALIZED_NAME_IN_AFFIRMATIVE_LOBBY)
  private Boolean inAffirmativeLobby;

  public static final String SERIALIZED_NAME_NUMBER_AGAINST = "numberAgainst";
  @SerializedName(SERIALIZED_NAME_NUMBER_AGAINST)
  private Integer numberAgainst;

  public static final String SERIALIZED_NAME_NUMBER_IN_FAVOUR = "numberInFavour";
  @SerializedName(SERIALIZED_NAME_NUMBER_IN_FAVOUR)
  private Integer numberInFavour;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Vote() {
  }

  public Vote actedAsTeller(Boolean actedAsTeller) {
    this.actedAsTeller = actedAsTeller;
    return this;
  }

  /**
   * Get actedAsTeller
   * @return actedAsTeller
   */
  @javax.annotation.Nullable
  public Boolean getActedAsTeller() {
    return actedAsTeller;
  }

  public void setActedAsTeller(Boolean actedAsTeller) {
    this.actedAsTeller = actedAsTeller;
  }


  public Vote date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public Vote divisionNumber(Integer divisionNumber) {
    this.divisionNumber = divisionNumber;
    return this;
  }

  /**
   * Get divisionNumber
   * @return divisionNumber
   */
  @javax.annotation.Nullable
  public Integer getDivisionNumber() {
    return divisionNumber;
  }

  public void setDivisionNumber(Integer divisionNumber) {
    this.divisionNumber = divisionNumber;
  }


  public Vote house(House house) {
    this.house = house;
    return this;
  }

  /**
   * Get house
   * @return house
   */
  @javax.annotation.Nullable
  public House getHouse() {
    return house;
  }

  public void setHouse(House house) {
    this.house = house;
  }


  public Vote id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Vote inAffirmativeLobby(Boolean inAffirmativeLobby) {
    this.inAffirmativeLobby = inAffirmativeLobby;
    return this;
  }

  /**
   * Get inAffirmativeLobby
   * @return inAffirmativeLobby
   */
  @javax.annotation.Nullable
  public Boolean getInAffirmativeLobby() {
    return inAffirmativeLobby;
  }

  public void setInAffirmativeLobby(Boolean inAffirmativeLobby) {
    this.inAffirmativeLobby = inAffirmativeLobby;
  }


  public Vote numberAgainst(Integer numberAgainst) {
    this.numberAgainst = numberAgainst;
    return this;
  }

  /**
   * Get numberAgainst
   * @return numberAgainst
   */
  @javax.annotation.Nullable
  public Integer getNumberAgainst() {
    return numberAgainst;
  }

  public void setNumberAgainst(Integer numberAgainst) {
    this.numberAgainst = numberAgainst;
  }


  public Vote numberInFavour(Integer numberInFavour) {
    this.numberInFavour = numberInFavour;
    return this;
  }

  /**
   * Get numberInFavour
   * @return numberInFavour
   */
  @javax.annotation.Nullable
  public Integer getNumberInFavour() {
    return numberInFavour;
  }

  public void setNumberInFavour(Integer numberInFavour) {
    this.numberInFavour = numberInFavour;
  }


  public Vote title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vote vote = (Vote) o;
    return Objects.equals(this.actedAsTeller, vote.actedAsTeller) &&
        Objects.equals(this.date, vote.date) &&
        Objects.equals(this.divisionNumber, vote.divisionNumber) &&
        Objects.equals(this.house, vote.house) &&
        Objects.equals(this.id, vote.id) &&
        Objects.equals(this.inAffirmativeLobby, vote.inAffirmativeLobby) &&
        Objects.equals(this.numberAgainst, vote.numberAgainst) &&
        Objects.equals(this.numberInFavour, vote.numberInFavour) &&
        Objects.equals(this.title, vote.title);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(actedAsTeller, date, divisionNumber, house, id, inAffirmativeLobby, numberAgainst, numberInFavour, title);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vote {\n");
    sb.append("    actedAsTeller: ").append(toIndentedString(actedAsTeller)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    divisionNumber: ").append(toIndentedString(divisionNumber)).append("\n");
    sb.append("    house: ").append(toIndentedString(house)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inAffirmativeLobby: ").append(toIndentedString(inAffirmativeLobby)).append("\n");
    sb.append("    numberAgainst: ").append(toIndentedString(numberAgainst)).append("\n");
    sb.append("    numberInFavour: ").append(toIndentedString(numberInFavour)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actedAsTeller");
    openapiFields.add("date");
    openapiFields.add("divisionNumber");
    openapiFields.add("house");
    openapiFields.add("id");
    openapiFields.add("inAffirmativeLobby");
    openapiFields.add("numberAgainst");
    openapiFields.add("numberInFavour");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Vote
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Vote.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Vote is not found in the empty JSON string", Vote.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Vote.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Vote` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `house`
      if (jsonObj.get("house") != null && !jsonObj.get("house").isJsonNull()) {
        House.validateJsonElement(jsonObj.get("house"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Vote.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Vote' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Vote> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Vote.class));

       return (TypeAdapter<T>) new TypeAdapter<Vote>() {
           @Override
           public void write(JsonWriter out, Vote value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Vote read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Vote given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Vote
   * @throws IOException if the JSON string is invalid with respect to Vote
   */
  public static Vote fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Vote.class);
  }

  /**
   * Convert an instance of Vote to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

