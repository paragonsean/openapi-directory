/*
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.House;
import org.openapitools.client.model.HouseMembershipStatus;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HouseMembership
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:33.493029-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HouseMembership {
  public static final String SERIALIZED_NAME_HOUSE = "house";
  @SerializedName(SERIALIZED_NAME_HOUSE)
  private House house;

  public static final String SERIALIZED_NAME_MEMBERSHIP_END_DATE = "membershipEndDate";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_END_DATE)
  private OffsetDateTime membershipEndDate;

  public static final String SERIALIZED_NAME_MEMBERSHIP_END_REASON = "membershipEndReason";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_END_REASON)
  private String membershipEndReason;

  public static final String SERIALIZED_NAME_MEMBERSHIP_END_REASON_ID = "membershipEndReasonId";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_END_REASON_ID)
  private Integer membershipEndReasonId;

  public static final String SERIALIZED_NAME_MEMBERSHIP_END_REASON_NOTES = "membershipEndReasonNotes";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_END_REASON_NOTES)
  private String membershipEndReasonNotes;

  public static final String SERIALIZED_NAME_MEMBERSHIP_FROM = "membershipFrom";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_FROM)
  private String membershipFrom;

  public static final String SERIALIZED_NAME_MEMBERSHIP_FROM_ID = "membershipFromId";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_FROM_ID)
  private Integer membershipFromId;

  public static final String SERIALIZED_NAME_MEMBERSHIP_START_DATE = "membershipStartDate";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_START_DATE)
  private OffsetDateTime membershipStartDate;

  public static final String SERIALIZED_NAME_MEMBERSHIP_STATUS = "membershipStatus";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_STATUS)
  private HouseMembershipStatus membershipStatus;

  public HouseMembership() {
  }

  public HouseMembership house(House house) {
    this.house = house;
    return this;
  }

  /**
   * Get house
   * @return house
   */
  @javax.annotation.Nullable
  public House getHouse() {
    return house;
  }

  public void setHouse(House house) {
    this.house = house;
  }


  public HouseMembership membershipEndDate(OffsetDateTime membershipEndDate) {
    this.membershipEndDate = membershipEndDate;
    return this;
  }

  /**
   * Get membershipEndDate
   * @return membershipEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMembershipEndDate() {
    return membershipEndDate;
  }

  public void setMembershipEndDate(OffsetDateTime membershipEndDate) {
    this.membershipEndDate = membershipEndDate;
  }


  public HouseMembership membershipEndReason(String membershipEndReason) {
    this.membershipEndReason = membershipEndReason;
    return this;
  }

  /**
   * Get membershipEndReason
   * @return membershipEndReason
   */
  @javax.annotation.Nullable
  public String getMembershipEndReason() {
    return membershipEndReason;
  }

  public void setMembershipEndReason(String membershipEndReason) {
    this.membershipEndReason = membershipEndReason;
  }


  public HouseMembership membershipEndReasonId(Integer membershipEndReasonId) {
    this.membershipEndReasonId = membershipEndReasonId;
    return this;
  }

  /**
   * Get membershipEndReasonId
   * @return membershipEndReasonId
   */
  @javax.annotation.Nullable
  public Integer getMembershipEndReasonId() {
    return membershipEndReasonId;
  }

  public void setMembershipEndReasonId(Integer membershipEndReasonId) {
    this.membershipEndReasonId = membershipEndReasonId;
  }


  public HouseMembership membershipEndReasonNotes(String membershipEndReasonNotes) {
    this.membershipEndReasonNotes = membershipEndReasonNotes;
    return this;
  }

  /**
   * Get membershipEndReasonNotes
   * @return membershipEndReasonNotes
   */
  @javax.annotation.Nullable
  public String getMembershipEndReasonNotes() {
    return membershipEndReasonNotes;
  }

  public void setMembershipEndReasonNotes(String membershipEndReasonNotes) {
    this.membershipEndReasonNotes = membershipEndReasonNotes;
  }


  public HouseMembership membershipFrom(String membershipFrom) {
    this.membershipFrom = membershipFrom;
    return this;
  }

  /**
   * Get membershipFrom
   * @return membershipFrom
   */
  @javax.annotation.Nullable
  public String getMembershipFrom() {
    return membershipFrom;
  }

  public void setMembershipFrom(String membershipFrom) {
    this.membershipFrom = membershipFrom;
  }


  public HouseMembership membershipFromId(Integer membershipFromId) {
    this.membershipFromId = membershipFromId;
    return this;
  }

  /**
   * Get membershipFromId
   * @return membershipFromId
   */
  @javax.annotation.Nullable
  public Integer getMembershipFromId() {
    return membershipFromId;
  }

  public void setMembershipFromId(Integer membershipFromId) {
    this.membershipFromId = membershipFromId;
  }


  public HouseMembership membershipStartDate(OffsetDateTime membershipStartDate) {
    this.membershipStartDate = membershipStartDate;
    return this;
  }

  /**
   * Get membershipStartDate
   * @return membershipStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMembershipStartDate() {
    return membershipStartDate;
  }

  public void setMembershipStartDate(OffsetDateTime membershipStartDate) {
    this.membershipStartDate = membershipStartDate;
  }


  public HouseMembership membershipStatus(HouseMembershipStatus membershipStatus) {
    this.membershipStatus = membershipStatus;
    return this;
  }

  /**
   * Get membershipStatus
   * @return membershipStatus
   */
  @javax.annotation.Nullable
  public HouseMembershipStatus getMembershipStatus() {
    return membershipStatus;
  }

  public void setMembershipStatus(HouseMembershipStatus membershipStatus) {
    this.membershipStatus = membershipStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HouseMembership houseMembership = (HouseMembership) o;
    return Objects.equals(this.house, houseMembership.house) &&
        Objects.equals(this.membershipEndDate, houseMembership.membershipEndDate) &&
        Objects.equals(this.membershipEndReason, houseMembership.membershipEndReason) &&
        Objects.equals(this.membershipEndReasonId, houseMembership.membershipEndReasonId) &&
        Objects.equals(this.membershipEndReasonNotes, houseMembership.membershipEndReasonNotes) &&
        Objects.equals(this.membershipFrom, houseMembership.membershipFrom) &&
        Objects.equals(this.membershipFromId, houseMembership.membershipFromId) &&
        Objects.equals(this.membershipStartDate, houseMembership.membershipStartDate) &&
        Objects.equals(this.membershipStatus, houseMembership.membershipStatus);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(house, membershipEndDate, membershipEndReason, membershipEndReasonId, membershipEndReasonNotes, membershipFrom, membershipFromId, membershipStartDate, membershipStatus);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HouseMembership {\n");
    sb.append("    house: ").append(toIndentedString(house)).append("\n");
    sb.append("    membershipEndDate: ").append(toIndentedString(membershipEndDate)).append("\n");
    sb.append("    membershipEndReason: ").append(toIndentedString(membershipEndReason)).append("\n");
    sb.append("    membershipEndReasonId: ").append(toIndentedString(membershipEndReasonId)).append("\n");
    sb.append("    membershipEndReasonNotes: ").append(toIndentedString(membershipEndReasonNotes)).append("\n");
    sb.append("    membershipFrom: ").append(toIndentedString(membershipFrom)).append("\n");
    sb.append("    membershipFromId: ").append(toIndentedString(membershipFromId)).append("\n");
    sb.append("    membershipStartDate: ").append(toIndentedString(membershipStartDate)).append("\n");
    sb.append("    membershipStatus: ").append(toIndentedString(membershipStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("house");
    openapiFields.add("membershipEndDate");
    openapiFields.add("membershipEndReason");
    openapiFields.add("membershipEndReasonId");
    openapiFields.add("membershipEndReasonNotes");
    openapiFields.add("membershipFrom");
    openapiFields.add("membershipFromId");
    openapiFields.add("membershipStartDate");
    openapiFields.add("membershipStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HouseMembership
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HouseMembership.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HouseMembership is not found in the empty JSON string", HouseMembership.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HouseMembership.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HouseMembership` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `house`
      if (jsonObj.get("house") != null && !jsonObj.get("house").isJsonNull()) {
        House.validateJsonElement(jsonObj.get("house"));
      }
      if ((jsonObj.get("membershipEndReason") != null && !jsonObj.get("membershipEndReason").isJsonNull()) && !jsonObj.get("membershipEndReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `membershipEndReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("membershipEndReason").toString()));
      }
      if ((jsonObj.get("membershipEndReasonNotes") != null && !jsonObj.get("membershipEndReasonNotes").isJsonNull()) && !jsonObj.get("membershipEndReasonNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `membershipEndReasonNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("membershipEndReasonNotes").toString()));
      }
      if ((jsonObj.get("membershipFrom") != null && !jsonObj.get("membershipFrom").isJsonNull()) && !jsonObj.get("membershipFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `membershipFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("membershipFrom").toString()));
      }
      // validate the optional field `membershipStatus`
      if (jsonObj.get("membershipStatus") != null && !jsonObj.get("membershipStatus").isJsonNull()) {
        HouseMembershipStatus.validateJsonElement(jsonObj.get("membershipStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HouseMembership.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HouseMembership' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HouseMembership> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HouseMembership.class));

       return (TypeAdapter<T>) new TypeAdapter<HouseMembership>() {
           @Override
           public void write(JsonWriter out, HouseMembership value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HouseMembership read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HouseMembership given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HouseMembership
   * @throws IOException if the JSON string is invalid with respect to HouseMembership
   */
  public static HouseMembership fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HouseMembership.class);
  }

  /**
   * Convert an instance of HouseMembership to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

