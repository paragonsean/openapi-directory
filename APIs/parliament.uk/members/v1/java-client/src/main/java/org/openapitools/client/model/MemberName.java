/*
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MemberName
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:33.493029-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MemberName {
  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_NAME_ADDRESS_AS = "nameAddressAs";
  @SerializedName(SERIALIZED_NAME_NAME_ADDRESS_AS)
  private String nameAddressAs;

  public static final String SERIALIZED_NAME_NAME_DISPLAY_AS = "nameDisplayAs";
  @SerializedName(SERIALIZED_NAME_NAME_DISPLAY_AS)
  private String nameDisplayAs;

  public static final String SERIALIZED_NAME_NAME_FULL_TITLE = "nameFullTitle";
  @SerializedName(SERIALIZED_NAME_NAME_FULL_TITLE)
  private String nameFullTitle;

  public static final String SERIALIZED_NAME_NAME_LIST_AS = "nameListAs";
  @SerializedName(SERIALIZED_NAME_NAME_LIST_AS)
  private String nameListAs;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public MemberName() {
  }

  public MemberName endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public MemberName nameAddressAs(String nameAddressAs) {
    this.nameAddressAs = nameAddressAs;
    return this;
  }

  /**
   * Get nameAddressAs
   * @return nameAddressAs
   */
  @javax.annotation.Nullable
  public String getNameAddressAs() {
    return nameAddressAs;
  }

  public void setNameAddressAs(String nameAddressAs) {
    this.nameAddressAs = nameAddressAs;
  }


  public MemberName nameDisplayAs(String nameDisplayAs) {
    this.nameDisplayAs = nameDisplayAs;
    return this;
  }

  /**
   * Get nameDisplayAs
   * @return nameDisplayAs
   */
  @javax.annotation.Nullable
  public String getNameDisplayAs() {
    return nameDisplayAs;
  }

  public void setNameDisplayAs(String nameDisplayAs) {
    this.nameDisplayAs = nameDisplayAs;
  }


  public MemberName nameFullTitle(String nameFullTitle) {
    this.nameFullTitle = nameFullTitle;
    return this;
  }

  /**
   * Get nameFullTitle
   * @return nameFullTitle
   */
  @javax.annotation.Nullable
  public String getNameFullTitle() {
    return nameFullTitle;
  }

  public void setNameFullTitle(String nameFullTitle) {
    this.nameFullTitle = nameFullTitle;
  }


  public MemberName nameListAs(String nameListAs) {
    this.nameListAs = nameListAs;
    return this;
  }

  /**
   * Get nameListAs
   * @return nameListAs
   */
  @javax.annotation.Nullable
  public String getNameListAs() {
    return nameListAs;
  }

  public void setNameListAs(String nameListAs) {
    this.nameListAs = nameListAs;
  }


  public MemberName startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MemberName memberName = (MemberName) o;
    return Objects.equals(this.endDate, memberName.endDate) &&
        Objects.equals(this.nameAddressAs, memberName.nameAddressAs) &&
        Objects.equals(this.nameDisplayAs, memberName.nameDisplayAs) &&
        Objects.equals(this.nameFullTitle, memberName.nameFullTitle) &&
        Objects.equals(this.nameListAs, memberName.nameListAs) &&
        Objects.equals(this.startDate, memberName.startDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(endDate, nameAddressAs, nameDisplayAs, nameFullTitle, nameListAs, startDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MemberName {\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    nameAddressAs: ").append(toIndentedString(nameAddressAs)).append("\n");
    sb.append("    nameDisplayAs: ").append(toIndentedString(nameDisplayAs)).append("\n");
    sb.append("    nameFullTitle: ").append(toIndentedString(nameFullTitle)).append("\n");
    sb.append("    nameListAs: ").append(toIndentedString(nameListAs)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endDate");
    openapiFields.add("nameAddressAs");
    openapiFields.add("nameDisplayAs");
    openapiFields.add("nameFullTitle");
    openapiFields.add("nameListAs");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MemberName
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MemberName.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MemberName is not found in the empty JSON string", MemberName.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MemberName.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MemberName` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nameAddressAs") != null && !jsonObj.get("nameAddressAs").isJsonNull()) && !jsonObj.get("nameAddressAs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameAddressAs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameAddressAs").toString()));
      }
      if ((jsonObj.get("nameDisplayAs") != null && !jsonObj.get("nameDisplayAs").isJsonNull()) && !jsonObj.get("nameDisplayAs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameDisplayAs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameDisplayAs").toString()));
      }
      if ((jsonObj.get("nameFullTitle") != null && !jsonObj.get("nameFullTitle").isJsonNull()) && !jsonObj.get("nameFullTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameFullTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameFullTitle").toString()));
      }
      if ((jsonObj.get("nameListAs") != null && !jsonObj.get("nameListAs").isJsonNull()) && !jsonObj.get("nameListAs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameListAs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameListAs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MemberName.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MemberName' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MemberName> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MemberName.class));

       return (TypeAdapter<T>) new TypeAdapter<MemberName>() {
           @Override
           public void write(JsonWriter out, MemberName value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MemberName read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MemberName given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MemberName
   * @throws IOException if the JSON string is invalid with respect to MemberName
   */
  public static MemberName fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MemberName.class);
  }

  /**
   * Convert an instance of MemberName to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

