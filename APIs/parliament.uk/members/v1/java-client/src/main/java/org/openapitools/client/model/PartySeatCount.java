/*
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Party;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PartySeatCount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:33.493029-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartySeatCount {
  public static final String SERIALIZED_NAME_FEMALE = "female";
  @SerializedName(SERIALIZED_NAME_FEMALE)
  private Integer female;

  public static final String SERIALIZED_NAME_MALE = "male";
  @SerializedName(SERIALIZED_NAME_MALE)
  private Integer male;

  public static final String SERIALIZED_NAME_NON_BINARY = "nonBinary";
  @SerializedName(SERIALIZED_NAME_NON_BINARY)
  private Integer nonBinary;

  public static final String SERIALIZED_NAME_PARTY = "party";
  @SerializedName(SERIALIZED_NAME_PARTY)
  private Party party;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public PartySeatCount() {
  }

  public PartySeatCount female(Integer female) {
    this.female = female;
    return this;
  }

  /**
   * Get female
   * @return female
   */
  @javax.annotation.Nullable
  public Integer getFemale() {
    return female;
  }

  public void setFemale(Integer female) {
    this.female = female;
  }


  public PartySeatCount male(Integer male) {
    this.male = male;
    return this;
  }

  /**
   * Get male
   * @return male
   */
  @javax.annotation.Nullable
  public Integer getMale() {
    return male;
  }

  public void setMale(Integer male) {
    this.male = male;
  }


  public PartySeatCount nonBinary(Integer nonBinary) {
    this.nonBinary = nonBinary;
    return this;
  }

  /**
   * Get nonBinary
   * @return nonBinary
   */
  @javax.annotation.Nullable
  public Integer getNonBinary() {
    return nonBinary;
  }

  public void setNonBinary(Integer nonBinary) {
    this.nonBinary = nonBinary;
  }


  public PartySeatCount party(Party party) {
    this.party = party;
    return this;
  }

  /**
   * Get party
   * @return party
   */
  @javax.annotation.Nullable
  public Party getParty() {
    return party;
  }

  public void setParty(Party party) {
    this.party = party;
  }


  public PartySeatCount total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartySeatCount partySeatCount = (PartySeatCount) o;
    return Objects.equals(this.female, partySeatCount.female) &&
        Objects.equals(this.male, partySeatCount.male) &&
        Objects.equals(this.nonBinary, partySeatCount.nonBinary) &&
        Objects.equals(this.party, partySeatCount.party) &&
        Objects.equals(this.total, partySeatCount.total);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(female, male, nonBinary, party, total);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartySeatCount {\n");
    sb.append("    female: ").append(toIndentedString(female)).append("\n");
    sb.append("    male: ").append(toIndentedString(male)).append("\n");
    sb.append("    nonBinary: ").append(toIndentedString(nonBinary)).append("\n");
    sb.append("    party: ").append(toIndentedString(party)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("female");
    openapiFields.add("male");
    openapiFields.add("nonBinary");
    openapiFields.add("party");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartySeatCount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartySeatCount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartySeatCount is not found in the empty JSON string", PartySeatCount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartySeatCount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartySeatCount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `party`
      if (jsonObj.get("party") != null && !jsonObj.get("party").isJsonNull()) {
        Party.validateJsonElement(jsonObj.get("party"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartySeatCount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartySeatCount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartySeatCount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartySeatCount.class));

       return (TypeAdapter<T>) new TypeAdapter<PartySeatCount>() {
           @Override
           public void write(JsonWriter out, PartySeatCount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartySeatCount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartySeatCount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartySeatCount
   * @throws IOException if the JSON string is invalid with respect to PartySeatCount
   */
  public static PartySeatCount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartySeatCount.class);
  }

  /**
   * Convert an instance of PartySeatCount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

