/*
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Party;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LordsByType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:33.493029-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LordsByType {
  public static final String SERIALIZED_NAME_BISHOP = "bishop";
  @SerializedName(SERIALIZED_NAME_BISHOP)
  private Integer bishop;

  public static final String SERIALIZED_NAME_HEREDITARY = "hereditary";
  @SerializedName(SERIALIZED_NAME_HEREDITARY)
  private Integer hereditary;

  public static final String SERIALIZED_NAME_LIFE = "life";
  @SerializedName(SERIALIZED_NAME_LIFE)
  private Integer life;

  public static final String SERIALIZED_NAME_PARTY = "party";
  @SerializedName(SERIALIZED_NAME_PARTY)
  private Party party;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public LordsByType() {
  }

  public LordsByType bishop(Integer bishop) {
    this.bishop = bishop;
    return this;
  }

  /**
   * Get bishop
   * @return bishop
   */
  @javax.annotation.Nullable
  public Integer getBishop() {
    return bishop;
  }

  public void setBishop(Integer bishop) {
    this.bishop = bishop;
  }


  public LordsByType hereditary(Integer hereditary) {
    this.hereditary = hereditary;
    return this;
  }

  /**
   * Get hereditary
   * @return hereditary
   */
  @javax.annotation.Nullable
  public Integer getHereditary() {
    return hereditary;
  }

  public void setHereditary(Integer hereditary) {
    this.hereditary = hereditary;
  }


  public LordsByType life(Integer life) {
    this.life = life;
    return this;
  }

  /**
   * Get life
   * @return life
   */
  @javax.annotation.Nullable
  public Integer getLife() {
    return life;
  }

  public void setLife(Integer life) {
    this.life = life;
  }


  public LordsByType party(Party party) {
    this.party = party;
    return this;
  }

  /**
   * Get party
   * @return party
   */
  @javax.annotation.Nullable
  public Party getParty() {
    return party;
  }

  public void setParty(Party party) {
    this.party = party;
  }


  public LordsByType total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LordsByType lordsByType = (LordsByType) o;
    return Objects.equals(this.bishop, lordsByType.bishop) &&
        Objects.equals(this.hereditary, lordsByType.hereditary) &&
        Objects.equals(this.life, lordsByType.life) &&
        Objects.equals(this.party, lordsByType.party) &&
        Objects.equals(this.total, lordsByType.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bishop, hereditary, life, party, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LordsByType {\n");
    sb.append("    bishop: ").append(toIndentedString(bishop)).append("\n");
    sb.append("    hereditary: ").append(toIndentedString(hereditary)).append("\n");
    sb.append("    life: ").append(toIndentedString(life)).append("\n");
    sb.append("    party: ").append(toIndentedString(party)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bishop");
    openapiFields.add("hereditary");
    openapiFields.add("life");
    openapiFields.add("party");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LordsByType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LordsByType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LordsByType is not found in the empty JSON string", LordsByType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LordsByType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LordsByType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `party`
      if (jsonObj.get("party") != null && !jsonObj.get("party").isJsonNull()) {
        Party.validateJsonElement(jsonObj.get("party"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LordsByType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LordsByType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LordsByType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LordsByType.class));

       return (TypeAdapter<T>) new TypeAdapter<LordsByType>() {
           @Override
           public void write(JsonWriter out, LordsByType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LordsByType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LordsByType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LordsByType
   * @throws IOException if the JSON string is invalid with respect to LordsByType
   */
  public static LordsByType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LordsByType.class);
  }

  /**
   * Convert an instance of LordsByType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

