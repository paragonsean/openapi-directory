/*
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegisteredInterest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:33.493029-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegisteredInterest {
  public static final String SERIALIZED_NAME_CHILD_INTERESTS = "childInterests";
  @SerializedName(SERIALIZED_NAME_CHILD_INTERESTS)
  private List<RegisteredInterest> childInterests;

  public static final String SERIALIZED_NAME_CREATED_WHEN = "createdWhen";
  @SerializedName(SERIALIZED_NAME_CREATED_WHEN)
  private OffsetDateTime createdWhen;

  public static final String SERIALIZED_NAME_DELETED_WHEN = "deletedWhen";
  @SerializedName(SERIALIZED_NAME_DELETED_WHEN)
  private OffsetDateTime deletedWhen;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INTEREST = "interest";
  @SerializedName(SERIALIZED_NAME_INTEREST)
  private String interest;

  public static final String SERIALIZED_NAME_IS_CORRECTION = "isCorrection";
  @SerializedName(SERIALIZED_NAME_IS_CORRECTION)
  private Boolean isCorrection;

  public static final String SERIALIZED_NAME_LAST_AMENDED_WHEN = "lastAmendedWhen";
  @SerializedName(SERIALIZED_NAME_LAST_AMENDED_WHEN)
  private OffsetDateTime lastAmendedWhen;

  public RegisteredInterest() {
  }

  public RegisteredInterest childInterests(List<RegisteredInterest> childInterests) {
    this.childInterests = childInterests;
    return this;
  }

  public RegisteredInterest addChildInterestsItem(RegisteredInterest childInterestsItem) {
    if (this.childInterests == null) {
      this.childInterests = new ArrayList<>();
    }
    this.childInterests.add(childInterestsItem);
    return this;
  }

  /**
   * Get childInterests
   * @return childInterests
   */
  @javax.annotation.Nullable
  public List<RegisteredInterest> getChildInterests() {
    return childInterests;
  }

  public void setChildInterests(List<RegisteredInterest> childInterests) {
    this.childInterests = childInterests;
  }


  public RegisteredInterest createdWhen(OffsetDateTime createdWhen) {
    this.createdWhen = createdWhen;
    return this;
  }

  /**
   * Get createdWhen
   * @return createdWhen
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedWhen() {
    return createdWhen;
  }

  public void setCreatedWhen(OffsetDateTime createdWhen) {
    this.createdWhen = createdWhen;
  }


  public RegisteredInterest deletedWhen(OffsetDateTime deletedWhen) {
    this.deletedWhen = deletedWhen;
    return this;
  }

  /**
   * Get deletedWhen
   * @return deletedWhen
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedWhen() {
    return deletedWhen;
  }

  public void setDeletedWhen(OffsetDateTime deletedWhen) {
    this.deletedWhen = deletedWhen;
  }


  public RegisteredInterest id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public RegisteredInterest interest(String interest) {
    this.interest = interest;
    return this;
  }

  /**
   * Get interest
   * @return interest
   */
  @javax.annotation.Nullable
  public String getInterest() {
    return interest;
  }

  public void setInterest(String interest) {
    this.interest = interest;
  }


  public RegisteredInterest isCorrection(Boolean isCorrection) {
    this.isCorrection = isCorrection;
    return this;
  }

  /**
   * Get isCorrection
   * @return isCorrection
   */
  @javax.annotation.Nullable
  public Boolean getIsCorrection() {
    return isCorrection;
  }

  public void setIsCorrection(Boolean isCorrection) {
    this.isCorrection = isCorrection;
  }


  public RegisteredInterest lastAmendedWhen(OffsetDateTime lastAmendedWhen) {
    this.lastAmendedWhen = lastAmendedWhen;
    return this;
  }

  /**
   * Get lastAmendedWhen
   * @return lastAmendedWhen
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastAmendedWhen() {
    return lastAmendedWhen;
  }

  public void setLastAmendedWhen(OffsetDateTime lastAmendedWhen) {
    this.lastAmendedWhen = lastAmendedWhen;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisteredInterest registeredInterest = (RegisteredInterest) o;
    return Objects.equals(this.childInterests, registeredInterest.childInterests) &&
        Objects.equals(this.createdWhen, registeredInterest.createdWhen) &&
        Objects.equals(this.deletedWhen, registeredInterest.deletedWhen) &&
        Objects.equals(this.id, registeredInterest.id) &&
        Objects.equals(this.interest, registeredInterest.interest) &&
        Objects.equals(this.isCorrection, registeredInterest.isCorrection) &&
        Objects.equals(this.lastAmendedWhen, registeredInterest.lastAmendedWhen);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(childInterests, createdWhen, deletedWhen, id, interest, isCorrection, lastAmendedWhen);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisteredInterest {\n");
    sb.append("    childInterests: ").append(toIndentedString(childInterests)).append("\n");
    sb.append("    createdWhen: ").append(toIndentedString(createdWhen)).append("\n");
    sb.append("    deletedWhen: ").append(toIndentedString(deletedWhen)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interest: ").append(toIndentedString(interest)).append("\n");
    sb.append("    isCorrection: ").append(toIndentedString(isCorrection)).append("\n");
    sb.append("    lastAmendedWhen: ").append(toIndentedString(lastAmendedWhen)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("childInterests");
    openapiFields.add("createdWhen");
    openapiFields.add("deletedWhen");
    openapiFields.add("id");
    openapiFields.add("interest");
    openapiFields.add("isCorrection");
    openapiFields.add("lastAmendedWhen");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegisteredInterest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisteredInterest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisteredInterest is not found in the empty JSON string", RegisteredInterest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisteredInterest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisteredInterest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("childInterests") != null && !jsonObj.get("childInterests").isJsonNull()) {
        JsonArray jsonArraychildInterests = jsonObj.getAsJsonArray("childInterests");
        if (jsonArraychildInterests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("childInterests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `childInterests` to be an array in the JSON string but got `%s`", jsonObj.get("childInterests").toString()));
          }

          // validate the optional field `childInterests` (array)
          for (int i = 0; i < jsonArraychildInterests.size(); i++) {
            RegisteredInterest.validateJsonElement(jsonArraychildInterests.get(i));
          };
        }
      }
      if ((jsonObj.get("interest") != null && !jsonObj.get("interest").isJsonNull()) && !jsonObj.get("interest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interest").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisteredInterest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisteredInterest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisteredInterest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisteredInterest.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisteredInterest>() {
           @Override
           public void write(JsonWriter out, RegisteredInterest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisteredInterest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegisteredInterest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegisteredInterest
   * @throws IOException if the JSON string is invalid with respect to RegisteredInterest
   */
  public static RegisteredInterest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisteredInterest.class);
  }

  /**
   * Convert an instance of RegisteredInterest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

