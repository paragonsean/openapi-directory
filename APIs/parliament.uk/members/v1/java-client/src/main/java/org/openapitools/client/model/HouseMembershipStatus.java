/*
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.MemberStatus;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HouseMembershipStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:33.493029-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HouseMembershipStatus {
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private MemberStatus status;

  public static final String SERIALIZED_NAME_STATUS_DESCRIPTION = "statusDescription";
  @SerializedName(SERIALIZED_NAME_STATUS_DESCRIPTION)
  private String statusDescription;

  public static final String SERIALIZED_NAME_STATUS_ID = "statusId";
  @SerializedName(SERIALIZED_NAME_STATUS_ID)
  private Integer statusId;

  public static final String SERIALIZED_NAME_STATUS_IS_ACTIVE = "statusIsActive";
  @SerializedName(SERIALIZED_NAME_STATUS_IS_ACTIVE)
  private Boolean statusIsActive;

  public static final String SERIALIZED_NAME_STATUS_NOTES = "statusNotes";
  @SerializedName(SERIALIZED_NAME_STATUS_NOTES)
  private String statusNotes;

  public static final String SERIALIZED_NAME_STATUS_START_DATE = "statusStartDate";
  @SerializedName(SERIALIZED_NAME_STATUS_START_DATE)
  private OffsetDateTime statusStartDate;

  public HouseMembershipStatus() {
  }

  public HouseMembershipStatus status(MemberStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public MemberStatus getStatus() {
    return status;
  }

  public void setStatus(MemberStatus status) {
    this.status = status;
  }


  public HouseMembershipStatus statusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
    return this;
  }

  /**
   * Get statusDescription
   * @return statusDescription
   */
  @javax.annotation.Nullable
  public String getStatusDescription() {
    return statusDescription;
  }

  public void setStatusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
  }


  public HouseMembershipStatus statusId(Integer statusId) {
    this.statusId = statusId;
    return this;
  }

  /**
   * Get statusId
   * @return statusId
   */
  @javax.annotation.Nullable
  public Integer getStatusId() {
    return statusId;
  }

  public void setStatusId(Integer statusId) {
    this.statusId = statusId;
  }


  public HouseMembershipStatus statusIsActive(Boolean statusIsActive) {
    this.statusIsActive = statusIsActive;
    return this;
  }

  /**
   * Get statusIsActive
   * @return statusIsActive
   */
  @javax.annotation.Nullable
  public Boolean getStatusIsActive() {
    return statusIsActive;
  }

  public void setStatusIsActive(Boolean statusIsActive) {
    this.statusIsActive = statusIsActive;
  }


  public HouseMembershipStatus statusNotes(String statusNotes) {
    this.statusNotes = statusNotes;
    return this;
  }

  /**
   * Get statusNotes
   * @return statusNotes
   */
  @javax.annotation.Nullable
  public String getStatusNotes() {
    return statusNotes;
  }

  public void setStatusNotes(String statusNotes) {
    this.statusNotes = statusNotes;
  }


  public HouseMembershipStatus statusStartDate(OffsetDateTime statusStartDate) {
    this.statusStartDate = statusStartDate;
    return this;
  }

  /**
   * Get statusStartDate
   * @return statusStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStatusStartDate() {
    return statusStartDate;
  }

  public void setStatusStartDate(OffsetDateTime statusStartDate) {
    this.statusStartDate = statusStartDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HouseMembershipStatus houseMembershipStatus = (HouseMembershipStatus) o;
    return Objects.equals(this.status, houseMembershipStatus.status) &&
        Objects.equals(this.statusDescription, houseMembershipStatus.statusDescription) &&
        Objects.equals(this.statusId, houseMembershipStatus.statusId) &&
        Objects.equals(this.statusIsActive, houseMembershipStatus.statusIsActive) &&
        Objects.equals(this.statusNotes, houseMembershipStatus.statusNotes) &&
        Objects.equals(this.statusStartDate, houseMembershipStatus.statusStartDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, statusDescription, statusId, statusIsActive, statusNotes, statusStartDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HouseMembershipStatus {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("    statusId: ").append(toIndentedString(statusId)).append("\n");
    sb.append("    statusIsActive: ").append(toIndentedString(statusIsActive)).append("\n");
    sb.append("    statusNotes: ").append(toIndentedString(statusNotes)).append("\n");
    sb.append("    statusStartDate: ").append(toIndentedString(statusStartDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("statusDescription");
    openapiFields.add("statusId");
    openapiFields.add("statusIsActive");
    openapiFields.add("statusNotes");
    openapiFields.add("statusStartDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HouseMembershipStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HouseMembershipStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HouseMembershipStatus is not found in the empty JSON string", HouseMembershipStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HouseMembershipStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HouseMembershipStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        MemberStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("statusDescription") != null && !jsonObj.get("statusDescription").isJsonNull()) && !jsonObj.get("statusDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusDescription").toString()));
      }
      if ((jsonObj.get("statusNotes") != null && !jsonObj.get("statusNotes").isJsonNull()) && !jsonObj.get("statusNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusNotes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HouseMembershipStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HouseMembershipStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HouseMembershipStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HouseMembershipStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<HouseMembershipStatus>() {
           @Override
           public void write(JsonWriter out, HouseMembershipStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HouseMembershipStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HouseMembershipStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HouseMembershipStatus
   * @throws IOException if the JSON string is invalid with respect to HouseMembershipStatus
   */
  public static HouseMembershipStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HouseMembershipStatus.class);
  }

  /**
   * Convert an instance of HouseMembershipStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

