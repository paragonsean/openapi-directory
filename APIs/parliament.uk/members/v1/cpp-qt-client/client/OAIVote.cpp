/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVote::OAIVote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVote::OAIVote() {
    this->initializeModel();
}

OAIVote::~OAIVote() {}

void OAIVote::initializeModel() {

    m_acted_as_teller_isSet = false;
    m_acted_as_teller_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_division_number_isSet = false;
    m_division_number_isValid = false;

    m_house_isSet = false;
    m_house_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_in_affirmative_lobby_isSet = false;
    m_in_affirmative_lobby_isValid = false;

    m_number_against_isSet = false;
    m_number_against_isValid = false;

    m_number_in_favour_isSet = false;
    m_number_in_favour_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIVote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVote::fromJsonObject(QJsonObject json) {

    m_acted_as_teller_isValid = ::OpenAPI::fromJsonValue(m_acted_as_teller, json[QString("actedAsTeller")]);
    m_acted_as_teller_isSet = !json[QString("actedAsTeller")].isNull() && m_acted_as_teller_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_division_number_isValid = ::OpenAPI::fromJsonValue(m_division_number, json[QString("divisionNumber")]);
    m_division_number_isSet = !json[QString("divisionNumber")].isNull() && m_division_number_isValid;

    m_house_isValid = ::OpenAPI::fromJsonValue(m_house, json[QString("house")]);
    m_house_isSet = !json[QString("house")].isNull() && m_house_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_in_affirmative_lobby_isValid = ::OpenAPI::fromJsonValue(m_in_affirmative_lobby, json[QString("inAffirmativeLobby")]);
    m_in_affirmative_lobby_isSet = !json[QString("inAffirmativeLobby")].isNull() && m_in_affirmative_lobby_isValid;

    m_number_against_isValid = ::OpenAPI::fromJsonValue(m_number_against, json[QString("numberAgainst")]);
    m_number_against_isSet = !json[QString("numberAgainst")].isNull() && m_number_against_isValid;

    m_number_in_favour_isValid = ::OpenAPI::fromJsonValue(m_number_in_favour, json[QString("numberInFavour")]);
    m_number_in_favour_isSet = !json[QString("numberInFavour")].isNull() && m_number_in_favour_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIVote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVote::asJsonObject() const {
    QJsonObject obj;
    if (m_acted_as_teller_isSet) {
        obj.insert(QString("actedAsTeller"), ::OpenAPI::toJsonValue(m_acted_as_teller));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_division_number_isSet) {
        obj.insert(QString("divisionNumber"), ::OpenAPI::toJsonValue(m_division_number));
    }
    if (m_house.isSet()) {
        obj.insert(QString("house"), ::OpenAPI::toJsonValue(m_house));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_in_affirmative_lobby_isSet) {
        obj.insert(QString("inAffirmativeLobby"), ::OpenAPI::toJsonValue(m_in_affirmative_lobby));
    }
    if (m_number_against_isSet) {
        obj.insert(QString("numberAgainst"), ::OpenAPI::toJsonValue(m_number_against));
    }
    if (m_number_in_favour_isSet) {
        obj.insert(QString("numberInFavour"), ::OpenAPI::toJsonValue(m_number_in_favour));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

bool OAIVote::isActedAsTeller() const {
    return m_acted_as_teller;
}
void OAIVote::setActedAsTeller(const bool &acted_as_teller) {
    m_acted_as_teller = acted_as_teller;
    m_acted_as_teller_isSet = true;
}

bool OAIVote::is_acted_as_teller_Set() const{
    return m_acted_as_teller_isSet;
}

bool OAIVote::is_acted_as_teller_Valid() const{
    return m_acted_as_teller_isValid;
}

QDateTime OAIVote::getDate() const {
    return m_date;
}
void OAIVote::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIVote::is_date_Set() const{
    return m_date_isSet;
}

bool OAIVote::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAIVote::getDivisionNumber() const {
    return m_division_number;
}
void OAIVote::setDivisionNumber(const qint32 &division_number) {
    m_division_number = division_number;
    m_division_number_isSet = true;
}

bool OAIVote::is_division_number_Set() const{
    return m_division_number_isSet;
}

bool OAIVote::is_division_number_Valid() const{
    return m_division_number_isValid;
}

OAIHouse OAIVote::getHouse() const {
    return m_house;
}
void OAIVote::setHouse(const OAIHouse &house) {
    m_house = house;
    m_house_isSet = true;
}

bool OAIVote::is_house_Set() const{
    return m_house_isSet;
}

bool OAIVote::is_house_Valid() const{
    return m_house_isValid;
}

qint32 OAIVote::getId() const {
    return m_id;
}
void OAIVote::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVote::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVote::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIVote::isInAffirmativeLobby() const {
    return m_in_affirmative_lobby;
}
void OAIVote::setInAffirmativeLobby(const bool &in_affirmative_lobby) {
    m_in_affirmative_lobby = in_affirmative_lobby;
    m_in_affirmative_lobby_isSet = true;
}

bool OAIVote::is_in_affirmative_lobby_Set() const{
    return m_in_affirmative_lobby_isSet;
}

bool OAIVote::is_in_affirmative_lobby_Valid() const{
    return m_in_affirmative_lobby_isValid;
}

qint32 OAIVote::getNumberAgainst() const {
    return m_number_against;
}
void OAIVote::setNumberAgainst(const qint32 &number_against) {
    m_number_against = number_against;
    m_number_against_isSet = true;
}

bool OAIVote::is_number_against_Set() const{
    return m_number_against_isSet;
}

bool OAIVote::is_number_against_Valid() const{
    return m_number_against_isValid;
}

qint32 OAIVote::getNumberInFavour() const {
    return m_number_in_favour;
}
void OAIVote::setNumberInFavour(const qint32 &number_in_favour) {
    m_number_in_favour = number_in_favour;
    m_number_in_favour_isSet = true;
}

bool OAIVote::is_number_in_favour_Set() const{
    return m_number_in_favour_isSet;
}

bool OAIVote::is_number_in_favour_Valid() const{
    return m_number_in_favour_isValid;
}

QString OAIVote::getTitle() const {
    return m_title;
}
void OAIVote::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIVote::is_title_Set() const{
    return m_title_isSet;
}

bool OAIVote::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIVote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acted_as_teller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_affirmative_lobby_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_against_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_in_favour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
