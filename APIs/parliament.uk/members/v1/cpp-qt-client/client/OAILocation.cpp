/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_child_contexts_isSet = false;
    m_child_contexts_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_parent_context_isSet = false;
    m_parent_context_isValid = false;

    m_state_of_the_parties_isSet = false;
    m_state_of_the_parties_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_child_contexts_isValid = ::OpenAPI::fromJsonValue(m_child_contexts, json[QString("childContexts")]);
    m_child_contexts_isSet = !json[QString("childContexts")].isNull() && m_child_contexts_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_parent_context_isValid = ::OpenAPI::fromJsonValue(m_parent_context, json[QString("parentContext")]);
    m_parent_context_isSet = !json[QString("parentContext")].isNull() && m_parent_context_isValid;

    m_state_of_the_parties_isValid = ::OpenAPI::fromJsonValue(m_state_of_the_parties, json[QString("stateOfTheParties")]);
    m_state_of_the_parties_isSet = !json[QString("stateOfTheParties")].isNull() && m_state_of_the_parties_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_child_contexts.size() > 0) {
        obj.insert(QString("childContexts"), ::OpenAPI::toJsonValue(m_child_contexts));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_parent_context.isSet()) {
        obj.insert(QString("parentContext"), ::OpenAPI::toJsonValue(m_parent_context));
    }
    if (m_state_of_the_parties.size() > 0) {
        obj.insert(QString("stateOfTheParties"), ::OpenAPI::toJsonValue(m_state_of_the_parties));
    }
    return obj;
}

QList<OAILocationContext> OAILocation::getChildContexts() const {
    return m_child_contexts;
}
void OAILocation::setChildContexts(const QList<OAILocationContext> &child_contexts) {
    m_child_contexts = child_contexts;
    m_child_contexts_isSet = true;
}

bool OAILocation::is_child_contexts_Set() const{
    return m_child_contexts_isSet;
}

bool OAILocation::is_child_contexts_Valid() const{
    return m_child_contexts_isValid;
}

OAILocationContext OAILocation::getContext() const {
    return m_context;
}
void OAILocation::setContext(const OAILocationContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAILocation::is_context_Set() const{
    return m_context_isSet;
}

bool OAILocation::is_context_Valid() const{
    return m_context_isValid;
}

OAILocationContext OAILocation::getParentContext() const {
    return m_parent_context;
}
void OAILocation::setParentContext(const OAILocationContext &parent_context) {
    m_parent_context = parent_context;
    m_parent_context_isSet = true;
}

bool OAILocation::is_parent_context_Set() const{
    return m_parent_context_isSet;
}

bool OAILocation::is_parent_context_Valid() const{
    return m_parent_context_isValid;
}

QList<OAIPartySeatCount> OAILocation::getStateOfTheParties() const {
    return m_state_of_the_parties;
}
void OAILocation::setStateOfTheParties(const QList<OAIPartySeatCount> &state_of_the_parties) {
    m_state_of_the_parties = state_of_the_parties;
    m_state_of_the_parties_isSet = true;
}

bool OAILocation::is_state_of_the_parties_Set() const{
    return m_state_of_the_parties_isSet;
}

bool OAILocation::is_state_of_the_parties_Valid() const{
    return m_state_of_the_parties_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_of_the_parties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
