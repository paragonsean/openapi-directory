/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMember::OAIMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMember::OAIMember() {
    this->initializeModel();
}

OAIMember::~OAIMember() {}

void OAIMember::initializeModel() {

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latest_house_membership_isSet = false;
    m_latest_house_membership_isValid = false;

    m_latest_party_isSet = false;
    m_latest_party_isValid = false;

    m_name_address_as_isSet = false;
    m_name_address_as_isValid = false;

    m_name_display_as_isSet = false;
    m_name_display_as_isValid = false;

    m_name_full_title_isSet = false;
    m_name_full_title_isValid = false;

    m_name_list_as_isSet = false;
    m_name_list_as_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;
}

void OAIMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMember::fromJsonObject(QJsonObject json) {

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latest_house_membership_isValid = ::OpenAPI::fromJsonValue(m_latest_house_membership, json[QString("latestHouseMembership")]);
    m_latest_house_membership_isSet = !json[QString("latestHouseMembership")].isNull() && m_latest_house_membership_isValid;

    m_latest_party_isValid = ::OpenAPI::fromJsonValue(m_latest_party, json[QString("latestParty")]);
    m_latest_party_isSet = !json[QString("latestParty")].isNull() && m_latest_party_isValid;

    m_name_address_as_isValid = ::OpenAPI::fromJsonValue(m_name_address_as, json[QString("nameAddressAs")]);
    m_name_address_as_isSet = !json[QString("nameAddressAs")].isNull() && m_name_address_as_isValid;

    m_name_display_as_isValid = ::OpenAPI::fromJsonValue(m_name_display_as, json[QString("nameDisplayAs")]);
    m_name_display_as_isSet = !json[QString("nameDisplayAs")].isNull() && m_name_display_as_isValid;

    m_name_full_title_isValid = ::OpenAPI::fromJsonValue(m_name_full_title, json[QString("nameFullTitle")]);
    m_name_full_title_isSet = !json[QString("nameFullTitle")].isNull() && m_name_full_title_isValid;

    m_name_list_as_isValid = ::OpenAPI::fromJsonValue(m_name_list_as, json[QString("nameListAs")]);
    m_name_list_as_isSet = !json[QString("nameListAs")].isNull() && m_name_list_as_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;
}

QString OAIMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMember::asJsonObject() const {
    QJsonObject obj;
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latest_house_membership.isSet()) {
        obj.insert(QString("latestHouseMembership"), ::OpenAPI::toJsonValue(m_latest_house_membership));
    }
    if (m_latest_party.isSet()) {
        obj.insert(QString("latestParty"), ::OpenAPI::toJsonValue(m_latest_party));
    }
    if (m_name_address_as_isSet) {
        obj.insert(QString("nameAddressAs"), ::OpenAPI::toJsonValue(m_name_address_as));
    }
    if (m_name_display_as_isSet) {
        obj.insert(QString("nameDisplayAs"), ::OpenAPI::toJsonValue(m_name_display_as));
    }
    if (m_name_full_title_isSet) {
        obj.insert(QString("nameFullTitle"), ::OpenAPI::toJsonValue(m_name_full_title));
    }
    if (m_name_list_as_isSet) {
        obj.insert(QString("nameListAs"), ::OpenAPI::toJsonValue(m_name_list_as));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    return obj;
}

QString OAIMember::getGender() const {
    return m_gender;
}
void OAIMember::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIMember::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIMember::is_gender_Valid() const{
    return m_gender_isValid;
}

qint32 OAIMember::getId() const {
    return m_id;
}
void OAIMember::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMember::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMember::is_id_Valid() const{
    return m_id_isValid;
}

OAIHouseMembership OAIMember::getLatestHouseMembership() const {
    return m_latest_house_membership;
}
void OAIMember::setLatestHouseMembership(const OAIHouseMembership &latest_house_membership) {
    m_latest_house_membership = latest_house_membership;
    m_latest_house_membership_isSet = true;
}

bool OAIMember::is_latest_house_membership_Set() const{
    return m_latest_house_membership_isSet;
}

bool OAIMember::is_latest_house_membership_Valid() const{
    return m_latest_house_membership_isValid;
}

OAIParty OAIMember::getLatestParty() const {
    return m_latest_party;
}
void OAIMember::setLatestParty(const OAIParty &latest_party) {
    m_latest_party = latest_party;
    m_latest_party_isSet = true;
}

bool OAIMember::is_latest_party_Set() const{
    return m_latest_party_isSet;
}

bool OAIMember::is_latest_party_Valid() const{
    return m_latest_party_isValid;
}

QString OAIMember::getNameAddressAs() const {
    return m_name_address_as;
}
void OAIMember::setNameAddressAs(const QString &name_address_as) {
    m_name_address_as = name_address_as;
    m_name_address_as_isSet = true;
}

bool OAIMember::is_name_address_as_Set() const{
    return m_name_address_as_isSet;
}

bool OAIMember::is_name_address_as_Valid() const{
    return m_name_address_as_isValid;
}

QString OAIMember::getNameDisplayAs() const {
    return m_name_display_as;
}
void OAIMember::setNameDisplayAs(const QString &name_display_as) {
    m_name_display_as = name_display_as;
    m_name_display_as_isSet = true;
}

bool OAIMember::is_name_display_as_Set() const{
    return m_name_display_as_isSet;
}

bool OAIMember::is_name_display_as_Valid() const{
    return m_name_display_as_isValid;
}

QString OAIMember::getNameFullTitle() const {
    return m_name_full_title;
}
void OAIMember::setNameFullTitle(const QString &name_full_title) {
    m_name_full_title = name_full_title;
    m_name_full_title_isSet = true;
}

bool OAIMember::is_name_full_title_Set() const{
    return m_name_full_title_isSet;
}

bool OAIMember::is_name_full_title_Valid() const{
    return m_name_full_title_isValid;
}

QString OAIMember::getNameListAs() const {
    return m_name_list_as;
}
void OAIMember::setNameListAs(const QString &name_list_as) {
    m_name_list_as = name_list_as;
    m_name_list_as_isSet = true;
}

bool OAIMember::is_name_list_as_Set() const{
    return m_name_list_as_isSet;
}

bool OAIMember::is_name_list_as_Valid() const{
    return m_name_list_as_isValid;
}

QString OAIMember::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIMember::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIMember::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIMember::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

bool OAIMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_house_membership.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_party.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_address_as_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_display_as_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_full_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_list_as_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
