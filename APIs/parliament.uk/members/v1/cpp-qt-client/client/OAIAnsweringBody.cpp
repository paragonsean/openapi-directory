/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnsweringBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnsweringBody::OAIAnsweringBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnsweringBody::OAIAnsweringBody() {
    this->initializeModel();
}

OAIAnsweringBody::~OAIAnsweringBody() {}

void OAIAnsweringBody::initializeModel() {

    m_department_isSet = false;
    m_department_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIAnsweringBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnsweringBody::fromJsonObject(QJsonObject json) {

    m_department_isValid = ::OpenAPI::fromJsonValue(m_department, json[QString("department")]);
    m_department_isSet = !json[QString("department")].isNull() && m_department_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("shortName")]);
    m_short_name_isSet = !json[QString("shortName")].isNull() && m_short_name_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIAnsweringBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnsweringBody::asJsonObject() const {
    QJsonObject obj;
    if (m_department.isSet()) {
        obj.insert(QString("department"), ::OpenAPI::toJsonValue(m_department));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("shortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

OAIGovernmentDepartment OAIAnsweringBody::getDepartment() const {
    return m_department;
}
void OAIAnsweringBody::setDepartment(const OAIGovernmentDepartment &department) {
    m_department = department;
    m_department_isSet = true;
}

bool OAIAnsweringBody::is_department_Set() const{
    return m_department_isSet;
}

bool OAIAnsweringBody::is_department_Valid() const{
    return m_department_isValid;
}

qint32 OAIAnsweringBody::getId() const {
    return m_id;
}
void OAIAnsweringBody::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAnsweringBody::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAnsweringBody::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAnsweringBody::getName() const {
    return m_name;
}
void OAIAnsweringBody::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAnsweringBody::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAnsweringBody::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAnsweringBody::getShortName() const {
    return m_short_name;
}
void OAIAnsweringBody::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIAnsweringBody::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIAnsweringBody::is_short_name_Valid() const{
    return m_short_name_isValid;
}

QString OAIAnsweringBody::getTarget() const {
    return m_target;
}
void OAIAnsweringBody::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIAnsweringBody::is_target_Set() const{
    return m_target_isSet;
}

bool OAIAnsweringBody::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIAnsweringBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_department.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnsweringBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
