/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberHistory::OAIMemberHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberHistory::OAIMemberHistory() {
    this->initializeModel();
}

OAIMemberHistory::~OAIMemberHistory() {}

void OAIMemberHistory::initializeModel() {

    m_house_membership_history_isSet = false;
    m_house_membership_history_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_history_isSet = false;
    m_name_history_isValid = false;

    m_party_history_isSet = false;
    m_party_history_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;
}

void OAIMemberHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberHistory::fromJsonObject(QJsonObject json) {

    m_house_membership_history_isValid = ::OpenAPI::fromJsonValue(m_house_membership_history, json[QString("houseMembershipHistory")]);
    m_house_membership_history_isSet = !json[QString("houseMembershipHistory")].isNull() && m_house_membership_history_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_history_isValid = ::OpenAPI::fromJsonValue(m_name_history, json[QString("nameHistory")]);
    m_name_history_isSet = !json[QString("nameHistory")].isNull() && m_name_history_isValid;

    m_party_history_isValid = ::OpenAPI::fromJsonValue(m_party_history, json[QString("partyHistory")]);
    m_party_history_isSet = !json[QString("partyHistory")].isNull() && m_party_history_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;
}

QString OAIMemberHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_house_membership_history.size() > 0) {
        obj.insert(QString("houseMembershipHistory"), ::OpenAPI::toJsonValue(m_house_membership_history));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_history.size() > 0) {
        obj.insert(QString("nameHistory"), ::OpenAPI::toJsonValue(m_name_history));
    }
    if (m_party_history.size() > 0) {
        obj.insert(QString("partyHistory"), ::OpenAPI::toJsonValue(m_party_history));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    return obj;
}

QList<OAIHouseMembership> OAIMemberHistory::getHouseMembershipHistory() const {
    return m_house_membership_history;
}
void OAIMemberHistory::setHouseMembershipHistory(const QList<OAIHouseMembership> &house_membership_history) {
    m_house_membership_history = house_membership_history;
    m_house_membership_history_isSet = true;
}

bool OAIMemberHistory::is_house_membership_history_Set() const{
    return m_house_membership_history_isSet;
}

bool OAIMemberHistory::is_house_membership_history_Valid() const{
    return m_house_membership_history_isValid;
}

qint32 OAIMemberHistory::getId() const {
    return m_id;
}
void OAIMemberHistory::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMemberHistory::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMemberHistory::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIMemberName> OAIMemberHistory::getNameHistory() const {
    return m_name_history;
}
void OAIMemberHistory::setNameHistory(const QList<OAIMemberName> &name_history) {
    m_name_history = name_history;
    m_name_history_isSet = true;
}

bool OAIMemberHistory::is_name_history_Set() const{
    return m_name_history_isSet;
}

bool OAIMemberHistory::is_name_history_Valid() const{
    return m_name_history_isValid;
}

QList<OAIMemberParty> OAIMemberHistory::getPartyHistory() const {
    return m_party_history;
}
void OAIMemberHistory::setPartyHistory(const QList<OAIMemberParty> &party_history) {
    m_party_history = party_history;
    m_party_history_isSet = true;
}

bool OAIMemberHistory::is_party_history_Set() const{
    return m_party_history_isSet;
}

bool OAIMemberHistory::is_party_history_Valid() const{
    return m_party_history_isValid;
}

QString OAIMemberHistory::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIMemberHistory::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIMemberHistory::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIMemberHistory::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

bool OAIMemberHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_house_membership_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
