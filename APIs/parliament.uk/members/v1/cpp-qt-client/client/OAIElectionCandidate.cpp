/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElectionCandidate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElectionCandidate::OAIElectionCandidate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElectionCandidate::OAIElectionCandidate() {
    this->initializeModel();
}

OAIElectionCandidate::~OAIElectionCandidate() {}

void OAIElectionCandidate::initializeModel() {

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_rank_order_isSet = false;
    m_rank_order_isValid = false;

    m_result_change_isSet = false;
    m_result_change_isValid = false;

    m_vote_share_isSet = false;
    m_vote_share_isValid = false;

    m_votes_isSet = false;
    m_votes_isValid = false;
}

void OAIElectionCandidate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElectionCandidate::fromJsonObject(QJsonObject json) {

    m_member_id_isValid = ::OpenAPI::fromJsonValue(m_member_id, json[QString("memberId")]);
    m_member_id_isSet = !json[QString("memberId")].isNull() && m_member_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;

    m_rank_order_isValid = ::OpenAPI::fromJsonValue(m_rank_order, json[QString("rankOrder")]);
    m_rank_order_isSet = !json[QString("rankOrder")].isNull() && m_rank_order_isValid;

    m_result_change_isValid = ::OpenAPI::fromJsonValue(m_result_change, json[QString("resultChange")]);
    m_result_change_isSet = !json[QString("resultChange")].isNull() && m_result_change_isValid;

    m_vote_share_isValid = ::OpenAPI::fromJsonValue(m_vote_share, json[QString("voteShare")]);
    m_vote_share_isSet = !json[QString("voteShare")].isNull() && m_vote_share_isValid;

    m_votes_isValid = ::OpenAPI::fromJsonValue(m_votes, json[QString("votes")]);
    m_votes_isSet = !json[QString("votes")].isNull() && m_votes_isValid;
}

QString OAIElectionCandidate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElectionCandidate::asJsonObject() const {
    QJsonObject obj;
    if (m_member_id_isSet) {
        obj.insert(QString("memberId"), ::OpenAPI::toJsonValue(m_member_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_party.isSet()) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_rank_order_isSet) {
        obj.insert(QString("rankOrder"), ::OpenAPI::toJsonValue(m_rank_order));
    }
    if (m_result_change_isSet) {
        obj.insert(QString("resultChange"), ::OpenAPI::toJsonValue(m_result_change));
    }
    if (m_vote_share_isSet) {
        obj.insert(QString("voteShare"), ::OpenAPI::toJsonValue(m_vote_share));
    }
    if (m_votes_isSet) {
        obj.insert(QString("votes"), ::OpenAPI::toJsonValue(m_votes));
    }
    return obj;
}

qint32 OAIElectionCandidate::getMemberId() const {
    return m_member_id;
}
void OAIElectionCandidate::setMemberId(const qint32 &member_id) {
    m_member_id = member_id;
    m_member_id_isSet = true;
}

bool OAIElectionCandidate::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAIElectionCandidate::is_member_id_Valid() const{
    return m_member_id_isValid;
}

QString OAIElectionCandidate::getName() const {
    return m_name;
}
void OAIElectionCandidate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIElectionCandidate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIElectionCandidate::is_name_Valid() const{
    return m_name_isValid;
}

OAIParty OAIElectionCandidate::getParty() const {
    return m_party;
}
void OAIElectionCandidate::setParty(const OAIParty &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAIElectionCandidate::is_party_Set() const{
    return m_party_isSet;
}

bool OAIElectionCandidate::is_party_Valid() const{
    return m_party_isValid;
}

qint32 OAIElectionCandidate::getRankOrder() const {
    return m_rank_order;
}
void OAIElectionCandidate::setRankOrder(const qint32 &rank_order) {
    m_rank_order = rank_order;
    m_rank_order_isSet = true;
}

bool OAIElectionCandidate::is_rank_order_Set() const{
    return m_rank_order_isSet;
}

bool OAIElectionCandidate::is_rank_order_Valid() const{
    return m_rank_order_isValid;
}

QString OAIElectionCandidate::getResultChange() const {
    return m_result_change;
}
void OAIElectionCandidate::setResultChange(const QString &result_change) {
    m_result_change = result_change;
    m_result_change_isSet = true;
}

bool OAIElectionCandidate::is_result_change_Set() const{
    return m_result_change_isSet;
}

bool OAIElectionCandidate::is_result_change_Valid() const{
    return m_result_change_isValid;
}

double OAIElectionCandidate::getVoteShare() const {
    return m_vote_share;
}
void OAIElectionCandidate::setVoteShare(const double &vote_share) {
    m_vote_share = vote_share;
    m_vote_share_isSet = true;
}

bool OAIElectionCandidate::is_vote_share_Set() const{
    return m_vote_share_isSet;
}

bool OAIElectionCandidate::is_vote_share_Valid() const{
    return m_vote_share_isValid;
}

qint32 OAIElectionCandidate::getVotes() const {
    return m_votes;
}
void OAIElectionCandidate::setVotes(const qint32 &votes) {
    m_votes = votes;
    m_votes_isSet = true;
}

bool OAIElectionCandidate::is_votes_Set() const{
    return m_votes_isSet;
}

bool OAIElectionCandidate::is_votes_Valid() const{
    return m_votes_isValid;
}

bool OAIElectionCandidate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vote_share_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_votes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElectionCandidate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
