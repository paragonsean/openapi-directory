/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartySeatCount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartySeatCount::OAIPartySeatCount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartySeatCount::OAIPartySeatCount() {
    this->initializeModel();
}

OAIPartySeatCount::~OAIPartySeatCount() {}

void OAIPartySeatCount::initializeModel() {

    m_female_isSet = false;
    m_female_isValid = false;

    m_male_isSet = false;
    m_male_isValid = false;

    m_non_binary_isSet = false;
    m_non_binary_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIPartySeatCount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartySeatCount::fromJsonObject(QJsonObject json) {

    m_female_isValid = ::OpenAPI::fromJsonValue(m_female, json[QString("female")]);
    m_female_isSet = !json[QString("female")].isNull() && m_female_isValid;

    m_male_isValid = ::OpenAPI::fromJsonValue(m_male, json[QString("male")]);
    m_male_isSet = !json[QString("male")].isNull() && m_male_isValid;

    m_non_binary_isValid = ::OpenAPI::fromJsonValue(m_non_binary, json[QString("nonBinary")]);
    m_non_binary_isSet = !json[QString("nonBinary")].isNull() && m_non_binary_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIPartySeatCount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartySeatCount::asJsonObject() const {
    QJsonObject obj;
    if (m_female_isSet) {
        obj.insert(QString("female"), ::OpenAPI::toJsonValue(m_female));
    }
    if (m_male_isSet) {
        obj.insert(QString("male"), ::OpenAPI::toJsonValue(m_male));
    }
    if (m_non_binary_isSet) {
        obj.insert(QString("nonBinary"), ::OpenAPI::toJsonValue(m_non_binary));
    }
    if (m_party.isSet()) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAIPartySeatCount::getFemale() const {
    return m_female;
}
void OAIPartySeatCount::setFemale(const qint32 &female) {
    m_female = female;
    m_female_isSet = true;
}

bool OAIPartySeatCount::is_female_Set() const{
    return m_female_isSet;
}

bool OAIPartySeatCount::is_female_Valid() const{
    return m_female_isValid;
}

qint32 OAIPartySeatCount::getMale() const {
    return m_male;
}
void OAIPartySeatCount::setMale(const qint32 &male) {
    m_male = male;
    m_male_isSet = true;
}

bool OAIPartySeatCount::is_male_Set() const{
    return m_male_isSet;
}

bool OAIPartySeatCount::is_male_Valid() const{
    return m_male_isValid;
}

qint32 OAIPartySeatCount::getNonBinary() const {
    return m_non_binary;
}
void OAIPartySeatCount::setNonBinary(const qint32 &non_binary) {
    m_non_binary = non_binary;
    m_non_binary_isSet = true;
}

bool OAIPartySeatCount::is_non_binary_Set() const{
    return m_non_binary_isSet;
}

bool OAIPartySeatCount::is_non_binary_Valid() const{
    return m_non_binary_isValid;
}

OAIParty OAIPartySeatCount::getParty() const {
    return m_party;
}
void OAIPartySeatCount::setParty(const OAIParty &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAIPartySeatCount::is_party_Set() const{
    return m_party_isSet;
}

bool OAIPartySeatCount::is_party_Valid() const{
    return m_party_isValid;
}

qint32 OAIPartySeatCount::getTotal() const {
    return m_total;
}
void OAIPartySeatCount::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPartySeatCount::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPartySeatCount::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIPartySeatCount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_female_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_male_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_binary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartySeatCount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
