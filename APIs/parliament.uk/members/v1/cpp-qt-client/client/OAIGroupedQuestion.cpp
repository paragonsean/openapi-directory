/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupedQuestion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupedQuestion::OAIGroupedQuestion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupedQuestion::OAIGroupedQuestion() {
    this->initializeModel();
}

OAIGroupedQuestion::~OAIGroupedQuestion() {}

void OAIGroupedQuestion::initializeModel() {

    m_date_tabled_isSet = false;
    m_date_tabled_isValid = false;

    m_question_uin_isSet = false;
    m_question_uin_isValid = false;
}

void OAIGroupedQuestion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupedQuestion::fromJsonObject(QJsonObject json) {

    m_date_tabled_isValid = ::OpenAPI::fromJsonValue(m_date_tabled, json[QString("dateTabled")]);
    m_date_tabled_isSet = !json[QString("dateTabled")].isNull() && m_date_tabled_isValid;

    m_question_uin_isValid = ::OpenAPI::fromJsonValue(m_question_uin, json[QString("questionUin")]);
    m_question_uin_isSet = !json[QString("questionUin")].isNull() && m_question_uin_isValid;
}

QString OAIGroupedQuestion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupedQuestion::asJsonObject() const {
    QJsonObject obj;
    if (m_date_tabled_isSet) {
        obj.insert(QString("dateTabled"), ::OpenAPI::toJsonValue(m_date_tabled));
    }
    if (m_question_uin_isSet) {
        obj.insert(QString("questionUin"), ::OpenAPI::toJsonValue(m_question_uin));
    }
    return obj;
}

QDateTime OAIGroupedQuestion::getDateTabled() const {
    return m_date_tabled;
}
void OAIGroupedQuestion::setDateTabled(const QDateTime &date_tabled) {
    m_date_tabled = date_tabled;
    m_date_tabled_isSet = true;
}

bool OAIGroupedQuestion::is_date_tabled_Set() const{
    return m_date_tabled_isSet;
}

bool OAIGroupedQuestion::is_date_tabled_Valid() const{
    return m_date_tabled_isValid;
}

QString OAIGroupedQuestion::getQuestionUin() const {
    return m_question_uin;
}
void OAIGroupedQuestion::setQuestionUin(const QString &question_uin) {
    m_question_uin = question_uin;
    m_question_uin_isSet = true;
}

bool OAIGroupedQuestion::is_question_uin_Set() const{
    return m_question_uin_isSet;
}

bool OAIGroupedQuestion::is_question_uin_Valid() const{
    return m_question_uin_isValid;
}

bool OAIGroupedQuestion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_tabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_uin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupedQuestion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
