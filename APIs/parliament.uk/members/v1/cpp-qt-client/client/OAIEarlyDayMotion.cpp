/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEarlyDayMotion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEarlyDayMotion::OAIEarlyDayMotion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEarlyDayMotion::OAIEarlyDayMotion() {
    this->initializeModel();
}

OAIEarlyDayMotion::~OAIEarlyDayMotion() {}

void OAIEarlyDayMotion::initializeModel() {

    m_date_tabled_isSet = false;
    m_date_tabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_amendment_isSet = false;
    m_is_amendment_isValid = false;

    m_is_prayer_isSet = false;
    m_is_prayer_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_sponsors_count_isSet = false;
    m_sponsors_count_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIEarlyDayMotion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEarlyDayMotion::fromJsonObject(QJsonObject json) {

    m_date_tabled_isValid = ::OpenAPI::fromJsonValue(m_date_tabled, json[QString("dateTabled")]);
    m_date_tabled_isSet = !json[QString("dateTabled")].isNull() && m_date_tabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_amendment_isValid = ::OpenAPI::fromJsonValue(m_is_amendment, json[QString("isAmendment")]);
    m_is_amendment_isSet = !json[QString("isAmendment")].isNull() && m_is_amendment_isValid;

    m_is_prayer_isValid = ::OpenAPI::fromJsonValue(m_is_prayer, json[QString("isPrayer")]);
    m_is_prayer_isSet = !json[QString("isPrayer")].isNull() && m_is_prayer_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_sponsors_count_isValid = ::OpenAPI::fromJsonValue(m_sponsors_count, json[QString("sponsorsCount")]);
    m_sponsors_count_isSet = !json[QString("sponsorsCount")].isNull() && m_sponsors_count_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIEarlyDayMotion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEarlyDayMotion::asJsonObject() const {
    QJsonObject obj;
    if (m_date_tabled_isSet) {
        obj.insert(QString("dateTabled"), ::OpenAPI::toJsonValue(m_date_tabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_amendment_isSet) {
        obj.insert(QString("isAmendment"), ::OpenAPI::toJsonValue(m_is_amendment));
    }
    if (m_is_prayer_isSet) {
        obj.insert(QString("isPrayer"), ::OpenAPI::toJsonValue(m_is_prayer));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_sponsors_count_isSet) {
        obj.insert(QString("sponsorsCount"), ::OpenAPI::toJsonValue(m_sponsors_count));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QDateTime OAIEarlyDayMotion::getDateTabled() const {
    return m_date_tabled;
}
void OAIEarlyDayMotion::setDateTabled(const QDateTime &date_tabled) {
    m_date_tabled = date_tabled;
    m_date_tabled_isSet = true;
}

bool OAIEarlyDayMotion::is_date_tabled_Set() const{
    return m_date_tabled_isSet;
}

bool OAIEarlyDayMotion::is_date_tabled_Valid() const{
    return m_date_tabled_isValid;
}

qint32 OAIEarlyDayMotion::getId() const {
    return m_id;
}
void OAIEarlyDayMotion::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEarlyDayMotion::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEarlyDayMotion::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIEarlyDayMotion::isIsAmendment() const {
    return m_is_amendment;
}
void OAIEarlyDayMotion::setIsAmendment(const bool &is_amendment) {
    m_is_amendment = is_amendment;
    m_is_amendment_isSet = true;
}

bool OAIEarlyDayMotion::is_is_amendment_Set() const{
    return m_is_amendment_isSet;
}

bool OAIEarlyDayMotion::is_is_amendment_Valid() const{
    return m_is_amendment_isValid;
}

bool OAIEarlyDayMotion::isIsPrayer() const {
    return m_is_prayer;
}
void OAIEarlyDayMotion::setIsPrayer(const bool &is_prayer) {
    m_is_prayer = is_prayer;
    m_is_prayer_isSet = true;
}

bool OAIEarlyDayMotion::is_is_prayer_Set() const{
    return m_is_prayer_isSet;
}

bool OAIEarlyDayMotion::is_is_prayer_Valid() const{
    return m_is_prayer_isValid;
}

QString OAIEarlyDayMotion::getNumber() const {
    return m_number;
}
void OAIEarlyDayMotion::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIEarlyDayMotion::is_number_Set() const{
    return m_number_isSet;
}

bool OAIEarlyDayMotion::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIEarlyDayMotion::getSponsorsCount() const {
    return m_sponsors_count;
}
void OAIEarlyDayMotion::setSponsorsCount(const qint32 &sponsors_count) {
    m_sponsors_count = sponsors_count;
    m_sponsors_count_isSet = true;
}

bool OAIEarlyDayMotion::is_sponsors_count_Set() const{
    return m_sponsors_count_isSet;
}

bool OAIEarlyDayMotion::is_sponsors_count_Valid() const{
    return m_sponsors_count_isValid;
}

QString OAIEarlyDayMotion::getTitle() const {
    return m_title;
}
void OAIEarlyDayMotion::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEarlyDayMotion::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEarlyDayMotion::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIEarlyDayMotion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_tabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_amendment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_prayer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sponsors_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEarlyDayMotion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
