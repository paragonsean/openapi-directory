/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElectionResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElectionResult::OAIElectionResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElectionResult::OAIElectionResult() {
    this->initializeModel();
}

OAIElectionResult::~OAIElectionResult() {}

void OAIElectionResult::initializeModel() {

    m_candidates_isSet = false;
    m_candidates_isValid = false;

    m_constituency_name_isSet = false;
    m_constituency_name_isValid = false;

    m_election_date_isSet = false;
    m_election_date_isValid = false;

    m_election_id_isSet = false;
    m_election_id_isValid = false;

    m_election_title_isSet = false;
    m_election_title_isValid = false;

    m_electorate_isSet = false;
    m_electorate_isValid = false;

    m_is_general_election_isSet = false;
    m_is_general_election_isValid = false;

    m_is_notional_isSet = false;
    m_is_notional_isValid = false;

    m_majority_isSet = false;
    m_majority_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_turnout_isSet = false;
    m_turnout_isValid = false;

    m_winning_party_isSet = false;
    m_winning_party_isValid = false;
}

void OAIElectionResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElectionResult::fromJsonObject(QJsonObject json) {

    m_candidates_isValid = ::OpenAPI::fromJsonValue(m_candidates, json[QString("candidates")]);
    m_candidates_isSet = !json[QString("candidates")].isNull() && m_candidates_isValid;

    m_constituency_name_isValid = ::OpenAPI::fromJsonValue(m_constituency_name, json[QString("constituencyName")]);
    m_constituency_name_isSet = !json[QString("constituencyName")].isNull() && m_constituency_name_isValid;

    m_election_date_isValid = ::OpenAPI::fromJsonValue(m_election_date, json[QString("electionDate")]);
    m_election_date_isSet = !json[QString("electionDate")].isNull() && m_election_date_isValid;

    m_election_id_isValid = ::OpenAPI::fromJsonValue(m_election_id, json[QString("electionId")]);
    m_election_id_isSet = !json[QString("electionId")].isNull() && m_election_id_isValid;

    m_election_title_isValid = ::OpenAPI::fromJsonValue(m_election_title, json[QString("electionTitle")]);
    m_election_title_isSet = !json[QString("electionTitle")].isNull() && m_election_title_isValid;

    m_electorate_isValid = ::OpenAPI::fromJsonValue(m_electorate, json[QString("electorate")]);
    m_electorate_isSet = !json[QString("electorate")].isNull() && m_electorate_isValid;

    m_is_general_election_isValid = ::OpenAPI::fromJsonValue(m_is_general_election, json[QString("isGeneralElection")]);
    m_is_general_election_isSet = !json[QString("isGeneralElection")].isNull() && m_is_general_election_isValid;

    m_is_notional_isValid = ::OpenAPI::fromJsonValue(m_is_notional, json[QString("isNotional")]);
    m_is_notional_isSet = !json[QString("isNotional")].isNull() && m_is_notional_isValid;

    m_majority_isValid = ::OpenAPI::fromJsonValue(m_majority, json[QString("majority")]);
    m_majority_isSet = !json[QString("majority")].isNull() && m_majority_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_turnout_isValid = ::OpenAPI::fromJsonValue(m_turnout, json[QString("turnout")]);
    m_turnout_isSet = !json[QString("turnout")].isNull() && m_turnout_isValid;

    m_winning_party_isValid = ::OpenAPI::fromJsonValue(m_winning_party, json[QString("winningParty")]);
    m_winning_party_isSet = !json[QString("winningParty")].isNull() && m_winning_party_isValid;
}

QString OAIElectionResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElectionResult::asJsonObject() const {
    QJsonObject obj;
    if (m_candidates.size() > 0) {
        obj.insert(QString("candidates"), ::OpenAPI::toJsonValue(m_candidates));
    }
    if (m_constituency_name_isSet) {
        obj.insert(QString("constituencyName"), ::OpenAPI::toJsonValue(m_constituency_name));
    }
    if (m_election_date_isSet) {
        obj.insert(QString("electionDate"), ::OpenAPI::toJsonValue(m_election_date));
    }
    if (m_election_id_isSet) {
        obj.insert(QString("electionId"), ::OpenAPI::toJsonValue(m_election_id));
    }
    if (m_election_title_isSet) {
        obj.insert(QString("electionTitle"), ::OpenAPI::toJsonValue(m_election_title));
    }
    if (m_electorate_isSet) {
        obj.insert(QString("electorate"), ::OpenAPI::toJsonValue(m_electorate));
    }
    if (m_is_general_election_isSet) {
        obj.insert(QString("isGeneralElection"), ::OpenAPI::toJsonValue(m_is_general_election));
    }
    if (m_is_notional_isSet) {
        obj.insert(QString("isNotional"), ::OpenAPI::toJsonValue(m_is_notional));
    }
    if (m_majority_isSet) {
        obj.insert(QString("majority"), ::OpenAPI::toJsonValue(m_majority));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_turnout_isSet) {
        obj.insert(QString("turnout"), ::OpenAPI::toJsonValue(m_turnout));
    }
    if (m_winning_party.isSet()) {
        obj.insert(QString("winningParty"), ::OpenAPI::toJsonValue(m_winning_party));
    }
    return obj;
}

QList<OAIElectionCandidate> OAIElectionResult::getCandidates() const {
    return m_candidates;
}
void OAIElectionResult::setCandidates(const QList<OAIElectionCandidate> &candidates) {
    m_candidates = candidates;
    m_candidates_isSet = true;
}

bool OAIElectionResult::is_candidates_Set() const{
    return m_candidates_isSet;
}

bool OAIElectionResult::is_candidates_Valid() const{
    return m_candidates_isValid;
}

QString OAIElectionResult::getConstituencyName() const {
    return m_constituency_name;
}
void OAIElectionResult::setConstituencyName(const QString &constituency_name) {
    m_constituency_name = constituency_name;
    m_constituency_name_isSet = true;
}

bool OAIElectionResult::is_constituency_name_Set() const{
    return m_constituency_name_isSet;
}

bool OAIElectionResult::is_constituency_name_Valid() const{
    return m_constituency_name_isValid;
}

QDateTime OAIElectionResult::getElectionDate() const {
    return m_election_date;
}
void OAIElectionResult::setElectionDate(const QDateTime &election_date) {
    m_election_date = election_date;
    m_election_date_isSet = true;
}

bool OAIElectionResult::is_election_date_Set() const{
    return m_election_date_isSet;
}

bool OAIElectionResult::is_election_date_Valid() const{
    return m_election_date_isValid;
}

qint32 OAIElectionResult::getElectionId() const {
    return m_election_id;
}
void OAIElectionResult::setElectionId(const qint32 &election_id) {
    m_election_id = election_id;
    m_election_id_isSet = true;
}

bool OAIElectionResult::is_election_id_Set() const{
    return m_election_id_isSet;
}

bool OAIElectionResult::is_election_id_Valid() const{
    return m_election_id_isValid;
}

QString OAIElectionResult::getElectionTitle() const {
    return m_election_title;
}
void OAIElectionResult::setElectionTitle(const QString &election_title) {
    m_election_title = election_title;
    m_election_title_isSet = true;
}

bool OAIElectionResult::is_election_title_Set() const{
    return m_election_title_isSet;
}

bool OAIElectionResult::is_election_title_Valid() const{
    return m_election_title_isValid;
}

qint32 OAIElectionResult::getElectorate() const {
    return m_electorate;
}
void OAIElectionResult::setElectorate(const qint32 &electorate) {
    m_electorate = electorate;
    m_electorate_isSet = true;
}

bool OAIElectionResult::is_electorate_Set() const{
    return m_electorate_isSet;
}

bool OAIElectionResult::is_electorate_Valid() const{
    return m_electorate_isValid;
}

bool OAIElectionResult::isIsGeneralElection() const {
    return m_is_general_election;
}
void OAIElectionResult::setIsGeneralElection(const bool &is_general_election) {
    m_is_general_election = is_general_election;
    m_is_general_election_isSet = true;
}

bool OAIElectionResult::is_is_general_election_Set() const{
    return m_is_general_election_isSet;
}

bool OAIElectionResult::is_is_general_election_Valid() const{
    return m_is_general_election_isValid;
}

bool OAIElectionResult::isIsNotional() const {
    return m_is_notional;
}
void OAIElectionResult::setIsNotional(const bool &is_notional) {
    m_is_notional = is_notional;
    m_is_notional_isSet = true;
}

bool OAIElectionResult::is_is_notional_Set() const{
    return m_is_notional_isSet;
}

bool OAIElectionResult::is_is_notional_Valid() const{
    return m_is_notional_isValid;
}

qint32 OAIElectionResult::getMajority() const {
    return m_majority;
}
void OAIElectionResult::setMajority(const qint32 &majority) {
    m_majority = majority;
    m_majority_isSet = true;
}

bool OAIElectionResult::is_majority_Set() const{
    return m_majority_isSet;
}

bool OAIElectionResult::is_majority_Valid() const{
    return m_majority_isValid;
}

QString OAIElectionResult::getResult() const {
    return m_result;
}
void OAIElectionResult::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIElectionResult::is_result_Set() const{
    return m_result_isSet;
}

bool OAIElectionResult::is_result_Valid() const{
    return m_result_isValid;
}

qint32 OAIElectionResult::getTurnout() const {
    return m_turnout;
}
void OAIElectionResult::setTurnout(const qint32 &turnout) {
    m_turnout = turnout;
    m_turnout_isSet = true;
}

bool OAIElectionResult::is_turnout_Set() const{
    return m_turnout_isSet;
}

bool OAIElectionResult::is_turnout_Valid() const{
    return m_turnout_isValid;
}

OAIParty OAIElectionResult::getWinningParty() const {
    return m_winning_party;
}
void OAIElectionResult::setWinningParty(const OAIParty &winning_party) {
    m_winning_party = winning_party;
    m_winning_party_isSet = true;
}

bool OAIElectionResult::is_winning_party_Set() const{
    return m_winning_party_isSet;
}

bool OAIElectionResult::is_winning_party_Valid() const{
    return m_winning_party_isValid;
}

bool OAIElectionResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_candidates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_constituency_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_electorate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_general_election_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_notional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_majority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_turnout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_winning_party.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElectionResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
