/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILocationApi_H
#define OAI_OAILocationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConstituencyItem.h"
#include "OAIConstituencyMembersServiceSearchResult.h"
#include "OAIConstituencyRepresentationListItem.h"
#include "OAIElectionResultItem.h"
#include "OAIElectionResultListItem.h"
#include "OAILocationItem.h"
#include "OAILocationType.h"
#include "OAIStringItem.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILocationApi : public QObject {
    Q_OBJECT

public:
    OAILocationApi(const int timeOut = 0);
    ~OAILocationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  location_type OAILocationType [required]
    * @param[in]  location_name QString [required]
    */
    virtual void apiLocationBrowseLocationTypeLocationNameGet(const OAILocationType &location_type, const QString &location_name);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  election_id qint32 [required]
    */
    virtual void apiLocationConstituencyIdElectionResultElectionIdGet(const qint32 &id, const qint32 &election_id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiLocationConstituencyIdElectionResultLatestGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiLocationConstituencyIdElectionResultsGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiLocationConstituencyIdGeometryGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiLocationConstituencyIdGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiLocationConstituencyIdRepresentationsGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiLocationConstituencyIdSynopsisGet(const qint32 &id);

    /**
    * @param[in]  search_text QString [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void apiLocationConstituencySearchGet(const ::OpenAPI::OptionalParam<QString> &search_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiLocationBrowseLocationTypeLocationNameGetCallback(OAIHttpRequestWorker *worker);
    void apiLocationConstituencyIdElectionResultElectionIdGetCallback(OAIHttpRequestWorker *worker);
    void apiLocationConstituencyIdElectionResultLatestGetCallback(OAIHttpRequestWorker *worker);
    void apiLocationConstituencyIdElectionResultsGetCallback(OAIHttpRequestWorker *worker);
    void apiLocationConstituencyIdGeometryGetCallback(OAIHttpRequestWorker *worker);
    void apiLocationConstituencyIdGetCallback(OAIHttpRequestWorker *worker);
    void apiLocationConstituencyIdRepresentationsGetCallback(OAIHttpRequestWorker *worker);
    void apiLocationConstituencyIdSynopsisGetCallback(OAIHttpRequestWorker *worker);
    void apiLocationConstituencySearchGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiLocationBrowseLocationTypeLocationNameGetSignal(OAILocationItem summary);
    void apiLocationConstituencyIdElectionResultElectionIdGetSignal(OAIElectionResultItem summary);
    void apiLocationConstituencyIdElectionResultLatestGetSignal(OAIElectionResultItem summary);
    void apiLocationConstituencyIdElectionResultsGetSignal(OAIElectionResultListItem summary);
    void apiLocationConstituencyIdGeometryGetSignal(OAIStringItem summary);
    void apiLocationConstituencyIdGetSignal(OAIConstituencyItem summary);
    void apiLocationConstituencyIdRepresentationsGetSignal(OAIConstituencyRepresentationListItem summary);
    void apiLocationConstituencyIdSynopsisGetSignal(OAIStringItem summary);
    void apiLocationConstituencySearchGetSignal(OAIConstituencyMembersServiceSearchResult summary);


    void apiLocationBrowseLocationTypeLocationNameGetSignalFull(OAIHttpRequestWorker *worker, OAILocationItem summary);
    void apiLocationConstituencyIdElectionResultElectionIdGetSignalFull(OAIHttpRequestWorker *worker, OAIElectionResultItem summary);
    void apiLocationConstituencyIdElectionResultLatestGetSignalFull(OAIHttpRequestWorker *worker, OAIElectionResultItem summary);
    void apiLocationConstituencyIdElectionResultsGetSignalFull(OAIHttpRequestWorker *worker, OAIElectionResultListItem summary);
    void apiLocationConstituencyIdGeometryGetSignalFull(OAIHttpRequestWorker *worker, OAIStringItem summary);
    void apiLocationConstituencyIdGetSignalFull(OAIHttpRequestWorker *worker, OAIConstituencyItem summary);
    void apiLocationConstituencyIdRepresentationsGetSignalFull(OAIHttpRequestWorker *worker, OAIConstituencyRepresentationListItem summary);
    void apiLocationConstituencyIdSynopsisGetSignalFull(OAIHttpRequestWorker *worker, OAIStringItem summary);
    void apiLocationConstituencySearchGetSignalFull(OAIHttpRequestWorker *worker, OAIConstituencyMembersServiceSearchResult summary);

    Q_DECL_DEPRECATED_X("Use apiLocationBrowseLocationTypeLocationNameGetSignalError() instead")
    void apiLocationBrowseLocationTypeLocationNameGetSignalE(OAILocationItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationBrowseLocationTypeLocationNameGetSignalError(OAILocationItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLocationConstituencyIdElectionResultElectionIdGetSignalError() instead")
    void apiLocationConstituencyIdElectionResultElectionIdGetSignalE(OAIElectionResultItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationConstituencyIdElectionResultElectionIdGetSignalError(OAIElectionResultItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLocationConstituencyIdElectionResultLatestGetSignalError() instead")
    void apiLocationConstituencyIdElectionResultLatestGetSignalE(OAIElectionResultItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationConstituencyIdElectionResultLatestGetSignalError(OAIElectionResultItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLocationConstituencyIdElectionResultsGetSignalError() instead")
    void apiLocationConstituencyIdElectionResultsGetSignalE(OAIElectionResultListItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationConstituencyIdElectionResultsGetSignalError(OAIElectionResultListItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLocationConstituencyIdGeometryGetSignalError() instead")
    void apiLocationConstituencyIdGeometryGetSignalE(OAIStringItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationConstituencyIdGeometryGetSignalError(OAIStringItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLocationConstituencyIdGetSignalError() instead")
    void apiLocationConstituencyIdGetSignalE(OAIConstituencyItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationConstituencyIdGetSignalError(OAIConstituencyItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLocationConstituencyIdRepresentationsGetSignalError() instead")
    void apiLocationConstituencyIdRepresentationsGetSignalE(OAIConstituencyRepresentationListItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationConstituencyIdRepresentationsGetSignalError(OAIConstituencyRepresentationListItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLocationConstituencyIdSynopsisGetSignalError() instead")
    void apiLocationConstituencyIdSynopsisGetSignalE(OAIStringItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationConstituencyIdSynopsisGetSignalError(OAIStringItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLocationConstituencySearchGetSignalError() instead")
    void apiLocationConstituencySearchGetSignalE(OAIConstituencyMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationConstituencySearchGetSignalError(OAIConstituencyMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiLocationBrowseLocationTypeLocationNameGetSignalErrorFull() instead")
    void apiLocationBrowseLocationTypeLocationNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationBrowseLocationTypeLocationNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLocationConstituencyIdElectionResultElectionIdGetSignalErrorFull() instead")
    void apiLocationConstituencyIdElectionResultElectionIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationConstituencyIdElectionResultElectionIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLocationConstituencyIdElectionResultLatestGetSignalErrorFull() instead")
    void apiLocationConstituencyIdElectionResultLatestGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationConstituencyIdElectionResultLatestGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLocationConstituencyIdElectionResultsGetSignalErrorFull() instead")
    void apiLocationConstituencyIdElectionResultsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationConstituencyIdElectionResultsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLocationConstituencyIdGeometryGetSignalErrorFull() instead")
    void apiLocationConstituencyIdGeometryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationConstituencyIdGeometryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLocationConstituencyIdGetSignalErrorFull() instead")
    void apiLocationConstituencyIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationConstituencyIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLocationConstituencyIdRepresentationsGetSignalErrorFull() instead")
    void apiLocationConstituencyIdRepresentationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationConstituencyIdRepresentationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLocationConstituencyIdSynopsisGetSignalErrorFull() instead")
    void apiLocationConstituencyIdSynopsisGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationConstituencyIdSynopsisGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLocationConstituencySearchGetSignalErrorFull() instead")
    void apiLocationConstituencySearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLocationConstituencySearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
