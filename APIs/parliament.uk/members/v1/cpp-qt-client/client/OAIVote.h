/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVote.h
 *
 * 
 */

#ifndef OAIVote_H
#define OAIVote_H

#include <QJsonObject>

#include "OAIHouse.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVote : public OAIObject {
public:
    OAIVote();
    OAIVote(QString json);
    ~OAIVote() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isActedAsTeller() const;
    void setActedAsTeller(const bool &acted_as_teller);
    bool is_acted_as_teller_Set() const;
    bool is_acted_as_teller_Valid() const;

    QDateTime getDate() const;
    void setDate(const QDateTime &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    qint32 getDivisionNumber() const;
    void setDivisionNumber(const qint32 &division_number);
    bool is_division_number_Set() const;
    bool is_division_number_Valid() const;

    OAIHouse getHouse() const;
    void setHouse(const OAIHouse &house);
    bool is_house_Set() const;
    bool is_house_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isInAffirmativeLobby() const;
    void setInAffirmativeLobby(const bool &in_affirmative_lobby);
    bool is_in_affirmative_lobby_Set() const;
    bool is_in_affirmative_lobby_Valid() const;

    qint32 getNumberAgainst() const;
    void setNumberAgainst(const qint32 &number_against);
    bool is_number_against_Set() const;
    bool is_number_against_Valid() const;

    qint32 getNumberInFavour() const;
    void setNumberInFavour(const qint32 &number_in_favour);
    bool is_number_in_favour_Set() const;
    bool is_number_in_favour_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_acted_as_teller;
    bool m_acted_as_teller_isSet;
    bool m_acted_as_teller_isValid;

    QDateTime m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    qint32 m_division_number;
    bool m_division_number_isSet;
    bool m_division_number_isValid;

    OAIHouse m_house;
    bool m_house_isSet;
    bool m_house_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_in_affirmative_lobby;
    bool m_in_affirmative_lobby_isSet;
    bool m_in_affirmative_lobby_isValid;

    qint32 m_number_against;
    bool m_number_against_isSet;
    bool m_number_against_isValid;

    qint32 m_number_in_favour;
    bool m_number_in_favour_isSet;
    bool m_number_in_favour_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVote)

#endif // OAIVote_H
