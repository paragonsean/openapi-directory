/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHouseMembership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHouseMembership::OAIHouseMembership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHouseMembership::OAIHouseMembership() {
    this->initializeModel();
}

OAIHouseMembership::~OAIHouseMembership() {}

void OAIHouseMembership::initializeModel() {

    m_house_isSet = false;
    m_house_isValid = false;

    m_membership_end_date_isSet = false;
    m_membership_end_date_isValid = false;

    m_membership_end_reason_isSet = false;
    m_membership_end_reason_isValid = false;

    m_membership_end_reason_id_isSet = false;
    m_membership_end_reason_id_isValid = false;

    m_membership_end_reason_notes_isSet = false;
    m_membership_end_reason_notes_isValid = false;

    m_membership_from_isSet = false;
    m_membership_from_isValid = false;

    m_membership_from_id_isSet = false;
    m_membership_from_id_isValid = false;

    m_membership_start_date_isSet = false;
    m_membership_start_date_isValid = false;

    m_membership_status_isSet = false;
    m_membership_status_isValid = false;
}

void OAIHouseMembership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHouseMembership::fromJsonObject(QJsonObject json) {

    m_house_isValid = ::OpenAPI::fromJsonValue(m_house, json[QString("house")]);
    m_house_isSet = !json[QString("house")].isNull() && m_house_isValid;

    m_membership_end_date_isValid = ::OpenAPI::fromJsonValue(m_membership_end_date, json[QString("membershipEndDate")]);
    m_membership_end_date_isSet = !json[QString("membershipEndDate")].isNull() && m_membership_end_date_isValid;

    m_membership_end_reason_isValid = ::OpenAPI::fromJsonValue(m_membership_end_reason, json[QString("membershipEndReason")]);
    m_membership_end_reason_isSet = !json[QString("membershipEndReason")].isNull() && m_membership_end_reason_isValid;

    m_membership_end_reason_id_isValid = ::OpenAPI::fromJsonValue(m_membership_end_reason_id, json[QString("membershipEndReasonId")]);
    m_membership_end_reason_id_isSet = !json[QString("membershipEndReasonId")].isNull() && m_membership_end_reason_id_isValid;

    m_membership_end_reason_notes_isValid = ::OpenAPI::fromJsonValue(m_membership_end_reason_notes, json[QString("membershipEndReasonNotes")]);
    m_membership_end_reason_notes_isSet = !json[QString("membershipEndReasonNotes")].isNull() && m_membership_end_reason_notes_isValid;

    m_membership_from_isValid = ::OpenAPI::fromJsonValue(m_membership_from, json[QString("membershipFrom")]);
    m_membership_from_isSet = !json[QString("membershipFrom")].isNull() && m_membership_from_isValid;

    m_membership_from_id_isValid = ::OpenAPI::fromJsonValue(m_membership_from_id, json[QString("membershipFromId")]);
    m_membership_from_id_isSet = !json[QString("membershipFromId")].isNull() && m_membership_from_id_isValid;

    m_membership_start_date_isValid = ::OpenAPI::fromJsonValue(m_membership_start_date, json[QString("membershipStartDate")]);
    m_membership_start_date_isSet = !json[QString("membershipStartDate")].isNull() && m_membership_start_date_isValid;

    m_membership_status_isValid = ::OpenAPI::fromJsonValue(m_membership_status, json[QString("membershipStatus")]);
    m_membership_status_isSet = !json[QString("membershipStatus")].isNull() && m_membership_status_isValid;
}

QString OAIHouseMembership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHouseMembership::asJsonObject() const {
    QJsonObject obj;
    if (m_house.isSet()) {
        obj.insert(QString("house"), ::OpenAPI::toJsonValue(m_house));
    }
    if (m_membership_end_date_isSet) {
        obj.insert(QString("membershipEndDate"), ::OpenAPI::toJsonValue(m_membership_end_date));
    }
    if (m_membership_end_reason_isSet) {
        obj.insert(QString("membershipEndReason"), ::OpenAPI::toJsonValue(m_membership_end_reason));
    }
    if (m_membership_end_reason_id_isSet) {
        obj.insert(QString("membershipEndReasonId"), ::OpenAPI::toJsonValue(m_membership_end_reason_id));
    }
    if (m_membership_end_reason_notes_isSet) {
        obj.insert(QString("membershipEndReasonNotes"), ::OpenAPI::toJsonValue(m_membership_end_reason_notes));
    }
    if (m_membership_from_isSet) {
        obj.insert(QString("membershipFrom"), ::OpenAPI::toJsonValue(m_membership_from));
    }
    if (m_membership_from_id_isSet) {
        obj.insert(QString("membershipFromId"), ::OpenAPI::toJsonValue(m_membership_from_id));
    }
    if (m_membership_start_date_isSet) {
        obj.insert(QString("membershipStartDate"), ::OpenAPI::toJsonValue(m_membership_start_date));
    }
    if (m_membership_status.isSet()) {
        obj.insert(QString("membershipStatus"), ::OpenAPI::toJsonValue(m_membership_status));
    }
    return obj;
}

OAIHouse OAIHouseMembership::getHouse() const {
    return m_house;
}
void OAIHouseMembership::setHouse(const OAIHouse &house) {
    m_house = house;
    m_house_isSet = true;
}

bool OAIHouseMembership::is_house_Set() const{
    return m_house_isSet;
}

bool OAIHouseMembership::is_house_Valid() const{
    return m_house_isValid;
}

QDateTime OAIHouseMembership::getMembershipEndDate() const {
    return m_membership_end_date;
}
void OAIHouseMembership::setMembershipEndDate(const QDateTime &membership_end_date) {
    m_membership_end_date = membership_end_date;
    m_membership_end_date_isSet = true;
}

bool OAIHouseMembership::is_membership_end_date_Set() const{
    return m_membership_end_date_isSet;
}

bool OAIHouseMembership::is_membership_end_date_Valid() const{
    return m_membership_end_date_isValid;
}

QString OAIHouseMembership::getMembershipEndReason() const {
    return m_membership_end_reason;
}
void OAIHouseMembership::setMembershipEndReason(const QString &membership_end_reason) {
    m_membership_end_reason = membership_end_reason;
    m_membership_end_reason_isSet = true;
}

bool OAIHouseMembership::is_membership_end_reason_Set() const{
    return m_membership_end_reason_isSet;
}

bool OAIHouseMembership::is_membership_end_reason_Valid() const{
    return m_membership_end_reason_isValid;
}

qint32 OAIHouseMembership::getMembershipEndReasonId() const {
    return m_membership_end_reason_id;
}
void OAIHouseMembership::setMembershipEndReasonId(const qint32 &membership_end_reason_id) {
    m_membership_end_reason_id = membership_end_reason_id;
    m_membership_end_reason_id_isSet = true;
}

bool OAIHouseMembership::is_membership_end_reason_id_Set() const{
    return m_membership_end_reason_id_isSet;
}

bool OAIHouseMembership::is_membership_end_reason_id_Valid() const{
    return m_membership_end_reason_id_isValid;
}

QString OAIHouseMembership::getMembershipEndReasonNotes() const {
    return m_membership_end_reason_notes;
}
void OAIHouseMembership::setMembershipEndReasonNotes(const QString &membership_end_reason_notes) {
    m_membership_end_reason_notes = membership_end_reason_notes;
    m_membership_end_reason_notes_isSet = true;
}

bool OAIHouseMembership::is_membership_end_reason_notes_Set() const{
    return m_membership_end_reason_notes_isSet;
}

bool OAIHouseMembership::is_membership_end_reason_notes_Valid() const{
    return m_membership_end_reason_notes_isValid;
}

QString OAIHouseMembership::getMembershipFrom() const {
    return m_membership_from;
}
void OAIHouseMembership::setMembershipFrom(const QString &membership_from) {
    m_membership_from = membership_from;
    m_membership_from_isSet = true;
}

bool OAIHouseMembership::is_membership_from_Set() const{
    return m_membership_from_isSet;
}

bool OAIHouseMembership::is_membership_from_Valid() const{
    return m_membership_from_isValid;
}

qint32 OAIHouseMembership::getMembershipFromId() const {
    return m_membership_from_id;
}
void OAIHouseMembership::setMembershipFromId(const qint32 &membership_from_id) {
    m_membership_from_id = membership_from_id;
    m_membership_from_id_isSet = true;
}

bool OAIHouseMembership::is_membership_from_id_Set() const{
    return m_membership_from_id_isSet;
}

bool OAIHouseMembership::is_membership_from_id_Valid() const{
    return m_membership_from_id_isValid;
}

QDateTime OAIHouseMembership::getMembershipStartDate() const {
    return m_membership_start_date;
}
void OAIHouseMembership::setMembershipStartDate(const QDateTime &membership_start_date) {
    m_membership_start_date = membership_start_date;
    m_membership_start_date_isSet = true;
}

bool OAIHouseMembership::is_membership_start_date_Set() const{
    return m_membership_start_date_isSet;
}

bool OAIHouseMembership::is_membership_start_date_Valid() const{
    return m_membership_start_date_isValid;
}

OAIHouseMembershipStatus OAIHouseMembership::getMembershipStatus() const {
    return m_membership_status;
}
void OAIHouseMembership::setMembershipStatus(const OAIHouseMembershipStatus &membership_status) {
    m_membership_status = membership_status;
    m_membership_status_isSet = true;
}

bool OAIHouseMembership::is_membership_status_Set() const{
    return m_membership_status_isSet;
}

bool OAIHouseMembership::is_membership_status_Valid() const{
    return m_membership_status_isValid;
}

bool OAIHouseMembership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_house.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_end_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_end_reason_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_end_reason_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_from_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHouseMembership::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
