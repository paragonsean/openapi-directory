/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisteredInterestCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisteredInterestCategory::OAIRegisteredInterestCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisteredInterestCategory::OAIRegisteredInterestCategory() {
    this->initializeModel();
}

OAIRegisteredInterestCategory::~OAIRegisteredInterestCategory() {}

void OAIRegisteredInterestCategory::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_interests_isSet = false;
    m_interests_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIRegisteredInterestCategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisteredInterestCategory::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interests_isValid = ::OpenAPI::fromJsonValue(m_interests, json[QString("interests")]);
    m_interests_isSet = !json[QString("interests")].isNull() && m_interests_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;
}

QString OAIRegisteredInterestCategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisteredInterestCategory::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interests.size() > 0) {
        obj.insert(QString("interests"), ::OpenAPI::toJsonValue(m_interests));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

qint32 OAIRegisteredInterestCategory::getId() const {
    return m_id;
}
void OAIRegisteredInterestCategory::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRegisteredInterestCategory::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRegisteredInterestCategory::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIRegisteredInterest> OAIRegisteredInterestCategory::getInterests() const {
    return m_interests;
}
void OAIRegisteredInterestCategory::setInterests(const QList<OAIRegisteredInterest> &interests) {
    m_interests = interests;
    m_interests_isSet = true;
}

bool OAIRegisteredInterestCategory::is_interests_Set() const{
    return m_interests_isSet;
}

bool OAIRegisteredInterestCategory::is_interests_Valid() const{
    return m_interests_isValid;
}

QString OAIRegisteredInterestCategory::getName() const {
    return m_name;
}
void OAIRegisteredInterestCategory::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRegisteredInterestCategory::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRegisteredInterestCategory::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIRegisteredInterestCategory::getSortOrder() const {
    return m_sort_order;
}
void OAIRegisteredInterestCategory::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIRegisteredInterestCategory::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIRegisteredInterestCategory::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIRegisteredInterestCategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisteredInterestCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
