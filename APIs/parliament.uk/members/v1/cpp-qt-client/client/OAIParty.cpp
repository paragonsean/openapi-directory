/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParty::OAIParty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParty::OAIParty() {
    this->initializeModel();
}

OAIParty::~OAIParty() {}

void OAIParty::initializeModel() {

    m_abbreviation_isSet = false;
    m_abbreviation_isValid = false;

    m_background_colour_isSet = false;
    m_background_colour_isValid = false;

    m_foreground_colour_isSet = false;
    m_foreground_colour_isValid = false;

    m_government_type_isSet = false;
    m_government_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_independent_party_isSet = false;
    m_is_independent_party_isValid = false;

    m_is_lords_main_party_isSet = false;
    m_is_lords_main_party_isValid = false;

    m_is_lords_spiritual_party_isSet = false;
    m_is_lords_spiritual_party_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIParty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParty::fromJsonObject(QJsonObject json) {

    m_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_abbreviation, json[QString("abbreviation")]);
    m_abbreviation_isSet = !json[QString("abbreviation")].isNull() && m_abbreviation_isValid;

    m_background_colour_isValid = ::OpenAPI::fromJsonValue(m_background_colour, json[QString("backgroundColour")]);
    m_background_colour_isSet = !json[QString("backgroundColour")].isNull() && m_background_colour_isValid;

    m_foreground_colour_isValid = ::OpenAPI::fromJsonValue(m_foreground_colour, json[QString("foregroundColour")]);
    m_foreground_colour_isSet = !json[QString("foregroundColour")].isNull() && m_foreground_colour_isValid;

    m_government_type_isValid = ::OpenAPI::fromJsonValue(m_government_type, json[QString("governmentType")]);
    m_government_type_isSet = !json[QString("governmentType")].isNull() && m_government_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_independent_party_isValid = ::OpenAPI::fromJsonValue(m_is_independent_party, json[QString("isIndependentParty")]);
    m_is_independent_party_isSet = !json[QString("isIndependentParty")].isNull() && m_is_independent_party_isValid;

    m_is_lords_main_party_isValid = ::OpenAPI::fromJsonValue(m_is_lords_main_party, json[QString("isLordsMainParty")]);
    m_is_lords_main_party_isSet = !json[QString("isLordsMainParty")].isNull() && m_is_lords_main_party_isValid;

    m_is_lords_spiritual_party_isValid = ::OpenAPI::fromJsonValue(m_is_lords_spiritual_party, json[QString("isLordsSpiritualParty")]);
    m_is_lords_spiritual_party_isSet = !json[QString("isLordsSpiritualParty")].isNull() && m_is_lords_spiritual_party_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIParty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParty::asJsonObject() const {
    QJsonObject obj;
    if (m_abbreviation_isSet) {
        obj.insert(QString("abbreviation"), ::OpenAPI::toJsonValue(m_abbreviation));
    }
    if (m_background_colour_isSet) {
        obj.insert(QString("backgroundColour"), ::OpenAPI::toJsonValue(m_background_colour));
    }
    if (m_foreground_colour_isSet) {
        obj.insert(QString("foregroundColour"), ::OpenAPI::toJsonValue(m_foreground_colour));
    }
    if (m_government_type.isSet()) {
        obj.insert(QString("governmentType"), ::OpenAPI::toJsonValue(m_government_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_independent_party_isSet) {
        obj.insert(QString("isIndependentParty"), ::OpenAPI::toJsonValue(m_is_independent_party));
    }
    if (m_is_lords_main_party_isSet) {
        obj.insert(QString("isLordsMainParty"), ::OpenAPI::toJsonValue(m_is_lords_main_party));
    }
    if (m_is_lords_spiritual_party_isSet) {
        obj.insert(QString("isLordsSpiritualParty"), ::OpenAPI::toJsonValue(m_is_lords_spiritual_party));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIParty::getAbbreviation() const {
    return m_abbreviation;
}
void OAIParty::setAbbreviation(const QString &abbreviation) {
    m_abbreviation = abbreviation;
    m_abbreviation_isSet = true;
}

bool OAIParty::is_abbreviation_Set() const{
    return m_abbreviation_isSet;
}

bool OAIParty::is_abbreviation_Valid() const{
    return m_abbreviation_isValid;
}

QString OAIParty::getBackgroundColour() const {
    return m_background_colour;
}
void OAIParty::setBackgroundColour(const QString &background_colour) {
    m_background_colour = background_colour;
    m_background_colour_isSet = true;
}

bool OAIParty::is_background_colour_Set() const{
    return m_background_colour_isSet;
}

bool OAIParty::is_background_colour_Valid() const{
    return m_background_colour_isValid;
}

QString OAIParty::getForegroundColour() const {
    return m_foreground_colour;
}
void OAIParty::setForegroundColour(const QString &foreground_colour) {
    m_foreground_colour = foreground_colour;
    m_foreground_colour_isSet = true;
}

bool OAIParty::is_foreground_colour_Set() const{
    return m_foreground_colour_isSet;
}

bool OAIParty::is_foreground_colour_Valid() const{
    return m_foreground_colour_isValid;
}

OAIGovernmentType OAIParty::getGovernmentType() const {
    return m_government_type;
}
void OAIParty::setGovernmentType(const OAIGovernmentType &government_type) {
    m_government_type = government_type;
    m_government_type_isSet = true;
}

bool OAIParty::is_government_type_Set() const{
    return m_government_type_isSet;
}

bool OAIParty::is_government_type_Valid() const{
    return m_government_type_isValid;
}

qint32 OAIParty::getId() const {
    return m_id;
}
void OAIParty::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIParty::is_id_Set() const{
    return m_id_isSet;
}

bool OAIParty::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIParty::isIsIndependentParty() const {
    return m_is_independent_party;
}
void OAIParty::setIsIndependentParty(const bool &is_independent_party) {
    m_is_independent_party = is_independent_party;
    m_is_independent_party_isSet = true;
}

bool OAIParty::is_is_independent_party_Set() const{
    return m_is_independent_party_isSet;
}

bool OAIParty::is_is_independent_party_Valid() const{
    return m_is_independent_party_isValid;
}

bool OAIParty::isIsLordsMainParty() const {
    return m_is_lords_main_party;
}
void OAIParty::setIsLordsMainParty(const bool &is_lords_main_party) {
    m_is_lords_main_party = is_lords_main_party;
    m_is_lords_main_party_isSet = true;
}

bool OAIParty::is_is_lords_main_party_Set() const{
    return m_is_lords_main_party_isSet;
}

bool OAIParty::is_is_lords_main_party_Valid() const{
    return m_is_lords_main_party_isValid;
}

bool OAIParty::isIsLordsSpiritualParty() const {
    return m_is_lords_spiritual_party;
}
void OAIParty::setIsLordsSpiritualParty(const bool &is_lords_spiritual_party) {
    m_is_lords_spiritual_party = is_lords_spiritual_party;
    m_is_lords_spiritual_party_isSet = true;
}

bool OAIParty::is_is_lords_spiritual_party_Set() const{
    return m_is_lords_spiritual_party_isSet;
}

bool OAIParty::is_is_lords_spiritual_party_Valid() const{
    return m_is_lords_spiritual_party_isValid;
}

QString OAIParty::getName() const {
    return m_name;
}
void OAIParty::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIParty::is_name_Set() const{
    return m_name_isSet;
}

bool OAIParty::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIParty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_colour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foreground_colour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_government_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_independent_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_lords_main_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_lords_spiritual_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
