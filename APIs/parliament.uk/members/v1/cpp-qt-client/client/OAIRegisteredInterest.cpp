/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisteredInterest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisteredInterest::OAIRegisteredInterest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisteredInterest::OAIRegisteredInterest() {
    this->initializeModel();
}

OAIRegisteredInterest::~OAIRegisteredInterest() {}

void OAIRegisteredInterest::initializeModel() {

    m_child_interests_isSet = false;
    m_child_interests_isValid = false;

    m_created_when_isSet = false;
    m_created_when_isValid = false;

    m_deleted_when_isSet = false;
    m_deleted_when_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interest_isSet = false;
    m_interest_isValid = false;

    m_is_correction_isSet = false;
    m_is_correction_isValid = false;

    m_last_amended_when_isSet = false;
    m_last_amended_when_isValid = false;
}

void OAIRegisteredInterest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisteredInterest::fromJsonObject(QJsonObject json) {

    m_child_interests_isValid = ::OpenAPI::fromJsonValue(m_child_interests, json[QString("childInterests")]);
    m_child_interests_isSet = !json[QString("childInterests")].isNull() && m_child_interests_isValid;

    m_created_when_isValid = ::OpenAPI::fromJsonValue(m_created_when, json[QString("createdWhen")]);
    m_created_when_isSet = !json[QString("createdWhen")].isNull() && m_created_when_isValid;

    m_deleted_when_isValid = ::OpenAPI::fromJsonValue(m_deleted_when, json[QString("deletedWhen")]);
    m_deleted_when_isSet = !json[QString("deletedWhen")].isNull() && m_deleted_when_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interest_isValid = ::OpenAPI::fromJsonValue(m_interest, json[QString("interest")]);
    m_interest_isSet = !json[QString("interest")].isNull() && m_interest_isValid;

    m_is_correction_isValid = ::OpenAPI::fromJsonValue(m_is_correction, json[QString("isCorrection")]);
    m_is_correction_isSet = !json[QString("isCorrection")].isNull() && m_is_correction_isValid;

    m_last_amended_when_isValid = ::OpenAPI::fromJsonValue(m_last_amended_when, json[QString("lastAmendedWhen")]);
    m_last_amended_when_isSet = !json[QString("lastAmendedWhen")].isNull() && m_last_amended_when_isValid;
}

QString OAIRegisteredInterest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisteredInterest::asJsonObject() const {
    QJsonObject obj;
    if (m_child_interests.size() > 0) {
        obj.insert(QString("childInterests"), ::OpenAPI::toJsonValue(m_child_interests));
    }
    if (m_created_when_isSet) {
        obj.insert(QString("createdWhen"), ::OpenAPI::toJsonValue(m_created_when));
    }
    if (m_deleted_when_isSet) {
        obj.insert(QString("deletedWhen"), ::OpenAPI::toJsonValue(m_deleted_when));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interest_isSet) {
        obj.insert(QString("interest"), ::OpenAPI::toJsonValue(m_interest));
    }
    if (m_is_correction_isSet) {
        obj.insert(QString("isCorrection"), ::OpenAPI::toJsonValue(m_is_correction));
    }
    if (m_last_amended_when_isSet) {
        obj.insert(QString("lastAmendedWhen"), ::OpenAPI::toJsonValue(m_last_amended_when));
    }
    return obj;
}

QList<OAIRegisteredInterest> OAIRegisteredInterest::getChildInterests() const {
    return m_child_interests;
}
void OAIRegisteredInterest::setChildInterests(const QList<OAIRegisteredInterest> &child_interests) {
    m_child_interests = child_interests;
    m_child_interests_isSet = true;
}

bool OAIRegisteredInterest::is_child_interests_Set() const{
    return m_child_interests_isSet;
}

bool OAIRegisteredInterest::is_child_interests_Valid() const{
    return m_child_interests_isValid;
}

QDateTime OAIRegisteredInterest::getCreatedWhen() const {
    return m_created_when;
}
void OAIRegisteredInterest::setCreatedWhen(const QDateTime &created_when) {
    m_created_when = created_when;
    m_created_when_isSet = true;
}

bool OAIRegisteredInterest::is_created_when_Set() const{
    return m_created_when_isSet;
}

bool OAIRegisteredInterest::is_created_when_Valid() const{
    return m_created_when_isValid;
}

QDateTime OAIRegisteredInterest::getDeletedWhen() const {
    return m_deleted_when;
}
void OAIRegisteredInterest::setDeletedWhen(const QDateTime &deleted_when) {
    m_deleted_when = deleted_when;
    m_deleted_when_isSet = true;
}

bool OAIRegisteredInterest::is_deleted_when_Set() const{
    return m_deleted_when_isSet;
}

bool OAIRegisteredInterest::is_deleted_when_Valid() const{
    return m_deleted_when_isValid;
}

qint32 OAIRegisteredInterest::getId() const {
    return m_id;
}
void OAIRegisteredInterest::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRegisteredInterest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRegisteredInterest::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRegisteredInterest::getInterest() const {
    return m_interest;
}
void OAIRegisteredInterest::setInterest(const QString &interest) {
    m_interest = interest;
    m_interest_isSet = true;
}

bool OAIRegisteredInterest::is_interest_Set() const{
    return m_interest_isSet;
}

bool OAIRegisteredInterest::is_interest_Valid() const{
    return m_interest_isValid;
}

bool OAIRegisteredInterest::isIsCorrection() const {
    return m_is_correction;
}
void OAIRegisteredInterest::setIsCorrection(const bool &is_correction) {
    m_is_correction = is_correction;
    m_is_correction_isSet = true;
}

bool OAIRegisteredInterest::is_is_correction_Set() const{
    return m_is_correction_isSet;
}

bool OAIRegisteredInterest::is_is_correction_Valid() const{
    return m_is_correction_isValid;
}

QDateTime OAIRegisteredInterest::getLastAmendedWhen() const {
    return m_last_amended_when;
}
void OAIRegisteredInterest::setLastAmendedWhen(const QDateTime &last_amended_when) {
    m_last_amended_when = last_amended_when;
    m_last_amended_when_isSet = true;
}

bool OAIRegisteredInterest::is_last_amended_when_Set() const{
    return m_last_amended_when_isSet;
}

bool OAIRegisteredInterest::is_last_amended_when_Valid() const{
    return m_last_amended_when_isValid;
}

bool OAIRegisteredInterest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_interests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_when_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_when_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_correction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_amended_when_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisteredInterest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
