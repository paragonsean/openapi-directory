/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWrittenQuestion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWrittenQuestion::OAIWrittenQuestion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWrittenQuestion::OAIWrittenQuestion() {
    this->initializeModel();
}

OAIWrittenQuestion::~OAIWrittenQuestion() {}

void OAIWrittenQuestion::initializeModel() {

    m_answer_is_correction_isSet = false;
    m_answer_is_correction_isValid = false;

    m_answer_is_holding_isSet = false;
    m_answer_is_holding_isValid = false;

    m_answer_text_isSet = false;
    m_answer_text_isValid = false;

    m_answering_body_isSet = false;
    m_answering_body_isValid = false;

    m_answering_body_id_isSet = false;
    m_answering_body_id_isValid = false;

    m_answering_member_isSet = false;
    m_answering_member_isValid = false;

    m_answering_member_id_isSet = false;
    m_answering_member_id_isValid = false;

    m_asking_member_id_isSet = false;
    m_asking_member_id_isValid = false;

    m_attachment_count_isSet = false;
    m_attachment_count_isValid = false;

    m_correcting_member_isSet = false;
    m_correcting_member_isValid = false;

    m_correcting_member_id_isSet = false;
    m_correcting_member_id_isValid = false;

    m_date_answered_isSet = false;
    m_date_answered_isValid = false;

    m_date_for_answer_isSet = false;
    m_date_for_answer_isValid = false;

    m_date_tabled_isSet = false;
    m_date_tabled_isValid = false;

    m_grouped_questions_isSet = false;
    m_grouped_questions_isValid = false;

    m_grouped_questions_dates_isSet = false;
    m_grouped_questions_dates_isValid = false;

    m_heading_isSet = false;
    m_heading_isValid = false;

    m_house_isSet = false;
    m_house_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_named_day_isSet = false;
    m_is_named_day_isValid = false;

    m_is_withdrawn_isSet = false;
    m_is_withdrawn_isValid = false;

    m_member_has_interest_isSet = false;
    m_member_has_interest_isValid = false;

    m_question_text_isSet = false;
    m_question_text_isValid = false;

    m_uin_isSet = false;
    m_uin_isValid = false;
}

void OAIWrittenQuestion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWrittenQuestion::fromJsonObject(QJsonObject json) {

    m_answer_is_correction_isValid = ::OpenAPI::fromJsonValue(m_answer_is_correction, json[QString("answerIsCorrection")]);
    m_answer_is_correction_isSet = !json[QString("answerIsCorrection")].isNull() && m_answer_is_correction_isValid;

    m_answer_is_holding_isValid = ::OpenAPI::fromJsonValue(m_answer_is_holding, json[QString("answerIsHolding")]);
    m_answer_is_holding_isSet = !json[QString("answerIsHolding")].isNull() && m_answer_is_holding_isValid;

    m_answer_text_isValid = ::OpenAPI::fromJsonValue(m_answer_text, json[QString("answerText")]);
    m_answer_text_isSet = !json[QString("answerText")].isNull() && m_answer_text_isValid;

    m_answering_body_isValid = ::OpenAPI::fromJsonValue(m_answering_body, json[QString("answeringBody")]);
    m_answering_body_isSet = !json[QString("answeringBody")].isNull() && m_answering_body_isValid;

    m_answering_body_id_isValid = ::OpenAPI::fromJsonValue(m_answering_body_id, json[QString("answeringBodyId")]);
    m_answering_body_id_isSet = !json[QString("answeringBodyId")].isNull() && m_answering_body_id_isValid;

    m_answering_member_isValid = ::OpenAPI::fromJsonValue(m_answering_member, json[QString("answeringMember")]);
    m_answering_member_isSet = !json[QString("answeringMember")].isNull() && m_answering_member_isValid;

    m_answering_member_id_isValid = ::OpenAPI::fromJsonValue(m_answering_member_id, json[QString("answeringMemberId")]);
    m_answering_member_id_isSet = !json[QString("answeringMemberId")].isNull() && m_answering_member_id_isValid;

    m_asking_member_id_isValid = ::OpenAPI::fromJsonValue(m_asking_member_id, json[QString("askingMemberId")]);
    m_asking_member_id_isSet = !json[QString("askingMemberId")].isNull() && m_asking_member_id_isValid;

    m_attachment_count_isValid = ::OpenAPI::fromJsonValue(m_attachment_count, json[QString("attachmentCount")]);
    m_attachment_count_isSet = !json[QString("attachmentCount")].isNull() && m_attachment_count_isValid;

    m_correcting_member_isValid = ::OpenAPI::fromJsonValue(m_correcting_member, json[QString("correctingMember")]);
    m_correcting_member_isSet = !json[QString("correctingMember")].isNull() && m_correcting_member_isValid;

    m_correcting_member_id_isValid = ::OpenAPI::fromJsonValue(m_correcting_member_id, json[QString("correctingMemberId")]);
    m_correcting_member_id_isSet = !json[QString("correctingMemberId")].isNull() && m_correcting_member_id_isValid;

    m_date_answered_isValid = ::OpenAPI::fromJsonValue(m_date_answered, json[QString("dateAnswered")]);
    m_date_answered_isSet = !json[QString("dateAnswered")].isNull() && m_date_answered_isValid;

    m_date_for_answer_isValid = ::OpenAPI::fromJsonValue(m_date_for_answer, json[QString("dateForAnswer")]);
    m_date_for_answer_isSet = !json[QString("dateForAnswer")].isNull() && m_date_for_answer_isValid;

    m_date_tabled_isValid = ::OpenAPI::fromJsonValue(m_date_tabled, json[QString("dateTabled")]);
    m_date_tabled_isSet = !json[QString("dateTabled")].isNull() && m_date_tabled_isValid;

    m_grouped_questions_isValid = ::OpenAPI::fromJsonValue(m_grouped_questions, json[QString("groupedQuestions")]);
    m_grouped_questions_isSet = !json[QString("groupedQuestions")].isNull() && m_grouped_questions_isValid;

    m_grouped_questions_dates_isValid = ::OpenAPI::fromJsonValue(m_grouped_questions_dates, json[QString("groupedQuestionsDates")]);
    m_grouped_questions_dates_isSet = !json[QString("groupedQuestionsDates")].isNull() && m_grouped_questions_dates_isValid;

    m_heading_isValid = ::OpenAPI::fromJsonValue(m_heading, json[QString("heading")]);
    m_heading_isSet = !json[QString("heading")].isNull() && m_heading_isValid;

    m_house_isValid = ::OpenAPI::fromJsonValue(m_house, json[QString("house")]);
    m_house_isSet = !json[QString("house")].isNull() && m_house_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_named_day_isValid = ::OpenAPI::fromJsonValue(m_is_named_day, json[QString("isNamedDay")]);
    m_is_named_day_isSet = !json[QString("isNamedDay")].isNull() && m_is_named_day_isValid;

    m_is_withdrawn_isValid = ::OpenAPI::fromJsonValue(m_is_withdrawn, json[QString("isWithdrawn")]);
    m_is_withdrawn_isSet = !json[QString("isWithdrawn")].isNull() && m_is_withdrawn_isValid;

    m_member_has_interest_isValid = ::OpenAPI::fromJsonValue(m_member_has_interest, json[QString("memberHasInterest")]);
    m_member_has_interest_isSet = !json[QString("memberHasInterest")].isNull() && m_member_has_interest_isValid;

    m_question_text_isValid = ::OpenAPI::fromJsonValue(m_question_text, json[QString("questionText")]);
    m_question_text_isSet = !json[QString("questionText")].isNull() && m_question_text_isValid;

    m_uin_isValid = ::OpenAPI::fromJsonValue(m_uin, json[QString("uin")]);
    m_uin_isSet = !json[QString("uin")].isNull() && m_uin_isValid;
}

QString OAIWrittenQuestion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWrittenQuestion::asJsonObject() const {
    QJsonObject obj;
    if (m_answer_is_correction_isSet) {
        obj.insert(QString("answerIsCorrection"), ::OpenAPI::toJsonValue(m_answer_is_correction));
    }
    if (m_answer_is_holding_isSet) {
        obj.insert(QString("answerIsHolding"), ::OpenAPI::toJsonValue(m_answer_is_holding));
    }
    if (m_answer_text_isSet) {
        obj.insert(QString("answerText"), ::OpenAPI::toJsonValue(m_answer_text));
    }
    if (m_answering_body.isSet()) {
        obj.insert(QString("answeringBody"), ::OpenAPI::toJsonValue(m_answering_body));
    }
    if (m_answering_body_id_isSet) {
        obj.insert(QString("answeringBodyId"), ::OpenAPI::toJsonValue(m_answering_body_id));
    }
    if (m_answering_member.isSet()) {
        obj.insert(QString("answeringMember"), ::OpenAPI::toJsonValue(m_answering_member));
    }
    if (m_answering_member_id_isSet) {
        obj.insert(QString("answeringMemberId"), ::OpenAPI::toJsonValue(m_answering_member_id));
    }
    if (m_asking_member_id_isSet) {
        obj.insert(QString("askingMemberId"), ::OpenAPI::toJsonValue(m_asking_member_id));
    }
    if (m_attachment_count_isSet) {
        obj.insert(QString("attachmentCount"), ::OpenAPI::toJsonValue(m_attachment_count));
    }
    if (m_correcting_member.isSet()) {
        obj.insert(QString("correctingMember"), ::OpenAPI::toJsonValue(m_correcting_member));
    }
    if (m_correcting_member_id_isSet) {
        obj.insert(QString("correctingMemberId"), ::OpenAPI::toJsonValue(m_correcting_member_id));
    }
    if (m_date_answered_isSet) {
        obj.insert(QString("dateAnswered"), ::OpenAPI::toJsonValue(m_date_answered));
    }
    if (m_date_for_answer_isSet) {
        obj.insert(QString("dateForAnswer"), ::OpenAPI::toJsonValue(m_date_for_answer));
    }
    if (m_date_tabled_isSet) {
        obj.insert(QString("dateTabled"), ::OpenAPI::toJsonValue(m_date_tabled));
    }
    if (m_grouped_questions.size() > 0) {
        obj.insert(QString("groupedQuestions"), ::OpenAPI::toJsonValue(m_grouped_questions));
    }
    if (m_grouped_questions_dates.size() > 0) {
        obj.insert(QString("groupedQuestionsDates"), ::OpenAPI::toJsonValue(m_grouped_questions_dates));
    }
    if (m_heading_isSet) {
        obj.insert(QString("heading"), ::OpenAPI::toJsonValue(m_heading));
    }
    if (m_house.isSet()) {
        obj.insert(QString("house"), ::OpenAPI::toJsonValue(m_house));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_named_day_isSet) {
        obj.insert(QString("isNamedDay"), ::OpenAPI::toJsonValue(m_is_named_day));
    }
    if (m_is_withdrawn_isSet) {
        obj.insert(QString("isWithdrawn"), ::OpenAPI::toJsonValue(m_is_withdrawn));
    }
    if (m_member_has_interest_isSet) {
        obj.insert(QString("memberHasInterest"), ::OpenAPI::toJsonValue(m_member_has_interest));
    }
    if (m_question_text_isSet) {
        obj.insert(QString("questionText"), ::OpenAPI::toJsonValue(m_question_text));
    }
    if (m_uin_isSet) {
        obj.insert(QString("uin"), ::OpenAPI::toJsonValue(m_uin));
    }
    return obj;
}

bool OAIWrittenQuestion::isAnswerIsCorrection() const {
    return m_answer_is_correction;
}
void OAIWrittenQuestion::setAnswerIsCorrection(const bool &answer_is_correction) {
    m_answer_is_correction = answer_is_correction;
    m_answer_is_correction_isSet = true;
}

bool OAIWrittenQuestion::is_answer_is_correction_Set() const{
    return m_answer_is_correction_isSet;
}

bool OAIWrittenQuestion::is_answer_is_correction_Valid() const{
    return m_answer_is_correction_isValid;
}

bool OAIWrittenQuestion::isAnswerIsHolding() const {
    return m_answer_is_holding;
}
void OAIWrittenQuestion::setAnswerIsHolding(const bool &answer_is_holding) {
    m_answer_is_holding = answer_is_holding;
    m_answer_is_holding_isSet = true;
}

bool OAIWrittenQuestion::is_answer_is_holding_Set() const{
    return m_answer_is_holding_isSet;
}

bool OAIWrittenQuestion::is_answer_is_holding_Valid() const{
    return m_answer_is_holding_isValid;
}

QString OAIWrittenQuestion::getAnswerText() const {
    return m_answer_text;
}
void OAIWrittenQuestion::setAnswerText(const QString &answer_text) {
    m_answer_text = answer_text;
    m_answer_text_isSet = true;
}

bool OAIWrittenQuestion::is_answer_text_Set() const{
    return m_answer_text_isSet;
}

bool OAIWrittenQuestion::is_answer_text_Valid() const{
    return m_answer_text_isValid;
}

OAIAnsweringBody OAIWrittenQuestion::getAnsweringBody() const {
    return m_answering_body;
}
void OAIWrittenQuestion::setAnsweringBody(const OAIAnsweringBody &answering_body) {
    m_answering_body = answering_body;
    m_answering_body_isSet = true;
}

bool OAIWrittenQuestion::is_answering_body_Set() const{
    return m_answering_body_isSet;
}

bool OAIWrittenQuestion::is_answering_body_Valid() const{
    return m_answering_body_isValid;
}

qint32 OAIWrittenQuestion::getAnsweringBodyId() const {
    return m_answering_body_id;
}
void OAIWrittenQuestion::setAnsweringBodyId(const qint32 &answering_body_id) {
    m_answering_body_id = answering_body_id;
    m_answering_body_id_isSet = true;
}

bool OAIWrittenQuestion::is_answering_body_id_Set() const{
    return m_answering_body_id_isSet;
}

bool OAIWrittenQuestion::is_answering_body_id_Valid() const{
    return m_answering_body_id_isValid;
}

OAIMember OAIWrittenQuestion::getAnsweringMember() const {
    return m_answering_member;
}
void OAIWrittenQuestion::setAnsweringMember(const OAIMember &answering_member) {
    m_answering_member = answering_member;
    m_answering_member_isSet = true;
}

bool OAIWrittenQuestion::is_answering_member_Set() const{
    return m_answering_member_isSet;
}

bool OAIWrittenQuestion::is_answering_member_Valid() const{
    return m_answering_member_isValid;
}

qint32 OAIWrittenQuestion::getAnsweringMemberId() const {
    return m_answering_member_id;
}
void OAIWrittenQuestion::setAnsweringMemberId(const qint32 &answering_member_id) {
    m_answering_member_id = answering_member_id;
    m_answering_member_id_isSet = true;
}

bool OAIWrittenQuestion::is_answering_member_id_Set() const{
    return m_answering_member_id_isSet;
}

bool OAIWrittenQuestion::is_answering_member_id_Valid() const{
    return m_answering_member_id_isValid;
}

qint32 OAIWrittenQuestion::getAskingMemberId() const {
    return m_asking_member_id;
}
void OAIWrittenQuestion::setAskingMemberId(const qint32 &asking_member_id) {
    m_asking_member_id = asking_member_id;
    m_asking_member_id_isSet = true;
}

bool OAIWrittenQuestion::is_asking_member_id_Set() const{
    return m_asking_member_id_isSet;
}

bool OAIWrittenQuestion::is_asking_member_id_Valid() const{
    return m_asking_member_id_isValid;
}

qint32 OAIWrittenQuestion::getAttachmentCount() const {
    return m_attachment_count;
}
void OAIWrittenQuestion::setAttachmentCount(const qint32 &attachment_count) {
    m_attachment_count = attachment_count;
    m_attachment_count_isSet = true;
}

bool OAIWrittenQuestion::is_attachment_count_Set() const{
    return m_attachment_count_isSet;
}

bool OAIWrittenQuestion::is_attachment_count_Valid() const{
    return m_attachment_count_isValid;
}

OAIMember OAIWrittenQuestion::getCorrectingMember() const {
    return m_correcting_member;
}
void OAIWrittenQuestion::setCorrectingMember(const OAIMember &correcting_member) {
    m_correcting_member = correcting_member;
    m_correcting_member_isSet = true;
}

bool OAIWrittenQuestion::is_correcting_member_Set() const{
    return m_correcting_member_isSet;
}

bool OAIWrittenQuestion::is_correcting_member_Valid() const{
    return m_correcting_member_isValid;
}

qint32 OAIWrittenQuestion::getCorrectingMemberId() const {
    return m_correcting_member_id;
}
void OAIWrittenQuestion::setCorrectingMemberId(const qint32 &correcting_member_id) {
    m_correcting_member_id = correcting_member_id;
    m_correcting_member_id_isSet = true;
}

bool OAIWrittenQuestion::is_correcting_member_id_Set() const{
    return m_correcting_member_id_isSet;
}

bool OAIWrittenQuestion::is_correcting_member_id_Valid() const{
    return m_correcting_member_id_isValid;
}

QDateTime OAIWrittenQuestion::getDateAnswered() const {
    return m_date_answered;
}
void OAIWrittenQuestion::setDateAnswered(const QDateTime &date_answered) {
    m_date_answered = date_answered;
    m_date_answered_isSet = true;
}

bool OAIWrittenQuestion::is_date_answered_Set() const{
    return m_date_answered_isSet;
}

bool OAIWrittenQuestion::is_date_answered_Valid() const{
    return m_date_answered_isValid;
}

QDateTime OAIWrittenQuestion::getDateForAnswer() const {
    return m_date_for_answer;
}
void OAIWrittenQuestion::setDateForAnswer(const QDateTime &date_for_answer) {
    m_date_for_answer = date_for_answer;
    m_date_for_answer_isSet = true;
}

bool OAIWrittenQuestion::is_date_for_answer_Set() const{
    return m_date_for_answer_isSet;
}

bool OAIWrittenQuestion::is_date_for_answer_Valid() const{
    return m_date_for_answer_isValid;
}

QDateTime OAIWrittenQuestion::getDateTabled() const {
    return m_date_tabled;
}
void OAIWrittenQuestion::setDateTabled(const QDateTime &date_tabled) {
    m_date_tabled = date_tabled;
    m_date_tabled_isSet = true;
}

bool OAIWrittenQuestion::is_date_tabled_Set() const{
    return m_date_tabled_isSet;
}

bool OAIWrittenQuestion::is_date_tabled_Valid() const{
    return m_date_tabled_isValid;
}

QList<QString> OAIWrittenQuestion::getGroupedQuestions() const {
    return m_grouped_questions;
}
void OAIWrittenQuestion::setGroupedQuestions(const QList<QString> &grouped_questions) {
    m_grouped_questions = grouped_questions;
    m_grouped_questions_isSet = true;
}

bool OAIWrittenQuestion::is_grouped_questions_Set() const{
    return m_grouped_questions_isSet;
}

bool OAIWrittenQuestion::is_grouped_questions_Valid() const{
    return m_grouped_questions_isValid;
}

QList<OAIGroupedQuestion> OAIWrittenQuestion::getGroupedQuestionsDates() const {
    return m_grouped_questions_dates;
}
void OAIWrittenQuestion::setGroupedQuestionsDates(const QList<OAIGroupedQuestion> &grouped_questions_dates) {
    m_grouped_questions_dates = grouped_questions_dates;
    m_grouped_questions_dates_isSet = true;
}

bool OAIWrittenQuestion::is_grouped_questions_dates_Set() const{
    return m_grouped_questions_dates_isSet;
}

bool OAIWrittenQuestion::is_grouped_questions_dates_Valid() const{
    return m_grouped_questions_dates_isValid;
}

QString OAIWrittenQuestion::getHeading() const {
    return m_heading;
}
void OAIWrittenQuestion::setHeading(const QString &heading) {
    m_heading = heading;
    m_heading_isSet = true;
}

bool OAIWrittenQuestion::is_heading_Set() const{
    return m_heading_isSet;
}

bool OAIWrittenQuestion::is_heading_Valid() const{
    return m_heading_isValid;
}

OAIHouse OAIWrittenQuestion::getHouse() const {
    return m_house;
}
void OAIWrittenQuestion::setHouse(const OAIHouse &house) {
    m_house = house;
    m_house_isSet = true;
}

bool OAIWrittenQuestion::is_house_Set() const{
    return m_house_isSet;
}

bool OAIWrittenQuestion::is_house_Valid() const{
    return m_house_isValid;
}

qint32 OAIWrittenQuestion::getId() const {
    return m_id;
}
void OAIWrittenQuestion::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWrittenQuestion::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWrittenQuestion::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIWrittenQuestion::isIsNamedDay() const {
    return m_is_named_day;
}
void OAIWrittenQuestion::setIsNamedDay(const bool &is_named_day) {
    m_is_named_day = is_named_day;
    m_is_named_day_isSet = true;
}

bool OAIWrittenQuestion::is_is_named_day_Set() const{
    return m_is_named_day_isSet;
}

bool OAIWrittenQuestion::is_is_named_day_Valid() const{
    return m_is_named_day_isValid;
}

bool OAIWrittenQuestion::isIsWithdrawn() const {
    return m_is_withdrawn;
}
void OAIWrittenQuestion::setIsWithdrawn(const bool &is_withdrawn) {
    m_is_withdrawn = is_withdrawn;
    m_is_withdrawn_isSet = true;
}

bool OAIWrittenQuestion::is_is_withdrawn_Set() const{
    return m_is_withdrawn_isSet;
}

bool OAIWrittenQuestion::is_is_withdrawn_Valid() const{
    return m_is_withdrawn_isValid;
}

bool OAIWrittenQuestion::isMemberHasInterest() const {
    return m_member_has_interest;
}
void OAIWrittenQuestion::setMemberHasInterest(const bool &member_has_interest) {
    m_member_has_interest = member_has_interest;
    m_member_has_interest_isSet = true;
}

bool OAIWrittenQuestion::is_member_has_interest_Set() const{
    return m_member_has_interest_isSet;
}

bool OAIWrittenQuestion::is_member_has_interest_Valid() const{
    return m_member_has_interest_isValid;
}

QString OAIWrittenQuestion::getQuestionText() const {
    return m_question_text;
}
void OAIWrittenQuestion::setQuestionText(const QString &question_text) {
    m_question_text = question_text;
    m_question_text_isSet = true;
}

bool OAIWrittenQuestion::is_question_text_Set() const{
    return m_question_text_isSet;
}

bool OAIWrittenQuestion::is_question_text_Valid() const{
    return m_question_text_isValid;
}

QString OAIWrittenQuestion::getUin() const {
    return m_uin;
}
void OAIWrittenQuestion::setUin(const QString &uin) {
    m_uin = uin;
    m_uin_isSet = true;
}

bool OAIWrittenQuestion::is_uin_Set() const{
    return m_uin_isSet;
}

bool OAIWrittenQuestion::is_uin_Valid() const{
    return m_uin_isValid;
}

bool OAIWrittenQuestion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answer_is_correction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_is_holding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_body.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_body_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asking_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correcting_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_correcting_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_answered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_for_answer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_tabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grouped_questions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_grouped_questions_dates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_heading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_named_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_withdrawn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_has_interest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWrittenQuestion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
