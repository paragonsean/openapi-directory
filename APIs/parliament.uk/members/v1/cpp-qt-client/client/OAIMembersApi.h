/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMembersApi_H
#define OAI_OAIMembersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBiographyExperienceListItem.h"
#include "OAIContactInformationListItem.h"
#include "OAIDebateContributionMembersServiceSearchResult.h"
#include "OAIEarlyDayMotionMembersServiceSearchResult.h"
#include "OAIElectionResultItem.h"
#include "OAIHouse.h"
#include "OAIMemberBiographyItem.h"
#include "OAIMemberFocusListItem.h"
#include "OAIMemberHistoryItem.h"
#include "OAIMemberItem.h"
#include "OAIMemberMembersServiceSearchResult.h"
#include "OAIPortraitCropEnum.h"
#include "OAIRegisteredInterestCategoryListItem.h"
#include "OAIStaffListItem.h"
#include "OAIStringItem.h"
#include "OAIVoteMembersServiceSearchResult.h"
#include "OAIWrittenQuestionMembersServiceSearchResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMembersApi : public QObject {
    Q_OBJECT

public:
    OAIMembersApi(const int timeOut = 0);
    ~OAIMembersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ids QList<qint32> [optional]
    */
    virtual void apiMembersHistoryGet(const ::OpenAPI::OptionalParam<QList<qint32>> &ids = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiMembersIdBiographyGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiMembersIdContactGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  page qint32 [optional]
    */
    virtual void apiMembersIdContributionSummaryGet(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  page qint32 [optional]
    */
    virtual void apiMembersIdEdmsGet(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiMembersIdExperienceGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiMembersIdFocusGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  details_for_date QDateTime [optional]
    */
    virtual void apiMembersIdGet(const qint32 &id, const ::OpenAPI::OptionalParam<QDateTime> &details_for_date = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiMembersIdLatestElectionResultGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  crop_type OAIPortraitCropEnum [optional]
    * @param[in]  web_version bool [optional]
    */
    virtual void apiMembersIdPortraitGet(const qint32 &id, const ::OpenAPI::OptionalParam<OAIPortraitCropEnum> &crop_type = ::OpenAPI::OptionalParam<OAIPortraitCropEnum>(), const ::OpenAPI::OptionalParam<bool> &web_version = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiMembersIdPortraitUrlGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  house OAIHouse [optional]
    */
    virtual void apiMembersIdRegisteredInterestsGet(const qint32 &id, const ::OpenAPI::OptionalParam<OAIHouse> &house = ::OpenAPI::OptionalParam<OAIHouse>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiMembersIdStaffGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiMembersIdSynopsisGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiMembersIdThumbnailGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiMembersIdThumbnailUrlGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  house OAIHouse [required]
    * @param[in]  page qint32 [optional]
    */
    virtual void apiMembersIdVotingGet(const qint32 &id, const OAIHouse &house, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  page qint32 [optional]
    */
    virtual void apiMembersIdWrittenQuestionsGet(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  post_title QString [optional]
    * @param[in]  party_id qint32 [optional]
    * @param[in]  house OAIHouse [optional]
    * @param[in]  constituency_id qint32 [optional]
    * @param[in]  name_starts_with QString [optional]
    * @param[in]  gender QString [optional]
    * @param[in]  membership_started_since QDateTime [optional]
    * @param[in]  membership_ended_membership_ended_since QDateTime [optional]
    * @param[in]  membership_ended_membership_end_reason_ids QList<qint32> [optional]
    * @param[in]  membership_in_date_range_was_member_on_or_after QDateTime [optional]
    * @param[in]  membership_in_date_range_was_member_on_or_before QDateTime [optional]
    * @param[in]  membership_in_date_range_was_member_of_house OAIHouse [optional]
    * @param[in]  is_eligible bool [optional]
    * @param[in]  is_current_member bool [optional]
    * @param[in]  policy_interest_id qint32 [optional]
    * @param[in]  experience QString [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void apiMembersSearchGet(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &post_title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &party_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIHouse> &house = ::OpenAPI::OptionalParam<OAIHouse>(), const ::OpenAPI::OptionalParam<qint32> &constituency_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_starts_with = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gender = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &membership_started_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &membership_ended_membership_ended_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<qint32>> &membership_ended_membership_end_reason_ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QDateTime> &membership_in_date_range_was_member_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &membership_in_date_range_was_member_on_or_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAIHouse> &membership_in_date_range_was_member_of_house = ::OpenAPI::OptionalParam<OAIHouse>(), const ::OpenAPI::OptionalParam<bool> &is_eligible = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_current_member = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &policy_interest_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &experience = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name QString [optional]
    * @param[in]  date_to_search_for QDateTime [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void apiMembersSearchHistoricalGet(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_to_search_for = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiMembersHistoryGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersIdBiographyGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersIdContactGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersIdContributionSummaryGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersIdEdmsGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersIdExperienceGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersIdFocusGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersIdGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersIdLatestElectionResultGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersIdPortraitGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersIdPortraitUrlGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersIdRegisteredInterestsGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersIdStaffGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersIdSynopsisGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersIdThumbnailGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersIdThumbnailUrlGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersIdVotingGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersIdWrittenQuestionsGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersSearchGetCallback(OAIHttpRequestWorker *worker);
    void apiMembersSearchHistoricalGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiMembersHistoryGetSignal(QList<OAIMemberHistoryItem> summary);
    void apiMembersIdBiographyGetSignal(OAIMemberBiographyItem summary);
    void apiMembersIdContactGetSignal(OAIContactInformationListItem summary);
    void apiMembersIdContributionSummaryGetSignal(OAIDebateContributionMembersServiceSearchResult summary);
    void apiMembersIdEdmsGetSignal(OAIEarlyDayMotionMembersServiceSearchResult summary);
    void apiMembersIdExperienceGetSignal(OAIBiographyExperienceListItem summary);
    void apiMembersIdFocusGetSignal(OAIMemberFocusListItem summary);
    void apiMembersIdGetSignal(OAIMemberItem summary);
    void apiMembersIdLatestElectionResultGetSignal(OAIElectionResultItem summary);
    void apiMembersIdPortraitGetSignal();
    void apiMembersIdPortraitUrlGetSignal(OAIStringItem summary);
    void apiMembersIdRegisteredInterestsGetSignal(OAIRegisteredInterestCategoryListItem summary);
    void apiMembersIdStaffGetSignal(OAIStaffListItem summary);
    void apiMembersIdSynopsisGetSignal(OAIStringItem summary);
    void apiMembersIdThumbnailGetSignal();
    void apiMembersIdThumbnailUrlGetSignal(OAIStringItem summary);
    void apiMembersIdVotingGetSignal(OAIVoteMembersServiceSearchResult summary);
    void apiMembersIdWrittenQuestionsGetSignal(OAIWrittenQuestionMembersServiceSearchResult summary);
    void apiMembersSearchGetSignal(OAIMemberMembersServiceSearchResult summary);
    void apiMembersSearchHistoricalGetSignal(OAIMemberMembersServiceSearchResult summary);


    void apiMembersHistoryGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMemberHistoryItem> summary);
    void apiMembersIdBiographyGetSignalFull(OAIHttpRequestWorker *worker, OAIMemberBiographyItem summary);
    void apiMembersIdContactGetSignalFull(OAIHttpRequestWorker *worker, OAIContactInformationListItem summary);
    void apiMembersIdContributionSummaryGetSignalFull(OAIHttpRequestWorker *worker, OAIDebateContributionMembersServiceSearchResult summary);
    void apiMembersIdEdmsGetSignalFull(OAIHttpRequestWorker *worker, OAIEarlyDayMotionMembersServiceSearchResult summary);
    void apiMembersIdExperienceGetSignalFull(OAIHttpRequestWorker *worker, OAIBiographyExperienceListItem summary);
    void apiMembersIdFocusGetSignalFull(OAIHttpRequestWorker *worker, OAIMemberFocusListItem summary);
    void apiMembersIdGetSignalFull(OAIHttpRequestWorker *worker, OAIMemberItem summary);
    void apiMembersIdLatestElectionResultGetSignalFull(OAIHttpRequestWorker *worker, OAIElectionResultItem summary);
    void apiMembersIdPortraitGetSignalFull(OAIHttpRequestWorker *worker);
    void apiMembersIdPortraitUrlGetSignalFull(OAIHttpRequestWorker *worker, OAIStringItem summary);
    void apiMembersIdRegisteredInterestsGetSignalFull(OAIHttpRequestWorker *worker, OAIRegisteredInterestCategoryListItem summary);
    void apiMembersIdStaffGetSignalFull(OAIHttpRequestWorker *worker, OAIStaffListItem summary);
    void apiMembersIdSynopsisGetSignalFull(OAIHttpRequestWorker *worker, OAIStringItem summary);
    void apiMembersIdThumbnailGetSignalFull(OAIHttpRequestWorker *worker);
    void apiMembersIdThumbnailUrlGetSignalFull(OAIHttpRequestWorker *worker, OAIStringItem summary);
    void apiMembersIdVotingGetSignalFull(OAIHttpRequestWorker *worker, OAIVoteMembersServiceSearchResult summary);
    void apiMembersIdWrittenQuestionsGetSignalFull(OAIHttpRequestWorker *worker, OAIWrittenQuestionMembersServiceSearchResult summary);
    void apiMembersSearchGetSignalFull(OAIHttpRequestWorker *worker, OAIMemberMembersServiceSearchResult summary);
    void apiMembersSearchHistoricalGetSignalFull(OAIHttpRequestWorker *worker, OAIMemberMembersServiceSearchResult summary);

    Q_DECL_DEPRECATED_X("Use apiMembersHistoryGetSignalError() instead")
    void apiMembersHistoryGetSignalE(QList<OAIMemberHistoryItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersHistoryGetSignalError(QList<OAIMemberHistoryItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdBiographyGetSignalError() instead")
    void apiMembersIdBiographyGetSignalE(OAIMemberBiographyItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdBiographyGetSignalError(OAIMemberBiographyItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdContactGetSignalError() instead")
    void apiMembersIdContactGetSignalE(OAIContactInformationListItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdContactGetSignalError(OAIContactInformationListItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdContributionSummaryGetSignalError() instead")
    void apiMembersIdContributionSummaryGetSignalE(OAIDebateContributionMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdContributionSummaryGetSignalError(OAIDebateContributionMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdEdmsGetSignalError() instead")
    void apiMembersIdEdmsGetSignalE(OAIEarlyDayMotionMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdEdmsGetSignalError(OAIEarlyDayMotionMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdExperienceGetSignalError() instead")
    void apiMembersIdExperienceGetSignalE(OAIBiographyExperienceListItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdExperienceGetSignalError(OAIBiographyExperienceListItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdFocusGetSignalError() instead")
    void apiMembersIdFocusGetSignalE(OAIMemberFocusListItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdFocusGetSignalError(OAIMemberFocusListItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdGetSignalError() instead")
    void apiMembersIdGetSignalE(OAIMemberItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdGetSignalError(OAIMemberItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdLatestElectionResultGetSignalError() instead")
    void apiMembersIdLatestElectionResultGetSignalE(OAIElectionResultItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdLatestElectionResultGetSignalError(OAIElectionResultItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdPortraitGetSignalError() instead")
    void apiMembersIdPortraitGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdPortraitGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdPortraitUrlGetSignalError() instead")
    void apiMembersIdPortraitUrlGetSignalE(OAIStringItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdPortraitUrlGetSignalError(OAIStringItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdRegisteredInterestsGetSignalError() instead")
    void apiMembersIdRegisteredInterestsGetSignalE(OAIRegisteredInterestCategoryListItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdRegisteredInterestsGetSignalError(OAIRegisteredInterestCategoryListItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdStaffGetSignalError() instead")
    void apiMembersIdStaffGetSignalE(OAIStaffListItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdStaffGetSignalError(OAIStaffListItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdSynopsisGetSignalError() instead")
    void apiMembersIdSynopsisGetSignalE(OAIStringItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdSynopsisGetSignalError(OAIStringItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdThumbnailGetSignalError() instead")
    void apiMembersIdThumbnailGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdThumbnailGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdThumbnailUrlGetSignalError() instead")
    void apiMembersIdThumbnailUrlGetSignalE(OAIStringItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdThumbnailUrlGetSignalError(OAIStringItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdVotingGetSignalError() instead")
    void apiMembersIdVotingGetSignalE(OAIVoteMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdVotingGetSignalError(OAIVoteMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdWrittenQuestionsGetSignalError() instead")
    void apiMembersIdWrittenQuestionsGetSignalE(OAIWrittenQuestionMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdWrittenQuestionsGetSignalError(OAIWrittenQuestionMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersSearchGetSignalError() instead")
    void apiMembersSearchGetSignalE(OAIMemberMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersSearchGetSignalError(OAIMemberMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersSearchHistoricalGetSignalError() instead")
    void apiMembersSearchHistoricalGetSignalE(OAIMemberMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersSearchHistoricalGetSignalError(OAIMemberMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiMembersHistoryGetSignalErrorFull() instead")
    void apiMembersHistoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersHistoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdBiographyGetSignalErrorFull() instead")
    void apiMembersIdBiographyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdBiographyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdContactGetSignalErrorFull() instead")
    void apiMembersIdContactGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdContactGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdContributionSummaryGetSignalErrorFull() instead")
    void apiMembersIdContributionSummaryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdContributionSummaryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdEdmsGetSignalErrorFull() instead")
    void apiMembersIdEdmsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdEdmsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdExperienceGetSignalErrorFull() instead")
    void apiMembersIdExperienceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdExperienceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdFocusGetSignalErrorFull() instead")
    void apiMembersIdFocusGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdFocusGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdGetSignalErrorFull() instead")
    void apiMembersIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdLatestElectionResultGetSignalErrorFull() instead")
    void apiMembersIdLatestElectionResultGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdLatestElectionResultGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdPortraitGetSignalErrorFull() instead")
    void apiMembersIdPortraitGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdPortraitGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdPortraitUrlGetSignalErrorFull() instead")
    void apiMembersIdPortraitUrlGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdPortraitUrlGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdRegisteredInterestsGetSignalErrorFull() instead")
    void apiMembersIdRegisteredInterestsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdRegisteredInterestsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdStaffGetSignalErrorFull() instead")
    void apiMembersIdStaffGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdStaffGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdSynopsisGetSignalErrorFull() instead")
    void apiMembersIdSynopsisGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdSynopsisGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdThumbnailGetSignalErrorFull() instead")
    void apiMembersIdThumbnailGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdThumbnailGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdThumbnailUrlGetSignalErrorFull() instead")
    void apiMembersIdThumbnailUrlGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdThumbnailUrlGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdVotingGetSignalErrorFull() instead")
    void apiMembersIdVotingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdVotingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersIdWrittenQuestionsGetSignalErrorFull() instead")
    void apiMembersIdWrittenQuestionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersIdWrittenQuestionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersSearchGetSignalErrorFull() instead")
    void apiMembersSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMembersSearchHistoricalGetSignalErrorFull() instead")
    void apiMembersSearchHistoricalGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMembersSearchHistoricalGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
