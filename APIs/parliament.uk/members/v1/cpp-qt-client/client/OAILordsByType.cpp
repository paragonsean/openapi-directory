/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILordsByType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILordsByType::OAILordsByType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILordsByType::OAILordsByType() {
    this->initializeModel();
}

OAILordsByType::~OAILordsByType() {}

void OAILordsByType::initializeModel() {

    m_bishop_isSet = false;
    m_bishop_isValid = false;

    m_hereditary_isSet = false;
    m_hereditary_isValid = false;

    m_life_isSet = false;
    m_life_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAILordsByType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILordsByType::fromJsonObject(QJsonObject json) {

    m_bishop_isValid = ::OpenAPI::fromJsonValue(m_bishop, json[QString("bishop")]);
    m_bishop_isSet = !json[QString("bishop")].isNull() && m_bishop_isValid;

    m_hereditary_isValid = ::OpenAPI::fromJsonValue(m_hereditary, json[QString("hereditary")]);
    m_hereditary_isSet = !json[QString("hereditary")].isNull() && m_hereditary_isValid;

    m_life_isValid = ::OpenAPI::fromJsonValue(m_life, json[QString("life")]);
    m_life_isSet = !json[QString("life")].isNull() && m_life_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAILordsByType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILordsByType::asJsonObject() const {
    QJsonObject obj;
    if (m_bishop_isSet) {
        obj.insert(QString("bishop"), ::OpenAPI::toJsonValue(m_bishop));
    }
    if (m_hereditary_isSet) {
        obj.insert(QString("hereditary"), ::OpenAPI::toJsonValue(m_hereditary));
    }
    if (m_life_isSet) {
        obj.insert(QString("life"), ::OpenAPI::toJsonValue(m_life));
    }
    if (m_party.isSet()) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAILordsByType::getBishop() const {
    return m_bishop;
}
void OAILordsByType::setBishop(const qint32 &bishop) {
    m_bishop = bishop;
    m_bishop_isSet = true;
}

bool OAILordsByType::is_bishop_Set() const{
    return m_bishop_isSet;
}

bool OAILordsByType::is_bishop_Valid() const{
    return m_bishop_isValid;
}

qint32 OAILordsByType::getHereditary() const {
    return m_hereditary;
}
void OAILordsByType::setHereditary(const qint32 &hereditary) {
    m_hereditary = hereditary;
    m_hereditary_isSet = true;
}

bool OAILordsByType::is_hereditary_Set() const{
    return m_hereditary_isSet;
}

bool OAILordsByType::is_hereditary_Valid() const{
    return m_hereditary_isValid;
}

qint32 OAILordsByType::getLife() const {
    return m_life;
}
void OAILordsByType::setLife(const qint32 &life) {
    m_life = life;
    m_life_isSet = true;
}

bool OAILordsByType::is_life_Set() const{
    return m_life_isSet;
}

bool OAILordsByType::is_life_Valid() const{
    return m_life_isValid;
}

OAIParty OAILordsByType::getParty() const {
    return m_party;
}
void OAILordsByType::setParty(const OAIParty &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAILordsByType::is_party_Set() const{
    return m_party_isSet;
}

bool OAILordsByType::is_party_Valid() const{
    return m_party_isValid;
}

qint32 OAILordsByType::getTotal() const {
    return m_total;
}
void OAILordsByType::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAILordsByType::is_total_Set() const{
    return m_total_isSet;
}

bool OAILordsByType::is_total_Valid() const{
    return m_total_isValid;
}

bool OAILordsByType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bishop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hereditary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_life_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILordsByType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
