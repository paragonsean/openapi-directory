/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPartiesApi_H
#define OAI_OAIPartiesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHouse.h"
#include "OAILordsByTypeMembersServiceSearchResult.h"
#include "OAIPartyMembersServiceSearchResult.h"
#include "OAIPartySeatCountMembersServiceSearchResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPartiesApi : public QObject {
    Q_OBJECT

public:
    OAIPartiesApi(const int timeOut = 0);
    ~OAIPartiesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  house OAIHouse [required]
    */
    virtual void apiPartiesGetActiveHouseGet(const OAIHouse &house);

    /**
    * @param[in]  for_date QDateTime [required]
    */
    virtual void apiPartiesLordsByTypeForDateGet(const QDateTime &for_date);

    /**
    * @param[in]  house OAIHouse [required]
    * @param[in]  for_date QDateTime [required]
    */
    virtual void apiPartiesStateOfThePartiesHouseForDateGet(const OAIHouse &house, const QDateTime &for_date);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiPartiesGetActiveHouseGetCallback(OAIHttpRequestWorker *worker);
    void apiPartiesLordsByTypeForDateGetCallback(OAIHttpRequestWorker *worker);
    void apiPartiesStateOfThePartiesHouseForDateGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiPartiesGetActiveHouseGetSignal(OAIPartyMembersServiceSearchResult summary);
    void apiPartiesLordsByTypeForDateGetSignal(OAILordsByTypeMembersServiceSearchResult summary);
    void apiPartiesStateOfThePartiesHouseForDateGetSignal(OAIPartySeatCountMembersServiceSearchResult summary);


    void apiPartiesGetActiveHouseGetSignalFull(OAIHttpRequestWorker *worker, OAIPartyMembersServiceSearchResult summary);
    void apiPartiesLordsByTypeForDateGetSignalFull(OAIHttpRequestWorker *worker, OAILordsByTypeMembersServiceSearchResult summary);
    void apiPartiesStateOfThePartiesHouseForDateGetSignalFull(OAIHttpRequestWorker *worker, OAIPartySeatCountMembersServiceSearchResult summary);

    Q_DECL_DEPRECATED_X("Use apiPartiesGetActiveHouseGetSignalError() instead")
    void apiPartiesGetActiveHouseGetSignalE(OAIPartyMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartiesGetActiveHouseGetSignalError(OAIPartyMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPartiesLordsByTypeForDateGetSignalError() instead")
    void apiPartiesLordsByTypeForDateGetSignalE(OAILordsByTypeMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartiesLordsByTypeForDateGetSignalError(OAILordsByTypeMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPartiesStateOfThePartiesHouseForDateGetSignalError() instead")
    void apiPartiesStateOfThePartiesHouseForDateGetSignalE(OAIPartySeatCountMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartiesStateOfThePartiesHouseForDateGetSignalError(OAIPartySeatCountMembersServiceSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiPartiesGetActiveHouseGetSignalErrorFull() instead")
    void apiPartiesGetActiveHouseGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartiesGetActiveHouseGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPartiesLordsByTypeForDateGetSignalErrorFull() instead")
    void apiPartiesLordsByTypeForDateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartiesLordsByTypeForDateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPartiesStateOfThePartiesHouseForDateGetSignalErrorFull() instead")
    void apiPartiesStateOfThePartiesHouseForDateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartiesStateOfThePartiesHouseForDateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
