/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPostsApi_H
#define OAI_OAIPostsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGovernmentDepartment.h"
#include "OAIGovernmentOppositionPostItem.h"
#include "OAIMemberItem.h"
#include "OAIPostType.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPostsApi : public QObject {
    Q_OBJECT

public:
    OAIPostsApi(const int timeOut = 0);
    ~OAIPostsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  type OAIPostType [required]
    */
    virtual void apiPostsDepartmentsTypeGet(const OAIPostType &type);

    /**
    * @param[in]  department_id qint32 [optional]
    */
    virtual void apiPostsGovernmentPostsGet(const ::OpenAPI::OptionalParam<qint32> &department_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  department_id qint32 [optional]
    */
    virtual void apiPostsOppositionPostsGet(const ::OpenAPI::OptionalParam<qint32> &department_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  for_date QDateTime [required]
    */
    virtual void apiPostsSpeakerAndDeputiesForDateGet(const QDateTime &for_date);

    /**
    * @param[in]  party_id qint32 [optional]
    */
    virtual void apiPostsSpokespersonsGet(const ::OpenAPI::OptionalParam<qint32> &party_id = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiPostsDepartmentsTypeGetCallback(OAIHttpRequestWorker *worker);
    void apiPostsGovernmentPostsGetCallback(OAIHttpRequestWorker *worker);
    void apiPostsOppositionPostsGetCallback(OAIHttpRequestWorker *worker);
    void apiPostsSpeakerAndDeputiesForDateGetCallback(OAIHttpRequestWorker *worker);
    void apiPostsSpokespersonsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiPostsDepartmentsTypeGetSignal(QList<OAIGovernmentDepartment> summary);
    void apiPostsGovernmentPostsGetSignal(QList<OAIGovernmentOppositionPostItem> summary);
    void apiPostsOppositionPostsGetSignal(QList<OAIGovernmentOppositionPostItem> summary);
    void apiPostsSpeakerAndDeputiesForDateGetSignal(QList<OAIMemberItem> summary);
    void apiPostsSpokespersonsGetSignal(QList<OAIGovernmentOppositionPostItem> summary);


    void apiPostsDepartmentsTypeGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIGovernmentDepartment> summary);
    void apiPostsGovernmentPostsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIGovernmentOppositionPostItem> summary);
    void apiPostsOppositionPostsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIGovernmentOppositionPostItem> summary);
    void apiPostsSpeakerAndDeputiesForDateGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMemberItem> summary);
    void apiPostsSpokespersonsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIGovernmentOppositionPostItem> summary);

    Q_DECL_DEPRECATED_X("Use apiPostsDepartmentsTypeGetSignalError() instead")
    void apiPostsDepartmentsTypeGetSignalE(QList<OAIGovernmentDepartment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPostsDepartmentsTypeGetSignalError(QList<OAIGovernmentDepartment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPostsGovernmentPostsGetSignalError() instead")
    void apiPostsGovernmentPostsGetSignalE(QList<OAIGovernmentOppositionPostItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPostsGovernmentPostsGetSignalError(QList<OAIGovernmentOppositionPostItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPostsOppositionPostsGetSignalError() instead")
    void apiPostsOppositionPostsGetSignalE(QList<OAIGovernmentOppositionPostItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPostsOppositionPostsGetSignalError(QList<OAIGovernmentOppositionPostItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPostsSpeakerAndDeputiesForDateGetSignalError() instead")
    void apiPostsSpeakerAndDeputiesForDateGetSignalE(QList<OAIMemberItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPostsSpeakerAndDeputiesForDateGetSignalError(QList<OAIMemberItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPostsSpokespersonsGetSignalError() instead")
    void apiPostsSpokespersonsGetSignalE(QList<OAIGovernmentOppositionPostItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPostsSpokespersonsGetSignalError(QList<OAIGovernmentOppositionPostItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiPostsDepartmentsTypeGetSignalErrorFull() instead")
    void apiPostsDepartmentsTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPostsDepartmentsTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPostsGovernmentPostsGetSignalErrorFull() instead")
    void apiPostsGovernmentPostsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPostsGovernmentPostsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPostsOppositionPostsGetSignalErrorFull() instead")
    void apiPostsOppositionPostsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPostsOppositionPostsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPostsSpeakerAndDeputiesForDateGetSignalErrorFull() instead")
    void apiPostsSpeakerAndDeputiesForDateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPostsSpeakerAndDeputiesForDateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPostsSpokespersonsGetSignalErrorFull() instead")
    void apiPostsSpokespersonsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPostsSpokespersonsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
