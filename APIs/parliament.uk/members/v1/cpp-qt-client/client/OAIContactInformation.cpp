/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactInformation::OAIContactInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactInformation::OAIContactInformation() {
    this->initializeModel();
}

OAIContactInformation::~OAIContactInformation() {}

void OAIContactInformation::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_fax_isSet = false;
    m_fax_isValid = false;

    m_is_preferred_isSet = false;
    m_is_preferred_isValid = false;

    m_is_web_address_isSet = false;
    m_is_web_address_isValid = false;

    m_line1_isSet = false;
    m_line1_isValid = false;

    m_line2_isSet = false;
    m_line2_isValid = false;

    m_line3_isSet = false;
    m_line3_isValid = false;

    m_line4_isSet = false;
    m_line4_isValid = false;

    m_line5_isSet = false;
    m_line5_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_postcode_isSet = false;
    m_postcode_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_description_isSet = false;
    m_type_description_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;
}

void OAIContactInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactInformation::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_fax_isValid = ::OpenAPI::fromJsonValue(m_fax, json[QString("fax")]);
    m_fax_isSet = !json[QString("fax")].isNull() && m_fax_isValid;

    m_is_preferred_isValid = ::OpenAPI::fromJsonValue(m_is_preferred, json[QString("isPreferred")]);
    m_is_preferred_isSet = !json[QString("isPreferred")].isNull() && m_is_preferred_isValid;

    m_is_web_address_isValid = ::OpenAPI::fromJsonValue(m_is_web_address, json[QString("isWebAddress")]);
    m_is_web_address_isSet = !json[QString("isWebAddress")].isNull() && m_is_web_address_isValid;

    m_line1_isValid = ::OpenAPI::fromJsonValue(m_line1, json[QString("line1")]);
    m_line1_isSet = !json[QString("line1")].isNull() && m_line1_isValid;

    m_line2_isValid = ::OpenAPI::fromJsonValue(m_line2, json[QString("line2")]);
    m_line2_isSet = !json[QString("line2")].isNull() && m_line2_isValid;

    m_line3_isValid = ::OpenAPI::fromJsonValue(m_line3, json[QString("line3")]);
    m_line3_isSet = !json[QString("line3")].isNull() && m_line3_isValid;

    m_line4_isValid = ::OpenAPI::fromJsonValue(m_line4, json[QString("line4")]);
    m_line4_isSet = !json[QString("line4")].isNull() && m_line4_isValid;

    m_line5_isValid = ::OpenAPI::fromJsonValue(m_line5, json[QString("line5")]);
    m_line5_isSet = !json[QString("line5")].isNull() && m_line5_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_postcode_isValid = ::OpenAPI::fromJsonValue(m_postcode, json[QString("postcode")]);
    m_postcode_isSet = !json[QString("postcode")].isNull() && m_postcode_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_type_description_isValid = ::OpenAPI::fromJsonValue(m_type_description, json[QString("typeDescription")]);
    m_type_description_isSet = !json[QString("typeDescription")].isNull() && m_type_description_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("typeId")]);
    m_type_id_isSet = !json[QString("typeId")].isNull() && m_type_id_isValid;
}

QString OAIContactInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fax_isSet) {
        obj.insert(QString("fax"), ::OpenAPI::toJsonValue(m_fax));
    }
    if (m_is_preferred_isSet) {
        obj.insert(QString("isPreferred"), ::OpenAPI::toJsonValue(m_is_preferred));
    }
    if (m_is_web_address_isSet) {
        obj.insert(QString("isWebAddress"), ::OpenAPI::toJsonValue(m_is_web_address));
    }
    if (m_line1_isSet) {
        obj.insert(QString("line1"), ::OpenAPI::toJsonValue(m_line1));
    }
    if (m_line2_isSet) {
        obj.insert(QString("line2"), ::OpenAPI::toJsonValue(m_line2));
    }
    if (m_line3_isSet) {
        obj.insert(QString("line3"), ::OpenAPI::toJsonValue(m_line3));
    }
    if (m_line4_isSet) {
        obj.insert(QString("line4"), ::OpenAPI::toJsonValue(m_line4));
    }
    if (m_line5_isSet) {
        obj.insert(QString("line5"), ::OpenAPI::toJsonValue(m_line5));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_postcode_isSet) {
        obj.insert(QString("postcode"), ::OpenAPI::toJsonValue(m_postcode));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_description_isSet) {
        obj.insert(QString("typeDescription"), ::OpenAPI::toJsonValue(m_type_description));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("typeId"), ::OpenAPI::toJsonValue(m_type_id));
    }
    return obj;
}

QString OAIContactInformation::getEmail() const {
    return m_email;
}
void OAIContactInformation::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIContactInformation::is_email_Set() const{
    return m_email_isSet;
}

bool OAIContactInformation::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIContactInformation::getFax() const {
    return m_fax;
}
void OAIContactInformation::setFax(const QString &fax) {
    m_fax = fax;
    m_fax_isSet = true;
}

bool OAIContactInformation::is_fax_Set() const{
    return m_fax_isSet;
}

bool OAIContactInformation::is_fax_Valid() const{
    return m_fax_isValid;
}

bool OAIContactInformation::isIsPreferred() const {
    return m_is_preferred;
}
void OAIContactInformation::setIsPreferred(const bool &is_preferred) {
    m_is_preferred = is_preferred;
    m_is_preferred_isSet = true;
}

bool OAIContactInformation::is_is_preferred_Set() const{
    return m_is_preferred_isSet;
}

bool OAIContactInformation::is_is_preferred_Valid() const{
    return m_is_preferred_isValid;
}

bool OAIContactInformation::isIsWebAddress() const {
    return m_is_web_address;
}
void OAIContactInformation::setIsWebAddress(const bool &is_web_address) {
    m_is_web_address = is_web_address;
    m_is_web_address_isSet = true;
}

bool OAIContactInformation::is_is_web_address_Set() const{
    return m_is_web_address_isSet;
}

bool OAIContactInformation::is_is_web_address_Valid() const{
    return m_is_web_address_isValid;
}

QString OAIContactInformation::getLine1() const {
    return m_line1;
}
void OAIContactInformation::setLine1(const QString &line1) {
    m_line1 = line1;
    m_line1_isSet = true;
}

bool OAIContactInformation::is_line1_Set() const{
    return m_line1_isSet;
}

bool OAIContactInformation::is_line1_Valid() const{
    return m_line1_isValid;
}

QString OAIContactInformation::getLine2() const {
    return m_line2;
}
void OAIContactInformation::setLine2(const QString &line2) {
    m_line2 = line2;
    m_line2_isSet = true;
}

bool OAIContactInformation::is_line2_Set() const{
    return m_line2_isSet;
}

bool OAIContactInformation::is_line2_Valid() const{
    return m_line2_isValid;
}

QString OAIContactInformation::getLine3() const {
    return m_line3;
}
void OAIContactInformation::setLine3(const QString &line3) {
    m_line3 = line3;
    m_line3_isSet = true;
}

bool OAIContactInformation::is_line3_Set() const{
    return m_line3_isSet;
}

bool OAIContactInformation::is_line3_Valid() const{
    return m_line3_isValid;
}

QString OAIContactInformation::getLine4() const {
    return m_line4;
}
void OAIContactInformation::setLine4(const QString &line4) {
    m_line4 = line4;
    m_line4_isSet = true;
}

bool OAIContactInformation::is_line4_Set() const{
    return m_line4_isSet;
}

bool OAIContactInformation::is_line4_Valid() const{
    return m_line4_isValid;
}

QString OAIContactInformation::getLine5() const {
    return m_line5;
}
void OAIContactInformation::setLine5(const QString &line5) {
    m_line5 = line5;
    m_line5_isSet = true;
}

bool OAIContactInformation::is_line5_Set() const{
    return m_line5_isSet;
}

bool OAIContactInformation::is_line5_Valid() const{
    return m_line5_isValid;
}

QString OAIContactInformation::getNotes() const {
    return m_notes;
}
void OAIContactInformation::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIContactInformation::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIContactInformation::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIContactInformation::getPhone() const {
    return m_phone;
}
void OAIContactInformation::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIContactInformation::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIContactInformation::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIContactInformation::getPostcode() const {
    return m_postcode;
}
void OAIContactInformation::setPostcode(const QString &postcode) {
    m_postcode = postcode;
    m_postcode_isSet = true;
}

bool OAIContactInformation::is_postcode_Set() const{
    return m_postcode_isSet;
}

bool OAIContactInformation::is_postcode_Valid() const{
    return m_postcode_isValid;
}

QString OAIContactInformation::getType() const {
    return m_type;
}
void OAIContactInformation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIContactInformation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIContactInformation::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIContactInformation::getTypeDescription() const {
    return m_type_description;
}
void OAIContactInformation::setTypeDescription(const QString &type_description) {
    m_type_description = type_description;
    m_type_description_isSet = true;
}

bool OAIContactInformation::is_type_description_Set() const{
    return m_type_description_isSet;
}

bool OAIContactInformation::is_type_description_Valid() const{
    return m_type_description_isValid;
}

qint32 OAIContactInformation::getTypeId() const {
    return m_type_id;
}
void OAIContactInformation::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIContactInformation::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIContactInformation::is_type_id_Valid() const{
    return m_type_id_isValid;
}

bool OAIContactInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_web_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
