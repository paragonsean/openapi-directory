/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConstituencyMembersServiceSearchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConstituencyMembersServiceSearchResult::OAIConstituencyMembersServiceSearchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConstituencyMembersServiceSearchResult::OAIConstituencyMembersServiceSearchResult() {
    this->initializeModel();
}

OAIConstituencyMembersServiceSearchResult::~OAIConstituencyMembersServiceSearchResult() {}

void OAIConstituencyMembersServiceSearchResult::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_result_context_isSet = false;
    m_result_context_isValid = false;

    m_skip_isSet = false;
    m_skip_isValid = false;

    m_take_isSet = false;
    m_take_isValid = false;

    m_total_results_isSet = false;
    m_total_results_isValid = false;
}

void OAIConstituencyMembersServiceSearchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConstituencyMembersServiceSearchResult::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_result_context_isValid = ::OpenAPI::fromJsonValue(m_result_context, json[QString("resultContext")]);
    m_result_context_isSet = !json[QString("resultContext")].isNull() && m_result_context_isValid;

    m_skip_isValid = ::OpenAPI::fromJsonValue(m_skip, json[QString("skip")]);
    m_skip_isSet = !json[QString("skip")].isNull() && m_skip_isValid;

    m_take_isValid = ::OpenAPI::fromJsonValue(m_take, json[QString("take")]);
    m_take_isSet = !json[QString("take")].isNull() && m_take_isValid;

    m_total_results_isValid = ::OpenAPI::fromJsonValue(m_total_results, json[QString("totalResults")]);
    m_total_results_isSet = !json[QString("totalResults")].isNull() && m_total_results_isValid;
}

QString OAIConstituencyMembersServiceSearchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConstituencyMembersServiceSearchResult::asJsonObject() const {
    QJsonObject obj;
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_result_context_isSet) {
        obj.insert(QString("resultContext"), ::OpenAPI::toJsonValue(m_result_context));
    }
    if (m_skip_isSet) {
        obj.insert(QString("skip"), ::OpenAPI::toJsonValue(m_skip));
    }
    if (m_take_isSet) {
        obj.insert(QString("take"), ::OpenAPI::toJsonValue(m_take));
    }
    if (m_total_results_isSet) {
        obj.insert(QString("totalResults"), ::OpenAPI::toJsonValue(m_total_results));
    }
    return obj;
}

QList<OAIConstituencyItem> OAIConstituencyMembersServiceSearchResult::getItems() const {
    return m_items;
}
void OAIConstituencyMembersServiceSearchResult::setItems(const QList<OAIConstituencyItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIConstituencyMembersServiceSearchResult::is_items_Set() const{
    return m_items_isSet;
}

bool OAIConstituencyMembersServiceSearchResult::is_items_Valid() const{
    return m_items_isValid;
}

QList<OAILink> OAIConstituencyMembersServiceSearchResult::getLinks() const {
    return m_links;
}
void OAIConstituencyMembersServiceSearchResult::setLinks(const QList<OAILink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIConstituencyMembersServiceSearchResult::is_links_Set() const{
    return m_links_isSet;
}

bool OAIConstituencyMembersServiceSearchResult::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIConstituencyMembersServiceSearchResult::getResultContext() const {
    return m_result_context;
}
void OAIConstituencyMembersServiceSearchResult::setResultContext(const QString &result_context) {
    m_result_context = result_context;
    m_result_context_isSet = true;
}

bool OAIConstituencyMembersServiceSearchResult::is_result_context_Set() const{
    return m_result_context_isSet;
}

bool OAIConstituencyMembersServiceSearchResult::is_result_context_Valid() const{
    return m_result_context_isValid;
}

qint32 OAIConstituencyMembersServiceSearchResult::getSkip() const {
    return m_skip;
}
void OAIConstituencyMembersServiceSearchResult::setSkip(const qint32 &skip) {
    m_skip = skip;
    m_skip_isSet = true;
}

bool OAIConstituencyMembersServiceSearchResult::is_skip_Set() const{
    return m_skip_isSet;
}

bool OAIConstituencyMembersServiceSearchResult::is_skip_Valid() const{
    return m_skip_isValid;
}

qint32 OAIConstituencyMembersServiceSearchResult::getTake() const {
    return m_take;
}
void OAIConstituencyMembersServiceSearchResult::setTake(const qint32 &take) {
    m_take = take;
    m_take_isSet = true;
}

bool OAIConstituencyMembersServiceSearchResult::is_take_Set() const{
    return m_take_isSet;
}

bool OAIConstituencyMembersServiceSearchResult::is_take_Valid() const{
    return m_take_isValid;
}

qint32 OAIConstituencyMembersServiceSearchResult::getTotalResults() const {
    return m_total_results;
}
void OAIConstituencyMembersServiceSearchResult::setTotalResults(const qint32 &total_results) {
    m_total_results = total_results;
    m_total_results_isSet = true;
}

bool OAIConstituencyMembersServiceSearchResult::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAIConstituencyMembersServiceSearchResult::is_total_results_Valid() const{
    return m_total_results_isValid;
}

bool OAIConstituencyMembersServiceSearchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_take_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConstituencyMembersServiceSearchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
