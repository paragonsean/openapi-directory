/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIElectionResult.h
 *
 * 
 */

#ifndef OAIElectionResult_H
#define OAIElectionResult_H

#include <QJsonObject>

#include "OAIElectionCandidate.h"
#include "OAIParty.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIElectionCandidate;
class OAIParty;

class OAIElectionResult : public OAIObject {
public:
    OAIElectionResult();
    OAIElectionResult(QString json);
    ~OAIElectionResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIElectionCandidate> getCandidates() const;
    void setCandidates(const QList<OAIElectionCandidate> &candidates);
    bool is_candidates_Set() const;
    bool is_candidates_Valid() const;

    QString getConstituencyName() const;
    void setConstituencyName(const QString &constituency_name);
    bool is_constituency_name_Set() const;
    bool is_constituency_name_Valid() const;

    QDateTime getElectionDate() const;
    void setElectionDate(const QDateTime &election_date);
    bool is_election_date_Set() const;
    bool is_election_date_Valid() const;

    qint32 getElectionId() const;
    void setElectionId(const qint32 &election_id);
    bool is_election_id_Set() const;
    bool is_election_id_Valid() const;

    QString getElectionTitle() const;
    void setElectionTitle(const QString &election_title);
    bool is_election_title_Set() const;
    bool is_election_title_Valid() const;

    qint32 getElectorate() const;
    void setElectorate(const qint32 &electorate);
    bool is_electorate_Set() const;
    bool is_electorate_Valid() const;

    bool isIsGeneralElection() const;
    void setIsGeneralElection(const bool &is_general_election);
    bool is_is_general_election_Set() const;
    bool is_is_general_election_Valid() const;

    bool isIsNotional() const;
    void setIsNotional(const bool &is_notional);
    bool is_is_notional_Set() const;
    bool is_is_notional_Valid() const;

    qint32 getMajority() const;
    void setMajority(const qint32 &majority);
    bool is_majority_Set() const;
    bool is_majority_Valid() const;

    QString getResult() const;
    void setResult(const QString &result);
    bool is_result_Set() const;
    bool is_result_Valid() const;

    qint32 getTurnout() const;
    void setTurnout(const qint32 &turnout);
    bool is_turnout_Set() const;
    bool is_turnout_Valid() const;

    OAIParty getWinningParty() const;
    void setWinningParty(const OAIParty &winning_party);
    bool is_winning_party_Set() const;
    bool is_winning_party_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIElectionCandidate> m_candidates;
    bool m_candidates_isSet;
    bool m_candidates_isValid;

    QString m_constituency_name;
    bool m_constituency_name_isSet;
    bool m_constituency_name_isValid;

    QDateTime m_election_date;
    bool m_election_date_isSet;
    bool m_election_date_isValid;

    qint32 m_election_id;
    bool m_election_id_isSet;
    bool m_election_id_isValid;

    QString m_election_title;
    bool m_election_title_isSet;
    bool m_election_title_isValid;

    qint32 m_electorate;
    bool m_electorate_isSet;
    bool m_electorate_isValid;

    bool m_is_general_election;
    bool m_is_general_election_isSet;
    bool m_is_general_election_isValid;

    bool m_is_notional;
    bool m_is_notional_isSet;
    bool m_is_notional_isValid;

    qint32 m_majority;
    bool m_majority_isSet;
    bool m_majority_isValid;

    QString m_result;
    bool m_result_isSet;
    bool m_result_isValid;

    qint32 m_turnout;
    bool m_turnout_isSet;
    bool m_turnout_isValid;

    OAIParty m_winning_party;
    bool m_winning_party_isSet;
    bool m_winning_party_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIElectionResult)

#endif // OAIElectionResult_H
