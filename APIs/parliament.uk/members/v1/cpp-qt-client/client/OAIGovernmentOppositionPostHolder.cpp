/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGovernmentOppositionPostHolder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGovernmentOppositionPostHolder::OAIGovernmentOppositionPostHolder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGovernmentOppositionPostHolder::OAIGovernmentOppositionPostHolder() {
    this->initializeModel();
}

OAIGovernmentOppositionPostHolder::~OAIGovernmentOppositionPostHolder() {}

void OAIGovernmentOppositionPostHolder::initializeModel() {

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_is_paid_isSet = false;
    m_is_paid_isValid = false;

    m_laying_minister_name_isSet = false;
    m_laying_minister_name_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIGovernmentOppositionPostHolder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGovernmentOppositionPostHolder::fromJsonObject(QJsonObject json) {

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_is_paid_isValid = ::OpenAPI::fromJsonValue(m_is_paid, json[QString("isPaid")]);
    m_is_paid_isSet = !json[QString("isPaid")].isNull() && m_is_paid_isValid;

    m_laying_minister_name_isValid = ::OpenAPI::fromJsonValue(m_laying_minister_name, json[QString("layingMinisterName")]);
    m_laying_minister_name_isSet = !json[QString("layingMinisterName")].isNull() && m_laying_minister_name_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIGovernmentOppositionPostHolder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGovernmentOppositionPostHolder::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_is_paid_isSet) {
        obj.insert(QString("isPaid"), ::OpenAPI::toJsonValue(m_is_paid));
    }
    if (m_laying_minister_name_isSet) {
        obj.insert(QString("layingMinisterName"), ::OpenAPI::toJsonValue(m_laying_minister_name));
    }
    if (m_member.isSet()) {
        obj.insert(QString("member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QDateTime OAIGovernmentOppositionPostHolder::getEndDate() const {
    return m_end_date;
}
void OAIGovernmentOppositionPostHolder::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIGovernmentOppositionPostHolder::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIGovernmentOppositionPostHolder::is_end_date_Valid() const{
    return m_end_date_isValid;
}

bool OAIGovernmentOppositionPostHolder::isIsPaid() const {
    return m_is_paid;
}
void OAIGovernmentOppositionPostHolder::setIsPaid(const bool &is_paid) {
    m_is_paid = is_paid;
    m_is_paid_isSet = true;
}

bool OAIGovernmentOppositionPostHolder::is_is_paid_Set() const{
    return m_is_paid_isSet;
}

bool OAIGovernmentOppositionPostHolder::is_is_paid_Valid() const{
    return m_is_paid_isValid;
}

QString OAIGovernmentOppositionPostHolder::getLayingMinisterName() const {
    return m_laying_minister_name;
}
void OAIGovernmentOppositionPostHolder::setLayingMinisterName(const QString &laying_minister_name) {
    m_laying_minister_name = laying_minister_name;
    m_laying_minister_name_isSet = true;
}

bool OAIGovernmentOppositionPostHolder::is_laying_minister_name_Set() const{
    return m_laying_minister_name_isSet;
}

bool OAIGovernmentOppositionPostHolder::is_laying_minister_name_Valid() const{
    return m_laying_minister_name_isValid;
}

OAIMemberItem OAIGovernmentOppositionPostHolder::getMember() const {
    return m_member;
}
void OAIGovernmentOppositionPostHolder::setMember(const OAIMemberItem &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIGovernmentOppositionPostHolder::is_member_Set() const{
    return m_member_isSet;
}

bool OAIGovernmentOppositionPostHolder::is_member_Valid() const{
    return m_member_isValid;
}

QDateTime OAIGovernmentOppositionPostHolder::getStartDate() const {
    return m_start_date;
}
void OAIGovernmentOppositionPostHolder::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIGovernmentOppositionPostHolder::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIGovernmentOppositionPostHolder::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIGovernmentOppositionPostHolder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_laying_minister_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGovernmentOppositionPostHolder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
