/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDebateContribution.h
 *
 * 
 */

#ifndef OAIDebateContribution_H
#define OAIDebateContribution_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDebateContribution : public OAIObject {
public:
    OAIDebateContribution();
    OAIDebateContribution(QString json);
    ~OAIDebateContribution() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAnswerCount() const;
    void setAnswerCount(const qint32 &answer_count);
    bool is_answer_count_Set() const;
    bool is_answer_count_Valid() const;

    qint32 getDebateId() const;
    void setDebateId(const qint32 &debate_id);
    bool is_debate_id_Set() const;
    bool is_debate_id_Valid() const;

    QString getDebateTitle() const;
    void setDebateTitle(const QString &debate_title);
    bool is_debate_title_Set() const;
    bool is_debate_title_Valid() const;

    QString getDebateWebsiteId() const;
    void setDebateWebsiteId(const QString &debate_website_id);
    bool is_debate_website_id_Set() const;
    bool is_debate_website_id_Valid() const;

    QDateTime getFirstTimecode() const;
    void setFirstTimecode(const QDateTime &first_timecode);
    bool is_first_timecode_Set() const;
    bool is_first_timecode_Valid() const;

    QString getHouse() const;
    void setHouse(const QString &house);
    bool is_house_Set() const;
    bool is_house_Valid() const;

    qint32 getInterventionCount() const;
    void setInterventionCount(const qint32 &intervention_count);
    bool is_intervention_count_Set() const;
    bool is_intervention_count_Valid() const;

    qint32 getPointsOfOrderCount() const;
    void setPointsOfOrderCount(const qint32 &points_of_order_count);
    bool is_points_of_order_count_Set() const;
    bool is_points_of_order_count_Valid() const;

    qint32 getQuestionCount() const;
    void setQuestionCount(const qint32 &question_count);
    bool is_question_count_Set() const;
    bool is_question_count_Valid() const;

    QString getSection() const;
    void setSection(const QString &section);
    bool is_section_Set() const;
    bool is_section_Valid() const;

    QDateTime getSittingDate() const;
    void setSittingDate(const QDateTime &sitting_date);
    bool is_sitting_date_Set() const;
    bool is_sitting_date_Valid() const;

    qint32 getSpeechCount() const;
    void setSpeechCount(const qint32 &speech_count);
    bool is_speech_count_Set() const;
    bool is_speech_count_Valid() const;

    qint32 getStatementsCount() const;
    void setStatementsCount(const qint32 &statements_count);
    bool is_statements_count_Set() const;
    bool is_statements_count_Valid() const;

    qint32 getSupplementaryQuestionCount() const;
    void setSupplementaryQuestionCount(const qint32 &supplementary_question_count);
    bool is_supplementary_question_count_Set() const;
    bool is_supplementary_question_count_Valid() const;

    qint32 getTotalContributions() const;
    void setTotalContributions(const qint32 &total_contributions);
    bool is_total_contributions_Set() const;
    bool is_total_contributions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_answer_count;
    bool m_answer_count_isSet;
    bool m_answer_count_isValid;

    qint32 m_debate_id;
    bool m_debate_id_isSet;
    bool m_debate_id_isValid;

    QString m_debate_title;
    bool m_debate_title_isSet;
    bool m_debate_title_isValid;

    QString m_debate_website_id;
    bool m_debate_website_id_isSet;
    bool m_debate_website_id_isValid;

    QDateTime m_first_timecode;
    bool m_first_timecode_isSet;
    bool m_first_timecode_isValid;

    QString m_house;
    bool m_house_isSet;
    bool m_house_isValid;

    qint32 m_intervention_count;
    bool m_intervention_count_isSet;
    bool m_intervention_count_isValid;

    qint32 m_points_of_order_count;
    bool m_points_of_order_count_isSet;
    bool m_points_of_order_count_isValid;

    qint32 m_question_count;
    bool m_question_count_isSet;
    bool m_question_count_isValid;

    QString m_section;
    bool m_section_isSet;
    bool m_section_isValid;

    QDateTime m_sitting_date;
    bool m_sitting_date_isSet;
    bool m_sitting_date_isValid;

    qint32 m_speech_count;
    bool m_speech_count_isSet;
    bool m_speech_count_isValid;

    qint32 m_statements_count;
    bool m_statements_count_isSet;
    bool m_statements_count_isValid;

    qint32 m_supplementary_question_count;
    bool m_supplementary_question_count_isSet;
    bool m_supplementary_question_count_isValid;

    qint32 m_total_contributions;
    bool m_total_contributions_isSet;
    bool m_total_contributions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDebateContribution)

#endif // OAIDebateContribution_H
