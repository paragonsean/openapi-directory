/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberParty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberParty::OAIMemberParty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberParty::OAIMemberParty() {
    this->initializeModel();
}

OAIMemberParty::~OAIMemberParty() {}

void OAIMemberParty::initializeModel() {

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIMemberParty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberParty::fromJsonObject(QJsonObject json) {

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIMemberParty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberParty::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_party.isSet()) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QDateTime OAIMemberParty::getEndDate() const {
    return m_end_date;
}
void OAIMemberParty::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIMemberParty::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIMemberParty::is_end_date_Valid() const{
    return m_end_date_isValid;
}

OAIParty OAIMemberParty::getParty() const {
    return m_party;
}
void OAIMemberParty::setParty(const OAIParty &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAIMemberParty::is_party_Set() const{
    return m_party_isSet;
}

bool OAIMemberParty::is_party_Valid() const{
    return m_party_isValid;
}

QDateTime OAIMemberParty::getStartDate() const {
    return m_start_date;
}
void OAIMemberParty::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIMemberParty::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIMemberParty::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIMemberParty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberParty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
