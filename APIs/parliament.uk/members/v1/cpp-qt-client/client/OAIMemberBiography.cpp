/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberBiography.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberBiography::OAIMemberBiography(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberBiography::OAIMemberBiography() {
    this->initializeModel();
}

OAIMemberBiography::~OAIMemberBiography() {}

void OAIMemberBiography::initializeModel() {

    m_committee_memberships_isSet = false;
    m_committee_memberships_isValid = false;

    m_elections_contested_isSet = false;
    m_elections_contested_isValid = false;

    m_government_posts_isSet = false;
    m_government_posts_isValid = false;

    m_house_memberships_isSet = false;
    m_house_memberships_isValid = false;

    m_opposition_posts_isSet = false;
    m_opposition_posts_isValid = false;

    m_other_posts_isSet = false;
    m_other_posts_isValid = false;

    m_party_affiliations_isSet = false;
    m_party_affiliations_isValid = false;

    m_representations_isSet = false;
    m_representations_isValid = false;
}

void OAIMemberBiography::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberBiography::fromJsonObject(QJsonObject json) {

    m_committee_memberships_isValid = ::OpenAPI::fromJsonValue(m_committee_memberships, json[QString("committeeMemberships")]);
    m_committee_memberships_isSet = !json[QString("committeeMemberships")].isNull() && m_committee_memberships_isValid;

    m_elections_contested_isValid = ::OpenAPI::fromJsonValue(m_elections_contested, json[QString("electionsContested")]);
    m_elections_contested_isSet = !json[QString("electionsContested")].isNull() && m_elections_contested_isValid;

    m_government_posts_isValid = ::OpenAPI::fromJsonValue(m_government_posts, json[QString("governmentPosts")]);
    m_government_posts_isSet = !json[QString("governmentPosts")].isNull() && m_government_posts_isValid;

    m_house_memberships_isValid = ::OpenAPI::fromJsonValue(m_house_memberships, json[QString("houseMemberships")]);
    m_house_memberships_isSet = !json[QString("houseMemberships")].isNull() && m_house_memberships_isValid;

    m_opposition_posts_isValid = ::OpenAPI::fromJsonValue(m_opposition_posts, json[QString("oppositionPosts")]);
    m_opposition_posts_isSet = !json[QString("oppositionPosts")].isNull() && m_opposition_posts_isValid;

    m_other_posts_isValid = ::OpenAPI::fromJsonValue(m_other_posts, json[QString("otherPosts")]);
    m_other_posts_isSet = !json[QString("otherPosts")].isNull() && m_other_posts_isValid;

    m_party_affiliations_isValid = ::OpenAPI::fromJsonValue(m_party_affiliations, json[QString("partyAffiliations")]);
    m_party_affiliations_isSet = !json[QString("partyAffiliations")].isNull() && m_party_affiliations_isValid;

    m_representations_isValid = ::OpenAPI::fromJsonValue(m_representations, json[QString("representations")]);
    m_representations_isSet = !json[QString("representations")].isNull() && m_representations_isValid;
}

QString OAIMemberBiography::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberBiography::asJsonObject() const {
    QJsonObject obj;
    if (m_committee_memberships.size() > 0) {
        obj.insert(QString("committeeMemberships"), ::OpenAPI::toJsonValue(m_committee_memberships));
    }
    if (m_elections_contested.size() > 0) {
        obj.insert(QString("electionsContested"), ::OpenAPI::toJsonValue(m_elections_contested));
    }
    if (m_government_posts.size() > 0) {
        obj.insert(QString("governmentPosts"), ::OpenAPI::toJsonValue(m_government_posts));
    }
    if (m_house_memberships.size() > 0) {
        obj.insert(QString("houseMemberships"), ::OpenAPI::toJsonValue(m_house_memberships));
    }
    if (m_opposition_posts.size() > 0) {
        obj.insert(QString("oppositionPosts"), ::OpenAPI::toJsonValue(m_opposition_posts));
    }
    if (m_other_posts.size() > 0) {
        obj.insert(QString("otherPosts"), ::OpenAPI::toJsonValue(m_other_posts));
    }
    if (m_party_affiliations.size() > 0) {
        obj.insert(QString("partyAffiliations"), ::OpenAPI::toJsonValue(m_party_affiliations));
    }
    if (m_representations.size() > 0) {
        obj.insert(QString("representations"), ::OpenAPI::toJsonValue(m_representations));
    }
    return obj;
}

QList<OAIBiographyItem> OAIMemberBiography::getCommitteeMemberships() const {
    return m_committee_memberships;
}
void OAIMemberBiography::setCommitteeMemberships(const QList<OAIBiographyItem> &committee_memberships) {
    m_committee_memberships = committee_memberships;
    m_committee_memberships_isSet = true;
}

bool OAIMemberBiography::is_committee_memberships_Set() const{
    return m_committee_memberships_isSet;
}

bool OAIMemberBiography::is_committee_memberships_Valid() const{
    return m_committee_memberships_isValid;
}

QList<OAIBiographyItem> OAIMemberBiography::getElectionsContested() const {
    return m_elections_contested;
}
void OAIMemberBiography::setElectionsContested(const QList<OAIBiographyItem> &elections_contested) {
    m_elections_contested = elections_contested;
    m_elections_contested_isSet = true;
}

bool OAIMemberBiography::is_elections_contested_Set() const{
    return m_elections_contested_isSet;
}

bool OAIMemberBiography::is_elections_contested_Valid() const{
    return m_elections_contested_isValid;
}

QList<OAIBiographyItem> OAIMemberBiography::getGovernmentPosts() const {
    return m_government_posts;
}
void OAIMemberBiography::setGovernmentPosts(const QList<OAIBiographyItem> &government_posts) {
    m_government_posts = government_posts;
    m_government_posts_isSet = true;
}

bool OAIMemberBiography::is_government_posts_Set() const{
    return m_government_posts_isSet;
}

bool OAIMemberBiography::is_government_posts_Valid() const{
    return m_government_posts_isValid;
}

QList<OAIBiographyItem> OAIMemberBiography::getHouseMemberships() const {
    return m_house_memberships;
}
void OAIMemberBiography::setHouseMemberships(const QList<OAIBiographyItem> &house_memberships) {
    m_house_memberships = house_memberships;
    m_house_memberships_isSet = true;
}

bool OAIMemberBiography::is_house_memberships_Set() const{
    return m_house_memberships_isSet;
}

bool OAIMemberBiography::is_house_memberships_Valid() const{
    return m_house_memberships_isValid;
}

QList<OAIBiographyItem> OAIMemberBiography::getOppositionPosts() const {
    return m_opposition_posts;
}
void OAIMemberBiography::setOppositionPosts(const QList<OAIBiographyItem> &opposition_posts) {
    m_opposition_posts = opposition_posts;
    m_opposition_posts_isSet = true;
}

bool OAIMemberBiography::is_opposition_posts_Set() const{
    return m_opposition_posts_isSet;
}

bool OAIMemberBiography::is_opposition_posts_Valid() const{
    return m_opposition_posts_isValid;
}

QList<OAIBiographyItem> OAIMemberBiography::getOtherPosts() const {
    return m_other_posts;
}
void OAIMemberBiography::setOtherPosts(const QList<OAIBiographyItem> &other_posts) {
    m_other_posts = other_posts;
    m_other_posts_isSet = true;
}

bool OAIMemberBiography::is_other_posts_Set() const{
    return m_other_posts_isSet;
}

bool OAIMemberBiography::is_other_posts_Valid() const{
    return m_other_posts_isValid;
}

QList<OAIBiographyItem> OAIMemberBiography::getPartyAffiliations() const {
    return m_party_affiliations;
}
void OAIMemberBiography::setPartyAffiliations(const QList<OAIBiographyItem> &party_affiliations) {
    m_party_affiliations = party_affiliations;
    m_party_affiliations_isSet = true;
}

bool OAIMemberBiography::is_party_affiliations_Set() const{
    return m_party_affiliations_isSet;
}

bool OAIMemberBiography::is_party_affiliations_Valid() const{
    return m_party_affiliations_isValid;
}

QList<OAIBiographyItem> OAIMemberBiography::getRepresentations() const {
    return m_representations;
}
void OAIMemberBiography::setRepresentations(const QList<OAIBiographyItem> &representations) {
    m_representations = representations;
    m_representations_isSet = true;
}

bool OAIMemberBiography::is_representations_Set() const{
    return m_representations_isSet;
}

bool OAIMemberBiography::is_representations_Valid() const{
    return m_representations_isValid;
}

bool OAIMemberBiography::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_committee_memberships.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_elections_contested.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_government_posts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_memberships.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_opposition_posts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_posts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_affiliations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_representations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberBiography::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
