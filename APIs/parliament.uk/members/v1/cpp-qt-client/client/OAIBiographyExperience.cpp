/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBiographyExperience.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBiographyExperience::OAIBiographyExperience(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBiographyExperience::OAIBiographyExperience() {
    this->initializeModel();
}

OAIBiographyExperience::~OAIBiographyExperience() {}

void OAIBiographyExperience::initializeModel() {

    m_end_month_isSet = false;
    m_end_month_isValid = false;

    m_end_year_isSet = false;
    m_end_year_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_organisation_isSet = false;
    m_organisation_isValid = false;

    m_start_month_isSet = false;
    m_start_month_isValid = false;

    m_start_year_isSet = false;
    m_start_year_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;
}

void OAIBiographyExperience::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBiographyExperience::fromJsonObject(QJsonObject json) {

    m_end_month_isValid = ::OpenAPI::fromJsonValue(m_end_month, json[QString("endMonth")]);
    m_end_month_isSet = !json[QString("endMonth")].isNull() && m_end_month_isValid;

    m_end_year_isValid = ::OpenAPI::fromJsonValue(m_end_year, json[QString("endYear")]);
    m_end_year_isSet = !json[QString("endYear")].isNull() && m_end_year_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_organisation_isValid = ::OpenAPI::fromJsonValue(m_organisation, json[QString("organisation")]);
    m_organisation_isSet = !json[QString("organisation")].isNull() && m_organisation_isValid;

    m_start_month_isValid = ::OpenAPI::fromJsonValue(m_start_month, json[QString("startMonth")]);
    m_start_month_isSet = !json[QString("startMonth")].isNull() && m_start_month_isValid;

    m_start_year_isValid = ::OpenAPI::fromJsonValue(m_start_year, json[QString("startYear")]);
    m_start_year_isSet = !json[QString("startYear")].isNull() && m_start_year_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("typeId")]);
    m_type_id_isSet = !json[QString("typeId")].isNull() && m_type_id_isValid;
}

QString OAIBiographyExperience::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBiographyExperience::asJsonObject() const {
    QJsonObject obj;
    if (m_end_month_isSet) {
        obj.insert(QString("endMonth"), ::OpenAPI::toJsonValue(m_end_month));
    }
    if (m_end_year_isSet) {
        obj.insert(QString("endYear"), ::OpenAPI::toJsonValue(m_end_year));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_organisation_isSet) {
        obj.insert(QString("organisation"), ::OpenAPI::toJsonValue(m_organisation));
    }
    if (m_start_month_isSet) {
        obj.insert(QString("startMonth"), ::OpenAPI::toJsonValue(m_start_month));
    }
    if (m_start_year_isSet) {
        obj.insert(QString("startYear"), ::OpenAPI::toJsonValue(m_start_year));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("typeId"), ::OpenAPI::toJsonValue(m_type_id));
    }
    return obj;
}

qint32 OAIBiographyExperience::getEndMonth() const {
    return m_end_month;
}
void OAIBiographyExperience::setEndMonth(const qint32 &end_month) {
    m_end_month = end_month;
    m_end_month_isSet = true;
}

bool OAIBiographyExperience::is_end_month_Set() const{
    return m_end_month_isSet;
}

bool OAIBiographyExperience::is_end_month_Valid() const{
    return m_end_month_isValid;
}

qint32 OAIBiographyExperience::getEndYear() const {
    return m_end_year;
}
void OAIBiographyExperience::setEndYear(const qint32 &end_year) {
    m_end_year = end_year;
    m_end_year_isSet = true;
}

bool OAIBiographyExperience::is_end_year_Set() const{
    return m_end_year_isSet;
}

bool OAIBiographyExperience::is_end_year_Valid() const{
    return m_end_year_isValid;
}

qint32 OAIBiographyExperience::getId() const {
    return m_id;
}
void OAIBiographyExperience::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBiographyExperience::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBiographyExperience::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBiographyExperience::getOrganisation() const {
    return m_organisation;
}
void OAIBiographyExperience::setOrganisation(const QString &organisation) {
    m_organisation = organisation;
    m_organisation_isSet = true;
}

bool OAIBiographyExperience::is_organisation_Set() const{
    return m_organisation_isSet;
}

bool OAIBiographyExperience::is_organisation_Valid() const{
    return m_organisation_isValid;
}

qint32 OAIBiographyExperience::getStartMonth() const {
    return m_start_month;
}
void OAIBiographyExperience::setStartMonth(const qint32 &start_month) {
    m_start_month = start_month;
    m_start_month_isSet = true;
}

bool OAIBiographyExperience::is_start_month_Set() const{
    return m_start_month_isSet;
}

bool OAIBiographyExperience::is_start_month_Valid() const{
    return m_start_month_isValid;
}

qint32 OAIBiographyExperience::getStartYear() const {
    return m_start_year;
}
void OAIBiographyExperience::setStartYear(const qint32 &start_year) {
    m_start_year = start_year;
    m_start_year_isSet = true;
}

bool OAIBiographyExperience::is_start_year_Set() const{
    return m_start_year_isSet;
}

bool OAIBiographyExperience::is_start_year_Valid() const{
    return m_start_year_isValid;
}

QString OAIBiographyExperience::getTitle() const {
    return m_title;
}
void OAIBiographyExperience::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIBiographyExperience::is_title_Set() const{
    return m_title_isSet;
}

bool OAIBiographyExperience::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIBiographyExperience::getType() const {
    return m_type;
}
void OAIBiographyExperience::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBiographyExperience::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBiographyExperience::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIBiographyExperience::getTypeId() const {
    return m_type_id;
}
void OAIBiographyExperience::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIBiographyExperience::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIBiographyExperience::is_type_id_Valid() const{
    return m_type_id_isValid;
}

bool OAIBiographyExperience::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organisation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBiographyExperience::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
