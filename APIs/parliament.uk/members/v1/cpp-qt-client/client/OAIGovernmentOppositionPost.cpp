/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGovernmentOppositionPost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGovernmentOppositionPost::OAIGovernmentOppositionPost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGovernmentOppositionPost::OAIGovernmentOppositionPost() {
    this->initializeModel();
}

OAIGovernmentOppositionPost::~OAIGovernmentOppositionPost() {}

void OAIGovernmentOppositionPost::initializeModel() {

    m_created_when_isSet = false;
    m_created_when_isValid = false;

    m_government_departments_isSet = false;
    m_government_departments_isValid = false;

    m_hansard_name_isSet = false;
    m_hansard_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_post_holders_isSet = false;
    m_post_holders_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGovernmentOppositionPost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGovernmentOppositionPost::fromJsonObject(QJsonObject json) {

    m_created_when_isValid = ::OpenAPI::fromJsonValue(m_created_when, json[QString("createdWhen")]);
    m_created_when_isSet = !json[QString("createdWhen")].isNull() && m_created_when_isValid;

    m_government_departments_isValid = ::OpenAPI::fromJsonValue(m_government_departments, json[QString("governmentDepartments")]);
    m_government_departments_isSet = !json[QString("governmentDepartments")].isNull() && m_government_departments_isValid;

    m_hansard_name_isValid = ::OpenAPI::fromJsonValue(m_hansard_name, json[QString("hansardName")]);
    m_hansard_name_isSet = !json[QString("hansardName")].isNull() && m_hansard_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_post_holders_isValid = ::OpenAPI::fromJsonValue(m_post_holders, json[QString("postHolders")]);
    m_post_holders_isSet = !json[QString("postHolders")].isNull() && m_post_holders_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGovernmentOppositionPost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGovernmentOppositionPost::asJsonObject() const {
    QJsonObject obj;
    if (m_created_when_isSet) {
        obj.insert(QString("createdWhen"), ::OpenAPI::toJsonValue(m_created_when));
    }
    if (m_government_departments.size() > 0) {
        obj.insert(QString("governmentDepartments"), ::OpenAPI::toJsonValue(m_government_departments));
    }
    if (m_hansard_name_isSet) {
        obj.insert(QString("hansardName"), ::OpenAPI::toJsonValue(m_hansard_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_post_holders.size() > 0) {
        obj.insert(QString("postHolders"), ::OpenAPI::toJsonValue(m_post_holders));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QDateTime OAIGovernmentOppositionPost::getCreatedWhen() const {
    return m_created_when;
}
void OAIGovernmentOppositionPost::setCreatedWhen(const QDateTime &created_when) {
    m_created_when = created_when;
    m_created_when_isSet = true;
}

bool OAIGovernmentOppositionPost::is_created_when_Set() const{
    return m_created_when_isSet;
}

bool OAIGovernmentOppositionPost::is_created_when_Valid() const{
    return m_created_when_isValid;
}

QList<OAIGovernmentDepartment> OAIGovernmentOppositionPost::getGovernmentDepartments() const {
    return m_government_departments;
}
void OAIGovernmentOppositionPost::setGovernmentDepartments(const QList<OAIGovernmentDepartment> &government_departments) {
    m_government_departments = government_departments;
    m_government_departments_isSet = true;
}

bool OAIGovernmentOppositionPost::is_government_departments_Set() const{
    return m_government_departments_isSet;
}

bool OAIGovernmentOppositionPost::is_government_departments_Valid() const{
    return m_government_departments_isValid;
}

QString OAIGovernmentOppositionPost::getHansardName() const {
    return m_hansard_name;
}
void OAIGovernmentOppositionPost::setHansardName(const QString &hansard_name) {
    m_hansard_name = hansard_name;
    m_hansard_name_isSet = true;
}

bool OAIGovernmentOppositionPost::is_hansard_name_Set() const{
    return m_hansard_name_isSet;
}

bool OAIGovernmentOppositionPost::is_hansard_name_Valid() const{
    return m_hansard_name_isValid;
}

qint32 OAIGovernmentOppositionPost::getId() const {
    return m_id;
}
void OAIGovernmentOppositionPost::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGovernmentOppositionPost::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGovernmentOppositionPost::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGovernmentOppositionPost::getName() const {
    return m_name;
}
void OAIGovernmentOppositionPost::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGovernmentOppositionPost::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGovernmentOppositionPost::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGovernmentOppositionPost::getOrder() const {
    return m_order;
}
void OAIGovernmentOppositionPost::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIGovernmentOppositionPost::is_order_Set() const{
    return m_order_isSet;
}

bool OAIGovernmentOppositionPost::is_order_Valid() const{
    return m_order_isValid;
}

QList<OAIGovernmentOppositionPostHolder> OAIGovernmentOppositionPost::getPostHolders() const {
    return m_post_holders;
}
void OAIGovernmentOppositionPost::setPostHolders(const QList<OAIGovernmentOppositionPostHolder> &post_holders) {
    m_post_holders = post_holders;
    m_post_holders_isSet = true;
}

bool OAIGovernmentOppositionPost::is_post_holders_Set() const{
    return m_post_holders_isSet;
}

bool OAIGovernmentOppositionPost::is_post_holders_Valid() const{
    return m_post_holders_isValid;
}

OAIPostType OAIGovernmentOppositionPost::getType() const {
    return m_type;
}
void OAIGovernmentOppositionPost::setType(const OAIPostType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGovernmentOppositionPost::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGovernmentOppositionPost::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGovernmentOppositionPost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_when_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_government_departments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hansard_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_holders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGovernmentOppositionPost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
