/**
 * Members API
 * An API which retrieves Members data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDebateContribution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDebateContribution::OAIDebateContribution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDebateContribution::OAIDebateContribution() {
    this->initializeModel();
}

OAIDebateContribution::~OAIDebateContribution() {}

void OAIDebateContribution::initializeModel() {

    m_answer_count_isSet = false;
    m_answer_count_isValid = false;

    m_debate_id_isSet = false;
    m_debate_id_isValid = false;

    m_debate_title_isSet = false;
    m_debate_title_isValid = false;

    m_debate_website_id_isSet = false;
    m_debate_website_id_isValid = false;

    m_first_timecode_isSet = false;
    m_first_timecode_isValid = false;

    m_house_isSet = false;
    m_house_isValid = false;

    m_intervention_count_isSet = false;
    m_intervention_count_isValid = false;

    m_points_of_order_count_isSet = false;
    m_points_of_order_count_isValid = false;

    m_question_count_isSet = false;
    m_question_count_isValid = false;

    m_section_isSet = false;
    m_section_isValid = false;

    m_sitting_date_isSet = false;
    m_sitting_date_isValid = false;

    m_speech_count_isSet = false;
    m_speech_count_isValid = false;

    m_statements_count_isSet = false;
    m_statements_count_isValid = false;

    m_supplementary_question_count_isSet = false;
    m_supplementary_question_count_isValid = false;

    m_total_contributions_isSet = false;
    m_total_contributions_isValid = false;
}

void OAIDebateContribution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDebateContribution::fromJsonObject(QJsonObject json) {

    m_answer_count_isValid = ::OpenAPI::fromJsonValue(m_answer_count, json[QString("answerCount")]);
    m_answer_count_isSet = !json[QString("answerCount")].isNull() && m_answer_count_isValid;

    m_debate_id_isValid = ::OpenAPI::fromJsonValue(m_debate_id, json[QString("debateId")]);
    m_debate_id_isSet = !json[QString("debateId")].isNull() && m_debate_id_isValid;

    m_debate_title_isValid = ::OpenAPI::fromJsonValue(m_debate_title, json[QString("debateTitle")]);
    m_debate_title_isSet = !json[QString("debateTitle")].isNull() && m_debate_title_isValid;

    m_debate_website_id_isValid = ::OpenAPI::fromJsonValue(m_debate_website_id, json[QString("debateWebsiteId")]);
    m_debate_website_id_isSet = !json[QString("debateWebsiteId")].isNull() && m_debate_website_id_isValid;

    m_first_timecode_isValid = ::OpenAPI::fromJsonValue(m_first_timecode, json[QString("firstTimecode")]);
    m_first_timecode_isSet = !json[QString("firstTimecode")].isNull() && m_first_timecode_isValid;

    m_house_isValid = ::OpenAPI::fromJsonValue(m_house, json[QString("house")]);
    m_house_isSet = !json[QString("house")].isNull() && m_house_isValid;

    m_intervention_count_isValid = ::OpenAPI::fromJsonValue(m_intervention_count, json[QString("interventionCount")]);
    m_intervention_count_isSet = !json[QString("interventionCount")].isNull() && m_intervention_count_isValid;

    m_points_of_order_count_isValid = ::OpenAPI::fromJsonValue(m_points_of_order_count, json[QString("pointsOfOrderCount")]);
    m_points_of_order_count_isSet = !json[QString("pointsOfOrderCount")].isNull() && m_points_of_order_count_isValid;

    m_question_count_isValid = ::OpenAPI::fromJsonValue(m_question_count, json[QString("questionCount")]);
    m_question_count_isSet = !json[QString("questionCount")].isNull() && m_question_count_isValid;

    m_section_isValid = ::OpenAPI::fromJsonValue(m_section, json[QString("section")]);
    m_section_isSet = !json[QString("section")].isNull() && m_section_isValid;

    m_sitting_date_isValid = ::OpenAPI::fromJsonValue(m_sitting_date, json[QString("sittingDate")]);
    m_sitting_date_isSet = !json[QString("sittingDate")].isNull() && m_sitting_date_isValid;

    m_speech_count_isValid = ::OpenAPI::fromJsonValue(m_speech_count, json[QString("speechCount")]);
    m_speech_count_isSet = !json[QString("speechCount")].isNull() && m_speech_count_isValid;

    m_statements_count_isValid = ::OpenAPI::fromJsonValue(m_statements_count, json[QString("statementsCount")]);
    m_statements_count_isSet = !json[QString("statementsCount")].isNull() && m_statements_count_isValid;

    m_supplementary_question_count_isValid = ::OpenAPI::fromJsonValue(m_supplementary_question_count, json[QString("supplementaryQuestionCount")]);
    m_supplementary_question_count_isSet = !json[QString("supplementaryQuestionCount")].isNull() && m_supplementary_question_count_isValid;

    m_total_contributions_isValid = ::OpenAPI::fromJsonValue(m_total_contributions, json[QString("totalContributions")]);
    m_total_contributions_isSet = !json[QString("totalContributions")].isNull() && m_total_contributions_isValid;
}

QString OAIDebateContribution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDebateContribution::asJsonObject() const {
    QJsonObject obj;
    if (m_answer_count_isSet) {
        obj.insert(QString("answerCount"), ::OpenAPI::toJsonValue(m_answer_count));
    }
    if (m_debate_id_isSet) {
        obj.insert(QString("debateId"), ::OpenAPI::toJsonValue(m_debate_id));
    }
    if (m_debate_title_isSet) {
        obj.insert(QString("debateTitle"), ::OpenAPI::toJsonValue(m_debate_title));
    }
    if (m_debate_website_id_isSet) {
        obj.insert(QString("debateWebsiteId"), ::OpenAPI::toJsonValue(m_debate_website_id));
    }
    if (m_first_timecode_isSet) {
        obj.insert(QString("firstTimecode"), ::OpenAPI::toJsonValue(m_first_timecode));
    }
    if (m_house_isSet) {
        obj.insert(QString("house"), ::OpenAPI::toJsonValue(m_house));
    }
    if (m_intervention_count_isSet) {
        obj.insert(QString("interventionCount"), ::OpenAPI::toJsonValue(m_intervention_count));
    }
    if (m_points_of_order_count_isSet) {
        obj.insert(QString("pointsOfOrderCount"), ::OpenAPI::toJsonValue(m_points_of_order_count));
    }
    if (m_question_count_isSet) {
        obj.insert(QString("questionCount"), ::OpenAPI::toJsonValue(m_question_count));
    }
    if (m_section_isSet) {
        obj.insert(QString("section"), ::OpenAPI::toJsonValue(m_section));
    }
    if (m_sitting_date_isSet) {
        obj.insert(QString("sittingDate"), ::OpenAPI::toJsonValue(m_sitting_date));
    }
    if (m_speech_count_isSet) {
        obj.insert(QString("speechCount"), ::OpenAPI::toJsonValue(m_speech_count));
    }
    if (m_statements_count_isSet) {
        obj.insert(QString("statementsCount"), ::OpenAPI::toJsonValue(m_statements_count));
    }
    if (m_supplementary_question_count_isSet) {
        obj.insert(QString("supplementaryQuestionCount"), ::OpenAPI::toJsonValue(m_supplementary_question_count));
    }
    if (m_total_contributions_isSet) {
        obj.insert(QString("totalContributions"), ::OpenAPI::toJsonValue(m_total_contributions));
    }
    return obj;
}

qint32 OAIDebateContribution::getAnswerCount() const {
    return m_answer_count;
}
void OAIDebateContribution::setAnswerCount(const qint32 &answer_count) {
    m_answer_count = answer_count;
    m_answer_count_isSet = true;
}

bool OAIDebateContribution::is_answer_count_Set() const{
    return m_answer_count_isSet;
}

bool OAIDebateContribution::is_answer_count_Valid() const{
    return m_answer_count_isValid;
}

qint32 OAIDebateContribution::getDebateId() const {
    return m_debate_id;
}
void OAIDebateContribution::setDebateId(const qint32 &debate_id) {
    m_debate_id = debate_id;
    m_debate_id_isSet = true;
}

bool OAIDebateContribution::is_debate_id_Set() const{
    return m_debate_id_isSet;
}

bool OAIDebateContribution::is_debate_id_Valid() const{
    return m_debate_id_isValid;
}

QString OAIDebateContribution::getDebateTitle() const {
    return m_debate_title;
}
void OAIDebateContribution::setDebateTitle(const QString &debate_title) {
    m_debate_title = debate_title;
    m_debate_title_isSet = true;
}

bool OAIDebateContribution::is_debate_title_Set() const{
    return m_debate_title_isSet;
}

bool OAIDebateContribution::is_debate_title_Valid() const{
    return m_debate_title_isValid;
}

QString OAIDebateContribution::getDebateWebsiteId() const {
    return m_debate_website_id;
}
void OAIDebateContribution::setDebateWebsiteId(const QString &debate_website_id) {
    m_debate_website_id = debate_website_id;
    m_debate_website_id_isSet = true;
}

bool OAIDebateContribution::is_debate_website_id_Set() const{
    return m_debate_website_id_isSet;
}

bool OAIDebateContribution::is_debate_website_id_Valid() const{
    return m_debate_website_id_isValid;
}

QDateTime OAIDebateContribution::getFirstTimecode() const {
    return m_first_timecode;
}
void OAIDebateContribution::setFirstTimecode(const QDateTime &first_timecode) {
    m_first_timecode = first_timecode;
    m_first_timecode_isSet = true;
}

bool OAIDebateContribution::is_first_timecode_Set() const{
    return m_first_timecode_isSet;
}

bool OAIDebateContribution::is_first_timecode_Valid() const{
    return m_first_timecode_isValid;
}

QString OAIDebateContribution::getHouse() const {
    return m_house;
}
void OAIDebateContribution::setHouse(const QString &house) {
    m_house = house;
    m_house_isSet = true;
}

bool OAIDebateContribution::is_house_Set() const{
    return m_house_isSet;
}

bool OAIDebateContribution::is_house_Valid() const{
    return m_house_isValid;
}

qint32 OAIDebateContribution::getInterventionCount() const {
    return m_intervention_count;
}
void OAIDebateContribution::setInterventionCount(const qint32 &intervention_count) {
    m_intervention_count = intervention_count;
    m_intervention_count_isSet = true;
}

bool OAIDebateContribution::is_intervention_count_Set() const{
    return m_intervention_count_isSet;
}

bool OAIDebateContribution::is_intervention_count_Valid() const{
    return m_intervention_count_isValid;
}

qint32 OAIDebateContribution::getPointsOfOrderCount() const {
    return m_points_of_order_count;
}
void OAIDebateContribution::setPointsOfOrderCount(const qint32 &points_of_order_count) {
    m_points_of_order_count = points_of_order_count;
    m_points_of_order_count_isSet = true;
}

bool OAIDebateContribution::is_points_of_order_count_Set() const{
    return m_points_of_order_count_isSet;
}

bool OAIDebateContribution::is_points_of_order_count_Valid() const{
    return m_points_of_order_count_isValid;
}

qint32 OAIDebateContribution::getQuestionCount() const {
    return m_question_count;
}
void OAIDebateContribution::setQuestionCount(const qint32 &question_count) {
    m_question_count = question_count;
    m_question_count_isSet = true;
}

bool OAIDebateContribution::is_question_count_Set() const{
    return m_question_count_isSet;
}

bool OAIDebateContribution::is_question_count_Valid() const{
    return m_question_count_isValid;
}

QString OAIDebateContribution::getSection() const {
    return m_section;
}
void OAIDebateContribution::setSection(const QString &section) {
    m_section = section;
    m_section_isSet = true;
}

bool OAIDebateContribution::is_section_Set() const{
    return m_section_isSet;
}

bool OAIDebateContribution::is_section_Valid() const{
    return m_section_isValid;
}

QDateTime OAIDebateContribution::getSittingDate() const {
    return m_sitting_date;
}
void OAIDebateContribution::setSittingDate(const QDateTime &sitting_date) {
    m_sitting_date = sitting_date;
    m_sitting_date_isSet = true;
}

bool OAIDebateContribution::is_sitting_date_Set() const{
    return m_sitting_date_isSet;
}

bool OAIDebateContribution::is_sitting_date_Valid() const{
    return m_sitting_date_isValid;
}

qint32 OAIDebateContribution::getSpeechCount() const {
    return m_speech_count;
}
void OAIDebateContribution::setSpeechCount(const qint32 &speech_count) {
    m_speech_count = speech_count;
    m_speech_count_isSet = true;
}

bool OAIDebateContribution::is_speech_count_Set() const{
    return m_speech_count_isSet;
}

bool OAIDebateContribution::is_speech_count_Valid() const{
    return m_speech_count_isValid;
}

qint32 OAIDebateContribution::getStatementsCount() const {
    return m_statements_count;
}
void OAIDebateContribution::setStatementsCount(const qint32 &statements_count) {
    m_statements_count = statements_count;
    m_statements_count_isSet = true;
}

bool OAIDebateContribution::is_statements_count_Set() const{
    return m_statements_count_isSet;
}

bool OAIDebateContribution::is_statements_count_Valid() const{
    return m_statements_count_isValid;
}

qint32 OAIDebateContribution::getSupplementaryQuestionCount() const {
    return m_supplementary_question_count;
}
void OAIDebateContribution::setSupplementaryQuestionCount(const qint32 &supplementary_question_count) {
    m_supplementary_question_count = supplementary_question_count;
    m_supplementary_question_count_isSet = true;
}

bool OAIDebateContribution::is_supplementary_question_count_Set() const{
    return m_supplementary_question_count_isSet;
}

bool OAIDebateContribution::is_supplementary_question_count_Valid() const{
    return m_supplementary_question_count_isValid;
}

qint32 OAIDebateContribution::getTotalContributions() const {
    return m_total_contributions;
}
void OAIDebateContribution::setTotalContributions(const qint32 &total_contributions) {
    m_total_contributions = total_contributions;
    m_total_contributions_isSet = true;
}

bool OAIDebateContribution::is_total_contributions_Set() const{
    return m_total_contributions_isSet;
}

bool OAIDebateContribution::is_total_contributions_Valid() const{
    return m_total_contributions_isValid;
}

bool OAIDebateContribution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answer_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debate_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debate_website_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_timecode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intervention_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_of_order_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sitting_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speech_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statements_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplementary_question_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDebateContribution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
