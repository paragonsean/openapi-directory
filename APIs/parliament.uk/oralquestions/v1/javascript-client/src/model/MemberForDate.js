/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MemberForDate model module.
 * @module model/MemberForDate
 * @version v1
 */
class MemberForDate {
    /**
     * Constructs a new <code>MemberForDate</code>.
     * @alias module:model/MemberForDate
     */
    constructor() { 
        
        MemberForDate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MemberForDate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MemberForDate} obj Optional instance to populate.
     * @return {module:model/MemberForDate} The populated <code>MemberForDate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MemberForDate();

            if (data.hasOwnProperty('Constituency')) {
                obj['Constituency'] = ApiClient.convertToType(data['Constituency'], 'String');
            }
            if (data.hasOwnProperty('ListAs')) {
                obj['ListAs'] = ApiClient.convertToType(data['ListAs'], 'String');
            }
            if (data.hasOwnProperty('MnisId')) {
                obj['MnisId'] = ApiClient.convertToType(data['MnisId'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Party')) {
                obj['Party'] = ApiClient.convertToType(data['Party'], 'String');
            }
            if (data.hasOwnProperty('PartyColour')) {
                obj['PartyColour'] = ApiClient.convertToType(data['PartyColour'], 'String');
            }
            if (data.hasOwnProperty('PartyId')) {
                obj['PartyId'] = ApiClient.convertToType(data['PartyId'], 'Number');
            }
            if (data.hasOwnProperty('PhotoUrl')) {
                obj['PhotoUrl'] = ApiClient.convertToType(data['PhotoUrl'], 'String');
            }
            if (data.hasOwnProperty('PimsId')) {
                obj['PimsId'] = ApiClient.convertToType(data['PimsId'], 'Number');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MemberForDate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MemberForDate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Constituency'] && !(typeof data['Constituency'] === 'string' || data['Constituency'] instanceof String)) {
            throw new Error("Expected the field `Constituency` to be a primitive type in the JSON string but got " + data['Constituency']);
        }
        // ensure the json data is a string
        if (data['ListAs'] && !(typeof data['ListAs'] === 'string' || data['ListAs'] instanceof String)) {
            throw new Error("Expected the field `ListAs` to be a primitive type in the JSON string but got " + data['ListAs']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Party'] && !(typeof data['Party'] === 'string' || data['Party'] instanceof String)) {
            throw new Error("Expected the field `Party` to be a primitive type in the JSON string but got " + data['Party']);
        }
        // ensure the json data is a string
        if (data['PartyColour'] && !(typeof data['PartyColour'] === 'string' || data['PartyColour'] instanceof String)) {
            throw new Error("Expected the field `PartyColour` to be a primitive type in the JSON string but got " + data['PartyColour']);
        }
        // ensure the json data is a string
        if (data['PhotoUrl'] && !(typeof data['PhotoUrl'] === 'string' || data['PhotoUrl'] instanceof String)) {
            throw new Error("Expected the field `PhotoUrl` to be a primitive type in the JSON string but got " + data['PhotoUrl']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }

        return true;
    }


}



/**
 * @member {String} Constituency
 */
MemberForDate.prototype['Constituency'] = undefined;

/**
 * @member {String} ListAs
 */
MemberForDate.prototype['ListAs'] = undefined;

/**
 * @member {Number} MnisId
 */
MemberForDate.prototype['MnisId'] = undefined;

/**
 * @member {String} Name
 */
MemberForDate.prototype['Name'] = undefined;

/**
 * @member {String} Party
 */
MemberForDate.prototype['Party'] = undefined;

/**
 * @member {String} PartyColour
 */
MemberForDate.prototype['PartyColour'] = undefined;

/**
 * @member {Number} PartyId
 */
MemberForDate.prototype['PartyId'] = undefined;

/**
 * @member {String} PhotoUrl
 */
MemberForDate.prototype['PhotoUrl'] = undefined;

/**
 * @member {Number} PimsId
 */
MemberForDate.prototype['PimsId'] = undefined;

/**
 * @member {String} Status
 */
MemberForDate.prototype['Status'] = undefined;






export default MemberForDate;

