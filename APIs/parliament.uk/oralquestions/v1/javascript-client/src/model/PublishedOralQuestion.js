/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MemberForDate from './MemberForDate';

/**
 * The PublishedOralQuestion model module.
 * @module model/PublishedOralQuestion
 * @version v1
 */
class PublishedOralQuestion {
    /**
     * Constructs a new <code>PublishedOralQuestion</code>.
     * @alias module:model/PublishedOralQuestion
     */
    constructor() { 
        
        PublishedOralQuestion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PublishedOralQuestion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublishedOralQuestion} obj Optional instance to populate.
     * @return {module:model/PublishedOralQuestion} The populated <code>PublishedOralQuestion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublishedOralQuestion();

            if (data.hasOwnProperty('AnsweringBody')) {
                obj['AnsweringBody'] = ApiClient.convertToType(data['AnsweringBody'], 'String');
            }
            if (data.hasOwnProperty('AnsweringBodyId')) {
                obj['AnsweringBodyId'] = ApiClient.convertToType(data['AnsweringBodyId'], 'Number');
            }
            if (data.hasOwnProperty('AnsweringMinister')) {
                obj['AnsweringMinister'] = MemberForDate.constructFromObject(data['AnsweringMinister']);
            }
            if (data.hasOwnProperty('AnsweringMinisterId')) {
                obj['AnsweringMinisterId'] = ApiClient.convertToType(data['AnsweringMinisterId'], 'Number');
            }
            if (data.hasOwnProperty('AnsweringMinisterTitle')) {
                obj['AnsweringMinisterTitle'] = ApiClient.convertToType(data['AnsweringMinisterTitle'], 'String');
            }
            if (data.hasOwnProperty('AnsweringWhen')) {
                obj['AnsweringWhen'] = ApiClient.convertToType(data['AnsweringWhen'], 'Date');
            }
            if (data.hasOwnProperty('AskingMember')) {
                obj['AskingMember'] = MemberForDate.constructFromObject(data['AskingMember']);
            }
            if (data.hasOwnProperty('AskingMemberId')) {
                obj['AskingMemberId'] = ApiClient.convertToType(data['AskingMemberId'], 'Number');
            }
            if (data.hasOwnProperty('DeclarableInterestDetail')) {
                obj['DeclarableInterestDetail'] = ApiClient.convertToType(data['DeclarableInterestDetail'], 'String');
            }
            if (data.hasOwnProperty('HansardLink')) {
                obj['HansardLink'] = ApiClient.convertToType(data['HansardLink'], 'String');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'Number');
            }
            if (data.hasOwnProperty('Number')) {
                obj['Number'] = ApiClient.convertToType(data['Number'], 'Number');
            }
            if (data.hasOwnProperty('QuestionText')) {
                obj['QuestionText'] = ApiClient.convertToType(data['QuestionText'], 'String');
            }
            if (data.hasOwnProperty('QuestionType')) {
                obj['QuestionType'] = ApiClient.convertToType(data['QuestionType'], 'String');
            }
            if (data.hasOwnProperty('RemovedFromToBeAskedWhen')) {
                obj['RemovedFromToBeAskedWhen'] = ApiClient.convertToType(data['RemovedFromToBeAskedWhen'], 'Date');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('TabledWhen')) {
                obj['TabledWhen'] = ApiClient.convertToType(data['TabledWhen'], 'Date');
            }
            if (data.hasOwnProperty('UIN')) {
                obj['UIN'] = ApiClient.convertToType(data['UIN'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublishedOralQuestion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublishedOralQuestion</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AnsweringBody'] && !(typeof data['AnsweringBody'] === 'string' || data['AnsweringBody'] instanceof String)) {
            throw new Error("Expected the field `AnsweringBody` to be a primitive type in the JSON string but got " + data['AnsweringBody']);
        }
        // validate the optional field `AnsweringMinister`
        if (data['AnsweringMinister']) { // data not null
          MemberForDate.validateJSON(data['AnsweringMinister']);
        }
        // ensure the json data is a string
        if (data['AnsweringMinisterTitle'] && !(typeof data['AnsweringMinisterTitle'] === 'string' || data['AnsweringMinisterTitle'] instanceof String)) {
            throw new Error("Expected the field `AnsweringMinisterTitle` to be a primitive type in the JSON string but got " + data['AnsweringMinisterTitle']);
        }
        // validate the optional field `AskingMember`
        if (data['AskingMember']) { // data not null
          MemberForDate.validateJSON(data['AskingMember']);
        }
        // ensure the json data is a string
        if (data['DeclarableInterestDetail'] && !(typeof data['DeclarableInterestDetail'] === 'string' || data['DeclarableInterestDetail'] instanceof String)) {
            throw new Error("Expected the field `DeclarableInterestDetail` to be a primitive type in the JSON string but got " + data['DeclarableInterestDetail']);
        }
        // ensure the json data is a string
        if (data['HansardLink'] && !(typeof data['HansardLink'] === 'string' || data['HansardLink'] instanceof String)) {
            throw new Error("Expected the field `HansardLink` to be a primitive type in the JSON string but got " + data['HansardLink']);
        }
        // ensure the json data is a string
        if (data['QuestionText'] && !(typeof data['QuestionText'] === 'string' || data['QuestionText'] instanceof String)) {
            throw new Error("Expected the field `QuestionText` to be a primitive type in the JSON string but got " + data['QuestionText']);
        }
        // ensure the json data is a string
        if (data['QuestionType'] && !(typeof data['QuestionType'] === 'string' || data['QuestionType'] instanceof String)) {
            throw new Error("Expected the field `QuestionType` to be a primitive type in the JSON string but got " + data['QuestionType']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }

        return true;
    }


}



/**
 * @member {String} AnsweringBody
 */
PublishedOralQuestion.prototype['AnsweringBody'] = undefined;

/**
 * @member {Number} AnsweringBodyId
 */
PublishedOralQuestion.prototype['AnsweringBodyId'] = undefined;

/**
 * @member {module:model/MemberForDate} AnsweringMinister
 */
PublishedOralQuestion.prototype['AnsweringMinister'] = undefined;

/**
 * @member {Number} AnsweringMinisterId
 */
PublishedOralQuestion.prototype['AnsweringMinisterId'] = undefined;

/**
 * @member {String} AnsweringMinisterTitle
 */
PublishedOralQuestion.prototype['AnsweringMinisterTitle'] = undefined;

/**
 * @member {Date} AnsweringWhen
 */
PublishedOralQuestion.prototype['AnsweringWhen'] = undefined;

/**
 * @member {module:model/MemberForDate} AskingMember
 */
PublishedOralQuestion.prototype['AskingMember'] = undefined;

/**
 * @member {Number} AskingMemberId
 */
PublishedOralQuestion.prototype['AskingMemberId'] = undefined;

/**
 * @member {String} DeclarableInterestDetail
 */
PublishedOralQuestion.prototype['DeclarableInterestDetail'] = undefined;

/**
 * @member {String} HansardLink
 */
PublishedOralQuestion.prototype['HansardLink'] = undefined;

/**
 * @member {Number} Id
 */
PublishedOralQuestion.prototype['Id'] = undefined;

/**
 * @member {Number} Number
 */
PublishedOralQuestion.prototype['Number'] = undefined;

/**
 * @member {String} QuestionText
 */
PublishedOralQuestion.prototype['QuestionText'] = undefined;

/**
 * @member {module:model/PublishedOralQuestion.QuestionTypeEnum} QuestionType
 */
PublishedOralQuestion.prototype['QuestionType'] = undefined;

/**
 * @member {Date} RemovedFromToBeAskedWhen
 */
PublishedOralQuestion.prototype['RemovedFromToBeAskedWhen'] = undefined;

/**
 * @member {module:model/PublishedOralQuestion.StatusEnum} Status
 */
PublishedOralQuestion.prototype['Status'] = undefined;

/**
 * @member {Date} TabledWhen
 */
PublishedOralQuestion.prototype['TabledWhen'] = undefined;

/**
 * @member {Number} UIN
 */
PublishedOralQuestion.prototype['UIN'] = undefined;





/**
 * Allowed values for the <code>QuestionType</code> property.
 * @enum {String}
 * @readonly
 */
PublishedOralQuestion['QuestionTypeEnum'] = {

    /**
     * value: "Substantive"
     * @const
     */
    "Substantive": "Substantive",

    /**
     * value: "Topical"
     * @const
     */
    "Topical": "Topical"
};


/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
PublishedOralQuestion['StatusEnum'] = {

    /**
     * value: "Submitted"
     * @const
     */
    "Submitted": "Submitted",

    /**
     * value: "Carded"
     * @const
     */
    "Carded": "Carded",

    /**
     * value: "Unsaved"
     * @const
     */
    "Unsaved": "Unsaved",

    /**
     * value: "ReadyForShuffle"
     * @const
     */
    "ReadyForShuffle": "ReadyForShuffle",

    /**
     * value: "ToBeAsked"
     * @const
     */
    "ToBeAsked": "ToBeAsked",

    /**
     * value: "ShuffleUnsuccessful"
     * @const
     */
    "ShuffleUnsuccessful": "ShuffleUnsuccessful",

    /**
     * value: "Withdrawn"
     * @const
     */
    "Withdrawn": "Withdrawn",

    /**
     * value: "Unstarred"
     * @const
     */
    "Unstarred": "Unstarred",

    /**
     * value: "Draft"
     * @const
     */
    "Draft": "Draft",

    /**
     * value: "ForReview"
     * @const
     */
    "ForReview": "ForReview",

    /**
     * value: "Unasked"
     * @const
     */
    "Unasked": "Unasked",

    /**
     * value: "Transferred"
     * @const
     */
    "Transferred": "Transferred"
};



export default PublishedOralQuestion;

