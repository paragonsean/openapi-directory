/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PublishedOralQuestionTime model module.
 * @module model/PublishedOralQuestionTime
 * @version v1
 */
class PublishedOralQuestionTime {
    /**
     * Constructs a new <code>PublishedOralQuestionTime</code>.
     * @alias module:model/PublishedOralQuestionTime
     */
    constructor() { 
        
        PublishedOralQuestionTime.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PublishedOralQuestionTime</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublishedOralQuestionTime} obj Optional instance to populate.
     * @return {module:model/PublishedOralQuestionTime} The populated <code>PublishedOralQuestionTime</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublishedOralQuestionTime();

            if (data.hasOwnProperty('AnsweringBodyNames')) {
                obj['AnsweringBodyNames'] = ApiClient.convertToType(data['AnsweringBodyNames'], 'String');
            }
            if (data.hasOwnProperty('AnsweringMinisterTitles')) {
                obj['AnsweringMinisterTitles'] = ApiClient.convertToType(data['AnsweringMinisterTitles'], 'String');
            }
            if (data.hasOwnProperty('AnsweringWhen')) {
                obj['AnsweringWhen'] = ApiClient.convertToType(data['AnsweringWhen'], 'Date');
            }
            if (data.hasOwnProperty('DeadlineWhen')) {
                obj['DeadlineWhen'] = ApiClient.convertToType(data['DeadlineWhen'], 'Date');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'Number');
            }
            if (data.hasOwnProperty('SubstantiveTime')) {
                obj['SubstantiveTime'] = ApiClient.convertToType(data['SubstantiveTime'], 'String');
            }
            if (data.hasOwnProperty('TopicalTime')) {
                obj['TopicalTime'] = ApiClient.convertToType(data['TopicalTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublishedOralQuestionTime</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublishedOralQuestionTime</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AnsweringBodyNames'] && !(typeof data['AnsweringBodyNames'] === 'string' || data['AnsweringBodyNames'] instanceof String)) {
            throw new Error("Expected the field `AnsweringBodyNames` to be a primitive type in the JSON string but got " + data['AnsweringBodyNames']);
        }
        // ensure the json data is a string
        if (data['AnsweringMinisterTitles'] && !(typeof data['AnsweringMinisterTitles'] === 'string' || data['AnsweringMinisterTitles'] instanceof String)) {
            throw new Error("Expected the field `AnsweringMinisterTitles` to be a primitive type in the JSON string but got " + data['AnsweringMinisterTitles']);
        }
        // ensure the json data is a string
        if (data['SubstantiveTime'] && !(typeof data['SubstantiveTime'] === 'string' || data['SubstantiveTime'] instanceof String)) {
            throw new Error("Expected the field `SubstantiveTime` to be a primitive type in the JSON string but got " + data['SubstantiveTime']);
        }
        // ensure the json data is a string
        if (data['TopicalTime'] && !(typeof data['TopicalTime'] === 'string' || data['TopicalTime'] instanceof String)) {
            throw new Error("Expected the field `TopicalTime` to be a primitive type in the JSON string but got " + data['TopicalTime']);
        }

        return true;
    }


}



/**
 * @member {String} AnsweringBodyNames
 */
PublishedOralQuestionTime.prototype['AnsweringBodyNames'] = undefined;

/**
 * @member {String} AnsweringMinisterTitles
 */
PublishedOralQuestionTime.prototype['AnsweringMinisterTitles'] = undefined;

/**
 * @member {Date} AnsweringWhen
 */
PublishedOralQuestionTime.prototype['AnsweringWhen'] = undefined;

/**
 * @member {Date} DeadlineWhen
 */
PublishedOralQuestionTime.prototype['DeadlineWhen'] = undefined;

/**
 * @member {Number} Id
 */
PublishedOralQuestionTime.prototype['Id'] = undefined;

/**
 * @member {String} SubstantiveTime
 */
PublishedOralQuestionTime.prototype['SubstantiveTime'] = undefined;

/**
 * @member {String} TopicalTime
 */
PublishedOralQuestionTime.prototype['TopicalTime'] = undefined;






export default PublishedOralQuestionTime;

