/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PublishedOralQuestionQueryParameters model module.
 * @module model/PublishedOralQuestionQueryParameters
 * @version v1
 */
class PublishedOralQuestionQueryParameters {
    /**
     * Constructs a new <code>PublishedOralQuestionQueryParameters</code>.
     * @alias module:model/PublishedOralQuestionQueryParameters
     */
    constructor() { 
        
        PublishedOralQuestionQueryParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PublishedOralQuestionQueryParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublishedOralQuestionQueryParameters} obj Optional instance to populate.
     * @return {module:model/PublishedOralQuestionQueryParameters} The populated <code>PublishedOralQuestionQueryParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublishedOralQuestionQueryParameters();

            if (data.hasOwnProperty('AnsweringBodyIds')) {
                obj['AnsweringBodyIds'] = ApiClient.convertToType(data['AnsweringBodyIds'], ['Number']);
            }
            if (data.hasOwnProperty('AnsweringDateEnd')) {
                obj['AnsweringDateEnd'] = ApiClient.convertToType(data['AnsweringDateEnd'], 'Date');
            }
            if (data.hasOwnProperty('AnsweringDateStart')) {
                obj['AnsweringDateStart'] = ApiClient.convertToType(data['AnsweringDateStart'], 'Date');
            }
            if (data.hasOwnProperty('AskingMemberIds')) {
                obj['AskingMemberIds'] = ApiClient.convertToType(data['AskingMemberIds'], ['Number']);
            }
            if (data.hasOwnProperty('OralQuestionTimeId')) {
                obj['OralQuestionTimeId'] = ApiClient.convertToType(data['OralQuestionTimeId'], 'Number');
            }
            if (data.hasOwnProperty('QuestionType')) {
                obj['QuestionType'] = ApiClient.convertToType(data['QuestionType'], 'String');
            }
            if (data.hasOwnProperty('Skip')) {
                obj['Skip'] = ApiClient.convertToType(data['Skip'], 'Number');
            }
            if (data.hasOwnProperty('Take')) {
                obj['Take'] = ApiClient.convertToType(data['Take'], 'Number');
            }
            if (data.hasOwnProperty('UINs')) {
                obj['UINs'] = ApiClient.convertToType(data['UINs'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublishedOralQuestionQueryParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublishedOralQuestionQueryParameters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['AnsweringBodyIds'])) {
            throw new Error("Expected the field `AnsweringBodyIds` to be an array in the JSON data but got " + data['AnsweringBodyIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['AskingMemberIds'])) {
            throw new Error("Expected the field `AskingMemberIds` to be an array in the JSON data but got " + data['AskingMemberIds']);
        }
        // ensure the json data is a string
        if (data['QuestionType'] && !(typeof data['QuestionType'] === 'string' || data['QuestionType'] instanceof String)) {
            throw new Error("Expected the field `QuestionType` to be a primitive type in the JSON string but got " + data['QuestionType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['UINs'])) {
            throw new Error("Expected the field `UINs` to be an array in the JSON data but got " + data['UINs']);
        }

        return true;
    }


}



/**
 * Which answering body is to respond. A list of answering bodies can be found <a target=\"_blank\" href=\"http://data.parliament.uk/membersdataplatform/services/mnis/referencedata/AnsweringBodies/\">here</a>.
 * @member {Array.<Number>} AnsweringBodyIds
 */
PublishedOralQuestionQueryParameters.prototype['AnsweringBodyIds'] = undefined;

/**
 * Oral Questions where the answering date has been set on or before the date provided. Date format YYYY-MM-DD.
 * @member {Date} AnsweringDateEnd
 */
PublishedOralQuestionQueryParameters.prototype['AnsweringDateEnd'] = undefined;

/**
 * Oral Questions where the answering date has been set on or after the date provided. Date format YYYY-MM-DD.
 * @member {Date} AnsweringDateStart
 */
PublishedOralQuestionQueryParameters.prototype['AnsweringDateStart'] = undefined;

/**
 * The ID of the member asking the question. Lists of member IDs for each house are available <a href=\"http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Commons\" target=\"_blank\">Commons</a> and <a href=\"http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Lords\" target=\"_blank\">Lords</a>.
 * @member {Array.<Number>} AskingMemberIds
 */
PublishedOralQuestionQueryParameters.prototype['AskingMemberIds'] = undefined;

/**
 * Oral Questions where the question is within the question time with the ID provided
 * @member {Number} OralQuestionTimeId
 */
PublishedOralQuestionQueryParameters.prototype['OralQuestionTimeId'] = undefined;

/**
 * Oral Questions where the question type is the selected type, substantive or topical.
 * @member {module:model/PublishedOralQuestionQueryParameters.QuestionTypeEnum} QuestionType
 */
PublishedOralQuestionQueryParameters.prototype['QuestionType'] = undefined;

/**
 * The number of records to skip from the first, default is 0.
 * @member {Number} Skip
 */
PublishedOralQuestionQueryParameters.prototype['Skip'] = undefined;

/**
 * The number of records to return, default is 25, maximum is 100.
 * @member {Number} Take
 */
PublishedOralQuestionQueryParameters.prototype['Take'] = undefined;

/**
 * The UIN for the question - note that UINs reset at the start of each Parliamentary session.
 * @member {Array.<Number>} UINs
 */
PublishedOralQuestionQueryParameters.prototype['UINs'] = undefined;





/**
 * Allowed values for the <code>QuestionType</code> property.
 * @enum {String}
 * @readonly
 */
PublishedOralQuestionQueryParameters['QuestionTypeEnum'] = {

    /**
     * value: "Substantive"
     * @const
     */
    "Substantive": "Substantive",

    /**
     * value: "Topical"
     * @const
     */
    "Topical": "Topical"
};



export default PublishedOralQuestionQueryParameters;

