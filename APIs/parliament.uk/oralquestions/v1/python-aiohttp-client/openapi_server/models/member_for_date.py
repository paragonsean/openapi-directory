# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MemberForDate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constituency: str=None, list_as: str=None, mnis_id: int=None, name: str=None, party: str=None, party_colour: str=None, party_id: int=None, photo_url: str=None, pims_id: int=None, status: str=None):
        """MemberForDate - a model defined in OpenAPI

        :param constituency: The constituency of this MemberForDate.
        :param list_as: The list_as of this MemberForDate.
        :param mnis_id: The mnis_id of this MemberForDate.
        :param name: The name of this MemberForDate.
        :param party: The party of this MemberForDate.
        :param party_colour: The party_colour of this MemberForDate.
        :param party_id: The party_id of this MemberForDate.
        :param photo_url: The photo_url of this MemberForDate.
        :param pims_id: The pims_id of this MemberForDate.
        :param status: The status of this MemberForDate.
        """
        self.openapi_types = {
            'constituency': str,
            'list_as': str,
            'mnis_id': int,
            'name': str,
            'party': str,
            'party_colour': str,
            'party_id': int,
            'photo_url': str,
            'pims_id': int,
            'status': str
        }

        self.attribute_map = {
            'constituency': 'Constituency',
            'list_as': 'ListAs',
            'mnis_id': 'MnisId',
            'name': 'Name',
            'party': 'Party',
            'party_colour': 'PartyColour',
            'party_id': 'PartyId',
            'photo_url': 'PhotoUrl',
            'pims_id': 'PimsId',
            'status': 'Status'
        }

        self._constituency = constituency
        self._list_as = list_as
        self._mnis_id = mnis_id
        self._name = name
        self._party = party
        self._party_colour = party_colour
        self._party_id = party_id
        self._photo_url = photo_url
        self._pims_id = pims_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MemberForDate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MemberForDate of this MemberForDate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constituency(self):
        """Gets the constituency of this MemberForDate.


        :return: The constituency of this MemberForDate.
        :rtype: str
        """
        return self._constituency

    @constituency.setter
    def constituency(self, constituency):
        """Sets the constituency of this MemberForDate.


        :param constituency: The constituency of this MemberForDate.
        :type constituency: str
        """

        self._constituency = constituency

    @property
    def list_as(self):
        """Gets the list_as of this MemberForDate.


        :return: The list_as of this MemberForDate.
        :rtype: str
        """
        return self._list_as

    @list_as.setter
    def list_as(self, list_as):
        """Sets the list_as of this MemberForDate.


        :param list_as: The list_as of this MemberForDate.
        :type list_as: str
        """

        self._list_as = list_as

    @property
    def mnis_id(self):
        """Gets the mnis_id of this MemberForDate.


        :return: The mnis_id of this MemberForDate.
        :rtype: int
        """
        return self._mnis_id

    @mnis_id.setter
    def mnis_id(self, mnis_id):
        """Sets the mnis_id of this MemberForDate.


        :param mnis_id: The mnis_id of this MemberForDate.
        :type mnis_id: int
        """

        self._mnis_id = mnis_id

    @property
    def name(self):
        """Gets the name of this MemberForDate.


        :return: The name of this MemberForDate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MemberForDate.


        :param name: The name of this MemberForDate.
        :type name: str
        """

        self._name = name

    @property
    def party(self):
        """Gets the party of this MemberForDate.


        :return: The party of this MemberForDate.
        :rtype: str
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this MemberForDate.


        :param party: The party of this MemberForDate.
        :type party: str
        """

        self._party = party

    @property
    def party_colour(self):
        """Gets the party_colour of this MemberForDate.


        :return: The party_colour of this MemberForDate.
        :rtype: str
        """
        return self._party_colour

    @party_colour.setter
    def party_colour(self, party_colour):
        """Sets the party_colour of this MemberForDate.


        :param party_colour: The party_colour of this MemberForDate.
        :type party_colour: str
        """

        self._party_colour = party_colour

    @property
    def party_id(self):
        """Gets the party_id of this MemberForDate.


        :return: The party_id of this MemberForDate.
        :rtype: int
        """
        return self._party_id

    @party_id.setter
    def party_id(self, party_id):
        """Sets the party_id of this MemberForDate.


        :param party_id: The party_id of this MemberForDate.
        :type party_id: int
        """

        self._party_id = party_id

    @property
    def photo_url(self):
        """Gets the photo_url of this MemberForDate.


        :return: The photo_url of this MemberForDate.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this MemberForDate.


        :param photo_url: The photo_url of this MemberForDate.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def pims_id(self):
        """Gets the pims_id of this MemberForDate.


        :return: The pims_id of this MemberForDate.
        :rtype: int
        """
        return self._pims_id

    @pims_id.setter
    def pims_id(self, pims_id):
        """Sets the pims_id of this MemberForDate.


        :param pims_id: The pims_id of this MemberForDate.
        :type pims_id: int
        """

        self._pims_id = pims_id

    @property
    def status(self):
        """Gets the status of this MemberForDate.


        :return: The status of this MemberForDate.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MemberForDate.


        :param status: The status of this MemberForDate.
        :type status: str
        """

        self._status = status
