# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.member_for_date import MemberForDate
from openapi_server import util


class PublishedOralQuestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answering_body: str=None, answering_body_id: int=None, answering_minister: MemberForDate=None, answering_minister_id: int=None, answering_minister_title: str=None, answering_when: datetime=None, asking_member: MemberForDate=None, asking_member_id: int=None, declarable_interest_detail: str=None, hansard_link: str=None, id: int=None, number: int=None, question_text: str=None, question_type: str=None, removed_from_to_be_asked_when: datetime=None, status: str=None, tabled_when: datetime=None, uin: int=None):
        """PublishedOralQuestion - a model defined in OpenAPI

        :param answering_body: The answering_body of this PublishedOralQuestion.
        :param answering_body_id: The answering_body_id of this PublishedOralQuestion.
        :param answering_minister: The answering_minister of this PublishedOralQuestion.
        :param answering_minister_id: The answering_minister_id of this PublishedOralQuestion.
        :param answering_minister_title: The answering_minister_title of this PublishedOralQuestion.
        :param answering_when: The answering_when of this PublishedOralQuestion.
        :param asking_member: The asking_member of this PublishedOralQuestion.
        :param asking_member_id: The asking_member_id of this PublishedOralQuestion.
        :param declarable_interest_detail: The declarable_interest_detail of this PublishedOralQuestion.
        :param hansard_link: The hansard_link of this PublishedOralQuestion.
        :param id: The id of this PublishedOralQuestion.
        :param number: The number of this PublishedOralQuestion.
        :param question_text: The question_text of this PublishedOralQuestion.
        :param question_type: The question_type of this PublishedOralQuestion.
        :param removed_from_to_be_asked_when: The removed_from_to_be_asked_when of this PublishedOralQuestion.
        :param status: The status of this PublishedOralQuestion.
        :param tabled_when: The tabled_when of this PublishedOralQuestion.
        :param uin: The uin of this PublishedOralQuestion.
        """
        self.openapi_types = {
            'answering_body': str,
            'answering_body_id': int,
            'answering_minister': MemberForDate,
            'answering_minister_id': int,
            'answering_minister_title': str,
            'answering_when': datetime,
            'asking_member': MemberForDate,
            'asking_member_id': int,
            'declarable_interest_detail': str,
            'hansard_link': str,
            'id': int,
            'number': int,
            'question_text': str,
            'question_type': str,
            'removed_from_to_be_asked_when': datetime,
            'status': str,
            'tabled_when': datetime,
            'uin': int
        }

        self.attribute_map = {
            'answering_body': 'AnsweringBody',
            'answering_body_id': 'AnsweringBodyId',
            'answering_minister': 'AnsweringMinister',
            'answering_minister_id': 'AnsweringMinisterId',
            'answering_minister_title': 'AnsweringMinisterTitle',
            'answering_when': 'AnsweringWhen',
            'asking_member': 'AskingMember',
            'asking_member_id': 'AskingMemberId',
            'declarable_interest_detail': 'DeclarableInterestDetail',
            'hansard_link': 'HansardLink',
            'id': 'Id',
            'number': 'Number',
            'question_text': 'QuestionText',
            'question_type': 'QuestionType',
            'removed_from_to_be_asked_when': 'RemovedFromToBeAskedWhen',
            'status': 'Status',
            'tabled_when': 'TabledWhen',
            'uin': 'UIN'
        }

        self._answering_body = answering_body
        self._answering_body_id = answering_body_id
        self._answering_minister = answering_minister
        self._answering_minister_id = answering_minister_id
        self._answering_minister_title = answering_minister_title
        self._answering_when = answering_when
        self._asking_member = asking_member
        self._asking_member_id = asking_member_id
        self._declarable_interest_detail = declarable_interest_detail
        self._hansard_link = hansard_link
        self._id = id
        self._number = number
        self._question_text = question_text
        self._question_type = question_type
        self._removed_from_to_be_asked_when = removed_from_to_be_asked_when
        self._status = status
        self._tabled_when = tabled_when
        self._uin = uin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublishedOralQuestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublishedOralQuestion of this PublishedOralQuestion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answering_body(self):
        """Gets the answering_body of this PublishedOralQuestion.


        :return: The answering_body of this PublishedOralQuestion.
        :rtype: str
        """
        return self._answering_body

    @answering_body.setter
    def answering_body(self, answering_body):
        """Sets the answering_body of this PublishedOralQuestion.


        :param answering_body: The answering_body of this PublishedOralQuestion.
        :type answering_body: str
        """

        self._answering_body = answering_body

    @property
    def answering_body_id(self):
        """Gets the answering_body_id of this PublishedOralQuestion.


        :return: The answering_body_id of this PublishedOralQuestion.
        :rtype: int
        """
        return self._answering_body_id

    @answering_body_id.setter
    def answering_body_id(self, answering_body_id):
        """Sets the answering_body_id of this PublishedOralQuestion.


        :param answering_body_id: The answering_body_id of this PublishedOralQuestion.
        :type answering_body_id: int
        """

        self._answering_body_id = answering_body_id

    @property
    def answering_minister(self):
        """Gets the answering_minister of this PublishedOralQuestion.


        :return: The answering_minister of this PublishedOralQuestion.
        :rtype: MemberForDate
        """
        return self._answering_minister

    @answering_minister.setter
    def answering_minister(self, answering_minister):
        """Sets the answering_minister of this PublishedOralQuestion.


        :param answering_minister: The answering_minister of this PublishedOralQuestion.
        :type answering_minister: MemberForDate
        """

        self._answering_minister = answering_minister

    @property
    def answering_minister_id(self):
        """Gets the answering_minister_id of this PublishedOralQuestion.


        :return: The answering_minister_id of this PublishedOralQuestion.
        :rtype: int
        """
        return self._answering_minister_id

    @answering_minister_id.setter
    def answering_minister_id(self, answering_minister_id):
        """Sets the answering_minister_id of this PublishedOralQuestion.


        :param answering_minister_id: The answering_minister_id of this PublishedOralQuestion.
        :type answering_minister_id: int
        """

        self._answering_minister_id = answering_minister_id

    @property
    def answering_minister_title(self):
        """Gets the answering_minister_title of this PublishedOralQuestion.


        :return: The answering_minister_title of this PublishedOralQuestion.
        :rtype: str
        """
        return self._answering_minister_title

    @answering_minister_title.setter
    def answering_minister_title(self, answering_minister_title):
        """Sets the answering_minister_title of this PublishedOralQuestion.


        :param answering_minister_title: The answering_minister_title of this PublishedOralQuestion.
        :type answering_minister_title: str
        """

        self._answering_minister_title = answering_minister_title

    @property
    def answering_when(self):
        """Gets the answering_when of this PublishedOralQuestion.


        :return: The answering_when of this PublishedOralQuestion.
        :rtype: datetime
        """
        return self._answering_when

    @answering_when.setter
    def answering_when(self, answering_when):
        """Sets the answering_when of this PublishedOralQuestion.


        :param answering_when: The answering_when of this PublishedOralQuestion.
        :type answering_when: datetime
        """

        self._answering_when = answering_when

    @property
    def asking_member(self):
        """Gets the asking_member of this PublishedOralQuestion.


        :return: The asking_member of this PublishedOralQuestion.
        :rtype: MemberForDate
        """
        return self._asking_member

    @asking_member.setter
    def asking_member(self, asking_member):
        """Sets the asking_member of this PublishedOralQuestion.


        :param asking_member: The asking_member of this PublishedOralQuestion.
        :type asking_member: MemberForDate
        """

        self._asking_member = asking_member

    @property
    def asking_member_id(self):
        """Gets the asking_member_id of this PublishedOralQuestion.


        :return: The asking_member_id of this PublishedOralQuestion.
        :rtype: int
        """
        return self._asking_member_id

    @asking_member_id.setter
    def asking_member_id(self, asking_member_id):
        """Sets the asking_member_id of this PublishedOralQuestion.


        :param asking_member_id: The asking_member_id of this PublishedOralQuestion.
        :type asking_member_id: int
        """

        self._asking_member_id = asking_member_id

    @property
    def declarable_interest_detail(self):
        """Gets the declarable_interest_detail of this PublishedOralQuestion.


        :return: The declarable_interest_detail of this PublishedOralQuestion.
        :rtype: str
        """
        return self._declarable_interest_detail

    @declarable_interest_detail.setter
    def declarable_interest_detail(self, declarable_interest_detail):
        """Sets the declarable_interest_detail of this PublishedOralQuestion.


        :param declarable_interest_detail: The declarable_interest_detail of this PublishedOralQuestion.
        :type declarable_interest_detail: str
        """

        self._declarable_interest_detail = declarable_interest_detail

    @property
    def hansard_link(self):
        """Gets the hansard_link of this PublishedOralQuestion.


        :return: The hansard_link of this PublishedOralQuestion.
        :rtype: str
        """
        return self._hansard_link

    @hansard_link.setter
    def hansard_link(self, hansard_link):
        """Sets the hansard_link of this PublishedOralQuestion.


        :param hansard_link: The hansard_link of this PublishedOralQuestion.
        :type hansard_link: str
        """

        self._hansard_link = hansard_link

    @property
    def id(self):
        """Gets the id of this PublishedOralQuestion.


        :return: The id of this PublishedOralQuestion.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublishedOralQuestion.


        :param id: The id of this PublishedOralQuestion.
        :type id: int
        """

        self._id = id

    @property
    def number(self):
        """Gets the number of this PublishedOralQuestion.


        :return: The number of this PublishedOralQuestion.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PublishedOralQuestion.


        :param number: The number of this PublishedOralQuestion.
        :type number: int
        """

        self._number = number

    @property
    def question_text(self):
        """Gets the question_text of this PublishedOralQuestion.


        :return: The question_text of this PublishedOralQuestion.
        :rtype: str
        """
        return self._question_text

    @question_text.setter
    def question_text(self, question_text):
        """Sets the question_text of this PublishedOralQuestion.


        :param question_text: The question_text of this PublishedOralQuestion.
        :type question_text: str
        """

        self._question_text = question_text

    @property
    def question_type(self):
        """Gets the question_type of this PublishedOralQuestion.


        :return: The question_type of this PublishedOralQuestion.
        :rtype: str
        """
        return self._question_type

    @question_type.setter
    def question_type(self, question_type):
        """Sets the question_type of this PublishedOralQuestion.


        :param question_type: The question_type of this PublishedOralQuestion.
        :type question_type: str
        """
        allowed_values = ["Substantive", "Topical"]  # noqa: E501
        if question_type not in allowed_values:
            raise ValueError(
                "Invalid value for `question_type` ({0}), must be one of {1}"
                .format(question_type, allowed_values)
            )

        self._question_type = question_type

    @property
    def removed_from_to_be_asked_when(self):
        """Gets the removed_from_to_be_asked_when of this PublishedOralQuestion.


        :return: The removed_from_to_be_asked_when of this PublishedOralQuestion.
        :rtype: datetime
        """
        return self._removed_from_to_be_asked_when

    @removed_from_to_be_asked_when.setter
    def removed_from_to_be_asked_when(self, removed_from_to_be_asked_when):
        """Sets the removed_from_to_be_asked_when of this PublishedOralQuestion.


        :param removed_from_to_be_asked_when: The removed_from_to_be_asked_when of this PublishedOralQuestion.
        :type removed_from_to_be_asked_when: datetime
        """

        self._removed_from_to_be_asked_when = removed_from_to_be_asked_when

    @property
    def status(self):
        """Gets the status of this PublishedOralQuestion.


        :return: The status of this PublishedOralQuestion.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PublishedOralQuestion.


        :param status: The status of this PublishedOralQuestion.
        :type status: str
        """
        allowed_values = ["Submitted", "Carded", "Unsaved", "ReadyForShuffle", "ToBeAsked", "ShuffleUnsuccessful", "Withdrawn", "Unstarred", "Draft", "ForReview", "Unasked", "Transferred"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tabled_when(self):
        """Gets the tabled_when of this PublishedOralQuestion.


        :return: The tabled_when of this PublishedOralQuestion.
        :rtype: datetime
        """
        return self._tabled_when

    @tabled_when.setter
    def tabled_when(self, tabled_when):
        """Sets the tabled_when of this PublishedOralQuestion.


        :param tabled_when: The tabled_when of this PublishedOralQuestion.
        :type tabled_when: datetime
        """

        self._tabled_when = tabled_when

    @property
    def uin(self):
        """Gets the uin of this PublishedOralQuestion.


        :return: The uin of this PublishedOralQuestion.
        :rtype: int
        """
        return self._uin

    @uin.setter
    def uin(self, uin):
        """Sets the uin of this PublishedOralQuestion.


        :param uin: The uin of this PublishedOralQuestion.
        :type uin: int
        """

        self._uin = uin
