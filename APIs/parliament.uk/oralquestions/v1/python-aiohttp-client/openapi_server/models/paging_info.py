# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status_count import StatusCount
from openapi_server import util


class PagingInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, global_status_counts: List[StatusCount]=None, global_total: int=None, skip: int=None, status_counts: List[StatusCount]=None, take: int=None, total: int=None):
        """PagingInfo - a model defined in OpenAPI

        :param global_status_counts: The global_status_counts of this PagingInfo.
        :param global_total: The global_total of this PagingInfo.
        :param skip: The skip of this PagingInfo.
        :param status_counts: The status_counts of this PagingInfo.
        :param take: The take of this PagingInfo.
        :param total: The total of this PagingInfo.
        """
        self.openapi_types = {
            'global_status_counts': List[StatusCount],
            'global_total': int,
            'skip': int,
            'status_counts': List[StatusCount],
            'take': int,
            'total': int
        }

        self.attribute_map = {
            'global_status_counts': 'GlobalStatusCounts',
            'global_total': 'GlobalTotal',
            'skip': 'Skip',
            'status_counts': 'StatusCounts',
            'take': 'Take',
            'total': 'Total'
        }

        self._global_status_counts = global_status_counts
        self._global_total = global_total
        self._skip = skip
        self._status_counts = status_counts
        self._take = take
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PagingInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PagingInfo of this PagingInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def global_status_counts(self):
        """Gets the global_status_counts of this PagingInfo.


        :return: The global_status_counts of this PagingInfo.
        :rtype: List[StatusCount]
        """
        return self._global_status_counts

    @global_status_counts.setter
    def global_status_counts(self, global_status_counts):
        """Sets the global_status_counts of this PagingInfo.


        :param global_status_counts: The global_status_counts of this PagingInfo.
        :type global_status_counts: List[StatusCount]
        """

        self._global_status_counts = global_status_counts

    @property
    def global_total(self):
        """Gets the global_total of this PagingInfo.


        :return: The global_total of this PagingInfo.
        :rtype: int
        """
        return self._global_total

    @global_total.setter
    def global_total(self, global_total):
        """Sets the global_total of this PagingInfo.


        :param global_total: The global_total of this PagingInfo.
        :type global_total: int
        """

        self._global_total = global_total

    @property
    def skip(self):
        """Gets the skip of this PagingInfo.


        :return: The skip of this PagingInfo.
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this PagingInfo.


        :param skip: The skip of this PagingInfo.
        :type skip: int
        """

        self._skip = skip

    @property
    def status_counts(self):
        """Gets the status_counts of this PagingInfo.


        :return: The status_counts of this PagingInfo.
        :rtype: List[StatusCount]
        """
        return self._status_counts

    @status_counts.setter
    def status_counts(self, status_counts):
        """Sets the status_counts of this PagingInfo.


        :param status_counts: The status_counts of this PagingInfo.
        :type status_counts: List[StatusCount]
        """

        self._status_counts = status_counts

    @property
    def take(self):
        """Gets the take of this PagingInfo.


        :return: The take of this PagingInfo.
        :rtype: int
        """
        return self._take

    @take.setter
    def take(self, take):
        """Sets the take of this PagingInfo.


        :param take: The take of this PagingInfo.
        :type take: int
        """

        self._take = take

    @property
    def total(self):
        """Gets the total of this PagingInfo.


        :return: The total of this PagingInfo.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PagingInfo.


        :param total: The total of this PagingInfo.
        :type total: int
        """

        self._total = total
