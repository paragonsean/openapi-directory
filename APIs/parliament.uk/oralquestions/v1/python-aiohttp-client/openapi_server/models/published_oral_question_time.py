# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublishedOralQuestionTime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answering_body_names: str=None, answering_minister_titles: str=None, answering_when: datetime=None, deadline_when: datetime=None, id: int=None, substantive_time: str=None, topical_time: str=None):
        """PublishedOralQuestionTime - a model defined in OpenAPI

        :param answering_body_names: The answering_body_names of this PublishedOralQuestionTime.
        :param answering_minister_titles: The answering_minister_titles of this PublishedOralQuestionTime.
        :param answering_when: The answering_when of this PublishedOralQuestionTime.
        :param deadline_when: The deadline_when of this PublishedOralQuestionTime.
        :param id: The id of this PublishedOralQuestionTime.
        :param substantive_time: The substantive_time of this PublishedOralQuestionTime.
        :param topical_time: The topical_time of this PublishedOralQuestionTime.
        """
        self.openapi_types = {
            'answering_body_names': str,
            'answering_minister_titles': str,
            'answering_when': datetime,
            'deadline_when': datetime,
            'id': int,
            'substantive_time': str,
            'topical_time': str
        }

        self.attribute_map = {
            'answering_body_names': 'AnsweringBodyNames',
            'answering_minister_titles': 'AnsweringMinisterTitles',
            'answering_when': 'AnsweringWhen',
            'deadline_when': 'DeadlineWhen',
            'id': 'Id',
            'substantive_time': 'SubstantiveTime',
            'topical_time': 'TopicalTime'
        }

        self._answering_body_names = answering_body_names
        self._answering_minister_titles = answering_minister_titles
        self._answering_when = answering_when
        self._deadline_when = deadline_when
        self._id = id
        self._substantive_time = substantive_time
        self._topical_time = topical_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublishedOralQuestionTime':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublishedOralQuestionTime of this PublishedOralQuestionTime.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answering_body_names(self):
        """Gets the answering_body_names of this PublishedOralQuestionTime.


        :return: The answering_body_names of this PublishedOralQuestionTime.
        :rtype: str
        """
        return self._answering_body_names

    @answering_body_names.setter
    def answering_body_names(self, answering_body_names):
        """Sets the answering_body_names of this PublishedOralQuestionTime.


        :param answering_body_names: The answering_body_names of this PublishedOralQuestionTime.
        :type answering_body_names: str
        """

        self._answering_body_names = answering_body_names

    @property
    def answering_minister_titles(self):
        """Gets the answering_minister_titles of this PublishedOralQuestionTime.


        :return: The answering_minister_titles of this PublishedOralQuestionTime.
        :rtype: str
        """
        return self._answering_minister_titles

    @answering_minister_titles.setter
    def answering_minister_titles(self, answering_minister_titles):
        """Sets the answering_minister_titles of this PublishedOralQuestionTime.


        :param answering_minister_titles: The answering_minister_titles of this PublishedOralQuestionTime.
        :type answering_minister_titles: str
        """

        self._answering_minister_titles = answering_minister_titles

    @property
    def answering_when(self):
        """Gets the answering_when of this PublishedOralQuestionTime.


        :return: The answering_when of this PublishedOralQuestionTime.
        :rtype: datetime
        """
        return self._answering_when

    @answering_when.setter
    def answering_when(self, answering_when):
        """Sets the answering_when of this PublishedOralQuestionTime.


        :param answering_when: The answering_when of this PublishedOralQuestionTime.
        :type answering_when: datetime
        """

        self._answering_when = answering_when

    @property
    def deadline_when(self):
        """Gets the deadline_when of this PublishedOralQuestionTime.


        :return: The deadline_when of this PublishedOralQuestionTime.
        :rtype: datetime
        """
        return self._deadline_when

    @deadline_when.setter
    def deadline_when(self, deadline_when):
        """Sets the deadline_when of this PublishedOralQuestionTime.


        :param deadline_when: The deadline_when of this PublishedOralQuestionTime.
        :type deadline_when: datetime
        """

        self._deadline_when = deadline_when

    @property
    def id(self):
        """Gets the id of this PublishedOralQuestionTime.


        :return: The id of this PublishedOralQuestionTime.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublishedOralQuestionTime.


        :param id: The id of this PublishedOralQuestionTime.
        :type id: int
        """

        self._id = id

    @property
    def substantive_time(self):
        """Gets the substantive_time of this PublishedOralQuestionTime.


        :return: The substantive_time of this PublishedOralQuestionTime.
        :rtype: str
        """
        return self._substantive_time

    @substantive_time.setter
    def substantive_time(self, substantive_time):
        """Sets the substantive_time of this PublishedOralQuestionTime.


        :param substantive_time: The substantive_time of this PublishedOralQuestionTime.
        :type substantive_time: str
        """

        self._substantive_time = substantive_time

    @property
    def topical_time(self):
        """Gets the topical_time of this PublishedOralQuestionTime.


        :return: The topical_time of this PublishedOralQuestionTime.
        :rtype: str
        """
        return self._topical_time

    @topical_time.setter
    def topical_time(self, topical_time):
        """Sets the topical_time of this PublishedOralQuestionTime.


        :param topical_time: The topical_time of this PublishedOralQuestionTime.
        :type topical_time: str
        """

        self._topical_time = topical_time
