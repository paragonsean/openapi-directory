# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublishedOralQuestionQueryParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answering_body_ids: List[int]=None, answering_date_end: datetime=None, answering_date_start: datetime=None, asking_member_ids: List[int]=None, oral_question_time_id: int=None, question_type: str=None, skip: int=None, take: int=None, uins: List[int]=None):
        """PublishedOralQuestionQueryParameters - a model defined in OpenAPI

        :param answering_body_ids: The answering_body_ids of this PublishedOralQuestionQueryParameters.
        :param answering_date_end: The answering_date_end of this PublishedOralQuestionQueryParameters.
        :param answering_date_start: The answering_date_start of this PublishedOralQuestionQueryParameters.
        :param asking_member_ids: The asking_member_ids of this PublishedOralQuestionQueryParameters.
        :param oral_question_time_id: The oral_question_time_id of this PublishedOralQuestionQueryParameters.
        :param question_type: The question_type of this PublishedOralQuestionQueryParameters.
        :param skip: The skip of this PublishedOralQuestionQueryParameters.
        :param take: The take of this PublishedOralQuestionQueryParameters.
        :param uins: The uins of this PublishedOralQuestionQueryParameters.
        """
        self.openapi_types = {
            'answering_body_ids': List[int],
            'answering_date_end': datetime,
            'answering_date_start': datetime,
            'asking_member_ids': List[int],
            'oral_question_time_id': int,
            'question_type': str,
            'skip': int,
            'take': int,
            'uins': List[int]
        }

        self.attribute_map = {
            'answering_body_ids': 'AnsweringBodyIds',
            'answering_date_end': 'AnsweringDateEnd',
            'answering_date_start': 'AnsweringDateStart',
            'asking_member_ids': 'AskingMemberIds',
            'oral_question_time_id': 'OralQuestionTimeId',
            'question_type': 'QuestionType',
            'skip': 'Skip',
            'take': 'Take',
            'uins': 'UINs'
        }

        self._answering_body_ids = answering_body_ids
        self._answering_date_end = answering_date_end
        self._answering_date_start = answering_date_start
        self._asking_member_ids = asking_member_ids
        self._oral_question_time_id = oral_question_time_id
        self._question_type = question_type
        self._skip = skip
        self._take = take
        self._uins = uins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublishedOralQuestionQueryParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublishedOralQuestionQueryParameters of this PublishedOralQuestionQueryParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answering_body_ids(self):
        """Gets the answering_body_ids of this PublishedOralQuestionQueryParameters.

        Which answering body is to respond. A list of answering bodies can be found <a target=\"_blank\" href=\"http://data.parliament.uk/membersdataplatform/services/mnis/referencedata/AnsweringBodies/\">here</a>.

        :return: The answering_body_ids of this PublishedOralQuestionQueryParameters.
        :rtype: List[int]
        """
        return self._answering_body_ids

    @answering_body_ids.setter
    def answering_body_ids(self, answering_body_ids):
        """Sets the answering_body_ids of this PublishedOralQuestionQueryParameters.

        Which answering body is to respond. A list of answering bodies can be found <a target=\"_blank\" href=\"http://data.parliament.uk/membersdataplatform/services/mnis/referencedata/AnsweringBodies/\">here</a>.

        :param answering_body_ids: The answering_body_ids of this PublishedOralQuestionQueryParameters.
        :type answering_body_ids: List[int]
        """

        self._answering_body_ids = answering_body_ids

    @property
    def answering_date_end(self):
        """Gets the answering_date_end of this PublishedOralQuestionQueryParameters.

        Oral Questions where the answering date has been set on or before the date provided. Date format YYYY-MM-DD.

        :return: The answering_date_end of this PublishedOralQuestionQueryParameters.
        :rtype: datetime
        """
        return self._answering_date_end

    @answering_date_end.setter
    def answering_date_end(self, answering_date_end):
        """Sets the answering_date_end of this PublishedOralQuestionQueryParameters.

        Oral Questions where the answering date has been set on or before the date provided. Date format YYYY-MM-DD.

        :param answering_date_end: The answering_date_end of this PublishedOralQuestionQueryParameters.
        :type answering_date_end: datetime
        """

        self._answering_date_end = answering_date_end

    @property
    def answering_date_start(self):
        """Gets the answering_date_start of this PublishedOralQuestionQueryParameters.

        Oral Questions where the answering date has been set on or after the date provided. Date format YYYY-MM-DD.

        :return: The answering_date_start of this PublishedOralQuestionQueryParameters.
        :rtype: datetime
        """
        return self._answering_date_start

    @answering_date_start.setter
    def answering_date_start(self, answering_date_start):
        """Sets the answering_date_start of this PublishedOralQuestionQueryParameters.

        Oral Questions where the answering date has been set on or after the date provided. Date format YYYY-MM-DD.

        :param answering_date_start: The answering_date_start of this PublishedOralQuestionQueryParameters.
        :type answering_date_start: datetime
        """

        self._answering_date_start = answering_date_start

    @property
    def asking_member_ids(self):
        """Gets the asking_member_ids of this PublishedOralQuestionQueryParameters.

        The ID of the member asking the question. Lists of member IDs for each house are available <a href=\"http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Commons\" target=\"_blank\">Commons</a> and <a href=\"http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Lords\" target=\"_blank\">Lords</a>.

        :return: The asking_member_ids of this PublishedOralQuestionQueryParameters.
        :rtype: List[int]
        """
        return self._asking_member_ids

    @asking_member_ids.setter
    def asking_member_ids(self, asking_member_ids):
        """Sets the asking_member_ids of this PublishedOralQuestionQueryParameters.

        The ID of the member asking the question. Lists of member IDs for each house are available <a href=\"http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Commons\" target=\"_blank\">Commons</a> and <a href=\"http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Lords\" target=\"_blank\">Lords</a>.

        :param asking_member_ids: The asking_member_ids of this PublishedOralQuestionQueryParameters.
        :type asking_member_ids: List[int]
        """

        self._asking_member_ids = asking_member_ids

    @property
    def oral_question_time_id(self):
        """Gets the oral_question_time_id of this PublishedOralQuestionQueryParameters.

        Oral Questions where the question is within the question time with the ID provided

        :return: The oral_question_time_id of this PublishedOralQuestionQueryParameters.
        :rtype: int
        """
        return self._oral_question_time_id

    @oral_question_time_id.setter
    def oral_question_time_id(self, oral_question_time_id):
        """Sets the oral_question_time_id of this PublishedOralQuestionQueryParameters.

        Oral Questions where the question is within the question time with the ID provided

        :param oral_question_time_id: The oral_question_time_id of this PublishedOralQuestionQueryParameters.
        :type oral_question_time_id: int
        """

        self._oral_question_time_id = oral_question_time_id

    @property
    def question_type(self):
        """Gets the question_type of this PublishedOralQuestionQueryParameters.

        Oral Questions where the question type is the selected type, substantive or topical.

        :return: The question_type of this PublishedOralQuestionQueryParameters.
        :rtype: str
        """
        return self._question_type

    @question_type.setter
    def question_type(self, question_type):
        """Sets the question_type of this PublishedOralQuestionQueryParameters.

        Oral Questions where the question type is the selected type, substantive or topical.

        :param question_type: The question_type of this PublishedOralQuestionQueryParameters.
        :type question_type: str
        """
        allowed_values = ["Substantive", "Topical"]  # noqa: E501
        if question_type not in allowed_values:
            raise ValueError(
                "Invalid value for `question_type` ({0}), must be one of {1}"
                .format(question_type, allowed_values)
            )

        self._question_type = question_type

    @property
    def skip(self):
        """Gets the skip of this PublishedOralQuestionQueryParameters.

        The number of records to skip from the first, default is 0.

        :return: The skip of this PublishedOralQuestionQueryParameters.
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this PublishedOralQuestionQueryParameters.

        The number of records to skip from the first, default is 0.

        :param skip: The skip of this PublishedOralQuestionQueryParameters.
        :type skip: int
        """

        self._skip = skip

    @property
    def take(self):
        """Gets the take of this PublishedOralQuestionQueryParameters.

        The number of records to return, default is 25, maximum is 100.

        :return: The take of this PublishedOralQuestionQueryParameters.
        :rtype: int
        """
        return self._take

    @take.setter
    def take(self, take):
        """Sets the take of this PublishedOralQuestionQueryParameters.

        The number of records to return, default is 25, maximum is 100.

        :param take: The take of this PublishedOralQuestionQueryParameters.
        :type take: int
        """

        self._take = take

    @property
    def uins(self):
        """Gets the uins of this PublishedOralQuestionQueryParameters.

        The UIN for the question - note that UINs reset at the start of each Parliamentary session.

        :return: The uins of this PublishedOralQuestionQueryParameters.
        :rtype: List[int]
        """
        return self._uins

    @uins.setter
    def uins(self, uins):
        """Sets the uins of this PublishedOralQuestionQueryParameters.

        The UIN for the question - note that UINs reset at the start of each Parliamentary session.

        :param uins: The uins of this PublishedOralQuestionQueryParameters.
        :type uins: List[int]
        """

        self._uins = uins
