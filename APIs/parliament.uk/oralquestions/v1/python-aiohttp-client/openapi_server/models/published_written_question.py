# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.member_for_date import MemberForDate
from openapi_server import util


class PublishedWrittenQuestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answer: str=None, answered_when: datetime=None, answering_body: str=None, answering_body_id: int=None, answering_minister: MemberForDate=None, answering_minister_id: int=None, answering_minister_title: str=None, asking_member: MemberForDate=None, asking_member_id: int=None, due_for_answer: datetime=None, id: int=None, question_text: str=None, question_type: str=None, tabled_when: datetime=None, uin: int=None):
        """PublishedWrittenQuestion - a model defined in OpenAPI

        :param answer: The answer of this PublishedWrittenQuestion.
        :param answered_when: The answered_when of this PublishedWrittenQuestion.
        :param answering_body: The answering_body of this PublishedWrittenQuestion.
        :param answering_body_id: The answering_body_id of this PublishedWrittenQuestion.
        :param answering_minister: The answering_minister of this PublishedWrittenQuestion.
        :param answering_minister_id: The answering_minister_id of this PublishedWrittenQuestion.
        :param answering_minister_title: The answering_minister_title of this PublishedWrittenQuestion.
        :param asking_member: The asking_member of this PublishedWrittenQuestion.
        :param asking_member_id: The asking_member_id of this PublishedWrittenQuestion.
        :param due_for_answer: The due_for_answer of this PublishedWrittenQuestion.
        :param id: The id of this PublishedWrittenQuestion.
        :param question_text: The question_text of this PublishedWrittenQuestion.
        :param question_type: The question_type of this PublishedWrittenQuestion.
        :param tabled_when: The tabled_when of this PublishedWrittenQuestion.
        :param uin: The uin of this PublishedWrittenQuestion.
        """
        self.openapi_types = {
            'answer': str,
            'answered_when': datetime,
            'answering_body': str,
            'answering_body_id': int,
            'answering_minister': MemberForDate,
            'answering_minister_id': int,
            'answering_minister_title': str,
            'asking_member': MemberForDate,
            'asking_member_id': int,
            'due_for_answer': datetime,
            'id': int,
            'question_text': str,
            'question_type': str,
            'tabled_when': datetime,
            'uin': int
        }

        self.attribute_map = {
            'answer': 'Answer',
            'answered_when': 'AnsweredWhen',
            'answering_body': 'AnsweringBody',
            'answering_body_id': 'AnsweringBodyId',
            'answering_minister': 'AnsweringMinister',
            'answering_minister_id': 'AnsweringMinisterId',
            'answering_minister_title': 'AnsweringMinisterTitle',
            'asking_member': 'AskingMember',
            'asking_member_id': 'AskingMemberId',
            'due_for_answer': 'DueForAnswer',
            'id': 'Id',
            'question_text': 'QuestionText',
            'question_type': 'QuestionType',
            'tabled_when': 'TabledWhen',
            'uin': 'UIN'
        }

        self._answer = answer
        self._answered_when = answered_when
        self._answering_body = answering_body
        self._answering_body_id = answering_body_id
        self._answering_minister = answering_minister
        self._answering_minister_id = answering_minister_id
        self._answering_minister_title = answering_minister_title
        self._asking_member = asking_member
        self._asking_member_id = asking_member_id
        self._due_for_answer = due_for_answer
        self._id = id
        self._question_text = question_text
        self._question_type = question_type
        self._tabled_when = tabled_when
        self._uin = uin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublishedWrittenQuestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublishedWrittenQuestion of this PublishedWrittenQuestion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answer(self):
        """Gets the answer of this PublishedWrittenQuestion.


        :return: The answer of this PublishedWrittenQuestion.
        :rtype: str
        """
        return self._answer

    @answer.setter
    def answer(self, answer):
        """Sets the answer of this PublishedWrittenQuestion.


        :param answer: The answer of this PublishedWrittenQuestion.
        :type answer: str
        """

        self._answer = answer

    @property
    def answered_when(self):
        """Gets the answered_when of this PublishedWrittenQuestion.


        :return: The answered_when of this PublishedWrittenQuestion.
        :rtype: datetime
        """
        return self._answered_when

    @answered_when.setter
    def answered_when(self, answered_when):
        """Sets the answered_when of this PublishedWrittenQuestion.


        :param answered_when: The answered_when of this PublishedWrittenQuestion.
        :type answered_when: datetime
        """

        self._answered_when = answered_when

    @property
    def answering_body(self):
        """Gets the answering_body of this PublishedWrittenQuestion.


        :return: The answering_body of this PublishedWrittenQuestion.
        :rtype: str
        """
        return self._answering_body

    @answering_body.setter
    def answering_body(self, answering_body):
        """Sets the answering_body of this PublishedWrittenQuestion.


        :param answering_body: The answering_body of this PublishedWrittenQuestion.
        :type answering_body: str
        """

        self._answering_body = answering_body

    @property
    def answering_body_id(self):
        """Gets the answering_body_id of this PublishedWrittenQuestion.


        :return: The answering_body_id of this PublishedWrittenQuestion.
        :rtype: int
        """
        return self._answering_body_id

    @answering_body_id.setter
    def answering_body_id(self, answering_body_id):
        """Sets the answering_body_id of this PublishedWrittenQuestion.


        :param answering_body_id: The answering_body_id of this PublishedWrittenQuestion.
        :type answering_body_id: int
        """

        self._answering_body_id = answering_body_id

    @property
    def answering_minister(self):
        """Gets the answering_minister of this PublishedWrittenQuestion.


        :return: The answering_minister of this PublishedWrittenQuestion.
        :rtype: MemberForDate
        """
        return self._answering_minister

    @answering_minister.setter
    def answering_minister(self, answering_minister):
        """Sets the answering_minister of this PublishedWrittenQuestion.


        :param answering_minister: The answering_minister of this PublishedWrittenQuestion.
        :type answering_minister: MemberForDate
        """

        self._answering_minister = answering_minister

    @property
    def answering_minister_id(self):
        """Gets the answering_minister_id of this PublishedWrittenQuestion.


        :return: The answering_minister_id of this PublishedWrittenQuestion.
        :rtype: int
        """
        return self._answering_minister_id

    @answering_minister_id.setter
    def answering_minister_id(self, answering_minister_id):
        """Sets the answering_minister_id of this PublishedWrittenQuestion.


        :param answering_minister_id: The answering_minister_id of this PublishedWrittenQuestion.
        :type answering_minister_id: int
        """

        self._answering_minister_id = answering_minister_id

    @property
    def answering_minister_title(self):
        """Gets the answering_minister_title of this PublishedWrittenQuestion.


        :return: The answering_minister_title of this PublishedWrittenQuestion.
        :rtype: str
        """
        return self._answering_minister_title

    @answering_minister_title.setter
    def answering_minister_title(self, answering_minister_title):
        """Sets the answering_minister_title of this PublishedWrittenQuestion.


        :param answering_minister_title: The answering_minister_title of this PublishedWrittenQuestion.
        :type answering_minister_title: str
        """

        self._answering_minister_title = answering_minister_title

    @property
    def asking_member(self):
        """Gets the asking_member of this PublishedWrittenQuestion.


        :return: The asking_member of this PublishedWrittenQuestion.
        :rtype: MemberForDate
        """
        return self._asking_member

    @asking_member.setter
    def asking_member(self, asking_member):
        """Sets the asking_member of this PublishedWrittenQuestion.


        :param asking_member: The asking_member of this PublishedWrittenQuestion.
        :type asking_member: MemberForDate
        """

        self._asking_member = asking_member

    @property
    def asking_member_id(self):
        """Gets the asking_member_id of this PublishedWrittenQuestion.


        :return: The asking_member_id of this PublishedWrittenQuestion.
        :rtype: int
        """
        return self._asking_member_id

    @asking_member_id.setter
    def asking_member_id(self, asking_member_id):
        """Sets the asking_member_id of this PublishedWrittenQuestion.


        :param asking_member_id: The asking_member_id of this PublishedWrittenQuestion.
        :type asking_member_id: int
        """

        self._asking_member_id = asking_member_id

    @property
    def due_for_answer(self):
        """Gets the due_for_answer of this PublishedWrittenQuestion.


        :return: The due_for_answer of this PublishedWrittenQuestion.
        :rtype: datetime
        """
        return self._due_for_answer

    @due_for_answer.setter
    def due_for_answer(self, due_for_answer):
        """Sets the due_for_answer of this PublishedWrittenQuestion.


        :param due_for_answer: The due_for_answer of this PublishedWrittenQuestion.
        :type due_for_answer: datetime
        """

        self._due_for_answer = due_for_answer

    @property
    def id(self):
        """Gets the id of this PublishedWrittenQuestion.


        :return: The id of this PublishedWrittenQuestion.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublishedWrittenQuestion.


        :param id: The id of this PublishedWrittenQuestion.
        :type id: int
        """

        self._id = id

    @property
    def question_text(self):
        """Gets the question_text of this PublishedWrittenQuestion.


        :return: The question_text of this PublishedWrittenQuestion.
        :rtype: str
        """
        return self._question_text

    @question_text.setter
    def question_text(self, question_text):
        """Sets the question_text of this PublishedWrittenQuestion.


        :param question_text: The question_text of this PublishedWrittenQuestion.
        :type question_text: str
        """

        self._question_text = question_text

    @property
    def question_type(self):
        """Gets the question_type of this PublishedWrittenQuestion.


        :return: The question_type of this PublishedWrittenQuestion.
        :rtype: str
        """
        return self._question_type

    @question_type.setter
    def question_type(self, question_type):
        """Sets the question_type of this PublishedWrittenQuestion.


        :param question_type: The question_type of this PublishedWrittenQuestion.
        :type question_type: str
        """
        allowed_values = ["NamedDay", "Ordinary"]  # noqa: E501
        if question_type not in allowed_values:
            raise ValueError(
                "Invalid value for `question_type` ({0}), must be one of {1}"
                .format(question_type, allowed_values)
            )

        self._question_type = question_type

    @property
    def tabled_when(self):
        """Gets the tabled_when of this PublishedWrittenQuestion.


        :return: The tabled_when of this PublishedWrittenQuestion.
        :rtype: datetime
        """
        return self._tabled_when

    @tabled_when.setter
    def tabled_when(self, tabled_when):
        """Sets the tabled_when of this PublishedWrittenQuestion.


        :param tabled_when: The tabled_when of this PublishedWrittenQuestion.
        :type tabled_when: datetime
        """

        self._tabled_when = tabled_when

    @property
    def uin(self):
        """Gets the uin of this PublishedWrittenQuestion.


        :return: The uin of this PublishedWrittenQuestion.
        :rtype: int
        """
        return self._uin

    @uin.setter
    def uin(self, uin):
        """Sets the uin of this PublishedWrittenQuestion.


        :param uin: The uin of this PublishedWrittenQuestion.
        :type uin: int
        """

        self._uin = uin
