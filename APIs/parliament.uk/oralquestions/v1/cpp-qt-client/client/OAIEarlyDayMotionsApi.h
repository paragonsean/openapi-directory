/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEarlyDayMotionsApi_H
#define OAI_OAIEarlyDayMotionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiResponse_List_PublishedWrittenQuestion_.h"
#include "OAIApiResponse_Object_.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEarlyDayMotionsApi : public QObject {
    Q_OBJECT

public:
    OAIEarlyDayMotionsApi(const int timeOut = 0);
    ~OAIEarlyDayMotionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parameters_edm_ids QList<qint32> [optional]
    * @param[in]  parameters_u_in_with_amendment_suffix QString [optional]
    * @param[in]  parameters_search_term QString [optional]
    * @param[in]  parameters_current_status_date_start QDateTime [optional]
    * @param[in]  parameters_current_status_date_end QDateTime [optional]
    * @param[in]  parameters_is_prayer bool [optional]
    * @param[in]  parameters_member_id qint32 [optional]
    * @param[in]  parameters_include_sponsored_by_member bool [optional]
    * @param[in]  parameters_tabled_start_date QDateTime [optional]
    * @param[in]  parameters_tabled_end_date QDateTime [optional]
    * @param[in]  parameters_statuses QList<QString> [optional]
    * @param[in]  parameters_order_by QString [optional]
    * @param[in]  parameters_skip qint32 [optional]
    * @param[in]  parameters_take qint32 [optional]
    */
    virtual void earlyDayMotionsListGet(const ::OpenAPI::OptionalParam<QList<qint32>> &parameters_edm_ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &parameters_u_in_with_amendment_suffix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parameters_search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &parameters_current_status_date_start = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &parameters_current_status_date_end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &parameters_is_prayer = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &parameters_member_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &parameters_include_sponsored_by_member = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &parameters_tabled_start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &parameters_tabled_end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &parameters_statuses = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &parameters_order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &parameters_skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &parameters_take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void publishedEarlyDayMotionGet(const qint32 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void earlyDayMotionsListGetCallback(OAIHttpRequestWorker *worker);
    void publishedEarlyDayMotionGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void earlyDayMotionsListGetSignal(OAIApiResponse_List_PublishedWrittenQuestion_ summary);
    void publishedEarlyDayMotionGetSignal(OAIApiResponse_List_PublishedWrittenQuestion_ summary);


    void earlyDayMotionsListGetSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse_List_PublishedWrittenQuestion_ summary);
    void publishedEarlyDayMotionGetSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse_List_PublishedWrittenQuestion_ summary);

    Q_DECL_DEPRECATED_X("Use earlyDayMotionsListGetSignalError() instead")
    void earlyDayMotionsListGetSignalE(OAIApiResponse_List_PublishedWrittenQuestion_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void earlyDayMotionsListGetSignalError(OAIApiResponse_List_PublishedWrittenQuestion_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishedEarlyDayMotionGetSignalError() instead")
    void publishedEarlyDayMotionGetSignalE(OAIApiResponse_List_PublishedWrittenQuestion_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publishedEarlyDayMotionGetSignalError(OAIApiResponse_List_PublishedWrittenQuestion_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use earlyDayMotionsListGetSignalErrorFull() instead")
    void earlyDayMotionsListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void earlyDayMotionsListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishedEarlyDayMotionGetSignalErrorFull() instead")
    void publishedEarlyDayMotionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publishedEarlyDayMotionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
