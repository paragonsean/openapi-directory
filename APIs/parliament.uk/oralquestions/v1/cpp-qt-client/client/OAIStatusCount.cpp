/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatusCount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatusCount::OAIStatusCount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatusCount::OAIStatusCount() {
    this->initializeModel();
}

OAIStatusCount::~OAIStatusCount() {}

void OAIStatusCount::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_status_id_isSet = false;
    m_status_id_isValid = false;
}

void OAIStatusCount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatusCount::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("Count")]);
    m_count_isSet = !json[QString("Count")].isNull() && m_count_isValid;

    m_status_id_isValid = ::OpenAPI::fromJsonValue(m_status_id, json[QString("StatusId")]);
    m_status_id_isSet = !json[QString("StatusId")].isNull() && m_status_id_isValid;
}

QString OAIStatusCount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatusCount::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("Count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_status_id_isSet) {
        obj.insert(QString("StatusId"), ::OpenAPI::toJsonValue(m_status_id));
    }
    return obj;
}

qint32 OAIStatusCount::getCount() const {
    return m_count;
}
void OAIStatusCount::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIStatusCount::is_count_Set() const{
    return m_count_isSet;
}

bool OAIStatusCount::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAIStatusCount::getStatusId() const {
    return m_status_id;
}
void OAIStatusCount::setStatusId(const qint32 &status_id) {
    m_status_id = status_id;
    m_status_id_isSet = true;
}

bool OAIStatusCount::is_status_id_Set() const{
    return m_status_id_isSet;
}

bool OAIStatusCount::is_status_id_Valid() const{
    return m_status_id_isValid;
}

bool OAIStatusCount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatusCount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
