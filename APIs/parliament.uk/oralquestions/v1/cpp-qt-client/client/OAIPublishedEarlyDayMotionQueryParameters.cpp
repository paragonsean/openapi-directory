/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublishedEarlyDayMotionQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublishedEarlyDayMotionQueryParameters::OAIPublishedEarlyDayMotionQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublishedEarlyDayMotionQueryParameters::OAIPublishedEarlyDayMotionQueryParameters() {
    this->initializeModel();
}

OAIPublishedEarlyDayMotionQueryParameters::~OAIPublishedEarlyDayMotionQueryParameters() {}

void OAIPublishedEarlyDayMotionQueryParameters::initializeModel() {

    m_current_status_date_end_isSet = false;
    m_current_status_date_end_isValid = false;

    m_current_status_date_start_isSet = false;
    m_current_status_date_start_isValid = false;

    m_edm_ids_isSet = false;
    m_edm_ids_isValid = false;

    m_include_sponsored_by_member_isSet = false;
    m_include_sponsored_by_member_isValid = false;

    m_is_prayer_isSet = false;
    m_is_prayer_isValid = false;

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_search_term_isSet = false;
    m_search_term_isValid = false;

    m_skip_isSet = false;
    m_skip_isValid = false;

    m_statuses_isSet = false;
    m_statuses_isValid = false;

    m_tabled_end_date_isSet = false;
    m_tabled_end_date_isValid = false;

    m_tabled_start_date_isSet = false;
    m_tabled_start_date_isValid = false;

    m_take_isSet = false;
    m_take_isValid = false;

    m_uin_with_amendment_suffix_isSet = false;
    m_uin_with_amendment_suffix_isValid = false;
}

void OAIPublishedEarlyDayMotionQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublishedEarlyDayMotionQueryParameters::fromJsonObject(QJsonObject json) {

    m_current_status_date_end_isValid = ::OpenAPI::fromJsonValue(m_current_status_date_end, json[QString("CurrentStatusDateEnd")]);
    m_current_status_date_end_isSet = !json[QString("CurrentStatusDateEnd")].isNull() && m_current_status_date_end_isValid;

    m_current_status_date_start_isValid = ::OpenAPI::fromJsonValue(m_current_status_date_start, json[QString("CurrentStatusDateStart")]);
    m_current_status_date_start_isSet = !json[QString("CurrentStatusDateStart")].isNull() && m_current_status_date_start_isValid;

    m_edm_ids_isValid = ::OpenAPI::fromJsonValue(m_edm_ids, json[QString("EdmIds")]);
    m_edm_ids_isSet = !json[QString("EdmIds")].isNull() && m_edm_ids_isValid;

    m_include_sponsored_by_member_isValid = ::OpenAPI::fromJsonValue(m_include_sponsored_by_member, json[QString("IncludeSponsoredByMember")]);
    m_include_sponsored_by_member_isSet = !json[QString("IncludeSponsoredByMember")].isNull() && m_include_sponsored_by_member_isValid;

    m_is_prayer_isValid = ::OpenAPI::fromJsonValue(m_is_prayer, json[QString("IsPrayer")]);
    m_is_prayer_isSet = !json[QString("IsPrayer")].isNull() && m_is_prayer_isValid;

    m_member_id_isValid = ::OpenAPI::fromJsonValue(m_member_id, json[QString("MemberId")]);
    m_member_id_isSet = !json[QString("MemberId")].isNull() && m_member_id_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("OrderBy")]);
    m_order_by_isSet = !json[QString("OrderBy")].isNull() && m_order_by_isValid;

    m_search_term_isValid = ::OpenAPI::fromJsonValue(m_search_term, json[QString("SearchTerm")]);
    m_search_term_isSet = !json[QString("SearchTerm")].isNull() && m_search_term_isValid;

    m_skip_isValid = ::OpenAPI::fromJsonValue(m_skip, json[QString("Skip")]);
    m_skip_isSet = !json[QString("Skip")].isNull() && m_skip_isValid;

    m_statuses_isValid = ::OpenAPI::fromJsonValue(m_statuses, json[QString("Statuses")]);
    m_statuses_isSet = !json[QString("Statuses")].isNull() && m_statuses_isValid;

    m_tabled_end_date_isValid = ::OpenAPI::fromJsonValue(m_tabled_end_date, json[QString("TabledEndDate")]);
    m_tabled_end_date_isSet = !json[QString("TabledEndDate")].isNull() && m_tabled_end_date_isValid;

    m_tabled_start_date_isValid = ::OpenAPI::fromJsonValue(m_tabled_start_date, json[QString("TabledStartDate")]);
    m_tabled_start_date_isSet = !json[QString("TabledStartDate")].isNull() && m_tabled_start_date_isValid;

    m_take_isValid = ::OpenAPI::fromJsonValue(m_take, json[QString("Take")]);
    m_take_isSet = !json[QString("Take")].isNull() && m_take_isValid;

    m_uin_with_amendment_suffix_isValid = ::OpenAPI::fromJsonValue(m_uin_with_amendment_suffix, json[QString("UINWithAmendmentSuffix")]);
    m_uin_with_amendment_suffix_isSet = !json[QString("UINWithAmendmentSuffix")].isNull() && m_uin_with_amendment_suffix_isValid;
}

QString OAIPublishedEarlyDayMotionQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublishedEarlyDayMotionQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_current_status_date_end_isSet) {
        obj.insert(QString("CurrentStatusDateEnd"), ::OpenAPI::toJsonValue(m_current_status_date_end));
    }
    if (m_current_status_date_start_isSet) {
        obj.insert(QString("CurrentStatusDateStart"), ::OpenAPI::toJsonValue(m_current_status_date_start));
    }
    if (m_edm_ids.size() > 0) {
        obj.insert(QString("EdmIds"), ::OpenAPI::toJsonValue(m_edm_ids));
    }
    if (m_include_sponsored_by_member_isSet) {
        obj.insert(QString("IncludeSponsoredByMember"), ::OpenAPI::toJsonValue(m_include_sponsored_by_member));
    }
    if (m_is_prayer_isSet) {
        obj.insert(QString("IsPrayer"), ::OpenAPI::toJsonValue(m_is_prayer));
    }
    if (m_member_id_isSet) {
        obj.insert(QString("MemberId"), ::OpenAPI::toJsonValue(m_member_id));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("OrderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_search_term_isSet) {
        obj.insert(QString("SearchTerm"), ::OpenAPI::toJsonValue(m_search_term));
    }
    if (m_skip_isSet) {
        obj.insert(QString("Skip"), ::OpenAPI::toJsonValue(m_skip));
    }
    if (m_statuses.size() > 0) {
        obj.insert(QString("Statuses"), ::OpenAPI::toJsonValue(m_statuses));
    }
    if (m_tabled_end_date_isSet) {
        obj.insert(QString("TabledEndDate"), ::OpenAPI::toJsonValue(m_tabled_end_date));
    }
    if (m_tabled_start_date_isSet) {
        obj.insert(QString("TabledStartDate"), ::OpenAPI::toJsonValue(m_tabled_start_date));
    }
    if (m_take_isSet) {
        obj.insert(QString("Take"), ::OpenAPI::toJsonValue(m_take));
    }
    if (m_uin_with_amendment_suffix_isSet) {
        obj.insert(QString("UINWithAmendmentSuffix"), ::OpenAPI::toJsonValue(m_uin_with_amendment_suffix));
    }
    return obj;
}

QDateTime OAIPublishedEarlyDayMotionQueryParameters::getCurrentStatusDateEnd() const {
    return m_current_status_date_end;
}
void OAIPublishedEarlyDayMotionQueryParameters::setCurrentStatusDateEnd(const QDateTime &current_status_date_end) {
    m_current_status_date_end = current_status_date_end;
    m_current_status_date_end_isSet = true;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_current_status_date_end_Set() const{
    return m_current_status_date_end_isSet;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_current_status_date_end_Valid() const{
    return m_current_status_date_end_isValid;
}

QDateTime OAIPublishedEarlyDayMotionQueryParameters::getCurrentStatusDateStart() const {
    return m_current_status_date_start;
}
void OAIPublishedEarlyDayMotionQueryParameters::setCurrentStatusDateStart(const QDateTime &current_status_date_start) {
    m_current_status_date_start = current_status_date_start;
    m_current_status_date_start_isSet = true;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_current_status_date_start_Set() const{
    return m_current_status_date_start_isSet;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_current_status_date_start_Valid() const{
    return m_current_status_date_start_isValid;
}

QList<qint32> OAIPublishedEarlyDayMotionQueryParameters::getEdmIds() const {
    return m_edm_ids;
}
void OAIPublishedEarlyDayMotionQueryParameters::setEdmIds(const QList<qint32> &edm_ids) {
    m_edm_ids = edm_ids;
    m_edm_ids_isSet = true;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_edm_ids_Set() const{
    return m_edm_ids_isSet;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_edm_ids_Valid() const{
    return m_edm_ids_isValid;
}

bool OAIPublishedEarlyDayMotionQueryParameters::isIncludeSponsoredByMember() const {
    return m_include_sponsored_by_member;
}
void OAIPublishedEarlyDayMotionQueryParameters::setIncludeSponsoredByMember(const bool &include_sponsored_by_member) {
    m_include_sponsored_by_member = include_sponsored_by_member;
    m_include_sponsored_by_member_isSet = true;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_include_sponsored_by_member_Set() const{
    return m_include_sponsored_by_member_isSet;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_include_sponsored_by_member_Valid() const{
    return m_include_sponsored_by_member_isValid;
}

bool OAIPublishedEarlyDayMotionQueryParameters::isIsPrayer() const {
    return m_is_prayer;
}
void OAIPublishedEarlyDayMotionQueryParameters::setIsPrayer(const bool &is_prayer) {
    m_is_prayer = is_prayer;
    m_is_prayer_isSet = true;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_is_prayer_Set() const{
    return m_is_prayer_isSet;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_is_prayer_Valid() const{
    return m_is_prayer_isValid;
}

qint32 OAIPublishedEarlyDayMotionQueryParameters::getMemberId() const {
    return m_member_id;
}
void OAIPublishedEarlyDayMotionQueryParameters::setMemberId(const qint32 &member_id) {
    m_member_id = member_id;
    m_member_id_isSet = true;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_member_id_Valid() const{
    return m_member_id_isValid;
}

QString OAIPublishedEarlyDayMotionQueryParameters::getOrderBy() const {
    return m_order_by;
}
void OAIPublishedEarlyDayMotionQueryParameters::setOrderBy(const QString &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_order_by_Valid() const{
    return m_order_by_isValid;
}

QString OAIPublishedEarlyDayMotionQueryParameters::getSearchTerm() const {
    return m_search_term;
}
void OAIPublishedEarlyDayMotionQueryParameters::setSearchTerm(const QString &search_term) {
    m_search_term = search_term;
    m_search_term_isSet = true;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_search_term_Set() const{
    return m_search_term_isSet;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_search_term_Valid() const{
    return m_search_term_isValid;
}

qint32 OAIPublishedEarlyDayMotionQueryParameters::getSkip() const {
    return m_skip;
}
void OAIPublishedEarlyDayMotionQueryParameters::setSkip(const qint32 &skip) {
    m_skip = skip;
    m_skip_isSet = true;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_skip_Set() const{
    return m_skip_isSet;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_skip_Valid() const{
    return m_skip_isValid;
}

QList<QString> OAIPublishedEarlyDayMotionQueryParameters::getStatuses() const {
    return m_statuses;
}
void OAIPublishedEarlyDayMotionQueryParameters::setStatuses(const QList<QString> &statuses) {
    m_statuses = statuses;
    m_statuses_isSet = true;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_statuses_Set() const{
    return m_statuses_isSet;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_statuses_Valid() const{
    return m_statuses_isValid;
}

QDateTime OAIPublishedEarlyDayMotionQueryParameters::getTabledEndDate() const {
    return m_tabled_end_date;
}
void OAIPublishedEarlyDayMotionQueryParameters::setTabledEndDate(const QDateTime &tabled_end_date) {
    m_tabled_end_date = tabled_end_date;
    m_tabled_end_date_isSet = true;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_tabled_end_date_Set() const{
    return m_tabled_end_date_isSet;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_tabled_end_date_Valid() const{
    return m_tabled_end_date_isValid;
}

QDateTime OAIPublishedEarlyDayMotionQueryParameters::getTabledStartDate() const {
    return m_tabled_start_date;
}
void OAIPublishedEarlyDayMotionQueryParameters::setTabledStartDate(const QDateTime &tabled_start_date) {
    m_tabled_start_date = tabled_start_date;
    m_tabled_start_date_isSet = true;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_tabled_start_date_Set() const{
    return m_tabled_start_date_isSet;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_tabled_start_date_Valid() const{
    return m_tabled_start_date_isValid;
}

qint32 OAIPublishedEarlyDayMotionQueryParameters::getTake() const {
    return m_take;
}
void OAIPublishedEarlyDayMotionQueryParameters::setTake(const qint32 &take) {
    m_take = take;
    m_take_isSet = true;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_take_Set() const{
    return m_take_isSet;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_take_Valid() const{
    return m_take_isValid;
}

QString OAIPublishedEarlyDayMotionQueryParameters::getUinWithAmendmentSuffix() const {
    return m_uin_with_amendment_suffix;
}
void OAIPublishedEarlyDayMotionQueryParameters::setUinWithAmendmentSuffix(const QString &uin_with_amendment_suffix) {
    m_uin_with_amendment_suffix = uin_with_amendment_suffix;
    m_uin_with_amendment_suffix_isSet = true;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_uin_with_amendment_suffix_Set() const{
    return m_uin_with_amendment_suffix_isSet;
}

bool OAIPublishedEarlyDayMotionQueryParameters::is_uin_with_amendment_suffix_Valid() const{
    return m_uin_with_amendment_suffix_isValid;
}

bool OAIPublishedEarlyDayMotionQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_status_date_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_status_date_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edm_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_sponsored_by_member_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_prayer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tabled_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tabled_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_take_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uin_with_amendment_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublishedEarlyDayMotionQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
