/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPublishedEarlyDayMotionQueryParameters.h
 *
 * 
 */

#ifndef OAIPublishedEarlyDayMotionQueryParameters_H
#define OAIPublishedEarlyDayMotionQueryParameters_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPublishedEarlyDayMotionQueryParameters : public OAIObject {
public:
    OAIPublishedEarlyDayMotionQueryParameters();
    OAIPublishedEarlyDayMotionQueryParameters(QString json);
    ~OAIPublishedEarlyDayMotionQueryParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCurrentStatusDateEnd() const;
    void setCurrentStatusDateEnd(const QDateTime &current_status_date_end);
    bool is_current_status_date_end_Set() const;
    bool is_current_status_date_end_Valid() const;

    QDateTime getCurrentStatusDateStart() const;
    void setCurrentStatusDateStart(const QDateTime &current_status_date_start);
    bool is_current_status_date_start_Set() const;
    bool is_current_status_date_start_Valid() const;

    QList<qint32> getEdmIds() const;
    void setEdmIds(const QList<qint32> &edm_ids);
    bool is_edm_ids_Set() const;
    bool is_edm_ids_Valid() const;

    bool isIncludeSponsoredByMember() const;
    void setIncludeSponsoredByMember(const bool &include_sponsored_by_member);
    bool is_include_sponsored_by_member_Set() const;
    bool is_include_sponsored_by_member_Valid() const;

    bool isIsPrayer() const;
    void setIsPrayer(const bool &is_prayer);
    bool is_is_prayer_Set() const;
    bool is_is_prayer_Valid() const;

    qint32 getMemberId() const;
    void setMemberId(const qint32 &member_id);
    bool is_member_id_Set() const;
    bool is_member_id_Valid() const;

    QString getOrderBy() const;
    void setOrderBy(const QString &order_by);
    bool is_order_by_Set() const;
    bool is_order_by_Valid() const;

    QString getSearchTerm() const;
    void setSearchTerm(const QString &search_term);
    bool is_search_term_Set() const;
    bool is_search_term_Valid() const;

    qint32 getSkip() const;
    void setSkip(const qint32 &skip);
    bool is_skip_Set() const;
    bool is_skip_Valid() const;

    QList<QString> getStatuses() const;
    void setStatuses(const QList<QString> &statuses);
    bool is_statuses_Set() const;
    bool is_statuses_Valid() const;

    QDateTime getTabledEndDate() const;
    void setTabledEndDate(const QDateTime &tabled_end_date);
    bool is_tabled_end_date_Set() const;
    bool is_tabled_end_date_Valid() const;

    QDateTime getTabledStartDate() const;
    void setTabledStartDate(const QDateTime &tabled_start_date);
    bool is_tabled_start_date_Set() const;
    bool is_tabled_start_date_Valid() const;

    qint32 getTake() const;
    void setTake(const qint32 &take);
    bool is_take_Set() const;
    bool is_take_Valid() const;

    QString getUinWithAmendmentSuffix() const;
    void setUinWithAmendmentSuffix(const QString &uin_with_amendment_suffix);
    bool is_uin_with_amendment_suffix_Set() const;
    bool is_uin_with_amendment_suffix_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_current_status_date_end;
    bool m_current_status_date_end_isSet;
    bool m_current_status_date_end_isValid;

    QDateTime m_current_status_date_start;
    bool m_current_status_date_start_isSet;
    bool m_current_status_date_start_isValid;

    QList<qint32> m_edm_ids;
    bool m_edm_ids_isSet;
    bool m_edm_ids_isValid;

    bool m_include_sponsored_by_member;
    bool m_include_sponsored_by_member_isSet;
    bool m_include_sponsored_by_member_isValid;

    bool m_is_prayer;
    bool m_is_prayer_isSet;
    bool m_is_prayer_isValid;

    qint32 m_member_id;
    bool m_member_id_isSet;
    bool m_member_id_isValid;

    QString m_order_by;
    bool m_order_by_isSet;
    bool m_order_by_isValid;

    QString m_search_term;
    bool m_search_term_isSet;
    bool m_search_term_isValid;

    qint32 m_skip;
    bool m_skip_isSet;
    bool m_skip_isValid;

    QList<QString> m_statuses;
    bool m_statuses_isSet;
    bool m_statuses_isValid;

    QDateTime m_tabled_end_date;
    bool m_tabled_end_date_isSet;
    bool m_tabled_end_date_isValid;

    QDateTime m_tabled_start_date;
    bool m_tabled_start_date_isSet;
    bool m_tabled_start_date_isValid;

    qint32 m_take;
    bool m_take_isSet;
    bool m_take_isValid;

    QString m_uin_with_amendment_suffix;
    bool m_uin_with_amendment_suffix_isSet;
    bool m_uin_with_amendment_suffix_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPublishedEarlyDayMotionQueryParameters)

#endif // OAIPublishedEarlyDayMotionQueryParameters_H
