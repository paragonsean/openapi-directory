/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublishedOralQuestion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublishedOralQuestion::OAIPublishedOralQuestion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublishedOralQuestion::OAIPublishedOralQuestion() {
    this->initializeModel();
}

OAIPublishedOralQuestion::~OAIPublishedOralQuestion() {}

void OAIPublishedOralQuestion::initializeModel() {

    m_answering_body_isSet = false;
    m_answering_body_isValid = false;

    m_answering_body_id_isSet = false;
    m_answering_body_id_isValid = false;

    m_answering_minister_isSet = false;
    m_answering_minister_isValid = false;

    m_answering_minister_id_isSet = false;
    m_answering_minister_id_isValid = false;

    m_answering_minister_title_isSet = false;
    m_answering_minister_title_isValid = false;

    m_answering_when_isSet = false;
    m_answering_when_isValid = false;

    m_asking_member_isSet = false;
    m_asking_member_isValid = false;

    m_asking_member_id_isSet = false;
    m_asking_member_id_isValid = false;

    m_declarable_interest_detail_isSet = false;
    m_declarable_interest_detail_isValid = false;

    m_hansard_link_isSet = false;
    m_hansard_link_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_question_text_isSet = false;
    m_question_text_isValid = false;

    m_question_type_isSet = false;
    m_question_type_isValid = false;

    m_removed_from_to_be_asked_when_isSet = false;
    m_removed_from_to_be_asked_when_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tabled_when_isSet = false;
    m_tabled_when_isValid = false;

    m_uin_isSet = false;
    m_uin_isValid = false;
}

void OAIPublishedOralQuestion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublishedOralQuestion::fromJsonObject(QJsonObject json) {

    m_answering_body_isValid = ::OpenAPI::fromJsonValue(m_answering_body, json[QString("AnsweringBody")]);
    m_answering_body_isSet = !json[QString("AnsweringBody")].isNull() && m_answering_body_isValid;

    m_answering_body_id_isValid = ::OpenAPI::fromJsonValue(m_answering_body_id, json[QString("AnsweringBodyId")]);
    m_answering_body_id_isSet = !json[QString("AnsweringBodyId")].isNull() && m_answering_body_id_isValid;

    m_answering_minister_isValid = ::OpenAPI::fromJsonValue(m_answering_minister, json[QString("AnsweringMinister")]);
    m_answering_minister_isSet = !json[QString("AnsweringMinister")].isNull() && m_answering_minister_isValid;

    m_answering_minister_id_isValid = ::OpenAPI::fromJsonValue(m_answering_minister_id, json[QString("AnsweringMinisterId")]);
    m_answering_minister_id_isSet = !json[QString("AnsweringMinisterId")].isNull() && m_answering_minister_id_isValid;

    m_answering_minister_title_isValid = ::OpenAPI::fromJsonValue(m_answering_minister_title, json[QString("AnsweringMinisterTitle")]);
    m_answering_minister_title_isSet = !json[QString("AnsweringMinisterTitle")].isNull() && m_answering_minister_title_isValid;

    m_answering_when_isValid = ::OpenAPI::fromJsonValue(m_answering_when, json[QString("AnsweringWhen")]);
    m_answering_when_isSet = !json[QString("AnsweringWhen")].isNull() && m_answering_when_isValid;

    m_asking_member_isValid = ::OpenAPI::fromJsonValue(m_asking_member, json[QString("AskingMember")]);
    m_asking_member_isSet = !json[QString("AskingMember")].isNull() && m_asking_member_isValid;

    m_asking_member_id_isValid = ::OpenAPI::fromJsonValue(m_asking_member_id, json[QString("AskingMemberId")]);
    m_asking_member_id_isSet = !json[QString("AskingMemberId")].isNull() && m_asking_member_id_isValid;

    m_declarable_interest_detail_isValid = ::OpenAPI::fromJsonValue(m_declarable_interest_detail, json[QString("DeclarableInterestDetail")]);
    m_declarable_interest_detail_isSet = !json[QString("DeclarableInterestDetail")].isNull() && m_declarable_interest_detail_isValid;

    m_hansard_link_isValid = ::OpenAPI::fromJsonValue(m_hansard_link, json[QString("HansardLink")]);
    m_hansard_link_isSet = !json[QString("HansardLink")].isNull() && m_hansard_link_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_question_text_isValid = ::OpenAPI::fromJsonValue(m_question_text, json[QString("QuestionText")]);
    m_question_text_isSet = !json[QString("QuestionText")].isNull() && m_question_text_isValid;

    m_question_type_isValid = ::OpenAPI::fromJsonValue(m_question_type, json[QString("QuestionType")]);
    m_question_type_isSet = !json[QString("QuestionType")].isNull() && m_question_type_isValid;

    m_removed_from_to_be_asked_when_isValid = ::OpenAPI::fromJsonValue(m_removed_from_to_be_asked_when, json[QString("RemovedFromToBeAskedWhen")]);
    m_removed_from_to_be_asked_when_isSet = !json[QString("RemovedFromToBeAskedWhen")].isNull() && m_removed_from_to_be_asked_when_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_tabled_when_isValid = ::OpenAPI::fromJsonValue(m_tabled_when, json[QString("TabledWhen")]);
    m_tabled_when_isSet = !json[QString("TabledWhen")].isNull() && m_tabled_when_isValid;

    m_uin_isValid = ::OpenAPI::fromJsonValue(m_uin, json[QString("UIN")]);
    m_uin_isSet = !json[QString("UIN")].isNull() && m_uin_isValid;
}

QString OAIPublishedOralQuestion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublishedOralQuestion::asJsonObject() const {
    QJsonObject obj;
    if (m_answering_body_isSet) {
        obj.insert(QString("AnsweringBody"), ::OpenAPI::toJsonValue(m_answering_body));
    }
    if (m_answering_body_id_isSet) {
        obj.insert(QString("AnsweringBodyId"), ::OpenAPI::toJsonValue(m_answering_body_id));
    }
    if (m_answering_minister.isSet()) {
        obj.insert(QString("AnsweringMinister"), ::OpenAPI::toJsonValue(m_answering_minister));
    }
    if (m_answering_minister_id_isSet) {
        obj.insert(QString("AnsweringMinisterId"), ::OpenAPI::toJsonValue(m_answering_minister_id));
    }
    if (m_answering_minister_title_isSet) {
        obj.insert(QString("AnsweringMinisterTitle"), ::OpenAPI::toJsonValue(m_answering_minister_title));
    }
    if (m_answering_when_isSet) {
        obj.insert(QString("AnsweringWhen"), ::OpenAPI::toJsonValue(m_answering_when));
    }
    if (m_asking_member.isSet()) {
        obj.insert(QString("AskingMember"), ::OpenAPI::toJsonValue(m_asking_member));
    }
    if (m_asking_member_id_isSet) {
        obj.insert(QString("AskingMemberId"), ::OpenAPI::toJsonValue(m_asking_member_id));
    }
    if (m_declarable_interest_detail_isSet) {
        obj.insert(QString("DeclarableInterestDetail"), ::OpenAPI::toJsonValue(m_declarable_interest_detail));
    }
    if (m_hansard_link_isSet) {
        obj.insert(QString("HansardLink"), ::OpenAPI::toJsonValue(m_hansard_link));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_question_text_isSet) {
        obj.insert(QString("QuestionText"), ::OpenAPI::toJsonValue(m_question_text));
    }
    if (m_question_type_isSet) {
        obj.insert(QString("QuestionType"), ::OpenAPI::toJsonValue(m_question_type));
    }
    if (m_removed_from_to_be_asked_when_isSet) {
        obj.insert(QString("RemovedFromToBeAskedWhen"), ::OpenAPI::toJsonValue(m_removed_from_to_be_asked_when));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tabled_when_isSet) {
        obj.insert(QString("TabledWhen"), ::OpenAPI::toJsonValue(m_tabled_when));
    }
    if (m_uin_isSet) {
        obj.insert(QString("UIN"), ::OpenAPI::toJsonValue(m_uin));
    }
    return obj;
}

QString OAIPublishedOralQuestion::getAnsweringBody() const {
    return m_answering_body;
}
void OAIPublishedOralQuestion::setAnsweringBody(const QString &answering_body) {
    m_answering_body = answering_body;
    m_answering_body_isSet = true;
}

bool OAIPublishedOralQuestion::is_answering_body_Set() const{
    return m_answering_body_isSet;
}

bool OAIPublishedOralQuestion::is_answering_body_Valid() const{
    return m_answering_body_isValid;
}

qint32 OAIPublishedOralQuestion::getAnsweringBodyId() const {
    return m_answering_body_id;
}
void OAIPublishedOralQuestion::setAnsweringBodyId(const qint32 &answering_body_id) {
    m_answering_body_id = answering_body_id;
    m_answering_body_id_isSet = true;
}

bool OAIPublishedOralQuestion::is_answering_body_id_Set() const{
    return m_answering_body_id_isSet;
}

bool OAIPublishedOralQuestion::is_answering_body_id_Valid() const{
    return m_answering_body_id_isValid;
}

OAIMemberForDate OAIPublishedOralQuestion::getAnsweringMinister() const {
    return m_answering_minister;
}
void OAIPublishedOralQuestion::setAnsweringMinister(const OAIMemberForDate &answering_minister) {
    m_answering_minister = answering_minister;
    m_answering_minister_isSet = true;
}

bool OAIPublishedOralQuestion::is_answering_minister_Set() const{
    return m_answering_minister_isSet;
}

bool OAIPublishedOralQuestion::is_answering_minister_Valid() const{
    return m_answering_minister_isValid;
}

qint32 OAIPublishedOralQuestion::getAnsweringMinisterId() const {
    return m_answering_minister_id;
}
void OAIPublishedOralQuestion::setAnsweringMinisterId(const qint32 &answering_minister_id) {
    m_answering_minister_id = answering_minister_id;
    m_answering_minister_id_isSet = true;
}

bool OAIPublishedOralQuestion::is_answering_minister_id_Set() const{
    return m_answering_minister_id_isSet;
}

bool OAIPublishedOralQuestion::is_answering_minister_id_Valid() const{
    return m_answering_minister_id_isValid;
}

QString OAIPublishedOralQuestion::getAnsweringMinisterTitle() const {
    return m_answering_minister_title;
}
void OAIPublishedOralQuestion::setAnsweringMinisterTitle(const QString &answering_minister_title) {
    m_answering_minister_title = answering_minister_title;
    m_answering_minister_title_isSet = true;
}

bool OAIPublishedOralQuestion::is_answering_minister_title_Set() const{
    return m_answering_minister_title_isSet;
}

bool OAIPublishedOralQuestion::is_answering_minister_title_Valid() const{
    return m_answering_minister_title_isValid;
}

QDateTime OAIPublishedOralQuestion::getAnsweringWhen() const {
    return m_answering_when;
}
void OAIPublishedOralQuestion::setAnsweringWhen(const QDateTime &answering_when) {
    m_answering_when = answering_when;
    m_answering_when_isSet = true;
}

bool OAIPublishedOralQuestion::is_answering_when_Set() const{
    return m_answering_when_isSet;
}

bool OAIPublishedOralQuestion::is_answering_when_Valid() const{
    return m_answering_when_isValid;
}

OAIMemberForDate OAIPublishedOralQuestion::getAskingMember() const {
    return m_asking_member;
}
void OAIPublishedOralQuestion::setAskingMember(const OAIMemberForDate &asking_member) {
    m_asking_member = asking_member;
    m_asking_member_isSet = true;
}

bool OAIPublishedOralQuestion::is_asking_member_Set() const{
    return m_asking_member_isSet;
}

bool OAIPublishedOralQuestion::is_asking_member_Valid() const{
    return m_asking_member_isValid;
}

qint32 OAIPublishedOralQuestion::getAskingMemberId() const {
    return m_asking_member_id;
}
void OAIPublishedOralQuestion::setAskingMemberId(const qint32 &asking_member_id) {
    m_asking_member_id = asking_member_id;
    m_asking_member_id_isSet = true;
}

bool OAIPublishedOralQuestion::is_asking_member_id_Set() const{
    return m_asking_member_id_isSet;
}

bool OAIPublishedOralQuestion::is_asking_member_id_Valid() const{
    return m_asking_member_id_isValid;
}

QString OAIPublishedOralQuestion::getDeclarableInterestDetail() const {
    return m_declarable_interest_detail;
}
void OAIPublishedOralQuestion::setDeclarableInterestDetail(const QString &declarable_interest_detail) {
    m_declarable_interest_detail = declarable_interest_detail;
    m_declarable_interest_detail_isSet = true;
}

bool OAIPublishedOralQuestion::is_declarable_interest_detail_Set() const{
    return m_declarable_interest_detail_isSet;
}

bool OAIPublishedOralQuestion::is_declarable_interest_detail_Valid() const{
    return m_declarable_interest_detail_isValid;
}

QString OAIPublishedOralQuestion::getHansardLink() const {
    return m_hansard_link;
}
void OAIPublishedOralQuestion::setHansardLink(const QString &hansard_link) {
    m_hansard_link = hansard_link;
    m_hansard_link_isSet = true;
}

bool OAIPublishedOralQuestion::is_hansard_link_Set() const{
    return m_hansard_link_isSet;
}

bool OAIPublishedOralQuestion::is_hansard_link_Valid() const{
    return m_hansard_link_isValid;
}

qint32 OAIPublishedOralQuestion::getId() const {
    return m_id;
}
void OAIPublishedOralQuestion::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPublishedOralQuestion::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPublishedOralQuestion::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIPublishedOralQuestion::getNumber() const {
    return m_number;
}
void OAIPublishedOralQuestion::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPublishedOralQuestion::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPublishedOralQuestion::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIPublishedOralQuestion::getQuestionText() const {
    return m_question_text;
}
void OAIPublishedOralQuestion::setQuestionText(const QString &question_text) {
    m_question_text = question_text;
    m_question_text_isSet = true;
}

bool OAIPublishedOralQuestion::is_question_text_Set() const{
    return m_question_text_isSet;
}

bool OAIPublishedOralQuestion::is_question_text_Valid() const{
    return m_question_text_isValid;
}

QString OAIPublishedOralQuestion::getQuestionType() const {
    return m_question_type;
}
void OAIPublishedOralQuestion::setQuestionType(const QString &question_type) {
    m_question_type = question_type;
    m_question_type_isSet = true;
}

bool OAIPublishedOralQuestion::is_question_type_Set() const{
    return m_question_type_isSet;
}

bool OAIPublishedOralQuestion::is_question_type_Valid() const{
    return m_question_type_isValid;
}

QDateTime OAIPublishedOralQuestion::getRemovedFromToBeAskedWhen() const {
    return m_removed_from_to_be_asked_when;
}
void OAIPublishedOralQuestion::setRemovedFromToBeAskedWhen(const QDateTime &removed_from_to_be_asked_when) {
    m_removed_from_to_be_asked_when = removed_from_to_be_asked_when;
    m_removed_from_to_be_asked_when_isSet = true;
}

bool OAIPublishedOralQuestion::is_removed_from_to_be_asked_when_Set() const{
    return m_removed_from_to_be_asked_when_isSet;
}

bool OAIPublishedOralQuestion::is_removed_from_to_be_asked_when_Valid() const{
    return m_removed_from_to_be_asked_when_isValid;
}

QString OAIPublishedOralQuestion::getStatus() const {
    return m_status;
}
void OAIPublishedOralQuestion::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPublishedOralQuestion::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPublishedOralQuestion::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIPublishedOralQuestion::getTabledWhen() const {
    return m_tabled_when;
}
void OAIPublishedOralQuestion::setTabledWhen(const QDateTime &tabled_when) {
    m_tabled_when = tabled_when;
    m_tabled_when_isSet = true;
}

bool OAIPublishedOralQuestion::is_tabled_when_Set() const{
    return m_tabled_when_isSet;
}

bool OAIPublishedOralQuestion::is_tabled_when_Valid() const{
    return m_tabled_when_isValid;
}

qint32 OAIPublishedOralQuestion::getUin() const {
    return m_uin;
}
void OAIPublishedOralQuestion::setUin(const qint32 &uin) {
    m_uin = uin;
    m_uin_isSet = true;
}

bool OAIPublishedOralQuestion::is_uin_Set() const{
    return m_uin_isSet;
}

bool OAIPublishedOralQuestion::is_uin_Valid() const{
    return m_uin_isValid;
}

bool OAIPublishedOralQuestion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answering_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_body_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_minister.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_minister_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_minister_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_when_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asking_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asking_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_declarable_interest_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hansard_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_removed_from_to_be_asked_when_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tabled_when_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublishedOralQuestion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
