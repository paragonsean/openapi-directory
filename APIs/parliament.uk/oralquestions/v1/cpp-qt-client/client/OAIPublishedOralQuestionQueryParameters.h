/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPublishedOralQuestionQueryParameters.h
 *
 * 
 */

#ifndef OAIPublishedOralQuestionQueryParameters_H
#define OAIPublishedOralQuestionQueryParameters_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPublishedOralQuestionQueryParameters : public OAIObject {
public:
    OAIPublishedOralQuestionQueryParameters();
    OAIPublishedOralQuestionQueryParameters(QString json);
    ~OAIPublishedOralQuestionQueryParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<qint32> getAnsweringBodyIds() const;
    void setAnsweringBodyIds(const QList<qint32> &answering_body_ids);
    bool is_answering_body_ids_Set() const;
    bool is_answering_body_ids_Valid() const;

    QDateTime getAnsweringDateEnd() const;
    void setAnsweringDateEnd(const QDateTime &answering_date_end);
    bool is_answering_date_end_Set() const;
    bool is_answering_date_end_Valid() const;

    QDateTime getAnsweringDateStart() const;
    void setAnsweringDateStart(const QDateTime &answering_date_start);
    bool is_answering_date_start_Set() const;
    bool is_answering_date_start_Valid() const;

    QList<qint32> getAskingMemberIds() const;
    void setAskingMemberIds(const QList<qint32> &asking_member_ids);
    bool is_asking_member_ids_Set() const;
    bool is_asking_member_ids_Valid() const;

    qint32 getOralQuestionTimeId() const;
    void setOralQuestionTimeId(const qint32 &oral_question_time_id);
    bool is_oral_question_time_id_Set() const;
    bool is_oral_question_time_id_Valid() const;

    QString getQuestionType() const;
    void setQuestionType(const QString &question_type);
    bool is_question_type_Set() const;
    bool is_question_type_Valid() const;

    qint32 getSkip() const;
    void setSkip(const qint32 &skip);
    bool is_skip_Set() const;
    bool is_skip_Valid() const;

    qint32 getTake() const;
    void setTake(const qint32 &take);
    bool is_take_Set() const;
    bool is_take_Valid() const;

    QList<qint32> getUins() const;
    void setUins(const QList<qint32> &uins);
    bool is_uins_Set() const;
    bool is_uins_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<qint32> m_answering_body_ids;
    bool m_answering_body_ids_isSet;
    bool m_answering_body_ids_isValid;

    QDateTime m_answering_date_end;
    bool m_answering_date_end_isSet;
    bool m_answering_date_end_isValid;

    QDateTime m_answering_date_start;
    bool m_answering_date_start_isSet;
    bool m_answering_date_start_isValid;

    QList<qint32> m_asking_member_ids;
    bool m_asking_member_ids_isSet;
    bool m_asking_member_ids_isValid;

    qint32 m_oral_question_time_id;
    bool m_oral_question_time_id_isSet;
    bool m_oral_question_time_id_isValid;

    QString m_question_type;
    bool m_question_type_isSet;
    bool m_question_type_isValid;

    qint32 m_skip;
    bool m_skip_isSet;
    bool m_skip_isValid;

    qint32 m_take;
    bool m_take_isSet;
    bool m_take_isValid;

    QList<qint32> m_uins;
    bool m_uins_isSet;
    bool m_uins_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPublishedOralQuestionQueryParameters)

#endif // OAIPublishedOralQuestionQueryParameters_H
