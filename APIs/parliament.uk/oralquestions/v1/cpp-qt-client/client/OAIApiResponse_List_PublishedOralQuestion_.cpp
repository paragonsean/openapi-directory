/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiResponse_List_PublishedOralQuestion_.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiResponse_List_PublishedOralQuestion_::OAIApiResponse_List_PublishedOralQuestion_(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiResponse_List_PublishedOralQuestion_::OAIApiResponse_List_PublishedOralQuestion_() {
    this->initializeModel();
}

OAIApiResponse_List_PublishedOralQuestion_::~OAIApiResponse_List_PublishedOralQuestion_() {}

void OAIApiResponse_List_PublishedOralQuestion_::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_paging_info_isSet = false;
    m_paging_info_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIApiResponse_List_PublishedOralQuestion_::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiResponse_List_PublishedOralQuestion_::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("Errors")]);
    m_errors_isSet = !json[QString("Errors")].isNull() && m_errors_isValid;

    m_paging_info_isValid = ::OpenAPI::fromJsonValue(m_paging_info, json[QString("PagingInfo")]);
    m_paging_info_isSet = !json[QString("PagingInfo")].isNull() && m_paging_info_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("Response")]);
    m_response_isSet = !json[QString("Response")].isNull() && m_response_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("StatusCode")]);
    m_status_code_isSet = !json[QString("StatusCode")].isNull() && m_status_code_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("Success")]);
    m_success_isSet = !json[QString("Success")].isNull() && m_success_isValid;
}

QString OAIApiResponse_List_PublishedOralQuestion_::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiResponse_List_PublishedOralQuestion_::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("Errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_paging_info.isSet()) {
        obj.insert(QString("PagingInfo"), ::OpenAPI::toJsonValue(m_paging_info));
    }
    if (m_response.size() > 0) {
        obj.insert(QString("Response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("StatusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_success_isSet) {
        obj.insert(QString("Success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

QList<QString> OAIApiResponse_List_PublishedOralQuestion_::getErrors() const {
    return m_errors;
}
void OAIApiResponse_List_PublishedOralQuestion_::setErrors(const QList<QString> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIApiResponse_List_PublishedOralQuestion_::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIApiResponse_List_PublishedOralQuestion_::is_errors_Valid() const{
    return m_errors_isValid;
}

OAIPagingInfo OAIApiResponse_List_PublishedOralQuestion_::getPagingInfo() const {
    return m_paging_info;
}
void OAIApiResponse_List_PublishedOralQuestion_::setPagingInfo(const OAIPagingInfo &paging_info) {
    m_paging_info = paging_info;
    m_paging_info_isSet = true;
}

bool OAIApiResponse_List_PublishedOralQuestion_::is_paging_info_Set() const{
    return m_paging_info_isSet;
}

bool OAIApiResponse_List_PublishedOralQuestion_::is_paging_info_Valid() const{
    return m_paging_info_isValid;
}

QList<OAIPublishedOralQuestion> OAIApiResponse_List_PublishedOralQuestion_::getResponse() const {
    return m_response;
}
void OAIApiResponse_List_PublishedOralQuestion_::setResponse(const QList<OAIPublishedOralQuestion> &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIApiResponse_List_PublishedOralQuestion_::is_response_Set() const{
    return m_response_isSet;
}

bool OAIApiResponse_List_PublishedOralQuestion_::is_response_Valid() const{
    return m_response_isValid;
}

QString OAIApiResponse_List_PublishedOralQuestion_::getStatusCode() const {
    return m_status_code;
}
void OAIApiResponse_List_PublishedOralQuestion_::setStatusCode(const QString &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIApiResponse_List_PublishedOralQuestion_::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIApiResponse_List_PublishedOralQuestion_::is_status_code_Valid() const{
    return m_status_code_isValid;
}

bool OAIApiResponse_List_PublishedOralQuestion_::isSuccess() const {
    return m_success;
}
void OAIApiResponse_List_PublishedOralQuestion_::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIApiResponse_List_PublishedOralQuestion_::is_success_Set() const{
    return m_success_isSet;
}

bool OAIApiResponse_List_PublishedOralQuestion_::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIApiResponse_List_PublishedOralQuestion_::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_paging_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiResponse_List_PublishedOralQuestion_::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
