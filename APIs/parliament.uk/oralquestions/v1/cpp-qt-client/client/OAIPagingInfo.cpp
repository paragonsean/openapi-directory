/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPagingInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPagingInfo::OAIPagingInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPagingInfo::OAIPagingInfo() {
    this->initializeModel();
}

OAIPagingInfo::~OAIPagingInfo() {}

void OAIPagingInfo::initializeModel() {

    m_global_status_counts_isSet = false;
    m_global_status_counts_isValid = false;

    m_global_total_isSet = false;
    m_global_total_isValid = false;

    m_skip_isSet = false;
    m_skip_isValid = false;

    m_status_counts_isSet = false;
    m_status_counts_isValid = false;

    m_take_isSet = false;
    m_take_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIPagingInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPagingInfo::fromJsonObject(QJsonObject json) {

    m_global_status_counts_isValid = ::OpenAPI::fromJsonValue(m_global_status_counts, json[QString("GlobalStatusCounts")]);
    m_global_status_counts_isSet = !json[QString("GlobalStatusCounts")].isNull() && m_global_status_counts_isValid;

    m_global_total_isValid = ::OpenAPI::fromJsonValue(m_global_total, json[QString("GlobalTotal")]);
    m_global_total_isSet = !json[QString("GlobalTotal")].isNull() && m_global_total_isValid;

    m_skip_isValid = ::OpenAPI::fromJsonValue(m_skip, json[QString("Skip")]);
    m_skip_isSet = !json[QString("Skip")].isNull() && m_skip_isValid;

    m_status_counts_isValid = ::OpenAPI::fromJsonValue(m_status_counts, json[QString("StatusCounts")]);
    m_status_counts_isSet = !json[QString("StatusCounts")].isNull() && m_status_counts_isValid;

    m_take_isValid = ::OpenAPI::fromJsonValue(m_take, json[QString("Take")]);
    m_take_isSet = !json[QString("Take")].isNull() && m_take_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;
}

QString OAIPagingInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPagingInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_global_status_counts.size() > 0) {
        obj.insert(QString("GlobalStatusCounts"), ::OpenAPI::toJsonValue(m_global_status_counts));
    }
    if (m_global_total_isSet) {
        obj.insert(QString("GlobalTotal"), ::OpenAPI::toJsonValue(m_global_total));
    }
    if (m_skip_isSet) {
        obj.insert(QString("Skip"), ::OpenAPI::toJsonValue(m_skip));
    }
    if (m_status_counts.size() > 0) {
        obj.insert(QString("StatusCounts"), ::OpenAPI::toJsonValue(m_status_counts));
    }
    if (m_take_isSet) {
        obj.insert(QString("Take"), ::OpenAPI::toJsonValue(m_take));
    }
    if (m_total_isSet) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QList<OAIStatusCount> OAIPagingInfo::getGlobalStatusCounts() const {
    return m_global_status_counts;
}
void OAIPagingInfo::setGlobalStatusCounts(const QList<OAIStatusCount> &global_status_counts) {
    m_global_status_counts = global_status_counts;
    m_global_status_counts_isSet = true;
}

bool OAIPagingInfo::is_global_status_counts_Set() const{
    return m_global_status_counts_isSet;
}

bool OAIPagingInfo::is_global_status_counts_Valid() const{
    return m_global_status_counts_isValid;
}

qint32 OAIPagingInfo::getGlobalTotal() const {
    return m_global_total;
}
void OAIPagingInfo::setGlobalTotal(const qint32 &global_total) {
    m_global_total = global_total;
    m_global_total_isSet = true;
}

bool OAIPagingInfo::is_global_total_Set() const{
    return m_global_total_isSet;
}

bool OAIPagingInfo::is_global_total_Valid() const{
    return m_global_total_isValid;
}

qint32 OAIPagingInfo::getSkip() const {
    return m_skip;
}
void OAIPagingInfo::setSkip(const qint32 &skip) {
    m_skip = skip;
    m_skip_isSet = true;
}

bool OAIPagingInfo::is_skip_Set() const{
    return m_skip_isSet;
}

bool OAIPagingInfo::is_skip_Valid() const{
    return m_skip_isValid;
}

QList<OAIStatusCount> OAIPagingInfo::getStatusCounts() const {
    return m_status_counts;
}
void OAIPagingInfo::setStatusCounts(const QList<OAIStatusCount> &status_counts) {
    m_status_counts = status_counts;
    m_status_counts_isSet = true;
}

bool OAIPagingInfo::is_status_counts_Set() const{
    return m_status_counts_isSet;
}

bool OAIPagingInfo::is_status_counts_Valid() const{
    return m_status_counts_isValid;
}

qint32 OAIPagingInfo::getTake() const {
    return m_take;
}
void OAIPagingInfo::setTake(const qint32 &take) {
    m_take = take;
    m_take_isSet = true;
}

bool OAIPagingInfo::is_take_Set() const{
    return m_take_isSet;
}

bool OAIPagingInfo::is_take_Valid() const{
    return m_take_isValid;
}

qint32 OAIPagingInfo::getTotal() const {
    return m_total;
}
void OAIPagingInfo::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPagingInfo::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPagingInfo::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIPagingInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_global_status_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_take_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPagingInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
