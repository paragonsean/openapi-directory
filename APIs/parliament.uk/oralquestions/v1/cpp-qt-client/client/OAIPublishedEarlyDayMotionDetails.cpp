/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublishedEarlyDayMotionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublishedEarlyDayMotionDetails::OAIPublishedEarlyDayMotionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublishedEarlyDayMotionDetails::OAIPublishedEarlyDayMotionDetails() {
    this->initializeModel();
}

OAIPublishedEarlyDayMotionDetails::~OAIPublishedEarlyDayMotionDetails() {}

void OAIPublishedEarlyDayMotionDetails::initializeModel() {

    m_amendment_suffix_isSet = false;
    m_amendment_suffix_isValid = false;

    m_amendment_to_motion_id_isSet = false;
    m_amendment_to_motion_id_isValid = false;

    m_amendments_isSet = false;
    m_amendments_isValid = false;

    m_date_tabled_isSet = false;
    m_date_tabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_motion_text_isSet = false;
    m_motion_text_isValid = false;

    m_praying_against_negative_statutory_instrument_id_isSet = false;
    m_praying_against_negative_statutory_instrument_id_isValid = false;

    m_primary_sponsor_isSet = false;
    m_primary_sponsor_isValid = false;

    m_sponsors_isSet = false;
    m_sponsors_isValid = false;

    m_sponsors_count_isSet = false;
    m_sponsors_count_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_date_isSet = false;
    m_status_date_isValid = false;

    m_statutory_instrument_number_isSet = false;
    m_statutory_instrument_number_isValid = false;

    m_statutory_instrument_title_isSet = false;
    m_statutory_instrument_title_isValid = false;

    m_statutory_instrument_year_isSet = false;
    m_statutory_instrument_year_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_uin_isSet = false;
    m_uin_isValid = false;

    m_uin_with_amendment_suffix_isSet = false;
    m_uin_with_amendment_suffix_isValid = false;
}

void OAIPublishedEarlyDayMotionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublishedEarlyDayMotionDetails::fromJsonObject(QJsonObject json) {

    m_amendment_suffix_isValid = ::OpenAPI::fromJsonValue(m_amendment_suffix, json[QString("AmendmentSuffix")]);
    m_amendment_suffix_isSet = !json[QString("AmendmentSuffix")].isNull() && m_amendment_suffix_isValid;

    m_amendment_to_motion_id_isValid = ::OpenAPI::fromJsonValue(m_amendment_to_motion_id, json[QString("AmendmentToMotionId")]);
    m_amendment_to_motion_id_isSet = !json[QString("AmendmentToMotionId")].isNull() && m_amendment_to_motion_id_isValid;

    m_amendments_isValid = ::OpenAPI::fromJsonValue(m_amendments, json[QString("Amendments")]);
    m_amendments_isSet = !json[QString("Amendments")].isNull() && m_amendments_isValid;

    m_date_tabled_isValid = ::OpenAPI::fromJsonValue(m_date_tabled, json[QString("DateTabled")]);
    m_date_tabled_isSet = !json[QString("DateTabled")].isNull() && m_date_tabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_member_id_isValid = ::OpenAPI::fromJsonValue(m_member_id, json[QString("MemberId")]);
    m_member_id_isSet = !json[QString("MemberId")].isNull() && m_member_id_isValid;

    m_motion_text_isValid = ::OpenAPI::fromJsonValue(m_motion_text, json[QString("MotionText")]);
    m_motion_text_isSet = !json[QString("MotionText")].isNull() && m_motion_text_isValid;

    m_praying_against_negative_statutory_instrument_id_isValid = ::OpenAPI::fromJsonValue(m_praying_against_negative_statutory_instrument_id, json[QString("PrayingAgainstNegativeStatutoryInstrumentId")]);
    m_praying_against_negative_statutory_instrument_id_isSet = !json[QString("PrayingAgainstNegativeStatutoryInstrumentId")].isNull() && m_praying_against_negative_statutory_instrument_id_isValid;

    m_primary_sponsor_isValid = ::OpenAPI::fromJsonValue(m_primary_sponsor, json[QString("PrimarySponsor")]);
    m_primary_sponsor_isSet = !json[QString("PrimarySponsor")].isNull() && m_primary_sponsor_isValid;

    m_sponsors_isValid = ::OpenAPI::fromJsonValue(m_sponsors, json[QString("Sponsors")]);
    m_sponsors_isSet = !json[QString("Sponsors")].isNull() && m_sponsors_isValid;

    m_sponsors_count_isValid = ::OpenAPI::fromJsonValue(m_sponsors_count, json[QString("SponsorsCount")]);
    m_sponsors_count_isSet = !json[QString("SponsorsCount")].isNull() && m_sponsors_count_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_date_isValid = ::OpenAPI::fromJsonValue(m_status_date, json[QString("StatusDate")]);
    m_status_date_isSet = !json[QString("StatusDate")].isNull() && m_status_date_isValid;

    m_statutory_instrument_number_isValid = ::OpenAPI::fromJsonValue(m_statutory_instrument_number, json[QString("StatutoryInstrumentNumber")]);
    m_statutory_instrument_number_isSet = !json[QString("StatutoryInstrumentNumber")].isNull() && m_statutory_instrument_number_isValid;

    m_statutory_instrument_title_isValid = ::OpenAPI::fromJsonValue(m_statutory_instrument_title, json[QString("StatutoryInstrumentTitle")]);
    m_statutory_instrument_title_isSet = !json[QString("StatutoryInstrumentTitle")].isNull() && m_statutory_instrument_title_isValid;

    m_statutory_instrument_year_isValid = ::OpenAPI::fromJsonValue(m_statutory_instrument_year, json[QString("StatutoryInstrumentYear")]);
    m_statutory_instrument_year_isSet = !json[QString("StatutoryInstrumentYear")].isNull() && m_statutory_instrument_year_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_uin_isValid = ::OpenAPI::fromJsonValue(m_uin, json[QString("UIN")]);
    m_uin_isSet = !json[QString("UIN")].isNull() && m_uin_isValid;

    m_uin_with_amendment_suffix_isValid = ::OpenAPI::fromJsonValue(m_uin_with_amendment_suffix, json[QString("UINWithAmendmentSuffix")]);
    m_uin_with_amendment_suffix_isSet = !json[QString("UINWithAmendmentSuffix")].isNull() && m_uin_with_amendment_suffix_isValid;
}

QString OAIPublishedEarlyDayMotionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublishedEarlyDayMotionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_amendment_suffix_isSet) {
        obj.insert(QString("AmendmentSuffix"), ::OpenAPI::toJsonValue(m_amendment_suffix));
    }
    if (m_amendment_to_motion_id_isSet) {
        obj.insert(QString("AmendmentToMotionId"), ::OpenAPI::toJsonValue(m_amendment_to_motion_id));
    }
    if (m_amendments.size() > 0) {
        obj.insert(QString("Amendments"), ::OpenAPI::toJsonValue(m_amendments));
    }
    if (m_date_tabled_isSet) {
        obj.insert(QString("DateTabled"), ::OpenAPI::toJsonValue(m_date_tabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_member_id_isSet) {
        obj.insert(QString("MemberId"), ::OpenAPI::toJsonValue(m_member_id));
    }
    if (m_motion_text_isSet) {
        obj.insert(QString("MotionText"), ::OpenAPI::toJsonValue(m_motion_text));
    }
    if (m_praying_against_negative_statutory_instrument_id_isSet) {
        obj.insert(QString("PrayingAgainstNegativeStatutoryInstrumentId"), ::OpenAPI::toJsonValue(m_praying_against_negative_statutory_instrument_id));
    }
    if (m_primary_sponsor.isSet()) {
        obj.insert(QString("PrimarySponsor"), ::OpenAPI::toJsonValue(m_primary_sponsor));
    }
    if (m_sponsors.size() > 0) {
        obj.insert(QString("Sponsors"), ::OpenAPI::toJsonValue(m_sponsors));
    }
    if (m_sponsors_count_isSet) {
        obj.insert(QString("SponsorsCount"), ::OpenAPI::toJsonValue(m_sponsors_count));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_date_isSet) {
        obj.insert(QString("StatusDate"), ::OpenAPI::toJsonValue(m_status_date));
    }
    if (m_statutory_instrument_number_isSet) {
        obj.insert(QString("StatutoryInstrumentNumber"), ::OpenAPI::toJsonValue(m_statutory_instrument_number));
    }
    if (m_statutory_instrument_title_isSet) {
        obj.insert(QString("StatutoryInstrumentTitle"), ::OpenAPI::toJsonValue(m_statutory_instrument_title));
    }
    if (m_statutory_instrument_year_isSet) {
        obj.insert(QString("StatutoryInstrumentYear"), ::OpenAPI::toJsonValue(m_statutory_instrument_year));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_uin_isSet) {
        obj.insert(QString("UIN"), ::OpenAPI::toJsonValue(m_uin));
    }
    if (m_uin_with_amendment_suffix_isSet) {
        obj.insert(QString("UINWithAmendmentSuffix"), ::OpenAPI::toJsonValue(m_uin_with_amendment_suffix));
    }
    return obj;
}

QString OAIPublishedEarlyDayMotionDetails::getAmendmentSuffix() const {
    return m_amendment_suffix;
}
void OAIPublishedEarlyDayMotionDetails::setAmendmentSuffix(const QString &amendment_suffix) {
    m_amendment_suffix = amendment_suffix;
    m_amendment_suffix_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_amendment_suffix_Set() const{
    return m_amendment_suffix_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_amendment_suffix_Valid() const{
    return m_amendment_suffix_isValid;
}

qint32 OAIPublishedEarlyDayMotionDetails::getAmendmentToMotionId() const {
    return m_amendment_to_motion_id;
}
void OAIPublishedEarlyDayMotionDetails::setAmendmentToMotionId(const qint32 &amendment_to_motion_id) {
    m_amendment_to_motion_id = amendment_to_motion_id;
    m_amendment_to_motion_id_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_amendment_to_motion_id_Set() const{
    return m_amendment_to_motion_id_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_amendment_to_motion_id_Valid() const{
    return m_amendment_to_motion_id_isValid;
}

QList<OAIPublishedEarlyDayMotionDetails> OAIPublishedEarlyDayMotionDetails::getAmendments() const {
    return m_amendments;
}
void OAIPublishedEarlyDayMotionDetails::setAmendments(const QList<OAIPublishedEarlyDayMotionDetails> &amendments) {
    m_amendments = amendments;
    m_amendments_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_amendments_Set() const{
    return m_amendments_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_amendments_Valid() const{
    return m_amendments_isValid;
}

QDateTime OAIPublishedEarlyDayMotionDetails::getDateTabled() const {
    return m_date_tabled;
}
void OAIPublishedEarlyDayMotionDetails::setDateTabled(const QDateTime &date_tabled) {
    m_date_tabled = date_tabled;
    m_date_tabled_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_date_tabled_Set() const{
    return m_date_tabled_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_date_tabled_Valid() const{
    return m_date_tabled_isValid;
}

qint32 OAIPublishedEarlyDayMotionDetails::getId() const {
    return m_id;
}
void OAIPublishedEarlyDayMotionDetails::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIPublishedEarlyDayMotionDetails::getMemberId() const {
    return m_member_id;
}
void OAIPublishedEarlyDayMotionDetails::setMemberId(const qint32 &member_id) {
    m_member_id = member_id;
    m_member_id_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_member_id_Valid() const{
    return m_member_id_isValid;
}

QString OAIPublishedEarlyDayMotionDetails::getMotionText() const {
    return m_motion_text;
}
void OAIPublishedEarlyDayMotionDetails::setMotionText(const QString &motion_text) {
    m_motion_text = motion_text;
    m_motion_text_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_motion_text_Set() const{
    return m_motion_text_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_motion_text_Valid() const{
    return m_motion_text_isValid;
}

qint32 OAIPublishedEarlyDayMotionDetails::getPrayingAgainstNegativeStatutoryInstrumentId() const {
    return m_praying_against_negative_statutory_instrument_id;
}
void OAIPublishedEarlyDayMotionDetails::setPrayingAgainstNegativeStatutoryInstrumentId(const qint32 &praying_against_negative_statutory_instrument_id) {
    m_praying_against_negative_statutory_instrument_id = praying_against_negative_statutory_instrument_id;
    m_praying_against_negative_statutory_instrument_id_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_praying_against_negative_statutory_instrument_id_Set() const{
    return m_praying_against_negative_statutory_instrument_id_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_praying_against_negative_statutory_instrument_id_Valid() const{
    return m_praying_against_negative_statutory_instrument_id_isValid;
}

OAIMemberForDate OAIPublishedEarlyDayMotionDetails::getPrimarySponsor() const {
    return m_primary_sponsor;
}
void OAIPublishedEarlyDayMotionDetails::setPrimarySponsor(const OAIMemberForDate &primary_sponsor) {
    m_primary_sponsor = primary_sponsor;
    m_primary_sponsor_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_primary_sponsor_Set() const{
    return m_primary_sponsor_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_primary_sponsor_Valid() const{
    return m_primary_sponsor_isValid;
}

QList<OAIPublishedEarlyDayMotionSponsor> OAIPublishedEarlyDayMotionDetails::getSponsors() const {
    return m_sponsors;
}
void OAIPublishedEarlyDayMotionDetails::setSponsors(const QList<OAIPublishedEarlyDayMotionSponsor> &sponsors) {
    m_sponsors = sponsors;
    m_sponsors_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_sponsors_Set() const{
    return m_sponsors_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_sponsors_Valid() const{
    return m_sponsors_isValid;
}

qint32 OAIPublishedEarlyDayMotionDetails::getSponsorsCount() const {
    return m_sponsors_count;
}
void OAIPublishedEarlyDayMotionDetails::setSponsorsCount(const qint32 &sponsors_count) {
    m_sponsors_count = sponsors_count;
    m_sponsors_count_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_sponsors_count_Set() const{
    return m_sponsors_count_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_sponsors_count_Valid() const{
    return m_sponsors_count_isValid;
}

QString OAIPublishedEarlyDayMotionDetails::getStatus() const {
    return m_status;
}
void OAIPublishedEarlyDayMotionDetails::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIPublishedEarlyDayMotionDetails::getStatusDate() const {
    return m_status_date;
}
void OAIPublishedEarlyDayMotionDetails::setStatusDate(const QDateTime &status_date) {
    m_status_date = status_date;
    m_status_date_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_status_date_Set() const{
    return m_status_date_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_status_date_Valid() const{
    return m_status_date_isValid;
}

qint32 OAIPublishedEarlyDayMotionDetails::getStatutoryInstrumentNumber() const {
    return m_statutory_instrument_number;
}
void OAIPublishedEarlyDayMotionDetails::setStatutoryInstrumentNumber(const qint32 &statutory_instrument_number) {
    m_statutory_instrument_number = statutory_instrument_number;
    m_statutory_instrument_number_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_statutory_instrument_number_Set() const{
    return m_statutory_instrument_number_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_statutory_instrument_number_Valid() const{
    return m_statutory_instrument_number_isValid;
}

QString OAIPublishedEarlyDayMotionDetails::getStatutoryInstrumentTitle() const {
    return m_statutory_instrument_title;
}
void OAIPublishedEarlyDayMotionDetails::setStatutoryInstrumentTitle(const QString &statutory_instrument_title) {
    m_statutory_instrument_title = statutory_instrument_title;
    m_statutory_instrument_title_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_statutory_instrument_title_Set() const{
    return m_statutory_instrument_title_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_statutory_instrument_title_Valid() const{
    return m_statutory_instrument_title_isValid;
}

QString OAIPublishedEarlyDayMotionDetails::getStatutoryInstrumentYear() const {
    return m_statutory_instrument_year;
}
void OAIPublishedEarlyDayMotionDetails::setStatutoryInstrumentYear(const QString &statutory_instrument_year) {
    m_statutory_instrument_year = statutory_instrument_year;
    m_statutory_instrument_year_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_statutory_instrument_year_Set() const{
    return m_statutory_instrument_year_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_statutory_instrument_year_Valid() const{
    return m_statutory_instrument_year_isValid;
}

QString OAIPublishedEarlyDayMotionDetails::getTitle() const {
    return m_title;
}
void OAIPublishedEarlyDayMotionDetails::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIPublishedEarlyDayMotionDetails::getUin() const {
    return m_uin;
}
void OAIPublishedEarlyDayMotionDetails::setUin(const qint32 &uin) {
    m_uin = uin;
    m_uin_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_uin_Set() const{
    return m_uin_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_uin_Valid() const{
    return m_uin_isValid;
}

QString OAIPublishedEarlyDayMotionDetails::getUinWithAmendmentSuffix() const {
    return m_uin_with_amendment_suffix;
}
void OAIPublishedEarlyDayMotionDetails::setUinWithAmendmentSuffix(const QString &uin_with_amendment_suffix) {
    m_uin_with_amendment_suffix = uin_with_amendment_suffix;
    m_uin_with_amendment_suffix_isSet = true;
}

bool OAIPublishedEarlyDayMotionDetails::is_uin_with_amendment_suffix_Set() const{
    return m_uin_with_amendment_suffix_isSet;
}

bool OAIPublishedEarlyDayMotionDetails::is_uin_with_amendment_suffix_Valid() const{
    return m_uin_with_amendment_suffix_isValid;
}

bool OAIPublishedEarlyDayMotionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amendment_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amendment_to_motion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amendments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_tabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_motion_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_praying_against_negative_statutory_instrument_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_sponsor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sponsors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sponsors_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statutory_instrument_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statutory_instrument_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statutory_instrument_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uin_with_amendment_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublishedEarlyDayMotionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
