/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublishedWrittenQuestion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublishedWrittenQuestion::OAIPublishedWrittenQuestion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublishedWrittenQuestion::OAIPublishedWrittenQuestion() {
    this->initializeModel();
}

OAIPublishedWrittenQuestion::~OAIPublishedWrittenQuestion() {}

void OAIPublishedWrittenQuestion::initializeModel() {

    m_answer_isSet = false;
    m_answer_isValid = false;

    m_answered_when_isSet = false;
    m_answered_when_isValid = false;

    m_answering_body_isSet = false;
    m_answering_body_isValid = false;

    m_answering_body_id_isSet = false;
    m_answering_body_id_isValid = false;

    m_answering_minister_isSet = false;
    m_answering_minister_isValid = false;

    m_answering_minister_id_isSet = false;
    m_answering_minister_id_isValid = false;

    m_answering_minister_title_isSet = false;
    m_answering_minister_title_isValid = false;

    m_asking_member_isSet = false;
    m_asking_member_isValid = false;

    m_asking_member_id_isSet = false;
    m_asking_member_id_isValid = false;

    m_due_for_answer_isSet = false;
    m_due_for_answer_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_question_text_isSet = false;
    m_question_text_isValid = false;

    m_question_type_isSet = false;
    m_question_type_isValid = false;

    m_tabled_when_isSet = false;
    m_tabled_when_isValid = false;

    m_uin_isSet = false;
    m_uin_isValid = false;
}

void OAIPublishedWrittenQuestion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublishedWrittenQuestion::fromJsonObject(QJsonObject json) {

    m_answer_isValid = ::OpenAPI::fromJsonValue(m_answer, json[QString("Answer")]);
    m_answer_isSet = !json[QString("Answer")].isNull() && m_answer_isValid;

    m_answered_when_isValid = ::OpenAPI::fromJsonValue(m_answered_when, json[QString("AnsweredWhen")]);
    m_answered_when_isSet = !json[QString("AnsweredWhen")].isNull() && m_answered_when_isValid;

    m_answering_body_isValid = ::OpenAPI::fromJsonValue(m_answering_body, json[QString("AnsweringBody")]);
    m_answering_body_isSet = !json[QString("AnsweringBody")].isNull() && m_answering_body_isValid;

    m_answering_body_id_isValid = ::OpenAPI::fromJsonValue(m_answering_body_id, json[QString("AnsweringBodyId")]);
    m_answering_body_id_isSet = !json[QString("AnsweringBodyId")].isNull() && m_answering_body_id_isValid;

    m_answering_minister_isValid = ::OpenAPI::fromJsonValue(m_answering_minister, json[QString("AnsweringMinister")]);
    m_answering_minister_isSet = !json[QString("AnsweringMinister")].isNull() && m_answering_minister_isValid;

    m_answering_minister_id_isValid = ::OpenAPI::fromJsonValue(m_answering_minister_id, json[QString("AnsweringMinisterId")]);
    m_answering_minister_id_isSet = !json[QString("AnsweringMinisterId")].isNull() && m_answering_minister_id_isValid;

    m_answering_minister_title_isValid = ::OpenAPI::fromJsonValue(m_answering_minister_title, json[QString("AnsweringMinisterTitle")]);
    m_answering_minister_title_isSet = !json[QString("AnsweringMinisterTitle")].isNull() && m_answering_minister_title_isValid;

    m_asking_member_isValid = ::OpenAPI::fromJsonValue(m_asking_member, json[QString("AskingMember")]);
    m_asking_member_isSet = !json[QString("AskingMember")].isNull() && m_asking_member_isValid;

    m_asking_member_id_isValid = ::OpenAPI::fromJsonValue(m_asking_member_id, json[QString("AskingMemberId")]);
    m_asking_member_id_isSet = !json[QString("AskingMemberId")].isNull() && m_asking_member_id_isValid;

    m_due_for_answer_isValid = ::OpenAPI::fromJsonValue(m_due_for_answer, json[QString("DueForAnswer")]);
    m_due_for_answer_isSet = !json[QString("DueForAnswer")].isNull() && m_due_for_answer_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_question_text_isValid = ::OpenAPI::fromJsonValue(m_question_text, json[QString("QuestionText")]);
    m_question_text_isSet = !json[QString("QuestionText")].isNull() && m_question_text_isValid;

    m_question_type_isValid = ::OpenAPI::fromJsonValue(m_question_type, json[QString("QuestionType")]);
    m_question_type_isSet = !json[QString("QuestionType")].isNull() && m_question_type_isValid;

    m_tabled_when_isValid = ::OpenAPI::fromJsonValue(m_tabled_when, json[QString("TabledWhen")]);
    m_tabled_when_isSet = !json[QString("TabledWhen")].isNull() && m_tabled_when_isValid;

    m_uin_isValid = ::OpenAPI::fromJsonValue(m_uin, json[QString("UIN")]);
    m_uin_isSet = !json[QString("UIN")].isNull() && m_uin_isValid;
}

QString OAIPublishedWrittenQuestion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublishedWrittenQuestion::asJsonObject() const {
    QJsonObject obj;
    if (m_answer_isSet) {
        obj.insert(QString("Answer"), ::OpenAPI::toJsonValue(m_answer));
    }
    if (m_answered_when_isSet) {
        obj.insert(QString("AnsweredWhen"), ::OpenAPI::toJsonValue(m_answered_when));
    }
    if (m_answering_body_isSet) {
        obj.insert(QString("AnsweringBody"), ::OpenAPI::toJsonValue(m_answering_body));
    }
    if (m_answering_body_id_isSet) {
        obj.insert(QString("AnsweringBodyId"), ::OpenAPI::toJsonValue(m_answering_body_id));
    }
    if (m_answering_minister.isSet()) {
        obj.insert(QString("AnsweringMinister"), ::OpenAPI::toJsonValue(m_answering_minister));
    }
    if (m_answering_minister_id_isSet) {
        obj.insert(QString("AnsweringMinisterId"), ::OpenAPI::toJsonValue(m_answering_minister_id));
    }
    if (m_answering_minister_title_isSet) {
        obj.insert(QString("AnsweringMinisterTitle"), ::OpenAPI::toJsonValue(m_answering_minister_title));
    }
    if (m_asking_member.isSet()) {
        obj.insert(QString("AskingMember"), ::OpenAPI::toJsonValue(m_asking_member));
    }
    if (m_asking_member_id_isSet) {
        obj.insert(QString("AskingMemberId"), ::OpenAPI::toJsonValue(m_asking_member_id));
    }
    if (m_due_for_answer_isSet) {
        obj.insert(QString("DueForAnswer"), ::OpenAPI::toJsonValue(m_due_for_answer));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_question_text_isSet) {
        obj.insert(QString("QuestionText"), ::OpenAPI::toJsonValue(m_question_text));
    }
    if (m_question_type_isSet) {
        obj.insert(QString("QuestionType"), ::OpenAPI::toJsonValue(m_question_type));
    }
    if (m_tabled_when_isSet) {
        obj.insert(QString("TabledWhen"), ::OpenAPI::toJsonValue(m_tabled_when));
    }
    if (m_uin_isSet) {
        obj.insert(QString("UIN"), ::OpenAPI::toJsonValue(m_uin));
    }
    return obj;
}

QString OAIPublishedWrittenQuestion::getAnswer() const {
    return m_answer;
}
void OAIPublishedWrittenQuestion::setAnswer(const QString &answer) {
    m_answer = answer;
    m_answer_isSet = true;
}

bool OAIPublishedWrittenQuestion::is_answer_Set() const{
    return m_answer_isSet;
}

bool OAIPublishedWrittenQuestion::is_answer_Valid() const{
    return m_answer_isValid;
}

QDateTime OAIPublishedWrittenQuestion::getAnsweredWhen() const {
    return m_answered_when;
}
void OAIPublishedWrittenQuestion::setAnsweredWhen(const QDateTime &answered_when) {
    m_answered_when = answered_when;
    m_answered_when_isSet = true;
}

bool OAIPublishedWrittenQuestion::is_answered_when_Set() const{
    return m_answered_when_isSet;
}

bool OAIPublishedWrittenQuestion::is_answered_when_Valid() const{
    return m_answered_when_isValid;
}

QString OAIPublishedWrittenQuestion::getAnsweringBody() const {
    return m_answering_body;
}
void OAIPublishedWrittenQuestion::setAnsweringBody(const QString &answering_body) {
    m_answering_body = answering_body;
    m_answering_body_isSet = true;
}

bool OAIPublishedWrittenQuestion::is_answering_body_Set() const{
    return m_answering_body_isSet;
}

bool OAIPublishedWrittenQuestion::is_answering_body_Valid() const{
    return m_answering_body_isValid;
}

qint32 OAIPublishedWrittenQuestion::getAnsweringBodyId() const {
    return m_answering_body_id;
}
void OAIPublishedWrittenQuestion::setAnsweringBodyId(const qint32 &answering_body_id) {
    m_answering_body_id = answering_body_id;
    m_answering_body_id_isSet = true;
}

bool OAIPublishedWrittenQuestion::is_answering_body_id_Set() const{
    return m_answering_body_id_isSet;
}

bool OAIPublishedWrittenQuestion::is_answering_body_id_Valid() const{
    return m_answering_body_id_isValid;
}

OAIMemberForDate OAIPublishedWrittenQuestion::getAnsweringMinister() const {
    return m_answering_minister;
}
void OAIPublishedWrittenQuestion::setAnsweringMinister(const OAIMemberForDate &answering_minister) {
    m_answering_minister = answering_minister;
    m_answering_minister_isSet = true;
}

bool OAIPublishedWrittenQuestion::is_answering_minister_Set() const{
    return m_answering_minister_isSet;
}

bool OAIPublishedWrittenQuestion::is_answering_minister_Valid() const{
    return m_answering_minister_isValid;
}

qint32 OAIPublishedWrittenQuestion::getAnsweringMinisterId() const {
    return m_answering_minister_id;
}
void OAIPublishedWrittenQuestion::setAnsweringMinisterId(const qint32 &answering_minister_id) {
    m_answering_minister_id = answering_minister_id;
    m_answering_minister_id_isSet = true;
}

bool OAIPublishedWrittenQuestion::is_answering_minister_id_Set() const{
    return m_answering_minister_id_isSet;
}

bool OAIPublishedWrittenQuestion::is_answering_minister_id_Valid() const{
    return m_answering_minister_id_isValid;
}

QString OAIPublishedWrittenQuestion::getAnsweringMinisterTitle() const {
    return m_answering_minister_title;
}
void OAIPublishedWrittenQuestion::setAnsweringMinisterTitle(const QString &answering_minister_title) {
    m_answering_minister_title = answering_minister_title;
    m_answering_minister_title_isSet = true;
}

bool OAIPublishedWrittenQuestion::is_answering_minister_title_Set() const{
    return m_answering_minister_title_isSet;
}

bool OAIPublishedWrittenQuestion::is_answering_minister_title_Valid() const{
    return m_answering_minister_title_isValid;
}

OAIMemberForDate OAIPublishedWrittenQuestion::getAskingMember() const {
    return m_asking_member;
}
void OAIPublishedWrittenQuestion::setAskingMember(const OAIMemberForDate &asking_member) {
    m_asking_member = asking_member;
    m_asking_member_isSet = true;
}

bool OAIPublishedWrittenQuestion::is_asking_member_Set() const{
    return m_asking_member_isSet;
}

bool OAIPublishedWrittenQuestion::is_asking_member_Valid() const{
    return m_asking_member_isValid;
}

qint32 OAIPublishedWrittenQuestion::getAskingMemberId() const {
    return m_asking_member_id;
}
void OAIPublishedWrittenQuestion::setAskingMemberId(const qint32 &asking_member_id) {
    m_asking_member_id = asking_member_id;
    m_asking_member_id_isSet = true;
}

bool OAIPublishedWrittenQuestion::is_asking_member_id_Set() const{
    return m_asking_member_id_isSet;
}

bool OAIPublishedWrittenQuestion::is_asking_member_id_Valid() const{
    return m_asking_member_id_isValid;
}

QDateTime OAIPublishedWrittenQuestion::getDueForAnswer() const {
    return m_due_for_answer;
}
void OAIPublishedWrittenQuestion::setDueForAnswer(const QDateTime &due_for_answer) {
    m_due_for_answer = due_for_answer;
    m_due_for_answer_isSet = true;
}

bool OAIPublishedWrittenQuestion::is_due_for_answer_Set() const{
    return m_due_for_answer_isSet;
}

bool OAIPublishedWrittenQuestion::is_due_for_answer_Valid() const{
    return m_due_for_answer_isValid;
}

qint32 OAIPublishedWrittenQuestion::getId() const {
    return m_id;
}
void OAIPublishedWrittenQuestion::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPublishedWrittenQuestion::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPublishedWrittenQuestion::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPublishedWrittenQuestion::getQuestionText() const {
    return m_question_text;
}
void OAIPublishedWrittenQuestion::setQuestionText(const QString &question_text) {
    m_question_text = question_text;
    m_question_text_isSet = true;
}

bool OAIPublishedWrittenQuestion::is_question_text_Set() const{
    return m_question_text_isSet;
}

bool OAIPublishedWrittenQuestion::is_question_text_Valid() const{
    return m_question_text_isValid;
}

QString OAIPublishedWrittenQuestion::getQuestionType() const {
    return m_question_type;
}
void OAIPublishedWrittenQuestion::setQuestionType(const QString &question_type) {
    m_question_type = question_type;
    m_question_type_isSet = true;
}

bool OAIPublishedWrittenQuestion::is_question_type_Set() const{
    return m_question_type_isSet;
}

bool OAIPublishedWrittenQuestion::is_question_type_Valid() const{
    return m_question_type_isValid;
}

QDateTime OAIPublishedWrittenQuestion::getTabledWhen() const {
    return m_tabled_when;
}
void OAIPublishedWrittenQuestion::setTabledWhen(const QDateTime &tabled_when) {
    m_tabled_when = tabled_when;
    m_tabled_when_isSet = true;
}

bool OAIPublishedWrittenQuestion::is_tabled_when_Set() const{
    return m_tabled_when_isSet;
}

bool OAIPublishedWrittenQuestion::is_tabled_when_Valid() const{
    return m_tabled_when_isValid;
}

qint32 OAIPublishedWrittenQuestion::getUin() const {
    return m_uin;
}
void OAIPublishedWrittenQuestion::setUin(const qint32 &uin) {
    m_uin = uin;
    m_uin_isSet = true;
}

bool OAIPublishedWrittenQuestion::is_uin_Set() const{
    return m_uin_isSet;
}

bool OAIPublishedWrittenQuestion::is_uin_Valid() const{
    return m_uin_isValid;
}

bool OAIPublishedWrittenQuestion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answered_when_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_body_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_minister.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_minister_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_minister_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asking_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asking_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_for_answer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tabled_when_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublishedWrittenQuestion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
