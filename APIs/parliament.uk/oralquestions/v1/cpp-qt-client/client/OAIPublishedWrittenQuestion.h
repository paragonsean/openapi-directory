/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPublishedWrittenQuestion.h
 *
 * 
 */

#ifndef OAIPublishedWrittenQuestion_H
#define OAIPublishedWrittenQuestion_H

#include <QJsonObject>

#include "OAIMemberForDate.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMemberForDate;

class OAIPublishedWrittenQuestion : public OAIObject {
public:
    OAIPublishedWrittenQuestion();
    OAIPublishedWrittenQuestion(QString json);
    ~OAIPublishedWrittenQuestion() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAnswer() const;
    void setAnswer(const QString &answer);
    bool is_answer_Set() const;
    bool is_answer_Valid() const;

    QDateTime getAnsweredWhen() const;
    void setAnsweredWhen(const QDateTime &answered_when);
    bool is_answered_when_Set() const;
    bool is_answered_when_Valid() const;

    QString getAnsweringBody() const;
    void setAnsweringBody(const QString &answering_body);
    bool is_answering_body_Set() const;
    bool is_answering_body_Valid() const;

    qint32 getAnsweringBodyId() const;
    void setAnsweringBodyId(const qint32 &answering_body_id);
    bool is_answering_body_id_Set() const;
    bool is_answering_body_id_Valid() const;

    OAIMemberForDate getAnsweringMinister() const;
    void setAnsweringMinister(const OAIMemberForDate &answering_minister);
    bool is_answering_minister_Set() const;
    bool is_answering_minister_Valid() const;

    qint32 getAnsweringMinisterId() const;
    void setAnsweringMinisterId(const qint32 &answering_minister_id);
    bool is_answering_minister_id_Set() const;
    bool is_answering_minister_id_Valid() const;

    QString getAnsweringMinisterTitle() const;
    void setAnsweringMinisterTitle(const QString &answering_minister_title);
    bool is_answering_minister_title_Set() const;
    bool is_answering_minister_title_Valid() const;

    OAIMemberForDate getAskingMember() const;
    void setAskingMember(const OAIMemberForDate &asking_member);
    bool is_asking_member_Set() const;
    bool is_asking_member_Valid() const;

    qint32 getAskingMemberId() const;
    void setAskingMemberId(const qint32 &asking_member_id);
    bool is_asking_member_id_Set() const;
    bool is_asking_member_id_Valid() const;

    QDateTime getDueForAnswer() const;
    void setDueForAnswer(const QDateTime &due_for_answer);
    bool is_due_for_answer_Set() const;
    bool is_due_for_answer_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getQuestionText() const;
    void setQuestionText(const QString &question_text);
    bool is_question_text_Set() const;
    bool is_question_text_Valid() const;

    QString getQuestionType() const;
    void setQuestionType(const QString &question_type);
    bool is_question_type_Set() const;
    bool is_question_type_Valid() const;

    QDateTime getTabledWhen() const;
    void setTabledWhen(const QDateTime &tabled_when);
    bool is_tabled_when_Set() const;
    bool is_tabled_when_Valid() const;

    qint32 getUin() const;
    void setUin(const qint32 &uin);
    bool is_uin_Set() const;
    bool is_uin_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_answer;
    bool m_answer_isSet;
    bool m_answer_isValid;

    QDateTime m_answered_when;
    bool m_answered_when_isSet;
    bool m_answered_when_isValid;

    QString m_answering_body;
    bool m_answering_body_isSet;
    bool m_answering_body_isValid;

    qint32 m_answering_body_id;
    bool m_answering_body_id_isSet;
    bool m_answering_body_id_isValid;

    OAIMemberForDate m_answering_minister;
    bool m_answering_minister_isSet;
    bool m_answering_minister_isValid;

    qint32 m_answering_minister_id;
    bool m_answering_minister_id_isSet;
    bool m_answering_minister_id_isValid;

    QString m_answering_minister_title;
    bool m_answering_minister_title_isSet;
    bool m_answering_minister_title_isValid;

    OAIMemberForDate m_asking_member;
    bool m_asking_member_isSet;
    bool m_asking_member_isValid;

    qint32 m_asking_member_id;
    bool m_asking_member_id_isSet;
    bool m_asking_member_id_isValid;

    QDateTime m_due_for_answer;
    bool m_due_for_answer_isSet;
    bool m_due_for_answer_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_question_text;
    bool m_question_text_isSet;
    bool m_question_text_isValid;

    QString m_question_type;
    bool m_question_type_isSet;
    bool m_question_type_isValid;

    QDateTime m_tabled_when;
    bool m_tabled_when_isSet;
    bool m_tabled_when_isValid;

    qint32 m_uin;
    bool m_uin_isSet;
    bool m_uin_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPublishedWrittenQuestion)

#endif // OAIPublishedWrittenQuestion_H
