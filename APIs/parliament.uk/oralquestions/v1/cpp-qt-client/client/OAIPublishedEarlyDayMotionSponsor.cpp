/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublishedEarlyDayMotionSponsor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublishedEarlyDayMotionSponsor::OAIPublishedEarlyDayMotionSponsor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublishedEarlyDayMotionSponsor::OAIPublishedEarlyDayMotionSponsor() {
    this->initializeModel();
}

OAIPublishedEarlyDayMotionSponsor::~OAIPublishedEarlyDayMotionSponsor() {}

void OAIPublishedEarlyDayMotionSponsor::initializeModel() {

    m_created_when_isSet = false;
    m_created_when_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_withdrawn_isSet = false;
    m_is_withdrawn_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_sponsoring_order_isSet = false;
    m_sponsoring_order_isValid = false;

    m_withdrawn_date_isSet = false;
    m_withdrawn_date_isValid = false;
}

void OAIPublishedEarlyDayMotionSponsor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublishedEarlyDayMotionSponsor::fromJsonObject(QJsonObject json) {

    m_created_when_isValid = ::OpenAPI::fromJsonValue(m_created_when, json[QString("CreatedWhen")]);
    m_created_when_isSet = !json[QString("CreatedWhen")].isNull() && m_created_when_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_withdrawn_isValid = ::OpenAPI::fromJsonValue(m_is_withdrawn, json[QString("IsWithdrawn")]);
    m_is_withdrawn_isSet = !json[QString("IsWithdrawn")].isNull() && m_is_withdrawn_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("Member")]);
    m_member_isSet = !json[QString("Member")].isNull() && m_member_isValid;

    m_member_id_isValid = ::OpenAPI::fromJsonValue(m_member_id, json[QString("MemberId")]);
    m_member_id_isSet = !json[QString("MemberId")].isNull() && m_member_id_isValid;

    m_sponsoring_order_isValid = ::OpenAPI::fromJsonValue(m_sponsoring_order, json[QString("SponsoringOrder")]);
    m_sponsoring_order_isSet = !json[QString("SponsoringOrder")].isNull() && m_sponsoring_order_isValid;

    m_withdrawn_date_isValid = ::OpenAPI::fromJsonValue(m_withdrawn_date, json[QString("WithdrawnDate")]);
    m_withdrawn_date_isSet = !json[QString("WithdrawnDate")].isNull() && m_withdrawn_date_isValid;
}

QString OAIPublishedEarlyDayMotionSponsor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublishedEarlyDayMotionSponsor::asJsonObject() const {
    QJsonObject obj;
    if (m_created_when_isSet) {
        obj.insert(QString("CreatedWhen"), ::OpenAPI::toJsonValue(m_created_when));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_withdrawn_isSet) {
        obj.insert(QString("IsWithdrawn"), ::OpenAPI::toJsonValue(m_is_withdrawn));
    }
    if (m_member.isSet()) {
        obj.insert(QString("Member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_member_id_isSet) {
        obj.insert(QString("MemberId"), ::OpenAPI::toJsonValue(m_member_id));
    }
    if (m_sponsoring_order_isSet) {
        obj.insert(QString("SponsoringOrder"), ::OpenAPI::toJsonValue(m_sponsoring_order));
    }
    if (m_withdrawn_date_isSet) {
        obj.insert(QString("WithdrawnDate"), ::OpenAPI::toJsonValue(m_withdrawn_date));
    }
    return obj;
}

QDateTime OAIPublishedEarlyDayMotionSponsor::getCreatedWhen() const {
    return m_created_when;
}
void OAIPublishedEarlyDayMotionSponsor::setCreatedWhen(const QDateTime &created_when) {
    m_created_when = created_when;
    m_created_when_isSet = true;
}

bool OAIPublishedEarlyDayMotionSponsor::is_created_when_Set() const{
    return m_created_when_isSet;
}

bool OAIPublishedEarlyDayMotionSponsor::is_created_when_Valid() const{
    return m_created_when_isValid;
}

qint32 OAIPublishedEarlyDayMotionSponsor::getId() const {
    return m_id;
}
void OAIPublishedEarlyDayMotionSponsor::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPublishedEarlyDayMotionSponsor::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPublishedEarlyDayMotionSponsor::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPublishedEarlyDayMotionSponsor::isIsWithdrawn() const {
    return m_is_withdrawn;
}
void OAIPublishedEarlyDayMotionSponsor::setIsWithdrawn(const bool &is_withdrawn) {
    m_is_withdrawn = is_withdrawn;
    m_is_withdrawn_isSet = true;
}

bool OAIPublishedEarlyDayMotionSponsor::is_is_withdrawn_Set() const{
    return m_is_withdrawn_isSet;
}

bool OAIPublishedEarlyDayMotionSponsor::is_is_withdrawn_Valid() const{
    return m_is_withdrawn_isValid;
}

OAIMemberForDate OAIPublishedEarlyDayMotionSponsor::getMember() const {
    return m_member;
}
void OAIPublishedEarlyDayMotionSponsor::setMember(const OAIMemberForDate &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIPublishedEarlyDayMotionSponsor::is_member_Set() const{
    return m_member_isSet;
}

bool OAIPublishedEarlyDayMotionSponsor::is_member_Valid() const{
    return m_member_isValid;
}

qint32 OAIPublishedEarlyDayMotionSponsor::getMemberId() const {
    return m_member_id;
}
void OAIPublishedEarlyDayMotionSponsor::setMemberId(const qint32 &member_id) {
    m_member_id = member_id;
    m_member_id_isSet = true;
}

bool OAIPublishedEarlyDayMotionSponsor::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAIPublishedEarlyDayMotionSponsor::is_member_id_Valid() const{
    return m_member_id_isValid;
}

qint32 OAIPublishedEarlyDayMotionSponsor::getSponsoringOrder() const {
    return m_sponsoring_order;
}
void OAIPublishedEarlyDayMotionSponsor::setSponsoringOrder(const qint32 &sponsoring_order) {
    m_sponsoring_order = sponsoring_order;
    m_sponsoring_order_isSet = true;
}

bool OAIPublishedEarlyDayMotionSponsor::is_sponsoring_order_Set() const{
    return m_sponsoring_order_isSet;
}

bool OAIPublishedEarlyDayMotionSponsor::is_sponsoring_order_Valid() const{
    return m_sponsoring_order_isValid;
}

QDateTime OAIPublishedEarlyDayMotionSponsor::getWithdrawnDate() const {
    return m_withdrawn_date;
}
void OAIPublishedEarlyDayMotionSponsor::setWithdrawnDate(const QDateTime &withdrawn_date) {
    m_withdrawn_date = withdrawn_date;
    m_withdrawn_date_isSet = true;
}

bool OAIPublishedEarlyDayMotionSponsor::is_withdrawn_date_Set() const{
    return m_withdrawn_date_isSet;
}

bool OAIPublishedEarlyDayMotionSponsor::is_withdrawn_date_Valid() const{
    return m_withdrawn_date_isValid;
}

bool OAIPublishedEarlyDayMotionSponsor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_when_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_withdrawn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sponsoring_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_withdrawn_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublishedEarlyDayMotionSponsor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
