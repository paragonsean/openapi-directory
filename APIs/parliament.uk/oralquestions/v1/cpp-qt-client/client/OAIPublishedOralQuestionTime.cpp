/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublishedOralQuestionTime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublishedOralQuestionTime::OAIPublishedOralQuestionTime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublishedOralQuestionTime::OAIPublishedOralQuestionTime() {
    this->initializeModel();
}

OAIPublishedOralQuestionTime::~OAIPublishedOralQuestionTime() {}

void OAIPublishedOralQuestionTime::initializeModel() {

    m_answering_body_names_isSet = false;
    m_answering_body_names_isValid = false;

    m_answering_minister_titles_isSet = false;
    m_answering_minister_titles_isValid = false;

    m_answering_when_isSet = false;
    m_answering_when_isValid = false;

    m_deadline_when_isSet = false;
    m_deadline_when_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_substantive_time_isSet = false;
    m_substantive_time_isValid = false;

    m_topical_time_isSet = false;
    m_topical_time_isValid = false;
}

void OAIPublishedOralQuestionTime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublishedOralQuestionTime::fromJsonObject(QJsonObject json) {

    m_answering_body_names_isValid = ::OpenAPI::fromJsonValue(m_answering_body_names, json[QString("AnsweringBodyNames")]);
    m_answering_body_names_isSet = !json[QString("AnsweringBodyNames")].isNull() && m_answering_body_names_isValid;

    m_answering_minister_titles_isValid = ::OpenAPI::fromJsonValue(m_answering_minister_titles, json[QString("AnsweringMinisterTitles")]);
    m_answering_minister_titles_isSet = !json[QString("AnsweringMinisterTitles")].isNull() && m_answering_minister_titles_isValid;

    m_answering_when_isValid = ::OpenAPI::fromJsonValue(m_answering_when, json[QString("AnsweringWhen")]);
    m_answering_when_isSet = !json[QString("AnsweringWhen")].isNull() && m_answering_when_isValid;

    m_deadline_when_isValid = ::OpenAPI::fromJsonValue(m_deadline_when, json[QString("DeadlineWhen")]);
    m_deadline_when_isSet = !json[QString("DeadlineWhen")].isNull() && m_deadline_when_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_substantive_time_isValid = ::OpenAPI::fromJsonValue(m_substantive_time, json[QString("SubstantiveTime")]);
    m_substantive_time_isSet = !json[QString("SubstantiveTime")].isNull() && m_substantive_time_isValid;

    m_topical_time_isValid = ::OpenAPI::fromJsonValue(m_topical_time, json[QString("TopicalTime")]);
    m_topical_time_isSet = !json[QString("TopicalTime")].isNull() && m_topical_time_isValid;
}

QString OAIPublishedOralQuestionTime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublishedOralQuestionTime::asJsonObject() const {
    QJsonObject obj;
    if (m_answering_body_names_isSet) {
        obj.insert(QString("AnsweringBodyNames"), ::OpenAPI::toJsonValue(m_answering_body_names));
    }
    if (m_answering_minister_titles_isSet) {
        obj.insert(QString("AnsweringMinisterTitles"), ::OpenAPI::toJsonValue(m_answering_minister_titles));
    }
    if (m_answering_when_isSet) {
        obj.insert(QString("AnsweringWhen"), ::OpenAPI::toJsonValue(m_answering_when));
    }
    if (m_deadline_when_isSet) {
        obj.insert(QString("DeadlineWhen"), ::OpenAPI::toJsonValue(m_deadline_when));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_substantive_time_isSet) {
        obj.insert(QString("SubstantiveTime"), ::OpenAPI::toJsonValue(m_substantive_time));
    }
    if (m_topical_time_isSet) {
        obj.insert(QString("TopicalTime"), ::OpenAPI::toJsonValue(m_topical_time));
    }
    return obj;
}

QString OAIPublishedOralQuestionTime::getAnsweringBodyNames() const {
    return m_answering_body_names;
}
void OAIPublishedOralQuestionTime::setAnsweringBodyNames(const QString &answering_body_names) {
    m_answering_body_names = answering_body_names;
    m_answering_body_names_isSet = true;
}

bool OAIPublishedOralQuestionTime::is_answering_body_names_Set() const{
    return m_answering_body_names_isSet;
}

bool OAIPublishedOralQuestionTime::is_answering_body_names_Valid() const{
    return m_answering_body_names_isValid;
}

QString OAIPublishedOralQuestionTime::getAnsweringMinisterTitles() const {
    return m_answering_minister_titles;
}
void OAIPublishedOralQuestionTime::setAnsweringMinisterTitles(const QString &answering_minister_titles) {
    m_answering_minister_titles = answering_minister_titles;
    m_answering_minister_titles_isSet = true;
}

bool OAIPublishedOralQuestionTime::is_answering_minister_titles_Set() const{
    return m_answering_minister_titles_isSet;
}

bool OAIPublishedOralQuestionTime::is_answering_minister_titles_Valid() const{
    return m_answering_minister_titles_isValid;
}

QDateTime OAIPublishedOralQuestionTime::getAnsweringWhen() const {
    return m_answering_when;
}
void OAIPublishedOralQuestionTime::setAnsweringWhen(const QDateTime &answering_when) {
    m_answering_when = answering_when;
    m_answering_when_isSet = true;
}

bool OAIPublishedOralQuestionTime::is_answering_when_Set() const{
    return m_answering_when_isSet;
}

bool OAIPublishedOralQuestionTime::is_answering_when_Valid() const{
    return m_answering_when_isValid;
}

QDateTime OAIPublishedOralQuestionTime::getDeadlineWhen() const {
    return m_deadline_when;
}
void OAIPublishedOralQuestionTime::setDeadlineWhen(const QDateTime &deadline_when) {
    m_deadline_when = deadline_when;
    m_deadline_when_isSet = true;
}

bool OAIPublishedOralQuestionTime::is_deadline_when_Set() const{
    return m_deadline_when_isSet;
}

bool OAIPublishedOralQuestionTime::is_deadline_when_Valid() const{
    return m_deadline_when_isValid;
}

qint32 OAIPublishedOralQuestionTime::getId() const {
    return m_id;
}
void OAIPublishedOralQuestionTime::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPublishedOralQuestionTime::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPublishedOralQuestionTime::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPublishedOralQuestionTime::getSubstantiveTime() const {
    return m_substantive_time;
}
void OAIPublishedOralQuestionTime::setSubstantiveTime(const QString &substantive_time) {
    m_substantive_time = substantive_time;
    m_substantive_time_isSet = true;
}

bool OAIPublishedOralQuestionTime::is_substantive_time_Set() const{
    return m_substantive_time_isSet;
}

bool OAIPublishedOralQuestionTime::is_substantive_time_Valid() const{
    return m_substantive_time_isValid;
}

QString OAIPublishedOralQuestionTime::getTopicalTime() const {
    return m_topical_time;
}
void OAIPublishedOralQuestionTime::setTopicalTime(const QString &topical_time) {
    m_topical_time = topical_time;
    m_topical_time_isSet = true;
}

bool OAIPublishedOralQuestionTime::is_topical_time_Set() const{
    return m_topical_time_isSet;
}

bool OAIPublishedOralQuestionTime::is_topical_time_Valid() const{
    return m_topical_time_isValid;
}

bool OAIPublishedOralQuestionTime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answering_body_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_minister_titles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_when_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deadline_when_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_substantive_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topical_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublishedOralQuestionTime::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
