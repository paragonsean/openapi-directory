/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPagingInfo.h
 *
 * 
 */

#ifndef OAIPagingInfo_H
#define OAIPagingInfo_H

#include <QJsonObject>

#include "OAIStatusCount.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStatusCount;

class OAIPagingInfo : public OAIObject {
public:
    OAIPagingInfo();
    OAIPagingInfo(QString json);
    ~OAIPagingInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIStatusCount> getGlobalStatusCounts() const;
    void setGlobalStatusCounts(const QList<OAIStatusCount> &global_status_counts);
    bool is_global_status_counts_Set() const;
    bool is_global_status_counts_Valid() const;

    qint32 getGlobalTotal() const;
    void setGlobalTotal(const qint32 &global_total);
    bool is_global_total_Set() const;
    bool is_global_total_Valid() const;

    qint32 getSkip() const;
    void setSkip(const qint32 &skip);
    bool is_skip_Set() const;
    bool is_skip_Valid() const;

    QList<OAIStatusCount> getStatusCounts() const;
    void setStatusCounts(const QList<OAIStatusCount> &status_counts);
    bool is_status_counts_Set() const;
    bool is_status_counts_Valid() const;

    qint32 getTake() const;
    void setTake(const qint32 &take);
    bool is_take_Set() const;
    bool is_take_Valid() const;

    qint32 getTotal() const;
    void setTotal(const qint32 &total);
    bool is_total_Set() const;
    bool is_total_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIStatusCount> m_global_status_counts;
    bool m_global_status_counts_isSet;
    bool m_global_status_counts_isValid;

    qint32 m_global_total;
    bool m_global_total_isSet;
    bool m_global_total_isValid;

    qint32 m_skip;
    bool m_skip_isSet;
    bool m_skip_isValid;

    QList<OAIStatusCount> m_status_counts;
    bool m_status_counts_isSet;
    bool m_status_counts_isValid;

    qint32 m_take;
    bool m_take_isSet;
    bool m_take_isValid;

    qint32 m_total;
    bool m_total_isSet;
    bool m_total_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPagingInfo)

#endif // OAIPagingInfo_H
