/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberForDate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberForDate::OAIMemberForDate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberForDate::OAIMemberForDate() {
    this->initializeModel();
}

OAIMemberForDate::~OAIMemberForDate() {}

void OAIMemberForDate::initializeModel() {

    m_constituency_isSet = false;
    m_constituency_isValid = false;

    m_list_as_isSet = false;
    m_list_as_isValid = false;

    m_mnis_id_isSet = false;
    m_mnis_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_party_colour_isSet = false;
    m_party_colour_isValid = false;

    m_party_id_isSet = false;
    m_party_id_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;

    m_pims_id_isSet = false;
    m_pims_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIMemberForDate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberForDate::fromJsonObject(QJsonObject json) {

    m_constituency_isValid = ::OpenAPI::fromJsonValue(m_constituency, json[QString("Constituency")]);
    m_constituency_isSet = !json[QString("Constituency")].isNull() && m_constituency_isValid;

    m_list_as_isValid = ::OpenAPI::fromJsonValue(m_list_as, json[QString("ListAs")]);
    m_list_as_isSet = !json[QString("ListAs")].isNull() && m_list_as_isValid;

    m_mnis_id_isValid = ::OpenAPI::fromJsonValue(m_mnis_id, json[QString("MnisId")]);
    m_mnis_id_isSet = !json[QString("MnisId")].isNull() && m_mnis_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("Party")]);
    m_party_isSet = !json[QString("Party")].isNull() && m_party_isValid;

    m_party_colour_isValid = ::OpenAPI::fromJsonValue(m_party_colour, json[QString("PartyColour")]);
    m_party_colour_isSet = !json[QString("PartyColour")].isNull() && m_party_colour_isValid;

    m_party_id_isValid = ::OpenAPI::fromJsonValue(m_party_id, json[QString("PartyId")]);
    m_party_id_isSet = !json[QString("PartyId")].isNull() && m_party_id_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("PhotoUrl")]);
    m_photo_url_isSet = !json[QString("PhotoUrl")].isNull() && m_photo_url_isValid;

    m_pims_id_isValid = ::OpenAPI::fromJsonValue(m_pims_id, json[QString("PimsId")]);
    m_pims_id_isSet = !json[QString("PimsId")].isNull() && m_pims_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIMemberForDate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberForDate::asJsonObject() const {
    QJsonObject obj;
    if (m_constituency_isSet) {
        obj.insert(QString("Constituency"), ::OpenAPI::toJsonValue(m_constituency));
    }
    if (m_list_as_isSet) {
        obj.insert(QString("ListAs"), ::OpenAPI::toJsonValue(m_list_as));
    }
    if (m_mnis_id_isSet) {
        obj.insert(QString("MnisId"), ::OpenAPI::toJsonValue(m_mnis_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_party_isSet) {
        obj.insert(QString("Party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_party_colour_isSet) {
        obj.insert(QString("PartyColour"), ::OpenAPI::toJsonValue(m_party_colour));
    }
    if (m_party_id_isSet) {
        obj.insert(QString("PartyId"), ::OpenAPI::toJsonValue(m_party_id));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("PhotoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    if (m_pims_id_isSet) {
        obj.insert(QString("PimsId"), ::OpenAPI::toJsonValue(m_pims_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIMemberForDate::getConstituency() const {
    return m_constituency;
}
void OAIMemberForDate::setConstituency(const QString &constituency) {
    m_constituency = constituency;
    m_constituency_isSet = true;
}

bool OAIMemberForDate::is_constituency_Set() const{
    return m_constituency_isSet;
}

bool OAIMemberForDate::is_constituency_Valid() const{
    return m_constituency_isValid;
}

QString OAIMemberForDate::getListAs() const {
    return m_list_as;
}
void OAIMemberForDate::setListAs(const QString &list_as) {
    m_list_as = list_as;
    m_list_as_isSet = true;
}

bool OAIMemberForDate::is_list_as_Set() const{
    return m_list_as_isSet;
}

bool OAIMemberForDate::is_list_as_Valid() const{
    return m_list_as_isValid;
}

qint32 OAIMemberForDate::getMnisId() const {
    return m_mnis_id;
}
void OAIMemberForDate::setMnisId(const qint32 &mnis_id) {
    m_mnis_id = mnis_id;
    m_mnis_id_isSet = true;
}

bool OAIMemberForDate::is_mnis_id_Set() const{
    return m_mnis_id_isSet;
}

bool OAIMemberForDate::is_mnis_id_Valid() const{
    return m_mnis_id_isValid;
}

QString OAIMemberForDate::getName() const {
    return m_name;
}
void OAIMemberForDate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMemberForDate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMemberForDate::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMemberForDate::getParty() const {
    return m_party;
}
void OAIMemberForDate::setParty(const QString &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAIMemberForDate::is_party_Set() const{
    return m_party_isSet;
}

bool OAIMemberForDate::is_party_Valid() const{
    return m_party_isValid;
}

QString OAIMemberForDate::getPartyColour() const {
    return m_party_colour;
}
void OAIMemberForDate::setPartyColour(const QString &party_colour) {
    m_party_colour = party_colour;
    m_party_colour_isSet = true;
}

bool OAIMemberForDate::is_party_colour_Set() const{
    return m_party_colour_isSet;
}

bool OAIMemberForDate::is_party_colour_Valid() const{
    return m_party_colour_isValid;
}

qint32 OAIMemberForDate::getPartyId() const {
    return m_party_id;
}
void OAIMemberForDate::setPartyId(const qint32 &party_id) {
    m_party_id = party_id;
    m_party_id_isSet = true;
}

bool OAIMemberForDate::is_party_id_Set() const{
    return m_party_id_isSet;
}

bool OAIMemberForDate::is_party_id_Valid() const{
    return m_party_id_isValid;
}

QString OAIMemberForDate::getPhotoUrl() const {
    return m_photo_url;
}
void OAIMemberForDate::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIMemberForDate::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIMemberForDate::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

qint32 OAIMemberForDate::getPimsId() const {
    return m_pims_id;
}
void OAIMemberForDate::setPimsId(const qint32 &pims_id) {
    m_pims_id = pims_id;
    m_pims_id_isSet = true;
}

bool OAIMemberForDate::is_pims_id_Set() const{
    return m_pims_id_isSet;
}

bool OAIMemberForDate::is_pims_id_Valid() const{
    return m_pims_id_isValid;
}

QString OAIMemberForDate::getStatus() const {
    return m_status;
}
void OAIMemberForDate::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMemberForDate::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMemberForDate::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIMemberForDate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constituency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_as_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mnis_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_colour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pims_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberForDate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
