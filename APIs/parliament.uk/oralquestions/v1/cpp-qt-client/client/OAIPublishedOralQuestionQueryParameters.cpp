/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublishedOralQuestionQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublishedOralQuestionQueryParameters::OAIPublishedOralQuestionQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublishedOralQuestionQueryParameters::OAIPublishedOralQuestionQueryParameters() {
    this->initializeModel();
}

OAIPublishedOralQuestionQueryParameters::~OAIPublishedOralQuestionQueryParameters() {}

void OAIPublishedOralQuestionQueryParameters::initializeModel() {

    m_answering_body_ids_isSet = false;
    m_answering_body_ids_isValid = false;

    m_answering_date_end_isSet = false;
    m_answering_date_end_isValid = false;

    m_answering_date_start_isSet = false;
    m_answering_date_start_isValid = false;

    m_asking_member_ids_isSet = false;
    m_asking_member_ids_isValid = false;

    m_oral_question_time_id_isSet = false;
    m_oral_question_time_id_isValid = false;

    m_question_type_isSet = false;
    m_question_type_isValid = false;

    m_skip_isSet = false;
    m_skip_isValid = false;

    m_take_isSet = false;
    m_take_isValid = false;

    m_uins_isSet = false;
    m_uins_isValid = false;
}

void OAIPublishedOralQuestionQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublishedOralQuestionQueryParameters::fromJsonObject(QJsonObject json) {

    m_answering_body_ids_isValid = ::OpenAPI::fromJsonValue(m_answering_body_ids, json[QString("AnsweringBodyIds")]);
    m_answering_body_ids_isSet = !json[QString("AnsweringBodyIds")].isNull() && m_answering_body_ids_isValid;

    m_answering_date_end_isValid = ::OpenAPI::fromJsonValue(m_answering_date_end, json[QString("AnsweringDateEnd")]);
    m_answering_date_end_isSet = !json[QString("AnsweringDateEnd")].isNull() && m_answering_date_end_isValid;

    m_answering_date_start_isValid = ::OpenAPI::fromJsonValue(m_answering_date_start, json[QString("AnsweringDateStart")]);
    m_answering_date_start_isSet = !json[QString("AnsweringDateStart")].isNull() && m_answering_date_start_isValid;

    m_asking_member_ids_isValid = ::OpenAPI::fromJsonValue(m_asking_member_ids, json[QString("AskingMemberIds")]);
    m_asking_member_ids_isSet = !json[QString("AskingMemberIds")].isNull() && m_asking_member_ids_isValid;

    m_oral_question_time_id_isValid = ::OpenAPI::fromJsonValue(m_oral_question_time_id, json[QString("OralQuestionTimeId")]);
    m_oral_question_time_id_isSet = !json[QString("OralQuestionTimeId")].isNull() && m_oral_question_time_id_isValid;

    m_question_type_isValid = ::OpenAPI::fromJsonValue(m_question_type, json[QString("QuestionType")]);
    m_question_type_isSet = !json[QString("QuestionType")].isNull() && m_question_type_isValid;

    m_skip_isValid = ::OpenAPI::fromJsonValue(m_skip, json[QString("Skip")]);
    m_skip_isSet = !json[QString("Skip")].isNull() && m_skip_isValid;

    m_take_isValid = ::OpenAPI::fromJsonValue(m_take, json[QString("Take")]);
    m_take_isSet = !json[QString("Take")].isNull() && m_take_isValid;

    m_uins_isValid = ::OpenAPI::fromJsonValue(m_uins, json[QString("UINs")]);
    m_uins_isSet = !json[QString("UINs")].isNull() && m_uins_isValid;
}

QString OAIPublishedOralQuestionQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublishedOralQuestionQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_answering_body_ids.size() > 0) {
        obj.insert(QString("AnsweringBodyIds"), ::OpenAPI::toJsonValue(m_answering_body_ids));
    }
    if (m_answering_date_end_isSet) {
        obj.insert(QString("AnsweringDateEnd"), ::OpenAPI::toJsonValue(m_answering_date_end));
    }
    if (m_answering_date_start_isSet) {
        obj.insert(QString("AnsweringDateStart"), ::OpenAPI::toJsonValue(m_answering_date_start));
    }
    if (m_asking_member_ids.size() > 0) {
        obj.insert(QString("AskingMemberIds"), ::OpenAPI::toJsonValue(m_asking_member_ids));
    }
    if (m_oral_question_time_id_isSet) {
        obj.insert(QString("OralQuestionTimeId"), ::OpenAPI::toJsonValue(m_oral_question_time_id));
    }
    if (m_question_type_isSet) {
        obj.insert(QString("QuestionType"), ::OpenAPI::toJsonValue(m_question_type));
    }
    if (m_skip_isSet) {
        obj.insert(QString("Skip"), ::OpenAPI::toJsonValue(m_skip));
    }
    if (m_take_isSet) {
        obj.insert(QString("Take"), ::OpenAPI::toJsonValue(m_take));
    }
    if (m_uins.size() > 0) {
        obj.insert(QString("UINs"), ::OpenAPI::toJsonValue(m_uins));
    }
    return obj;
}

QList<qint32> OAIPublishedOralQuestionQueryParameters::getAnsweringBodyIds() const {
    return m_answering_body_ids;
}
void OAIPublishedOralQuestionQueryParameters::setAnsweringBodyIds(const QList<qint32> &answering_body_ids) {
    m_answering_body_ids = answering_body_ids;
    m_answering_body_ids_isSet = true;
}

bool OAIPublishedOralQuestionQueryParameters::is_answering_body_ids_Set() const{
    return m_answering_body_ids_isSet;
}

bool OAIPublishedOralQuestionQueryParameters::is_answering_body_ids_Valid() const{
    return m_answering_body_ids_isValid;
}

QDateTime OAIPublishedOralQuestionQueryParameters::getAnsweringDateEnd() const {
    return m_answering_date_end;
}
void OAIPublishedOralQuestionQueryParameters::setAnsweringDateEnd(const QDateTime &answering_date_end) {
    m_answering_date_end = answering_date_end;
    m_answering_date_end_isSet = true;
}

bool OAIPublishedOralQuestionQueryParameters::is_answering_date_end_Set() const{
    return m_answering_date_end_isSet;
}

bool OAIPublishedOralQuestionQueryParameters::is_answering_date_end_Valid() const{
    return m_answering_date_end_isValid;
}

QDateTime OAIPublishedOralQuestionQueryParameters::getAnsweringDateStart() const {
    return m_answering_date_start;
}
void OAIPublishedOralQuestionQueryParameters::setAnsweringDateStart(const QDateTime &answering_date_start) {
    m_answering_date_start = answering_date_start;
    m_answering_date_start_isSet = true;
}

bool OAIPublishedOralQuestionQueryParameters::is_answering_date_start_Set() const{
    return m_answering_date_start_isSet;
}

bool OAIPublishedOralQuestionQueryParameters::is_answering_date_start_Valid() const{
    return m_answering_date_start_isValid;
}

QList<qint32> OAIPublishedOralQuestionQueryParameters::getAskingMemberIds() const {
    return m_asking_member_ids;
}
void OAIPublishedOralQuestionQueryParameters::setAskingMemberIds(const QList<qint32> &asking_member_ids) {
    m_asking_member_ids = asking_member_ids;
    m_asking_member_ids_isSet = true;
}

bool OAIPublishedOralQuestionQueryParameters::is_asking_member_ids_Set() const{
    return m_asking_member_ids_isSet;
}

bool OAIPublishedOralQuestionQueryParameters::is_asking_member_ids_Valid() const{
    return m_asking_member_ids_isValid;
}

qint32 OAIPublishedOralQuestionQueryParameters::getOralQuestionTimeId() const {
    return m_oral_question_time_id;
}
void OAIPublishedOralQuestionQueryParameters::setOralQuestionTimeId(const qint32 &oral_question_time_id) {
    m_oral_question_time_id = oral_question_time_id;
    m_oral_question_time_id_isSet = true;
}

bool OAIPublishedOralQuestionQueryParameters::is_oral_question_time_id_Set() const{
    return m_oral_question_time_id_isSet;
}

bool OAIPublishedOralQuestionQueryParameters::is_oral_question_time_id_Valid() const{
    return m_oral_question_time_id_isValid;
}

QString OAIPublishedOralQuestionQueryParameters::getQuestionType() const {
    return m_question_type;
}
void OAIPublishedOralQuestionQueryParameters::setQuestionType(const QString &question_type) {
    m_question_type = question_type;
    m_question_type_isSet = true;
}

bool OAIPublishedOralQuestionQueryParameters::is_question_type_Set() const{
    return m_question_type_isSet;
}

bool OAIPublishedOralQuestionQueryParameters::is_question_type_Valid() const{
    return m_question_type_isValid;
}

qint32 OAIPublishedOralQuestionQueryParameters::getSkip() const {
    return m_skip;
}
void OAIPublishedOralQuestionQueryParameters::setSkip(const qint32 &skip) {
    m_skip = skip;
    m_skip_isSet = true;
}

bool OAIPublishedOralQuestionQueryParameters::is_skip_Set() const{
    return m_skip_isSet;
}

bool OAIPublishedOralQuestionQueryParameters::is_skip_Valid() const{
    return m_skip_isValid;
}

qint32 OAIPublishedOralQuestionQueryParameters::getTake() const {
    return m_take;
}
void OAIPublishedOralQuestionQueryParameters::setTake(const qint32 &take) {
    m_take = take;
    m_take_isSet = true;
}

bool OAIPublishedOralQuestionQueryParameters::is_take_Set() const{
    return m_take_isSet;
}

bool OAIPublishedOralQuestionQueryParameters::is_take_Valid() const{
    return m_take_isValid;
}

QList<qint32> OAIPublishedOralQuestionQueryParameters::getUins() const {
    return m_uins;
}
void OAIPublishedOralQuestionQueryParameters::setUins(const QList<qint32> &uins) {
    m_uins = uins;
    m_uins_isSet = true;
}

bool OAIPublishedOralQuestionQueryParameters::is_uins_Set() const{
    return m_uins_isSet;
}

bool OAIPublishedOralQuestionQueryParameters::is_uins_Valid() const{
    return m_uins_isValid;
}

bool OAIPublishedOralQuestionQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answering_body_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_date_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_date_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asking_member_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_oral_question_time_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_take_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uins.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublishedOralQuestionQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
