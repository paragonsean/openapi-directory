/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPublishedEarlyDayMotion.h
 *
 * 
 */

#ifndef OAIPublishedEarlyDayMotion_H
#define OAIPublishedEarlyDayMotion_H

#include <QJsonObject>

#include "OAIMemberForDate.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMemberForDate;

class OAIPublishedEarlyDayMotion : public OAIObject {
public:
    OAIPublishedEarlyDayMotion();
    OAIPublishedEarlyDayMotion(QString json);
    ~OAIPublishedEarlyDayMotion() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAmendmentSuffix() const;
    void setAmendmentSuffix(const QString &amendment_suffix);
    bool is_amendment_suffix_Set() const;
    bool is_amendment_suffix_Valid() const;

    qint32 getAmendmentToMotionId() const;
    void setAmendmentToMotionId(const qint32 &amendment_to_motion_id);
    bool is_amendment_to_motion_id_Set() const;
    bool is_amendment_to_motion_id_Valid() const;

    QDateTime getDateTabled() const;
    void setDateTabled(const QDateTime &date_tabled);
    bool is_date_tabled_Set() const;
    bool is_date_tabled_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getMemberId() const;
    void setMemberId(const qint32 &member_id);
    bool is_member_id_Set() const;
    bool is_member_id_Valid() const;

    QString getMotionText() const;
    void setMotionText(const QString &motion_text);
    bool is_motion_text_Set() const;
    bool is_motion_text_Valid() const;

    qint32 getPrayingAgainstNegativeStatutoryInstrumentId() const;
    void setPrayingAgainstNegativeStatutoryInstrumentId(const qint32 &praying_against_negative_statutory_instrument_id);
    bool is_praying_against_negative_statutory_instrument_id_Set() const;
    bool is_praying_against_negative_statutory_instrument_id_Valid() const;

    OAIMemberForDate getPrimarySponsor() const;
    void setPrimarySponsor(const OAIMemberForDate &primary_sponsor);
    bool is_primary_sponsor_Set() const;
    bool is_primary_sponsor_Valid() const;

    qint32 getSponsorsCount() const;
    void setSponsorsCount(const qint32 &sponsors_count);
    bool is_sponsors_count_Set() const;
    bool is_sponsors_count_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QDateTime getStatusDate() const;
    void setStatusDate(const QDateTime &status_date);
    bool is_status_date_Set() const;
    bool is_status_date_Valid() const;

    qint32 getStatutoryInstrumentNumber() const;
    void setStatutoryInstrumentNumber(const qint32 &statutory_instrument_number);
    bool is_statutory_instrument_number_Set() const;
    bool is_statutory_instrument_number_Valid() const;

    QString getStatutoryInstrumentTitle() const;
    void setStatutoryInstrumentTitle(const QString &statutory_instrument_title);
    bool is_statutory_instrument_title_Set() const;
    bool is_statutory_instrument_title_Valid() const;

    QString getStatutoryInstrumentYear() const;
    void setStatutoryInstrumentYear(const QString &statutory_instrument_year);
    bool is_statutory_instrument_year_Set() const;
    bool is_statutory_instrument_year_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    qint32 getUin() const;
    void setUin(const qint32 &uin);
    bool is_uin_Set() const;
    bool is_uin_Valid() const;

    QString getUinWithAmendmentSuffix() const;
    void setUinWithAmendmentSuffix(const QString &uin_with_amendment_suffix);
    bool is_uin_with_amendment_suffix_Set() const;
    bool is_uin_with_amendment_suffix_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_amendment_suffix;
    bool m_amendment_suffix_isSet;
    bool m_amendment_suffix_isValid;

    qint32 m_amendment_to_motion_id;
    bool m_amendment_to_motion_id_isSet;
    bool m_amendment_to_motion_id_isValid;

    QDateTime m_date_tabled;
    bool m_date_tabled_isSet;
    bool m_date_tabled_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_member_id;
    bool m_member_id_isSet;
    bool m_member_id_isValid;

    QString m_motion_text;
    bool m_motion_text_isSet;
    bool m_motion_text_isValid;

    qint32 m_praying_against_negative_statutory_instrument_id;
    bool m_praying_against_negative_statutory_instrument_id_isSet;
    bool m_praying_against_negative_statutory_instrument_id_isValid;

    OAIMemberForDate m_primary_sponsor;
    bool m_primary_sponsor_isSet;
    bool m_primary_sponsor_isValid;

    qint32 m_sponsors_count;
    bool m_sponsors_count_isSet;
    bool m_sponsors_count_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QDateTime m_status_date;
    bool m_status_date_isSet;
    bool m_status_date_isValid;

    qint32 m_statutory_instrument_number;
    bool m_statutory_instrument_number_isSet;
    bool m_statutory_instrument_number_isValid;

    QString m_statutory_instrument_title;
    bool m_statutory_instrument_title_isSet;
    bool m_statutory_instrument_title_isValid;

    QString m_statutory_instrument_year;
    bool m_statutory_instrument_year_isSet;
    bool m_statutory_instrument_year_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    qint32 m_uin;
    bool m_uin_isSet;
    bool m_uin_isValid;

    QString m_uin_with_amendment_suffix;
    bool m_uin_with_amendment_suffix_isSet;
    bool m_uin_with_amendment_suffix_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPublishedEarlyDayMotion)

#endif // OAIPublishedEarlyDayMotion_H
