/**
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMemberForDate.h
 *
 * 
 */

#ifndef OAIMemberForDate_H
#define OAIMemberForDate_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMemberForDate : public OAIObject {
public:
    OAIMemberForDate();
    OAIMemberForDate(QString json);
    ~OAIMemberForDate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConstituency() const;
    void setConstituency(const QString &constituency);
    bool is_constituency_Set() const;
    bool is_constituency_Valid() const;

    QString getListAs() const;
    void setListAs(const QString &list_as);
    bool is_list_as_Set() const;
    bool is_list_as_Valid() const;

    qint32 getMnisId() const;
    void setMnisId(const qint32 &mnis_id);
    bool is_mnis_id_Set() const;
    bool is_mnis_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getParty() const;
    void setParty(const QString &party);
    bool is_party_Set() const;
    bool is_party_Valid() const;

    QString getPartyColour() const;
    void setPartyColour(const QString &party_colour);
    bool is_party_colour_Set() const;
    bool is_party_colour_Valid() const;

    qint32 getPartyId() const;
    void setPartyId(const qint32 &party_id);
    bool is_party_id_Set() const;
    bool is_party_id_Valid() const;

    QString getPhotoUrl() const;
    void setPhotoUrl(const QString &photo_url);
    bool is_photo_url_Set() const;
    bool is_photo_url_Valid() const;

    qint32 getPimsId() const;
    void setPimsId(const qint32 &pims_id);
    bool is_pims_id_Set() const;
    bool is_pims_id_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_constituency;
    bool m_constituency_isSet;
    bool m_constituency_isValid;

    QString m_list_as;
    bool m_list_as_isSet;
    bool m_list_as_isValid;

    qint32 m_mnis_id;
    bool m_mnis_id_isSet;
    bool m_mnis_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_party;
    bool m_party_isSet;
    bool m_party_isValid;

    QString m_party_colour;
    bool m_party_colour_isSet;
    bool m_party_colour_isValid;

    qint32 m_party_id;
    bool m_party_id_isSet;
    bool m_party_id_isValid;

    QString m_photo_url;
    bool m_photo_url_isSet;
    bool m_photo_url_isValid;

    qint32 m_pims_id;
    bool m_pims_id_isSet;
    bool m_pims_id_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMemberForDate)

#endif // OAIMemberForDate_H
