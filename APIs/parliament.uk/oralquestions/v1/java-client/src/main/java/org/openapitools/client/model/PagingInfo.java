/*
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StatusCount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PagingInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:28.456197-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PagingInfo {
  public static final String SERIALIZED_NAME_GLOBAL_STATUS_COUNTS = "GlobalStatusCounts";
  @SerializedName(SERIALIZED_NAME_GLOBAL_STATUS_COUNTS)
  private List<StatusCount> globalStatusCounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_GLOBAL_TOTAL = "GlobalTotal";
  @SerializedName(SERIALIZED_NAME_GLOBAL_TOTAL)
  private Integer globalTotal;

  public static final String SERIALIZED_NAME_SKIP = "Skip";
  @SerializedName(SERIALIZED_NAME_SKIP)
  private Integer skip;

  public static final String SERIALIZED_NAME_STATUS_COUNTS = "StatusCounts";
  @SerializedName(SERIALIZED_NAME_STATUS_COUNTS)
  private List<StatusCount> statusCounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAKE = "Take";
  @SerializedName(SERIALIZED_NAME_TAKE)
  private Integer take;

  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public PagingInfo() {
  }

  public PagingInfo globalStatusCounts(List<StatusCount> globalStatusCounts) {
    this.globalStatusCounts = globalStatusCounts;
    return this;
  }

  public PagingInfo addGlobalStatusCountsItem(StatusCount globalStatusCountsItem) {
    if (this.globalStatusCounts == null) {
      this.globalStatusCounts = new ArrayList<>();
    }
    this.globalStatusCounts.add(globalStatusCountsItem);
    return this;
  }

  /**
   * Get globalStatusCounts
   * @return globalStatusCounts
   */
  @javax.annotation.Nullable
  public List<StatusCount> getGlobalStatusCounts() {
    return globalStatusCounts;
  }

  public void setGlobalStatusCounts(List<StatusCount> globalStatusCounts) {
    this.globalStatusCounts = globalStatusCounts;
  }


  public PagingInfo globalTotal(Integer globalTotal) {
    this.globalTotal = globalTotal;
    return this;
  }

  /**
   * Get globalTotal
   * @return globalTotal
   */
  @javax.annotation.Nullable
  public Integer getGlobalTotal() {
    return globalTotal;
  }

  public void setGlobalTotal(Integer globalTotal) {
    this.globalTotal = globalTotal;
  }


  public PagingInfo skip(Integer skip) {
    this.skip = skip;
    return this;
  }

  /**
   * Get skip
   * @return skip
   */
  @javax.annotation.Nullable
  public Integer getSkip() {
    return skip;
  }

  public void setSkip(Integer skip) {
    this.skip = skip;
  }


  public PagingInfo statusCounts(List<StatusCount> statusCounts) {
    this.statusCounts = statusCounts;
    return this;
  }

  public PagingInfo addStatusCountsItem(StatusCount statusCountsItem) {
    if (this.statusCounts == null) {
      this.statusCounts = new ArrayList<>();
    }
    this.statusCounts.add(statusCountsItem);
    return this;
  }

  /**
   * Get statusCounts
   * @return statusCounts
   */
  @javax.annotation.Nullable
  public List<StatusCount> getStatusCounts() {
    return statusCounts;
  }

  public void setStatusCounts(List<StatusCount> statusCounts) {
    this.statusCounts = statusCounts;
  }


  public PagingInfo take(Integer take) {
    this.take = take;
    return this;
  }

  /**
   * Get take
   * @return take
   */
  @javax.annotation.Nullable
  public Integer getTake() {
    return take;
  }

  public void setTake(Integer take) {
    this.take = take;
  }


  public PagingInfo total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PagingInfo pagingInfo = (PagingInfo) o;
    return Objects.equals(this.globalStatusCounts, pagingInfo.globalStatusCounts) &&
        Objects.equals(this.globalTotal, pagingInfo.globalTotal) &&
        Objects.equals(this.skip, pagingInfo.skip) &&
        Objects.equals(this.statusCounts, pagingInfo.statusCounts) &&
        Objects.equals(this.take, pagingInfo.take) &&
        Objects.equals(this.total, pagingInfo.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(globalStatusCounts, globalTotal, skip, statusCounts, take, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PagingInfo {\n");
    sb.append("    globalStatusCounts: ").append(toIndentedString(globalStatusCounts)).append("\n");
    sb.append("    globalTotal: ").append(toIndentedString(globalTotal)).append("\n");
    sb.append("    skip: ").append(toIndentedString(skip)).append("\n");
    sb.append("    statusCounts: ").append(toIndentedString(statusCounts)).append("\n");
    sb.append("    take: ").append(toIndentedString(take)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GlobalStatusCounts");
    openapiFields.add("GlobalTotal");
    openapiFields.add("Skip");
    openapiFields.add("StatusCounts");
    openapiFields.add("Take");
    openapiFields.add("Total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PagingInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PagingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PagingInfo is not found in the empty JSON string", PagingInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PagingInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PagingInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("GlobalStatusCounts") != null && !jsonObj.get("GlobalStatusCounts").isJsonNull()) {
        JsonArray jsonArrayglobalStatusCounts = jsonObj.getAsJsonArray("GlobalStatusCounts");
        if (jsonArrayglobalStatusCounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("GlobalStatusCounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `GlobalStatusCounts` to be an array in the JSON string but got `%s`", jsonObj.get("GlobalStatusCounts").toString()));
          }

          // validate the optional field `GlobalStatusCounts` (array)
          for (int i = 0; i < jsonArrayglobalStatusCounts.size(); i++) {
            StatusCount.validateJsonElement(jsonArrayglobalStatusCounts.get(i));
          };
        }
      }
      if (jsonObj.get("StatusCounts") != null && !jsonObj.get("StatusCounts").isJsonNull()) {
        JsonArray jsonArraystatusCounts = jsonObj.getAsJsonArray("StatusCounts");
        if (jsonArraystatusCounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("StatusCounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `StatusCounts` to be an array in the JSON string but got `%s`", jsonObj.get("StatusCounts").toString()));
          }

          // validate the optional field `StatusCounts` (array)
          for (int i = 0; i < jsonArraystatusCounts.size(); i++) {
            StatusCount.validateJsonElement(jsonArraystatusCounts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PagingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PagingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PagingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PagingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PagingInfo>() {
           @Override
           public void write(JsonWriter out, PagingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PagingInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PagingInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PagingInfo
   * @throws IOException if the JSON string is invalid with respect to PagingInfo
   */
  public static PagingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PagingInfo.class);
  }

  /**
   * Convert an instance of PagingInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

