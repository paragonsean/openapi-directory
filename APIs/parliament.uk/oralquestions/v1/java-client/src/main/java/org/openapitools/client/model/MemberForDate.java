/*
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MemberForDate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:28.456197-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MemberForDate {
  public static final String SERIALIZED_NAME_CONSTITUENCY = "Constituency";
  @SerializedName(SERIALIZED_NAME_CONSTITUENCY)
  private String constituency;

  public static final String SERIALIZED_NAME_LIST_AS = "ListAs";
  @SerializedName(SERIALIZED_NAME_LIST_AS)
  private String listAs;

  public static final String SERIALIZED_NAME_MNIS_ID = "MnisId";
  @SerializedName(SERIALIZED_NAME_MNIS_ID)
  private Integer mnisId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARTY = "Party";
  @SerializedName(SERIALIZED_NAME_PARTY)
  private String party;

  public static final String SERIALIZED_NAME_PARTY_COLOUR = "PartyColour";
  @SerializedName(SERIALIZED_NAME_PARTY_COLOUR)
  private String partyColour;

  public static final String SERIALIZED_NAME_PARTY_ID = "PartyId";
  @SerializedName(SERIALIZED_NAME_PARTY_ID)
  private Integer partyId;

  public static final String SERIALIZED_NAME_PHOTO_URL = "PhotoUrl";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public static final String SERIALIZED_NAME_PIMS_ID = "PimsId";
  @SerializedName(SERIALIZED_NAME_PIMS_ID)
  private Integer pimsId;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public MemberForDate() {
  }

  public MemberForDate(
     String photoUrl
  ) {
    this();
    this.photoUrl = photoUrl;
  }

  public MemberForDate constituency(String constituency) {
    this.constituency = constituency;
    return this;
  }

  /**
   * Get constituency
   * @return constituency
   */
  @javax.annotation.Nullable
  public String getConstituency() {
    return constituency;
  }

  public void setConstituency(String constituency) {
    this.constituency = constituency;
  }


  public MemberForDate listAs(String listAs) {
    this.listAs = listAs;
    return this;
  }

  /**
   * Get listAs
   * @return listAs
   */
  @javax.annotation.Nullable
  public String getListAs() {
    return listAs;
  }

  public void setListAs(String listAs) {
    this.listAs = listAs;
  }


  public MemberForDate mnisId(Integer mnisId) {
    this.mnisId = mnisId;
    return this;
  }

  /**
   * Get mnisId
   * @return mnisId
   */
  @javax.annotation.Nullable
  public Integer getMnisId() {
    return mnisId;
  }

  public void setMnisId(Integer mnisId) {
    this.mnisId = mnisId;
  }


  public MemberForDate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MemberForDate party(String party) {
    this.party = party;
    return this;
  }

  /**
   * Get party
   * @return party
   */
  @javax.annotation.Nullable
  public String getParty() {
    return party;
  }

  public void setParty(String party) {
    this.party = party;
  }


  public MemberForDate partyColour(String partyColour) {
    this.partyColour = partyColour;
    return this;
  }

  /**
   * Get partyColour
   * @return partyColour
   */
  @javax.annotation.Nullable
  public String getPartyColour() {
    return partyColour;
  }

  public void setPartyColour(String partyColour) {
    this.partyColour = partyColour;
  }


  public MemberForDate partyId(Integer partyId) {
    this.partyId = partyId;
    return this;
  }

  /**
   * Get partyId
   * @return partyId
   */
  @javax.annotation.Nullable
  public Integer getPartyId() {
    return partyId;
  }

  public void setPartyId(Integer partyId) {
    this.partyId = partyId;
  }


  /**
   * Get photoUrl
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }



  public MemberForDate pimsId(Integer pimsId) {
    this.pimsId = pimsId;
    return this;
  }

  /**
   * Get pimsId
   * @return pimsId
   */
  @javax.annotation.Nullable
  public Integer getPimsId() {
    return pimsId;
  }

  public void setPimsId(Integer pimsId) {
    this.pimsId = pimsId;
  }


  public MemberForDate status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MemberForDate memberForDate = (MemberForDate) o;
    return Objects.equals(this.constituency, memberForDate.constituency) &&
        Objects.equals(this.listAs, memberForDate.listAs) &&
        Objects.equals(this.mnisId, memberForDate.mnisId) &&
        Objects.equals(this.name, memberForDate.name) &&
        Objects.equals(this.party, memberForDate.party) &&
        Objects.equals(this.partyColour, memberForDate.partyColour) &&
        Objects.equals(this.partyId, memberForDate.partyId) &&
        Objects.equals(this.photoUrl, memberForDate.photoUrl) &&
        Objects.equals(this.pimsId, memberForDate.pimsId) &&
        Objects.equals(this.status, memberForDate.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(constituency, listAs, mnisId, name, party, partyColour, partyId, photoUrl, pimsId, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MemberForDate {\n");
    sb.append("    constituency: ").append(toIndentedString(constituency)).append("\n");
    sb.append("    listAs: ").append(toIndentedString(listAs)).append("\n");
    sb.append("    mnisId: ").append(toIndentedString(mnisId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    party: ").append(toIndentedString(party)).append("\n");
    sb.append("    partyColour: ").append(toIndentedString(partyColour)).append("\n");
    sb.append("    partyId: ").append(toIndentedString(partyId)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    pimsId: ").append(toIndentedString(pimsId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Constituency");
    openapiFields.add("ListAs");
    openapiFields.add("MnisId");
    openapiFields.add("Name");
    openapiFields.add("Party");
    openapiFields.add("PartyColour");
    openapiFields.add("PartyId");
    openapiFields.add("PhotoUrl");
    openapiFields.add("PimsId");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MemberForDate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MemberForDate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MemberForDate is not found in the empty JSON string", MemberForDate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MemberForDate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MemberForDate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Constituency") != null && !jsonObj.get("Constituency").isJsonNull()) && !jsonObj.get("Constituency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Constituency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Constituency").toString()));
      }
      if ((jsonObj.get("ListAs") != null && !jsonObj.get("ListAs").isJsonNull()) && !jsonObj.get("ListAs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ListAs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ListAs").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Party") != null && !jsonObj.get("Party").isJsonNull()) && !jsonObj.get("Party").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Party` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Party").toString()));
      }
      if ((jsonObj.get("PartyColour") != null && !jsonObj.get("PartyColour").isJsonNull()) && !jsonObj.get("PartyColour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartyColour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartyColour").toString()));
      }
      if ((jsonObj.get("PhotoUrl") != null && !jsonObj.get("PhotoUrl").isJsonNull()) && !jsonObj.get("PhotoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhotoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhotoUrl").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MemberForDate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MemberForDate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MemberForDate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MemberForDate.class));

       return (TypeAdapter<T>) new TypeAdapter<MemberForDate>() {
           @Override
           public void write(JsonWriter out, MemberForDate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MemberForDate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MemberForDate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MemberForDate
   * @throws IOException if the JSON string is invalid with respect to MemberForDate
   */
  public static MemberForDate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MemberForDate.class);
  }

  /**
   * Convert an instance of MemberForDate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

