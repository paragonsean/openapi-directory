/*
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PublishedOralQuestionQueryParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:28.456197-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublishedOralQuestionQueryParameters {
  public static final String SERIALIZED_NAME_ANSWERING_BODY_IDS = "AnsweringBodyIds";
  @SerializedName(SERIALIZED_NAME_ANSWERING_BODY_IDS)
  private List<Integer> answeringBodyIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ANSWERING_DATE_END = "AnsweringDateEnd";
  @SerializedName(SERIALIZED_NAME_ANSWERING_DATE_END)
  private OffsetDateTime answeringDateEnd;

  public static final String SERIALIZED_NAME_ANSWERING_DATE_START = "AnsweringDateStart";
  @SerializedName(SERIALIZED_NAME_ANSWERING_DATE_START)
  private OffsetDateTime answeringDateStart;

  public static final String SERIALIZED_NAME_ASKING_MEMBER_IDS = "AskingMemberIds";
  @SerializedName(SERIALIZED_NAME_ASKING_MEMBER_IDS)
  private List<Integer> askingMemberIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORAL_QUESTION_TIME_ID = "OralQuestionTimeId";
  @SerializedName(SERIALIZED_NAME_ORAL_QUESTION_TIME_ID)
  private Integer oralQuestionTimeId;

  /**
   * Oral Questions where the question type is the selected type, substantive or topical.
   */
  @JsonAdapter(QuestionTypeEnum.Adapter.class)
  public enum QuestionTypeEnum {
    SUBSTANTIVE("Substantive"),
    
    TOPICAL("Topical");

    private String value;

    QuestionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuestionTypeEnum fromValue(String value) {
      for (QuestionTypeEnum b : QuestionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QuestionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuestionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QuestionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QuestionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QuestionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUESTION_TYPE = "QuestionType";
  @SerializedName(SERIALIZED_NAME_QUESTION_TYPE)
  private QuestionTypeEnum questionType;

  public static final String SERIALIZED_NAME_SKIP = "Skip";
  @SerializedName(SERIALIZED_NAME_SKIP)
  private Integer skip;

  public static final String SERIALIZED_NAME_TAKE = "Take";
  @SerializedName(SERIALIZED_NAME_TAKE)
  private Integer take;

  public static final String SERIALIZED_NAME_UI_NS = "UINs";
  @SerializedName(SERIALIZED_NAME_UI_NS)
  private List<Integer> uiNs = new ArrayList<>();

  public PublishedOralQuestionQueryParameters() {
  }

  public PublishedOralQuestionQueryParameters answeringBodyIds(List<Integer> answeringBodyIds) {
    this.answeringBodyIds = answeringBodyIds;
    return this;
  }

  public PublishedOralQuestionQueryParameters addAnsweringBodyIdsItem(Integer answeringBodyIdsItem) {
    if (this.answeringBodyIds == null) {
      this.answeringBodyIds = new ArrayList<>();
    }
    this.answeringBodyIds.add(answeringBodyIdsItem);
    return this;
  }

  /**
   * Which answering body is to respond. A list of answering bodies can be found &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;http://data.parliament.uk/membersdataplatform/services/mnis/referencedata/AnsweringBodies/\&quot;&gt;here&lt;/a&gt;.
   * @return answeringBodyIds
   */
  @javax.annotation.Nullable
  public List<Integer> getAnsweringBodyIds() {
    return answeringBodyIds;
  }

  public void setAnsweringBodyIds(List<Integer> answeringBodyIds) {
    this.answeringBodyIds = answeringBodyIds;
  }


  public PublishedOralQuestionQueryParameters answeringDateEnd(OffsetDateTime answeringDateEnd) {
    this.answeringDateEnd = answeringDateEnd;
    return this;
  }

  /**
   * Oral Questions where the answering date has been set on or before the date provided. Date format YYYY-MM-DD.
   * @return answeringDateEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAnsweringDateEnd() {
    return answeringDateEnd;
  }

  public void setAnsweringDateEnd(OffsetDateTime answeringDateEnd) {
    this.answeringDateEnd = answeringDateEnd;
  }


  public PublishedOralQuestionQueryParameters answeringDateStart(OffsetDateTime answeringDateStart) {
    this.answeringDateStart = answeringDateStart;
    return this;
  }

  /**
   * Oral Questions where the answering date has been set on or after the date provided. Date format YYYY-MM-DD.
   * @return answeringDateStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAnsweringDateStart() {
    return answeringDateStart;
  }

  public void setAnsweringDateStart(OffsetDateTime answeringDateStart) {
    this.answeringDateStart = answeringDateStart;
  }


  public PublishedOralQuestionQueryParameters askingMemberIds(List<Integer> askingMemberIds) {
    this.askingMemberIds = askingMemberIds;
    return this;
  }

  public PublishedOralQuestionQueryParameters addAskingMemberIdsItem(Integer askingMemberIdsItem) {
    if (this.askingMemberIds == null) {
      this.askingMemberIds = new ArrayList<>();
    }
    this.askingMemberIds.add(askingMemberIdsItem);
    return this;
  }

  /**
   * The ID of the member asking the question. Lists of member IDs for each house are available &lt;a href&#x3D;\&quot;http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house&#x3D;Commons\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Commons&lt;/a&gt; and &lt;a href&#x3D;\&quot;http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house&#x3D;Lords\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Lords&lt;/a&gt;.
   * @return askingMemberIds
   */
  @javax.annotation.Nullable
  public List<Integer> getAskingMemberIds() {
    return askingMemberIds;
  }

  public void setAskingMemberIds(List<Integer> askingMemberIds) {
    this.askingMemberIds = askingMemberIds;
  }


  public PublishedOralQuestionQueryParameters oralQuestionTimeId(Integer oralQuestionTimeId) {
    this.oralQuestionTimeId = oralQuestionTimeId;
    return this;
  }

  /**
   * Oral Questions where the question is within the question time with the ID provided
   * @return oralQuestionTimeId
   */
  @javax.annotation.Nullable
  public Integer getOralQuestionTimeId() {
    return oralQuestionTimeId;
  }

  public void setOralQuestionTimeId(Integer oralQuestionTimeId) {
    this.oralQuestionTimeId = oralQuestionTimeId;
  }


  public PublishedOralQuestionQueryParameters questionType(QuestionTypeEnum questionType) {
    this.questionType = questionType;
    return this;
  }

  /**
   * Oral Questions where the question type is the selected type, substantive or topical.
   * @return questionType
   */
  @javax.annotation.Nullable
  public QuestionTypeEnum getQuestionType() {
    return questionType;
  }

  public void setQuestionType(QuestionTypeEnum questionType) {
    this.questionType = questionType;
  }


  public PublishedOralQuestionQueryParameters skip(Integer skip) {
    this.skip = skip;
    return this;
  }

  /**
   * The number of records to skip from the first, default is 0.
   * @return skip
   */
  @javax.annotation.Nullable
  public Integer getSkip() {
    return skip;
  }

  public void setSkip(Integer skip) {
    this.skip = skip;
  }


  public PublishedOralQuestionQueryParameters take(Integer take) {
    this.take = take;
    return this;
  }

  /**
   * The number of records to return, default is 25, maximum is 100.
   * @return take
   */
  @javax.annotation.Nullable
  public Integer getTake() {
    return take;
  }

  public void setTake(Integer take) {
    this.take = take;
  }


  public PublishedOralQuestionQueryParameters uiNs(List<Integer> uiNs) {
    this.uiNs = uiNs;
    return this;
  }

  public PublishedOralQuestionQueryParameters addUiNsItem(Integer uiNsItem) {
    if (this.uiNs == null) {
      this.uiNs = new ArrayList<>();
    }
    this.uiNs.add(uiNsItem);
    return this;
  }

  /**
   * The UIN for the question - note that UINs reset at the start of each Parliamentary session.
   * @return uiNs
   */
  @javax.annotation.Nullable
  public List<Integer> getUiNs() {
    return uiNs;
  }

  public void setUiNs(List<Integer> uiNs) {
    this.uiNs = uiNs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublishedOralQuestionQueryParameters publishedOralQuestionQueryParameters = (PublishedOralQuestionQueryParameters) o;
    return Objects.equals(this.answeringBodyIds, publishedOralQuestionQueryParameters.answeringBodyIds) &&
        Objects.equals(this.answeringDateEnd, publishedOralQuestionQueryParameters.answeringDateEnd) &&
        Objects.equals(this.answeringDateStart, publishedOralQuestionQueryParameters.answeringDateStart) &&
        Objects.equals(this.askingMemberIds, publishedOralQuestionQueryParameters.askingMemberIds) &&
        Objects.equals(this.oralQuestionTimeId, publishedOralQuestionQueryParameters.oralQuestionTimeId) &&
        Objects.equals(this.questionType, publishedOralQuestionQueryParameters.questionType) &&
        Objects.equals(this.skip, publishedOralQuestionQueryParameters.skip) &&
        Objects.equals(this.take, publishedOralQuestionQueryParameters.take) &&
        Objects.equals(this.uiNs, publishedOralQuestionQueryParameters.uiNs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answeringBodyIds, answeringDateEnd, answeringDateStart, askingMemberIds, oralQuestionTimeId, questionType, skip, take, uiNs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublishedOralQuestionQueryParameters {\n");
    sb.append("    answeringBodyIds: ").append(toIndentedString(answeringBodyIds)).append("\n");
    sb.append("    answeringDateEnd: ").append(toIndentedString(answeringDateEnd)).append("\n");
    sb.append("    answeringDateStart: ").append(toIndentedString(answeringDateStart)).append("\n");
    sb.append("    askingMemberIds: ").append(toIndentedString(askingMemberIds)).append("\n");
    sb.append("    oralQuestionTimeId: ").append(toIndentedString(oralQuestionTimeId)).append("\n");
    sb.append("    questionType: ").append(toIndentedString(questionType)).append("\n");
    sb.append("    skip: ").append(toIndentedString(skip)).append("\n");
    sb.append("    take: ").append(toIndentedString(take)).append("\n");
    sb.append("    uiNs: ").append(toIndentedString(uiNs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AnsweringBodyIds");
    openapiFields.add("AnsweringDateEnd");
    openapiFields.add("AnsweringDateStart");
    openapiFields.add("AskingMemberIds");
    openapiFields.add("OralQuestionTimeId");
    openapiFields.add("QuestionType");
    openapiFields.add("Skip");
    openapiFields.add("Take");
    openapiFields.add("UINs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublishedOralQuestionQueryParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublishedOralQuestionQueryParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublishedOralQuestionQueryParameters is not found in the empty JSON string", PublishedOralQuestionQueryParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublishedOralQuestionQueryParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublishedOralQuestionQueryParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("AnsweringBodyIds") != null && !jsonObj.get("AnsweringBodyIds").isJsonNull() && !jsonObj.get("AnsweringBodyIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AnsweringBodyIds` to be an array in the JSON string but got `%s`", jsonObj.get("AnsweringBodyIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AskingMemberIds") != null && !jsonObj.get("AskingMemberIds").isJsonNull() && !jsonObj.get("AskingMemberIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AskingMemberIds` to be an array in the JSON string but got `%s`", jsonObj.get("AskingMemberIds").toString()));
      }
      if ((jsonObj.get("QuestionType") != null && !jsonObj.get("QuestionType").isJsonNull()) && !jsonObj.get("QuestionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QuestionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QuestionType").toString()));
      }
      // validate the optional field `QuestionType`
      if (jsonObj.get("QuestionType") != null && !jsonObj.get("QuestionType").isJsonNull()) {
        QuestionTypeEnum.validateJsonElement(jsonObj.get("QuestionType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("UINs") != null && !jsonObj.get("UINs").isJsonNull() && !jsonObj.get("UINs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `UINs` to be an array in the JSON string but got `%s`", jsonObj.get("UINs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublishedOralQuestionQueryParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublishedOralQuestionQueryParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublishedOralQuestionQueryParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublishedOralQuestionQueryParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<PublishedOralQuestionQueryParameters>() {
           @Override
           public void write(JsonWriter out, PublishedOralQuestionQueryParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublishedOralQuestionQueryParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublishedOralQuestionQueryParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublishedOralQuestionQueryParameters
   * @throws IOException if the JSON string is invalid with respect to PublishedOralQuestionQueryParameters
   */
  public static PublishedOralQuestionQueryParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublishedOralQuestionQueryParameters.class);
  }

  /**
   * Convert an instance of PublishedOralQuestionQueryParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

