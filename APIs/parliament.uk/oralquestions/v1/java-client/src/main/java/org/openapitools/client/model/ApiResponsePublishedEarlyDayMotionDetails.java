/*
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PagingInfo;
import org.openapitools.client.model.PublishedEarlyDayMotionDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiResponsePublishedEarlyDayMotionDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:28.456197-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiResponsePublishedEarlyDayMotionDetails {
  public static final String SERIALIZED_NAME_ERRORS = "Errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<String> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGING_INFO = "PagingInfo";
  @SerializedName(SERIALIZED_NAME_PAGING_INFO)
  private PagingInfo pagingInfo;

  public static final String SERIALIZED_NAME_RESPONSE = "Response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private PublishedEarlyDayMotionDetails response;

  /**
   * Gets or Sets statusCode
   */
  @JsonAdapter(StatusCodeEnum.Adapter.class)
  public enum StatusCodeEnum {
    CONTINUE("Continue"),
    
    SWITCHING_PROTOCOLS("SwitchingProtocols"),
    
    OK("OK"),
    
    CREATED("Created"),
    
    ACCEPTED("Accepted"),
    
    NON_AUTHORITATIVE_INFORMATION("NonAuthoritativeInformation"),
    
    NO_CONTENT("NoContent"),
    
    RESET_CONTENT("ResetContent"),
    
    PARTIAL_CONTENT("PartialContent"),
    
    MULTIPLE_CHOICES("MultipleChoices"),
    
    AMBIGUOUS("Ambiguous"),
    
    MOVED_PERMANENTLY("MovedPermanently"),
    
    MOVED("Moved"),
    
    FOUND("Found"),
    
    REDIRECT("Redirect"),
    
    SEE_OTHER("SeeOther"),
    
    REDIRECT_METHOD("RedirectMethod"),
    
    NOT_MODIFIED("NotModified"),
    
    USE_PROXY("UseProxy"),
    
    UNUSED("Unused"),
    
    TEMPORARY_REDIRECT("TemporaryRedirect"),
    
    REDIRECT_KEEP_VERB("RedirectKeepVerb"),
    
    BAD_REQUEST("BadRequest"),
    
    UNAUTHORIZED("Unauthorized"),
    
    PAYMENT_REQUIRED("PaymentRequired"),
    
    FORBIDDEN("Forbidden"),
    
    NOT_FOUND("NotFound"),
    
    METHOD_NOT_ALLOWED("MethodNotAllowed"),
    
    NOT_ACCEPTABLE("NotAcceptable"),
    
    PROXY_AUTHENTICATION_REQUIRED("ProxyAuthenticationRequired"),
    
    REQUEST_TIMEOUT("RequestTimeout"),
    
    CONFLICT("Conflict"),
    
    GONE("Gone"),
    
    LENGTH_REQUIRED("LengthRequired"),
    
    PRECONDITION_FAILED("PreconditionFailed"),
    
    REQUEST_ENTITY_TOO_LARGE("RequestEntityTooLarge"),
    
    REQUEST_URI_TOO_LONG("RequestUriTooLong"),
    
    UNSUPPORTED_MEDIA_TYPE("UnsupportedMediaType"),
    
    REQUESTED_RANGE_NOT_SATISFIABLE("RequestedRangeNotSatisfiable"),
    
    EXPECTATION_FAILED("ExpectationFailed"),
    
    UPGRADE_REQUIRED("UpgradeRequired"),
    
    INTERNAL_SERVER_ERROR("InternalServerError"),
    
    NOT_IMPLEMENTED("NotImplemented"),
    
    BAD_GATEWAY("BadGateway"),
    
    SERVICE_UNAVAILABLE("ServiceUnavailable"),
    
    GATEWAY_TIMEOUT("GatewayTimeout"),
    
    HTTP_VERSION_NOT_SUPPORTED("HttpVersionNotSupported");

    private String value;

    StatusCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusCodeEnum fromValue(String value) {
      for (StatusCodeEnum b : StatusCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS_CODE = "StatusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private StatusCodeEnum statusCode;

  public static final String SERIALIZED_NAME_SUCCESS = "Success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public ApiResponsePublishedEarlyDayMotionDetails() {
  }

  public ApiResponsePublishedEarlyDayMotionDetails(
     Boolean success
  ) {
    this();
    this.success = success;
  }

  public ApiResponsePublishedEarlyDayMotionDetails errors(List<String> errors) {
    this.errors = errors;
    return this;
  }

  public ApiResponsePublishedEarlyDayMotionDetails addErrorsItem(String errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Get errors
   * @return errors
   */
  @javax.annotation.Nullable
  public List<String> getErrors() {
    return errors;
  }

  public void setErrors(List<String> errors) {
    this.errors = errors;
  }


  public ApiResponsePublishedEarlyDayMotionDetails pagingInfo(PagingInfo pagingInfo) {
    this.pagingInfo = pagingInfo;
    return this;
  }

  /**
   * Get pagingInfo
   * @return pagingInfo
   */
  @javax.annotation.Nullable
  public PagingInfo getPagingInfo() {
    return pagingInfo;
  }

  public void setPagingInfo(PagingInfo pagingInfo) {
    this.pagingInfo = pagingInfo;
  }


  public ApiResponsePublishedEarlyDayMotionDetails response(PublishedEarlyDayMotionDetails response) {
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @javax.annotation.Nullable
  public PublishedEarlyDayMotionDetails getResponse() {
    return response;
  }

  public void setResponse(PublishedEarlyDayMotionDetails response) {
    this.response = response;
  }


  public ApiResponsePublishedEarlyDayMotionDetails statusCode(StatusCodeEnum statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Get statusCode
   * @return statusCode
   */
  @javax.annotation.Nullable
  public StatusCodeEnum getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(StatusCodeEnum statusCode) {
    this.statusCode = statusCode;
  }


  /**
   * Get success
   * @return success
   */
  @javax.annotation.Nullable
  public Boolean getSuccess() {
    return success;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiResponsePublishedEarlyDayMotionDetails apiResponsePublishedEarlyDayMotionDetails = (ApiResponsePublishedEarlyDayMotionDetails) o;
    return Objects.equals(this.errors, apiResponsePublishedEarlyDayMotionDetails.errors) &&
        Objects.equals(this.pagingInfo, apiResponsePublishedEarlyDayMotionDetails.pagingInfo) &&
        Objects.equals(this.response, apiResponsePublishedEarlyDayMotionDetails.response) &&
        Objects.equals(this.statusCode, apiResponsePublishedEarlyDayMotionDetails.statusCode) &&
        Objects.equals(this.success, apiResponsePublishedEarlyDayMotionDetails.success);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errors, pagingInfo, response, statusCode, success);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiResponsePublishedEarlyDayMotionDetails {\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    pagingInfo: ").append(toIndentedString(pagingInfo)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Errors");
    openapiFields.add("PagingInfo");
    openapiFields.add("Response");
    openapiFields.add("StatusCode");
    openapiFields.add("Success");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiResponsePublishedEarlyDayMotionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiResponsePublishedEarlyDayMotionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiResponsePublishedEarlyDayMotionDetails is not found in the empty JSON string", ApiResponsePublishedEarlyDayMotionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiResponsePublishedEarlyDayMotionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiResponsePublishedEarlyDayMotionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("Errors") != null && !jsonObj.get("Errors").isJsonNull() && !jsonObj.get("Errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Errors` to be an array in the JSON string but got `%s`", jsonObj.get("Errors").toString()));
      }
      // validate the optional field `PagingInfo`
      if (jsonObj.get("PagingInfo") != null && !jsonObj.get("PagingInfo").isJsonNull()) {
        PagingInfo.validateJsonElement(jsonObj.get("PagingInfo"));
      }
      // validate the optional field `Response`
      if (jsonObj.get("Response") != null && !jsonObj.get("Response").isJsonNull()) {
        PublishedEarlyDayMotionDetails.validateJsonElement(jsonObj.get("Response"));
      }
      if ((jsonObj.get("StatusCode") != null && !jsonObj.get("StatusCode").isJsonNull()) && !jsonObj.get("StatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusCode").toString()));
      }
      // validate the optional field `StatusCode`
      if (jsonObj.get("StatusCode") != null && !jsonObj.get("StatusCode").isJsonNull()) {
        StatusCodeEnum.validateJsonElement(jsonObj.get("StatusCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiResponsePublishedEarlyDayMotionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiResponsePublishedEarlyDayMotionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiResponsePublishedEarlyDayMotionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiResponsePublishedEarlyDayMotionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiResponsePublishedEarlyDayMotionDetails>() {
           @Override
           public void write(JsonWriter out, ApiResponsePublishedEarlyDayMotionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiResponsePublishedEarlyDayMotionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiResponsePublishedEarlyDayMotionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiResponsePublishedEarlyDayMotionDetails
   * @throws IOException if the JSON string is invalid with respect to ApiResponsePublishedEarlyDayMotionDetails
   */
  public static ApiResponsePublishedEarlyDayMotionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiResponsePublishedEarlyDayMotionDetails.class);
  }

  /**
   * Convert an instance of ApiResponsePublishedEarlyDayMotionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

