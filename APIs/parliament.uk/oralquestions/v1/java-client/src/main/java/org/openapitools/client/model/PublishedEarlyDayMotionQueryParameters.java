/*
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PublishedEarlyDayMotionQueryParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:28.456197-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublishedEarlyDayMotionQueryParameters {
  public static final String SERIALIZED_NAME_CURRENT_STATUS_DATE_END = "CurrentStatusDateEnd";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATUS_DATE_END)
  private OffsetDateTime currentStatusDateEnd;

  public static final String SERIALIZED_NAME_CURRENT_STATUS_DATE_START = "CurrentStatusDateStart";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATUS_DATE_START)
  private OffsetDateTime currentStatusDateStart;

  public static final String SERIALIZED_NAME_EDM_IDS = "EdmIds";
  @SerializedName(SERIALIZED_NAME_EDM_IDS)
  private List<Integer> edmIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDE_SPONSORED_BY_MEMBER = "IncludeSponsoredByMember";
  @SerializedName(SERIALIZED_NAME_INCLUDE_SPONSORED_BY_MEMBER)
  private Boolean includeSponsoredByMember;

  public static final String SERIALIZED_NAME_IS_PRAYER = "IsPrayer";
  @SerializedName(SERIALIZED_NAME_IS_PRAYER)
  private Boolean isPrayer;

  public static final String SERIALIZED_NAME_MEMBER_ID = "MemberId";
  @SerializedName(SERIALIZED_NAME_MEMBER_ID)
  private Integer memberId;

  /**
   * Order results by date tabled, title or signature count. Default is date tabled.
   */
  @JsonAdapter(OrderByEnum.Adapter.class)
  public enum OrderByEnum {
    DATE_TABLED_ASC("DateTabledAsc"),
    
    DATE_TABLED_DESC("DateTabledDesc"),
    
    TITLE_ASC("TitleAsc"),
    
    TITLE_DESC("TitleDesc"),
    
    SIGNATURE_COUNT_ASC("SignatureCountAsc"),
    
    SIGNATURE_COUNT_DESC("SignatureCountDesc");

    private String value;

    OrderByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderByEnum fromValue(String value) {
      for (OrderByEnum b : OrderByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrderByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrderByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrderByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORDER_BY = "OrderBy";
  @SerializedName(SERIALIZED_NAME_ORDER_BY)
  private OrderByEnum orderBy;

  public static final String SERIALIZED_NAME_SEARCH_TERM = "SearchTerm";
  @SerializedName(SERIALIZED_NAME_SEARCH_TERM)
  private String searchTerm;

  public static final String SERIALIZED_NAME_SKIP = "Skip";
  @SerializedName(SERIALIZED_NAME_SKIP)
  private Integer skip;

  /**
   * Gets or Sets statuses
   */
  @JsonAdapter(StatusesEnum.Adapter.class)
  public enum StatusesEnum {
    PUBLISHED("Published"),
    
    WITHDRAWN("Withdrawn");

    private String value;

    StatusesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusesEnum fromValue(String value) {
      for (StatusesEnum b : StatusesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUSES = "Statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private List<StatusesEnum> statuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_TABLED_END_DATE = "TabledEndDate";
  @SerializedName(SERIALIZED_NAME_TABLED_END_DATE)
  private OffsetDateTime tabledEndDate;

  public static final String SERIALIZED_NAME_TABLED_START_DATE = "TabledStartDate";
  @SerializedName(SERIALIZED_NAME_TABLED_START_DATE)
  private OffsetDateTime tabledStartDate;

  public static final String SERIALIZED_NAME_TAKE = "Take";
  @SerializedName(SERIALIZED_NAME_TAKE)
  private Integer take;

  public static final String SERIALIZED_NAME_UI_N_WITH_AMENDMENT_SUFFIX = "UINWithAmendmentSuffix";
  @SerializedName(SERIALIZED_NAME_UI_N_WITH_AMENDMENT_SUFFIX)
  private String uiNWithAmendmentSuffix;

  public PublishedEarlyDayMotionQueryParameters() {
  }

  public PublishedEarlyDayMotionQueryParameters currentStatusDateEnd(OffsetDateTime currentStatusDateEnd) {
    this.currentStatusDateEnd = currentStatusDateEnd;
    return this;
  }

  /**
   * Early Day Motions where the current status has been set on or before the date provided. Date format YYYY-MM-DD.
   * @return currentStatusDateEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCurrentStatusDateEnd() {
    return currentStatusDateEnd;
  }

  public void setCurrentStatusDateEnd(OffsetDateTime currentStatusDateEnd) {
    this.currentStatusDateEnd = currentStatusDateEnd;
  }


  public PublishedEarlyDayMotionQueryParameters currentStatusDateStart(OffsetDateTime currentStatusDateStart) {
    this.currentStatusDateStart = currentStatusDateStart;
    return this;
  }

  /**
   * Early Day Motions where the current status has been set on or after the date provided. Date format YYYY-MM-DD.
   * @return currentStatusDateStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCurrentStatusDateStart() {
    return currentStatusDateStart;
  }

  public void setCurrentStatusDateStart(OffsetDateTime currentStatusDateStart) {
    this.currentStatusDateStart = currentStatusDateStart;
  }


  public PublishedEarlyDayMotionQueryParameters edmIds(List<Integer> edmIds) {
    this.edmIds = edmIds;
    return this;
  }

  public PublishedEarlyDayMotionQueryParameters addEdmIdsItem(Integer edmIdsItem) {
    if (this.edmIds == null) {
      this.edmIds = new ArrayList<>();
    }
    this.edmIds.add(edmIdsItem);
    return this;
  }

  /**
   * Early Day Motions with an ID in the list provided.
   * @return edmIds
   */
  @javax.annotation.Nullable
  public List<Integer> getEdmIds() {
    return edmIds;
  }

  public void setEdmIds(List<Integer> edmIds) {
    this.edmIds = edmIds;
  }


  public PublishedEarlyDayMotionQueryParameters includeSponsoredByMember(Boolean includeSponsoredByMember) {
    this.includeSponsoredByMember = includeSponsoredByMember;
    return this;
  }

  /**
   * Include Early Day Motions sponsored by Member specified
   * @return includeSponsoredByMember
   */
  @javax.annotation.Nullable
  public Boolean getIncludeSponsoredByMember() {
    return includeSponsoredByMember;
  }

  public void setIncludeSponsoredByMember(Boolean includeSponsoredByMember) {
    this.includeSponsoredByMember = includeSponsoredByMember;
  }


  public PublishedEarlyDayMotionQueryParameters isPrayer(Boolean isPrayer) {
    this.isPrayer = isPrayer;
    return this;
  }

  /**
   * Early Day Motions which are a prayer against a Negative Statutory Instrument.
   * @return isPrayer
   */
  @javax.annotation.Nullable
  public Boolean getIsPrayer() {
    return isPrayer;
  }

  public void setIsPrayer(Boolean isPrayer) {
    this.isPrayer = isPrayer;
  }


  public PublishedEarlyDayMotionQueryParameters memberId(Integer memberId) {
    this.memberId = memberId;
    return this;
  }

  /**
   * Return Early Day Motions tabled by Member with ID provided.
   * @return memberId
   */
  @javax.annotation.Nullable
  public Integer getMemberId() {
    return memberId;
  }

  public void setMemberId(Integer memberId) {
    this.memberId = memberId;
  }


  public PublishedEarlyDayMotionQueryParameters orderBy(OrderByEnum orderBy) {
    this.orderBy = orderBy;
    return this;
  }

  /**
   * Order results by date tabled, title or signature count. Default is date tabled.
   * @return orderBy
   */
  @javax.annotation.Nullable
  public OrderByEnum getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(OrderByEnum orderBy) {
    this.orderBy = orderBy;
  }


  public PublishedEarlyDayMotionQueryParameters searchTerm(String searchTerm) {
    this.searchTerm = searchTerm;
    return this;
  }

  /**
   * Early Day Motions where the title includes the search term provided.
   * @return searchTerm
   */
  @javax.annotation.Nullable
  public String getSearchTerm() {
    return searchTerm;
  }

  public void setSearchTerm(String searchTerm) {
    this.searchTerm = searchTerm;
  }


  public PublishedEarlyDayMotionQueryParameters skip(Integer skip) {
    this.skip = skip;
    return this;
  }

  /**
   * The number of records to skip from the first, default is 0.
   * @return skip
   */
  @javax.annotation.Nullable
  public Integer getSkip() {
    return skip;
  }

  public void setSkip(Integer skip) {
    this.skip = skip;
  }


  public PublishedEarlyDayMotionQueryParameters statuses(List<StatusesEnum> statuses) {
    this.statuses = statuses;
    return this;
  }

  public PublishedEarlyDayMotionQueryParameters addStatusesItem(StatusesEnum statusesItem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

  /**
   * Early Day Motions where current status is in the selected list.
   * @return statuses
   */
  @javax.annotation.Nullable
  public List<StatusesEnum> getStatuses() {
    return statuses;
  }

  public void setStatuses(List<StatusesEnum> statuses) {
    this.statuses = statuses;
  }


  public PublishedEarlyDayMotionQueryParameters tabledEndDate(OffsetDateTime tabledEndDate) {
    this.tabledEndDate = tabledEndDate;
    return this;
  }

  /**
   * Early Day Motions where the date tabled is on or before the date provided. Date format YYYY-MM-DD.
   * @return tabledEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTabledEndDate() {
    return tabledEndDate;
  }

  public void setTabledEndDate(OffsetDateTime tabledEndDate) {
    this.tabledEndDate = tabledEndDate;
  }


  public PublishedEarlyDayMotionQueryParameters tabledStartDate(OffsetDateTime tabledStartDate) {
    this.tabledStartDate = tabledStartDate;
    return this;
  }

  /**
   * Early Day Motions where the date tabled is on or after the date provided. Date format YYYY-MM-DD.
   * @return tabledStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTabledStartDate() {
    return tabledStartDate;
  }

  public void setTabledStartDate(OffsetDateTime tabledStartDate) {
    this.tabledStartDate = tabledStartDate;
  }


  public PublishedEarlyDayMotionQueryParameters take(Integer take) {
    this.take = take;
    return this;
  }

  /**
   * The number of records to return, default is 25, maximum is 100.
   * @return take
   */
  @javax.annotation.Nullable
  public Integer getTake() {
    return take;
  }

  public void setTake(Integer take) {
    this.take = take;
  }


  public PublishedEarlyDayMotionQueryParameters uiNWithAmendmentSuffix(String uiNWithAmendmentSuffix) {
    this.uiNWithAmendmentSuffix = uiNWithAmendmentSuffix;
    return this;
  }

  /**
   * Early Day Motions with an UINWithAmendmentSuffix provided.
   * @return uiNWithAmendmentSuffix
   */
  @javax.annotation.Nullable
  public String getUiNWithAmendmentSuffix() {
    return uiNWithAmendmentSuffix;
  }

  public void setUiNWithAmendmentSuffix(String uiNWithAmendmentSuffix) {
    this.uiNWithAmendmentSuffix = uiNWithAmendmentSuffix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublishedEarlyDayMotionQueryParameters publishedEarlyDayMotionQueryParameters = (PublishedEarlyDayMotionQueryParameters) o;
    return Objects.equals(this.currentStatusDateEnd, publishedEarlyDayMotionQueryParameters.currentStatusDateEnd) &&
        Objects.equals(this.currentStatusDateStart, publishedEarlyDayMotionQueryParameters.currentStatusDateStart) &&
        Objects.equals(this.edmIds, publishedEarlyDayMotionQueryParameters.edmIds) &&
        Objects.equals(this.includeSponsoredByMember, publishedEarlyDayMotionQueryParameters.includeSponsoredByMember) &&
        Objects.equals(this.isPrayer, publishedEarlyDayMotionQueryParameters.isPrayer) &&
        Objects.equals(this.memberId, publishedEarlyDayMotionQueryParameters.memberId) &&
        Objects.equals(this.orderBy, publishedEarlyDayMotionQueryParameters.orderBy) &&
        Objects.equals(this.searchTerm, publishedEarlyDayMotionQueryParameters.searchTerm) &&
        Objects.equals(this.skip, publishedEarlyDayMotionQueryParameters.skip) &&
        Objects.equals(this.statuses, publishedEarlyDayMotionQueryParameters.statuses) &&
        Objects.equals(this.tabledEndDate, publishedEarlyDayMotionQueryParameters.tabledEndDate) &&
        Objects.equals(this.tabledStartDate, publishedEarlyDayMotionQueryParameters.tabledStartDate) &&
        Objects.equals(this.take, publishedEarlyDayMotionQueryParameters.take) &&
        Objects.equals(this.uiNWithAmendmentSuffix, publishedEarlyDayMotionQueryParameters.uiNWithAmendmentSuffix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentStatusDateEnd, currentStatusDateStart, edmIds, includeSponsoredByMember, isPrayer, memberId, orderBy, searchTerm, skip, statuses, tabledEndDate, tabledStartDate, take, uiNWithAmendmentSuffix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublishedEarlyDayMotionQueryParameters {\n");
    sb.append("    currentStatusDateEnd: ").append(toIndentedString(currentStatusDateEnd)).append("\n");
    sb.append("    currentStatusDateStart: ").append(toIndentedString(currentStatusDateStart)).append("\n");
    sb.append("    edmIds: ").append(toIndentedString(edmIds)).append("\n");
    sb.append("    includeSponsoredByMember: ").append(toIndentedString(includeSponsoredByMember)).append("\n");
    sb.append("    isPrayer: ").append(toIndentedString(isPrayer)).append("\n");
    sb.append("    memberId: ").append(toIndentedString(memberId)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    searchTerm: ").append(toIndentedString(searchTerm)).append("\n");
    sb.append("    skip: ").append(toIndentedString(skip)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    tabledEndDate: ").append(toIndentedString(tabledEndDate)).append("\n");
    sb.append("    tabledStartDate: ").append(toIndentedString(tabledStartDate)).append("\n");
    sb.append("    take: ").append(toIndentedString(take)).append("\n");
    sb.append("    uiNWithAmendmentSuffix: ").append(toIndentedString(uiNWithAmendmentSuffix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrentStatusDateEnd");
    openapiFields.add("CurrentStatusDateStart");
    openapiFields.add("EdmIds");
    openapiFields.add("IncludeSponsoredByMember");
    openapiFields.add("IsPrayer");
    openapiFields.add("MemberId");
    openapiFields.add("OrderBy");
    openapiFields.add("SearchTerm");
    openapiFields.add("Skip");
    openapiFields.add("Statuses");
    openapiFields.add("TabledEndDate");
    openapiFields.add("TabledStartDate");
    openapiFields.add("Take");
    openapiFields.add("UINWithAmendmentSuffix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublishedEarlyDayMotionQueryParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublishedEarlyDayMotionQueryParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublishedEarlyDayMotionQueryParameters is not found in the empty JSON string", PublishedEarlyDayMotionQueryParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublishedEarlyDayMotionQueryParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublishedEarlyDayMotionQueryParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("EdmIds") != null && !jsonObj.get("EdmIds").isJsonNull() && !jsonObj.get("EdmIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `EdmIds` to be an array in the JSON string but got `%s`", jsonObj.get("EdmIds").toString()));
      }
      if ((jsonObj.get("OrderBy") != null && !jsonObj.get("OrderBy").isJsonNull()) && !jsonObj.get("OrderBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrderBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrderBy").toString()));
      }
      // validate the optional field `OrderBy`
      if (jsonObj.get("OrderBy") != null && !jsonObj.get("OrderBy").isJsonNull()) {
        OrderByEnum.validateJsonElement(jsonObj.get("OrderBy"));
      }
      if ((jsonObj.get("SearchTerm") != null && !jsonObj.get("SearchTerm").isJsonNull()) && !jsonObj.get("SearchTerm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SearchTerm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SearchTerm").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Statuses") != null && !jsonObj.get("Statuses").isJsonNull() && !jsonObj.get("Statuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Statuses` to be an array in the JSON string but got `%s`", jsonObj.get("Statuses").toString()));
      }
      if ((jsonObj.get("UINWithAmendmentSuffix") != null && !jsonObj.get("UINWithAmendmentSuffix").isJsonNull()) && !jsonObj.get("UINWithAmendmentSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UINWithAmendmentSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UINWithAmendmentSuffix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublishedEarlyDayMotionQueryParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublishedEarlyDayMotionQueryParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublishedEarlyDayMotionQueryParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublishedEarlyDayMotionQueryParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<PublishedEarlyDayMotionQueryParameters>() {
           @Override
           public void write(JsonWriter out, PublishedEarlyDayMotionQueryParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublishedEarlyDayMotionQueryParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublishedEarlyDayMotionQueryParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublishedEarlyDayMotionQueryParameters
   * @throws IOException if the JSON string is invalid with respect to PublishedEarlyDayMotionQueryParameters
   */
  public static PublishedEarlyDayMotionQueryParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublishedEarlyDayMotionQueryParameters.class);
  }

  /**
   * Convert an instance of PublishedEarlyDayMotionQueryParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

