/*
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.MemberForDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PublishedOralQuestion
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:28.456197-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublishedOralQuestion {
  public static final String SERIALIZED_NAME_ANSWERING_BODY = "AnsweringBody";
  @SerializedName(SERIALIZED_NAME_ANSWERING_BODY)
  private String answeringBody;

  public static final String SERIALIZED_NAME_ANSWERING_BODY_ID = "AnsweringBodyId";
  @SerializedName(SERIALIZED_NAME_ANSWERING_BODY_ID)
  private Integer answeringBodyId;

  public static final String SERIALIZED_NAME_ANSWERING_MINISTER = "AnsweringMinister";
  @SerializedName(SERIALIZED_NAME_ANSWERING_MINISTER)
  private MemberForDate answeringMinister;

  public static final String SERIALIZED_NAME_ANSWERING_MINISTER_ID = "AnsweringMinisterId";
  @SerializedName(SERIALIZED_NAME_ANSWERING_MINISTER_ID)
  private Integer answeringMinisterId;

  public static final String SERIALIZED_NAME_ANSWERING_MINISTER_TITLE = "AnsweringMinisterTitle";
  @SerializedName(SERIALIZED_NAME_ANSWERING_MINISTER_TITLE)
  private String answeringMinisterTitle;

  public static final String SERIALIZED_NAME_ANSWERING_WHEN = "AnsweringWhen";
  @SerializedName(SERIALIZED_NAME_ANSWERING_WHEN)
  private OffsetDateTime answeringWhen;

  public static final String SERIALIZED_NAME_ASKING_MEMBER = "AskingMember";
  @SerializedName(SERIALIZED_NAME_ASKING_MEMBER)
  private MemberForDate askingMember;

  public static final String SERIALIZED_NAME_ASKING_MEMBER_ID = "AskingMemberId";
  @SerializedName(SERIALIZED_NAME_ASKING_MEMBER_ID)
  private Integer askingMemberId;

  public static final String SERIALIZED_NAME_DECLARABLE_INTEREST_DETAIL = "DeclarableInterestDetail";
  @SerializedName(SERIALIZED_NAME_DECLARABLE_INTEREST_DETAIL)
  private String declarableInterestDetail;

  public static final String SERIALIZED_NAME_HANSARD_LINK = "HansardLink";
  @SerializedName(SERIALIZED_NAME_HANSARD_LINK)
  private String hansardLink;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_QUESTION_TEXT = "QuestionText";
  @SerializedName(SERIALIZED_NAME_QUESTION_TEXT)
  private String questionText;

  /**
   * Gets or Sets questionType
   */
  @JsonAdapter(QuestionTypeEnum.Adapter.class)
  public enum QuestionTypeEnum {
    SUBSTANTIVE("Substantive"),
    
    TOPICAL("Topical");

    private String value;

    QuestionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuestionTypeEnum fromValue(String value) {
      for (QuestionTypeEnum b : QuestionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QuestionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuestionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QuestionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QuestionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QuestionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUESTION_TYPE = "QuestionType";
  @SerializedName(SERIALIZED_NAME_QUESTION_TYPE)
  private QuestionTypeEnum questionType;

  public static final String SERIALIZED_NAME_REMOVED_FROM_TO_BE_ASKED_WHEN = "RemovedFromToBeAskedWhen";
  @SerializedName(SERIALIZED_NAME_REMOVED_FROM_TO_BE_ASKED_WHEN)
  private OffsetDateTime removedFromToBeAskedWhen;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUBMITTED("Submitted"),
    
    CARDED("Carded"),
    
    UNSAVED("Unsaved"),
    
    READY_FOR_SHUFFLE("ReadyForShuffle"),
    
    TO_BE_ASKED("ToBeAsked"),
    
    SHUFFLE_UNSUCCESSFUL("ShuffleUnsuccessful"),
    
    WITHDRAWN("Withdrawn"),
    
    UNSTARRED("Unstarred"),
    
    DRAFT("Draft"),
    
    FOR_REVIEW("ForReview"),
    
    UNASKED("Unasked"),
    
    TRANSFERRED("Transferred");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TABLED_WHEN = "TabledWhen";
  @SerializedName(SERIALIZED_NAME_TABLED_WHEN)
  private OffsetDateTime tabledWhen;

  public static final String SERIALIZED_NAME_U_I_N = "UIN";
  @SerializedName(SERIALIZED_NAME_U_I_N)
  private Integer UIN;

  public PublishedOralQuestion() {
  }

  public PublishedOralQuestion answeringBody(String answeringBody) {
    this.answeringBody = answeringBody;
    return this;
  }

  /**
   * Get answeringBody
   * @return answeringBody
   */
  @javax.annotation.Nullable
  public String getAnsweringBody() {
    return answeringBody;
  }

  public void setAnsweringBody(String answeringBody) {
    this.answeringBody = answeringBody;
  }


  public PublishedOralQuestion answeringBodyId(Integer answeringBodyId) {
    this.answeringBodyId = answeringBodyId;
    return this;
  }

  /**
   * Get answeringBodyId
   * @return answeringBodyId
   */
  @javax.annotation.Nullable
  public Integer getAnsweringBodyId() {
    return answeringBodyId;
  }

  public void setAnsweringBodyId(Integer answeringBodyId) {
    this.answeringBodyId = answeringBodyId;
  }


  public PublishedOralQuestion answeringMinister(MemberForDate answeringMinister) {
    this.answeringMinister = answeringMinister;
    return this;
  }

  /**
   * Get answeringMinister
   * @return answeringMinister
   */
  @javax.annotation.Nullable
  public MemberForDate getAnsweringMinister() {
    return answeringMinister;
  }

  public void setAnsweringMinister(MemberForDate answeringMinister) {
    this.answeringMinister = answeringMinister;
  }


  public PublishedOralQuestion answeringMinisterId(Integer answeringMinisterId) {
    this.answeringMinisterId = answeringMinisterId;
    return this;
  }

  /**
   * Get answeringMinisterId
   * @return answeringMinisterId
   */
  @javax.annotation.Nullable
  public Integer getAnsweringMinisterId() {
    return answeringMinisterId;
  }

  public void setAnsweringMinisterId(Integer answeringMinisterId) {
    this.answeringMinisterId = answeringMinisterId;
  }


  public PublishedOralQuestion answeringMinisterTitle(String answeringMinisterTitle) {
    this.answeringMinisterTitle = answeringMinisterTitle;
    return this;
  }

  /**
   * Get answeringMinisterTitle
   * @return answeringMinisterTitle
   */
  @javax.annotation.Nullable
  public String getAnsweringMinisterTitle() {
    return answeringMinisterTitle;
  }

  public void setAnsweringMinisterTitle(String answeringMinisterTitle) {
    this.answeringMinisterTitle = answeringMinisterTitle;
  }


  public PublishedOralQuestion answeringWhen(OffsetDateTime answeringWhen) {
    this.answeringWhen = answeringWhen;
    return this;
  }

  /**
   * Get answeringWhen
   * @return answeringWhen
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAnsweringWhen() {
    return answeringWhen;
  }

  public void setAnsweringWhen(OffsetDateTime answeringWhen) {
    this.answeringWhen = answeringWhen;
  }


  public PublishedOralQuestion askingMember(MemberForDate askingMember) {
    this.askingMember = askingMember;
    return this;
  }

  /**
   * Get askingMember
   * @return askingMember
   */
  @javax.annotation.Nullable
  public MemberForDate getAskingMember() {
    return askingMember;
  }

  public void setAskingMember(MemberForDate askingMember) {
    this.askingMember = askingMember;
  }


  public PublishedOralQuestion askingMemberId(Integer askingMemberId) {
    this.askingMemberId = askingMemberId;
    return this;
  }

  /**
   * Get askingMemberId
   * @return askingMemberId
   */
  @javax.annotation.Nullable
  public Integer getAskingMemberId() {
    return askingMemberId;
  }

  public void setAskingMemberId(Integer askingMemberId) {
    this.askingMemberId = askingMemberId;
  }


  public PublishedOralQuestion declarableInterestDetail(String declarableInterestDetail) {
    this.declarableInterestDetail = declarableInterestDetail;
    return this;
  }

  /**
   * Get declarableInterestDetail
   * @return declarableInterestDetail
   */
  @javax.annotation.Nullable
  public String getDeclarableInterestDetail() {
    return declarableInterestDetail;
  }

  public void setDeclarableInterestDetail(String declarableInterestDetail) {
    this.declarableInterestDetail = declarableInterestDetail;
  }


  public PublishedOralQuestion hansardLink(String hansardLink) {
    this.hansardLink = hansardLink;
    return this;
  }

  /**
   * Get hansardLink
   * @return hansardLink
   */
  @javax.annotation.Nullable
  public String getHansardLink() {
    return hansardLink;
  }

  public void setHansardLink(String hansardLink) {
    this.hansardLink = hansardLink;
  }


  public PublishedOralQuestion id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public PublishedOralQuestion number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public PublishedOralQuestion questionText(String questionText) {
    this.questionText = questionText;
    return this;
  }

  /**
   * Get questionText
   * @return questionText
   */
  @javax.annotation.Nullable
  public String getQuestionText() {
    return questionText;
  }

  public void setQuestionText(String questionText) {
    this.questionText = questionText;
  }


  public PublishedOralQuestion questionType(QuestionTypeEnum questionType) {
    this.questionType = questionType;
    return this;
  }

  /**
   * Get questionType
   * @return questionType
   */
  @javax.annotation.Nullable
  public QuestionTypeEnum getQuestionType() {
    return questionType;
  }

  public void setQuestionType(QuestionTypeEnum questionType) {
    this.questionType = questionType;
  }


  public PublishedOralQuestion removedFromToBeAskedWhen(OffsetDateTime removedFromToBeAskedWhen) {
    this.removedFromToBeAskedWhen = removedFromToBeAskedWhen;
    return this;
  }

  /**
   * Get removedFromToBeAskedWhen
   * @return removedFromToBeAskedWhen
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRemovedFromToBeAskedWhen() {
    return removedFromToBeAskedWhen;
  }

  public void setRemovedFromToBeAskedWhen(OffsetDateTime removedFromToBeAskedWhen) {
    this.removedFromToBeAskedWhen = removedFromToBeAskedWhen;
  }


  public PublishedOralQuestion status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public PublishedOralQuestion tabledWhen(OffsetDateTime tabledWhen) {
    this.tabledWhen = tabledWhen;
    return this;
  }

  /**
   * Get tabledWhen
   * @return tabledWhen
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTabledWhen() {
    return tabledWhen;
  }

  public void setTabledWhen(OffsetDateTime tabledWhen) {
    this.tabledWhen = tabledWhen;
  }


  public PublishedOralQuestion UIN(Integer UIN) {
    this.UIN = UIN;
    return this;
  }

  /**
   * Get UIN
   * @return UIN
   */
  @javax.annotation.Nullable
  public Integer getUIN() {
    return UIN;
  }

  public void setUIN(Integer UIN) {
    this.UIN = UIN;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublishedOralQuestion publishedOralQuestion = (PublishedOralQuestion) o;
    return Objects.equals(this.answeringBody, publishedOralQuestion.answeringBody) &&
        Objects.equals(this.answeringBodyId, publishedOralQuestion.answeringBodyId) &&
        Objects.equals(this.answeringMinister, publishedOralQuestion.answeringMinister) &&
        Objects.equals(this.answeringMinisterId, publishedOralQuestion.answeringMinisterId) &&
        Objects.equals(this.answeringMinisterTitle, publishedOralQuestion.answeringMinisterTitle) &&
        Objects.equals(this.answeringWhen, publishedOralQuestion.answeringWhen) &&
        Objects.equals(this.askingMember, publishedOralQuestion.askingMember) &&
        Objects.equals(this.askingMemberId, publishedOralQuestion.askingMemberId) &&
        Objects.equals(this.declarableInterestDetail, publishedOralQuestion.declarableInterestDetail) &&
        Objects.equals(this.hansardLink, publishedOralQuestion.hansardLink) &&
        Objects.equals(this.id, publishedOralQuestion.id) &&
        Objects.equals(this.number, publishedOralQuestion.number) &&
        Objects.equals(this.questionText, publishedOralQuestion.questionText) &&
        Objects.equals(this.questionType, publishedOralQuestion.questionType) &&
        Objects.equals(this.removedFromToBeAskedWhen, publishedOralQuestion.removedFromToBeAskedWhen) &&
        Objects.equals(this.status, publishedOralQuestion.status) &&
        Objects.equals(this.tabledWhen, publishedOralQuestion.tabledWhen) &&
        Objects.equals(this.UIN, publishedOralQuestion.UIN);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answeringBody, answeringBodyId, answeringMinister, answeringMinisterId, answeringMinisterTitle, answeringWhen, askingMember, askingMemberId, declarableInterestDetail, hansardLink, id, number, questionText, questionType, removedFromToBeAskedWhen, status, tabledWhen, UIN);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublishedOralQuestion {\n");
    sb.append("    answeringBody: ").append(toIndentedString(answeringBody)).append("\n");
    sb.append("    answeringBodyId: ").append(toIndentedString(answeringBodyId)).append("\n");
    sb.append("    answeringMinister: ").append(toIndentedString(answeringMinister)).append("\n");
    sb.append("    answeringMinisterId: ").append(toIndentedString(answeringMinisterId)).append("\n");
    sb.append("    answeringMinisterTitle: ").append(toIndentedString(answeringMinisterTitle)).append("\n");
    sb.append("    answeringWhen: ").append(toIndentedString(answeringWhen)).append("\n");
    sb.append("    askingMember: ").append(toIndentedString(askingMember)).append("\n");
    sb.append("    askingMemberId: ").append(toIndentedString(askingMemberId)).append("\n");
    sb.append("    declarableInterestDetail: ").append(toIndentedString(declarableInterestDetail)).append("\n");
    sb.append("    hansardLink: ").append(toIndentedString(hansardLink)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    questionText: ").append(toIndentedString(questionText)).append("\n");
    sb.append("    questionType: ").append(toIndentedString(questionType)).append("\n");
    sb.append("    removedFromToBeAskedWhen: ").append(toIndentedString(removedFromToBeAskedWhen)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tabledWhen: ").append(toIndentedString(tabledWhen)).append("\n");
    sb.append("    UIN: ").append(toIndentedString(UIN)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AnsweringBody");
    openapiFields.add("AnsweringBodyId");
    openapiFields.add("AnsweringMinister");
    openapiFields.add("AnsweringMinisterId");
    openapiFields.add("AnsweringMinisterTitle");
    openapiFields.add("AnsweringWhen");
    openapiFields.add("AskingMember");
    openapiFields.add("AskingMemberId");
    openapiFields.add("DeclarableInterestDetail");
    openapiFields.add("HansardLink");
    openapiFields.add("Id");
    openapiFields.add("Number");
    openapiFields.add("QuestionText");
    openapiFields.add("QuestionType");
    openapiFields.add("RemovedFromToBeAskedWhen");
    openapiFields.add("Status");
    openapiFields.add("TabledWhen");
    openapiFields.add("UIN");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublishedOralQuestion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublishedOralQuestion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublishedOralQuestion is not found in the empty JSON string", PublishedOralQuestion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublishedOralQuestion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublishedOralQuestion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AnsweringBody") != null && !jsonObj.get("AnsweringBody").isJsonNull()) && !jsonObj.get("AnsweringBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AnsweringBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AnsweringBody").toString()));
      }
      // validate the optional field `AnsweringMinister`
      if (jsonObj.get("AnsweringMinister") != null && !jsonObj.get("AnsweringMinister").isJsonNull()) {
        MemberForDate.validateJsonElement(jsonObj.get("AnsweringMinister"));
      }
      if ((jsonObj.get("AnsweringMinisterTitle") != null && !jsonObj.get("AnsweringMinisterTitle").isJsonNull()) && !jsonObj.get("AnsweringMinisterTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AnsweringMinisterTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AnsweringMinisterTitle").toString()));
      }
      // validate the optional field `AskingMember`
      if (jsonObj.get("AskingMember") != null && !jsonObj.get("AskingMember").isJsonNull()) {
        MemberForDate.validateJsonElement(jsonObj.get("AskingMember"));
      }
      if ((jsonObj.get("DeclarableInterestDetail") != null && !jsonObj.get("DeclarableInterestDetail").isJsonNull()) && !jsonObj.get("DeclarableInterestDetail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeclarableInterestDetail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeclarableInterestDetail").toString()));
      }
      if ((jsonObj.get("HansardLink") != null && !jsonObj.get("HansardLink").isJsonNull()) && !jsonObj.get("HansardLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HansardLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HansardLink").toString()));
      }
      if ((jsonObj.get("QuestionText") != null && !jsonObj.get("QuestionText").isJsonNull()) && !jsonObj.get("QuestionText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QuestionText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QuestionText").toString()));
      }
      if ((jsonObj.get("QuestionType") != null && !jsonObj.get("QuestionType").isJsonNull()) && !jsonObj.get("QuestionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QuestionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QuestionType").toString()));
      }
      // validate the optional field `QuestionType`
      if (jsonObj.get("QuestionType") != null && !jsonObj.get("QuestionType").isJsonNull()) {
        QuestionTypeEnum.validateJsonElement(jsonObj.get("QuestionType"));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublishedOralQuestion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublishedOralQuestion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublishedOralQuestion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublishedOralQuestion.class));

       return (TypeAdapter<T>) new TypeAdapter<PublishedOralQuestion>() {
           @Override
           public void write(JsonWriter out, PublishedOralQuestion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublishedOralQuestion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublishedOralQuestion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublishedOralQuestion
   * @throws IOException if the JSON string is invalid with respect to PublishedOralQuestion
   */
  public static PublishedOralQuestion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublishedOralQuestion.class);
  }

  /**
   * Convert an instance of PublishedOralQuestion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

