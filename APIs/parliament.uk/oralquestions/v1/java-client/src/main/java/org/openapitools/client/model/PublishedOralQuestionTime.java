/*
 * House of Commons Oral and Written Questions API
 * An API that allows querying all tabled oral and written questions, and motions for the House of Commons.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PublishedOralQuestionTime
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:28.456197-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublishedOralQuestionTime {
  public static final String SERIALIZED_NAME_ANSWERING_BODY_NAMES = "AnsweringBodyNames";
  @SerializedName(SERIALIZED_NAME_ANSWERING_BODY_NAMES)
  private String answeringBodyNames;

  public static final String SERIALIZED_NAME_ANSWERING_MINISTER_TITLES = "AnsweringMinisterTitles";
  @SerializedName(SERIALIZED_NAME_ANSWERING_MINISTER_TITLES)
  private String answeringMinisterTitles;

  public static final String SERIALIZED_NAME_ANSWERING_WHEN = "AnsweringWhen";
  @SerializedName(SERIALIZED_NAME_ANSWERING_WHEN)
  private OffsetDateTime answeringWhen;

  public static final String SERIALIZED_NAME_DEADLINE_WHEN = "DeadlineWhen";
  @SerializedName(SERIALIZED_NAME_DEADLINE_WHEN)
  private OffsetDateTime deadlineWhen;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_SUBSTANTIVE_TIME = "SubstantiveTime";
  @SerializedName(SERIALIZED_NAME_SUBSTANTIVE_TIME)
  private String substantiveTime;

  public static final String SERIALIZED_NAME_TOPICAL_TIME = "TopicalTime";
  @SerializedName(SERIALIZED_NAME_TOPICAL_TIME)
  private String topicalTime;

  public PublishedOralQuestionTime() {
  }

  public PublishedOralQuestionTime(
     String answeringBodyNames, 
     String answeringMinisterTitles
  ) {
    this();
    this.answeringBodyNames = answeringBodyNames;
    this.answeringMinisterTitles = answeringMinisterTitles;
  }

  /**
   * Get answeringBodyNames
   * @return answeringBodyNames
   */
  @javax.annotation.Nullable
  public String getAnsweringBodyNames() {
    return answeringBodyNames;
  }



  /**
   * Get answeringMinisterTitles
   * @return answeringMinisterTitles
   */
  @javax.annotation.Nullable
  public String getAnsweringMinisterTitles() {
    return answeringMinisterTitles;
  }



  public PublishedOralQuestionTime answeringWhen(OffsetDateTime answeringWhen) {
    this.answeringWhen = answeringWhen;
    return this;
  }

  /**
   * Get answeringWhen
   * @return answeringWhen
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAnsweringWhen() {
    return answeringWhen;
  }

  public void setAnsweringWhen(OffsetDateTime answeringWhen) {
    this.answeringWhen = answeringWhen;
  }


  public PublishedOralQuestionTime deadlineWhen(OffsetDateTime deadlineWhen) {
    this.deadlineWhen = deadlineWhen;
    return this;
  }

  /**
   * Get deadlineWhen
   * @return deadlineWhen
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeadlineWhen() {
    return deadlineWhen;
  }

  public void setDeadlineWhen(OffsetDateTime deadlineWhen) {
    this.deadlineWhen = deadlineWhen;
  }


  public PublishedOralQuestionTime id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public PublishedOralQuestionTime substantiveTime(String substantiveTime) {
    this.substantiveTime = substantiveTime;
    return this;
  }

  /**
   * Get substantiveTime
   * @return substantiveTime
   */
  @javax.annotation.Nullable
  public String getSubstantiveTime() {
    return substantiveTime;
  }

  public void setSubstantiveTime(String substantiveTime) {
    this.substantiveTime = substantiveTime;
  }


  public PublishedOralQuestionTime topicalTime(String topicalTime) {
    this.topicalTime = topicalTime;
    return this;
  }

  /**
   * Get topicalTime
   * @return topicalTime
   */
  @javax.annotation.Nullable
  public String getTopicalTime() {
    return topicalTime;
  }

  public void setTopicalTime(String topicalTime) {
    this.topicalTime = topicalTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublishedOralQuestionTime publishedOralQuestionTime = (PublishedOralQuestionTime) o;
    return Objects.equals(this.answeringBodyNames, publishedOralQuestionTime.answeringBodyNames) &&
        Objects.equals(this.answeringMinisterTitles, publishedOralQuestionTime.answeringMinisterTitles) &&
        Objects.equals(this.answeringWhen, publishedOralQuestionTime.answeringWhen) &&
        Objects.equals(this.deadlineWhen, publishedOralQuestionTime.deadlineWhen) &&
        Objects.equals(this.id, publishedOralQuestionTime.id) &&
        Objects.equals(this.substantiveTime, publishedOralQuestionTime.substantiveTime) &&
        Objects.equals(this.topicalTime, publishedOralQuestionTime.topicalTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answeringBodyNames, answeringMinisterTitles, answeringWhen, deadlineWhen, id, substantiveTime, topicalTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublishedOralQuestionTime {\n");
    sb.append("    answeringBodyNames: ").append(toIndentedString(answeringBodyNames)).append("\n");
    sb.append("    answeringMinisterTitles: ").append(toIndentedString(answeringMinisterTitles)).append("\n");
    sb.append("    answeringWhen: ").append(toIndentedString(answeringWhen)).append("\n");
    sb.append("    deadlineWhen: ").append(toIndentedString(deadlineWhen)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    substantiveTime: ").append(toIndentedString(substantiveTime)).append("\n");
    sb.append("    topicalTime: ").append(toIndentedString(topicalTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AnsweringBodyNames");
    openapiFields.add("AnsweringMinisterTitles");
    openapiFields.add("AnsweringWhen");
    openapiFields.add("DeadlineWhen");
    openapiFields.add("Id");
    openapiFields.add("SubstantiveTime");
    openapiFields.add("TopicalTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublishedOralQuestionTime
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublishedOralQuestionTime.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublishedOralQuestionTime is not found in the empty JSON string", PublishedOralQuestionTime.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublishedOralQuestionTime.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublishedOralQuestionTime` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AnsweringBodyNames") != null && !jsonObj.get("AnsweringBodyNames").isJsonNull()) && !jsonObj.get("AnsweringBodyNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AnsweringBodyNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AnsweringBodyNames").toString()));
      }
      if ((jsonObj.get("AnsweringMinisterTitles") != null && !jsonObj.get("AnsweringMinisterTitles").isJsonNull()) && !jsonObj.get("AnsweringMinisterTitles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AnsweringMinisterTitles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AnsweringMinisterTitles").toString()));
      }
      if ((jsonObj.get("SubstantiveTime") != null && !jsonObj.get("SubstantiveTime").isJsonNull()) && !jsonObj.get("SubstantiveTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubstantiveTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubstantiveTime").toString()));
      }
      if ((jsonObj.get("TopicalTime") != null && !jsonObj.get("TopicalTime").isJsonNull()) && !jsonObj.get("TopicalTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TopicalTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TopicalTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublishedOralQuestionTime.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublishedOralQuestionTime' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublishedOralQuestionTime> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublishedOralQuestionTime.class));

       return (TypeAdapter<T>) new TypeAdapter<PublishedOralQuestionTime>() {
           @Override
           public void write(JsonWriter out, PublishedOralQuestionTime value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublishedOralQuestionTime read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublishedOralQuestionTime given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublishedOralQuestionTime
   * @throws IOException if the JSON string is invalid with respect to PublishedOralQuestionTime
   */
  public static PublishedOralQuestionTime fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublishedOralQuestionTime.class);
  }

  /**
   * Convert an instance of PublishedOralQuestionTime to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

