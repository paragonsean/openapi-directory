# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment_view_model import AttachmentViewModel
from openapi_server.models.house_enum import HouseEnum
from openapi_server.models.linked_statements import LinkedStatements
from openapi_server.models.member_view_model import MemberViewModel
from openapi_server import util


class StatementsViewModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answering_body_id: int=None, answering_body_name: str=None, attachments: List[AttachmentViewModel]=None, date_made: datetime=None, has_attachments: bool=None, has_linked_statements: bool=None, house: HouseEnum=None, id: int=None, linked_statements: List[LinkedStatements]=None, member: MemberViewModel=None, member_id: int=None, member_role: str=None, notice_number: int=None, text: str=None, title: str=None, uin: str=None):
        """StatementsViewModel - a model defined in OpenAPI

        :param answering_body_id: The answering_body_id of this StatementsViewModel.
        :param answering_body_name: The answering_body_name of this StatementsViewModel.
        :param attachments: The attachments of this StatementsViewModel.
        :param date_made: The date_made of this StatementsViewModel.
        :param has_attachments: The has_attachments of this StatementsViewModel.
        :param has_linked_statements: The has_linked_statements of this StatementsViewModel.
        :param house: The house of this StatementsViewModel.
        :param id: The id of this StatementsViewModel.
        :param linked_statements: The linked_statements of this StatementsViewModel.
        :param member: The member of this StatementsViewModel.
        :param member_id: The member_id of this StatementsViewModel.
        :param member_role: The member_role of this StatementsViewModel.
        :param notice_number: The notice_number of this StatementsViewModel.
        :param text: The text of this StatementsViewModel.
        :param title: The title of this StatementsViewModel.
        :param uin: The uin of this StatementsViewModel.
        """
        self.openapi_types = {
            'answering_body_id': int,
            'answering_body_name': str,
            'attachments': List[AttachmentViewModel],
            'date_made': datetime,
            'has_attachments': bool,
            'has_linked_statements': bool,
            'house': HouseEnum,
            'id': int,
            'linked_statements': List[LinkedStatements],
            'member': MemberViewModel,
            'member_id': int,
            'member_role': str,
            'notice_number': int,
            'text': str,
            'title': str,
            'uin': str
        }

        self.attribute_map = {
            'answering_body_id': 'answeringBodyId',
            'answering_body_name': 'answeringBodyName',
            'attachments': 'attachments',
            'date_made': 'dateMade',
            'has_attachments': 'hasAttachments',
            'has_linked_statements': 'hasLinkedStatements',
            'house': 'house',
            'id': 'id',
            'linked_statements': 'linkedStatements',
            'member': 'member',
            'member_id': 'memberId',
            'member_role': 'memberRole',
            'notice_number': 'noticeNumber',
            'text': 'text',
            'title': 'title',
            'uin': 'uin'
        }

        self._answering_body_id = answering_body_id
        self._answering_body_name = answering_body_name
        self._attachments = attachments
        self._date_made = date_made
        self._has_attachments = has_attachments
        self._has_linked_statements = has_linked_statements
        self._house = house
        self._id = id
        self._linked_statements = linked_statements
        self._member = member
        self._member_id = member_id
        self._member_role = member_role
        self._notice_number = notice_number
        self._text = text
        self._title = title
        self._uin = uin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatementsViewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatementsViewModel of this StatementsViewModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answering_body_id(self):
        """Gets the answering_body_id of this StatementsViewModel.


        :return: The answering_body_id of this StatementsViewModel.
        :rtype: int
        """
        return self._answering_body_id

    @answering_body_id.setter
    def answering_body_id(self, answering_body_id):
        """Sets the answering_body_id of this StatementsViewModel.


        :param answering_body_id: The answering_body_id of this StatementsViewModel.
        :type answering_body_id: int
        """

        self._answering_body_id = answering_body_id

    @property
    def answering_body_name(self):
        """Gets the answering_body_name of this StatementsViewModel.


        :return: The answering_body_name of this StatementsViewModel.
        :rtype: str
        """
        return self._answering_body_name

    @answering_body_name.setter
    def answering_body_name(self, answering_body_name):
        """Sets the answering_body_name of this StatementsViewModel.


        :param answering_body_name: The answering_body_name of this StatementsViewModel.
        :type answering_body_name: str
        """

        self._answering_body_name = answering_body_name

    @property
    def attachments(self):
        """Gets the attachments of this StatementsViewModel.


        :return: The attachments of this StatementsViewModel.
        :rtype: List[AttachmentViewModel]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this StatementsViewModel.


        :param attachments: The attachments of this StatementsViewModel.
        :type attachments: List[AttachmentViewModel]
        """

        self._attachments = attachments

    @property
    def date_made(self):
        """Gets the date_made of this StatementsViewModel.


        :return: The date_made of this StatementsViewModel.
        :rtype: datetime
        """
        return self._date_made

    @date_made.setter
    def date_made(self, date_made):
        """Sets the date_made of this StatementsViewModel.


        :param date_made: The date_made of this StatementsViewModel.
        :type date_made: datetime
        """

        self._date_made = date_made

    @property
    def has_attachments(self):
        """Gets the has_attachments of this StatementsViewModel.


        :return: The has_attachments of this StatementsViewModel.
        :rtype: bool
        """
        return self._has_attachments

    @has_attachments.setter
    def has_attachments(self, has_attachments):
        """Sets the has_attachments of this StatementsViewModel.


        :param has_attachments: The has_attachments of this StatementsViewModel.
        :type has_attachments: bool
        """

        self._has_attachments = has_attachments

    @property
    def has_linked_statements(self):
        """Gets the has_linked_statements of this StatementsViewModel.


        :return: The has_linked_statements of this StatementsViewModel.
        :rtype: bool
        """
        return self._has_linked_statements

    @has_linked_statements.setter
    def has_linked_statements(self, has_linked_statements):
        """Sets the has_linked_statements of this StatementsViewModel.


        :param has_linked_statements: The has_linked_statements of this StatementsViewModel.
        :type has_linked_statements: bool
        """

        self._has_linked_statements = has_linked_statements

    @property
    def house(self):
        """Gets the house of this StatementsViewModel.


        :return: The house of this StatementsViewModel.
        :rtype: HouseEnum
        """
        return self._house

    @house.setter
    def house(self, house):
        """Sets the house of this StatementsViewModel.


        :param house: The house of this StatementsViewModel.
        :type house: HouseEnum
        """

        self._house = house

    @property
    def id(self):
        """Gets the id of this StatementsViewModel.


        :return: The id of this StatementsViewModel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StatementsViewModel.


        :param id: The id of this StatementsViewModel.
        :type id: int
        """

        self._id = id

    @property
    def linked_statements(self):
        """Gets the linked_statements of this StatementsViewModel.


        :return: The linked_statements of this StatementsViewModel.
        :rtype: List[LinkedStatements]
        """
        return self._linked_statements

    @linked_statements.setter
    def linked_statements(self, linked_statements):
        """Sets the linked_statements of this StatementsViewModel.


        :param linked_statements: The linked_statements of this StatementsViewModel.
        :type linked_statements: List[LinkedStatements]
        """

        self._linked_statements = linked_statements

    @property
    def member(self):
        """Gets the member of this StatementsViewModel.


        :return: The member of this StatementsViewModel.
        :rtype: MemberViewModel
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this StatementsViewModel.


        :param member: The member of this StatementsViewModel.
        :type member: MemberViewModel
        """

        self._member = member

    @property
    def member_id(self):
        """Gets the member_id of this StatementsViewModel.


        :return: The member_id of this StatementsViewModel.
        :rtype: int
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this StatementsViewModel.


        :param member_id: The member_id of this StatementsViewModel.
        :type member_id: int
        """

        self._member_id = member_id

    @property
    def member_role(self):
        """Gets the member_role of this StatementsViewModel.


        :return: The member_role of this StatementsViewModel.
        :rtype: str
        """
        return self._member_role

    @member_role.setter
    def member_role(self, member_role):
        """Sets the member_role of this StatementsViewModel.


        :param member_role: The member_role of this StatementsViewModel.
        :type member_role: str
        """

        self._member_role = member_role

    @property
    def notice_number(self):
        """Gets the notice_number of this StatementsViewModel.


        :return: The notice_number of this StatementsViewModel.
        :rtype: int
        """
        return self._notice_number

    @notice_number.setter
    def notice_number(self, notice_number):
        """Sets the notice_number of this StatementsViewModel.


        :param notice_number: The notice_number of this StatementsViewModel.
        :type notice_number: int
        """

        self._notice_number = notice_number

    @property
    def text(self):
        """Gets the text of this StatementsViewModel.


        :return: The text of this StatementsViewModel.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this StatementsViewModel.


        :param text: The text of this StatementsViewModel.
        :type text: str
        """

        self._text = text

    @property
    def title(self):
        """Gets the title of this StatementsViewModel.


        :return: The title of this StatementsViewModel.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this StatementsViewModel.


        :param title: The title of this StatementsViewModel.
        :type title: str
        """

        self._title = title

    @property
    def uin(self):
        """Gets the uin of this StatementsViewModel.


        :return: The uin of this StatementsViewModel.
        :rtype: str
        """
        return self._uin

    @uin.setter
    def uin(self, uin):
        """Sets the uin of this StatementsViewModel.


        :param uin: The uin of this StatementsViewModel.
        :type uin: str
        """

        self._uin = uin
