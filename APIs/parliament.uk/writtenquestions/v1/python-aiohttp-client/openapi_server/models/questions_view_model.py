# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment_view_model import AttachmentViewModel
from openapi_server.models.grouped_question_view_model import GroupedQuestionViewModel
from openapi_server.models.house_enum import HouseEnum
from openapi_server.models.member_view_model import MemberViewModel
from openapi_server import util


class QuestionsViewModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answer_is_correction: bool=None, answer_is_holding: bool=None, answer_text: str=None, answering_body_id: int=None, answering_body_name: str=None, answering_member: MemberViewModel=None, answering_member_id: int=None, asking_member: MemberViewModel=None, asking_member_id: int=None, attachment_count: int=None, attachments: List[AttachmentViewModel]=None, comparable_answer_text: str=None, correcting_member: MemberViewModel=None, correcting_member_id: int=None, date_answer_corrected: datetime=None, date_answered: datetime=None, date_for_answer: datetime=None, date_holding_answer: datetime=None, date_tabled: datetime=None, grouped_questions: List[str]=None, grouped_questions_dates: List[GroupedQuestionViewModel]=None, heading: str=None, house: HouseEnum=None, id: int=None, is_named_day: bool=None, is_withdrawn: bool=None, member_has_interest: bool=None, original_answer_text: str=None, question_text: str=None, uin: str=None):
        """QuestionsViewModel - a model defined in OpenAPI

        :param answer_is_correction: The answer_is_correction of this QuestionsViewModel.
        :param answer_is_holding: The answer_is_holding of this QuestionsViewModel.
        :param answer_text: The answer_text of this QuestionsViewModel.
        :param answering_body_id: The answering_body_id of this QuestionsViewModel.
        :param answering_body_name: The answering_body_name of this QuestionsViewModel.
        :param answering_member: The answering_member of this QuestionsViewModel.
        :param answering_member_id: The answering_member_id of this QuestionsViewModel.
        :param asking_member: The asking_member of this QuestionsViewModel.
        :param asking_member_id: The asking_member_id of this QuestionsViewModel.
        :param attachment_count: The attachment_count of this QuestionsViewModel.
        :param attachments: The attachments of this QuestionsViewModel.
        :param comparable_answer_text: The comparable_answer_text of this QuestionsViewModel.
        :param correcting_member: The correcting_member of this QuestionsViewModel.
        :param correcting_member_id: The correcting_member_id of this QuestionsViewModel.
        :param date_answer_corrected: The date_answer_corrected of this QuestionsViewModel.
        :param date_answered: The date_answered of this QuestionsViewModel.
        :param date_for_answer: The date_for_answer of this QuestionsViewModel.
        :param date_holding_answer: The date_holding_answer of this QuestionsViewModel.
        :param date_tabled: The date_tabled of this QuestionsViewModel.
        :param grouped_questions: The grouped_questions of this QuestionsViewModel.
        :param grouped_questions_dates: The grouped_questions_dates of this QuestionsViewModel.
        :param heading: The heading of this QuestionsViewModel.
        :param house: The house of this QuestionsViewModel.
        :param id: The id of this QuestionsViewModel.
        :param is_named_day: The is_named_day of this QuestionsViewModel.
        :param is_withdrawn: The is_withdrawn of this QuestionsViewModel.
        :param member_has_interest: The member_has_interest of this QuestionsViewModel.
        :param original_answer_text: The original_answer_text of this QuestionsViewModel.
        :param question_text: The question_text of this QuestionsViewModel.
        :param uin: The uin of this QuestionsViewModel.
        """
        self.openapi_types = {
            'answer_is_correction': bool,
            'answer_is_holding': bool,
            'answer_text': str,
            'answering_body_id': int,
            'answering_body_name': str,
            'answering_member': MemberViewModel,
            'answering_member_id': int,
            'asking_member': MemberViewModel,
            'asking_member_id': int,
            'attachment_count': int,
            'attachments': List[AttachmentViewModel],
            'comparable_answer_text': str,
            'correcting_member': MemberViewModel,
            'correcting_member_id': int,
            'date_answer_corrected': datetime,
            'date_answered': datetime,
            'date_for_answer': datetime,
            'date_holding_answer': datetime,
            'date_tabled': datetime,
            'grouped_questions': List[str],
            'grouped_questions_dates': List[GroupedQuestionViewModel],
            'heading': str,
            'house': HouseEnum,
            'id': int,
            'is_named_day': bool,
            'is_withdrawn': bool,
            'member_has_interest': bool,
            'original_answer_text': str,
            'question_text': str,
            'uin': str
        }

        self.attribute_map = {
            'answer_is_correction': 'answerIsCorrection',
            'answer_is_holding': 'answerIsHolding',
            'answer_text': 'answerText',
            'answering_body_id': 'answeringBodyId',
            'answering_body_name': 'answeringBodyName',
            'answering_member': 'answeringMember',
            'answering_member_id': 'answeringMemberId',
            'asking_member': 'askingMember',
            'asking_member_id': 'askingMemberId',
            'attachment_count': 'attachmentCount',
            'attachments': 'attachments',
            'comparable_answer_text': 'comparableAnswerText',
            'correcting_member': 'correctingMember',
            'correcting_member_id': 'correctingMemberId',
            'date_answer_corrected': 'dateAnswerCorrected',
            'date_answered': 'dateAnswered',
            'date_for_answer': 'dateForAnswer',
            'date_holding_answer': 'dateHoldingAnswer',
            'date_tabled': 'dateTabled',
            'grouped_questions': 'groupedQuestions',
            'grouped_questions_dates': 'groupedQuestionsDates',
            'heading': 'heading',
            'house': 'house',
            'id': 'id',
            'is_named_day': 'isNamedDay',
            'is_withdrawn': 'isWithdrawn',
            'member_has_interest': 'memberHasInterest',
            'original_answer_text': 'originalAnswerText',
            'question_text': 'questionText',
            'uin': 'uin'
        }

        self._answer_is_correction = answer_is_correction
        self._answer_is_holding = answer_is_holding
        self._answer_text = answer_text
        self._answering_body_id = answering_body_id
        self._answering_body_name = answering_body_name
        self._answering_member = answering_member
        self._answering_member_id = answering_member_id
        self._asking_member = asking_member
        self._asking_member_id = asking_member_id
        self._attachment_count = attachment_count
        self._attachments = attachments
        self._comparable_answer_text = comparable_answer_text
        self._correcting_member = correcting_member
        self._correcting_member_id = correcting_member_id
        self._date_answer_corrected = date_answer_corrected
        self._date_answered = date_answered
        self._date_for_answer = date_for_answer
        self._date_holding_answer = date_holding_answer
        self._date_tabled = date_tabled
        self._grouped_questions = grouped_questions
        self._grouped_questions_dates = grouped_questions_dates
        self._heading = heading
        self._house = house
        self._id = id
        self._is_named_day = is_named_day
        self._is_withdrawn = is_withdrawn
        self._member_has_interest = member_has_interest
        self._original_answer_text = original_answer_text
        self._question_text = question_text
        self._uin = uin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuestionsViewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuestionsViewModel of this QuestionsViewModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answer_is_correction(self):
        """Gets the answer_is_correction of this QuestionsViewModel.


        :return: The answer_is_correction of this QuestionsViewModel.
        :rtype: bool
        """
        return self._answer_is_correction

    @answer_is_correction.setter
    def answer_is_correction(self, answer_is_correction):
        """Sets the answer_is_correction of this QuestionsViewModel.


        :param answer_is_correction: The answer_is_correction of this QuestionsViewModel.
        :type answer_is_correction: bool
        """

        self._answer_is_correction = answer_is_correction

    @property
    def answer_is_holding(self):
        """Gets the answer_is_holding of this QuestionsViewModel.


        :return: The answer_is_holding of this QuestionsViewModel.
        :rtype: bool
        """
        return self._answer_is_holding

    @answer_is_holding.setter
    def answer_is_holding(self, answer_is_holding):
        """Sets the answer_is_holding of this QuestionsViewModel.


        :param answer_is_holding: The answer_is_holding of this QuestionsViewModel.
        :type answer_is_holding: bool
        """

        self._answer_is_holding = answer_is_holding

    @property
    def answer_text(self):
        """Gets the answer_text of this QuestionsViewModel.


        :return: The answer_text of this QuestionsViewModel.
        :rtype: str
        """
        return self._answer_text

    @answer_text.setter
    def answer_text(self, answer_text):
        """Sets the answer_text of this QuestionsViewModel.


        :param answer_text: The answer_text of this QuestionsViewModel.
        :type answer_text: str
        """

        self._answer_text = answer_text

    @property
    def answering_body_id(self):
        """Gets the answering_body_id of this QuestionsViewModel.


        :return: The answering_body_id of this QuestionsViewModel.
        :rtype: int
        """
        return self._answering_body_id

    @answering_body_id.setter
    def answering_body_id(self, answering_body_id):
        """Sets the answering_body_id of this QuestionsViewModel.


        :param answering_body_id: The answering_body_id of this QuestionsViewModel.
        :type answering_body_id: int
        """

        self._answering_body_id = answering_body_id

    @property
    def answering_body_name(self):
        """Gets the answering_body_name of this QuestionsViewModel.


        :return: The answering_body_name of this QuestionsViewModel.
        :rtype: str
        """
        return self._answering_body_name

    @answering_body_name.setter
    def answering_body_name(self, answering_body_name):
        """Sets the answering_body_name of this QuestionsViewModel.


        :param answering_body_name: The answering_body_name of this QuestionsViewModel.
        :type answering_body_name: str
        """

        self._answering_body_name = answering_body_name

    @property
    def answering_member(self):
        """Gets the answering_member of this QuestionsViewModel.


        :return: The answering_member of this QuestionsViewModel.
        :rtype: MemberViewModel
        """
        return self._answering_member

    @answering_member.setter
    def answering_member(self, answering_member):
        """Sets the answering_member of this QuestionsViewModel.


        :param answering_member: The answering_member of this QuestionsViewModel.
        :type answering_member: MemberViewModel
        """

        self._answering_member = answering_member

    @property
    def answering_member_id(self):
        """Gets the answering_member_id of this QuestionsViewModel.


        :return: The answering_member_id of this QuestionsViewModel.
        :rtype: int
        """
        return self._answering_member_id

    @answering_member_id.setter
    def answering_member_id(self, answering_member_id):
        """Sets the answering_member_id of this QuestionsViewModel.


        :param answering_member_id: The answering_member_id of this QuestionsViewModel.
        :type answering_member_id: int
        """

        self._answering_member_id = answering_member_id

    @property
    def asking_member(self):
        """Gets the asking_member of this QuestionsViewModel.


        :return: The asking_member of this QuestionsViewModel.
        :rtype: MemberViewModel
        """
        return self._asking_member

    @asking_member.setter
    def asking_member(self, asking_member):
        """Sets the asking_member of this QuestionsViewModel.


        :param asking_member: The asking_member of this QuestionsViewModel.
        :type asking_member: MemberViewModel
        """

        self._asking_member = asking_member

    @property
    def asking_member_id(self):
        """Gets the asking_member_id of this QuestionsViewModel.


        :return: The asking_member_id of this QuestionsViewModel.
        :rtype: int
        """
        return self._asking_member_id

    @asking_member_id.setter
    def asking_member_id(self, asking_member_id):
        """Sets the asking_member_id of this QuestionsViewModel.


        :param asking_member_id: The asking_member_id of this QuestionsViewModel.
        :type asking_member_id: int
        """

        self._asking_member_id = asking_member_id

    @property
    def attachment_count(self):
        """Gets the attachment_count of this QuestionsViewModel.


        :return: The attachment_count of this QuestionsViewModel.
        :rtype: int
        """
        return self._attachment_count

    @attachment_count.setter
    def attachment_count(self, attachment_count):
        """Sets the attachment_count of this QuestionsViewModel.


        :param attachment_count: The attachment_count of this QuestionsViewModel.
        :type attachment_count: int
        """

        self._attachment_count = attachment_count

    @property
    def attachments(self):
        """Gets the attachments of this QuestionsViewModel.


        :return: The attachments of this QuestionsViewModel.
        :rtype: List[AttachmentViewModel]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this QuestionsViewModel.


        :param attachments: The attachments of this QuestionsViewModel.
        :type attachments: List[AttachmentViewModel]
        """

        self._attachments = attachments

    @property
    def comparable_answer_text(self):
        """Gets the comparable_answer_text of this QuestionsViewModel.


        :return: The comparable_answer_text of this QuestionsViewModel.
        :rtype: str
        """
        return self._comparable_answer_text

    @comparable_answer_text.setter
    def comparable_answer_text(self, comparable_answer_text):
        """Sets the comparable_answer_text of this QuestionsViewModel.


        :param comparable_answer_text: The comparable_answer_text of this QuestionsViewModel.
        :type comparable_answer_text: str
        """

        self._comparable_answer_text = comparable_answer_text

    @property
    def correcting_member(self):
        """Gets the correcting_member of this QuestionsViewModel.


        :return: The correcting_member of this QuestionsViewModel.
        :rtype: MemberViewModel
        """
        return self._correcting_member

    @correcting_member.setter
    def correcting_member(self, correcting_member):
        """Sets the correcting_member of this QuestionsViewModel.


        :param correcting_member: The correcting_member of this QuestionsViewModel.
        :type correcting_member: MemberViewModel
        """

        self._correcting_member = correcting_member

    @property
    def correcting_member_id(self):
        """Gets the correcting_member_id of this QuestionsViewModel.


        :return: The correcting_member_id of this QuestionsViewModel.
        :rtype: int
        """
        return self._correcting_member_id

    @correcting_member_id.setter
    def correcting_member_id(self, correcting_member_id):
        """Sets the correcting_member_id of this QuestionsViewModel.


        :param correcting_member_id: The correcting_member_id of this QuestionsViewModel.
        :type correcting_member_id: int
        """

        self._correcting_member_id = correcting_member_id

    @property
    def date_answer_corrected(self):
        """Gets the date_answer_corrected of this QuestionsViewModel.


        :return: The date_answer_corrected of this QuestionsViewModel.
        :rtype: datetime
        """
        return self._date_answer_corrected

    @date_answer_corrected.setter
    def date_answer_corrected(self, date_answer_corrected):
        """Sets the date_answer_corrected of this QuestionsViewModel.


        :param date_answer_corrected: The date_answer_corrected of this QuestionsViewModel.
        :type date_answer_corrected: datetime
        """

        self._date_answer_corrected = date_answer_corrected

    @property
    def date_answered(self):
        """Gets the date_answered of this QuestionsViewModel.


        :return: The date_answered of this QuestionsViewModel.
        :rtype: datetime
        """
        return self._date_answered

    @date_answered.setter
    def date_answered(self, date_answered):
        """Sets the date_answered of this QuestionsViewModel.


        :param date_answered: The date_answered of this QuestionsViewModel.
        :type date_answered: datetime
        """

        self._date_answered = date_answered

    @property
    def date_for_answer(self):
        """Gets the date_for_answer of this QuestionsViewModel.


        :return: The date_for_answer of this QuestionsViewModel.
        :rtype: datetime
        """
        return self._date_for_answer

    @date_for_answer.setter
    def date_for_answer(self, date_for_answer):
        """Sets the date_for_answer of this QuestionsViewModel.


        :param date_for_answer: The date_for_answer of this QuestionsViewModel.
        :type date_for_answer: datetime
        """

        self._date_for_answer = date_for_answer

    @property
    def date_holding_answer(self):
        """Gets the date_holding_answer of this QuestionsViewModel.


        :return: The date_holding_answer of this QuestionsViewModel.
        :rtype: datetime
        """
        return self._date_holding_answer

    @date_holding_answer.setter
    def date_holding_answer(self, date_holding_answer):
        """Sets the date_holding_answer of this QuestionsViewModel.


        :param date_holding_answer: The date_holding_answer of this QuestionsViewModel.
        :type date_holding_answer: datetime
        """

        self._date_holding_answer = date_holding_answer

    @property
    def date_tabled(self):
        """Gets the date_tabled of this QuestionsViewModel.


        :return: The date_tabled of this QuestionsViewModel.
        :rtype: datetime
        """
        return self._date_tabled

    @date_tabled.setter
    def date_tabled(self, date_tabled):
        """Sets the date_tabled of this QuestionsViewModel.


        :param date_tabled: The date_tabled of this QuestionsViewModel.
        :type date_tabled: datetime
        """

        self._date_tabled = date_tabled

    @property
    def grouped_questions(self):
        """Gets the grouped_questions of this QuestionsViewModel.


        :return: The grouped_questions of this QuestionsViewModel.
        :rtype: List[str]
        """
        return self._grouped_questions

    @grouped_questions.setter
    def grouped_questions(self, grouped_questions):
        """Sets the grouped_questions of this QuestionsViewModel.


        :param grouped_questions: The grouped_questions of this QuestionsViewModel.
        :type grouped_questions: List[str]
        """

        self._grouped_questions = grouped_questions

    @property
    def grouped_questions_dates(self):
        """Gets the grouped_questions_dates of this QuestionsViewModel.


        :return: The grouped_questions_dates of this QuestionsViewModel.
        :rtype: List[GroupedQuestionViewModel]
        """
        return self._grouped_questions_dates

    @grouped_questions_dates.setter
    def grouped_questions_dates(self, grouped_questions_dates):
        """Sets the grouped_questions_dates of this QuestionsViewModel.


        :param grouped_questions_dates: The grouped_questions_dates of this QuestionsViewModel.
        :type grouped_questions_dates: List[GroupedQuestionViewModel]
        """

        self._grouped_questions_dates = grouped_questions_dates

    @property
    def heading(self):
        """Gets the heading of this QuestionsViewModel.


        :return: The heading of this QuestionsViewModel.
        :rtype: str
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this QuestionsViewModel.


        :param heading: The heading of this QuestionsViewModel.
        :type heading: str
        """

        self._heading = heading

    @property
    def house(self):
        """Gets the house of this QuestionsViewModel.


        :return: The house of this QuestionsViewModel.
        :rtype: HouseEnum
        """
        return self._house

    @house.setter
    def house(self, house):
        """Sets the house of this QuestionsViewModel.


        :param house: The house of this QuestionsViewModel.
        :type house: HouseEnum
        """

        self._house = house

    @property
    def id(self):
        """Gets the id of this QuestionsViewModel.


        :return: The id of this QuestionsViewModel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuestionsViewModel.


        :param id: The id of this QuestionsViewModel.
        :type id: int
        """

        self._id = id

    @property
    def is_named_day(self):
        """Gets the is_named_day of this QuestionsViewModel.


        :return: The is_named_day of this QuestionsViewModel.
        :rtype: bool
        """
        return self._is_named_day

    @is_named_day.setter
    def is_named_day(self, is_named_day):
        """Sets the is_named_day of this QuestionsViewModel.


        :param is_named_day: The is_named_day of this QuestionsViewModel.
        :type is_named_day: bool
        """

        self._is_named_day = is_named_day

    @property
    def is_withdrawn(self):
        """Gets the is_withdrawn of this QuestionsViewModel.


        :return: The is_withdrawn of this QuestionsViewModel.
        :rtype: bool
        """
        return self._is_withdrawn

    @is_withdrawn.setter
    def is_withdrawn(self, is_withdrawn):
        """Sets the is_withdrawn of this QuestionsViewModel.


        :param is_withdrawn: The is_withdrawn of this QuestionsViewModel.
        :type is_withdrawn: bool
        """

        self._is_withdrawn = is_withdrawn

    @property
    def member_has_interest(self):
        """Gets the member_has_interest of this QuestionsViewModel.


        :return: The member_has_interest of this QuestionsViewModel.
        :rtype: bool
        """
        return self._member_has_interest

    @member_has_interest.setter
    def member_has_interest(self, member_has_interest):
        """Sets the member_has_interest of this QuestionsViewModel.


        :param member_has_interest: The member_has_interest of this QuestionsViewModel.
        :type member_has_interest: bool
        """

        self._member_has_interest = member_has_interest

    @property
    def original_answer_text(self):
        """Gets the original_answer_text of this QuestionsViewModel.


        :return: The original_answer_text of this QuestionsViewModel.
        :rtype: str
        """
        return self._original_answer_text

    @original_answer_text.setter
    def original_answer_text(self, original_answer_text):
        """Sets the original_answer_text of this QuestionsViewModel.


        :param original_answer_text: The original_answer_text of this QuestionsViewModel.
        :type original_answer_text: str
        """

        self._original_answer_text = original_answer_text

    @property
    def question_text(self):
        """Gets the question_text of this QuestionsViewModel.


        :return: The question_text of this QuestionsViewModel.
        :rtype: str
        """
        return self._question_text

    @question_text.setter
    def question_text(self, question_text):
        """Sets the question_text of this QuestionsViewModel.


        :param question_text: The question_text of this QuestionsViewModel.
        :type question_text: str
        """

        self._question_text = question_text

    @property
    def uin(self):
        """Gets the uin of this QuestionsViewModel.


        :return: The uin of this QuestionsViewModel.
        :rtype: str
        """
        return self._uin

    @uin.setter
    def uin(self, uin):
        """Sets the uin of this QuestionsViewModel.


        :param uin: The uin of this QuestionsViewModel.
        :type uin: str
        """

        self._uin = uin
