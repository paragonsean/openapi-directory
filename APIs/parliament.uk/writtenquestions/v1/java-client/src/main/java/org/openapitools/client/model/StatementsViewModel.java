/*
 * Written Questions Service API
 * Data around written questions and answers, as well as written ministerial statements.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttachmentViewModel;
import org.openapitools.client.model.HouseEnum;
import org.openapitools.client.model.LinkedStatements;
import org.openapitools.client.model.MemberViewModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StatementsViewModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:25.803818-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StatementsViewModel {
  public static final String SERIALIZED_NAME_ANSWERING_BODY_ID = "answeringBodyId";
  @SerializedName(SERIALIZED_NAME_ANSWERING_BODY_ID)
  private Integer answeringBodyId;

  public static final String SERIALIZED_NAME_ANSWERING_BODY_NAME = "answeringBodyName";
  @SerializedName(SERIALIZED_NAME_ANSWERING_BODY_NAME)
  private String answeringBodyName;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<AttachmentViewModel> attachments;

  public static final String SERIALIZED_NAME_DATE_MADE = "dateMade";
  @SerializedName(SERIALIZED_NAME_DATE_MADE)
  private OffsetDateTime dateMade;

  public static final String SERIALIZED_NAME_HAS_ATTACHMENTS = "hasAttachments";
  @SerializedName(SERIALIZED_NAME_HAS_ATTACHMENTS)
  private Boolean hasAttachments;

  public static final String SERIALIZED_NAME_HAS_LINKED_STATEMENTS = "hasLinkedStatements";
  @SerializedName(SERIALIZED_NAME_HAS_LINKED_STATEMENTS)
  private Boolean hasLinkedStatements;

  public static final String SERIALIZED_NAME_HOUSE = "house";
  @SerializedName(SERIALIZED_NAME_HOUSE)
  private HouseEnum house;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LINKED_STATEMENTS = "linkedStatements";
  @SerializedName(SERIALIZED_NAME_LINKED_STATEMENTS)
  private List<LinkedStatements> linkedStatements;

  public static final String SERIALIZED_NAME_MEMBER = "member";
  @SerializedName(SERIALIZED_NAME_MEMBER)
  private MemberViewModel member;

  public static final String SERIALIZED_NAME_MEMBER_ID = "memberId";
  @SerializedName(SERIALIZED_NAME_MEMBER_ID)
  private Integer memberId;

  public static final String SERIALIZED_NAME_MEMBER_ROLE = "memberRole";
  @SerializedName(SERIALIZED_NAME_MEMBER_ROLE)
  private String memberRole;

  public static final String SERIALIZED_NAME_NOTICE_NUMBER = "noticeNumber";
  @SerializedName(SERIALIZED_NAME_NOTICE_NUMBER)
  private Integer noticeNumber;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UIN = "uin";
  @SerializedName(SERIALIZED_NAME_UIN)
  private String uin;

  public StatementsViewModel() {
  }

  public StatementsViewModel answeringBodyId(Integer answeringBodyId) {
    this.answeringBodyId = answeringBodyId;
    return this;
  }

  /**
   * Get answeringBodyId
   * @return answeringBodyId
   */
  @javax.annotation.Nullable
  public Integer getAnsweringBodyId() {
    return answeringBodyId;
  }

  public void setAnsweringBodyId(Integer answeringBodyId) {
    this.answeringBodyId = answeringBodyId;
  }


  public StatementsViewModel answeringBodyName(String answeringBodyName) {
    this.answeringBodyName = answeringBodyName;
    return this;
  }

  /**
   * Get answeringBodyName
   * @return answeringBodyName
   */
  @javax.annotation.Nullable
  public String getAnsweringBodyName() {
    return answeringBodyName;
  }

  public void setAnsweringBodyName(String answeringBodyName) {
    this.answeringBodyName = answeringBodyName;
  }


  public StatementsViewModel attachments(List<AttachmentViewModel> attachments) {
    this.attachments = attachments;
    return this;
  }

  public StatementsViewModel addAttachmentsItem(AttachmentViewModel attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<AttachmentViewModel> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<AttachmentViewModel> attachments) {
    this.attachments = attachments;
  }


  public StatementsViewModel dateMade(OffsetDateTime dateMade) {
    this.dateMade = dateMade;
    return this;
  }

  /**
   * Get dateMade
   * @return dateMade
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateMade() {
    return dateMade;
  }

  public void setDateMade(OffsetDateTime dateMade) {
    this.dateMade = dateMade;
  }


  public StatementsViewModel hasAttachments(Boolean hasAttachments) {
    this.hasAttachments = hasAttachments;
    return this;
  }

  /**
   * Get hasAttachments
   * @return hasAttachments
   */
  @javax.annotation.Nullable
  public Boolean getHasAttachments() {
    return hasAttachments;
  }

  public void setHasAttachments(Boolean hasAttachments) {
    this.hasAttachments = hasAttachments;
  }


  public StatementsViewModel hasLinkedStatements(Boolean hasLinkedStatements) {
    this.hasLinkedStatements = hasLinkedStatements;
    return this;
  }

  /**
   * Get hasLinkedStatements
   * @return hasLinkedStatements
   */
  @javax.annotation.Nullable
  public Boolean getHasLinkedStatements() {
    return hasLinkedStatements;
  }

  public void setHasLinkedStatements(Boolean hasLinkedStatements) {
    this.hasLinkedStatements = hasLinkedStatements;
  }


  public StatementsViewModel house(HouseEnum house) {
    this.house = house;
    return this;
  }

  /**
   * Get house
   * @return house
   */
  @javax.annotation.Nullable
  public HouseEnum getHouse() {
    return house;
  }

  public void setHouse(HouseEnum house) {
    this.house = house;
  }


  public StatementsViewModel id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public StatementsViewModel linkedStatements(List<LinkedStatements> linkedStatements) {
    this.linkedStatements = linkedStatements;
    return this;
  }

  public StatementsViewModel addLinkedStatementsItem(LinkedStatements linkedStatementsItem) {
    if (this.linkedStatements == null) {
      this.linkedStatements = new ArrayList<>();
    }
    this.linkedStatements.add(linkedStatementsItem);
    return this;
  }

  /**
   * Get linkedStatements
   * @return linkedStatements
   */
  @javax.annotation.Nullable
  public List<LinkedStatements> getLinkedStatements() {
    return linkedStatements;
  }

  public void setLinkedStatements(List<LinkedStatements> linkedStatements) {
    this.linkedStatements = linkedStatements;
  }


  public StatementsViewModel member(MemberViewModel member) {
    this.member = member;
    return this;
  }

  /**
   * Get member
   * @return member
   */
  @javax.annotation.Nullable
  public MemberViewModel getMember() {
    return member;
  }

  public void setMember(MemberViewModel member) {
    this.member = member;
  }


  public StatementsViewModel memberId(Integer memberId) {
    this.memberId = memberId;
    return this;
  }

  /**
   * Get memberId
   * @return memberId
   */
  @javax.annotation.Nullable
  public Integer getMemberId() {
    return memberId;
  }

  public void setMemberId(Integer memberId) {
    this.memberId = memberId;
  }


  public StatementsViewModel memberRole(String memberRole) {
    this.memberRole = memberRole;
    return this;
  }

  /**
   * Get memberRole
   * @return memberRole
   */
  @javax.annotation.Nullable
  public String getMemberRole() {
    return memberRole;
  }

  public void setMemberRole(String memberRole) {
    this.memberRole = memberRole;
  }


  public StatementsViewModel noticeNumber(Integer noticeNumber) {
    this.noticeNumber = noticeNumber;
    return this;
  }

  /**
   * Get noticeNumber
   * @return noticeNumber
   */
  @javax.annotation.Nullable
  public Integer getNoticeNumber() {
    return noticeNumber;
  }

  public void setNoticeNumber(Integer noticeNumber) {
    this.noticeNumber = noticeNumber;
  }


  public StatementsViewModel text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public StatementsViewModel title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public StatementsViewModel uin(String uin) {
    this.uin = uin;
    return this;
  }

  /**
   * Get uin
   * @return uin
   */
  @javax.annotation.Nullable
  public String getUin() {
    return uin;
  }

  public void setUin(String uin) {
    this.uin = uin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatementsViewModel statementsViewModel = (StatementsViewModel) o;
    return Objects.equals(this.answeringBodyId, statementsViewModel.answeringBodyId) &&
        Objects.equals(this.answeringBodyName, statementsViewModel.answeringBodyName) &&
        Objects.equals(this.attachments, statementsViewModel.attachments) &&
        Objects.equals(this.dateMade, statementsViewModel.dateMade) &&
        Objects.equals(this.hasAttachments, statementsViewModel.hasAttachments) &&
        Objects.equals(this.hasLinkedStatements, statementsViewModel.hasLinkedStatements) &&
        Objects.equals(this.house, statementsViewModel.house) &&
        Objects.equals(this.id, statementsViewModel.id) &&
        Objects.equals(this.linkedStatements, statementsViewModel.linkedStatements) &&
        Objects.equals(this.member, statementsViewModel.member) &&
        Objects.equals(this.memberId, statementsViewModel.memberId) &&
        Objects.equals(this.memberRole, statementsViewModel.memberRole) &&
        Objects.equals(this.noticeNumber, statementsViewModel.noticeNumber) &&
        Objects.equals(this.text, statementsViewModel.text) &&
        Objects.equals(this.title, statementsViewModel.title) &&
        Objects.equals(this.uin, statementsViewModel.uin);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(answeringBodyId, answeringBodyName, attachments, dateMade, hasAttachments, hasLinkedStatements, house, id, linkedStatements, member, memberId, memberRole, noticeNumber, text, title, uin);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatementsViewModel {\n");
    sb.append("    answeringBodyId: ").append(toIndentedString(answeringBodyId)).append("\n");
    sb.append("    answeringBodyName: ").append(toIndentedString(answeringBodyName)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    dateMade: ").append(toIndentedString(dateMade)).append("\n");
    sb.append("    hasAttachments: ").append(toIndentedString(hasAttachments)).append("\n");
    sb.append("    hasLinkedStatements: ").append(toIndentedString(hasLinkedStatements)).append("\n");
    sb.append("    house: ").append(toIndentedString(house)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    linkedStatements: ").append(toIndentedString(linkedStatements)).append("\n");
    sb.append("    member: ").append(toIndentedString(member)).append("\n");
    sb.append("    memberId: ").append(toIndentedString(memberId)).append("\n");
    sb.append("    memberRole: ").append(toIndentedString(memberRole)).append("\n");
    sb.append("    noticeNumber: ").append(toIndentedString(noticeNumber)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    uin: ").append(toIndentedString(uin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answeringBodyId");
    openapiFields.add("answeringBodyName");
    openapiFields.add("attachments");
    openapiFields.add("dateMade");
    openapiFields.add("hasAttachments");
    openapiFields.add("hasLinkedStatements");
    openapiFields.add("house");
    openapiFields.add("id");
    openapiFields.add("linkedStatements");
    openapiFields.add("member");
    openapiFields.add("memberId");
    openapiFields.add("memberRole");
    openapiFields.add("noticeNumber");
    openapiFields.add("text");
    openapiFields.add("title");
    openapiFields.add("uin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StatementsViewModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StatementsViewModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatementsViewModel is not found in the empty JSON string", StatementsViewModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StatementsViewModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatementsViewModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("answeringBodyName") != null && !jsonObj.get("answeringBodyName").isJsonNull()) && !jsonObj.get("answeringBodyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answeringBodyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answeringBodyName").toString()));
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            AttachmentViewModel.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      // validate the optional field `house`
      if (jsonObj.get("house") != null && !jsonObj.get("house").isJsonNull()) {
        HouseEnum.validateJsonElement(jsonObj.get("house"));
      }
      if (jsonObj.get("linkedStatements") != null && !jsonObj.get("linkedStatements").isJsonNull()) {
        JsonArray jsonArraylinkedStatements = jsonObj.getAsJsonArray("linkedStatements");
        if (jsonArraylinkedStatements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("linkedStatements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `linkedStatements` to be an array in the JSON string but got `%s`", jsonObj.get("linkedStatements").toString()));
          }

          // validate the optional field `linkedStatements` (array)
          for (int i = 0; i < jsonArraylinkedStatements.size(); i++) {
            LinkedStatements.validateJsonElement(jsonArraylinkedStatements.get(i));
          };
        }
      }
      // validate the optional field `member`
      if (jsonObj.get("member") != null && !jsonObj.get("member").isJsonNull()) {
        MemberViewModel.validateJsonElement(jsonObj.get("member"));
      }
      if ((jsonObj.get("memberRole") != null && !jsonObj.get("memberRole").isJsonNull()) && !jsonObj.get("memberRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memberRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memberRole").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("uin") != null && !jsonObj.get("uin").isJsonNull()) && !jsonObj.get("uin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uin").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatementsViewModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatementsViewModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatementsViewModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatementsViewModel.class));

       return (TypeAdapter<T>) new TypeAdapter<StatementsViewModel>() {
           @Override
           public void write(JsonWriter out, StatementsViewModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatementsViewModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StatementsViewModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StatementsViewModel
   * @throws IOException if the JSON string is invalid with respect to StatementsViewModel
   */
  public static StatementsViewModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatementsViewModel.class);
  }

  /**
   * Convert an instance of StatementsViewModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

