/*
 * Written Questions Service API
 * Data around written questions and answers, as well as written ministerial statements.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttachmentViewModel;
import org.openapitools.client.model.GroupedQuestionViewModel;
import org.openapitools.client.model.HouseEnum;
import org.openapitools.client.model.MemberViewModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QuestionsViewModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:25.803818-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuestionsViewModel {
  public static final String SERIALIZED_NAME_ANSWER_IS_CORRECTION = "answerIsCorrection";
  @SerializedName(SERIALIZED_NAME_ANSWER_IS_CORRECTION)
  private Boolean answerIsCorrection;

  public static final String SERIALIZED_NAME_ANSWER_IS_HOLDING = "answerIsHolding";
  @SerializedName(SERIALIZED_NAME_ANSWER_IS_HOLDING)
  private Boolean answerIsHolding;

  public static final String SERIALIZED_NAME_ANSWER_TEXT = "answerText";
  @SerializedName(SERIALIZED_NAME_ANSWER_TEXT)
  private String answerText;

  public static final String SERIALIZED_NAME_ANSWERING_BODY_ID = "answeringBodyId";
  @SerializedName(SERIALIZED_NAME_ANSWERING_BODY_ID)
  private Integer answeringBodyId;

  public static final String SERIALIZED_NAME_ANSWERING_BODY_NAME = "answeringBodyName";
  @SerializedName(SERIALIZED_NAME_ANSWERING_BODY_NAME)
  private String answeringBodyName;

  public static final String SERIALIZED_NAME_ANSWERING_MEMBER = "answeringMember";
  @SerializedName(SERIALIZED_NAME_ANSWERING_MEMBER)
  private MemberViewModel answeringMember;

  public static final String SERIALIZED_NAME_ANSWERING_MEMBER_ID = "answeringMemberId";
  @SerializedName(SERIALIZED_NAME_ANSWERING_MEMBER_ID)
  private Integer answeringMemberId;

  public static final String SERIALIZED_NAME_ASKING_MEMBER = "askingMember";
  @SerializedName(SERIALIZED_NAME_ASKING_MEMBER)
  private MemberViewModel askingMember;

  public static final String SERIALIZED_NAME_ASKING_MEMBER_ID = "askingMemberId";
  @SerializedName(SERIALIZED_NAME_ASKING_MEMBER_ID)
  private Integer askingMemberId;

  public static final String SERIALIZED_NAME_ATTACHMENT_COUNT = "attachmentCount";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_COUNT)
  private Integer attachmentCount;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<AttachmentViewModel> attachments;

  public static final String SERIALIZED_NAME_COMPARABLE_ANSWER_TEXT = "comparableAnswerText";
  @SerializedName(SERIALIZED_NAME_COMPARABLE_ANSWER_TEXT)
  private String comparableAnswerText;

  public static final String SERIALIZED_NAME_CORRECTING_MEMBER = "correctingMember";
  @SerializedName(SERIALIZED_NAME_CORRECTING_MEMBER)
  private MemberViewModel correctingMember;

  public static final String SERIALIZED_NAME_CORRECTING_MEMBER_ID = "correctingMemberId";
  @SerializedName(SERIALIZED_NAME_CORRECTING_MEMBER_ID)
  private Integer correctingMemberId;

  public static final String SERIALIZED_NAME_DATE_ANSWER_CORRECTED = "dateAnswerCorrected";
  @SerializedName(SERIALIZED_NAME_DATE_ANSWER_CORRECTED)
  private OffsetDateTime dateAnswerCorrected;

  public static final String SERIALIZED_NAME_DATE_ANSWERED = "dateAnswered";
  @SerializedName(SERIALIZED_NAME_DATE_ANSWERED)
  private OffsetDateTime dateAnswered;

  public static final String SERIALIZED_NAME_DATE_FOR_ANSWER = "dateForAnswer";
  @SerializedName(SERIALIZED_NAME_DATE_FOR_ANSWER)
  private OffsetDateTime dateForAnswer;

  public static final String SERIALIZED_NAME_DATE_HOLDING_ANSWER = "dateHoldingAnswer";
  @SerializedName(SERIALIZED_NAME_DATE_HOLDING_ANSWER)
  private OffsetDateTime dateHoldingAnswer;

  public static final String SERIALIZED_NAME_DATE_TABLED = "dateTabled";
  @SerializedName(SERIALIZED_NAME_DATE_TABLED)
  private OffsetDateTime dateTabled;

  public static final String SERIALIZED_NAME_GROUPED_QUESTIONS = "groupedQuestions";
  @SerializedName(SERIALIZED_NAME_GROUPED_QUESTIONS)
  private List<String> groupedQuestions;

  public static final String SERIALIZED_NAME_GROUPED_QUESTIONS_DATES = "groupedQuestionsDates";
  @SerializedName(SERIALIZED_NAME_GROUPED_QUESTIONS_DATES)
  private List<GroupedQuestionViewModel> groupedQuestionsDates;

  public static final String SERIALIZED_NAME_HEADING = "heading";
  @SerializedName(SERIALIZED_NAME_HEADING)
  private String heading;

  public static final String SERIALIZED_NAME_HOUSE = "house";
  @SerializedName(SERIALIZED_NAME_HOUSE)
  private HouseEnum house;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_NAMED_DAY = "isNamedDay";
  @SerializedName(SERIALIZED_NAME_IS_NAMED_DAY)
  private Boolean isNamedDay;

  public static final String SERIALIZED_NAME_IS_WITHDRAWN = "isWithdrawn";
  @SerializedName(SERIALIZED_NAME_IS_WITHDRAWN)
  private Boolean isWithdrawn;

  public static final String SERIALIZED_NAME_MEMBER_HAS_INTEREST = "memberHasInterest";
  @SerializedName(SERIALIZED_NAME_MEMBER_HAS_INTEREST)
  private Boolean memberHasInterest;

  public static final String SERIALIZED_NAME_ORIGINAL_ANSWER_TEXT = "originalAnswerText";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_ANSWER_TEXT)
  private String originalAnswerText;

  public static final String SERIALIZED_NAME_QUESTION_TEXT = "questionText";
  @SerializedName(SERIALIZED_NAME_QUESTION_TEXT)
  private String questionText;

  public static final String SERIALIZED_NAME_UIN = "uin";
  @SerializedName(SERIALIZED_NAME_UIN)
  private String uin;

  public QuestionsViewModel() {
  }

  public QuestionsViewModel answerIsCorrection(Boolean answerIsCorrection) {
    this.answerIsCorrection = answerIsCorrection;
    return this;
  }

  /**
   * Get answerIsCorrection
   * @return answerIsCorrection
   */
  @javax.annotation.Nullable
  public Boolean getAnswerIsCorrection() {
    return answerIsCorrection;
  }

  public void setAnswerIsCorrection(Boolean answerIsCorrection) {
    this.answerIsCorrection = answerIsCorrection;
  }


  public QuestionsViewModel answerIsHolding(Boolean answerIsHolding) {
    this.answerIsHolding = answerIsHolding;
    return this;
  }

  /**
   * Get answerIsHolding
   * @return answerIsHolding
   */
  @javax.annotation.Nullable
  public Boolean getAnswerIsHolding() {
    return answerIsHolding;
  }

  public void setAnswerIsHolding(Boolean answerIsHolding) {
    this.answerIsHolding = answerIsHolding;
  }


  public QuestionsViewModel answerText(String answerText) {
    this.answerText = answerText;
    return this;
  }

  /**
   * Get answerText
   * @return answerText
   */
  @javax.annotation.Nullable
  public String getAnswerText() {
    return answerText;
  }

  public void setAnswerText(String answerText) {
    this.answerText = answerText;
  }


  public QuestionsViewModel answeringBodyId(Integer answeringBodyId) {
    this.answeringBodyId = answeringBodyId;
    return this;
  }

  /**
   * Get answeringBodyId
   * @return answeringBodyId
   */
  @javax.annotation.Nullable
  public Integer getAnsweringBodyId() {
    return answeringBodyId;
  }

  public void setAnsweringBodyId(Integer answeringBodyId) {
    this.answeringBodyId = answeringBodyId;
  }


  public QuestionsViewModel answeringBodyName(String answeringBodyName) {
    this.answeringBodyName = answeringBodyName;
    return this;
  }

  /**
   * Get answeringBodyName
   * @return answeringBodyName
   */
  @javax.annotation.Nullable
  public String getAnsweringBodyName() {
    return answeringBodyName;
  }

  public void setAnsweringBodyName(String answeringBodyName) {
    this.answeringBodyName = answeringBodyName;
  }


  public QuestionsViewModel answeringMember(MemberViewModel answeringMember) {
    this.answeringMember = answeringMember;
    return this;
  }

  /**
   * Get answeringMember
   * @return answeringMember
   */
  @javax.annotation.Nullable
  public MemberViewModel getAnsweringMember() {
    return answeringMember;
  }

  public void setAnsweringMember(MemberViewModel answeringMember) {
    this.answeringMember = answeringMember;
  }


  public QuestionsViewModel answeringMemberId(Integer answeringMemberId) {
    this.answeringMemberId = answeringMemberId;
    return this;
  }

  /**
   * Get answeringMemberId
   * @return answeringMemberId
   */
  @javax.annotation.Nullable
  public Integer getAnsweringMemberId() {
    return answeringMemberId;
  }

  public void setAnsweringMemberId(Integer answeringMemberId) {
    this.answeringMemberId = answeringMemberId;
  }


  public QuestionsViewModel askingMember(MemberViewModel askingMember) {
    this.askingMember = askingMember;
    return this;
  }

  /**
   * Get askingMember
   * @return askingMember
   */
  @javax.annotation.Nullable
  public MemberViewModel getAskingMember() {
    return askingMember;
  }

  public void setAskingMember(MemberViewModel askingMember) {
    this.askingMember = askingMember;
  }


  public QuestionsViewModel askingMemberId(Integer askingMemberId) {
    this.askingMemberId = askingMemberId;
    return this;
  }

  /**
   * Get askingMemberId
   * @return askingMemberId
   */
  @javax.annotation.Nullable
  public Integer getAskingMemberId() {
    return askingMemberId;
  }

  public void setAskingMemberId(Integer askingMemberId) {
    this.askingMemberId = askingMemberId;
  }


  public QuestionsViewModel attachmentCount(Integer attachmentCount) {
    this.attachmentCount = attachmentCount;
    return this;
  }

  /**
   * Get attachmentCount
   * @return attachmentCount
   */
  @javax.annotation.Nullable
  public Integer getAttachmentCount() {
    return attachmentCount;
  }

  public void setAttachmentCount(Integer attachmentCount) {
    this.attachmentCount = attachmentCount;
  }


  public QuestionsViewModel attachments(List<AttachmentViewModel> attachments) {
    this.attachments = attachments;
    return this;
  }

  public QuestionsViewModel addAttachmentsItem(AttachmentViewModel attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<AttachmentViewModel> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<AttachmentViewModel> attachments) {
    this.attachments = attachments;
  }


  public QuestionsViewModel comparableAnswerText(String comparableAnswerText) {
    this.comparableAnswerText = comparableAnswerText;
    return this;
  }

  /**
   * Get comparableAnswerText
   * @return comparableAnswerText
   */
  @javax.annotation.Nullable
  public String getComparableAnswerText() {
    return comparableAnswerText;
  }

  public void setComparableAnswerText(String comparableAnswerText) {
    this.comparableAnswerText = comparableAnswerText;
  }


  public QuestionsViewModel correctingMember(MemberViewModel correctingMember) {
    this.correctingMember = correctingMember;
    return this;
  }

  /**
   * Get correctingMember
   * @return correctingMember
   */
  @javax.annotation.Nullable
  public MemberViewModel getCorrectingMember() {
    return correctingMember;
  }

  public void setCorrectingMember(MemberViewModel correctingMember) {
    this.correctingMember = correctingMember;
  }


  public QuestionsViewModel correctingMemberId(Integer correctingMemberId) {
    this.correctingMemberId = correctingMemberId;
    return this;
  }

  /**
   * Get correctingMemberId
   * @return correctingMemberId
   */
  @javax.annotation.Nullable
  public Integer getCorrectingMemberId() {
    return correctingMemberId;
  }

  public void setCorrectingMemberId(Integer correctingMemberId) {
    this.correctingMemberId = correctingMemberId;
  }


  public QuestionsViewModel dateAnswerCorrected(OffsetDateTime dateAnswerCorrected) {
    this.dateAnswerCorrected = dateAnswerCorrected;
    return this;
  }

  /**
   * Get dateAnswerCorrected
   * @return dateAnswerCorrected
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateAnswerCorrected() {
    return dateAnswerCorrected;
  }

  public void setDateAnswerCorrected(OffsetDateTime dateAnswerCorrected) {
    this.dateAnswerCorrected = dateAnswerCorrected;
  }


  public QuestionsViewModel dateAnswered(OffsetDateTime dateAnswered) {
    this.dateAnswered = dateAnswered;
    return this;
  }

  /**
   * Get dateAnswered
   * @return dateAnswered
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateAnswered() {
    return dateAnswered;
  }

  public void setDateAnswered(OffsetDateTime dateAnswered) {
    this.dateAnswered = dateAnswered;
  }


  public QuestionsViewModel dateForAnswer(OffsetDateTime dateForAnswer) {
    this.dateForAnswer = dateForAnswer;
    return this;
  }

  /**
   * Get dateForAnswer
   * @return dateForAnswer
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateForAnswer() {
    return dateForAnswer;
  }

  public void setDateForAnswer(OffsetDateTime dateForAnswer) {
    this.dateForAnswer = dateForAnswer;
  }


  public QuestionsViewModel dateHoldingAnswer(OffsetDateTime dateHoldingAnswer) {
    this.dateHoldingAnswer = dateHoldingAnswer;
    return this;
  }

  /**
   * Get dateHoldingAnswer
   * @return dateHoldingAnswer
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateHoldingAnswer() {
    return dateHoldingAnswer;
  }

  public void setDateHoldingAnswer(OffsetDateTime dateHoldingAnswer) {
    this.dateHoldingAnswer = dateHoldingAnswer;
  }


  public QuestionsViewModel dateTabled(OffsetDateTime dateTabled) {
    this.dateTabled = dateTabled;
    return this;
  }

  /**
   * Get dateTabled
   * @return dateTabled
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateTabled() {
    return dateTabled;
  }

  public void setDateTabled(OffsetDateTime dateTabled) {
    this.dateTabled = dateTabled;
  }


  public QuestionsViewModel groupedQuestions(List<String> groupedQuestions) {
    this.groupedQuestions = groupedQuestions;
    return this;
  }

  public QuestionsViewModel addGroupedQuestionsItem(String groupedQuestionsItem) {
    if (this.groupedQuestions == null) {
      this.groupedQuestions = new ArrayList<>();
    }
    this.groupedQuestions.add(groupedQuestionsItem);
    return this;
  }

  /**
   * Get groupedQuestions
   * @return groupedQuestions
   */
  @javax.annotation.Nullable
  public List<String> getGroupedQuestions() {
    return groupedQuestions;
  }

  public void setGroupedQuestions(List<String> groupedQuestions) {
    this.groupedQuestions = groupedQuestions;
  }


  public QuestionsViewModel groupedQuestionsDates(List<GroupedQuestionViewModel> groupedQuestionsDates) {
    this.groupedQuestionsDates = groupedQuestionsDates;
    return this;
  }

  public QuestionsViewModel addGroupedQuestionsDatesItem(GroupedQuestionViewModel groupedQuestionsDatesItem) {
    if (this.groupedQuestionsDates == null) {
      this.groupedQuestionsDates = new ArrayList<>();
    }
    this.groupedQuestionsDates.add(groupedQuestionsDatesItem);
    return this;
  }

  /**
   * Get groupedQuestionsDates
   * @return groupedQuestionsDates
   */
  @javax.annotation.Nullable
  public List<GroupedQuestionViewModel> getGroupedQuestionsDates() {
    return groupedQuestionsDates;
  }

  public void setGroupedQuestionsDates(List<GroupedQuestionViewModel> groupedQuestionsDates) {
    this.groupedQuestionsDates = groupedQuestionsDates;
  }


  public QuestionsViewModel heading(String heading) {
    this.heading = heading;
    return this;
  }

  /**
   * Get heading
   * @return heading
   */
  @javax.annotation.Nullable
  public String getHeading() {
    return heading;
  }

  public void setHeading(String heading) {
    this.heading = heading;
  }


  public QuestionsViewModel house(HouseEnum house) {
    this.house = house;
    return this;
  }

  /**
   * Get house
   * @return house
   */
  @javax.annotation.Nullable
  public HouseEnum getHouse() {
    return house;
  }

  public void setHouse(HouseEnum house) {
    this.house = house;
  }


  public QuestionsViewModel id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public QuestionsViewModel isNamedDay(Boolean isNamedDay) {
    this.isNamedDay = isNamedDay;
    return this;
  }

  /**
   * Get isNamedDay
   * @return isNamedDay
   */
  @javax.annotation.Nullable
  public Boolean getIsNamedDay() {
    return isNamedDay;
  }

  public void setIsNamedDay(Boolean isNamedDay) {
    this.isNamedDay = isNamedDay;
  }


  public QuestionsViewModel isWithdrawn(Boolean isWithdrawn) {
    this.isWithdrawn = isWithdrawn;
    return this;
  }

  /**
   * Get isWithdrawn
   * @return isWithdrawn
   */
  @javax.annotation.Nullable
  public Boolean getIsWithdrawn() {
    return isWithdrawn;
  }

  public void setIsWithdrawn(Boolean isWithdrawn) {
    this.isWithdrawn = isWithdrawn;
  }


  public QuestionsViewModel memberHasInterest(Boolean memberHasInterest) {
    this.memberHasInterest = memberHasInterest;
    return this;
  }

  /**
   * Get memberHasInterest
   * @return memberHasInterest
   */
  @javax.annotation.Nullable
  public Boolean getMemberHasInterest() {
    return memberHasInterest;
  }

  public void setMemberHasInterest(Boolean memberHasInterest) {
    this.memberHasInterest = memberHasInterest;
  }


  public QuestionsViewModel originalAnswerText(String originalAnswerText) {
    this.originalAnswerText = originalAnswerText;
    return this;
  }

  /**
   * Get originalAnswerText
   * @return originalAnswerText
   */
  @javax.annotation.Nullable
  public String getOriginalAnswerText() {
    return originalAnswerText;
  }

  public void setOriginalAnswerText(String originalAnswerText) {
    this.originalAnswerText = originalAnswerText;
  }


  public QuestionsViewModel questionText(String questionText) {
    this.questionText = questionText;
    return this;
  }

  /**
   * Get questionText
   * @return questionText
   */
  @javax.annotation.Nullable
  public String getQuestionText() {
    return questionText;
  }

  public void setQuestionText(String questionText) {
    this.questionText = questionText;
  }


  public QuestionsViewModel uin(String uin) {
    this.uin = uin;
    return this;
  }

  /**
   * Get uin
   * @return uin
   */
  @javax.annotation.Nullable
  public String getUin() {
    return uin;
  }

  public void setUin(String uin) {
    this.uin = uin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuestionsViewModel questionsViewModel = (QuestionsViewModel) o;
    return Objects.equals(this.answerIsCorrection, questionsViewModel.answerIsCorrection) &&
        Objects.equals(this.answerIsHolding, questionsViewModel.answerIsHolding) &&
        Objects.equals(this.answerText, questionsViewModel.answerText) &&
        Objects.equals(this.answeringBodyId, questionsViewModel.answeringBodyId) &&
        Objects.equals(this.answeringBodyName, questionsViewModel.answeringBodyName) &&
        Objects.equals(this.answeringMember, questionsViewModel.answeringMember) &&
        Objects.equals(this.answeringMemberId, questionsViewModel.answeringMemberId) &&
        Objects.equals(this.askingMember, questionsViewModel.askingMember) &&
        Objects.equals(this.askingMemberId, questionsViewModel.askingMemberId) &&
        Objects.equals(this.attachmentCount, questionsViewModel.attachmentCount) &&
        Objects.equals(this.attachments, questionsViewModel.attachments) &&
        Objects.equals(this.comparableAnswerText, questionsViewModel.comparableAnswerText) &&
        Objects.equals(this.correctingMember, questionsViewModel.correctingMember) &&
        Objects.equals(this.correctingMemberId, questionsViewModel.correctingMemberId) &&
        Objects.equals(this.dateAnswerCorrected, questionsViewModel.dateAnswerCorrected) &&
        Objects.equals(this.dateAnswered, questionsViewModel.dateAnswered) &&
        Objects.equals(this.dateForAnswer, questionsViewModel.dateForAnswer) &&
        Objects.equals(this.dateHoldingAnswer, questionsViewModel.dateHoldingAnswer) &&
        Objects.equals(this.dateTabled, questionsViewModel.dateTabled) &&
        Objects.equals(this.groupedQuestions, questionsViewModel.groupedQuestions) &&
        Objects.equals(this.groupedQuestionsDates, questionsViewModel.groupedQuestionsDates) &&
        Objects.equals(this.heading, questionsViewModel.heading) &&
        Objects.equals(this.house, questionsViewModel.house) &&
        Objects.equals(this.id, questionsViewModel.id) &&
        Objects.equals(this.isNamedDay, questionsViewModel.isNamedDay) &&
        Objects.equals(this.isWithdrawn, questionsViewModel.isWithdrawn) &&
        Objects.equals(this.memberHasInterest, questionsViewModel.memberHasInterest) &&
        Objects.equals(this.originalAnswerText, questionsViewModel.originalAnswerText) &&
        Objects.equals(this.questionText, questionsViewModel.questionText) &&
        Objects.equals(this.uin, questionsViewModel.uin);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(answerIsCorrection, answerIsHolding, answerText, answeringBodyId, answeringBodyName, answeringMember, answeringMemberId, askingMember, askingMemberId, attachmentCount, attachments, comparableAnswerText, correctingMember, correctingMemberId, dateAnswerCorrected, dateAnswered, dateForAnswer, dateHoldingAnswer, dateTabled, groupedQuestions, groupedQuestionsDates, heading, house, id, isNamedDay, isWithdrawn, memberHasInterest, originalAnswerText, questionText, uin);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuestionsViewModel {\n");
    sb.append("    answerIsCorrection: ").append(toIndentedString(answerIsCorrection)).append("\n");
    sb.append("    answerIsHolding: ").append(toIndentedString(answerIsHolding)).append("\n");
    sb.append("    answerText: ").append(toIndentedString(answerText)).append("\n");
    sb.append("    answeringBodyId: ").append(toIndentedString(answeringBodyId)).append("\n");
    sb.append("    answeringBodyName: ").append(toIndentedString(answeringBodyName)).append("\n");
    sb.append("    answeringMember: ").append(toIndentedString(answeringMember)).append("\n");
    sb.append("    answeringMemberId: ").append(toIndentedString(answeringMemberId)).append("\n");
    sb.append("    askingMember: ").append(toIndentedString(askingMember)).append("\n");
    sb.append("    askingMemberId: ").append(toIndentedString(askingMemberId)).append("\n");
    sb.append("    attachmentCount: ").append(toIndentedString(attachmentCount)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    comparableAnswerText: ").append(toIndentedString(comparableAnswerText)).append("\n");
    sb.append("    correctingMember: ").append(toIndentedString(correctingMember)).append("\n");
    sb.append("    correctingMemberId: ").append(toIndentedString(correctingMemberId)).append("\n");
    sb.append("    dateAnswerCorrected: ").append(toIndentedString(dateAnswerCorrected)).append("\n");
    sb.append("    dateAnswered: ").append(toIndentedString(dateAnswered)).append("\n");
    sb.append("    dateForAnswer: ").append(toIndentedString(dateForAnswer)).append("\n");
    sb.append("    dateHoldingAnswer: ").append(toIndentedString(dateHoldingAnswer)).append("\n");
    sb.append("    dateTabled: ").append(toIndentedString(dateTabled)).append("\n");
    sb.append("    groupedQuestions: ").append(toIndentedString(groupedQuestions)).append("\n");
    sb.append("    groupedQuestionsDates: ").append(toIndentedString(groupedQuestionsDates)).append("\n");
    sb.append("    heading: ").append(toIndentedString(heading)).append("\n");
    sb.append("    house: ").append(toIndentedString(house)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isNamedDay: ").append(toIndentedString(isNamedDay)).append("\n");
    sb.append("    isWithdrawn: ").append(toIndentedString(isWithdrawn)).append("\n");
    sb.append("    memberHasInterest: ").append(toIndentedString(memberHasInterest)).append("\n");
    sb.append("    originalAnswerText: ").append(toIndentedString(originalAnswerText)).append("\n");
    sb.append("    questionText: ").append(toIndentedString(questionText)).append("\n");
    sb.append("    uin: ").append(toIndentedString(uin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answerIsCorrection");
    openapiFields.add("answerIsHolding");
    openapiFields.add("answerText");
    openapiFields.add("answeringBodyId");
    openapiFields.add("answeringBodyName");
    openapiFields.add("answeringMember");
    openapiFields.add("answeringMemberId");
    openapiFields.add("askingMember");
    openapiFields.add("askingMemberId");
    openapiFields.add("attachmentCount");
    openapiFields.add("attachments");
    openapiFields.add("comparableAnswerText");
    openapiFields.add("correctingMember");
    openapiFields.add("correctingMemberId");
    openapiFields.add("dateAnswerCorrected");
    openapiFields.add("dateAnswered");
    openapiFields.add("dateForAnswer");
    openapiFields.add("dateHoldingAnswer");
    openapiFields.add("dateTabled");
    openapiFields.add("groupedQuestions");
    openapiFields.add("groupedQuestionsDates");
    openapiFields.add("heading");
    openapiFields.add("house");
    openapiFields.add("id");
    openapiFields.add("isNamedDay");
    openapiFields.add("isWithdrawn");
    openapiFields.add("memberHasInterest");
    openapiFields.add("originalAnswerText");
    openapiFields.add("questionText");
    openapiFields.add("uin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuestionsViewModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuestionsViewModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuestionsViewModel is not found in the empty JSON string", QuestionsViewModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuestionsViewModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuestionsViewModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("answerText") != null && !jsonObj.get("answerText").isJsonNull()) && !jsonObj.get("answerText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answerText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answerText").toString()));
      }
      if ((jsonObj.get("answeringBodyName") != null && !jsonObj.get("answeringBodyName").isJsonNull()) && !jsonObj.get("answeringBodyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answeringBodyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answeringBodyName").toString()));
      }
      // validate the optional field `answeringMember`
      if (jsonObj.get("answeringMember") != null && !jsonObj.get("answeringMember").isJsonNull()) {
        MemberViewModel.validateJsonElement(jsonObj.get("answeringMember"));
      }
      // validate the optional field `askingMember`
      if (jsonObj.get("askingMember") != null && !jsonObj.get("askingMember").isJsonNull()) {
        MemberViewModel.validateJsonElement(jsonObj.get("askingMember"));
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            AttachmentViewModel.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("comparableAnswerText") != null && !jsonObj.get("comparableAnswerText").isJsonNull()) && !jsonObj.get("comparableAnswerText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comparableAnswerText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comparableAnswerText").toString()));
      }
      // validate the optional field `correctingMember`
      if (jsonObj.get("correctingMember") != null && !jsonObj.get("correctingMember").isJsonNull()) {
        MemberViewModel.validateJsonElement(jsonObj.get("correctingMember"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groupedQuestions") != null && !jsonObj.get("groupedQuestions").isJsonNull() && !jsonObj.get("groupedQuestions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupedQuestions` to be an array in the JSON string but got `%s`", jsonObj.get("groupedQuestions").toString()));
      }
      if (jsonObj.get("groupedQuestionsDates") != null && !jsonObj.get("groupedQuestionsDates").isJsonNull()) {
        JsonArray jsonArraygroupedQuestionsDates = jsonObj.getAsJsonArray("groupedQuestionsDates");
        if (jsonArraygroupedQuestionsDates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupedQuestionsDates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupedQuestionsDates` to be an array in the JSON string but got `%s`", jsonObj.get("groupedQuestionsDates").toString()));
          }

          // validate the optional field `groupedQuestionsDates` (array)
          for (int i = 0; i < jsonArraygroupedQuestionsDates.size(); i++) {
            GroupedQuestionViewModel.validateJsonElement(jsonArraygroupedQuestionsDates.get(i));
          };
        }
      }
      if ((jsonObj.get("heading") != null && !jsonObj.get("heading").isJsonNull()) && !jsonObj.get("heading").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `heading` to be a primitive type in the JSON string but got `%s`", jsonObj.get("heading").toString()));
      }
      // validate the optional field `house`
      if (jsonObj.get("house") != null && !jsonObj.get("house").isJsonNull()) {
        HouseEnum.validateJsonElement(jsonObj.get("house"));
      }
      if ((jsonObj.get("originalAnswerText") != null && !jsonObj.get("originalAnswerText").isJsonNull()) && !jsonObj.get("originalAnswerText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalAnswerText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalAnswerText").toString()));
      }
      if ((jsonObj.get("questionText") != null && !jsonObj.get("questionText").isJsonNull()) && !jsonObj.get("questionText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `questionText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("questionText").toString()));
      }
      if ((jsonObj.get("uin") != null && !jsonObj.get("uin").isJsonNull()) && !jsonObj.get("uin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uin").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuestionsViewModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuestionsViewModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuestionsViewModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuestionsViewModel.class));

       return (TypeAdapter<T>) new TypeAdapter<QuestionsViewModel>() {
           @Override
           public void write(JsonWriter out, QuestionsViewModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuestionsViewModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuestionsViewModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuestionsViewModel
   * @throws IOException if the JSON string is invalid with respect to QuestionsViewModel
   */
  public static QuestionsViewModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuestionsViewModel.class);
  }

  /**
   * Convert an instance of QuestionsViewModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

