/*
 * Written Questions Service API
 * Data around written questions and answers, as well as written ministerial statements.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HouseEnum;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.StatementsViewModelItem;
import org.openapitools.client.model.StatementsViewModelSearchResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WrittenStatementsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WrittenStatementsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WrittenStatementsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiWrittenstatementsStatementsDateUinGet
     * @param date Written statement on date specified (required)
     * @param uin Written statement with uid specified (required)
     * @param expandMember Expand the details of Members in the results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWrittenstatementsStatementsDateUinGetCall(OffsetDateTime date, String uin, Boolean expandMember, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/writtenstatements/statements/{date}/{uin}"
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()))
            .replace("{" + "uin" + "}", localVarApiClient.escapeString(uin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expandMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expandMember", expandMember));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWrittenstatementsStatementsDateUinGetValidateBeforeCall(OffsetDateTime date, String uin, Boolean expandMember, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling apiWrittenstatementsStatementsDateUinGet(Async)");
        }

        // verify the required parameter 'uin' is set
        if (uin == null) {
            throw new ApiException("Missing the required parameter 'uin' when calling apiWrittenstatementsStatementsDateUinGet(Async)");
        }

        return apiWrittenstatementsStatementsDateUinGetCall(date, uin, expandMember, _callback);

    }

    /**
     * Returns a written statemnet
     * 
     * @param date Written statement on date specified (required)
     * @param uin Written statement with uid specified (required)
     * @param expandMember Expand the details of Members in the results (optional)
     * @return StatementsViewModelItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public StatementsViewModelItem apiWrittenstatementsStatementsDateUinGet(OffsetDateTime date, String uin, Boolean expandMember) throws ApiException {
        ApiResponse<StatementsViewModelItem> localVarResp = apiWrittenstatementsStatementsDateUinGetWithHttpInfo(date, uin, expandMember);
        return localVarResp.getData();
    }

    /**
     * Returns a written statemnet
     * 
     * @param date Written statement on date specified (required)
     * @param uin Written statement with uid specified (required)
     * @param expandMember Expand the details of Members in the results (optional)
     * @return ApiResponse&lt;StatementsViewModelItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatementsViewModelItem> apiWrittenstatementsStatementsDateUinGetWithHttpInfo(OffsetDateTime date, String uin, Boolean expandMember) throws ApiException {
        okhttp3.Call localVarCall = apiWrittenstatementsStatementsDateUinGetValidateBeforeCall(date, uin, expandMember, null);
        Type localVarReturnType = new TypeToken<StatementsViewModelItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a written statemnet (asynchronously)
     * 
     * @param date Written statement on date specified (required)
     * @param uin Written statement with uid specified (required)
     * @param expandMember Expand the details of Members in the results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWrittenstatementsStatementsDateUinGetAsync(OffsetDateTime date, String uin, Boolean expandMember, final ApiCallback<StatementsViewModelItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWrittenstatementsStatementsDateUinGetValidateBeforeCall(date, uin, expandMember, _callback);
        Type localVarReturnType = new TypeToken<StatementsViewModelItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWrittenstatementsStatementsGet
     * @param madeWhenFrom Written statements made on or after the date specified. Date format yyyy-mm-dd (optional)
     * @param madeWhenTo Written statements made on or before the date specified. Date format yyyy-mm-dd (optional)
     * @param searchTerm Written questions / statements containing the search term specified, searches item content (optional)
     * @param uIN Written questions / statements with the uin specified (optional)
     * @param answeringBodies Written questions / statements relating to the answering bodies with the IDs specified (optional)
     * @param members Written questions / statements relating to the members with the IDs specified (optional)
     * @param house Written questions / statements relating to the House specified (optional)
     * @param skip Number of records to skip, default is 0 (optional)
     * @param take Number of records to take, default is 20 (optional)
     * @param expandMember Expand the details of Members in the results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWrittenstatementsStatementsGetCall(OffsetDateTime madeWhenFrom, OffsetDateTime madeWhenTo, String searchTerm, String uIN, List<Integer> answeringBodies, List<Integer> members, HouseEnum house, Integer skip, Integer take, Boolean expandMember, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/writtenstatements/statements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (madeWhenFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("madeWhenFrom", madeWhenFrom));
        }

        if (madeWhenTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("madeWhenTo", madeWhenTo));
        }

        if (searchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTerm", searchTerm));
        }

        if (uIN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uIN", uIN));
        }

        if (answeringBodies != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "answeringBodies", answeringBodies));
        }

        if (members != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "members", members));
        }

        if (house != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("house", house));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        if (expandMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expandMember", expandMember));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWrittenstatementsStatementsGetValidateBeforeCall(OffsetDateTime madeWhenFrom, OffsetDateTime madeWhenTo, String searchTerm, String uIN, List<Integer> answeringBodies, List<Integer> members, HouseEnum house, Integer skip, Integer take, Boolean expandMember, final ApiCallback _callback) throws ApiException {
        return apiWrittenstatementsStatementsGetCall(madeWhenFrom, madeWhenTo, searchTerm, uIN, answeringBodies, members, house, skip, take, expandMember, _callback);

    }

    /**
     * Returns a list of written statements
     * 
     * @param madeWhenFrom Written statements made on or after the date specified. Date format yyyy-mm-dd (optional)
     * @param madeWhenTo Written statements made on or before the date specified. Date format yyyy-mm-dd (optional)
     * @param searchTerm Written questions / statements containing the search term specified, searches item content (optional)
     * @param uIN Written questions / statements with the uin specified (optional)
     * @param answeringBodies Written questions / statements relating to the answering bodies with the IDs specified (optional)
     * @param members Written questions / statements relating to the members with the IDs specified (optional)
     * @param house Written questions / statements relating to the House specified (optional)
     * @param skip Number of records to skip, default is 0 (optional)
     * @param take Number of records to take, default is 20 (optional)
     * @param expandMember Expand the details of Members in the results (optional)
     * @return StatementsViewModelSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public StatementsViewModelSearchResult apiWrittenstatementsStatementsGet(OffsetDateTime madeWhenFrom, OffsetDateTime madeWhenTo, String searchTerm, String uIN, List<Integer> answeringBodies, List<Integer> members, HouseEnum house, Integer skip, Integer take, Boolean expandMember) throws ApiException {
        ApiResponse<StatementsViewModelSearchResult> localVarResp = apiWrittenstatementsStatementsGetWithHttpInfo(madeWhenFrom, madeWhenTo, searchTerm, uIN, answeringBodies, members, house, skip, take, expandMember);
        return localVarResp.getData();
    }

    /**
     * Returns a list of written statements
     * 
     * @param madeWhenFrom Written statements made on or after the date specified. Date format yyyy-mm-dd (optional)
     * @param madeWhenTo Written statements made on or before the date specified. Date format yyyy-mm-dd (optional)
     * @param searchTerm Written questions / statements containing the search term specified, searches item content (optional)
     * @param uIN Written questions / statements with the uin specified (optional)
     * @param answeringBodies Written questions / statements relating to the answering bodies with the IDs specified (optional)
     * @param members Written questions / statements relating to the members with the IDs specified (optional)
     * @param house Written questions / statements relating to the House specified (optional)
     * @param skip Number of records to skip, default is 0 (optional)
     * @param take Number of records to take, default is 20 (optional)
     * @param expandMember Expand the details of Members in the results (optional)
     * @return ApiResponse&lt;StatementsViewModelSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatementsViewModelSearchResult> apiWrittenstatementsStatementsGetWithHttpInfo(OffsetDateTime madeWhenFrom, OffsetDateTime madeWhenTo, String searchTerm, String uIN, List<Integer> answeringBodies, List<Integer> members, HouseEnum house, Integer skip, Integer take, Boolean expandMember) throws ApiException {
        okhttp3.Call localVarCall = apiWrittenstatementsStatementsGetValidateBeforeCall(madeWhenFrom, madeWhenTo, searchTerm, uIN, answeringBodies, members, house, skip, take, expandMember, null);
        Type localVarReturnType = new TypeToken<StatementsViewModelSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of written statements (asynchronously)
     * 
     * @param madeWhenFrom Written statements made on or after the date specified. Date format yyyy-mm-dd (optional)
     * @param madeWhenTo Written statements made on or before the date specified. Date format yyyy-mm-dd (optional)
     * @param searchTerm Written questions / statements containing the search term specified, searches item content (optional)
     * @param uIN Written questions / statements with the uin specified (optional)
     * @param answeringBodies Written questions / statements relating to the answering bodies with the IDs specified (optional)
     * @param members Written questions / statements relating to the members with the IDs specified (optional)
     * @param house Written questions / statements relating to the House specified (optional)
     * @param skip Number of records to skip, default is 0 (optional)
     * @param take Number of records to take, default is 20 (optional)
     * @param expandMember Expand the details of Members in the results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWrittenstatementsStatementsGetAsync(OffsetDateTime madeWhenFrom, OffsetDateTime madeWhenTo, String searchTerm, String uIN, List<Integer> answeringBodies, List<Integer> members, HouseEnum house, Integer skip, Integer take, Boolean expandMember, final ApiCallback<StatementsViewModelSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWrittenstatementsStatementsGetValidateBeforeCall(madeWhenFrom, madeWhenTo, searchTerm, uIN, answeringBodies, members, house, skip, take, expandMember, _callback);
        Type localVarReturnType = new TypeToken<StatementsViewModelSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWrittenstatementsStatementsIdGet
     * @param id Written statement with ID specified (required)
     * @param expandMember Expand the details of Members in the results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWrittenstatementsStatementsIdGetCall(Integer id, Boolean expandMember, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/writtenstatements/statements/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expandMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expandMember", expandMember));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWrittenstatementsStatementsIdGetValidateBeforeCall(Integer id, Boolean expandMember, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiWrittenstatementsStatementsIdGet(Async)");
        }

        return apiWrittenstatementsStatementsIdGetCall(id, expandMember, _callback);

    }

    /**
     * Returns a written statement
     * 
     * @param id Written statement with ID specified (required)
     * @param expandMember Expand the details of Members in the results (optional)
     * @return StatementsViewModelSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public StatementsViewModelSearchResult apiWrittenstatementsStatementsIdGet(Integer id, Boolean expandMember) throws ApiException {
        ApiResponse<StatementsViewModelSearchResult> localVarResp = apiWrittenstatementsStatementsIdGetWithHttpInfo(id, expandMember);
        return localVarResp.getData();
    }

    /**
     * Returns a written statement
     * 
     * @param id Written statement with ID specified (required)
     * @param expandMember Expand the details of Members in the results (optional)
     * @return ApiResponse&lt;StatementsViewModelSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatementsViewModelSearchResult> apiWrittenstatementsStatementsIdGetWithHttpInfo(Integer id, Boolean expandMember) throws ApiException {
        okhttp3.Call localVarCall = apiWrittenstatementsStatementsIdGetValidateBeforeCall(id, expandMember, null);
        Type localVarReturnType = new TypeToken<StatementsViewModelSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a written statement (asynchronously)
     * 
     * @param id Written statement with ID specified (required)
     * @param expandMember Expand the details of Members in the results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWrittenstatementsStatementsIdGetAsync(Integer id, Boolean expandMember, final ApiCallback<StatementsViewModelSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWrittenstatementsStatementsIdGetValidateBeforeCall(id, expandMember, _callback);
        Type localVarReturnType = new TypeToken<StatementsViewModelSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
