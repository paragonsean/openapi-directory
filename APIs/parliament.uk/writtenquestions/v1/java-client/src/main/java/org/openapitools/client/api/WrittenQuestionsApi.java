/*
 * Written Questions Service API
 * Data around written questions and answers, as well as written ministerial statements.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Answered;
import org.openapitools.client.model.HouseEnum;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.QuestionStatusEnum;
import org.openapitools.client.model.QuestionsViewModelItem;
import org.openapitools.client.model.QuestionsViewModelSearchResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WrittenQuestionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WrittenQuestionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WrittenQuestionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiWrittenquestionsQuestionsDateUinGet
     * @param date Written question on date specified (required)
     * @param uin Written question with uid specified (required)
     * @param expandMember Expand the details of Members in the results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWrittenquestionsQuestionsDateUinGetCall(OffsetDateTime date, String uin, Boolean expandMember, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/writtenquestions/questions/{date}/{uin}"
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()))
            .replace("{" + "uin" + "}", localVarApiClient.escapeString(uin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expandMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expandMember", expandMember));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWrittenquestionsQuestionsDateUinGetValidateBeforeCall(OffsetDateTime date, String uin, Boolean expandMember, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling apiWrittenquestionsQuestionsDateUinGet(Async)");
        }

        // verify the required parameter 'uin' is set
        if (uin == null) {
            throw new ApiException("Missing the required parameter 'uin' when calling apiWrittenquestionsQuestionsDateUinGet(Async)");
        }

        return apiWrittenquestionsQuestionsDateUinGetCall(date, uin, expandMember, _callback);

    }

    /**
     * Returns a written question
     * 
     * @param date Written question on date specified (required)
     * @param uin Written question with uid specified (required)
     * @param expandMember Expand the details of Members in the results (optional)
     * @return QuestionsViewModelItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public QuestionsViewModelItem apiWrittenquestionsQuestionsDateUinGet(OffsetDateTime date, String uin, Boolean expandMember) throws ApiException {
        ApiResponse<QuestionsViewModelItem> localVarResp = apiWrittenquestionsQuestionsDateUinGetWithHttpInfo(date, uin, expandMember);
        return localVarResp.getData();
    }

    /**
     * Returns a written question
     * 
     * @param date Written question on date specified (required)
     * @param uin Written question with uid specified (required)
     * @param expandMember Expand the details of Members in the results (optional)
     * @return ApiResponse&lt;QuestionsViewModelItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuestionsViewModelItem> apiWrittenquestionsQuestionsDateUinGetWithHttpInfo(OffsetDateTime date, String uin, Boolean expandMember) throws ApiException {
        okhttp3.Call localVarCall = apiWrittenquestionsQuestionsDateUinGetValidateBeforeCall(date, uin, expandMember, null);
        Type localVarReturnType = new TypeToken<QuestionsViewModelItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a written question (asynchronously)
     * 
     * @param date Written question on date specified (required)
     * @param uin Written question with uid specified (required)
     * @param expandMember Expand the details of Members in the results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWrittenquestionsQuestionsDateUinGetAsync(OffsetDateTime date, String uin, Boolean expandMember, final ApiCallback<QuestionsViewModelItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWrittenquestionsQuestionsDateUinGetValidateBeforeCall(date, uin, expandMember, _callback);
        Type localVarReturnType = new TypeToken<QuestionsViewModelItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWrittenquestionsQuestionsGet
     * @param askingMemberId Written questions asked by member with member ID specified (optional)
     * @param answeringMemberId Written questions answered by member with member ID specified (optional)
     * @param tabledWhenFrom Written questions tabled on or after the date specified. Date format yyyy-mm-dd (optional)
     * @param tabledWhenTo Written questions tabled on or before the date specified. Date format yyyy-mm-dd (optional)
     * @param answered Written questions that have been answered, unanswered or either. (optional)
     * @param answeredWhenFrom Written questions answered on or after the date specified. Date format yyyy-mm-dd (optional)
     * @param answeredWhenTo Written questions answered on or before the date specified. Date format yyyy-mm-dd (optional)
     * @param questionStatus Written questions with the status specified (optional)
     * @param includeWithdrawn Include written questions that have been withdrawn (optional)
     * @param expandMember Expand the details of Members in the results (optional)
     * @param correctedWhenFrom Written questions corrected on or after the date specified. Date format yyyy-mm-dd (optional)
     * @param correctedWhenTo Written questions corrected on or before the date specified. Date format yyyy-mm-dd (optional)
     * @param searchTerm Written questions / statements containing the search term specified, searches item content (optional)
     * @param uIN Written questions / statements with the uin specified (optional)
     * @param answeringBodies Written questions / statements relating to the answering bodies with the IDs specified (optional)
     * @param members Written questions / statements relating to the members with the IDs specified (optional)
     * @param house Written questions / statements relating to the House specified (optional)
     * @param skip Number of records to skip, default is 0 (optional)
     * @param take Number of records to take, default is 20 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWrittenquestionsQuestionsGetCall(Integer askingMemberId, Integer answeringMemberId, OffsetDateTime tabledWhenFrom, OffsetDateTime tabledWhenTo, Answered answered, OffsetDateTime answeredWhenFrom, OffsetDateTime answeredWhenTo, QuestionStatusEnum questionStatus, Boolean includeWithdrawn, Boolean expandMember, OffsetDateTime correctedWhenFrom, OffsetDateTime correctedWhenTo, String searchTerm, String uIN, List<Integer> answeringBodies, List<Integer> members, HouseEnum house, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/writtenquestions/questions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (askingMemberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("askingMemberId", askingMemberId));
        }

        if (answeringMemberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("answeringMemberId", answeringMemberId));
        }

        if (tabledWhenFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tabledWhenFrom", tabledWhenFrom));
        }

        if (tabledWhenTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tabledWhenTo", tabledWhenTo));
        }

        if (answered != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("answered", answered));
        }

        if (answeredWhenFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("answeredWhenFrom", answeredWhenFrom));
        }

        if (answeredWhenTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("answeredWhenTo", answeredWhenTo));
        }

        if (questionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("questionStatus", questionStatus));
        }

        if (includeWithdrawn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeWithdrawn", includeWithdrawn));
        }

        if (expandMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expandMember", expandMember));
        }

        if (correctedWhenFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctedWhenFrom", correctedWhenFrom));
        }

        if (correctedWhenTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctedWhenTo", correctedWhenTo));
        }

        if (searchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTerm", searchTerm));
        }

        if (uIN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uIN", uIN));
        }

        if (answeringBodies != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "answeringBodies", answeringBodies));
        }

        if (members != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "members", members));
        }

        if (house != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("house", house));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWrittenquestionsQuestionsGetValidateBeforeCall(Integer askingMemberId, Integer answeringMemberId, OffsetDateTime tabledWhenFrom, OffsetDateTime tabledWhenTo, Answered answered, OffsetDateTime answeredWhenFrom, OffsetDateTime answeredWhenTo, QuestionStatusEnum questionStatus, Boolean includeWithdrawn, Boolean expandMember, OffsetDateTime correctedWhenFrom, OffsetDateTime correctedWhenTo, String searchTerm, String uIN, List<Integer> answeringBodies, List<Integer> members, HouseEnum house, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        return apiWrittenquestionsQuestionsGetCall(askingMemberId, answeringMemberId, tabledWhenFrom, tabledWhenTo, answered, answeredWhenFrom, answeredWhenTo, questionStatus, includeWithdrawn, expandMember, correctedWhenFrom, correctedWhenTo, searchTerm, uIN, answeringBodies, members, house, skip, take, _callback);

    }

    /**
     * Returns a list of written questions
     * 
     * @param askingMemberId Written questions asked by member with member ID specified (optional)
     * @param answeringMemberId Written questions answered by member with member ID specified (optional)
     * @param tabledWhenFrom Written questions tabled on or after the date specified. Date format yyyy-mm-dd (optional)
     * @param tabledWhenTo Written questions tabled on or before the date specified. Date format yyyy-mm-dd (optional)
     * @param answered Written questions that have been answered, unanswered or either. (optional)
     * @param answeredWhenFrom Written questions answered on or after the date specified. Date format yyyy-mm-dd (optional)
     * @param answeredWhenTo Written questions answered on or before the date specified. Date format yyyy-mm-dd (optional)
     * @param questionStatus Written questions with the status specified (optional)
     * @param includeWithdrawn Include written questions that have been withdrawn (optional)
     * @param expandMember Expand the details of Members in the results (optional)
     * @param correctedWhenFrom Written questions corrected on or after the date specified. Date format yyyy-mm-dd (optional)
     * @param correctedWhenTo Written questions corrected on or before the date specified. Date format yyyy-mm-dd (optional)
     * @param searchTerm Written questions / statements containing the search term specified, searches item content (optional)
     * @param uIN Written questions / statements with the uin specified (optional)
     * @param answeringBodies Written questions / statements relating to the answering bodies with the IDs specified (optional)
     * @param members Written questions / statements relating to the members with the IDs specified (optional)
     * @param house Written questions / statements relating to the House specified (optional)
     * @param skip Number of records to skip, default is 0 (optional)
     * @param take Number of records to take, default is 20 (optional)
     * @return QuestionsViewModelSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public QuestionsViewModelSearchResult apiWrittenquestionsQuestionsGet(Integer askingMemberId, Integer answeringMemberId, OffsetDateTime tabledWhenFrom, OffsetDateTime tabledWhenTo, Answered answered, OffsetDateTime answeredWhenFrom, OffsetDateTime answeredWhenTo, QuestionStatusEnum questionStatus, Boolean includeWithdrawn, Boolean expandMember, OffsetDateTime correctedWhenFrom, OffsetDateTime correctedWhenTo, String searchTerm, String uIN, List<Integer> answeringBodies, List<Integer> members, HouseEnum house, Integer skip, Integer take) throws ApiException {
        ApiResponse<QuestionsViewModelSearchResult> localVarResp = apiWrittenquestionsQuestionsGetWithHttpInfo(askingMemberId, answeringMemberId, tabledWhenFrom, tabledWhenTo, answered, answeredWhenFrom, answeredWhenTo, questionStatus, includeWithdrawn, expandMember, correctedWhenFrom, correctedWhenTo, searchTerm, uIN, answeringBodies, members, house, skip, take);
        return localVarResp.getData();
    }

    /**
     * Returns a list of written questions
     * 
     * @param askingMemberId Written questions asked by member with member ID specified (optional)
     * @param answeringMemberId Written questions answered by member with member ID specified (optional)
     * @param tabledWhenFrom Written questions tabled on or after the date specified. Date format yyyy-mm-dd (optional)
     * @param tabledWhenTo Written questions tabled on or before the date specified. Date format yyyy-mm-dd (optional)
     * @param answered Written questions that have been answered, unanswered or either. (optional)
     * @param answeredWhenFrom Written questions answered on or after the date specified. Date format yyyy-mm-dd (optional)
     * @param answeredWhenTo Written questions answered on or before the date specified. Date format yyyy-mm-dd (optional)
     * @param questionStatus Written questions with the status specified (optional)
     * @param includeWithdrawn Include written questions that have been withdrawn (optional)
     * @param expandMember Expand the details of Members in the results (optional)
     * @param correctedWhenFrom Written questions corrected on or after the date specified. Date format yyyy-mm-dd (optional)
     * @param correctedWhenTo Written questions corrected on or before the date specified. Date format yyyy-mm-dd (optional)
     * @param searchTerm Written questions / statements containing the search term specified, searches item content (optional)
     * @param uIN Written questions / statements with the uin specified (optional)
     * @param answeringBodies Written questions / statements relating to the answering bodies with the IDs specified (optional)
     * @param members Written questions / statements relating to the members with the IDs specified (optional)
     * @param house Written questions / statements relating to the House specified (optional)
     * @param skip Number of records to skip, default is 0 (optional)
     * @param take Number of records to take, default is 20 (optional)
     * @return ApiResponse&lt;QuestionsViewModelSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuestionsViewModelSearchResult> apiWrittenquestionsQuestionsGetWithHttpInfo(Integer askingMemberId, Integer answeringMemberId, OffsetDateTime tabledWhenFrom, OffsetDateTime tabledWhenTo, Answered answered, OffsetDateTime answeredWhenFrom, OffsetDateTime answeredWhenTo, QuestionStatusEnum questionStatus, Boolean includeWithdrawn, Boolean expandMember, OffsetDateTime correctedWhenFrom, OffsetDateTime correctedWhenTo, String searchTerm, String uIN, List<Integer> answeringBodies, List<Integer> members, HouseEnum house, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = apiWrittenquestionsQuestionsGetValidateBeforeCall(askingMemberId, answeringMemberId, tabledWhenFrom, tabledWhenTo, answered, answeredWhenFrom, answeredWhenTo, questionStatus, includeWithdrawn, expandMember, correctedWhenFrom, correctedWhenTo, searchTerm, uIN, answeringBodies, members, house, skip, take, null);
        Type localVarReturnType = new TypeToken<QuestionsViewModelSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of written questions (asynchronously)
     * 
     * @param askingMemberId Written questions asked by member with member ID specified (optional)
     * @param answeringMemberId Written questions answered by member with member ID specified (optional)
     * @param tabledWhenFrom Written questions tabled on or after the date specified. Date format yyyy-mm-dd (optional)
     * @param tabledWhenTo Written questions tabled on or before the date specified. Date format yyyy-mm-dd (optional)
     * @param answered Written questions that have been answered, unanswered or either. (optional)
     * @param answeredWhenFrom Written questions answered on or after the date specified. Date format yyyy-mm-dd (optional)
     * @param answeredWhenTo Written questions answered on or before the date specified. Date format yyyy-mm-dd (optional)
     * @param questionStatus Written questions with the status specified (optional)
     * @param includeWithdrawn Include written questions that have been withdrawn (optional)
     * @param expandMember Expand the details of Members in the results (optional)
     * @param correctedWhenFrom Written questions corrected on or after the date specified. Date format yyyy-mm-dd (optional)
     * @param correctedWhenTo Written questions corrected on or before the date specified. Date format yyyy-mm-dd (optional)
     * @param searchTerm Written questions / statements containing the search term specified, searches item content (optional)
     * @param uIN Written questions / statements with the uin specified (optional)
     * @param answeringBodies Written questions / statements relating to the answering bodies with the IDs specified (optional)
     * @param members Written questions / statements relating to the members with the IDs specified (optional)
     * @param house Written questions / statements relating to the House specified (optional)
     * @param skip Number of records to skip, default is 0 (optional)
     * @param take Number of records to take, default is 20 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWrittenquestionsQuestionsGetAsync(Integer askingMemberId, Integer answeringMemberId, OffsetDateTime tabledWhenFrom, OffsetDateTime tabledWhenTo, Answered answered, OffsetDateTime answeredWhenFrom, OffsetDateTime answeredWhenTo, QuestionStatusEnum questionStatus, Boolean includeWithdrawn, Boolean expandMember, OffsetDateTime correctedWhenFrom, OffsetDateTime correctedWhenTo, String searchTerm, String uIN, List<Integer> answeringBodies, List<Integer> members, HouseEnum house, Integer skip, Integer take, final ApiCallback<QuestionsViewModelSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWrittenquestionsQuestionsGetValidateBeforeCall(askingMemberId, answeringMemberId, tabledWhenFrom, tabledWhenTo, answered, answeredWhenFrom, answeredWhenTo, questionStatus, includeWithdrawn, expandMember, correctedWhenFrom, correctedWhenTo, searchTerm, uIN, answeringBodies, members, house, skip, take, _callback);
        Type localVarReturnType = new TypeToken<QuestionsViewModelSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWrittenquestionsQuestionsIdGet
     * @param id written question with ID specified (required)
     * @param expandMember Expand the details of Members in the result (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWrittenquestionsQuestionsIdGetCall(Integer id, Boolean expandMember, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/writtenquestions/questions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expandMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expandMember", expandMember));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWrittenquestionsQuestionsIdGetValidateBeforeCall(Integer id, Boolean expandMember, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiWrittenquestionsQuestionsIdGet(Async)");
        }

        return apiWrittenquestionsQuestionsIdGetCall(id, expandMember, _callback);

    }

    /**
     * Returns a written question
     * 
     * @param id written question with ID specified (required)
     * @param expandMember Expand the details of Members in the result (optional)
     * @return QuestionsViewModelItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public QuestionsViewModelItem apiWrittenquestionsQuestionsIdGet(Integer id, Boolean expandMember) throws ApiException {
        ApiResponse<QuestionsViewModelItem> localVarResp = apiWrittenquestionsQuestionsIdGetWithHttpInfo(id, expandMember);
        return localVarResp.getData();
    }

    /**
     * Returns a written question
     * 
     * @param id written question with ID specified (required)
     * @param expandMember Expand the details of Members in the result (optional)
     * @return ApiResponse&lt;QuestionsViewModelItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuestionsViewModelItem> apiWrittenquestionsQuestionsIdGetWithHttpInfo(Integer id, Boolean expandMember) throws ApiException {
        okhttp3.Call localVarCall = apiWrittenquestionsQuestionsIdGetValidateBeforeCall(id, expandMember, null);
        Type localVarReturnType = new TypeToken<QuestionsViewModelItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a written question (asynchronously)
     * 
     * @param id written question with ID specified (required)
     * @param expandMember Expand the details of Members in the result (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWrittenquestionsQuestionsIdGetAsync(Integer id, Boolean expandMember, final ApiCallback<QuestionsViewModelItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWrittenquestionsQuestionsIdGetValidateBeforeCall(id, expandMember, _callback);
        Type localVarReturnType = new TypeToken<QuestionsViewModelItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
