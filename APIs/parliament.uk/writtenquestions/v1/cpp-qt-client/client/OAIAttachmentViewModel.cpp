/**
 * Written Questions Service API
 * Data around written questions and answers, as well as written ministerial statements.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachmentViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachmentViewModel::OAIAttachmentViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachmentViewModel::OAIAttachmentViewModel() {
    this->initializeModel();
}

OAIAttachmentViewModel::~OAIAttachmentViewModel() {}

void OAIAttachmentViewModel::initializeModel() {

    m_file_size_bytes_isSet = false;
    m_file_size_bytes_isValid = false;

    m_file_type_isSet = false;
    m_file_type_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAttachmentViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachmentViewModel::fromJsonObject(QJsonObject json) {

    m_file_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_file_size_bytes, json[QString("fileSizeBytes")]);
    m_file_size_bytes_isSet = !json[QString("fileSizeBytes")].isNull() && m_file_size_bytes_isValid;

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("fileType")]);
    m_file_type_isSet = !json[QString("fileType")].isNull() && m_file_type_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAttachmentViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachmentViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_file_size_bytes_isSet) {
        obj.insert(QString("fileSizeBytes"), ::OpenAPI::toJsonValue(m_file_size_bytes));
    }
    if (m_file_type_isSet) {
        obj.insert(QString("fileType"), ::OpenAPI::toJsonValue(m_file_type));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint64 OAIAttachmentViewModel::getFileSizeBytes() const {
    return m_file_size_bytes;
}
void OAIAttachmentViewModel::setFileSizeBytes(const qint64 &file_size_bytes) {
    m_file_size_bytes = file_size_bytes;
    m_file_size_bytes_isSet = true;
}

bool OAIAttachmentViewModel::is_file_size_bytes_Set() const{
    return m_file_size_bytes_isSet;
}

bool OAIAttachmentViewModel::is_file_size_bytes_Valid() const{
    return m_file_size_bytes_isValid;
}

QString OAIAttachmentViewModel::getFileType() const {
    return m_file_type;
}
void OAIAttachmentViewModel::setFileType(const QString &file_type) {
    m_file_type = file_type;
    m_file_type_isSet = true;
}

bool OAIAttachmentViewModel::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAIAttachmentViewModel::is_file_type_Valid() const{
    return m_file_type_isValid;
}

QString OAIAttachmentViewModel::getTitle() const {
    return m_title;
}
void OAIAttachmentViewModel::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAttachmentViewModel::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAttachmentViewModel::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIAttachmentViewModel::getUrl() const {
    return m_url;
}
void OAIAttachmentViewModel::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAttachmentViewModel::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAttachmentViewModel::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAttachmentViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachmentViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
