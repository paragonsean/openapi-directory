/**
 * Written Questions Service API
 * Data around written questions and answers, as well as written ministerial statements.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDailyReportViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDailyReportViewModel::OAIDailyReportViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDailyReportViewModel::OAIDailyReportViewModel() {
    this->initializeModel();
}

OAIDailyReportViewModel::~OAIDailyReportViewModel() {}

void OAIDailyReportViewModel::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_file_size_bytes_isSet = false;
    m_file_size_bytes_isValid = false;

    m_house_isSet = false;
    m_house_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIDailyReportViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDailyReportViewModel::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_file_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_file_size_bytes, json[QString("fileSizeBytes")]);
    m_file_size_bytes_isSet = !json[QString("fileSizeBytes")].isNull() && m_file_size_bytes_isValid;

    m_house_isValid = ::OpenAPI::fromJsonValue(m_house, json[QString("house")]);
    m_house_isSet = !json[QString("house")].isNull() && m_house_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIDailyReportViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDailyReportViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_file_size_bytes_isSet) {
        obj.insert(QString("fileSizeBytes"), ::OpenAPI::toJsonValue(m_file_size_bytes));
    }
    if (m_house.isSet()) {
        obj.insert(QString("house"), ::OpenAPI::toJsonValue(m_house));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDateTime OAIDailyReportViewModel::getDate() const {
    return m_date;
}
void OAIDailyReportViewModel::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIDailyReportViewModel::is_date_Set() const{
    return m_date_isSet;
}

bool OAIDailyReportViewModel::is_date_Valid() const{
    return m_date_isValid;
}

qint64 OAIDailyReportViewModel::getFileSizeBytes() const {
    return m_file_size_bytes;
}
void OAIDailyReportViewModel::setFileSizeBytes(const qint64 &file_size_bytes) {
    m_file_size_bytes = file_size_bytes;
    m_file_size_bytes_isSet = true;
}

bool OAIDailyReportViewModel::is_file_size_bytes_Set() const{
    return m_file_size_bytes_isSet;
}

bool OAIDailyReportViewModel::is_file_size_bytes_Valid() const{
    return m_file_size_bytes_isValid;
}

OAIHouseEnum OAIDailyReportViewModel::getHouse() const {
    return m_house;
}
void OAIDailyReportViewModel::setHouse(const OAIHouseEnum &house) {
    m_house = house;
    m_house_isSet = true;
}

bool OAIDailyReportViewModel::is_house_Set() const{
    return m_house_isSet;
}

bool OAIDailyReportViewModel::is_house_Valid() const{
    return m_house_isValid;
}

QString OAIDailyReportViewModel::getUrl() const {
    return m_url;
}
void OAIDailyReportViewModel::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDailyReportViewModel::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDailyReportViewModel::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIDailyReportViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDailyReportViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
