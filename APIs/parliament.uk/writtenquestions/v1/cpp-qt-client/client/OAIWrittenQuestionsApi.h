/**
 * Written Questions Service API
 * Data around written questions and answers, as well as written ministerial statements.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWrittenQuestionsApi_H
#define OAI_OAIWrittenQuestionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnswered.h"
#include "OAIHouseEnum.h"
#include "OAIProblemDetails.h"
#include "OAIQuestionStatusEnum.h"
#include "OAIQuestionsViewModelItem.h"
#include "OAIQuestionsViewModelSearchResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWrittenQuestionsApi : public QObject {
    Q_OBJECT

public:
    OAIWrittenQuestionsApi(const int timeOut = 0);
    ~OAIWrittenQuestionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  date QDateTime [required]
    * @param[in]  uin QString [required]
    * @param[in]  expand_member bool [optional]
    */
    virtual void apiWrittenquestionsQuestionsDateUinGet(const QDateTime &date, const QString &uin, const ::OpenAPI::OptionalParam<bool> &expand_member = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  asking_member_id qint32 [optional]
    * @param[in]  answering_member_id qint32 [optional]
    * @param[in]  tabled_when_from QDateTime [optional]
    * @param[in]  tabled_when_to QDateTime [optional]
    * @param[in]  answered OAIAnswered [optional]
    * @param[in]  answered_when_from QDateTime [optional]
    * @param[in]  answered_when_to QDateTime [optional]
    * @param[in]  question_status OAIQuestionStatusEnum [optional]
    * @param[in]  include_withdrawn bool [optional]
    * @param[in]  expand_member bool [optional]
    * @param[in]  corrected_when_from QDateTime [optional]
    * @param[in]  corrected_when_to QDateTime [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  u_in QString [optional]
    * @param[in]  answering_bodies QList<qint32> [optional]
    * @param[in]  members QList<qint32> [optional]
    * @param[in]  house OAIHouseEnum [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void apiWrittenquestionsQuestionsGet(const ::OpenAPI::OptionalParam<qint32> &asking_member_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &answering_member_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &tabled_when_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &tabled_when_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAIAnswered> &answered = ::OpenAPI::OptionalParam<OAIAnswered>(), const ::OpenAPI::OptionalParam<QDateTime> &answered_when_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &answered_when_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAIQuestionStatusEnum> &question_status = ::OpenAPI::OptionalParam<OAIQuestionStatusEnum>(), const ::OpenAPI::OptionalParam<bool> &include_withdrawn = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_member = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &corrected_when_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &corrected_when_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &u_in = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint32>> &answering_bodies = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &members = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<OAIHouseEnum> &house = ::OpenAPI::OptionalParam<OAIHouseEnum>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  expand_member bool [optional]
    */
    virtual void apiWrittenquestionsQuestionsIdGet(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &expand_member = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiWrittenquestionsQuestionsDateUinGetCallback(OAIHttpRequestWorker *worker);
    void apiWrittenquestionsQuestionsGetCallback(OAIHttpRequestWorker *worker);
    void apiWrittenquestionsQuestionsIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiWrittenquestionsQuestionsDateUinGetSignal(OAIQuestionsViewModelItem summary);
    void apiWrittenquestionsQuestionsGetSignal(OAIQuestionsViewModelSearchResult summary);
    void apiWrittenquestionsQuestionsIdGetSignal(OAIQuestionsViewModelItem summary);


    void apiWrittenquestionsQuestionsDateUinGetSignalFull(OAIHttpRequestWorker *worker, OAIQuestionsViewModelItem summary);
    void apiWrittenquestionsQuestionsGetSignalFull(OAIHttpRequestWorker *worker, OAIQuestionsViewModelSearchResult summary);
    void apiWrittenquestionsQuestionsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIQuestionsViewModelItem summary);

    Q_DECL_DEPRECATED_X("Use apiWrittenquestionsQuestionsDateUinGetSignalError() instead")
    void apiWrittenquestionsQuestionsDateUinGetSignalE(OAIQuestionsViewModelItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiWrittenquestionsQuestionsDateUinGetSignalError(OAIQuestionsViewModelItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiWrittenquestionsQuestionsGetSignalError() instead")
    void apiWrittenquestionsQuestionsGetSignalE(OAIQuestionsViewModelSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiWrittenquestionsQuestionsGetSignalError(OAIQuestionsViewModelSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiWrittenquestionsQuestionsIdGetSignalError() instead")
    void apiWrittenquestionsQuestionsIdGetSignalE(OAIQuestionsViewModelItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiWrittenquestionsQuestionsIdGetSignalError(OAIQuestionsViewModelItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiWrittenquestionsQuestionsDateUinGetSignalErrorFull() instead")
    void apiWrittenquestionsQuestionsDateUinGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiWrittenquestionsQuestionsDateUinGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiWrittenquestionsQuestionsGetSignalErrorFull() instead")
    void apiWrittenquestionsQuestionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiWrittenquestionsQuestionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiWrittenquestionsQuestionsIdGetSignalErrorFull() instead")
    void apiWrittenquestionsQuestionsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiWrittenquestionsQuestionsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
