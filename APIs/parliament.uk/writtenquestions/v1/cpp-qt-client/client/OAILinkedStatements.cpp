/**
 * Written Questions Service API
 * Data around written questions and answers, as well as written ministerial statements.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkedStatements.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkedStatements::OAILinkedStatements(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkedStatements::OAILinkedStatements() {
    this->initializeModel();
}

OAILinkedStatements::~OAILinkedStatements() {}

void OAILinkedStatements::initializeModel() {

    m_link_date_isSet = false;
    m_link_date_isValid = false;

    m_link_type_isSet = false;
    m_link_type_isValid = false;

    m_linked_statement_id_isSet = false;
    m_linked_statement_id_isValid = false;
}

void OAILinkedStatements::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinkedStatements::fromJsonObject(QJsonObject json) {

    m_link_date_isValid = ::OpenAPI::fromJsonValue(m_link_date, json[QString("linkDate")]);
    m_link_date_isSet = !json[QString("linkDate")].isNull() && m_link_date_isValid;

    m_link_type_isValid = ::OpenAPI::fromJsonValue(m_link_type, json[QString("linkType")]);
    m_link_type_isSet = !json[QString("linkType")].isNull() && m_link_type_isValid;

    m_linked_statement_id_isValid = ::OpenAPI::fromJsonValue(m_linked_statement_id, json[QString("linkedStatementId")]);
    m_linked_statement_id_isSet = !json[QString("linkedStatementId")].isNull() && m_linked_statement_id_isValid;
}

QString OAILinkedStatements::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinkedStatements::asJsonObject() const {
    QJsonObject obj;
    if (m_link_date_isSet) {
        obj.insert(QString("linkDate"), ::OpenAPI::toJsonValue(m_link_date));
    }
    if (m_link_type.isSet()) {
        obj.insert(QString("linkType"), ::OpenAPI::toJsonValue(m_link_type));
    }
    if (m_linked_statement_id_isSet) {
        obj.insert(QString("linkedStatementId"), ::OpenAPI::toJsonValue(m_linked_statement_id));
    }
    return obj;
}

QDateTime OAILinkedStatements::getLinkDate() const {
    return m_link_date;
}
void OAILinkedStatements::setLinkDate(const QDateTime &link_date) {
    m_link_date = link_date;
    m_link_date_isSet = true;
}

bool OAILinkedStatements::is_link_date_Set() const{
    return m_link_date_isSet;
}

bool OAILinkedStatements::is_link_date_Valid() const{
    return m_link_date_isValid;
}

OAIStatementLinkTypeEnum OAILinkedStatements::getLinkType() const {
    return m_link_type;
}
void OAILinkedStatements::setLinkType(const OAIStatementLinkTypeEnum &link_type) {
    m_link_type = link_type;
    m_link_type_isSet = true;
}

bool OAILinkedStatements::is_link_type_Set() const{
    return m_link_type_isSet;
}

bool OAILinkedStatements::is_link_type_Valid() const{
    return m_link_type_isValid;
}

qint32 OAILinkedStatements::getLinkedStatementId() const {
    return m_linked_statement_id;
}
void OAILinkedStatements::setLinkedStatementId(const qint32 &linked_statement_id) {
    m_linked_statement_id = linked_statement_id;
    m_linked_statement_id_isSet = true;
}

bool OAILinkedStatements::is_linked_statement_id_Set() const{
    return m_linked_statement_id_isSet;
}

bool OAILinkedStatements::is_linked_statement_id_Valid() const{
    return m_linked_statement_id_isValid;
}

bool OAILinkedStatements::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_link_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_statement_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinkedStatements::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
