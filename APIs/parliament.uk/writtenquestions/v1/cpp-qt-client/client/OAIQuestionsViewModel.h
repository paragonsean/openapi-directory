/**
 * Written Questions Service API
 * Data around written questions and answers, as well as written ministerial statements.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQuestionsViewModel.h
 *
 * 
 */

#ifndef OAIQuestionsViewModel_H
#define OAIQuestionsViewModel_H

#include <QJsonObject>

#include "OAIAttachmentViewModel.h"
#include "OAIGroupedQuestionViewModel.h"
#include "OAIHouseEnum.h"
#include "OAIMemberViewModel.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMemberViewModel;
class OAIAttachmentViewModel;
class OAIGroupedQuestionViewModel;

class OAIQuestionsViewModel : public OAIObject {
public:
    OAIQuestionsViewModel();
    OAIQuestionsViewModel(QString json);
    ~OAIQuestionsViewModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAnswerIsCorrection() const;
    void setAnswerIsCorrection(const bool &answer_is_correction);
    bool is_answer_is_correction_Set() const;
    bool is_answer_is_correction_Valid() const;

    bool isAnswerIsHolding() const;
    void setAnswerIsHolding(const bool &answer_is_holding);
    bool is_answer_is_holding_Set() const;
    bool is_answer_is_holding_Valid() const;

    QString getAnswerText() const;
    void setAnswerText(const QString &answer_text);
    bool is_answer_text_Set() const;
    bool is_answer_text_Valid() const;

    qint32 getAnsweringBodyId() const;
    void setAnsweringBodyId(const qint32 &answering_body_id);
    bool is_answering_body_id_Set() const;
    bool is_answering_body_id_Valid() const;

    QString getAnsweringBodyName() const;
    void setAnsweringBodyName(const QString &answering_body_name);
    bool is_answering_body_name_Set() const;
    bool is_answering_body_name_Valid() const;

    OAIMemberViewModel getAnsweringMember() const;
    void setAnsweringMember(const OAIMemberViewModel &answering_member);
    bool is_answering_member_Set() const;
    bool is_answering_member_Valid() const;

    qint32 getAnsweringMemberId() const;
    void setAnsweringMemberId(const qint32 &answering_member_id);
    bool is_answering_member_id_Set() const;
    bool is_answering_member_id_Valid() const;

    OAIMemberViewModel getAskingMember() const;
    void setAskingMember(const OAIMemberViewModel &asking_member);
    bool is_asking_member_Set() const;
    bool is_asking_member_Valid() const;

    qint32 getAskingMemberId() const;
    void setAskingMemberId(const qint32 &asking_member_id);
    bool is_asking_member_id_Set() const;
    bool is_asking_member_id_Valid() const;

    qint32 getAttachmentCount() const;
    void setAttachmentCount(const qint32 &attachment_count);
    bool is_attachment_count_Set() const;
    bool is_attachment_count_Valid() const;

    QList<OAIAttachmentViewModel> getAttachments() const;
    void setAttachments(const QList<OAIAttachmentViewModel> &attachments);
    bool is_attachments_Set() const;
    bool is_attachments_Valid() const;

    QString getComparableAnswerText() const;
    void setComparableAnswerText(const QString &comparable_answer_text);
    bool is_comparable_answer_text_Set() const;
    bool is_comparable_answer_text_Valid() const;

    OAIMemberViewModel getCorrectingMember() const;
    void setCorrectingMember(const OAIMemberViewModel &correcting_member);
    bool is_correcting_member_Set() const;
    bool is_correcting_member_Valid() const;

    qint32 getCorrectingMemberId() const;
    void setCorrectingMemberId(const qint32 &correcting_member_id);
    bool is_correcting_member_id_Set() const;
    bool is_correcting_member_id_Valid() const;

    QDateTime getDateAnswerCorrected() const;
    void setDateAnswerCorrected(const QDateTime &date_answer_corrected);
    bool is_date_answer_corrected_Set() const;
    bool is_date_answer_corrected_Valid() const;

    QDateTime getDateAnswered() const;
    void setDateAnswered(const QDateTime &date_answered);
    bool is_date_answered_Set() const;
    bool is_date_answered_Valid() const;

    QDateTime getDateForAnswer() const;
    void setDateForAnswer(const QDateTime &date_for_answer);
    bool is_date_for_answer_Set() const;
    bool is_date_for_answer_Valid() const;

    QDateTime getDateHoldingAnswer() const;
    void setDateHoldingAnswer(const QDateTime &date_holding_answer);
    bool is_date_holding_answer_Set() const;
    bool is_date_holding_answer_Valid() const;

    QDateTime getDateTabled() const;
    void setDateTabled(const QDateTime &date_tabled);
    bool is_date_tabled_Set() const;
    bool is_date_tabled_Valid() const;

    QList<QString> getGroupedQuestions() const;
    void setGroupedQuestions(const QList<QString> &grouped_questions);
    bool is_grouped_questions_Set() const;
    bool is_grouped_questions_Valid() const;

    QList<OAIGroupedQuestionViewModel> getGroupedQuestionsDates() const;
    void setGroupedQuestionsDates(const QList<OAIGroupedQuestionViewModel> &grouped_questions_dates);
    bool is_grouped_questions_dates_Set() const;
    bool is_grouped_questions_dates_Valid() const;

    QString getHeading() const;
    void setHeading(const QString &heading);
    bool is_heading_Set() const;
    bool is_heading_Valid() const;

    OAIHouseEnum getHouse() const;
    void setHouse(const OAIHouseEnum &house);
    bool is_house_Set() const;
    bool is_house_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsNamedDay() const;
    void setIsNamedDay(const bool &is_named_day);
    bool is_is_named_day_Set() const;
    bool is_is_named_day_Valid() const;

    bool isIsWithdrawn() const;
    void setIsWithdrawn(const bool &is_withdrawn);
    bool is_is_withdrawn_Set() const;
    bool is_is_withdrawn_Valid() const;

    bool isMemberHasInterest() const;
    void setMemberHasInterest(const bool &member_has_interest);
    bool is_member_has_interest_Set() const;
    bool is_member_has_interest_Valid() const;

    QString getOriginalAnswerText() const;
    void setOriginalAnswerText(const QString &original_answer_text);
    bool is_original_answer_text_Set() const;
    bool is_original_answer_text_Valid() const;

    QString getQuestionText() const;
    void setQuestionText(const QString &question_text);
    bool is_question_text_Set() const;
    bool is_question_text_Valid() const;

    QString getUin() const;
    void setUin(const QString &uin);
    bool is_uin_Set() const;
    bool is_uin_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_answer_is_correction;
    bool m_answer_is_correction_isSet;
    bool m_answer_is_correction_isValid;

    bool m_answer_is_holding;
    bool m_answer_is_holding_isSet;
    bool m_answer_is_holding_isValid;

    QString m_answer_text;
    bool m_answer_text_isSet;
    bool m_answer_text_isValid;

    qint32 m_answering_body_id;
    bool m_answering_body_id_isSet;
    bool m_answering_body_id_isValid;

    QString m_answering_body_name;
    bool m_answering_body_name_isSet;
    bool m_answering_body_name_isValid;

    OAIMemberViewModel m_answering_member;
    bool m_answering_member_isSet;
    bool m_answering_member_isValid;

    qint32 m_answering_member_id;
    bool m_answering_member_id_isSet;
    bool m_answering_member_id_isValid;

    OAIMemberViewModel m_asking_member;
    bool m_asking_member_isSet;
    bool m_asking_member_isValid;

    qint32 m_asking_member_id;
    bool m_asking_member_id_isSet;
    bool m_asking_member_id_isValid;

    qint32 m_attachment_count;
    bool m_attachment_count_isSet;
    bool m_attachment_count_isValid;

    QList<OAIAttachmentViewModel> m_attachments;
    bool m_attachments_isSet;
    bool m_attachments_isValid;

    QString m_comparable_answer_text;
    bool m_comparable_answer_text_isSet;
    bool m_comparable_answer_text_isValid;

    OAIMemberViewModel m_correcting_member;
    bool m_correcting_member_isSet;
    bool m_correcting_member_isValid;

    qint32 m_correcting_member_id;
    bool m_correcting_member_id_isSet;
    bool m_correcting_member_id_isValid;

    QDateTime m_date_answer_corrected;
    bool m_date_answer_corrected_isSet;
    bool m_date_answer_corrected_isValid;

    QDateTime m_date_answered;
    bool m_date_answered_isSet;
    bool m_date_answered_isValid;

    QDateTime m_date_for_answer;
    bool m_date_for_answer_isSet;
    bool m_date_for_answer_isValid;

    QDateTime m_date_holding_answer;
    bool m_date_holding_answer_isSet;
    bool m_date_holding_answer_isValid;

    QDateTime m_date_tabled;
    bool m_date_tabled_isSet;
    bool m_date_tabled_isValid;

    QList<QString> m_grouped_questions;
    bool m_grouped_questions_isSet;
    bool m_grouped_questions_isValid;

    QList<OAIGroupedQuestionViewModel> m_grouped_questions_dates;
    bool m_grouped_questions_dates_isSet;
    bool m_grouped_questions_dates_isValid;

    QString m_heading;
    bool m_heading_isSet;
    bool m_heading_isValid;

    OAIHouseEnum m_house;
    bool m_house_isSet;
    bool m_house_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_named_day;
    bool m_is_named_day_isSet;
    bool m_is_named_day_isValid;

    bool m_is_withdrawn;
    bool m_is_withdrawn_isSet;
    bool m_is_withdrawn_isValid;

    bool m_member_has_interest;
    bool m_member_has_interest_isSet;
    bool m_member_has_interest_isValid;

    QString m_original_answer_text;
    bool m_original_answer_text_isSet;
    bool m_original_answer_text_isValid;

    QString m_question_text;
    bool m_question_text_isSet;
    bool m_question_text_isValid;

    QString m_uin;
    bool m_uin_isSet;
    bool m_uin_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQuestionsViewModel)

#endif // OAIQuestionsViewModel_H
