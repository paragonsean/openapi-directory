/**
 * Written Questions Service API
 * Data around written questions and answers, as well as written ministerial statements.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWrittenStatementsApi_H
#define OAI_OAIWrittenStatementsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHouseEnum.h"
#include "OAIProblemDetails.h"
#include "OAIStatementsViewModelItem.h"
#include "OAIStatementsViewModelSearchResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWrittenStatementsApi : public QObject {
    Q_OBJECT

public:
    OAIWrittenStatementsApi(const int timeOut = 0);
    ~OAIWrittenStatementsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  date QDateTime [required]
    * @param[in]  uin QString [required]
    * @param[in]  expand_member bool [optional]
    */
    virtual void apiWrittenstatementsStatementsDateUinGet(const QDateTime &date, const QString &uin, const ::OpenAPI::OptionalParam<bool> &expand_member = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  made_when_from QDateTime [optional]
    * @param[in]  made_when_to QDateTime [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  u_in QString [optional]
    * @param[in]  answering_bodies QList<qint32> [optional]
    * @param[in]  members QList<qint32> [optional]
    * @param[in]  house OAIHouseEnum [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    * @param[in]  expand_member bool [optional]
    */
    virtual void apiWrittenstatementsStatementsGet(const ::OpenAPI::OptionalParam<QDateTime> &made_when_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &made_when_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &u_in = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint32>> &answering_bodies = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &members = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<OAIHouseEnum> &house = ::OpenAPI::OptionalParam<OAIHouseEnum>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &expand_member = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  expand_member bool [optional]
    */
    virtual void apiWrittenstatementsStatementsIdGet(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &expand_member = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiWrittenstatementsStatementsDateUinGetCallback(OAIHttpRequestWorker *worker);
    void apiWrittenstatementsStatementsGetCallback(OAIHttpRequestWorker *worker);
    void apiWrittenstatementsStatementsIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiWrittenstatementsStatementsDateUinGetSignal(OAIStatementsViewModelItem summary);
    void apiWrittenstatementsStatementsGetSignal(OAIStatementsViewModelSearchResult summary);
    void apiWrittenstatementsStatementsIdGetSignal(OAIStatementsViewModelSearchResult summary);


    void apiWrittenstatementsStatementsDateUinGetSignalFull(OAIHttpRequestWorker *worker, OAIStatementsViewModelItem summary);
    void apiWrittenstatementsStatementsGetSignalFull(OAIHttpRequestWorker *worker, OAIStatementsViewModelSearchResult summary);
    void apiWrittenstatementsStatementsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIStatementsViewModelSearchResult summary);

    Q_DECL_DEPRECATED_X("Use apiWrittenstatementsStatementsDateUinGetSignalError() instead")
    void apiWrittenstatementsStatementsDateUinGetSignalE(OAIStatementsViewModelItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiWrittenstatementsStatementsDateUinGetSignalError(OAIStatementsViewModelItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiWrittenstatementsStatementsGetSignalError() instead")
    void apiWrittenstatementsStatementsGetSignalE(OAIStatementsViewModelSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiWrittenstatementsStatementsGetSignalError(OAIStatementsViewModelSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiWrittenstatementsStatementsIdGetSignalError() instead")
    void apiWrittenstatementsStatementsIdGetSignalE(OAIStatementsViewModelSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiWrittenstatementsStatementsIdGetSignalError(OAIStatementsViewModelSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiWrittenstatementsStatementsDateUinGetSignalErrorFull() instead")
    void apiWrittenstatementsStatementsDateUinGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiWrittenstatementsStatementsDateUinGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiWrittenstatementsStatementsGetSignalErrorFull() instead")
    void apiWrittenstatementsStatementsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiWrittenstatementsStatementsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiWrittenstatementsStatementsIdGetSignalErrorFull() instead")
    void apiWrittenstatementsStatementsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiWrittenstatementsStatementsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
