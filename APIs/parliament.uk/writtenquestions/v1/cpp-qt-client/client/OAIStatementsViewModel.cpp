/**
 * Written Questions Service API
 * Data around written questions and answers, as well as written ministerial statements.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatementsViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatementsViewModel::OAIStatementsViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatementsViewModel::OAIStatementsViewModel() {
    this->initializeModel();
}

OAIStatementsViewModel::~OAIStatementsViewModel() {}

void OAIStatementsViewModel::initializeModel() {

    m_answering_body_id_isSet = false;
    m_answering_body_id_isValid = false;

    m_answering_body_name_isSet = false;
    m_answering_body_name_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_date_made_isSet = false;
    m_date_made_isValid = false;

    m_has_attachments_isSet = false;
    m_has_attachments_isValid = false;

    m_has_linked_statements_isSet = false;
    m_has_linked_statements_isValid = false;

    m_house_isSet = false;
    m_house_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_linked_statements_isSet = false;
    m_linked_statements_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_member_role_isSet = false;
    m_member_role_isValid = false;

    m_notice_number_isSet = false;
    m_notice_number_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_uin_isSet = false;
    m_uin_isValid = false;
}

void OAIStatementsViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatementsViewModel::fromJsonObject(QJsonObject json) {

    m_answering_body_id_isValid = ::OpenAPI::fromJsonValue(m_answering_body_id, json[QString("answeringBodyId")]);
    m_answering_body_id_isSet = !json[QString("answeringBodyId")].isNull() && m_answering_body_id_isValid;

    m_answering_body_name_isValid = ::OpenAPI::fromJsonValue(m_answering_body_name, json[QString("answeringBodyName")]);
    m_answering_body_name_isSet = !json[QString("answeringBodyName")].isNull() && m_answering_body_name_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_date_made_isValid = ::OpenAPI::fromJsonValue(m_date_made, json[QString("dateMade")]);
    m_date_made_isSet = !json[QString("dateMade")].isNull() && m_date_made_isValid;

    m_has_attachments_isValid = ::OpenAPI::fromJsonValue(m_has_attachments, json[QString("hasAttachments")]);
    m_has_attachments_isSet = !json[QString("hasAttachments")].isNull() && m_has_attachments_isValid;

    m_has_linked_statements_isValid = ::OpenAPI::fromJsonValue(m_has_linked_statements, json[QString("hasLinkedStatements")]);
    m_has_linked_statements_isSet = !json[QString("hasLinkedStatements")].isNull() && m_has_linked_statements_isValid;

    m_house_isValid = ::OpenAPI::fromJsonValue(m_house, json[QString("house")]);
    m_house_isSet = !json[QString("house")].isNull() && m_house_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_linked_statements_isValid = ::OpenAPI::fromJsonValue(m_linked_statements, json[QString("linkedStatements")]);
    m_linked_statements_isSet = !json[QString("linkedStatements")].isNull() && m_linked_statements_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;

    m_member_id_isValid = ::OpenAPI::fromJsonValue(m_member_id, json[QString("memberId")]);
    m_member_id_isSet = !json[QString("memberId")].isNull() && m_member_id_isValid;

    m_member_role_isValid = ::OpenAPI::fromJsonValue(m_member_role, json[QString("memberRole")]);
    m_member_role_isSet = !json[QString("memberRole")].isNull() && m_member_role_isValid;

    m_notice_number_isValid = ::OpenAPI::fromJsonValue(m_notice_number, json[QString("noticeNumber")]);
    m_notice_number_isSet = !json[QString("noticeNumber")].isNull() && m_notice_number_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_uin_isValid = ::OpenAPI::fromJsonValue(m_uin, json[QString("uin")]);
    m_uin_isSet = !json[QString("uin")].isNull() && m_uin_isValid;
}

QString OAIStatementsViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatementsViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_answering_body_id_isSet) {
        obj.insert(QString("answeringBodyId"), ::OpenAPI::toJsonValue(m_answering_body_id));
    }
    if (m_answering_body_name_isSet) {
        obj.insert(QString("answeringBodyName"), ::OpenAPI::toJsonValue(m_answering_body_name));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_date_made_isSet) {
        obj.insert(QString("dateMade"), ::OpenAPI::toJsonValue(m_date_made));
    }
    if (m_has_attachments_isSet) {
        obj.insert(QString("hasAttachments"), ::OpenAPI::toJsonValue(m_has_attachments));
    }
    if (m_has_linked_statements_isSet) {
        obj.insert(QString("hasLinkedStatements"), ::OpenAPI::toJsonValue(m_has_linked_statements));
    }
    if (m_house.isSet()) {
        obj.insert(QString("house"), ::OpenAPI::toJsonValue(m_house));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_linked_statements.size() > 0) {
        obj.insert(QString("linkedStatements"), ::OpenAPI::toJsonValue(m_linked_statements));
    }
    if (m_member.isSet()) {
        obj.insert(QString("member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_member_id_isSet) {
        obj.insert(QString("memberId"), ::OpenAPI::toJsonValue(m_member_id));
    }
    if (m_member_role_isSet) {
        obj.insert(QString("memberRole"), ::OpenAPI::toJsonValue(m_member_role));
    }
    if (m_notice_number_isSet) {
        obj.insert(QString("noticeNumber"), ::OpenAPI::toJsonValue(m_notice_number));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_uin_isSet) {
        obj.insert(QString("uin"), ::OpenAPI::toJsonValue(m_uin));
    }
    return obj;
}

qint32 OAIStatementsViewModel::getAnsweringBodyId() const {
    return m_answering_body_id;
}
void OAIStatementsViewModel::setAnsweringBodyId(const qint32 &answering_body_id) {
    m_answering_body_id = answering_body_id;
    m_answering_body_id_isSet = true;
}

bool OAIStatementsViewModel::is_answering_body_id_Set() const{
    return m_answering_body_id_isSet;
}

bool OAIStatementsViewModel::is_answering_body_id_Valid() const{
    return m_answering_body_id_isValid;
}

QString OAIStatementsViewModel::getAnsweringBodyName() const {
    return m_answering_body_name;
}
void OAIStatementsViewModel::setAnsweringBodyName(const QString &answering_body_name) {
    m_answering_body_name = answering_body_name;
    m_answering_body_name_isSet = true;
}

bool OAIStatementsViewModel::is_answering_body_name_Set() const{
    return m_answering_body_name_isSet;
}

bool OAIStatementsViewModel::is_answering_body_name_Valid() const{
    return m_answering_body_name_isValid;
}

QList<OAIAttachmentViewModel> OAIStatementsViewModel::getAttachments() const {
    return m_attachments;
}
void OAIStatementsViewModel::setAttachments(const QList<OAIAttachmentViewModel> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIStatementsViewModel::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIStatementsViewModel::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QDateTime OAIStatementsViewModel::getDateMade() const {
    return m_date_made;
}
void OAIStatementsViewModel::setDateMade(const QDateTime &date_made) {
    m_date_made = date_made;
    m_date_made_isSet = true;
}

bool OAIStatementsViewModel::is_date_made_Set() const{
    return m_date_made_isSet;
}

bool OAIStatementsViewModel::is_date_made_Valid() const{
    return m_date_made_isValid;
}

bool OAIStatementsViewModel::isHasAttachments() const {
    return m_has_attachments;
}
void OAIStatementsViewModel::setHasAttachments(const bool &has_attachments) {
    m_has_attachments = has_attachments;
    m_has_attachments_isSet = true;
}

bool OAIStatementsViewModel::is_has_attachments_Set() const{
    return m_has_attachments_isSet;
}

bool OAIStatementsViewModel::is_has_attachments_Valid() const{
    return m_has_attachments_isValid;
}

bool OAIStatementsViewModel::isHasLinkedStatements() const {
    return m_has_linked_statements;
}
void OAIStatementsViewModel::setHasLinkedStatements(const bool &has_linked_statements) {
    m_has_linked_statements = has_linked_statements;
    m_has_linked_statements_isSet = true;
}

bool OAIStatementsViewModel::is_has_linked_statements_Set() const{
    return m_has_linked_statements_isSet;
}

bool OAIStatementsViewModel::is_has_linked_statements_Valid() const{
    return m_has_linked_statements_isValid;
}

OAIHouseEnum OAIStatementsViewModel::getHouse() const {
    return m_house;
}
void OAIStatementsViewModel::setHouse(const OAIHouseEnum &house) {
    m_house = house;
    m_house_isSet = true;
}

bool OAIStatementsViewModel::is_house_Set() const{
    return m_house_isSet;
}

bool OAIStatementsViewModel::is_house_Valid() const{
    return m_house_isValid;
}

qint32 OAIStatementsViewModel::getId() const {
    return m_id;
}
void OAIStatementsViewModel::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStatementsViewModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStatementsViewModel::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAILinkedStatements> OAIStatementsViewModel::getLinkedStatements() const {
    return m_linked_statements;
}
void OAIStatementsViewModel::setLinkedStatements(const QList<OAILinkedStatements> &linked_statements) {
    m_linked_statements = linked_statements;
    m_linked_statements_isSet = true;
}

bool OAIStatementsViewModel::is_linked_statements_Set() const{
    return m_linked_statements_isSet;
}

bool OAIStatementsViewModel::is_linked_statements_Valid() const{
    return m_linked_statements_isValid;
}

OAIMemberViewModel OAIStatementsViewModel::getMember() const {
    return m_member;
}
void OAIStatementsViewModel::setMember(const OAIMemberViewModel &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIStatementsViewModel::is_member_Set() const{
    return m_member_isSet;
}

bool OAIStatementsViewModel::is_member_Valid() const{
    return m_member_isValid;
}

qint32 OAIStatementsViewModel::getMemberId() const {
    return m_member_id;
}
void OAIStatementsViewModel::setMemberId(const qint32 &member_id) {
    m_member_id = member_id;
    m_member_id_isSet = true;
}

bool OAIStatementsViewModel::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAIStatementsViewModel::is_member_id_Valid() const{
    return m_member_id_isValid;
}

QString OAIStatementsViewModel::getMemberRole() const {
    return m_member_role;
}
void OAIStatementsViewModel::setMemberRole(const QString &member_role) {
    m_member_role = member_role;
    m_member_role_isSet = true;
}

bool OAIStatementsViewModel::is_member_role_Set() const{
    return m_member_role_isSet;
}

bool OAIStatementsViewModel::is_member_role_Valid() const{
    return m_member_role_isValid;
}

qint32 OAIStatementsViewModel::getNoticeNumber() const {
    return m_notice_number;
}
void OAIStatementsViewModel::setNoticeNumber(const qint32 &notice_number) {
    m_notice_number = notice_number;
    m_notice_number_isSet = true;
}

bool OAIStatementsViewModel::is_notice_number_Set() const{
    return m_notice_number_isSet;
}

bool OAIStatementsViewModel::is_notice_number_Valid() const{
    return m_notice_number_isValid;
}

QString OAIStatementsViewModel::getText() const {
    return m_text;
}
void OAIStatementsViewModel::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIStatementsViewModel::is_text_Set() const{
    return m_text_isSet;
}

bool OAIStatementsViewModel::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIStatementsViewModel::getTitle() const {
    return m_title;
}
void OAIStatementsViewModel::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIStatementsViewModel::is_title_Set() const{
    return m_title_isSet;
}

bool OAIStatementsViewModel::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIStatementsViewModel::getUin() const {
    return m_uin;
}
void OAIStatementsViewModel::setUin(const QString &uin) {
    m_uin = uin;
    m_uin_isSet = true;
}

bool OAIStatementsViewModel::is_uin_Set() const{
    return m_uin_isSet;
}

bool OAIStatementsViewModel::is_uin_Valid() const{
    return m_uin_isValid;
}

bool OAIStatementsViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answering_body_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answering_body_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_linked_statements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_statements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notice_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatementsViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
