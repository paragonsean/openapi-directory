/**
 * Written Questions Service API
 * Data around written questions and answers, as well as written ministerial statements.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HouseEnum from '../model/HouseEnum';
import ProblemDetails from '../model/ProblemDetails';
import StatementsViewModelItem from '../model/StatementsViewModelItem';
import StatementsViewModelSearchResult from '../model/StatementsViewModelSearchResult';

/**
* WrittenStatements service.
* @module api/WrittenStatementsApi
* @version v1
*/
export default class WrittenStatementsApi {

    /**
    * Constructs a new WrittenStatementsApi. 
    * @alias module:api/WrittenStatementsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiWrittenstatementsStatementsDateUinGet operation.
     * @callback module:api/WrittenStatementsApi~apiWrittenstatementsStatementsDateUinGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatementsViewModelItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a written statemnet
     * @param {Date} date Written statement on date specified
     * @param {String} uin Written statement with uid specified
     * @param {Object} opts Optional parameters
     * @param {Boolean} [expandMember] Expand the details of Members in the results
     * @param {module:api/WrittenStatementsApi~apiWrittenstatementsStatementsDateUinGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatementsViewModelItem}
     */
    apiWrittenstatementsStatementsDateUinGet(date, uin, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling apiWrittenstatementsStatementsDateUinGet");
      }
      // verify the required parameter 'uin' is set
      if (uin === undefined || uin === null) {
        throw new Error("Missing the required parameter 'uin' when calling apiWrittenstatementsStatementsDateUinGet");
      }

      let pathParams = {
        'date': date,
        'uin': uin
      };
      let queryParams = {
        'expandMember': opts['expandMember']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = StatementsViewModelItem;
      return this.apiClient.callApi(
        '/api/writtenstatements/statements/{date}/{uin}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWrittenstatementsStatementsGet operation.
     * @callback module:api/WrittenStatementsApi~apiWrittenstatementsStatementsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatementsViewModelSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of written statements
     * @param {Object} opts Optional parameters
     * @param {Date} [madeWhenFrom] Written statements made on or after the date specified. Date format yyyy-mm-dd
     * @param {Date} [madeWhenTo] Written statements made on or before the date specified. Date format yyyy-mm-dd
     * @param {String} [searchTerm] Written questions / statements containing the search term specified, searches item content
     * @param {String} [uIN] Written questions / statements with the uin specified
     * @param {Array.<Number>} [answeringBodies] Written questions / statements relating to the answering bodies with the IDs specified
     * @param {Array.<Number>} [members] Written questions / statements relating to the members with the IDs specified
     * @param {module:model/HouseEnum} [house] Written questions / statements relating to the House specified
     * @param {Number} [skip] Number of records to skip, default is 0
     * @param {Number} [take] Number of records to take, default is 20
     * @param {Boolean} [expandMember] Expand the details of Members in the results
     * @param {module:api/WrittenStatementsApi~apiWrittenstatementsStatementsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatementsViewModelSearchResult}
     */
    apiWrittenstatementsStatementsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'madeWhenFrom': opts['madeWhenFrom'],
        'madeWhenTo': opts['madeWhenTo'],
        'searchTerm': opts['searchTerm'],
        'uIN': opts['uIN'],
        'answeringBodies': this.apiClient.buildCollectionParam(opts['answeringBodies'], 'multi'),
        'members': this.apiClient.buildCollectionParam(opts['members'], 'multi'),
        'house': opts['house'],
        'skip': opts['skip'],
        'take': opts['take'],
        'expandMember': opts['expandMember']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = StatementsViewModelSearchResult;
      return this.apiClient.callApi(
        '/api/writtenstatements/statements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWrittenstatementsStatementsIdGet operation.
     * @callback module:api/WrittenStatementsApi~apiWrittenstatementsStatementsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatementsViewModelSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a written statement
     * @param {Number} id Written statement with ID specified
     * @param {Object} opts Optional parameters
     * @param {Boolean} [expandMember] Expand the details of Members in the results
     * @param {module:api/WrittenStatementsApi~apiWrittenstatementsStatementsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatementsViewModelSearchResult}
     */
    apiWrittenstatementsStatementsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiWrittenstatementsStatementsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'expandMember': opts['expandMember']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = StatementsViewModelSearchResult;
      return this.apiClient.callApi(
        '/api/writtenstatements/statements/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
