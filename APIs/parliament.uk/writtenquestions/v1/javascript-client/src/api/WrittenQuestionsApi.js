/**
 * Written Questions Service API
 * Data around written questions and answers, as well as written ministerial statements.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Answered from '../model/Answered';
import HouseEnum from '../model/HouseEnum';
import ProblemDetails from '../model/ProblemDetails';
import QuestionStatusEnum from '../model/QuestionStatusEnum';
import QuestionsViewModelItem from '../model/QuestionsViewModelItem';
import QuestionsViewModelSearchResult from '../model/QuestionsViewModelSearchResult';

/**
* WrittenQuestions service.
* @module api/WrittenQuestionsApi
* @version v1
*/
export default class WrittenQuestionsApi {

    /**
    * Constructs a new WrittenQuestionsApi. 
    * @alias module:api/WrittenQuestionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiWrittenquestionsQuestionsDateUinGet operation.
     * @callback module:api/WrittenQuestionsApi~apiWrittenquestionsQuestionsDateUinGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionsViewModelItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a written question
     * @param {Date} date Written question on date specified
     * @param {String} uin Written question with uid specified
     * @param {Object} opts Optional parameters
     * @param {Boolean} [expandMember] Expand the details of Members in the results
     * @param {module:api/WrittenQuestionsApi~apiWrittenquestionsQuestionsDateUinGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionsViewModelItem}
     */
    apiWrittenquestionsQuestionsDateUinGet(date, uin, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling apiWrittenquestionsQuestionsDateUinGet");
      }
      // verify the required parameter 'uin' is set
      if (uin === undefined || uin === null) {
        throw new Error("Missing the required parameter 'uin' when calling apiWrittenquestionsQuestionsDateUinGet");
      }

      let pathParams = {
        'date': date,
        'uin': uin
      };
      let queryParams = {
        'expandMember': opts['expandMember']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = QuestionsViewModelItem;
      return this.apiClient.callApi(
        '/api/writtenquestions/questions/{date}/{uin}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWrittenquestionsQuestionsGet operation.
     * @callback module:api/WrittenQuestionsApi~apiWrittenquestionsQuestionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionsViewModelSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of written questions
     * @param {Object} opts Optional parameters
     * @param {Number} [askingMemberId] Written questions asked by member with member ID specified
     * @param {Number} [answeringMemberId] Written questions answered by member with member ID specified
     * @param {Date} [tabledWhenFrom] Written questions tabled on or after the date specified. Date format yyyy-mm-dd
     * @param {Date} [tabledWhenTo] Written questions tabled on or before the date specified. Date format yyyy-mm-dd
     * @param {module:model/Answered} [answered] Written questions that have been answered, unanswered or either.
     * @param {Date} [answeredWhenFrom] Written questions answered on or after the date specified. Date format yyyy-mm-dd
     * @param {Date} [answeredWhenTo] Written questions answered on or before the date specified. Date format yyyy-mm-dd
     * @param {module:model/QuestionStatusEnum} [questionStatus] Written questions with the status specified
     * @param {Boolean} [includeWithdrawn] Include written questions that have been withdrawn
     * @param {Boolean} [expandMember] Expand the details of Members in the results
     * @param {Date} [correctedWhenFrom] Written questions corrected on or after the date specified. Date format yyyy-mm-dd
     * @param {Date} [correctedWhenTo] Written questions corrected on or before the date specified. Date format yyyy-mm-dd
     * @param {String} [searchTerm] Written questions / statements containing the search term specified, searches item content
     * @param {String} [uIN] Written questions / statements with the uin specified
     * @param {Array.<Number>} [answeringBodies] Written questions / statements relating to the answering bodies with the IDs specified
     * @param {Array.<Number>} [members] Written questions / statements relating to the members with the IDs specified
     * @param {module:model/HouseEnum} [house] Written questions / statements relating to the House specified
     * @param {Number} [skip] Number of records to skip, default is 0
     * @param {Number} [take] Number of records to take, default is 20
     * @param {module:api/WrittenQuestionsApi~apiWrittenquestionsQuestionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionsViewModelSearchResult}
     */
    apiWrittenquestionsQuestionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'askingMemberId': opts['askingMemberId'],
        'answeringMemberId': opts['answeringMemberId'],
        'tabledWhenFrom': opts['tabledWhenFrom'],
        'tabledWhenTo': opts['tabledWhenTo'],
        'answered': opts['answered'],
        'answeredWhenFrom': opts['answeredWhenFrom'],
        'answeredWhenTo': opts['answeredWhenTo'],
        'questionStatus': opts['questionStatus'],
        'includeWithdrawn': opts['includeWithdrawn'],
        'expandMember': opts['expandMember'],
        'correctedWhenFrom': opts['correctedWhenFrom'],
        'correctedWhenTo': opts['correctedWhenTo'],
        'searchTerm': opts['searchTerm'],
        'uIN': opts['uIN'],
        'answeringBodies': this.apiClient.buildCollectionParam(opts['answeringBodies'], 'multi'),
        'members': this.apiClient.buildCollectionParam(opts['members'], 'multi'),
        'house': opts['house'],
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = QuestionsViewModelSearchResult;
      return this.apiClient.callApi(
        '/api/writtenquestions/questions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWrittenquestionsQuestionsIdGet operation.
     * @callback module:api/WrittenQuestionsApi~apiWrittenquestionsQuestionsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionsViewModelItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a written question
     * @param {Number} id written question with ID specified
     * @param {Object} opts Optional parameters
     * @param {Boolean} [expandMember] Expand the details of Members in the result
     * @param {module:api/WrittenQuestionsApi~apiWrittenquestionsQuestionsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionsViewModelItem}
     */
    apiWrittenquestionsQuestionsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiWrittenquestionsQuestionsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'expandMember': opts['expandMember']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = QuestionsViewModelItem;
      return this.apiClient.callApi(
        '/api/writtenquestions/questions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
