/**
 * Written Questions Service API
 * Data around written questions and answers, as well as written ministerial statements.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttachmentViewModel from './AttachmentViewModel';
import HouseEnum from './HouseEnum';
import LinkedStatements from './LinkedStatements';
import MemberViewModel from './MemberViewModel';

/**
 * The StatementsViewModel model module.
 * @module model/StatementsViewModel
 * @version v1
 */
class StatementsViewModel {
    /**
     * Constructs a new <code>StatementsViewModel</code>.
     * @alias module:model/StatementsViewModel
     */
    constructor() { 
        
        StatementsViewModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StatementsViewModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatementsViewModel} obj Optional instance to populate.
     * @return {module:model/StatementsViewModel} The populated <code>StatementsViewModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatementsViewModel();

            if (data.hasOwnProperty('answeringBodyId')) {
                obj['answeringBodyId'] = ApiClient.convertToType(data['answeringBodyId'], 'Number');
            }
            if (data.hasOwnProperty('answeringBodyName')) {
                obj['answeringBodyName'] = ApiClient.convertToType(data['answeringBodyName'], 'String');
            }
            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [AttachmentViewModel]);
            }
            if (data.hasOwnProperty('dateMade')) {
                obj['dateMade'] = ApiClient.convertToType(data['dateMade'], 'Date');
            }
            if (data.hasOwnProperty('hasAttachments')) {
                obj['hasAttachments'] = ApiClient.convertToType(data['hasAttachments'], 'Boolean');
            }
            if (data.hasOwnProperty('hasLinkedStatements')) {
                obj['hasLinkedStatements'] = ApiClient.convertToType(data['hasLinkedStatements'], 'Boolean');
            }
            if (data.hasOwnProperty('house')) {
                obj['house'] = HouseEnum.constructFromObject(data['house']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('linkedStatements')) {
                obj['linkedStatements'] = ApiClient.convertToType(data['linkedStatements'], [LinkedStatements]);
            }
            if (data.hasOwnProperty('member')) {
                obj['member'] = MemberViewModel.constructFromObject(data['member']);
            }
            if (data.hasOwnProperty('memberId')) {
                obj['memberId'] = ApiClient.convertToType(data['memberId'], 'Number');
            }
            if (data.hasOwnProperty('memberRole')) {
                obj['memberRole'] = ApiClient.convertToType(data['memberRole'], 'String');
            }
            if (data.hasOwnProperty('noticeNumber')) {
                obj['noticeNumber'] = ApiClient.convertToType(data['noticeNumber'], 'Number');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('uin')) {
                obj['uin'] = ApiClient.convertToType(data['uin'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StatementsViewModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StatementsViewModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['answeringBodyName'] && !(typeof data['answeringBodyName'] === 'string' || data['answeringBodyName'] instanceof String)) {
            throw new Error("Expected the field `answeringBodyName` to be a primitive type in the JSON string but got " + data['answeringBodyName']);
        }
        if (data['attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachments'])) {
                throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
            }
            // validate the optional field `attachments` (array)
            for (const item of data['attachments']) {
                AttachmentViewModel.validateJSON(item);
            };
        }
        if (data['linkedStatements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['linkedStatements'])) {
                throw new Error("Expected the field `linkedStatements` to be an array in the JSON data but got " + data['linkedStatements']);
            }
            // validate the optional field `linkedStatements` (array)
            for (const item of data['linkedStatements']) {
                LinkedStatements.validateJSON(item);
            };
        }
        // validate the optional field `member`
        if (data['member']) { // data not null
          MemberViewModel.validateJSON(data['member']);
        }
        // ensure the json data is a string
        if (data['memberRole'] && !(typeof data['memberRole'] === 'string' || data['memberRole'] instanceof String)) {
            throw new Error("Expected the field `memberRole` to be a primitive type in the JSON string but got " + data['memberRole']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['uin'] && !(typeof data['uin'] === 'string' || data['uin'] instanceof String)) {
            throw new Error("Expected the field `uin` to be a primitive type in the JSON string but got " + data['uin']);
        }

        return true;
    }


}



/**
 * @member {Number} answeringBodyId
 */
StatementsViewModel.prototype['answeringBodyId'] = undefined;

/**
 * @member {String} answeringBodyName
 */
StatementsViewModel.prototype['answeringBodyName'] = undefined;

/**
 * @member {Array.<module:model/AttachmentViewModel>} attachments
 */
StatementsViewModel.prototype['attachments'] = undefined;

/**
 * @member {Date} dateMade
 */
StatementsViewModel.prototype['dateMade'] = undefined;

/**
 * @member {Boolean} hasAttachments
 */
StatementsViewModel.prototype['hasAttachments'] = undefined;

/**
 * @member {Boolean} hasLinkedStatements
 */
StatementsViewModel.prototype['hasLinkedStatements'] = undefined;

/**
 * @member {module:model/HouseEnum} house
 */
StatementsViewModel.prototype['house'] = undefined;

/**
 * @member {Number} id
 */
StatementsViewModel.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/LinkedStatements>} linkedStatements
 */
StatementsViewModel.prototype['linkedStatements'] = undefined;

/**
 * @member {module:model/MemberViewModel} member
 */
StatementsViewModel.prototype['member'] = undefined;

/**
 * @member {Number} memberId
 */
StatementsViewModel.prototype['memberId'] = undefined;

/**
 * @member {String} memberRole
 */
StatementsViewModel.prototype['memberRole'] = undefined;

/**
 * @member {Number} noticeNumber
 */
StatementsViewModel.prototype['noticeNumber'] = undefined;

/**
 * @member {String} text
 */
StatementsViewModel.prototype['text'] = undefined;

/**
 * @member {String} title
 */
StatementsViewModel.prototype['title'] = undefined;

/**
 * @member {String} uin
 */
StatementsViewModel.prototype['uin'] = undefined;






export default StatementsViewModel;

