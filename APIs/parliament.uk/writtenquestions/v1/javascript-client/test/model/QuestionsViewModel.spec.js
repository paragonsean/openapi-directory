/**
 * Written Questions Service API
 * Data around written questions and answers, as well as written ministerial statements.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WrittenQuestionsServiceApi);
  }
}(this, function(expect, WrittenQuestionsServiceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('QuestionsViewModel', function() {
    it('should create an instance of QuestionsViewModel', function() {
      // uncomment below and update the code to test QuestionsViewModel
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be.a(WrittenQuestionsServiceApi.QuestionsViewModel);
    });

    it('should have the property answerIsCorrection (base name: "answerIsCorrection")', function() {
      // uncomment below and update the code to test the property answerIsCorrection
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property answerIsHolding (base name: "answerIsHolding")', function() {
      // uncomment below and update the code to test the property answerIsHolding
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property answerText (base name: "answerText")', function() {
      // uncomment below and update the code to test the property answerText
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property answeringBodyId (base name: "answeringBodyId")', function() {
      // uncomment below and update the code to test the property answeringBodyId
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property answeringBodyName (base name: "answeringBodyName")', function() {
      // uncomment below and update the code to test the property answeringBodyName
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property answeringMember (base name: "answeringMember")', function() {
      // uncomment below and update the code to test the property answeringMember
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property answeringMemberId (base name: "answeringMemberId")', function() {
      // uncomment below and update the code to test the property answeringMemberId
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property askingMember (base name: "askingMember")', function() {
      // uncomment below and update the code to test the property askingMember
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property askingMemberId (base name: "askingMemberId")', function() {
      // uncomment below and update the code to test the property askingMemberId
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property attachmentCount (base name: "attachmentCount")', function() {
      // uncomment below and update the code to test the property attachmentCount
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property attachments (base name: "attachments")', function() {
      // uncomment below and update the code to test the property attachments
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property comparableAnswerText (base name: "comparableAnswerText")', function() {
      // uncomment below and update the code to test the property comparableAnswerText
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property correctingMember (base name: "correctingMember")', function() {
      // uncomment below and update the code to test the property correctingMember
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property correctingMemberId (base name: "correctingMemberId")', function() {
      // uncomment below and update the code to test the property correctingMemberId
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property dateAnswerCorrected (base name: "dateAnswerCorrected")', function() {
      // uncomment below and update the code to test the property dateAnswerCorrected
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property dateAnswered (base name: "dateAnswered")', function() {
      // uncomment below and update the code to test the property dateAnswered
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property dateForAnswer (base name: "dateForAnswer")', function() {
      // uncomment below and update the code to test the property dateForAnswer
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property dateHoldingAnswer (base name: "dateHoldingAnswer")', function() {
      // uncomment below and update the code to test the property dateHoldingAnswer
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property dateTabled (base name: "dateTabled")', function() {
      // uncomment below and update the code to test the property dateTabled
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property groupedQuestions (base name: "groupedQuestions")', function() {
      // uncomment below and update the code to test the property groupedQuestions
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property groupedQuestionsDates (base name: "groupedQuestionsDates")', function() {
      // uncomment below and update the code to test the property groupedQuestionsDates
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property heading (base name: "heading")', function() {
      // uncomment below and update the code to test the property heading
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property house (base name: "house")', function() {
      // uncomment below and update the code to test the property house
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property isNamedDay (base name: "isNamedDay")', function() {
      // uncomment below and update the code to test the property isNamedDay
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property isWithdrawn (base name: "isWithdrawn")', function() {
      // uncomment below and update the code to test the property isWithdrawn
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property memberHasInterest (base name: "memberHasInterest")', function() {
      // uncomment below and update the code to test the property memberHasInterest
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property originalAnswerText (base name: "originalAnswerText")', function() {
      // uncomment below and update the code to test the property originalAnswerText
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property questionText (base name: "questionText")', function() {
      // uncomment below and update the code to test the property questionText
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property uin (base name: "uin")', function() {
      // uncomment below and update the code to test the property uin
      //var instance = new WrittenQuestionsServiceApi.QuestionsViewModel();
      //expect(instance).to.be();
    });

  });

}));
