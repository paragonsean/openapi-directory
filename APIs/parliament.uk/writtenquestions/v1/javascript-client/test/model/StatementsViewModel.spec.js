/**
 * Written Questions Service API
 * Data around written questions and answers, as well as written ministerial statements.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WrittenQuestionsServiceApi);
  }
}(this, function(expect, WrittenQuestionsServiceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WrittenQuestionsServiceApi.StatementsViewModel();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StatementsViewModel', function() {
    it('should create an instance of StatementsViewModel', function() {
      // uncomment below and update the code to test StatementsViewModel
      //var instance = new WrittenQuestionsServiceApi.StatementsViewModel();
      //expect(instance).to.be.a(WrittenQuestionsServiceApi.StatementsViewModel);
    });

    it('should have the property answeringBodyId (base name: "answeringBodyId")', function() {
      // uncomment below and update the code to test the property answeringBodyId
      //var instance = new WrittenQuestionsServiceApi.StatementsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property answeringBodyName (base name: "answeringBodyName")', function() {
      // uncomment below and update the code to test the property answeringBodyName
      //var instance = new WrittenQuestionsServiceApi.StatementsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property attachments (base name: "attachments")', function() {
      // uncomment below and update the code to test the property attachments
      //var instance = new WrittenQuestionsServiceApi.StatementsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property dateMade (base name: "dateMade")', function() {
      // uncomment below and update the code to test the property dateMade
      //var instance = new WrittenQuestionsServiceApi.StatementsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property hasAttachments (base name: "hasAttachments")', function() {
      // uncomment below and update the code to test the property hasAttachments
      //var instance = new WrittenQuestionsServiceApi.StatementsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property hasLinkedStatements (base name: "hasLinkedStatements")', function() {
      // uncomment below and update the code to test the property hasLinkedStatements
      //var instance = new WrittenQuestionsServiceApi.StatementsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property house (base name: "house")', function() {
      // uncomment below and update the code to test the property house
      //var instance = new WrittenQuestionsServiceApi.StatementsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new WrittenQuestionsServiceApi.StatementsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property linkedStatements (base name: "linkedStatements")', function() {
      // uncomment below and update the code to test the property linkedStatements
      //var instance = new WrittenQuestionsServiceApi.StatementsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property member (base name: "member")', function() {
      // uncomment below and update the code to test the property member
      //var instance = new WrittenQuestionsServiceApi.StatementsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property memberId (base name: "memberId")', function() {
      // uncomment below and update the code to test the property memberId
      //var instance = new WrittenQuestionsServiceApi.StatementsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property memberRole (base name: "memberRole")', function() {
      // uncomment below and update the code to test the property memberRole
      //var instance = new WrittenQuestionsServiceApi.StatementsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property noticeNumber (base name: "noticeNumber")', function() {
      // uncomment below and update the code to test the property noticeNumber
      //var instance = new WrittenQuestionsServiceApi.StatementsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property text (base name: "text")', function() {
      // uncomment below and update the code to test the property text
      //var instance = new WrittenQuestionsServiceApi.StatementsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new WrittenQuestionsServiceApi.StatementsViewModel();
      //expect(instance).to.be();
    });

    it('should have the property uin (base name: "uin")', function() {
      // uncomment below and update the code to test the property uin
      //var instance = new WrittenQuestionsServiceApi.StatementsViewModel();
      //expect(instance).to.be();
    });

  });

}));
