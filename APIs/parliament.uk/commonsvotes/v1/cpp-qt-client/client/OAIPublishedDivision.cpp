/**
 * Commons Votes API
 * An API that allows querying of Commons Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublishedDivision.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublishedDivision::OAIPublishedDivision(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublishedDivision::OAIPublishedDivision() {
    this->initializeModel();
}

OAIPublishedDivision::~OAIPublishedDivision() {}

void OAIPublishedDivision::initializeModel() {

    m_aye_count_isSet = false;
    m_aye_count_isValid = false;

    m_aye_tellers_isSet = false;
    m_aye_tellers_isValid = false;

    m_ayes_isSet = false;
    m_ayes_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_division_id_isSet = false;
    m_division_id_isValid = false;

    m_double_majority_aye_count_isSet = false;
    m_double_majority_aye_count_isValid = false;

    m_double_majority_no_count_isSet = false;
    m_double_majority_no_count_isValid = false;

    m_evel_country_isSet = false;
    m_evel_country_isValid = false;

    m_evel_type_isSet = false;
    m_evel_type_isValid = false;

    m_friendly_description_isSet = false;
    m_friendly_description_isValid = false;

    m_friendly_title_isSet = false;
    m_friendly_title_isValid = false;

    m_is_deferred_isSet = false;
    m_is_deferred_isValid = false;

    m_no_count_isSet = false;
    m_no_count_isValid = false;

    m_no_tellers_isSet = false;
    m_no_tellers_isValid = false;

    m_no_vote_recorded_isSet = false;
    m_no_vote_recorded_isValid = false;

    m_noes_isSet = false;
    m_noes_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_publication_updated_isSet = false;
    m_publication_updated_isValid = false;

    m_remote_voting_end_isSet = false;
    m_remote_voting_end_isValid = false;

    m_remote_voting_start_isSet = false;
    m_remote_voting_start_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIPublishedDivision::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublishedDivision::fromJsonObject(QJsonObject json) {

    m_aye_count_isValid = ::OpenAPI::fromJsonValue(m_aye_count, json[QString("AyeCount")]);
    m_aye_count_isSet = !json[QString("AyeCount")].isNull() && m_aye_count_isValid;

    m_aye_tellers_isValid = ::OpenAPI::fromJsonValue(m_aye_tellers, json[QString("AyeTellers")]);
    m_aye_tellers_isSet = !json[QString("AyeTellers")].isNull() && m_aye_tellers_isValid;

    m_ayes_isValid = ::OpenAPI::fromJsonValue(m_ayes, json[QString("Ayes")]);
    m_ayes_isSet = !json[QString("Ayes")].isNull() && m_ayes_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_division_id_isValid = ::OpenAPI::fromJsonValue(m_division_id, json[QString("DivisionId")]);
    m_division_id_isSet = !json[QString("DivisionId")].isNull() && m_division_id_isValid;

    m_double_majority_aye_count_isValid = ::OpenAPI::fromJsonValue(m_double_majority_aye_count, json[QString("DoubleMajorityAyeCount")]);
    m_double_majority_aye_count_isSet = !json[QString("DoubleMajorityAyeCount")].isNull() && m_double_majority_aye_count_isValid;

    m_double_majority_no_count_isValid = ::OpenAPI::fromJsonValue(m_double_majority_no_count, json[QString("DoubleMajorityNoCount")]);
    m_double_majority_no_count_isSet = !json[QString("DoubleMajorityNoCount")].isNull() && m_double_majority_no_count_isValid;

    m_evel_country_isValid = ::OpenAPI::fromJsonValue(m_evel_country, json[QString("EVELCountry")]);
    m_evel_country_isSet = !json[QString("EVELCountry")].isNull() && m_evel_country_isValid;

    m_evel_type_isValid = ::OpenAPI::fromJsonValue(m_evel_type, json[QString("EVELType")]);
    m_evel_type_isSet = !json[QString("EVELType")].isNull() && m_evel_type_isValid;

    m_friendly_description_isValid = ::OpenAPI::fromJsonValue(m_friendly_description, json[QString("FriendlyDescription")]);
    m_friendly_description_isSet = !json[QString("FriendlyDescription")].isNull() && m_friendly_description_isValid;

    m_friendly_title_isValid = ::OpenAPI::fromJsonValue(m_friendly_title, json[QString("FriendlyTitle")]);
    m_friendly_title_isSet = !json[QString("FriendlyTitle")].isNull() && m_friendly_title_isValid;

    m_is_deferred_isValid = ::OpenAPI::fromJsonValue(m_is_deferred, json[QString("IsDeferred")]);
    m_is_deferred_isSet = !json[QString("IsDeferred")].isNull() && m_is_deferred_isValid;

    m_no_count_isValid = ::OpenAPI::fromJsonValue(m_no_count, json[QString("NoCount")]);
    m_no_count_isSet = !json[QString("NoCount")].isNull() && m_no_count_isValid;

    m_no_tellers_isValid = ::OpenAPI::fromJsonValue(m_no_tellers, json[QString("NoTellers")]);
    m_no_tellers_isSet = !json[QString("NoTellers")].isNull() && m_no_tellers_isValid;

    m_no_vote_recorded_isValid = ::OpenAPI::fromJsonValue(m_no_vote_recorded, json[QString("NoVoteRecorded")]);
    m_no_vote_recorded_isSet = !json[QString("NoVoteRecorded")].isNull() && m_no_vote_recorded_isValid;

    m_noes_isValid = ::OpenAPI::fromJsonValue(m_noes, json[QString("Noes")]);
    m_noes_isSet = !json[QString("Noes")].isNull() && m_noes_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_publication_updated_isValid = ::OpenAPI::fromJsonValue(m_publication_updated, json[QString("PublicationUpdated")]);
    m_publication_updated_isSet = !json[QString("PublicationUpdated")].isNull() && m_publication_updated_isValid;

    m_remote_voting_end_isValid = ::OpenAPI::fromJsonValue(m_remote_voting_end, json[QString("RemoteVotingEnd")]);
    m_remote_voting_end_isSet = !json[QString("RemoteVotingEnd")].isNull() && m_remote_voting_end_isValid;

    m_remote_voting_start_isValid = ::OpenAPI::fromJsonValue(m_remote_voting_start, json[QString("RemoteVotingStart")]);
    m_remote_voting_start_isSet = !json[QString("RemoteVotingStart")].isNull() && m_remote_voting_start_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;
}

QString OAIPublishedDivision::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublishedDivision::asJsonObject() const {
    QJsonObject obj;
    if (m_aye_count_isSet) {
        obj.insert(QString("AyeCount"), ::OpenAPI::toJsonValue(m_aye_count));
    }
    if (m_aye_tellers.size() > 0) {
        obj.insert(QString("AyeTellers"), ::OpenAPI::toJsonValue(m_aye_tellers));
    }
    if (m_ayes.size() > 0) {
        obj.insert(QString("Ayes"), ::OpenAPI::toJsonValue(m_ayes));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_division_id_isSet) {
        obj.insert(QString("DivisionId"), ::OpenAPI::toJsonValue(m_division_id));
    }
    if (m_double_majority_aye_count_isSet) {
        obj.insert(QString("DoubleMajorityAyeCount"), ::OpenAPI::toJsonValue(m_double_majority_aye_count));
    }
    if (m_double_majority_no_count_isSet) {
        obj.insert(QString("DoubleMajorityNoCount"), ::OpenAPI::toJsonValue(m_double_majority_no_count));
    }
    if (m_evel_country_isSet) {
        obj.insert(QString("EVELCountry"), ::OpenAPI::toJsonValue(m_evel_country));
    }
    if (m_evel_type_isSet) {
        obj.insert(QString("EVELType"), ::OpenAPI::toJsonValue(m_evel_type));
    }
    if (m_friendly_description_isSet) {
        obj.insert(QString("FriendlyDescription"), ::OpenAPI::toJsonValue(m_friendly_description));
    }
    if (m_friendly_title_isSet) {
        obj.insert(QString("FriendlyTitle"), ::OpenAPI::toJsonValue(m_friendly_title));
    }
    if (m_is_deferred_isSet) {
        obj.insert(QString("IsDeferred"), ::OpenAPI::toJsonValue(m_is_deferred));
    }
    if (m_no_count_isSet) {
        obj.insert(QString("NoCount"), ::OpenAPI::toJsonValue(m_no_count));
    }
    if (m_no_tellers.size() > 0) {
        obj.insert(QString("NoTellers"), ::OpenAPI::toJsonValue(m_no_tellers));
    }
    if (m_no_vote_recorded.size() > 0) {
        obj.insert(QString("NoVoteRecorded"), ::OpenAPI::toJsonValue(m_no_vote_recorded));
    }
    if (m_noes.size() > 0) {
        obj.insert(QString("Noes"), ::OpenAPI::toJsonValue(m_noes));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_publication_updated_isSet) {
        obj.insert(QString("PublicationUpdated"), ::OpenAPI::toJsonValue(m_publication_updated));
    }
    if (m_remote_voting_end_isSet) {
        obj.insert(QString("RemoteVotingEnd"), ::OpenAPI::toJsonValue(m_remote_voting_end));
    }
    if (m_remote_voting_start_isSet) {
        obj.insert(QString("RemoteVotingStart"), ::OpenAPI::toJsonValue(m_remote_voting_start));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint32 OAIPublishedDivision::getAyeCount() const {
    return m_aye_count;
}
void OAIPublishedDivision::setAyeCount(const qint32 &aye_count) {
    m_aye_count = aye_count;
    m_aye_count_isSet = true;
}

bool OAIPublishedDivision::is_aye_count_Set() const{
    return m_aye_count_isSet;
}

bool OAIPublishedDivision::is_aye_count_Valid() const{
    return m_aye_count_isValid;
}

QList<OAIRecordedMember> OAIPublishedDivision::getAyeTellers() const {
    return m_aye_tellers;
}
void OAIPublishedDivision::setAyeTellers(const QList<OAIRecordedMember> &aye_tellers) {
    m_aye_tellers = aye_tellers;
    m_aye_tellers_isSet = true;
}

bool OAIPublishedDivision::is_aye_tellers_Set() const{
    return m_aye_tellers_isSet;
}

bool OAIPublishedDivision::is_aye_tellers_Valid() const{
    return m_aye_tellers_isValid;
}

QList<OAIRecordedMember> OAIPublishedDivision::getAyes() const {
    return m_ayes;
}
void OAIPublishedDivision::setAyes(const QList<OAIRecordedMember> &ayes) {
    m_ayes = ayes;
    m_ayes_isSet = true;
}

bool OAIPublishedDivision::is_ayes_Set() const{
    return m_ayes_isSet;
}

bool OAIPublishedDivision::is_ayes_Valid() const{
    return m_ayes_isValid;
}

QDateTime OAIPublishedDivision::getDate() const {
    return m_date;
}
void OAIPublishedDivision::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIPublishedDivision::is_date_Set() const{
    return m_date_isSet;
}

bool OAIPublishedDivision::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAIPublishedDivision::getDivisionId() const {
    return m_division_id;
}
void OAIPublishedDivision::setDivisionId(const qint32 &division_id) {
    m_division_id = division_id;
    m_division_id_isSet = true;
}

bool OAIPublishedDivision::is_division_id_Set() const{
    return m_division_id_isSet;
}

bool OAIPublishedDivision::is_division_id_Valid() const{
    return m_division_id_isValid;
}

qint32 OAIPublishedDivision::getDoubleMajorityAyeCount() const {
    return m_double_majority_aye_count;
}
void OAIPublishedDivision::setDoubleMajorityAyeCount(const qint32 &double_majority_aye_count) {
    m_double_majority_aye_count = double_majority_aye_count;
    m_double_majority_aye_count_isSet = true;
}

bool OAIPublishedDivision::is_double_majority_aye_count_Set() const{
    return m_double_majority_aye_count_isSet;
}

bool OAIPublishedDivision::is_double_majority_aye_count_Valid() const{
    return m_double_majority_aye_count_isValid;
}

qint32 OAIPublishedDivision::getDoubleMajorityNoCount() const {
    return m_double_majority_no_count;
}
void OAIPublishedDivision::setDoubleMajorityNoCount(const qint32 &double_majority_no_count) {
    m_double_majority_no_count = double_majority_no_count;
    m_double_majority_no_count_isSet = true;
}

bool OAIPublishedDivision::is_double_majority_no_count_Set() const{
    return m_double_majority_no_count_isSet;
}

bool OAIPublishedDivision::is_double_majority_no_count_Valid() const{
    return m_double_majority_no_count_isValid;
}

QString OAIPublishedDivision::getEvelCountry() const {
    return m_evel_country;
}
void OAIPublishedDivision::setEvelCountry(const QString &evel_country) {
    m_evel_country = evel_country;
    m_evel_country_isSet = true;
}

bool OAIPublishedDivision::is_evel_country_Set() const{
    return m_evel_country_isSet;
}

bool OAIPublishedDivision::is_evel_country_Valid() const{
    return m_evel_country_isValid;
}

QString OAIPublishedDivision::getEvelType() const {
    return m_evel_type;
}
void OAIPublishedDivision::setEvelType(const QString &evel_type) {
    m_evel_type = evel_type;
    m_evel_type_isSet = true;
}

bool OAIPublishedDivision::is_evel_type_Set() const{
    return m_evel_type_isSet;
}

bool OAIPublishedDivision::is_evel_type_Valid() const{
    return m_evel_type_isValid;
}

QString OAIPublishedDivision::getFriendlyDescription() const {
    return m_friendly_description;
}
void OAIPublishedDivision::setFriendlyDescription(const QString &friendly_description) {
    m_friendly_description = friendly_description;
    m_friendly_description_isSet = true;
}

bool OAIPublishedDivision::is_friendly_description_Set() const{
    return m_friendly_description_isSet;
}

bool OAIPublishedDivision::is_friendly_description_Valid() const{
    return m_friendly_description_isValid;
}

QString OAIPublishedDivision::getFriendlyTitle() const {
    return m_friendly_title;
}
void OAIPublishedDivision::setFriendlyTitle(const QString &friendly_title) {
    m_friendly_title = friendly_title;
    m_friendly_title_isSet = true;
}

bool OAIPublishedDivision::is_friendly_title_Set() const{
    return m_friendly_title_isSet;
}

bool OAIPublishedDivision::is_friendly_title_Valid() const{
    return m_friendly_title_isValid;
}

bool OAIPublishedDivision::isIsDeferred() const {
    return m_is_deferred;
}
void OAIPublishedDivision::setIsDeferred(const bool &is_deferred) {
    m_is_deferred = is_deferred;
    m_is_deferred_isSet = true;
}

bool OAIPublishedDivision::is_is_deferred_Set() const{
    return m_is_deferred_isSet;
}

bool OAIPublishedDivision::is_is_deferred_Valid() const{
    return m_is_deferred_isValid;
}

qint32 OAIPublishedDivision::getNoCount() const {
    return m_no_count;
}
void OAIPublishedDivision::setNoCount(const qint32 &no_count) {
    m_no_count = no_count;
    m_no_count_isSet = true;
}

bool OAIPublishedDivision::is_no_count_Set() const{
    return m_no_count_isSet;
}

bool OAIPublishedDivision::is_no_count_Valid() const{
    return m_no_count_isValid;
}

QList<OAIRecordedMember> OAIPublishedDivision::getNoTellers() const {
    return m_no_tellers;
}
void OAIPublishedDivision::setNoTellers(const QList<OAIRecordedMember> &no_tellers) {
    m_no_tellers = no_tellers;
    m_no_tellers_isSet = true;
}

bool OAIPublishedDivision::is_no_tellers_Set() const{
    return m_no_tellers_isSet;
}

bool OAIPublishedDivision::is_no_tellers_Valid() const{
    return m_no_tellers_isValid;
}

QList<OAIRecordedMember> OAIPublishedDivision::getNoVoteRecorded() const {
    return m_no_vote_recorded;
}
void OAIPublishedDivision::setNoVoteRecorded(const QList<OAIRecordedMember> &no_vote_recorded) {
    m_no_vote_recorded = no_vote_recorded;
    m_no_vote_recorded_isSet = true;
}

bool OAIPublishedDivision::is_no_vote_recorded_Set() const{
    return m_no_vote_recorded_isSet;
}

bool OAIPublishedDivision::is_no_vote_recorded_Valid() const{
    return m_no_vote_recorded_isValid;
}

QList<OAIRecordedMember> OAIPublishedDivision::getNoes() const {
    return m_noes;
}
void OAIPublishedDivision::setNoes(const QList<OAIRecordedMember> &noes) {
    m_noes = noes;
    m_noes_isSet = true;
}

bool OAIPublishedDivision::is_noes_Set() const{
    return m_noes_isSet;
}

bool OAIPublishedDivision::is_noes_Valid() const{
    return m_noes_isValid;
}

qint32 OAIPublishedDivision::getNumber() const {
    return m_number;
}
void OAIPublishedDivision::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPublishedDivision::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPublishedDivision::is_number_Valid() const{
    return m_number_isValid;
}

QDateTime OAIPublishedDivision::getPublicationUpdated() const {
    return m_publication_updated;
}
void OAIPublishedDivision::setPublicationUpdated(const QDateTime &publication_updated) {
    m_publication_updated = publication_updated;
    m_publication_updated_isSet = true;
}

bool OAIPublishedDivision::is_publication_updated_Set() const{
    return m_publication_updated_isSet;
}

bool OAIPublishedDivision::is_publication_updated_Valid() const{
    return m_publication_updated_isValid;
}

QDateTime OAIPublishedDivision::getRemoteVotingEnd() const {
    return m_remote_voting_end;
}
void OAIPublishedDivision::setRemoteVotingEnd(const QDateTime &remote_voting_end) {
    m_remote_voting_end = remote_voting_end;
    m_remote_voting_end_isSet = true;
}

bool OAIPublishedDivision::is_remote_voting_end_Set() const{
    return m_remote_voting_end_isSet;
}

bool OAIPublishedDivision::is_remote_voting_end_Valid() const{
    return m_remote_voting_end_isValid;
}

QDateTime OAIPublishedDivision::getRemoteVotingStart() const {
    return m_remote_voting_start;
}
void OAIPublishedDivision::setRemoteVotingStart(const QDateTime &remote_voting_start) {
    m_remote_voting_start = remote_voting_start;
    m_remote_voting_start_isSet = true;
}

bool OAIPublishedDivision::is_remote_voting_start_Set() const{
    return m_remote_voting_start_isSet;
}

bool OAIPublishedDivision::is_remote_voting_start_Valid() const{
    return m_remote_voting_start_isValid;
}

QString OAIPublishedDivision::getTitle() const {
    return m_title;
}
void OAIPublishedDivision::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPublishedDivision::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPublishedDivision::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIPublishedDivision::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aye_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aye_tellers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ayes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_majority_aye_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_majority_no_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evel_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evel_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_deferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_tellers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_vote_recorded.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_noes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publication_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_voting_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_voting_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublishedDivision::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
