/**
 * Commons Votes API
 * An API that allows querying of Commons Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDivisionsApi_H
#define OAI_OAIDivisionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDivisionGroupedByParty.h"
#include "OAIMemberVotingRecord.h"
#include "OAIPublishedDivision.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDivisionsApi : public QObject {
    Q_OBJECT

public:
    OAIDivisionsApi(const int timeOut = 0);
    ~OAIDivisionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  division_id qint32 [required]
    * @param[in]  format QString [required]
    */
    virtual void divisionsGetDivisionById(const qint32 &division_id, const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  query_parameters_search_term QString [optional]
    * @param[in]  query_parameters_member_id qint32 [optional]
    * @param[in]  query_parameters_include_when_member_was_teller bool [optional]
    * @param[in]  query_parameters_start_date QDateTime [optional]
    * @param[in]  query_parameters_end_date QDateTime [optional]
    * @param[in]  query_parameters_division_number qint32 [optional]
    */
    virtual void divisionsGetDivisionsGroupsByParty(const QString &format, const ::OpenAPI::OptionalParam<QString> &query_parameters_search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &query_parameters_member_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &query_parameters_include_when_member_was_teller = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &query_parameters_start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &query_parameters_end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &query_parameters_division_number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  format QString [required]
    * @param[in]  query_parameters_member_id qint32 [required]
    * @param[in]  query_parameters_skip qint32 [optional]
    * @param[in]  query_parameters_take qint32 [optional]
    * @param[in]  query_parameters_search_term QString [optional]
    * @param[in]  query_parameters_include_when_member_was_teller bool [optional]
    * @param[in]  query_parameters_start_date QDateTime [optional]
    * @param[in]  query_parameters_end_date QDateTime [optional]
    * @param[in]  query_parameters_division_number qint32 [optional]
    */
    virtual void divisionsGetVotingRecordsForMember(const QString &format, const qint32 &query_parameters_member_id, const ::OpenAPI::OptionalParam<qint32> &query_parameters_skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &query_parameters_take = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query_parameters_search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &query_parameters_include_when_member_was_teller = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &query_parameters_start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &query_parameters_end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &query_parameters_division_number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  format QString [required]
    * @param[in]  query_parameters_skip qint32 [optional]
    * @param[in]  query_parameters_take qint32 [optional]
    * @param[in]  query_parameters_search_term QString [optional]
    * @param[in]  query_parameters_member_id qint32 [optional]
    * @param[in]  query_parameters_include_when_member_was_teller bool [optional]
    * @param[in]  query_parameters_start_date QDateTime [optional]
    * @param[in]  query_parameters_end_date QDateTime [optional]
    * @param[in]  query_parameters_division_number qint32 [optional]
    */
    virtual void divisionsSearchDivisions(const QString &format, const ::OpenAPI::OptionalParam<qint32> &query_parameters_skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &query_parameters_take = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query_parameters_search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &query_parameters_member_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &query_parameters_include_when_member_was_teller = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &query_parameters_start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &query_parameters_end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &query_parameters_division_number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  format QString [required]
    * @param[in]  query_parameters_search_term QString [optional]
    * @param[in]  query_parameters_member_id qint32 [optional]
    * @param[in]  query_parameters_include_when_member_was_teller bool [optional]
    * @param[in]  query_parameters_start_date QDateTime [optional]
    * @param[in]  query_parameters_end_date QDateTime [optional]
    * @param[in]  query_parameters_division_number qint32 [optional]
    */
    virtual void divisionsSearchTotalResults(const QString &format, const ::OpenAPI::OptionalParam<QString> &query_parameters_search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &query_parameters_member_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &query_parameters_include_when_member_was_teller = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &query_parameters_start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &query_parameters_end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &query_parameters_division_number = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void divisionsGetDivisionByIdCallback(OAIHttpRequestWorker *worker);
    void divisionsGetDivisionsGroupsByPartyCallback(OAIHttpRequestWorker *worker);
    void divisionsGetVotingRecordsForMemberCallback(OAIHttpRequestWorker *worker);
    void divisionsSearchDivisionsCallback(OAIHttpRequestWorker *worker);
    void divisionsSearchTotalResultsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void divisionsGetDivisionByIdSignal(OAIPublishedDivision summary);
    void divisionsGetDivisionsGroupsByPartySignal(QList<OAIDivisionGroupedByParty> summary);
    void divisionsGetVotingRecordsForMemberSignal(QList<OAIMemberVotingRecord> summary);
    void divisionsSearchDivisionsSignal(QList<OAIPublishedDivision> summary);
    void divisionsSearchTotalResultsSignal(qint32 summary);


    void divisionsGetDivisionByIdSignalFull(OAIHttpRequestWorker *worker, OAIPublishedDivision summary);
    void divisionsGetDivisionsGroupsByPartySignalFull(OAIHttpRequestWorker *worker, QList<OAIDivisionGroupedByParty> summary);
    void divisionsGetVotingRecordsForMemberSignalFull(OAIHttpRequestWorker *worker, QList<OAIMemberVotingRecord> summary);
    void divisionsSearchDivisionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPublishedDivision> summary);
    void divisionsSearchTotalResultsSignalFull(OAIHttpRequestWorker *worker, qint32 summary);

    Q_DECL_DEPRECATED_X("Use divisionsGetDivisionByIdSignalError() instead")
    void divisionsGetDivisionByIdSignalE(OAIPublishedDivision summary, QNetworkReply::NetworkError error_type, QString error_str);
    void divisionsGetDivisionByIdSignalError(OAIPublishedDivision summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use divisionsGetDivisionsGroupsByPartySignalError() instead")
    void divisionsGetDivisionsGroupsByPartySignalE(QList<OAIDivisionGroupedByParty> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void divisionsGetDivisionsGroupsByPartySignalError(QList<OAIDivisionGroupedByParty> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use divisionsGetVotingRecordsForMemberSignalError() instead")
    void divisionsGetVotingRecordsForMemberSignalE(QList<OAIMemberVotingRecord> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void divisionsGetVotingRecordsForMemberSignalError(QList<OAIMemberVotingRecord> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use divisionsSearchDivisionsSignalError() instead")
    void divisionsSearchDivisionsSignalE(QList<OAIPublishedDivision> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void divisionsSearchDivisionsSignalError(QList<OAIPublishedDivision> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use divisionsSearchTotalResultsSignalError() instead")
    void divisionsSearchTotalResultsSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void divisionsSearchTotalResultsSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use divisionsGetDivisionByIdSignalErrorFull() instead")
    void divisionsGetDivisionByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void divisionsGetDivisionByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use divisionsGetDivisionsGroupsByPartySignalErrorFull() instead")
    void divisionsGetDivisionsGroupsByPartySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void divisionsGetDivisionsGroupsByPartySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use divisionsGetVotingRecordsForMemberSignalErrorFull() instead")
    void divisionsGetVotingRecordsForMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void divisionsGetVotingRecordsForMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use divisionsSearchDivisionsSignalErrorFull() instead")
    void divisionsSearchDivisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void divisionsSearchDivisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use divisionsSearchTotalResultsSignalErrorFull() instead")
    void divisionsSearchTotalResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void divisionsSearchTotalResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
