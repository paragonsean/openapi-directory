/**
 * Commons Votes API
 * An API that allows querying of Commons Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberVotingRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberVotingRecord::OAIMemberVotingRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberVotingRecord::OAIMemberVotingRecord() {
    this->initializeModel();
}

OAIMemberVotingRecord::~OAIMemberVotingRecord() {}

void OAIMemberVotingRecord::initializeModel() {

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_member_voted_aye_isSet = false;
    m_member_voted_aye_isValid = false;

    m_member_was_teller_isSet = false;
    m_member_was_teller_isValid = false;

    m_published_division_isSet = false;
    m_published_division_isValid = false;
}

void OAIMemberVotingRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberVotingRecord::fromJsonObject(QJsonObject json) {

    m_member_id_isValid = ::OpenAPI::fromJsonValue(m_member_id, json[QString("MemberId")]);
    m_member_id_isSet = !json[QString("MemberId")].isNull() && m_member_id_isValid;

    m_member_voted_aye_isValid = ::OpenAPI::fromJsonValue(m_member_voted_aye, json[QString("MemberVotedAye")]);
    m_member_voted_aye_isSet = !json[QString("MemberVotedAye")].isNull() && m_member_voted_aye_isValid;

    m_member_was_teller_isValid = ::OpenAPI::fromJsonValue(m_member_was_teller, json[QString("MemberWasTeller")]);
    m_member_was_teller_isSet = !json[QString("MemberWasTeller")].isNull() && m_member_was_teller_isValid;

    m_published_division_isValid = ::OpenAPI::fromJsonValue(m_published_division, json[QString("PublishedDivision")]);
    m_published_division_isSet = !json[QString("PublishedDivision")].isNull() && m_published_division_isValid;
}

QString OAIMemberVotingRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberVotingRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_member_id_isSet) {
        obj.insert(QString("MemberId"), ::OpenAPI::toJsonValue(m_member_id));
    }
    if (m_member_voted_aye_isSet) {
        obj.insert(QString("MemberVotedAye"), ::OpenAPI::toJsonValue(m_member_voted_aye));
    }
    if (m_member_was_teller_isSet) {
        obj.insert(QString("MemberWasTeller"), ::OpenAPI::toJsonValue(m_member_was_teller));
    }
    if (m_published_division.isSet()) {
        obj.insert(QString("PublishedDivision"), ::OpenAPI::toJsonValue(m_published_division));
    }
    return obj;
}

qint32 OAIMemberVotingRecord::getMemberId() const {
    return m_member_id;
}
void OAIMemberVotingRecord::setMemberId(const qint32 &member_id) {
    m_member_id = member_id;
    m_member_id_isSet = true;
}

bool OAIMemberVotingRecord::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAIMemberVotingRecord::is_member_id_Valid() const{
    return m_member_id_isValid;
}

bool OAIMemberVotingRecord::isMemberVotedAye() const {
    return m_member_voted_aye;
}
void OAIMemberVotingRecord::setMemberVotedAye(const bool &member_voted_aye) {
    m_member_voted_aye = member_voted_aye;
    m_member_voted_aye_isSet = true;
}

bool OAIMemberVotingRecord::is_member_voted_aye_Set() const{
    return m_member_voted_aye_isSet;
}

bool OAIMemberVotingRecord::is_member_voted_aye_Valid() const{
    return m_member_voted_aye_isValid;
}

bool OAIMemberVotingRecord::isMemberWasTeller() const {
    return m_member_was_teller;
}
void OAIMemberVotingRecord::setMemberWasTeller(const bool &member_was_teller) {
    m_member_was_teller = member_was_teller;
    m_member_was_teller_isSet = true;
}

bool OAIMemberVotingRecord::is_member_was_teller_Set() const{
    return m_member_was_teller_isSet;
}

bool OAIMemberVotingRecord::is_member_was_teller_Valid() const{
    return m_member_was_teller_isValid;
}

OAIPublishedDivision OAIMemberVotingRecord::getPublishedDivision() const {
    return m_published_division;
}
void OAIMemberVotingRecord::setPublishedDivision(const OAIPublishedDivision &published_division) {
    m_published_division = published_division;
    m_published_division_isSet = true;
}

bool OAIMemberVotingRecord::is_published_division_Set() const{
    return m_published_division_isSet;
}

bool OAIMemberVotingRecord::is_published_division_Valid() const{
    return m_published_division_isValid;
}

bool OAIMemberVotingRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_voted_aye_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_was_teller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_division.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberVotingRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
