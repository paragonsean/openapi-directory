/**
 * Commons Votes API
 * An API that allows querying of Commons Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecordedMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecordedMember::OAIRecordedMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecordedMember::OAIRecordedMember() {
    this->initializeModel();
}

OAIRecordedMember::~OAIRecordedMember() {}

void OAIRecordedMember::initializeModel() {

    m_list_as_isSet = false;
    m_list_as_isValid = false;

    m_member_from_isSet = false;
    m_member_from_isValid = false;

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_party_abbreviation_isSet = false;
    m_party_abbreviation_isValid = false;

    m_party_colour_isSet = false;
    m_party_colour_isValid = false;

    m_proxy_name_isSet = false;
    m_proxy_name_isValid = false;

    m_sub_party_isSet = false;
    m_sub_party_isValid = false;
}

void OAIRecordedMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecordedMember::fromJsonObject(QJsonObject json) {

    m_list_as_isValid = ::OpenAPI::fromJsonValue(m_list_as, json[QString("ListAs")]);
    m_list_as_isSet = !json[QString("ListAs")].isNull() && m_list_as_isValid;

    m_member_from_isValid = ::OpenAPI::fromJsonValue(m_member_from, json[QString("MemberFrom")]);
    m_member_from_isSet = !json[QString("MemberFrom")].isNull() && m_member_from_isValid;

    m_member_id_isValid = ::OpenAPI::fromJsonValue(m_member_id, json[QString("MemberId")]);
    m_member_id_isSet = !json[QString("MemberId")].isNull() && m_member_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("Party")]);
    m_party_isSet = !json[QString("Party")].isNull() && m_party_isValid;

    m_party_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_party_abbreviation, json[QString("PartyAbbreviation")]);
    m_party_abbreviation_isSet = !json[QString("PartyAbbreviation")].isNull() && m_party_abbreviation_isValid;

    m_party_colour_isValid = ::OpenAPI::fromJsonValue(m_party_colour, json[QString("PartyColour")]);
    m_party_colour_isSet = !json[QString("PartyColour")].isNull() && m_party_colour_isValid;

    m_proxy_name_isValid = ::OpenAPI::fromJsonValue(m_proxy_name, json[QString("ProxyName")]);
    m_proxy_name_isSet = !json[QString("ProxyName")].isNull() && m_proxy_name_isValid;

    m_sub_party_isValid = ::OpenAPI::fromJsonValue(m_sub_party, json[QString("SubParty")]);
    m_sub_party_isSet = !json[QString("SubParty")].isNull() && m_sub_party_isValid;
}

QString OAIRecordedMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecordedMember::asJsonObject() const {
    QJsonObject obj;
    if (m_list_as_isSet) {
        obj.insert(QString("ListAs"), ::OpenAPI::toJsonValue(m_list_as));
    }
    if (m_member_from_isSet) {
        obj.insert(QString("MemberFrom"), ::OpenAPI::toJsonValue(m_member_from));
    }
    if (m_member_id_isSet) {
        obj.insert(QString("MemberId"), ::OpenAPI::toJsonValue(m_member_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_party_isSet) {
        obj.insert(QString("Party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_party_abbreviation_isSet) {
        obj.insert(QString("PartyAbbreviation"), ::OpenAPI::toJsonValue(m_party_abbreviation));
    }
    if (m_party_colour_isSet) {
        obj.insert(QString("PartyColour"), ::OpenAPI::toJsonValue(m_party_colour));
    }
    if (m_proxy_name_isSet) {
        obj.insert(QString("ProxyName"), ::OpenAPI::toJsonValue(m_proxy_name));
    }
    if (m_sub_party_isSet) {
        obj.insert(QString("SubParty"), ::OpenAPI::toJsonValue(m_sub_party));
    }
    return obj;
}

QString OAIRecordedMember::getListAs() const {
    return m_list_as;
}
void OAIRecordedMember::setListAs(const QString &list_as) {
    m_list_as = list_as;
    m_list_as_isSet = true;
}

bool OAIRecordedMember::is_list_as_Set() const{
    return m_list_as_isSet;
}

bool OAIRecordedMember::is_list_as_Valid() const{
    return m_list_as_isValid;
}

QString OAIRecordedMember::getMemberFrom() const {
    return m_member_from;
}
void OAIRecordedMember::setMemberFrom(const QString &member_from) {
    m_member_from = member_from;
    m_member_from_isSet = true;
}

bool OAIRecordedMember::is_member_from_Set() const{
    return m_member_from_isSet;
}

bool OAIRecordedMember::is_member_from_Valid() const{
    return m_member_from_isValid;
}

qint32 OAIRecordedMember::getMemberId() const {
    return m_member_id;
}
void OAIRecordedMember::setMemberId(const qint32 &member_id) {
    m_member_id = member_id;
    m_member_id_isSet = true;
}

bool OAIRecordedMember::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAIRecordedMember::is_member_id_Valid() const{
    return m_member_id_isValid;
}

QString OAIRecordedMember::getName() const {
    return m_name;
}
void OAIRecordedMember::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRecordedMember::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRecordedMember::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRecordedMember::getParty() const {
    return m_party;
}
void OAIRecordedMember::setParty(const QString &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAIRecordedMember::is_party_Set() const{
    return m_party_isSet;
}

bool OAIRecordedMember::is_party_Valid() const{
    return m_party_isValid;
}

QString OAIRecordedMember::getPartyAbbreviation() const {
    return m_party_abbreviation;
}
void OAIRecordedMember::setPartyAbbreviation(const QString &party_abbreviation) {
    m_party_abbreviation = party_abbreviation;
    m_party_abbreviation_isSet = true;
}

bool OAIRecordedMember::is_party_abbreviation_Set() const{
    return m_party_abbreviation_isSet;
}

bool OAIRecordedMember::is_party_abbreviation_Valid() const{
    return m_party_abbreviation_isValid;
}

QString OAIRecordedMember::getPartyColour() const {
    return m_party_colour;
}
void OAIRecordedMember::setPartyColour(const QString &party_colour) {
    m_party_colour = party_colour;
    m_party_colour_isSet = true;
}

bool OAIRecordedMember::is_party_colour_Set() const{
    return m_party_colour_isSet;
}

bool OAIRecordedMember::is_party_colour_Valid() const{
    return m_party_colour_isValid;
}

QString OAIRecordedMember::getProxyName() const {
    return m_proxy_name;
}
void OAIRecordedMember::setProxyName(const QString &proxy_name) {
    m_proxy_name = proxy_name;
    m_proxy_name_isSet = true;
}

bool OAIRecordedMember::is_proxy_name_Set() const{
    return m_proxy_name_isSet;
}

bool OAIRecordedMember::is_proxy_name_Valid() const{
    return m_proxy_name_isValid;
}

QString OAIRecordedMember::getSubParty() const {
    return m_sub_party;
}
void OAIRecordedMember::setSubParty(const QString &sub_party) {
    m_sub_party = sub_party;
    m_sub_party_isSet = true;
}

bool OAIRecordedMember::is_sub_party_Set() const{
    return m_sub_party_isSet;
}

bool OAIRecordedMember::is_sub_party_Valid() const{
    return m_sub_party_isValid;
}

bool OAIRecordedMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_list_as_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_colour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_party_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecordedMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
