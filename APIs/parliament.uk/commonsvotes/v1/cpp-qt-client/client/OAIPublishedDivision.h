/**
 * Commons Votes API
 * An API that allows querying of Commons Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPublishedDivision.h
 *
 * 
 */

#ifndef OAIPublishedDivision_H
#define OAIPublishedDivision_H

#include <QJsonObject>

#include "OAIRecordedMember.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRecordedMember;

class OAIPublishedDivision : public OAIObject {
public:
    OAIPublishedDivision();
    OAIPublishedDivision(QString json);
    ~OAIPublishedDivision() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAyeCount() const;
    void setAyeCount(const qint32 &aye_count);
    bool is_aye_count_Set() const;
    bool is_aye_count_Valid() const;

    QList<OAIRecordedMember> getAyeTellers() const;
    void setAyeTellers(const QList<OAIRecordedMember> &aye_tellers);
    bool is_aye_tellers_Set() const;
    bool is_aye_tellers_Valid() const;

    QList<OAIRecordedMember> getAyes() const;
    void setAyes(const QList<OAIRecordedMember> &ayes);
    bool is_ayes_Set() const;
    bool is_ayes_Valid() const;

    QDateTime getDate() const;
    void setDate(const QDateTime &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    qint32 getDivisionId() const;
    void setDivisionId(const qint32 &division_id);
    bool is_division_id_Set() const;
    bool is_division_id_Valid() const;

    qint32 getDoubleMajorityAyeCount() const;
    void setDoubleMajorityAyeCount(const qint32 &double_majority_aye_count);
    bool is_double_majority_aye_count_Set() const;
    bool is_double_majority_aye_count_Valid() const;

    qint32 getDoubleMajorityNoCount() const;
    void setDoubleMajorityNoCount(const qint32 &double_majority_no_count);
    bool is_double_majority_no_count_Set() const;
    bool is_double_majority_no_count_Valid() const;

    QString getEvelCountry() const;
    void setEvelCountry(const QString &evel_country);
    bool is_evel_country_Set() const;
    bool is_evel_country_Valid() const;

    QString getEvelType() const;
    void setEvelType(const QString &evel_type);
    bool is_evel_type_Set() const;
    bool is_evel_type_Valid() const;

    QString getFriendlyDescription() const;
    void setFriendlyDescription(const QString &friendly_description);
    bool is_friendly_description_Set() const;
    bool is_friendly_description_Valid() const;

    QString getFriendlyTitle() const;
    void setFriendlyTitle(const QString &friendly_title);
    bool is_friendly_title_Set() const;
    bool is_friendly_title_Valid() const;

    bool isIsDeferred() const;
    void setIsDeferred(const bool &is_deferred);
    bool is_is_deferred_Set() const;
    bool is_is_deferred_Valid() const;

    qint32 getNoCount() const;
    void setNoCount(const qint32 &no_count);
    bool is_no_count_Set() const;
    bool is_no_count_Valid() const;

    QList<OAIRecordedMember> getNoTellers() const;
    void setNoTellers(const QList<OAIRecordedMember> &no_tellers);
    bool is_no_tellers_Set() const;
    bool is_no_tellers_Valid() const;

    QList<OAIRecordedMember> getNoVoteRecorded() const;
    void setNoVoteRecorded(const QList<OAIRecordedMember> &no_vote_recorded);
    bool is_no_vote_recorded_Set() const;
    bool is_no_vote_recorded_Valid() const;

    QList<OAIRecordedMember> getNoes() const;
    void setNoes(const QList<OAIRecordedMember> &noes);
    bool is_noes_Set() const;
    bool is_noes_Valid() const;

    qint32 getNumber() const;
    void setNumber(const qint32 &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    QDateTime getPublicationUpdated() const;
    void setPublicationUpdated(const QDateTime &publication_updated);
    bool is_publication_updated_Set() const;
    bool is_publication_updated_Valid() const;

    QDateTime getRemoteVotingEnd() const;
    void setRemoteVotingEnd(const QDateTime &remote_voting_end);
    bool is_remote_voting_end_Set() const;
    bool is_remote_voting_end_Valid() const;

    QDateTime getRemoteVotingStart() const;
    void setRemoteVotingStart(const QDateTime &remote_voting_start);
    bool is_remote_voting_start_Set() const;
    bool is_remote_voting_start_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_aye_count;
    bool m_aye_count_isSet;
    bool m_aye_count_isValid;

    QList<OAIRecordedMember> m_aye_tellers;
    bool m_aye_tellers_isSet;
    bool m_aye_tellers_isValid;

    QList<OAIRecordedMember> m_ayes;
    bool m_ayes_isSet;
    bool m_ayes_isValid;

    QDateTime m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    qint32 m_division_id;
    bool m_division_id_isSet;
    bool m_division_id_isValid;

    qint32 m_double_majority_aye_count;
    bool m_double_majority_aye_count_isSet;
    bool m_double_majority_aye_count_isValid;

    qint32 m_double_majority_no_count;
    bool m_double_majority_no_count_isSet;
    bool m_double_majority_no_count_isValid;

    QString m_evel_country;
    bool m_evel_country_isSet;
    bool m_evel_country_isValid;

    QString m_evel_type;
    bool m_evel_type_isSet;
    bool m_evel_type_isValid;

    QString m_friendly_description;
    bool m_friendly_description_isSet;
    bool m_friendly_description_isValid;

    QString m_friendly_title;
    bool m_friendly_title_isSet;
    bool m_friendly_title_isValid;

    bool m_is_deferred;
    bool m_is_deferred_isSet;
    bool m_is_deferred_isValid;

    qint32 m_no_count;
    bool m_no_count_isSet;
    bool m_no_count_isValid;

    QList<OAIRecordedMember> m_no_tellers;
    bool m_no_tellers_isSet;
    bool m_no_tellers_isValid;

    QList<OAIRecordedMember> m_no_vote_recorded;
    bool m_no_vote_recorded_isSet;
    bool m_no_vote_recorded_isValid;

    QList<OAIRecordedMember> m_noes;
    bool m_noes_isSet;
    bool m_noes_isValid;

    qint32 m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    QDateTime m_publication_updated;
    bool m_publication_updated_isSet;
    bool m_publication_updated_isValid;

    QDateTime m_remote_voting_end;
    bool m_remote_voting_end_isSet;
    bool m_remote_voting_end_isValid;

    QDateTime m_remote_voting_start;
    bool m_remote_voting_start_isSet;
    bool m_remote_voting_start_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPublishedDivision)

#endif // OAIPublishedDivision_H
