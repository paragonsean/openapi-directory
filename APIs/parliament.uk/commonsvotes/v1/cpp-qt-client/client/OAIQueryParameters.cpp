/**
 * Commons Votes API
 * An API that allows querying of Commons Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryParameters::OAIQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryParameters::OAIQueryParameters() {
    this->initializeModel();
}

OAIQueryParameters::~OAIQueryParameters() {}

void OAIQueryParameters::initializeModel() {

    m_division_number_isSet = false;
    m_division_number_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_include_when_member_was_teller_isSet = false;
    m_include_when_member_was_teller_isValid = false;

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_search_term_isSet = false;
    m_search_term_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryParameters::fromJsonObject(QJsonObject json) {

    m_division_number_isValid = ::OpenAPI::fromJsonValue(m_division_number, json[QString("DivisionNumber")]);
    m_division_number_isSet = !json[QString("DivisionNumber")].isNull() && m_division_number_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_include_when_member_was_teller_isValid = ::OpenAPI::fromJsonValue(m_include_when_member_was_teller, json[QString("IncludeWhenMemberWasTeller")]);
    m_include_when_member_was_teller_isSet = !json[QString("IncludeWhenMemberWasTeller")].isNull() && m_include_when_member_was_teller_isValid;

    m_member_id_isValid = ::OpenAPI::fromJsonValue(m_member_id, json[QString("MemberId")]);
    m_member_id_isSet = !json[QString("MemberId")].isNull() && m_member_id_isValid;

    m_search_term_isValid = ::OpenAPI::fromJsonValue(m_search_term, json[QString("SearchTerm")]);
    m_search_term_isSet = !json[QString("SearchTerm")].isNull() && m_search_term_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;
}

QString OAIQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_division_number_isSet) {
        obj.insert(QString("DivisionNumber"), ::OpenAPI::toJsonValue(m_division_number));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_include_when_member_was_teller_isSet) {
        obj.insert(QString("IncludeWhenMemberWasTeller"), ::OpenAPI::toJsonValue(m_include_when_member_was_teller));
    }
    if (m_member_id_isSet) {
        obj.insert(QString("MemberId"), ::OpenAPI::toJsonValue(m_member_id));
    }
    if (m_search_term_isSet) {
        obj.insert(QString("SearchTerm"), ::OpenAPI::toJsonValue(m_search_term));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

qint32 OAIQueryParameters::getDivisionNumber() const {
    return m_division_number;
}
void OAIQueryParameters::setDivisionNumber(const qint32 &division_number) {
    m_division_number = division_number;
    m_division_number_isSet = true;
}

bool OAIQueryParameters::is_division_number_Set() const{
    return m_division_number_isSet;
}

bool OAIQueryParameters::is_division_number_Valid() const{
    return m_division_number_isValid;
}

QDateTime OAIQueryParameters::getEndDate() const {
    return m_end_date;
}
void OAIQueryParameters::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIQueryParameters::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIQueryParameters::is_end_date_Valid() const{
    return m_end_date_isValid;
}

bool OAIQueryParameters::isIncludeWhenMemberWasTeller() const {
    return m_include_when_member_was_teller;
}
void OAIQueryParameters::setIncludeWhenMemberWasTeller(const bool &include_when_member_was_teller) {
    m_include_when_member_was_teller = include_when_member_was_teller;
    m_include_when_member_was_teller_isSet = true;
}

bool OAIQueryParameters::is_include_when_member_was_teller_Set() const{
    return m_include_when_member_was_teller_isSet;
}

bool OAIQueryParameters::is_include_when_member_was_teller_Valid() const{
    return m_include_when_member_was_teller_isValid;
}

qint32 OAIQueryParameters::getMemberId() const {
    return m_member_id;
}
void OAIQueryParameters::setMemberId(const qint32 &member_id) {
    m_member_id = member_id;
    m_member_id_isSet = true;
}

bool OAIQueryParameters::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAIQueryParameters::is_member_id_Valid() const{
    return m_member_id_isValid;
}

QString OAIQueryParameters::getSearchTerm() const {
    return m_search_term;
}
void OAIQueryParameters::setSearchTerm(const QString &search_term) {
    m_search_term = search_term;
    m_search_term_isSet = true;
}

bool OAIQueryParameters::is_search_term_Set() const{
    return m_search_term_isSet;
}

bool OAIQueryParameters::is_search_term_Valid() const{
    return m_search_term_isValid;
}

QDateTime OAIQueryParameters::getStartDate() const {
    return m_start_date;
}
void OAIQueryParameters::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIQueryParameters::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIQueryParameters::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_division_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_when_member_was_teller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
