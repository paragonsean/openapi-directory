/**
 * Commons Votes API
 * An API that allows querying of Commons Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDivisionGroupedByParty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDivisionGroupedByParty::OAIDivisionGroupedByParty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDivisionGroupedByParty::OAIDivisionGroupedByParty() {
    this->initializeModel();
}

OAIDivisionGroupedByParty::~OAIDivisionGroupedByParty() {}

void OAIDivisionGroupedByParty::initializeModel() {

    m_aye_count_isSet = false;
    m_aye_count_isValid = false;

    m_ayes_isSet = false;
    m_ayes_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_division_id_isSet = false;
    m_division_id_isValid = false;

    m_no_count_isSet = false;
    m_no_count_isValid = false;

    m_noes_isSet = false;
    m_noes_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIDivisionGroupedByParty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDivisionGroupedByParty::fromJsonObject(QJsonObject json) {

    m_aye_count_isValid = ::OpenAPI::fromJsonValue(m_aye_count, json[QString("AyeCount")]);
    m_aye_count_isSet = !json[QString("AyeCount")].isNull() && m_aye_count_isValid;

    m_ayes_isValid = ::OpenAPI::fromJsonValue(m_ayes, json[QString("Ayes")]);
    m_ayes_isSet = !json[QString("Ayes")].isNull() && m_ayes_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_division_id_isValid = ::OpenAPI::fromJsonValue(m_division_id, json[QString("DivisionId")]);
    m_division_id_isSet = !json[QString("DivisionId")].isNull() && m_division_id_isValid;

    m_no_count_isValid = ::OpenAPI::fromJsonValue(m_no_count, json[QString("NoCount")]);
    m_no_count_isSet = !json[QString("NoCount")].isNull() && m_no_count_isValid;

    m_noes_isValid = ::OpenAPI::fromJsonValue(m_noes, json[QString("Noes")]);
    m_noes_isSet = !json[QString("Noes")].isNull() && m_noes_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;
}

QString OAIDivisionGroupedByParty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDivisionGroupedByParty::asJsonObject() const {
    QJsonObject obj;
    if (m_aye_count_isSet) {
        obj.insert(QString("AyeCount"), ::OpenAPI::toJsonValue(m_aye_count));
    }
    if (m_ayes.size() > 0) {
        obj.insert(QString("Ayes"), ::OpenAPI::toJsonValue(m_ayes));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_division_id_isSet) {
        obj.insert(QString("DivisionId"), ::OpenAPI::toJsonValue(m_division_id));
    }
    if (m_no_count_isSet) {
        obj.insert(QString("NoCount"), ::OpenAPI::toJsonValue(m_no_count));
    }
    if (m_noes.size() > 0) {
        obj.insert(QString("Noes"), ::OpenAPI::toJsonValue(m_noes));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint32 OAIDivisionGroupedByParty::getAyeCount() const {
    return m_aye_count;
}
void OAIDivisionGroupedByParty::setAyeCount(const qint32 &aye_count) {
    m_aye_count = aye_count;
    m_aye_count_isSet = true;
}

bool OAIDivisionGroupedByParty::is_aye_count_Set() const{
    return m_aye_count_isSet;
}

bool OAIDivisionGroupedByParty::is_aye_count_Valid() const{
    return m_aye_count_isValid;
}

QList<OAIPartyVoteResult> OAIDivisionGroupedByParty::getAyes() const {
    return m_ayes;
}
void OAIDivisionGroupedByParty::setAyes(const QList<OAIPartyVoteResult> &ayes) {
    m_ayes = ayes;
    m_ayes_isSet = true;
}

bool OAIDivisionGroupedByParty::is_ayes_Set() const{
    return m_ayes_isSet;
}

bool OAIDivisionGroupedByParty::is_ayes_Valid() const{
    return m_ayes_isValid;
}

QDateTime OAIDivisionGroupedByParty::getDate() const {
    return m_date;
}
void OAIDivisionGroupedByParty::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIDivisionGroupedByParty::is_date_Set() const{
    return m_date_isSet;
}

bool OAIDivisionGroupedByParty::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAIDivisionGroupedByParty::getDivisionId() const {
    return m_division_id;
}
void OAIDivisionGroupedByParty::setDivisionId(const qint32 &division_id) {
    m_division_id = division_id;
    m_division_id_isSet = true;
}

bool OAIDivisionGroupedByParty::is_division_id_Set() const{
    return m_division_id_isSet;
}

bool OAIDivisionGroupedByParty::is_division_id_Valid() const{
    return m_division_id_isValid;
}

qint32 OAIDivisionGroupedByParty::getNoCount() const {
    return m_no_count;
}
void OAIDivisionGroupedByParty::setNoCount(const qint32 &no_count) {
    m_no_count = no_count;
    m_no_count_isSet = true;
}

bool OAIDivisionGroupedByParty::is_no_count_Set() const{
    return m_no_count_isSet;
}

bool OAIDivisionGroupedByParty::is_no_count_Valid() const{
    return m_no_count_isValid;
}

QList<OAIPartyVoteResult> OAIDivisionGroupedByParty::getNoes() const {
    return m_noes;
}
void OAIDivisionGroupedByParty::setNoes(const QList<OAIPartyVoteResult> &noes) {
    m_noes = noes;
    m_noes_isSet = true;
}

bool OAIDivisionGroupedByParty::is_noes_Set() const{
    return m_noes_isSet;
}

bool OAIDivisionGroupedByParty::is_noes_Valid() const{
    return m_noes_isValid;
}

qint32 OAIDivisionGroupedByParty::getNumber() const {
    return m_number;
}
void OAIDivisionGroupedByParty::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIDivisionGroupedByParty::is_number_Set() const{
    return m_number_isSet;
}

bool OAIDivisionGroupedByParty::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIDivisionGroupedByParty::getTitle() const {
    return m_title;
}
void OAIDivisionGroupedByParty::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDivisionGroupedByParty::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDivisionGroupedByParty::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIDivisionGroupedByParty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aye_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ayes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_noes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDivisionGroupedByParty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
