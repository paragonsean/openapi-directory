/*
 * Commons Votes API
 * An API that allows querying of Commons Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueryParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:31.787285-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryParameters {
  public static final String SERIALIZED_NAME_DIVISION_NUMBER = "DivisionNumber";
  @SerializedName(SERIALIZED_NAME_DIVISION_NUMBER)
  private Integer divisionNumber;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_INCLUDE_WHEN_MEMBER_WAS_TELLER = "IncludeWhenMemberWasTeller";
  @SerializedName(SERIALIZED_NAME_INCLUDE_WHEN_MEMBER_WAS_TELLER)
  private Boolean includeWhenMemberWasTeller;

  public static final String SERIALIZED_NAME_MEMBER_ID = "MemberId";
  @SerializedName(SERIALIZED_NAME_MEMBER_ID)
  private Integer memberId;

  public static final String SERIALIZED_NAME_SEARCH_TERM = "SearchTerm";
  @SerializedName(SERIALIZED_NAME_SEARCH_TERM)
  private String searchTerm;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public QueryParameters() {
  }

  public QueryParameters divisionNumber(Integer divisionNumber) {
    this.divisionNumber = divisionNumber;
    return this;
  }

  /**
   * Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint
   * @return divisionNumber
   */
  @javax.annotation.Nullable
  public Integer getDivisionNumber() {
    return divisionNumber;
  }

  public void setDivisionNumber(Integer divisionNumber) {
    this.divisionNumber = divisionNumber;
  }


  public QueryParameters endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Divisions where division date in one or before date provided. Date format is yyyy-MM-dd
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public QueryParameters includeWhenMemberWasTeller(Boolean includeWhenMemberWasTeller) {
    this.includeWhenMemberWasTeller = includeWhenMemberWasTeller;
    return this;
  }

  /**
   * Divisions where member was a teller as well as if they actually voted
   * @return includeWhenMemberWasTeller
   */
  @javax.annotation.Nullable
  public Boolean getIncludeWhenMemberWasTeller() {
    return includeWhenMemberWasTeller;
  }

  public void setIncludeWhenMemberWasTeller(Boolean includeWhenMemberWasTeller) {
    this.includeWhenMemberWasTeller = includeWhenMemberWasTeller;
  }


  public QueryParameters memberId(Integer memberId) {
    this.memberId = memberId;
    return this;
  }

  /**
   * Divisions returning Member with Member ID voting records
   * @return memberId
   */
  @javax.annotation.Nullable
  public Integer getMemberId() {
    return memberId;
  }

  public void setMemberId(Integer memberId) {
    this.memberId = memberId;
  }


  public QueryParameters searchTerm(String searchTerm) {
    this.searchTerm = searchTerm;
    return this;
  }

  /**
   * Divisions containing search term within title or number
   * @return searchTerm
   */
  @javax.annotation.Nullable
  public String getSearchTerm() {
    return searchTerm;
  }

  public void setSearchTerm(String searchTerm) {
    this.searchTerm = searchTerm;
  }


  public QueryParameters startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Divisions where division date in one or after date provided. Date format is yyyy-MM-dd
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryParameters queryParameters = (QueryParameters) o;
    return Objects.equals(this.divisionNumber, queryParameters.divisionNumber) &&
        Objects.equals(this.endDate, queryParameters.endDate) &&
        Objects.equals(this.includeWhenMemberWasTeller, queryParameters.includeWhenMemberWasTeller) &&
        Objects.equals(this.memberId, queryParameters.memberId) &&
        Objects.equals(this.searchTerm, queryParameters.searchTerm) &&
        Objects.equals(this.startDate, queryParameters.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(divisionNumber, endDate, includeWhenMemberWasTeller, memberId, searchTerm, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryParameters {\n");
    sb.append("    divisionNumber: ").append(toIndentedString(divisionNumber)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    includeWhenMemberWasTeller: ").append(toIndentedString(includeWhenMemberWasTeller)).append("\n");
    sb.append("    memberId: ").append(toIndentedString(memberId)).append("\n");
    sb.append("    searchTerm: ").append(toIndentedString(searchTerm)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DivisionNumber");
    openapiFields.add("EndDate");
    openapiFields.add("IncludeWhenMemberWasTeller");
    openapiFields.add("MemberId");
    openapiFields.add("SearchTerm");
    openapiFields.add("StartDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryParameters is not found in the empty JSON string", QueryParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("SearchTerm") != null && !jsonObj.get("SearchTerm").isJsonNull()) && !jsonObj.get("SearchTerm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SearchTerm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SearchTerm").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryParameters>() {
           @Override
           public void write(JsonWriter out, QueryParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryParameters
   * @throws IOException if the JSON string is invalid with respect to QueryParameters
   */
  public static QueryParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryParameters.class);
  }

  /**
   * Convert an instance of QueryParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

