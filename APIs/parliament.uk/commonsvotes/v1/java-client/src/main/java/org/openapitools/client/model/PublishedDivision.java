/*
 * Commons Votes API
 * An API that allows querying of Commons Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RecordedMember;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PublishedDivision
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:31.787285-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublishedDivision {
  public static final String SERIALIZED_NAME_AYE_COUNT = "AyeCount";
  @SerializedName(SERIALIZED_NAME_AYE_COUNT)
  private Integer ayeCount;

  public static final String SERIALIZED_NAME_AYE_TELLERS = "AyeTellers";
  @SerializedName(SERIALIZED_NAME_AYE_TELLERS)
  private List<RecordedMember> ayeTellers = new ArrayList<>();

  public static final String SERIALIZED_NAME_AYES = "Ayes";
  @SerializedName(SERIALIZED_NAME_AYES)
  private List<RecordedMember> ayes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DIVISION_ID = "DivisionId";
  @SerializedName(SERIALIZED_NAME_DIVISION_ID)
  private Integer divisionId;

  public static final String SERIALIZED_NAME_DOUBLE_MAJORITY_AYE_COUNT = "DoubleMajorityAyeCount";
  @SerializedName(SERIALIZED_NAME_DOUBLE_MAJORITY_AYE_COUNT)
  private Integer doubleMajorityAyeCount;

  public static final String SERIALIZED_NAME_DOUBLE_MAJORITY_NO_COUNT = "DoubleMajorityNoCount";
  @SerializedName(SERIALIZED_NAME_DOUBLE_MAJORITY_NO_COUNT)
  private Integer doubleMajorityNoCount;

  public static final String SERIALIZED_NAME_EV_E_L_COUNTRY = "EVELCountry";
  @SerializedName(SERIALIZED_NAME_EV_E_L_COUNTRY)
  private String evELCountry;

  public static final String SERIALIZED_NAME_EV_E_L_TYPE = "EVELType";
  @SerializedName(SERIALIZED_NAME_EV_E_L_TYPE)
  private String evELType;

  public static final String SERIALIZED_NAME_FRIENDLY_DESCRIPTION = "FriendlyDescription";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_DESCRIPTION)
  private String friendlyDescription;

  public static final String SERIALIZED_NAME_FRIENDLY_TITLE = "FriendlyTitle";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_TITLE)
  private String friendlyTitle;

  public static final String SERIALIZED_NAME_IS_DEFERRED = "IsDeferred";
  @SerializedName(SERIALIZED_NAME_IS_DEFERRED)
  private Boolean isDeferred;

  public static final String SERIALIZED_NAME_NO_COUNT = "NoCount";
  @SerializedName(SERIALIZED_NAME_NO_COUNT)
  private Integer noCount;

  public static final String SERIALIZED_NAME_NO_TELLERS = "NoTellers";
  @SerializedName(SERIALIZED_NAME_NO_TELLERS)
  private List<RecordedMember> noTellers = new ArrayList<>();

  public static final String SERIALIZED_NAME_NO_VOTE_RECORDED = "NoVoteRecorded";
  @SerializedName(SERIALIZED_NAME_NO_VOTE_RECORDED)
  private List<RecordedMember> noVoteRecorded = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOES = "Noes";
  @SerializedName(SERIALIZED_NAME_NOES)
  private List<RecordedMember> noes = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PUBLICATION_UPDATED = "PublicationUpdated";
  @SerializedName(SERIALIZED_NAME_PUBLICATION_UPDATED)
  private OffsetDateTime publicationUpdated;

  public static final String SERIALIZED_NAME_REMOTE_VOTING_END = "RemoteVotingEnd";
  @SerializedName(SERIALIZED_NAME_REMOTE_VOTING_END)
  private OffsetDateTime remoteVotingEnd;

  public static final String SERIALIZED_NAME_REMOTE_VOTING_START = "RemoteVotingStart";
  @SerializedName(SERIALIZED_NAME_REMOTE_VOTING_START)
  private OffsetDateTime remoteVotingStart;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public PublishedDivision() {
  }

  public PublishedDivision ayeCount(Integer ayeCount) {
    this.ayeCount = ayeCount;
    return this;
  }

  /**
   * Get ayeCount
   * @return ayeCount
   */
  @javax.annotation.Nullable
  public Integer getAyeCount() {
    return ayeCount;
  }

  public void setAyeCount(Integer ayeCount) {
    this.ayeCount = ayeCount;
  }


  public PublishedDivision ayeTellers(List<RecordedMember> ayeTellers) {
    this.ayeTellers = ayeTellers;
    return this;
  }

  public PublishedDivision addAyeTellersItem(RecordedMember ayeTellersItem) {
    if (this.ayeTellers == null) {
      this.ayeTellers = new ArrayList<>();
    }
    this.ayeTellers.add(ayeTellersItem);
    return this;
  }

  /**
   * Get ayeTellers
   * @return ayeTellers
   */
  @javax.annotation.Nullable
  public List<RecordedMember> getAyeTellers() {
    return ayeTellers;
  }

  public void setAyeTellers(List<RecordedMember> ayeTellers) {
    this.ayeTellers = ayeTellers;
  }


  public PublishedDivision ayes(List<RecordedMember> ayes) {
    this.ayes = ayes;
    return this;
  }

  public PublishedDivision addAyesItem(RecordedMember ayesItem) {
    if (this.ayes == null) {
      this.ayes = new ArrayList<>();
    }
    this.ayes.add(ayesItem);
    return this;
  }

  /**
   * Get ayes
   * @return ayes
   */
  @javax.annotation.Nullable
  public List<RecordedMember> getAyes() {
    return ayes;
  }

  public void setAyes(List<RecordedMember> ayes) {
    this.ayes = ayes;
  }


  public PublishedDivision date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public PublishedDivision divisionId(Integer divisionId) {
    this.divisionId = divisionId;
    return this;
  }

  /**
   * Get divisionId
   * @return divisionId
   */
  @javax.annotation.Nullable
  public Integer getDivisionId() {
    return divisionId;
  }

  public void setDivisionId(Integer divisionId) {
    this.divisionId = divisionId;
  }


  public PublishedDivision doubleMajorityAyeCount(Integer doubleMajorityAyeCount) {
    this.doubleMajorityAyeCount = doubleMajorityAyeCount;
    return this;
  }

  /**
   * Get doubleMajorityAyeCount
   * @return doubleMajorityAyeCount
   */
  @javax.annotation.Nullable
  public Integer getDoubleMajorityAyeCount() {
    return doubleMajorityAyeCount;
  }

  public void setDoubleMajorityAyeCount(Integer doubleMajorityAyeCount) {
    this.doubleMajorityAyeCount = doubleMajorityAyeCount;
  }


  public PublishedDivision doubleMajorityNoCount(Integer doubleMajorityNoCount) {
    this.doubleMajorityNoCount = doubleMajorityNoCount;
    return this;
  }

  /**
   * Get doubleMajorityNoCount
   * @return doubleMajorityNoCount
   */
  @javax.annotation.Nullable
  public Integer getDoubleMajorityNoCount() {
    return doubleMajorityNoCount;
  }

  public void setDoubleMajorityNoCount(Integer doubleMajorityNoCount) {
    this.doubleMajorityNoCount = doubleMajorityNoCount;
  }


  public PublishedDivision evELCountry(String evELCountry) {
    this.evELCountry = evELCountry;
    return this;
  }

  /**
   * Get evELCountry
   * @return evELCountry
   */
  @javax.annotation.Nullable
  public String getEvELCountry() {
    return evELCountry;
  }

  public void setEvELCountry(String evELCountry) {
    this.evELCountry = evELCountry;
  }


  public PublishedDivision evELType(String evELType) {
    this.evELType = evELType;
    return this;
  }

  /**
   * Get evELType
   * @return evELType
   */
  @javax.annotation.Nullable
  public String getEvELType() {
    return evELType;
  }

  public void setEvELType(String evELType) {
    this.evELType = evELType;
  }


  public PublishedDivision friendlyDescription(String friendlyDescription) {
    this.friendlyDescription = friendlyDescription;
    return this;
  }

  /**
   * Get friendlyDescription
   * @return friendlyDescription
   */
  @javax.annotation.Nullable
  public String getFriendlyDescription() {
    return friendlyDescription;
  }

  public void setFriendlyDescription(String friendlyDescription) {
    this.friendlyDescription = friendlyDescription;
  }


  public PublishedDivision friendlyTitle(String friendlyTitle) {
    this.friendlyTitle = friendlyTitle;
    return this;
  }

  /**
   * Get friendlyTitle
   * @return friendlyTitle
   */
  @javax.annotation.Nullable
  public String getFriendlyTitle() {
    return friendlyTitle;
  }

  public void setFriendlyTitle(String friendlyTitle) {
    this.friendlyTitle = friendlyTitle;
  }


  public PublishedDivision isDeferred(Boolean isDeferred) {
    this.isDeferred = isDeferred;
    return this;
  }

  /**
   * Get isDeferred
   * @return isDeferred
   */
  @javax.annotation.Nullable
  public Boolean getIsDeferred() {
    return isDeferred;
  }

  public void setIsDeferred(Boolean isDeferred) {
    this.isDeferred = isDeferred;
  }


  public PublishedDivision noCount(Integer noCount) {
    this.noCount = noCount;
    return this;
  }

  /**
   * Get noCount
   * @return noCount
   */
  @javax.annotation.Nullable
  public Integer getNoCount() {
    return noCount;
  }

  public void setNoCount(Integer noCount) {
    this.noCount = noCount;
  }


  public PublishedDivision noTellers(List<RecordedMember> noTellers) {
    this.noTellers = noTellers;
    return this;
  }

  public PublishedDivision addNoTellersItem(RecordedMember noTellersItem) {
    if (this.noTellers == null) {
      this.noTellers = new ArrayList<>();
    }
    this.noTellers.add(noTellersItem);
    return this;
  }

  /**
   * Get noTellers
   * @return noTellers
   */
  @javax.annotation.Nullable
  public List<RecordedMember> getNoTellers() {
    return noTellers;
  }

  public void setNoTellers(List<RecordedMember> noTellers) {
    this.noTellers = noTellers;
  }


  public PublishedDivision noVoteRecorded(List<RecordedMember> noVoteRecorded) {
    this.noVoteRecorded = noVoteRecorded;
    return this;
  }

  public PublishedDivision addNoVoteRecordedItem(RecordedMember noVoteRecordedItem) {
    if (this.noVoteRecorded == null) {
      this.noVoteRecorded = new ArrayList<>();
    }
    this.noVoteRecorded.add(noVoteRecordedItem);
    return this;
  }

  /**
   * Get noVoteRecorded
   * @return noVoteRecorded
   */
  @javax.annotation.Nullable
  public List<RecordedMember> getNoVoteRecorded() {
    return noVoteRecorded;
  }

  public void setNoVoteRecorded(List<RecordedMember> noVoteRecorded) {
    this.noVoteRecorded = noVoteRecorded;
  }


  public PublishedDivision noes(List<RecordedMember> noes) {
    this.noes = noes;
    return this;
  }

  public PublishedDivision addNoesItem(RecordedMember noesItem) {
    if (this.noes == null) {
      this.noes = new ArrayList<>();
    }
    this.noes.add(noesItem);
    return this;
  }

  /**
   * Get noes
   * @return noes
   */
  @javax.annotation.Nullable
  public List<RecordedMember> getNoes() {
    return noes;
  }

  public void setNoes(List<RecordedMember> noes) {
    this.noes = noes;
  }


  public PublishedDivision number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public PublishedDivision publicationUpdated(OffsetDateTime publicationUpdated) {
    this.publicationUpdated = publicationUpdated;
    return this;
  }

  /**
   * Get publicationUpdated
   * @return publicationUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPublicationUpdated() {
    return publicationUpdated;
  }

  public void setPublicationUpdated(OffsetDateTime publicationUpdated) {
    this.publicationUpdated = publicationUpdated;
  }


  public PublishedDivision remoteVotingEnd(OffsetDateTime remoteVotingEnd) {
    this.remoteVotingEnd = remoteVotingEnd;
    return this;
  }

  /**
   * Get remoteVotingEnd
   * @return remoteVotingEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRemoteVotingEnd() {
    return remoteVotingEnd;
  }

  public void setRemoteVotingEnd(OffsetDateTime remoteVotingEnd) {
    this.remoteVotingEnd = remoteVotingEnd;
  }


  public PublishedDivision remoteVotingStart(OffsetDateTime remoteVotingStart) {
    this.remoteVotingStart = remoteVotingStart;
    return this;
  }

  /**
   * Get remoteVotingStart
   * @return remoteVotingStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRemoteVotingStart() {
    return remoteVotingStart;
  }

  public void setRemoteVotingStart(OffsetDateTime remoteVotingStart) {
    this.remoteVotingStart = remoteVotingStart;
  }


  public PublishedDivision title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublishedDivision publishedDivision = (PublishedDivision) o;
    return Objects.equals(this.ayeCount, publishedDivision.ayeCount) &&
        Objects.equals(this.ayeTellers, publishedDivision.ayeTellers) &&
        Objects.equals(this.ayes, publishedDivision.ayes) &&
        Objects.equals(this.date, publishedDivision.date) &&
        Objects.equals(this.divisionId, publishedDivision.divisionId) &&
        Objects.equals(this.doubleMajorityAyeCount, publishedDivision.doubleMajorityAyeCount) &&
        Objects.equals(this.doubleMajorityNoCount, publishedDivision.doubleMajorityNoCount) &&
        Objects.equals(this.evELCountry, publishedDivision.evELCountry) &&
        Objects.equals(this.evELType, publishedDivision.evELType) &&
        Objects.equals(this.friendlyDescription, publishedDivision.friendlyDescription) &&
        Objects.equals(this.friendlyTitle, publishedDivision.friendlyTitle) &&
        Objects.equals(this.isDeferred, publishedDivision.isDeferred) &&
        Objects.equals(this.noCount, publishedDivision.noCount) &&
        Objects.equals(this.noTellers, publishedDivision.noTellers) &&
        Objects.equals(this.noVoteRecorded, publishedDivision.noVoteRecorded) &&
        Objects.equals(this.noes, publishedDivision.noes) &&
        Objects.equals(this.number, publishedDivision.number) &&
        Objects.equals(this.publicationUpdated, publishedDivision.publicationUpdated) &&
        Objects.equals(this.remoteVotingEnd, publishedDivision.remoteVotingEnd) &&
        Objects.equals(this.remoteVotingStart, publishedDivision.remoteVotingStart) &&
        Objects.equals(this.title, publishedDivision.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ayeCount, ayeTellers, ayes, date, divisionId, doubleMajorityAyeCount, doubleMajorityNoCount, evELCountry, evELType, friendlyDescription, friendlyTitle, isDeferred, noCount, noTellers, noVoteRecorded, noes, number, publicationUpdated, remoteVotingEnd, remoteVotingStart, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublishedDivision {\n");
    sb.append("    ayeCount: ").append(toIndentedString(ayeCount)).append("\n");
    sb.append("    ayeTellers: ").append(toIndentedString(ayeTellers)).append("\n");
    sb.append("    ayes: ").append(toIndentedString(ayes)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    divisionId: ").append(toIndentedString(divisionId)).append("\n");
    sb.append("    doubleMajorityAyeCount: ").append(toIndentedString(doubleMajorityAyeCount)).append("\n");
    sb.append("    doubleMajorityNoCount: ").append(toIndentedString(doubleMajorityNoCount)).append("\n");
    sb.append("    evELCountry: ").append(toIndentedString(evELCountry)).append("\n");
    sb.append("    evELType: ").append(toIndentedString(evELType)).append("\n");
    sb.append("    friendlyDescription: ").append(toIndentedString(friendlyDescription)).append("\n");
    sb.append("    friendlyTitle: ").append(toIndentedString(friendlyTitle)).append("\n");
    sb.append("    isDeferred: ").append(toIndentedString(isDeferred)).append("\n");
    sb.append("    noCount: ").append(toIndentedString(noCount)).append("\n");
    sb.append("    noTellers: ").append(toIndentedString(noTellers)).append("\n");
    sb.append("    noVoteRecorded: ").append(toIndentedString(noVoteRecorded)).append("\n");
    sb.append("    noes: ").append(toIndentedString(noes)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    publicationUpdated: ").append(toIndentedString(publicationUpdated)).append("\n");
    sb.append("    remoteVotingEnd: ").append(toIndentedString(remoteVotingEnd)).append("\n");
    sb.append("    remoteVotingStart: ").append(toIndentedString(remoteVotingStart)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AyeCount");
    openapiFields.add("AyeTellers");
    openapiFields.add("Ayes");
    openapiFields.add("Date");
    openapiFields.add("DivisionId");
    openapiFields.add("DoubleMajorityAyeCount");
    openapiFields.add("DoubleMajorityNoCount");
    openapiFields.add("EVELCountry");
    openapiFields.add("EVELType");
    openapiFields.add("FriendlyDescription");
    openapiFields.add("FriendlyTitle");
    openapiFields.add("IsDeferred");
    openapiFields.add("NoCount");
    openapiFields.add("NoTellers");
    openapiFields.add("NoVoteRecorded");
    openapiFields.add("Noes");
    openapiFields.add("Number");
    openapiFields.add("PublicationUpdated");
    openapiFields.add("RemoteVotingEnd");
    openapiFields.add("RemoteVotingStart");
    openapiFields.add("Title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublishedDivision
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublishedDivision.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublishedDivision is not found in the empty JSON string", PublishedDivision.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublishedDivision.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublishedDivision` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("AyeTellers") != null && !jsonObj.get("AyeTellers").isJsonNull()) {
        JsonArray jsonArrayayeTellers = jsonObj.getAsJsonArray("AyeTellers");
        if (jsonArrayayeTellers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AyeTellers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AyeTellers` to be an array in the JSON string but got `%s`", jsonObj.get("AyeTellers").toString()));
          }

          // validate the optional field `AyeTellers` (array)
          for (int i = 0; i < jsonArrayayeTellers.size(); i++) {
            RecordedMember.validateJsonElement(jsonArrayayeTellers.get(i));
          };
        }
      }
      if (jsonObj.get("Ayes") != null && !jsonObj.get("Ayes").isJsonNull()) {
        JsonArray jsonArrayayes = jsonObj.getAsJsonArray("Ayes");
        if (jsonArrayayes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Ayes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Ayes` to be an array in the JSON string but got `%s`", jsonObj.get("Ayes").toString()));
          }

          // validate the optional field `Ayes` (array)
          for (int i = 0; i < jsonArrayayes.size(); i++) {
            RecordedMember.validateJsonElement(jsonArrayayes.get(i));
          };
        }
      }
      if ((jsonObj.get("EVELCountry") != null && !jsonObj.get("EVELCountry").isJsonNull()) && !jsonObj.get("EVELCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EVELCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EVELCountry").toString()));
      }
      if ((jsonObj.get("EVELType") != null && !jsonObj.get("EVELType").isJsonNull()) && !jsonObj.get("EVELType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EVELType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EVELType").toString()));
      }
      if ((jsonObj.get("FriendlyDescription") != null && !jsonObj.get("FriendlyDescription").isJsonNull()) && !jsonObj.get("FriendlyDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FriendlyDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FriendlyDescription").toString()));
      }
      if ((jsonObj.get("FriendlyTitle") != null && !jsonObj.get("FriendlyTitle").isJsonNull()) && !jsonObj.get("FriendlyTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FriendlyTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FriendlyTitle").toString()));
      }
      if (jsonObj.get("NoTellers") != null && !jsonObj.get("NoTellers").isJsonNull()) {
        JsonArray jsonArraynoTellers = jsonObj.getAsJsonArray("NoTellers");
        if (jsonArraynoTellers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("NoTellers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `NoTellers` to be an array in the JSON string but got `%s`", jsonObj.get("NoTellers").toString()));
          }

          // validate the optional field `NoTellers` (array)
          for (int i = 0; i < jsonArraynoTellers.size(); i++) {
            RecordedMember.validateJsonElement(jsonArraynoTellers.get(i));
          };
        }
      }
      if (jsonObj.get("NoVoteRecorded") != null && !jsonObj.get("NoVoteRecorded").isJsonNull()) {
        JsonArray jsonArraynoVoteRecorded = jsonObj.getAsJsonArray("NoVoteRecorded");
        if (jsonArraynoVoteRecorded != null) {
          // ensure the json data is an array
          if (!jsonObj.get("NoVoteRecorded").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `NoVoteRecorded` to be an array in the JSON string but got `%s`", jsonObj.get("NoVoteRecorded").toString()));
          }

          // validate the optional field `NoVoteRecorded` (array)
          for (int i = 0; i < jsonArraynoVoteRecorded.size(); i++) {
            RecordedMember.validateJsonElement(jsonArraynoVoteRecorded.get(i));
          };
        }
      }
      if (jsonObj.get("Noes") != null && !jsonObj.get("Noes").isJsonNull()) {
        JsonArray jsonArraynoes = jsonObj.getAsJsonArray("Noes");
        if (jsonArraynoes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Noes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Noes` to be an array in the JSON string but got `%s`", jsonObj.get("Noes").toString()));
          }

          // validate the optional field `Noes` (array)
          for (int i = 0; i < jsonArraynoes.size(); i++) {
            RecordedMember.validateJsonElement(jsonArraynoes.get(i));
          };
        }
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublishedDivision.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublishedDivision' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublishedDivision> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublishedDivision.class));

       return (TypeAdapter<T>) new TypeAdapter<PublishedDivision>() {
           @Override
           public void write(JsonWriter out, PublishedDivision value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublishedDivision read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublishedDivision given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublishedDivision
   * @throws IOException if the JSON string is invalid with respect to PublishedDivision
   */
  public static PublishedDivision fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublishedDivision.class);
  }

  /**
   * Convert an instance of PublishedDivision to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

