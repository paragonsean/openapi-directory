/*
 * Commons Votes API
 * An API that allows querying of Commons Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PartyVoteResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DivisionGroupedByParty
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:31.787285-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DivisionGroupedByParty {
  public static final String SERIALIZED_NAME_AYE_COUNT = "AyeCount";
  @SerializedName(SERIALIZED_NAME_AYE_COUNT)
  private Integer ayeCount;

  public static final String SERIALIZED_NAME_AYES = "Ayes";
  @SerializedName(SERIALIZED_NAME_AYES)
  private List<PartyVoteResult> ayes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DIVISION_ID = "DivisionId";
  @SerializedName(SERIALIZED_NAME_DIVISION_ID)
  private Integer divisionId;

  public static final String SERIALIZED_NAME_NO_COUNT = "NoCount";
  @SerializedName(SERIALIZED_NAME_NO_COUNT)
  private Integer noCount;

  public static final String SERIALIZED_NAME_NOES = "Noes";
  @SerializedName(SERIALIZED_NAME_NOES)
  private List<PartyVoteResult> noes = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public DivisionGroupedByParty() {
  }

  public DivisionGroupedByParty ayeCount(Integer ayeCount) {
    this.ayeCount = ayeCount;
    return this;
  }

  /**
   * Get ayeCount
   * @return ayeCount
   */
  @javax.annotation.Nullable
  public Integer getAyeCount() {
    return ayeCount;
  }

  public void setAyeCount(Integer ayeCount) {
    this.ayeCount = ayeCount;
  }


  public DivisionGroupedByParty ayes(List<PartyVoteResult> ayes) {
    this.ayes = ayes;
    return this;
  }

  public DivisionGroupedByParty addAyesItem(PartyVoteResult ayesItem) {
    if (this.ayes == null) {
      this.ayes = new ArrayList<>();
    }
    this.ayes.add(ayesItem);
    return this;
  }

  /**
   * Counts of all members who voted &#39;Aye&#39;, grouped by party
   * @return ayes
   */
  @javax.annotation.Nullable
  public List<PartyVoteResult> getAyes() {
    return ayes;
  }

  public void setAyes(List<PartyVoteResult> ayes) {
    this.ayes = ayes;
  }


  public DivisionGroupedByParty date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public DivisionGroupedByParty divisionId(Integer divisionId) {
    this.divisionId = divisionId;
    return this;
  }

  /**
   * Get divisionId
   * @return divisionId
   */
  @javax.annotation.Nullable
  public Integer getDivisionId() {
    return divisionId;
  }

  public void setDivisionId(Integer divisionId) {
    this.divisionId = divisionId;
  }


  public DivisionGroupedByParty noCount(Integer noCount) {
    this.noCount = noCount;
    return this;
  }

  /**
   * Get noCount
   * @return noCount
   */
  @javax.annotation.Nullable
  public Integer getNoCount() {
    return noCount;
  }

  public void setNoCount(Integer noCount) {
    this.noCount = noCount;
  }


  public DivisionGroupedByParty noes(List<PartyVoteResult> noes) {
    this.noes = noes;
    return this;
  }

  public DivisionGroupedByParty addNoesItem(PartyVoteResult noesItem) {
    if (this.noes == null) {
      this.noes = new ArrayList<>();
    }
    this.noes.add(noesItem);
    return this;
  }

  /**
   * Counts of all members who voted &#39;Noe&#39;, grouped by party
   * @return noes
   */
  @javax.annotation.Nullable
  public List<PartyVoteResult> getNoes() {
    return noes;
  }

  public void setNoes(List<PartyVoteResult> noes) {
    this.noes = noes;
  }


  public DivisionGroupedByParty number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public DivisionGroupedByParty title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DivisionGroupedByParty divisionGroupedByParty = (DivisionGroupedByParty) o;
    return Objects.equals(this.ayeCount, divisionGroupedByParty.ayeCount) &&
        Objects.equals(this.ayes, divisionGroupedByParty.ayes) &&
        Objects.equals(this.date, divisionGroupedByParty.date) &&
        Objects.equals(this.divisionId, divisionGroupedByParty.divisionId) &&
        Objects.equals(this.noCount, divisionGroupedByParty.noCount) &&
        Objects.equals(this.noes, divisionGroupedByParty.noes) &&
        Objects.equals(this.number, divisionGroupedByParty.number) &&
        Objects.equals(this.title, divisionGroupedByParty.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ayeCount, ayes, date, divisionId, noCount, noes, number, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DivisionGroupedByParty {\n");
    sb.append("    ayeCount: ").append(toIndentedString(ayeCount)).append("\n");
    sb.append("    ayes: ").append(toIndentedString(ayes)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    divisionId: ").append(toIndentedString(divisionId)).append("\n");
    sb.append("    noCount: ").append(toIndentedString(noCount)).append("\n");
    sb.append("    noes: ").append(toIndentedString(noes)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AyeCount");
    openapiFields.add("Ayes");
    openapiFields.add("Date");
    openapiFields.add("DivisionId");
    openapiFields.add("NoCount");
    openapiFields.add("Noes");
    openapiFields.add("Number");
    openapiFields.add("Title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DivisionGroupedByParty
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DivisionGroupedByParty.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DivisionGroupedByParty is not found in the empty JSON string", DivisionGroupedByParty.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DivisionGroupedByParty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DivisionGroupedByParty` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Ayes") != null && !jsonObj.get("Ayes").isJsonNull()) {
        JsonArray jsonArrayayes = jsonObj.getAsJsonArray("Ayes");
        if (jsonArrayayes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Ayes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Ayes` to be an array in the JSON string but got `%s`", jsonObj.get("Ayes").toString()));
          }

          // validate the optional field `Ayes` (array)
          for (int i = 0; i < jsonArrayayes.size(); i++) {
            PartyVoteResult.validateJsonElement(jsonArrayayes.get(i));
          };
        }
      }
      if (jsonObj.get("Noes") != null && !jsonObj.get("Noes").isJsonNull()) {
        JsonArray jsonArraynoes = jsonObj.getAsJsonArray("Noes");
        if (jsonArraynoes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Noes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Noes` to be an array in the JSON string but got `%s`", jsonObj.get("Noes").toString()));
          }

          // validate the optional field `Noes` (array)
          for (int i = 0; i < jsonArraynoes.size(); i++) {
            PartyVoteResult.validateJsonElement(jsonArraynoes.get(i));
          };
        }
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DivisionGroupedByParty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DivisionGroupedByParty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DivisionGroupedByParty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DivisionGroupedByParty.class));

       return (TypeAdapter<T>) new TypeAdapter<DivisionGroupedByParty>() {
           @Override
           public void write(JsonWriter out, DivisionGroupedByParty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DivisionGroupedByParty read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DivisionGroupedByParty given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DivisionGroupedByParty
   * @throws IOException if the JSON string is invalid with respect to DivisionGroupedByParty
   */
  public static DivisionGroupedByParty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DivisionGroupedByParty.class);
  }

  /**
   * Convert an instance of DivisionGroupedByParty to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

