/*
 * Commons Votes API
 * An API that allows querying of Commons Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DivisionGroupedByParty;
import org.openapitools.client.model.MemberVotingRecord;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PublishedDivision;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DivisionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DivisionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DivisionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for divisionsGetDivisionById
     * @param divisionId Id number of a Division whose records are to be returned (required)
     * @param format xml or json (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call divisionsGetDivisionByIdCall(Integer divisionId, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/division/{divisionId}.{format}"
            .replace("{" + "divisionId" + "}", localVarApiClient.escapeString(divisionId.toString()))
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call divisionsGetDivisionByIdValidateBeforeCall(Integer divisionId, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'divisionId' is set
        if (divisionId == null) {
            throw new ApiException("Missing the required parameter 'divisionId' when calling divisionsGetDivisionById(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling divisionsGetDivisionById(Async)");
        }

        return divisionsGetDivisionByIdCall(divisionId, format, _callback);

    }

    /**
     * Return a Division
     * Single Division which has the specified Id
     * @param divisionId Id number of a Division whose records are to be returned (required)
     * @param format xml or json (required)
     * @return PublishedDivision
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public PublishedDivision divisionsGetDivisionById(Integer divisionId, String format) throws ApiException {
        ApiResponse<PublishedDivision> localVarResp = divisionsGetDivisionByIdWithHttpInfo(divisionId, format);
        return localVarResp.getData();
    }

    /**
     * Return a Division
     * Single Division which has the specified Id
     * @param divisionId Id number of a Division whose records are to be returned (required)
     * @param format xml or json (required)
     * @return ApiResponse&lt;PublishedDivision&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublishedDivision> divisionsGetDivisionByIdWithHttpInfo(Integer divisionId, String format) throws ApiException {
        okhttp3.Call localVarCall = divisionsGetDivisionByIdValidateBeforeCall(divisionId, format, null);
        Type localVarReturnType = new TypeToken<PublishedDivision>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a Division (asynchronously)
     * Single Division which has the specified Id
     * @param divisionId Id number of a Division whose records are to be returned (required)
     * @param format xml or json (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call divisionsGetDivisionByIdAsync(Integer divisionId, String format, final ApiCallback<PublishedDivision> _callback) throws ApiException {

        okhttp3.Call localVarCall = divisionsGetDivisionByIdValidateBeforeCall(divisionId, format, _callback);
        Type localVarReturnType = new TypeToken<PublishedDivision>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for divisionsGetDivisionsGroupsByParty
     * @param format xml or json (required)
     * @param queryParametersSearchTerm Divisions containing search term within title or number (optional)
     * @param queryParametersMemberId Divisions returning Member with Member ID voting records (optional)
     * @param queryParametersIncludeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param queryParametersStartDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersEndDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersDivisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call divisionsGetDivisionsGroupsByPartyCall(String format, String queryParametersSearchTerm, Integer queryParametersMemberId, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/divisions.{format}/groupedbyparty"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queryParametersSearchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.searchTerm", queryParametersSearchTerm));
        }

        if (queryParametersMemberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.memberId", queryParametersMemberId));
        }

        if (queryParametersIncludeWhenMemberWasTeller != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.includeWhenMemberWasTeller", queryParametersIncludeWhenMemberWasTeller));
        }

        if (queryParametersStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.startDate", queryParametersStartDate));
        }

        if (queryParametersEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.endDate", queryParametersEndDate));
        }

        if (queryParametersDivisionNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.divisionNumber", queryParametersDivisionNumber));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call divisionsGetDivisionsGroupsByPartyValidateBeforeCall(String format, String queryParametersSearchTerm, Integer queryParametersMemberId, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling divisionsGetDivisionsGroupsByParty(Async)");
        }

        return divisionsGetDivisionsGroupsByPartyCall(format, queryParametersSearchTerm, queryParametersMemberId, queryParametersIncludeWhenMemberWasTeller, queryParametersStartDate, queryParametersEndDate, queryParametersDivisionNumber, _callback);

    }

    /**
     * Return Divisions results grouped by party
     * Division results which meet the specified criteria grouped by parties
     * @param format xml or json (required)
     * @param queryParametersSearchTerm Divisions containing search term within title or number (optional)
     * @param queryParametersMemberId Divisions returning Member with Member ID voting records (optional)
     * @param queryParametersIncludeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param queryParametersStartDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersEndDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersDivisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @return List&lt;DivisionGroupedByParty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public List<DivisionGroupedByParty> divisionsGetDivisionsGroupsByParty(String format, String queryParametersSearchTerm, Integer queryParametersMemberId, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber) throws ApiException {
        ApiResponse<List<DivisionGroupedByParty>> localVarResp = divisionsGetDivisionsGroupsByPartyWithHttpInfo(format, queryParametersSearchTerm, queryParametersMemberId, queryParametersIncludeWhenMemberWasTeller, queryParametersStartDate, queryParametersEndDate, queryParametersDivisionNumber);
        return localVarResp.getData();
    }

    /**
     * Return Divisions results grouped by party
     * Division results which meet the specified criteria grouped by parties
     * @param format xml or json (required)
     * @param queryParametersSearchTerm Divisions containing search term within title or number (optional)
     * @param queryParametersMemberId Divisions returning Member with Member ID voting records (optional)
     * @param queryParametersIncludeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param queryParametersStartDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersEndDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersDivisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @return ApiResponse&lt;List&lt;DivisionGroupedByParty&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DivisionGroupedByParty>> divisionsGetDivisionsGroupsByPartyWithHttpInfo(String format, String queryParametersSearchTerm, Integer queryParametersMemberId, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber) throws ApiException {
        okhttp3.Call localVarCall = divisionsGetDivisionsGroupsByPartyValidateBeforeCall(format, queryParametersSearchTerm, queryParametersMemberId, queryParametersIncludeWhenMemberWasTeller, queryParametersStartDate, queryParametersEndDate, queryParametersDivisionNumber, null);
        Type localVarReturnType = new TypeToken<List<DivisionGroupedByParty>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return Divisions results grouped by party (asynchronously)
     * Division results which meet the specified criteria grouped by parties
     * @param format xml or json (required)
     * @param queryParametersSearchTerm Divisions containing search term within title or number (optional)
     * @param queryParametersMemberId Divisions returning Member with Member ID voting records (optional)
     * @param queryParametersIncludeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param queryParametersStartDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersEndDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersDivisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call divisionsGetDivisionsGroupsByPartyAsync(String format, String queryParametersSearchTerm, Integer queryParametersMemberId, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber, final ApiCallback<List<DivisionGroupedByParty>> _callback) throws ApiException {

        okhttp3.Call localVarCall = divisionsGetDivisionsGroupsByPartyValidateBeforeCall(format, queryParametersSearchTerm, queryParametersMemberId, queryParametersIncludeWhenMemberWasTeller, queryParametersStartDate, queryParametersEndDate, queryParametersDivisionNumber, _callback);
        Type localVarReturnType = new TypeToken<List<DivisionGroupedByParty>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for divisionsGetVotingRecordsForMember
     * @param format xml or json (required)
     * @param queryParametersMemberId Id number of a Member whose voting records are to be returned (required)
     * @param queryParametersSkip The number of records to skip. Default is 0 (optional)
     * @param queryParametersTake The number of records to return per page. Default is 25 (optional)
     * @param queryParametersSearchTerm Divisions containing search term within title or number (optional)
     * @param queryParametersIncludeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param queryParametersStartDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersEndDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersDivisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call divisionsGetVotingRecordsForMemberCall(String format, Integer queryParametersMemberId, Integer queryParametersSkip, Integer queryParametersTake, String queryParametersSearchTerm, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/divisions.{format}/membervoting"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queryParametersMemberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.memberId", queryParametersMemberId));
        }

        if (queryParametersSkip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.skip", queryParametersSkip));
        }

        if (queryParametersTake != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.take", queryParametersTake));
        }

        if (queryParametersSearchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.searchTerm", queryParametersSearchTerm));
        }

        if (queryParametersIncludeWhenMemberWasTeller != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.includeWhenMemberWasTeller", queryParametersIncludeWhenMemberWasTeller));
        }

        if (queryParametersStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.startDate", queryParametersStartDate));
        }

        if (queryParametersEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.endDate", queryParametersEndDate));
        }

        if (queryParametersDivisionNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.divisionNumber", queryParametersDivisionNumber));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call divisionsGetVotingRecordsForMemberValidateBeforeCall(String format, Integer queryParametersMemberId, Integer queryParametersSkip, Integer queryParametersTake, String queryParametersSearchTerm, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling divisionsGetVotingRecordsForMember(Async)");
        }

        // verify the required parameter 'queryParametersMemberId' is set
        if (queryParametersMemberId == null) {
            throw new ApiException("Missing the required parameter 'queryParametersMemberId' when calling divisionsGetVotingRecordsForMember(Async)");
        }

        return divisionsGetVotingRecordsForMemberCall(format, queryParametersMemberId, queryParametersSkip, queryParametersTake, queryParametersSearchTerm, queryParametersIncludeWhenMemberWasTeller, queryParametersStartDate, queryParametersEndDate, queryParametersDivisionNumber, _callback);

    }

    /**
     * Return voting records for a Member
     * List of voting records for a member which meet the specified criteria.
     * @param format xml or json (required)
     * @param queryParametersMemberId Id number of a Member whose voting records are to be returned (required)
     * @param queryParametersSkip The number of records to skip. Default is 0 (optional)
     * @param queryParametersTake The number of records to return per page. Default is 25 (optional)
     * @param queryParametersSearchTerm Divisions containing search term within title or number (optional)
     * @param queryParametersIncludeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param queryParametersStartDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersEndDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersDivisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @return List&lt;MemberVotingRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public List<MemberVotingRecord> divisionsGetVotingRecordsForMember(String format, Integer queryParametersMemberId, Integer queryParametersSkip, Integer queryParametersTake, String queryParametersSearchTerm, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber) throws ApiException {
        ApiResponse<List<MemberVotingRecord>> localVarResp = divisionsGetVotingRecordsForMemberWithHttpInfo(format, queryParametersMemberId, queryParametersSkip, queryParametersTake, queryParametersSearchTerm, queryParametersIncludeWhenMemberWasTeller, queryParametersStartDate, queryParametersEndDate, queryParametersDivisionNumber);
        return localVarResp.getData();
    }

    /**
     * Return voting records for a Member
     * List of voting records for a member which meet the specified criteria.
     * @param format xml or json (required)
     * @param queryParametersMemberId Id number of a Member whose voting records are to be returned (required)
     * @param queryParametersSkip The number of records to skip. Default is 0 (optional)
     * @param queryParametersTake The number of records to return per page. Default is 25 (optional)
     * @param queryParametersSearchTerm Divisions containing search term within title or number (optional)
     * @param queryParametersIncludeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param queryParametersStartDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersEndDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersDivisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @return ApiResponse&lt;List&lt;MemberVotingRecord&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MemberVotingRecord>> divisionsGetVotingRecordsForMemberWithHttpInfo(String format, Integer queryParametersMemberId, Integer queryParametersSkip, Integer queryParametersTake, String queryParametersSearchTerm, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber) throws ApiException {
        okhttp3.Call localVarCall = divisionsGetVotingRecordsForMemberValidateBeforeCall(format, queryParametersMemberId, queryParametersSkip, queryParametersTake, queryParametersSearchTerm, queryParametersIncludeWhenMemberWasTeller, queryParametersStartDate, queryParametersEndDate, queryParametersDivisionNumber, null);
        Type localVarReturnType = new TypeToken<List<MemberVotingRecord>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return voting records for a Member (asynchronously)
     * List of voting records for a member which meet the specified criteria.
     * @param format xml or json (required)
     * @param queryParametersMemberId Id number of a Member whose voting records are to be returned (required)
     * @param queryParametersSkip The number of records to skip. Default is 0 (optional)
     * @param queryParametersTake The number of records to return per page. Default is 25 (optional)
     * @param queryParametersSearchTerm Divisions containing search term within title or number (optional)
     * @param queryParametersIncludeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param queryParametersStartDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersEndDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersDivisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call divisionsGetVotingRecordsForMemberAsync(String format, Integer queryParametersMemberId, Integer queryParametersSkip, Integer queryParametersTake, String queryParametersSearchTerm, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber, final ApiCallback<List<MemberVotingRecord>> _callback) throws ApiException {

        okhttp3.Call localVarCall = divisionsGetVotingRecordsForMemberValidateBeforeCall(format, queryParametersMemberId, queryParametersSkip, queryParametersTake, queryParametersSearchTerm, queryParametersIncludeWhenMemberWasTeller, queryParametersStartDate, queryParametersEndDate, queryParametersDivisionNumber, _callback);
        Type localVarReturnType = new TypeToken<List<MemberVotingRecord>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for divisionsSearchDivisions
     * @param format json or xml (required)
     * @param queryParametersSkip The number of records to skip. Default is 0 (optional)
     * @param queryParametersTake The number of records to return per page. Default is 25 (optional)
     * @param queryParametersSearchTerm Divisions containing search term within title or number (optional)
     * @param queryParametersMemberId Divisions returning Member with Member ID voting records (optional)
     * @param queryParametersIncludeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param queryParametersStartDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersEndDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersDivisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call divisionsSearchDivisionsCall(String format, Integer queryParametersSkip, Integer queryParametersTake, String queryParametersSearchTerm, Integer queryParametersMemberId, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/divisions.{format}/search"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queryParametersSkip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.skip", queryParametersSkip));
        }

        if (queryParametersTake != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.take", queryParametersTake));
        }

        if (queryParametersSearchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.searchTerm", queryParametersSearchTerm));
        }

        if (queryParametersMemberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.memberId", queryParametersMemberId));
        }

        if (queryParametersIncludeWhenMemberWasTeller != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.includeWhenMemberWasTeller", queryParametersIncludeWhenMemberWasTeller));
        }

        if (queryParametersStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.startDate", queryParametersStartDate));
        }

        if (queryParametersEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.endDate", queryParametersEndDate));
        }

        if (queryParametersDivisionNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.divisionNumber", queryParametersDivisionNumber));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call divisionsSearchDivisionsValidateBeforeCall(String format, Integer queryParametersSkip, Integer queryParametersTake, String queryParametersSearchTerm, Integer queryParametersMemberId, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling divisionsSearchDivisions(Async)");
        }

        return divisionsSearchDivisionsCall(format, queryParametersSkip, queryParametersTake, queryParametersSearchTerm, queryParametersMemberId, queryParametersIncludeWhenMemberWasTeller, queryParametersStartDate, queryParametersEndDate, queryParametersDivisionNumber, _callback);

    }

    /**
     * Return a list of Divisions
     * List of Divisions which meet the specified criteria
     * @param format json or xml (required)
     * @param queryParametersSkip The number of records to skip. Default is 0 (optional)
     * @param queryParametersTake The number of records to return per page. Default is 25 (optional)
     * @param queryParametersSearchTerm Divisions containing search term within title or number (optional)
     * @param queryParametersMemberId Divisions returning Member with Member ID voting records (optional)
     * @param queryParametersIncludeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param queryParametersStartDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersEndDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersDivisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @return List&lt;PublishedDivision&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public List<PublishedDivision> divisionsSearchDivisions(String format, Integer queryParametersSkip, Integer queryParametersTake, String queryParametersSearchTerm, Integer queryParametersMemberId, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber) throws ApiException {
        ApiResponse<List<PublishedDivision>> localVarResp = divisionsSearchDivisionsWithHttpInfo(format, queryParametersSkip, queryParametersTake, queryParametersSearchTerm, queryParametersMemberId, queryParametersIncludeWhenMemberWasTeller, queryParametersStartDate, queryParametersEndDate, queryParametersDivisionNumber);
        return localVarResp.getData();
    }

    /**
     * Return a list of Divisions
     * List of Divisions which meet the specified criteria
     * @param format json or xml (required)
     * @param queryParametersSkip The number of records to skip. Default is 0 (optional)
     * @param queryParametersTake The number of records to return per page. Default is 25 (optional)
     * @param queryParametersSearchTerm Divisions containing search term within title or number (optional)
     * @param queryParametersMemberId Divisions returning Member with Member ID voting records (optional)
     * @param queryParametersIncludeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param queryParametersStartDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersEndDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersDivisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @return ApiResponse&lt;List&lt;PublishedDivision&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PublishedDivision>> divisionsSearchDivisionsWithHttpInfo(String format, Integer queryParametersSkip, Integer queryParametersTake, String queryParametersSearchTerm, Integer queryParametersMemberId, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber) throws ApiException {
        okhttp3.Call localVarCall = divisionsSearchDivisionsValidateBeforeCall(format, queryParametersSkip, queryParametersTake, queryParametersSearchTerm, queryParametersMemberId, queryParametersIncludeWhenMemberWasTeller, queryParametersStartDate, queryParametersEndDate, queryParametersDivisionNumber, null);
        Type localVarReturnType = new TypeToken<List<PublishedDivision>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of Divisions (asynchronously)
     * List of Divisions which meet the specified criteria
     * @param format json or xml (required)
     * @param queryParametersSkip The number of records to skip. Default is 0 (optional)
     * @param queryParametersTake The number of records to return per page. Default is 25 (optional)
     * @param queryParametersSearchTerm Divisions containing search term within title or number (optional)
     * @param queryParametersMemberId Divisions returning Member with Member ID voting records (optional)
     * @param queryParametersIncludeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param queryParametersStartDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersEndDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersDivisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call divisionsSearchDivisionsAsync(String format, Integer queryParametersSkip, Integer queryParametersTake, String queryParametersSearchTerm, Integer queryParametersMemberId, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber, final ApiCallback<List<PublishedDivision>> _callback) throws ApiException {

        okhttp3.Call localVarCall = divisionsSearchDivisionsValidateBeforeCall(format, queryParametersSkip, queryParametersTake, queryParametersSearchTerm, queryParametersMemberId, queryParametersIncludeWhenMemberWasTeller, queryParametersStartDate, queryParametersEndDate, queryParametersDivisionNumber, _callback);
        Type localVarReturnType = new TypeToken<List<PublishedDivision>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for divisionsSearchTotalResults
     * @param format json or xml (required)
     * @param queryParametersSearchTerm Divisions containing search term within title or number (optional)
     * @param queryParametersMemberId Divisions returning Member with Member ID voting records (optional)
     * @param queryParametersIncludeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param queryParametersStartDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersEndDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersDivisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call divisionsSearchTotalResultsCall(String format, String queryParametersSearchTerm, Integer queryParametersMemberId, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/divisions.{format}/searchTotalResults"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queryParametersSearchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.searchTerm", queryParametersSearchTerm));
        }

        if (queryParametersMemberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.memberId", queryParametersMemberId));
        }

        if (queryParametersIncludeWhenMemberWasTeller != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.includeWhenMemberWasTeller", queryParametersIncludeWhenMemberWasTeller));
        }

        if (queryParametersStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.startDate", queryParametersStartDate));
        }

        if (queryParametersEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.endDate", queryParametersEndDate));
        }

        if (queryParametersDivisionNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryParameters.divisionNumber", queryParametersDivisionNumber));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call divisionsSearchTotalResultsValidateBeforeCall(String format, String queryParametersSearchTerm, Integer queryParametersMemberId, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling divisionsSearchTotalResults(Async)");
        }

        return divisionsSearchTotalResultsCall(format, queryParametersSearchTerm, queryParametersMemberId, queryParametersIncludeWhenMemberWasTeller, queryParametersStartDate, queryParametersEndDate, queryParametersDivisionNumber, _callback);

    }

    /**
     * Return total results count
     * Total count of Divisions meeting the specified criteria
     * @param format json or xml (required)
     * @param queryParametersSearchTerm Divisions containing search term within title or number (optional)
     * @param queryParametersMemberId Divisions returning Member with Member ID voting records (optional)
     * @param queryParametersIncludeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param queryParametersStartDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersEndDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersDivisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public Integer divisionsSearchTotalResults(String format, String queryParametersSearchTerm, Integer queryParametersMemberId, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber) throws ApiException {
        ApiResponse<Integer> localVarResp = divisionsSearchTotalResultsWithHttpInfo(format, queryParametersSearchTerm, queryParametersMemberId, queryParametersIncludeWhenMemberWasTeller, queryParametersStartDate, queryParametersEndDate, queryParametersDivisionNumber);
        return localVarResp.getData();
    }

    /**
     * Return total results count
     * Total count of Divisions meeting the specified criteria
     * @param format json or xml (required)
     * @param queryParametersSearchTerm Divisions containing search term within title or number (optional)
     * @param queryParametersMemberId Divisions returning Member with Member ID voting records (optional)
     * @param queryParametersIncludeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param queryParametersStartDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersEndDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersDivisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> divisionsSearchTotalResultsWithHttpInfo(String format, String queryParametersSearchTerm, Integer queryParametersMemberId, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber) throws ApiException {
        okhttp3.Call localVarCall = divisionsSearchTotalResultsValidateBeforeCall(format, queryParametersSearchTerm, queryParametersMemberId, queryParametersIncludeWhenMemberWasTeller, queryParametersStartDate, queryParametersEndDate, queryParametersDivisionNumber, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return total results count (asynchronously)
     * Total count of Divisions meeting the specified criteria
     * @param format json or xml (required)
     * @param queryParametersSearchTerm Divisions containing search term within title or number (optional)
     * @param queryParametersMemberId Divisions returning Member with Member ID voting records (optional)
     * @param queryParametersIncludeWhenMemberWasTeller Divisions where member was a teller as well as if they actually voted (optional)
     * @param queryParametersStartDate Divisions where division date in one or after date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersEndDate Divisions where division date in one or before date provided. Date format is yyyy-MM-dd (optional)
     * @param queryParametersDivisionNumber Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call divisionsSearchTotalResultsAsync(String format, String queryParametersSearchTerm, Integer queryParametersMemberId, Boolean queryParametersIncludeWhenMemberWasTeller, OffsetDateTime queryParametersStartDate, OffsetDateTime queryParametersEndDate, Integer queryParametersDivisionNumber, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = divisionsSearchTotalResultsValidateBeforeCall(format, queryParametersSearchTerm, queryParametersMemberId, queryParametersIncludeWhenMemberWasTeller, queryParametersStartDate, queryParametersEndDate, queryParametersDivisionNumber, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
