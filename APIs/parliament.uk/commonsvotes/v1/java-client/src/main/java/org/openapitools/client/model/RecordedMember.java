/*
 * Commons Votes API
 * An API that allows querying of Commons Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RecordedMember
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:31.787285-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecordedMember {
  public static final String SERIALIZED_NAME_LIST_AS = "ListAs";
  @SerializedName(SERIALIZED_NAME_LIST_AS)
  private String listAs;

  public static final String SERIALIZED_NAME_MEMBER_FROM = "MemberFrom";
  @SerializedName(SERIALIZED_NAME_MEMBER_FROM)
  private String memberFrom;

  public static final String SERIALIZED_NAME_MEMBER_ID = "MemberId";
  @SerializedName(SERIALIZED_NAME_MEMBER_ID)
  private Integer memberId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARTY = "Party";
  @SerializedName(SERIALIZED_NAME_PARTY)
  private String party;

  public static final String SERIALIZED_NAME_PARTY_ABBREVIATION = "PartyAbbreviation";
  @SerializedName(SERIALIZED_NAME_PARTY_ABBREVIATION)
  private String partyAbbreviation;

  public static final String SERIALIZED_NAME_PARTY_COLOUR = "PartyColour";
  @SerializedName(SERIALIZED_NAME_PARTY_COLOUR)
  private String partyColour;

  public static final String SERIALIZED_NAME_PROXY_NAME = "ProxyName";
  @SerializedName(SERIALIZED_NAME_PROXY_NAME)
  private String proxyName;

  public static final String SERIALIZED_NAME_SUB_PARTY = "SubParty";
  @SerializedName(SERIALIZED_NAME_SUB_PARTY)
  private String subParty;

  public RecordedMember() {
  }

  public RecordedMember listAs(String listAs) {
    this.listAs = listAs;
    return this;
  }

  /**
   * Get listAs
   * @return listAs
   */
  @javax.annotation.Nullable
  public String getListAs() {
    return listAs;
  }

  public void setListAs(String listAs) {
    this.listAs = listAs;
  }


  public RecordedMember memberFrom(String memberFrom) {
    this.memberFrom = memberFrom;
    return this;
  }

  /**
   * Get memberFrom
   * @return memberFrom
   */
  @javax.annotation.Nullable
  public String getMemberFrom() {
    return memberFrom;
  }

  public void setMemberFrom(String memberFrom) {
    this.memberFrom = memberFrom;
  }


  public RecordedMember memberId(Integer memberId) {
    this.memberId = memberId;
    return this;
  }

  /**
   * Get memberId
   * @return memberId
   */
  @javax.annotation.Nullable
  public Integer getMemberId() {
    return memberId;
  }

  public void setMemberId(Integer memberId) {
    this.memberId = memberId;
  }


  public RecordedMember name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RecordedMember party(String party) {
    this.party = party;
    return this;
  }

  /**
   * Get party
   * @return party
   */
  @javax.annotation.Nullable
  public String getParty() {
    return party;
  }

  public void setParty(String party) {
    this.party = party;
  }


  public RecordedMember partyAbbreviation(String partyAbbreviation) {
    this.partyAbbreviation = partyAbbreviation;
    return this;
  }

  /**
   * Get partyAbbreviation
   * @return partyAbbreviation
   */
  @javax.annotation.Nullable
  public String getPartyAbbreviation() {
    return partyAbbreviation;
  }

  public void setPartyAbbreviation(String partyAbbreviation) {
    this.partyAbbreviation = partyAbbreviation;
  }


  public RecordedMember partyColour(String partyColour) {
    this.partyColour = partyColour;
    return this;
  }

  /**
   * Get partyColour
   * @return partyColour
   */
  @javax.annotation.Nullable
  public String getPartyColour() {
    return partyColour;
  }

  public void setPartyColour(String partyColour) {
    this.partyColour = partyColour;
  }


  public RecordedMember proxyName(String proxyName) {
    this.proxyName = proxyName;
    return this;
  }

  /**
   * Get proxyName
   * @return proxyName
   */
  @javax.annotation.Nullable
  public String getProxyName() {
    return proxyName;
  }

  public void setProxyName(String proxyName) {
    this.proxyName = proxyName;
  }


  public RecordedMember subParty(String subParty) {
    this.subParty = subParty;
    return this;
  }

  /**
   * Get subParty
   * @return subParty
   */
  @javax.annotation.Nullable
  public String getSubParty() {
    return subParty;
  }

  public void setSubParty(String subParty) {
    this.subParty = subParty;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordedMember recordedMember = (RecordedMember) o;
    return Objects.equals(this.listAs, recordedMember.listAs) &&
        Objects.equals(this.memberFrom, recordedMember.memberFrom) &&
        Objects.equals(this.memberId, recordedMember.memberId) &&
        Objects.equals(this.name, recordedMember.name) &&
        Objects.equals(this.party, recordedMember.party) &&
        Objects.equals(this.partyAbbreviation, recordedMember.partyAbbreviation) &&
        Objects.equals(this.partyColour, recordedMember.partyColour) &&
        Objects.equals(this.proxyName, recordedMember.proxyName) &&
        Objects.equals(this.subParty, recordedMember.subParty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(listAs, memberFrom, memberId, name, party, partyAbbreviation, partyColour, proxyName, subParty);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordedMember {\n");
    sb.append("    listAs: ").append(toIndentedString(listAs)).append("\n");
    sb.append("    memberFrom: ").append(toIndentedString(memberFrom)).append("\n");
    sb.append("    memberId: ").append(toIndentedString(memberId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    party: ").append(toIndentedString(party)).append("\n");
    sb.append("    partyAbbreviation: ").append(toIndentedString(partyAbbreviation)).append("\n");
    sb.append("    partyColour: ").append(toIndentedString(partyColour)).append("\n");
    sb.append("    proxyName: ").append(toIndentedString(proxyName)).append("\n");
    sb.append("    subParty: ").append(toIndentedString(subParty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ListAs");
    openapiFields.add("MemberFrom");
    openapiFields.add("MemberId");
    openapiFields.add("Name");
    openapiFields.add("Party");
    openapiFields.add("PartyAbbreviation");
    openapiFields.add("PartyColour");
    openapiFields.add("ProxyName");
    openapiFields.add("SubParty");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecordedMember
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecordedMember.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecordedMember is not found in the empty JSON string", RecordedMember.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecordedMember.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecordedMember` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ListAs") != null && !jsonObj.get("ListAs").isJsonNull()) && !jsonObj.get("ListAs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ListAs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ListAs").toString()));
      }
      if ((jsonObj.get("MemberFrom") != null && !jsonObj.get("MemberFrom").isJsonNull()) && !jsonObj.get("MemberFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MemberFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MemberFrom").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Party") != null && !jsonObj.get("Party").isJsonNull()) && !jsonObj.get("Party").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Party` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Party").toString()));
      }
      if ((jsonObj.get("PartyAbbreviation") != null && !jsonObj.get("PartyAbbreviation").isJsonNull()) && !jsonObj.get("PartyAbbreviation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartyAbbreviation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartyAbbreviation").toString()));
      }
      if ((jsonObj.get("PartyColour") != null && !jsonObj.get("PartyColour").isJsonNull()) && !jsonObj.get("PartyColour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartyColour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartyColour").toString()));
      }
      if ((jsonObj.get("ProxyName") != null && !jsonObj.get("ProxyName").isJsonNull()) && !jsonObj.get("ProxyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProxyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProxyName").toString()));
      }
      if ((jsonObj.get("SubParty") != null && !jsonObj.get("SubParty").isJsonNull()) && !jsonObj.get("SubParty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubParty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubParty").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecordedMember.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecordedMember' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecordedMember> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecordedMember.class));

       return (TypeAdapter<T>) new TypeAdapter<RecordedMember>() {
           @Override
           public void write(JsonWriter out, RecordedMember value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecordedMember read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecordedMember given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecordedMember
   * @throws IOException if the JSON string is invalid with respect to RecordedMember
   */
  public static RecordedMember fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecordedMember.class);
  }

  /**
   * Convert an instance of RecordedMember to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

