# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchQueryParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, division_number: int=None, end_date: datetime=None, include_when_member_was_teller: bool=None, member_id: int=None, search_term: str=None, skip: int=None, start_date: datetime=None, take: int=None):
        """SearchQueryParameters - a model defined in OpenAPI

        :param division_number: The division_number of this SearchQueryParameters.
        :param end_date: The end_date of this SearchQueryParameters.
        :param include_when_member_was_teller: The include_when_member_was_teller of this SearchQueryParameters.
        :param member_id: The member_id of this SearchQueryParameters.
        :param search_term: The search_term of this SearchQueryParameters.
        :param skip: The skip of this SearchQueryParameters.
        :param start_date: The start_date of this SearchQueryParameters.
        :param take: The take of this SearchQueryParameters.
        """
        self.openapi_types = {
            'division_number': int,
            'end_date': datetime,
            'include_when_member_was_teller': bool,
            'member_id': int,
            'search_term': str,
            'skip': int,
            'start_date': datetime,
            'take': int
        }

        self.attribute_map = {
            'division_number': 'DivisionNumber',
            'end_date': 'EndDate',
            'include_when_member_was_teller': 'IncludeWhenMemberWasTeller',
            'member_id': 'MemberId',
            'search_term': 'SearchTerm',
            'skip': 'Skip',
            'start_date': 'StartDate',
            'take': 'Take'
        }

        self._division_number = division_number
        self._end_date = end_date
        self._include_when_member_was_teller = include_when_member_was_teller
        self._member_id = member_id
        self._search_term = search_term
        self._skip = skip
        self._start_date = start_date
        self._take = take

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchQueryParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchQueryParameters of this SearchQueryParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def division_number(self):
        """Gets the division_number of this SearchQueryParameters.

        Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint

        :return: The division_number of this SearchQueryParameters.
        :rtype: int
        """
        return self._division_number

    @division_number.setter
    def division_number(self, division_number):
        """Sets the division_number of this SearchQueryParameters.

        Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint

        :param division_number: The division_number of this SearchQueryParameters.
        :type division_number: int
        """

        self._division_number = division_number

    @property
    def end_date(self):
        """Gets the end_date of this SearchQueryParameters.

        Divisions where division date in one or before date provided. Date format is yyyy-MM-dd

        :return: The end_date of this SearchQueryParameters.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this SearchQueryParameters.

        Divisions where division date in one or before date provided. Date format is yyyy-MM-dd

        :param end_date: The end_date of this SearchQueryParameters.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def include_when_member_was_teller(self):
        """Gets the include_when_member_was_teller of this SearchQueryParameters.

        Divisions where member was a teller as well as if they actually voted

        :return: The include_when_member_was_teller of this SearchQueryParameters.
        :rtype: bool
        """
        return self._include_when_member_was_teller

    @include_when_member_was_teller.setter
    def include_when_member_was_teller(self, include_when_member_was_teller):
        """Sets the include_when_member_was_teller of this SearchQueryParameters.

        Divisions where member was a teller as well as if they actually voted

        :param include_when_member_was_teller: The include_when_member_was_teller of this SearchQueryParameters.
        :type include_when_member_was_teller: bool
        """

        self._include_when_member_was_teller = include_when_member_was_teller

    @property
    def member_id(self):
        """Gets the member_id of this SearchQueryParameters.

        Divisions returning Member with Member ID voting records

        :return: The member_id of this SearchQueryParameters.
        :rtype: int
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this SearchQueryParameters.

        Divisions returning Member with Member ID voting records

        :param member_id: The member_id of this SearchQueryParameters.
        :type member_id: int
        """

        self._member_id = member_id

    @property
    def search_term(self):
        """Gets the search_term of this SearchQueryParameters.

        Divisions containing search term within title or number

        :return: The search_term of this SearchQueryParameters.
        :rtype: str
        """
        return self._search_term

    @search_term.setter
    def search_term(self, search_term):
        """Sets the search_term of this SearchQueryParameters.

        Divisions containing search term within title or number

        :param search_term: The search_term of this SearchQueryParameters.
        :type search_term: str
        """

        self._search_term = search_term

    @property
    def skip(self):
        """Gets the skip of this SearchQueryParameters.

        The number of records to skip. Default is 0

        :return: The skip of this SearchQueryParameters.
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this SearchQueryParameters.

        The number of records to skip. Default is 0

        :param skip: The skip of this SearchQueryParameters.
        :type skip: int
        """

        self._skip = skip

    @property
    def start_date(self):
        """Gets the start_date of this SearchQueryParameters.

        Divisions where division date in one or after date provided. Date format is yyyy-MM-dd

        :return: The start_date of this SearchQueryParameters.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SearchQueryParameters.

        Divisions where division date in one or after date provided. Date format is yyyy-MM-dd

        :param start_date: The start_date of this SearchQueryParameters.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def take(self):
        """Gets the take of this SearchQueryParameters.

        The number of records to return per page. Default is 25

        :return: The take of this SearchQueryParameters.
        :rtype: int
        """
        return self._take

    @take.setter
    def take(self, take):
        """Sets the take of this SearchQueryParameters.

        The number of records to return per page. Default is 25

        :param take: The take of this SearchQueryParameters.
        :type take: int
        """

        self._take = take
