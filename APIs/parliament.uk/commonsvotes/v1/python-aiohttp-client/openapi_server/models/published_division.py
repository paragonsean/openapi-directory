# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recorded_member import RecordedMember
from openapi_server import util


class PublishedDivision(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aye_count: int=None, aye_tellers: List[RecordedMember]=None, ayes: List[RecordedMember]=None, _date: datetime=None, division_id: int=None, double_majority_aye_count: int=None, double_majority_no_count: int=None, evel_country: str=None, evel_type: str=None, friendly_description: str=None, friendly_title: str=None, is_deferred: bool=None, no_count: int=None, no_tellers: List[RecordedMember]=None, no_vote_recorded: List[RecordedMember]=None, noes: List[RecordedMember]=None, number: int=None, publication_updated: datetime=None, remote_voting_end: datetime=None, remote_voting_start: datetime=None, title: str=None):
        """PublishedDivision - a model defined in OpenAPI

        :param aye_count: The aye_count of this PublishedDivision.
        :param aye_tellers: The aye_tellers of this PublishedDivision.
        :param ayes: The ayes of this PublishedDivision.
        :param _date: The _date of this PublishedDivision.
        :param division_id: The division_id of this PublishedDivision.
        :param double_majority_aye_count: The double_majority_aye_count of this PublishedDivision.
        :param double_majority_no_count: The double_majority_no_count of this PublishedDivision.
        :param evel_country: The evel_country of this PublishedDivision.
        :param evel_type: The evel_type of this PublishedDivision.
        :param friendly_description: The friendly_description of this PublishedDivision.
        :param friendly_title: The friendly_title of this PublishedDivision.
        :param is_deferred: The is_deferred of this PublishedDivision.
        :param no_count: The no_count of this PublishedDivision.
        :param no_tellers: The no_tellers of this PublishedDivision.
        :param no_vote_recorded: The no_vote_recorded of this PublishedDivision.
        :param noes: The noes of this PublishedDivision.
        :param number: The number of this PublishedDivision.
        :param publication_updated: The publication_updated of this PublishedDivision.
        :param remote_voting_end: The remote_voting_end of this PublishedDivision.
        :param remote_voting_start: The remote_voting_start of this PublishedDivision.
        :param title: The title of this PublishedDivision.
        """
        self.openapi_types = {
            'aye_count': int,
            'aye_tellers': List[RecordedMember],
            'ayes': List[RecordedMember],
            '_date': datetime,
            'division_id': int,
            'double_majority_aye_count': int,
            'double_majority_no_count': int,
            'evel_country': str,
            'evel_type': str,
            'friendly_description': str,
            'friendly_title': str,
            'is_deferred': bool,
            'no_count': int,
            'no_tellers': List[RecordedMember],
            'no_vote_recorded': List[RecordedMember],
            'noes': List[RecordedMember],
            'number': int,
            'publication_updated': datetime,
            'remote_voting_end': datetime,
            'remote_voting_start': datetime,
            'title': str
        }

        self.attribute_map = {
            'aye_count': 'AyeCount',
            'aye_tellers': 'AyeTellers',
            'ayes': 'Ayes',
            '_date': 'Date',
            'division_id': 'DivisionId',
            'double_majority_aye_count': 'DoubleMajorityAyeCount',
            'double_majority_no_count': 'DoubleMajorityNoCount',
            'evel_country': 'EVELCountry',
            'evel_type': 'EVELType',
            'friendly_description': 'FriendlyDescription',
            'friendly_title': 'FriendlyTitle',
            'is_deferred': 'IsDeferred',
            'no_count': 'NoCount',
            'no_tellers': 'NoTellers',
            'no_vote_recorded': 'NoVoteRecorded',
            'noes': 'Noes',
            'number': 'Number',
            'publication_updated': 'PublicationUpdated',
            'remote_voting_end': 'RemoteVotingEnd',
            'remote_voting_start': 'RemoteVotingStart',
            'title': 'Title'
        }

        self._aye_count = aye_count
        self._aye_tellers = aye_tellers
        self._ayes = ayes
        self.__date = _date
        self._division_id = division_id
        self._double_majority_aye_count = double_majority_aye_count
        self._double_majority_no_count = double_majority_no_count
        self._evel_country = evel_country
        self._evel_type = evel_type
        self._friendly_description = friendly_description
        self._friendly_title = friendly_title
        self._is_deferred = is_deferred
        self._no_count = no_count
        self._no_tellers = no_tellers
        self._no_vote_recorded = no_vote_recorded
        self._noes = noes
        self._number = number
        self._publication_updated = publication_updated
        self._remote_voting_end = remote_voting_end
        self._remote_voting_start = remote_voting_start
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublishedDivision':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublishedDivision of this PublishedDivision.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aye_count(self):
        """Gets the aye_count of this PublishedDivision.


        :return: The aye_count of this PublishedDivision.
        :rtype: int
        """
        return self._aye_count

    @aye_count.setter
    def aye_count(self, aye_count):
        """Sets the aye_count of this PublishedDivision.


        :param aye_count: The aye_count of this PublishedDivision.
        :type aye_count: int
        """

        self._aye_count = aye_count

    @property
    def aye_tellers(self):
        """Gets the aye_tellers of this PublishedDivision.


        :return: The aye_tellers of this PublishedDivision.
        :rtype: List[RecordedMember]
        """
        return self._aye_tellers

    @aye_tellers.setter
    def aye_tellers(self, aye_tellers):
        """Sets the aye_tellers of this PublishedDivision.


        :param aye_tellers: The aye_tellers of this PublishedDivision.
        :type aye_tellers: List[RecordedMember]
        """

        self._aye_tellers = aye_tellers

    @property
    def ayes(self):
        """Gets the ayes of this PublishedDivision.


        :return: The ayes of this PublishedDivision.
        :rtype: List[RecordedMember]
        """
        return self._ayes

    @ayes.setter
    def ayes(self, ayes):
        """Sets the ayes of this PublishedDivision.


        :param ayes: The ayes of this PublishedDivision.
        :type ayes: List[RecordedMember]
        """

        self._ayes = ayes

    @property
    def _date(self):
        """Gets the _date of this PublishedDivision.


        :return: The _date of this PublishedDivision.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PublishedDivision.


        :param _date: The _date of this PublishedDivision.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def division_id(self):
        """Gets the division_id of this PublishedDivision.


        :return: The division_id of this PublishedDivision.
        :rtype: int
        """
        return self._division_id

    @division_id.setter
    def division_id(self, division_id):
        """Sets the division_id of this PublishedDivision.


        :param division_id: The division_id of this PublishedDivision.
        :type division_id: int
        """

        self._division_id = division_id

    @property
    def double_majority_aye_count(self):
        """Gets the double_majority_aye_count of this PublishedDivision.


        :return: The double_majority_aye_count of this PublishedDivision.
        :rtype: int
        """
        return self._double_majority_aye_count

    @double_majority_aye_count.setter
    def double_majority_aye_count(self, double_majority_aye_count):
        """Sets the double_majority_aye_count of this PublishedDivision.


        :param double_majority_aye_count: The double_majority_aye_count of this PublishedDivision.
        :type double_majority_aye_count: int
        """

        self._double_majority_aye_count = double_majority_aye_count

    @property
    def double_majority_no_count(self):
        """Gets the double_majority_no_count of this PublishedDivision.


        :return: The double_majority_no_count of this PublishedDivision.
        :rtype: int
        """
        return self._double_majority_no_count

    @double_majority_no_count.setter
    def double_majority_no_count(self, double_majority_no_count):
        """Sets the double_majority_no_count of this PublishedDivision.


        :param double_majority_no_count: The double_majority_no_count of this PublishedDivision.
        :type double_majority_no_count: int
        """

        self._double_majority_no_count = double_majority_no_count

    @property
    def evel_country(self):
        """Gets the evel_country of this PublishedDivision.


        :return: The evel_country of this PublishedDivision.
        :rtype: str
        """
        return self._evel_country

    @evel_country.setter
    def evel_country(self, evel_country):
        """Sets the evel_country of this PublishedDivision.


        :param evel_country: The evel_country of this PublishedDivision.
        :type evel_country: str
        """

        self._evel_country = evel_country

    @property
    def evel_type(self):
        """Gets the evel_type of this PublishedDivision.


        :return: The evel_type of this PublishedDivision.
        :rtype: str
        """
        return self._evel_type

    @evel_type.setter
    def evel_type(self, evel_type):
        """Sets the evel_type of this PublishedDivision.


        :param evel_type: The evel_type of this PublishedDivision.
        :type evel_type: str
        """

        self._evel_type = evel_type

    @property
    def friendly_description(self):
        """Gets the friendly_description of this PublishedDivision.


        :return: The friendly_description of this PublishedDivision.
        :rtype: str
        """
        return self._friendly_description

    @friendly_description.setter
    def friendly_description(self, friendly_description):
        """Sets the friendly_description of this PublishedDivision.


        :param friendly_description: The friendly_description of this PublishedDivision.
        :type friendly_description: str
        """

        self._friendly_description = friendly_description

    @property
    def friendly_title(self):
        """Gets the friendly_title of this PublishedDivision.


        :return: The friendly_title of this PublishedDivision.
        :rtype: str
        """
        return self._friendly_title

    @friendly_title.setter
    def friendly_title(self, friendly_title):
        """Sets the friendly_title of this PublishedDivision.


        :param friendly_title: The friendly_title of this PublishedDivision.
        :type friendly_title: str
        """

        self._friendly_title = friendly_title

    @property
    def is_deferred(self):
        """Gets the is_deferred of this PublishedDivision.


        :return: The is_deferred of this PublishedDivision.
        :rtype: bool
        """
        return self._is_deferred

    @is_deferred.setter
    def is_deferred(self, is_deferred):
        """Sets the is_deferred of this PublishedDivision.


        :param is_deferred: The is_deferred of this PublishedDivision.
        :type is_deferred: bool
        """

        self._is_deferred = is_deferred

    @property
    def no_count(self):
        """Gets the no_count of this PublishedDivision.


        :return: The no_count of this PublishedDivision.
        :rtype: int
        """
        return self._no_count

    @no_count.setter
    def no_count(self, no_count):
        """Sets the no_count of this PublishedDivision.


        :param no_count: The no_count of this PublishedDivision.
        :type no_count: int
        """

        self._no_count = no_count

    @property
    def no_tellers(self):
        """Gets the no_tellers of this PublishedDivision.


        :return: The no_tellers of this PublishedDivision.
        :rtype: List[RecordedMember]
        """
        return self._no_tellers

    @no_tellers.setter
    def no_tellers(self, no_tellers):
        """Sets the no_tellers of this PublishedDivision.


        :param no_tellers: The no_tellers of this PublishedDivision.
        :type no_tellers: List[RecordedMember]
        """

        self._no_tellers = no_tellers

    @property
    def no_vote_recorded(self):
        """Gets the no_vote_recorded of this PublishedDivision.


        :return: The no_vote_recorded of this PublishedDivision.
        :rtype: List[RecordedMember]
        """
        return self._no_vote_recorded

    @no_vote_recorded.setter
    def no_vote_recorded(self, no_vote_recorded):
        """Sets the no_vote_recorded of this PublishedDivision.


        :param no_vote_recorded: The no_vote_recorded of this PublishedDivision.
        :type no_vote_recorded: List[RecordedMember]
        """

        self._no_vote_recorded = no_vote_recorded

    @property
    def noes(self):
        """Gets the noes of this PublishedDivision.


        :return: The noes of this PublishedDivision.
        :rtype: List[RecordedMember]
        """
        return self._noes

    @noes.setter
    def noes(self, noes):
        """Sets the noes of this PublishedDivision.


        :param noes: The noes of this PublishedDivision.
        :type noes: List[RecordedMember]
        """

        self._noes = noes

    @property
    def number(self):
        """Gets the number of this PublishedDivision.


        :return: The number of this PublishedDivision.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PublishedDivision.


        :param number: The number of this PublishedDivision.
        :type number: int
        """

        self._number = number

    @property
    def publication_updated(self):
        """Gets the publication_updated of this PublishedDivision.


        :return: The publication_updated of this PublishedDivision.
        :rtype: datetime
        """
        return self._publication_updated

    @publication_updated.setter
    def publication_updated(self, publication_updated):
        """Sets the publication_updated of this PublishedDivision.


        :param publication_updated: The publication_updated of this PublishedDivision.
        :type publication_updated: datetime
        """

        self._publication_updated = publication_updated

    @property
    def remote_voting_end(self):
        """Gets the remote_voting_end of this PublishedDivision.


        :return: The remote_voting_end of this PublishedDivision.
        :rtype: datetime
        """
        return self._remote_voting_end

    @remote_voting_end.setter
    def remote_voting_end(self, remote_voting_end):
        """Sets the remote_voting_end of this PublishedDivision.


        :param remote_voting_end: The remote_voting_end of this PublishedDivision.
        :type remote_voting_end: datetime
        """

        self._remote_voting_end = remote_voting_end

    @property
    def remote_voting_start(self):
        """Gets the remote_voting_start of this PublishedDivision.


        :return: The remote_voting_start of this PublishedDivision.
        :rtype: datetime
        """
        return self._remote_voting_start

    @remote_voting_start.setter
    def remote_voting_start(self, remote_voting_start):
        """Sets the remote_voting_start of this PublishedDivision.


        :param remote_voting_start: The remote_voting_start of this PublishedDivision.
        :type remote_voting_start: datetime
        """

        self._remote_voting_start = remote_voting_start

    @property
    def title(self):
        """Gets the title of this PublishedDivision.


        :return: The title of this PublishedDivision.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PublishedDivision.


        :param title: The title of this PublishedDivision.
        :type title: str
        """

        self._title = title
