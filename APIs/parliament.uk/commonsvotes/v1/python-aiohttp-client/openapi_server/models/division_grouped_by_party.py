# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.party_vote_result import PartyVoteResult
from openapi_server import util


class DivisionGroupedByParty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aye_count: int=None, ayes: List[PartyVoteResult]=None, _date: datetime=None, division_id: int=None, no_count: int=None, noes: List[PartyVoteResult]=None, number: int=None, title: str=None):
        """DivisionGroupedByParty - a model defined in OpenAPI

        :param aye_count: The aye_count of this DivisionGroupedByParty.
        :param ayes: The ayes of this DivisionGroupedByParty.
        :param _date: The _date of this DivisionGroupedByParty.
        :param division_id: The division_id of this DivisionGroupedByParty.
        :param no_count: The no_count of this DivisionGroupedByParty.
        :param noes: The noes of this DivisionGroupedByParty.
        :param number: The number of this DivisionGroupedByParty.
        :param title: The title of this DivisionGroupedByParty.
        """
        self.openapi_types = {
            'aye_count': int,
            'ayes': List[PartyVoteResult],
            '_date': datetime,
            'division_id': int,
            'no_count': int,
            'noes': List[PartyVoteResult],
            'number': int,
            'title': str
        }

        self.attribute_map = {
            'aye_count': 'AyeCount',
            'ayes': 'Ayes',
            '_date': 'Date',
            'division_id': 'DivisionId',
            'no_count': 'NoCount',
            'noes': 'Noes',
            'number': 'Number',
            'title': 'Title'
        }

        self._aye_count = aye_count
        self._ayes = ayes
        self.__date = _date
        self._division_id = division_id
        self._no_count = no_count
        self._noes = noes
        self._number = number
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DivisionGroupedByParty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DivisionGroupedByParty of this DivisionGroupedByParty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aye_count(self):
        """Gets the aye_count of this DivisionGroupedByParty.


        :return: The aye_count of this DivisionGroupedByParty.
        :rtype: int
        """
        return self._aye_count

    @aye_count.setter
    def aye_count(self, aye_count):
        """Sets the aye_count of this DivisionGroupedByParty.


        :param aye_count: The aye_count of this DivisionGroupedByParty.
        :type aye_count: int
        """

        self._aye_count = aye_count

    @property
    def ayes(self):
        """Gets the ayes of this DivisionGroupedByParty.

        Counts of all members who voted 'Aye', grouped by party

        :return: The ayes of this DivisionGroupedByParty.
        :rtype: List[PartyVoteResult]
        """
        return self._ayes

    @ayes.setter
    def ayes(self, ayes):
        """Sets the ayes of this DivisionGroupedByParty.

        Counts of all members who voted 'Aye', grouped by party

        :param ayes: The ayes of this DivisionGroupedByParty.
        :type ayes: List[PartyVoteResult]
        """

        self._ayes = ayes

    @property
    def _date(self):
        """Gets the _date of this DivisionGroupedByParty.


        :return: The _date of this DivisionGroupedByParty.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DivisionGroupedByParty.


        :param _date: The _date of this DivisionGroupedByParty.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def division_id(self):
        """Gets the division_id of this DivisionGroupedByParty.


        :return: The division_id of this DivisionGroupedByParty.
        :rtype: int
        """
        return self._division_id

    @division_id.setter
    def division_id(self, division_id):
        """Sets the division_id of this DivisionGroupedByParty.


        :param division_id: The division_id of this DivisionGroupedByParty.
        :type division_id: int
        """

        self._division_id = division_id

    @property
    def no_count(self):
        """Gets the no_count of this DivisionGroupedByParty.


        :return: The no_count of this DivisionGroupedByParty.
        :rtype: int
        """
        return self._no_count

    @no_count.setter
    def no_count(self, no_count):
        """Sets the no_count of this DivisionGroupedByParty.


        :param no_count: The no_count of this DivisionGroupedByParty.
        :type no_count: int
        """

        self._no_count = no_count

    @property
    def noes(self):
        """Gets the noes of this DivisionGroupedByParty.

        Counts of all members who voted 'Noe', grouped by party

        :return: The noes of this DivisionGroupedByParty.
        :rtype: List[PartyVoteResult]
        """
        return self._noes

    @noes.setter
    def noes(self, noes):
        """Sets the noes of this DivisionGroupedByParty.

        Counts of all members who voted 'Noe', grouped by party

        :param noes: The noes of this DivisionGroupedByParty.
        :type noes: List[PartyVoteResult]
        """

        self._noes = noes

    @property
    def number(self):
        """Gets the number of this DivisionGroupedByParty.


        :return: The number of this DivisionGroupedByParty.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this DivisionGroupedByParty.


        :param number: The number of this DivisionGroupedByParty.
        :type number: int
        """

        self._number = number

    @property
    def title(self):
        """Gets the title of this DivisionGroupedByParty.


        :return: The title of this DivisionGroupedByParty.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DivisionGroupedByParty.


        :param title: The title of this DivisionGroupedByParty.
        :type title: str
        """

        self._title = title
