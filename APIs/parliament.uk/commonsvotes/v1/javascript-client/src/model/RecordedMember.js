/**
 * Commons Votes API
 * An API that allows querying of Commons Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RecordedMember model module.
 * @module model/RecordedMember
 * @version v1
 */
class RecordedMember {
    /**
     * Constructs a new <code>RecordedMember</code>.
     * @alias module:model/RecordedMember
     */
    constructor() { 
        
        RecordedMember.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecordedMember</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecordedMember} obj Optional instance to populate.
     * @return {module:model/RecordedMember} The populated <code>RecordedMember</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecordedMember();

            if (data.hasOwnProperty('ListAs')) {
                obj['ListAs'] = ApiClient.convertToType(data['ListAs'], 'String');
            }
            if (data.hasOwnProperty('MemberFrom')) {
                obj['MemberFrom'] = ApiClient.convertToType(data['MemberFrom'], 'String');
            }
            if (data.hasOwnProperty('MemberId')) {
                obj['MemberId'] = ApiClient.convertToType(data['MemberId'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Party')) {
                obj['Party'] = ApiClient.convertToType(data['Party'], 'String');
            }
            if (data.hasOwnProperty('PartyAbbreviation')) {
                obj['PartyAbbreviation'] = ApiClient.convertToType(data['PartyAbbreviation'], 'String');
            }
            if (data.hasOwnProperty('PartyColour')) {
                obj['PartyColour'] = ApiClient.convertToType(data['PartyColour'], 'String');
            }
            if (data.hasOwnProperty('ProxyName')) {
                obj['ProxyName'] = ApiClient.convertToType(data['ProxyName'], 'String');
            }
            if (data.hasOwnProperty('SubParty')) {
                obj['SubParty'] = ApiClient.convertToType(data['SubParty'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecordedMember</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecordedMember</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ListAs'] && !(typeof data['ListAs'] === 'string' || data['ListAs'] instanceof String)) {
            throw new Error("Expected the field `ListAs` to be a primitive type in the JSON string but got " + data['ListAs']);
        }
        // ensure the json data is a string
        if (data['MemberFrom'] && !(typeof data['MemberFrom'] === 'string' || data['MemberFrom'] instanceof String)) {
            throw new Error("Expected the field `MemberFrom` to be a primitive type in the JSON string but got " + data['MemberFrom']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Party'] && !(typeof data['Party'] === 'string' || data['Party'] instanceof String)) {
            throw new Error("Expected the field `Party` to be a primitive type in the JSON string but got " + data['Party']);
        }
        // ensure the json data is a string
        if (data['PartyAbbreviation'] && !(typeof data['PartyAbbreviation'] === 'string' || data['PartyAbbreviation'] instanceof String)) {
            throw new Error("Expected the field `PartyAbbreviation` to be a primitive type in the JSON string but got " + data['PartyAbbreviation']);
        }
        // ensure the json data is a string
        if (data['PartyColour'] && !(typeof data['PartyColour'] === 'string' || data['PartyColour'] instanceof String)) {
            throw new Error("Expected the field `PartyColour` to be a primitive type in the JSON string but got " + data['PartyColour']);
        }
        // ensure the json data is a string
        if (data['ProxyName'] && !(typeof data['ProxyName'] === 'string' || data['ProxyName'] instanceof String)) {
            throw new Error("Expected the field `ProxyName` to be a primitive type in the JSON string but got " + data['ProxyName']);
        }
        // ensure the json data is a string
        if (data['SubParty'] && !(typeof data['SubParty'] === 'string' || data['SubParty'] instanceof String)) {
            throw new Error("Expected the field `SubParty` to be a primitive type in the JSON string but got " + data['SubParty']);
        }

        return true;
    }


}



/**
 * @member {String} ListAs
 */
RecordedMember.prototype['ListAs'] = undefined;

/**
 * @member {String} MemberFrom
 */
RecordedMember.prototype['MemberFrom'] = undefined;

/**
 * @member {Number} MemberId
 */
RecordedMember.prototype['MemberId'] = undefined;

/**
 * @member {String} Name
 */
RecordedMember.prototype['Name'] = undefined;

/**
 * @member {String} Party
 */
RecordedMember.prototype['Party'] = undefined;

/**
 * @member {String} PartyAbbreviation
 */
RecordedMember.prototype['PartyAbbreviation'] = undefined;

/**
 * @member {String} PartyColour
 */
RecordedMember.prototype['PartyColour'] = undefined;

/**
 * @member {String} ProxyName
 */
RecordedMember.prototype['ProxyName'] = undefined;

/**
 * @member {String} SubParty
 */
RecordedMember.prototype['SubParty'] = undefined;






export default RecordedMember;

