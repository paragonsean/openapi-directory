/**
 * Commons Votes API
 * An API that allows querying of Commons Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RecordedMember from './RecordedMember';

/**
 * The PublishedDivision model module.
 * @module model/PublishedDivision
 * @version v1
 */
class PublishedDivision {
    /**
     * Constructs a new <code>PublishedDivision</code>.
     * @alias module:model/PublishedDivision
     */
    constructor() { 
        
        PublishedDivision.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PublishedDivision</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublishedDivision} obj Optional instance to populate.
     * @return {module:model/PublishedDivision} The populated <code>PublishedDivision</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublishedDivision();

            if (data.hasOwnProperty('AyeCount')) {
                obj['AyeCount'] = ApiClient.convertToType(data['AyeCount'], 'Number');
            }
            if (data.hasOwnProperty('AyeTellers')) {
                obj['AyeTellers'] = ApiClient.convertToType(data['AyeTellers'], [RecordedMember]);
            }
            if (data.hasOwnProperty('Ayes')) {
                obj['Ayes'] = ApiClient.convertToType(data['Ayes'], [RecordedMember]);
            }
            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'Date');
            }
            if (data.hasOwnProperty('DivisionId')) {
                obj['DivisionId'] = ApiClient.convertToType(data['DivisionId'], 'Number');
            }
            if (data.hasOwnProperty('DoubleMajorityAyeCount')) {
                obj['DoubleMajorityAyeCount'] = ApiClient.convertToType(data['DoubleMajorityAyeCount'], 'Number');
            }
            if (data.hasOwnProperty('DoubleMajorityNoCount')) {
                obj['DoubleMajorityNoCount'] = ApiClient.convertToType(data['DoubleMajorityNoCount'], 'Number');
            }
            if (data.hasOwnProperty('EVELCountry')) {
                obj['EVELCountry'] = ApiClient.convertToType(data['EVELCountry'], 'String');
            }
            if (data.hasOwnProperty('EVELType')) {
                obj['EVELType'] = ApiClient.convertToType(data['EVELType'], 'String');
            }
            if (data.hasOwnProperty('FriendlyDescription')) {
                obj['FriendlyDescription'] = ApiClient.convertToType(data['FriendlyDescription'], 'String');
            }
            if (data.hasOwnProperty('FriendlyTitle')) {
                obj['FriendlyTitle'] = ApiClient.convertToType(data['FriendlyTitle'], 'String');
            }
            if (data.hasOwnProperty('IsDeferred')) {
                obj['IsDeferred'] = ApiClient.convertToType(data['IsDeferred'], 'Boolean');
            }
            if (data.hasOwnProperty('NoCount')) {
                obj['NoCount'] = ApiClient.convertToType(data['NoCount'], 'Number');
            }
            if (data.hasOwnProperty('NoTellers')) {
                obj['NoTellers'] = ApiClient.convertToType(data['NoTellers'], [RecordedMember]);
            }
            if (data.hasOwnProperty('NoVoteRecorded')) {
                obj['NoVoteRecorded'] = ApiClient.convertToType(data['NoVoteRecorded'], [RecordedMember]);
            }
            if (data.hasOwnProperty('Noes')) {
                obj['Noes'] = ApiClient.convertToType(data['Noes'], [RecordedMember]);
            }
            if (data.hasOwnProperty('Number')) {
                obj['Number'] = ApiClient.convertToType(data['Number'], 'Number');
            }
            if (data.hasOwnProperty('PublicationUpdated')) {
                obj['PublicationUpdated'] = ApiClient.convertToType(data['PublicationUpdated'], 'Date');
            }
            if (data.hasOwnProperty('RemoteVotingEnd')) {
                obj['RemoteVotingEnd'] = ApiClient.convertToType(data['RemoteVotingEnd'], 'Date');
            }
            if (data.hasOwnProperty('RemoteVotingStart')) {
                obj['RemoteVotingStart'] = ApiClient.convertToType(data['RemoteVotingStart'], 'Date');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublishedDivision</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublishedDivision</code>.
     */
    static validateJSON(data) {
        if (data['AyeTellers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['AyeTellers'])) {
                throw new Error("Expected the field `AyeTellers` to be an array in the JSON data but got " + data['AyeTellers']);
            }
            // validate the optional field `AyeTellers` (array)
            for (const item of data['AyeTellers']) {
                RecordedMember.validateJSON(item);
            };
        }
        if (data['Ayes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Ayes'])) {
                throw new Error("Expected the field `Ayes` to be an array in the JSON data but got " + data['Ayes']);
            }
            // validate the optional field `Ayes` (array)
            for (const item of data['Ayes']) {
                RecordedMember.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['EVELCountry'] && !(typeof data['EVELCountry'] === 'string' || data['EVELCountry'] instanceof String)) {
            throw new Error("Expected the field `EVELCountry` to be a primitive type in the JSON string but got " + data['EVELCountry']);
        }
        // ensure the json data is a string
        if (data['EVELType'] && !(typeof data['EVELType'] === 'string' || data['EVELType'] instanceof String)) {
            throw new Error("Expected the field `EVELType` to be a primitive type in the JSON string but got " + data['EVELType']);
        }
        // ensure the json data is a string
        if (data['FriendlyDescription'] && !(typeof data['FriendlyDescription'] === 'string' || data['FriendlyDescription'] instanceof String)) {
            throw new Error("Expected the field `FriendlyDescription` to be a primitive type in the JSON string but got " + data['FriendlyDescription']);
        }
        // ensure the json data is a string
        if (data['FriendlyTitle'] && !(typeof data['FriendlyTitle'] === 'string' || data['FriendlyTitle'] instanceof String)) {
            throw new Error("Expected the field `FriendlyTitle` to be a primitive type in the JSON string but got " + data['FriendlyTitle']);
        }
        if (data['NoTellers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['NoTellers'])) {
                throw new Error("Expected the field `NoTellers` to be an array in the JSON data but got " + data['NoTellers']);
            }
            // validate the optional field `NoTellers` (array)
            for (const item of data['NoTellers']) {
                RecordedMember.validateJSON(item);
            };
        }
        if (data['NoVoteRecorded']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['NoVoteRecorded'])) {
                throw new Error("Expected the field `NoVoteRecorded` to be an array in the JSON data but got " + data['NoVoteRecorded']);
            }
            // validate the optional field `NoVoteRecorded` (array)
            for (const item of data['NoVoteRecorded']) {
                RecordedMember.validateJSON(item);
            };
        }
        if (data['Noes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Noes'])) {
                throw new Error("Expected the field `Noes` to be an array in the JSON data but got " + data['Noes']);
            }
            // validate the optional field `Noes` (array)
            for (const item of data['Noes']) {
                RecordedMember.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }

        return true;
    }


}



/**
 * @member {Number} AyeCount
 */
PublishedDivision.prototype['AyeCount'] = undefined;

/**
 * @member {Array.<module:model/RecordedMember>} AyeTellers
 */
PublishedDivision.prototype['AyeTellers'] = undefined;

/**
 * @member {Array.<module:model/RecordedMember>} Ayes
 */
PublishedDivision.prototype['Ayes'] = undefined;

/**
 * @member {Date} Date
 */
PublishedDivision.prototype['Date'] = undefined;

/**
 * @member {Number} DivisionId
 */
PublishedDivision.prototype['DivisionId'] = undefined;

/**
 * @member {Number} DoubleMajorityAyeCount
 */
PublishedDivision.prototype['DoubleMajorityAyeCount'] = undefined;

/**
 * @member {Number} DoubleMajorityNoCount
 */
PublishedDivision.prototype['DoubleMajorityNoCount'] = undefined;

/**
 * @member {String} EVELCountry
 */
PublishedDivision.prototype['EVELCountry'] = undefined;

/**
 * @member {String} EVELType
 */
PublishedDivision.prototype['EVELType'] = undefined;

/**
 * @member {String} FriendlyDescription
 */
PublishedDivision.prototype['FriendlyDescription'] = undefined;

/**
 * @member {String} FriendlyTitle
 */
PublishedDivision.prototype['FriendlyTitle'] = undefined;

/**
 * @member {Boolean} IsDeferred
 */
PublishedDivision.prototype['IsDeferred'] = undefined;

/**
 * @member {Number} NoCount
 */
PublishedDivision.prototype['NoCount'] = undefined;

/**
 * @member {Array.<module:model/RecordedMember>} NoTellers
 */
PublishedDivision.prototype['NoTellers'] = undefined;

/**
 * @member {Array.<module:model/RecordedMember>} NoVoteRecorded
 */
PublishedDivision.prototype['NoVoteRecorded'] = undefined;

/**
 * @member {Array.<module:model/RecordedMember>} Noes
 */
PublishedDivision.prototype['Noes'] = undefined;

/**
 * @member {Number} Number
 */
PublishedDivision.prototype['Number'] = undefined;

/**
 * @member {Date} PublicationUpdated
 */
PublishedDivision.prototype['PublicationUpdated'] = undefined;

/**
 * @member {Date} RemoteVotingEnd
 */
PublishedDivision.prototype['RemoteVotingEnd'] = undefined;

/**
 * @member {Date} RemoteVotingStart
 */
PublishedDivision.prototype['RemoteVotingStart'] = undefined;

/**
 * @member {String} Title
 */
PublishedDivision.prototype['Title'] = undefined;






export default PublishedDivision;

