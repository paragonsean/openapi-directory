/**
 * Commons Votes API
 * An API that allows querying of Commons Votes data.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DivisionGroupedByParty from '../model/DivisionGroupedByParty';
import MemberVotingRecord from '../model/MemberVotingRecord';
import PublishedDivision from '../model/PublishedDivision';

/**
* Divisions service.
* @module api/DivisionsApi
* @version v1
*/
export default class DivisionsApi {

    /**
    * Constructs a new DivisionsApi. 
    * @alias module:api/DivisionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the divisionsGetDivisionById operation.
     * @callback module:api/DivisionsApi~divisionsGetDivisionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublishedDivision} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a Division
     * Single Division which has the specified Id
     * @param {Number} divisionId Id number of a Division whose records are to be returned
     * @param {String} format xml or json
     * @param {module:api/DivisionsApi~divisionsGetDivisionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublishedDivision}
     */
    divisionsGetDivisionById(divisionId, format, callback) {
      let postBody = null;
      // verify the required parameter 'divisionId' is set
      if (divisionId === undefined || divisionId === null) {
        throw new Error("Missing the required parameter 'divisionId' when calling divisionsGetDivisionById");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling divisionsGetDivisionById");
      }

      let pathParams = {
        'divisionId': divisionId,
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = PublishedDivision;
      return this.apiClient.callApi(
        '/data/division/{divisionId}.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the divisionsGetDivisionsGroupsByParty operation.
     * @callback module:api/DivisionsApi~divisionsGetDivisionsGroupsByPartyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DivisionGroupedByParty>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return Divisions results grouped by party
     * Division results which meet the specified criteria grouped by parties
     * @param {String} format xml or json
     * @param {Object} opts Optional parameters
     * @param {String} [queryParametersSearchTerm] Divisions containing search term within title or number
     * @param {Number} [queryParametersMemberId] Divisions returning Member with Member ID voting records
     * @param {Boolean} [queryParametersIncludeWhenMemberWasTeller] Divisions where member was a teller as well as if they actually voted
     * @param {Date} [queryParametersStartDate] Divisions where division date in one or after date provided. Date format is yyyy-MM-dd
     * @param {Date} [queryParametersEndDate] Divisions where division date in one or before date provided. Date format is yyyy-MM-dd
     * @param {Number} [queryParametersDivisionNumber] Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint
     * @param {module:api/DivisionsApi~divisionsGetDivisionsGroupsByPartyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DivisionGroupedByParty>}
     */
    divisionsGetDivisionsGroupsByParty(format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling divisionsGetDivisionsGroupsByParty");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
        'queryParameters.searchTerm': opts['queryParametersSearchTerm'],
        'queryParameters.memberId': opts['queryParametersMemberId'],
        'queryParameters.includeWhenMemberWasTeller': opts['queryParametersIncludeWhenMemberWasTeller'],
        'queryParameters.startDate': opts['queryParametersStartDate'],
        'queryParameters.endDate': opts['queryParametersEndDate'],
        'queryParameters.divisionNumber': opts['queryParametersDivisionNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = [DivisionGroupedByParty];
      return this.apiClient.callApi(
        '/data/divisions.{format}/groupedbyparty', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the divisionsGetVotingRecordsForMember operation.
     * @callback module:api/DivisionsApi~divisionsGetVotingRecordsForMemberCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MemberVotingRecord>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return voting records for a Member
     * List of voting records for a member which meet the specified criteria.
     * @param {String} format xml or json
     * @param {Number} queryParametersMemberId Id number of a Member whose voting records are to be returned
     * @param {Object} opts Optional parameters
     * @param {Number} [queryParametersSkip] The number of records to skip. Default is 0
     * @param {Number} [queryParametersTake] The number of records to return per page. Default is 25
     * @param {String} [queryParametersSearchTerm] Divisions containing search term within title or number
     * @param {Boolean} [queryParametersIncludeWhenMemberWasTeller] Divisions where member was a teller as well as if they actually voted
     * @param {Date} [queryParametersStartDate] Divisions where division date in one or after date provided. Date format is yyyy-MM-dd
     * @param {Date} [queryParametersEndDate] Divisions where division date in one or before date provided. Date format is yyyy-MM-dd
     * @param {Number} [queryParametersDivisionNumber] Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint
     * @param {module:api/DivisionsApi~divisionsGetVotingRecordsForMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MemberVotingRecord>}
     */
    divisionsGetVotingRecordsForMember(format, queryParametersMemberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling divisionsGetVotingRecordsForMember");
      }
      // verify the required parameter 'queryParametersMemberId' is set
      if (queryParametersMemberId === undefined || queryParametersMemberId === null) {
        throw new Error("Missing the required parameter 'queryParametersMemberId' when calling divisionsGetVotingRecordsForMember");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
        'queryParameters.memberId': queryParametersMemberId,
        'queryParameters.skip': opts['queryParametersSkip'],
        'queryParameters.take': opts['queryParametersTake'],
        'queryParameters.searchTerm': opts['queryParametersSearchTerm'],
        'queryParameters.includeWhenMemberWasTeller': opts['queryParametersIncludeWhenMemberWasTeller'],
        'queryParameters.startDate': opts['queryParametersStartDate'],
        'queryParameters.endDate': opts['queryParametersEndDate'],
        'queryParameters.divisionNumber': opts['queryParametersDivisionNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = [MemberVotingRecord];
      return this.apiClient.callApi(
        '/data/divisions.{format}/membervoting', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the divisionsSearchDivisions operation.
     * @callback module:api/DivisionsApi~divisionsSearchDivisionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PublishedDivision>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of Divisions
     * List of Divisions which meet the specified criteria
     * @param {String} format json or xml
     * @param {Object} opts Optional parameters
     * @param {Number} [queryParametersSkip] The number of records to skip. Default is 0
     * @param {Number} [queryParametersTake] The number of records to return per page. Default is 25
     * @param {String} [queryParametersSearchTerm] Divisions containing search term within title or number
     * @param {Number} [queryParametersMemberId] Divisions returning Member with Member ID voting records
     * @param {Boolean} [queryParametersIncludeWhenMemberWasTeller] Divisions where member was a teller as well as if they actually voted
     * @param {Date} [queryParametersStartDate] Divisions where division date in one or after date provided. Date format is yyyy-MM-dd
     * @param {Date} [queryParametersEndDate] Divisions where division date in one or before date provided. Date format is yyyy-MM-dd
     * @param {Number} [queryParametersDivisionNumber] Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint
     * @param {module:api/DivisionsApi~divisionsSearchDivisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PublishedDivision>}
     */
    divisionsSearchDivisions(format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling divisionsSearchDivisions");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
        'queryParameters.skip': opts['queryParametersSkip'],
        'queryParameters.take': opts['queryParametersTake'],
        'queryParameters.searchTerm': opts['queryParametersSearchTerm'],
        'queryParameters.memberId': opts['queryParametersMemberId'],
        'queryParameters.includeWhenMemberWasTeller': opts['queryParametersIncludeWhenMemberWasTeller'],
        'queryParameters.startDate': opts['queryParametersStartDate'],
        'queryParameters.endDate': opts['queryParametersEndDate'],
        'queryParameters.divisionNumber': opts['queryParametersDivisionNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = [PublishedDivision];
      return this.apiClient.callApi(
        '/data/divisions.{format}/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the divisionsSearchTotalResults operation.
     * @callback module:api/DivisionsApi~divisionsSearchTotalResultsCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return total results count
     * Total count of Divisions meeting the specified criteria
     * @param {String} format json or xml
     * @param {Object} opts Optional parameters
     * @param {String} [queryParametersSearchTerm] Divisions containing search term within title or number
     * @param {Number} [queryParametersMemberId] Divisions returning Member with Member ID voting records
     * @param {Boolean} [queryParametersIncludeWhenMemberWasTeller] Divisions where member was a teller as well as if they actually voted
     * @param {Date} [queryParametersStartDate] Divisions where division date in one or after date provided. Date format is yyyy-MM-dd
     * @param {Date} [queryParametersEndDate] Divisions where division date in one or before date provided. Date format is yyyy-MM-dd
     * @param {Number} [queryParametersDivisionNumber] Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint
     * @param {module:api/DivisionsApi~divisionsSearchTotalResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    divisionsSearchTotalResults(format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling divisionsSearchTotalResults");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
        'queryParameters.searchTerm': opts['queryParametersSearchTerm'],
        'queryParameters.memberId': opts['queryParametersMemberId'],
        'queryParameters.includeWhenMemberWasTeller': opts['queryParametersIncludeWhenMemberWasTeller'],
        'queryParameters.startDate': opts['queryParametersStartDate'],
        'queryParameters.endDate': opts['queryParametersEndDate'],
        'queryParameters.divisionNumber': opts['queryParametersDivisionNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/data/divisions.{format}/searchTotalResults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
