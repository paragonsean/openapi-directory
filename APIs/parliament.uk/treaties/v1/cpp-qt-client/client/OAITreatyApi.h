/**
 * Treaties API
 * An API exposing details of the treaties laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITreatyApi_H
#define OAI_OAITreatyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBusinessItemResourceCollection.h"
#include "OAIHouse.h"
#include "OAIParliamentaryProcess.h"
#include "OAISeriesMembershipType.h"
#include "OAITreatyResource.h"
#include "OAITreatyResourceCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITreatyApi : public QObject {
    Q_OBJECT

public:
    OAITreatyApi(const int timeOut = 0);
    ~OAITreatyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getBusinessItemsByTreatyId(const QString &id);

    /**
    * @param[in]  search_text QString [optional]
    * @param[in]  government_organisation_id qint32 [optional]
    * @param[in]  series OAISeriesMembershipType [optional]
    * @param[in]  parliamentary_process OAIParliamentaryProcess [optional]
    * @param[in]  debate_scheduled bool [optional]
    * @param[in]  motion_to_not_ratify bool [optional]
    * @param[in]  recommended_not_ratify bool [optional]
    * @param[in]  house OAIHouse [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void getTreaties(const ::OpenAPI::OptionalParam<QString> &search_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &government_organisation_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISeriesMembershipType> &series = ::OpenAPI::OptionalParam<OAISeriesMembershipType>(), const ::OpenAPI::OptionalParam<OAIParliamentaryProcess> &parliamentary_process = ::OpenAPI::OptionalParam<OAIParliamentaryProcess>(), const ::OpenAPI::OptionalParam<bool> &debate_scheduled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &motion_to_not_ratify = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &recommended_not_ratify = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIHouse> &house = ::OpenAPI::OptionalParam<OAIHouse>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getTreatyById(const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getBusinessItemsByTreatyIdCallback(OAIHttpRequestWorker *worker);
    void getTreatiesCallback(OAIHttpRequestWorker *worker);
    void getTreatyByIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getBusinessItemsByTreatyIdSignal(OAIBusinessItemResourceCollection summary);
    void getTreatiesSignal(OAITreatyResourceCollection summary);
    void getTreatyByIdSignal(OAITreatyResource summary);


    void getBusinessItemsByTreatyIdSignalFull(OAIHttpRequestWorker *worker, OAIBusinessItemResourceCollection summary);
    void getTreatiesSignalFull(OAIHttpRequestWorker *worker, OAITreatyResourceCollection summary);
    void getTreatyByIdSignalFull(OAIHttpRequestWorker *worker, OAITreatyResource summary);

    Q_DECL_DEPRECATED_X("Use getBusinessItemsByTreatyIdSignalError() instead")
    void getBusinessItemsByTreatyIdSignalE(OAIBusinessItemResourceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBusinessItemsByTreatyIdSignalError(OAIBusinessItemResourceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTreatiesSignalError() instead")
    void getTreatiesSignalE(OAITreatyResourceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTreatiesSignalError(OAITreatyResourceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTreatyByIdSignalError() instead")
    void getTreatyByIdSignalE(OAITreatyResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTreatyByIdSignalError(OAITreatyResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getBusinessItemsByTreatyIdSignalErrorFull() instead")
    void getBusinessItemsByTreatyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBusinessItemsByTreatyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTreatiesSignalErrorFull() instead")
    void getTreatiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTreatiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTreatyByIdSignalErrorFull() instead")
    void getTreatyByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTreatyByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
