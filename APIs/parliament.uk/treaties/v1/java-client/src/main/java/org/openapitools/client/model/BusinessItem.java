/*
 * Treaties API
 * An API exposing details of the treaties laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BusinessItemHouse;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BusinessItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:26.338834-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BusinessItem {
  public static final String SERIALIZED_NAME_BUSINESS_ITEM_URI = "businessItemUri";
  @SerializedName(SERIALIZED_NAME_BUSINESS_ITEM_URI)
  private URI businessItemUri;

  public static final String SERIALIZED_NAME_HOUSE_ID = "houseId";
  @SerializedName(SERIALIZED_NAME_HOUSE_ID)
  private String houseId;

  public static final String SERIALIZED_NAME_HOUSE_NAME = "houseName";
  @SerializedName(SERIALIZED_NAME_HOUSE_NAME)
  private String houseName;

  public static final String SERIALIZED_NAME_HOUSE_URI = "houseUri";
  @SerializedName(SERIALIZED_NAME_HOUSE_URI)
  private URI houseUri;

  public static final String SERIALIZED_NAME_HOUSES = "houses";
  @SerializedName(SERIALIZED_NAME_HOUSES)
  private List<BusinessItemHouse> houses;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ITEM_DATE = "itemDate";
  @SerializedName(SERIALIZED_NAME_ITEM_DATE)
  private OffsetDateTime itemDate;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_PROCEDURE_STEP_ID = "procedureStepId";
  @SerializedName(SERIALIZED_NAME_PROCEDURE_STEP_ID)
  private String procedureStepId;

  public static final String SERIALIZED_NAME_PROCEDURE_STEP_URI = "procedureStepUri";
  @SerializedName(SERIALIZED_NAME_PROCEDURE_STEP_URI)
  private URI procedureStepUri;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence;

  public static final String SERIALIZED_NAME_STEP_NAME = "stepName";
  @SerializedName(SERIALIZED_NAME_STEP_NAME)
  private String stepName;

  public static final String SERIALIZED_NAME_TREATY_ID = "treatyId";
  @SerializedName(SERIALIZED_NAME_TREATY_ID)
  private String treatyId;

  public static final String SERIALIZED_NAME_TREATY_URI = "treatyUri";
  @SerializedName(SERIALIZED_NAME_TREATY_URI)
  private URI treatyUri;

  public static final String SERIALIZED_NAME_WORKPACKAGE_PROCEDURE_URI = "workpackageProcedureUri";
  @SerializedName(SERIALIZED_NAME_WORKPACKAGE_PROCEDURE_URI)
  private URI workpackageProcedureUri;

  public BusinessItem() {
  }

  public BusinessItem businessItemUri(URI businessItemUri) {
    this.businessItemUri = businessItemUri;
    return this;
  }

  /**
   * Get businessItemUri
   * @return businessItemUri
   */
  @javax.annotation.Nullable
  public URI getBusinessItemUri() {
    return businessItemUri;
  }

  public void setBusinessItemUri(URI businessItemUri) {
    this.businessItemUri = businessItemUri;
  }


  public BusinessItem houseId(String houseId) {
    this.houseId = houseId;
    return this;
  }

  /**
   * Get houseId
   * @return houseId
   */
  @javax.annotation.Nullable
  public String getHouseId() {
    return houseId;
  }

  public void setHouseId(String houseId) {
    this.houseId = houseId;
  }


  public BusinessItem houseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  /**
   * Get houseName
   * @return houseName
   */
  @javax.annotation.Nullable
  public String getHouseName() {
    return houseName;
  }

  public void setHouseName(String houseName) {
    this.houseName = houseName;
  }


  public BusinessItem houseUri(URI houseUri) {
    this.houseUri = houseUri;
    return this;
  }

  /**
   * Get houseUri
   * @return houseUri
   */
  @javax.annotation.Nullable
  public URI getHouseUri() {
    return houseUri;
  }

  public void setHouseUri(URI houseUri) {
    this.houseUri = houseUri;
  }


  public BusinessItem houses(List<BusinessItemHouse> houses) {
    this.houses = houses;
    return this;
  }

  public BusinessItem addHousesItem(BusinessItemHouse housesItem) {
    if (this.houses == null) {
      this.houses = new ArrayList<>();
    }
    this.houses.add(housesItem);
    return this;
  }

  /**
   * Get houses
   * @return houses
   */
  @javax.annotation.Nullable
  public List<BusinessItemHouse> getHouses() {
    return houses;
  }

  public void setHouses(List<BusinessItemHouse> houses) {
    this.houses = houses;
  }


  public BusinessItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BusinessItem itemDate(OffsetDateTime itemDate) {
    this.itemDate = itemDate;
    return this;
  }

  /**
   * Get itemDate
   * @return itemDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getItemDate() {
    return itemDate;
  }

  public void setItemDate(OffsetDateTime itemDate) {
    this.itemDate = itemDate;
  }


  public BusinessItem link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public BusinessItem procedureStepId(String procedureStepId) {
    this.procedureStepId = procedureStepId;
    return this;
  }

  /**
   * Get procedureStepId
   * @return procedureStepId
   */
  @javax.annotation.Nullable
  public String getProcedureStepId() {
    return procedureStepId;
  }

  public void setProcedureStepId(String procedureStepId) {
    this.procedureStepId = procedureStepId;
  }


  public BusinessItem procedureStepUri(URI procedureStepUri) {
    this.procedureStepUri = procedureStepUri;
    return this;
  }

  /**
   * Get procedureStepUri
   * @return procedureStepUri
   */
  @javax.annotation.Nullable
  public URI getProcedureStepUri() {
    return procedureStepUri;
  }

  public void setProcedureStepUri(URI procedureStepUri) {
    this.procedureStepUri = procedureStepUri;
  }


  public BusinessItem sequence(Integer sequence) {
    this.sequence = sequence;
    return this;
  }

  /**
   * Get sequence
   * @return sequence
   */
  @javax.annotation.Nullable
  public Integer getSequence() {
    return sequence;
  }

  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }


  public BusinessItem stepName(String stepName) {
    this.stepName = stepName;
    return this;
  }

  /**
   * Get stepName
   * @return stepName
   */
  @javax.annotation.Nullable
  public String getStepName() {
    return stepName;
  }

  public void setStepName(String stepName) {
    this.stepName = stepName;
  }


  public BusinessItem treatyId(String treatyId) {
    this.treatyId = treatyId;
    return this;
  }

  /**
   * Get treatyId
   * @return treatyId
   */
  @javax.annotation.Nullable
  public String getTreatyId() {
    return treatyId;
  }

  public void setTreatyId(String treatyId) {
    this.treatyId = treatyId;
  }


  public BusinessItem treatyUri(URI treatyUri) {
    this.treatyUri = treatyUri;
    return this;
  }

  /**
   * Get treatyUri
   * @return treatyUri
   */
  @javax.annotation.Nullable
  public URI getTreatyUri() {
    return treatyUri;
  }

  public void setTreatyUri(URI treatyUri) {
    this.treatyUri = treatyUri;
  }


  public BusinessItem workpackageProcedureUri(URI workpackageProcedureUri) {
    this.workpackageProcedureUri = workpackageProcedureUri;
    return this;
  }

  /**
   * Get workpackageProcedureUri
   * @return workpackageProcedureUri
   */
  @javax.annotation.Nullable
  public URI getWorkpackageProcedureUri() {
    return workpackageProcedureUri;
  }

  public void setWorkpackageProcedureUri(URI workpackageProcedureUri) {
    this.workpackageProcedureUri = workpackageProcedureUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessItem businessItem = (BusinessItem) o;
    return Objects.equals(this.businessItemUri, businessItem.businessItemUri) &&
        Objects.equals(this.houseId, businessItem.houseId) &&
        Objects.equals(this.houseName, businessItem.houseName) &&
        Objects.equals(this.houseUri, businessItem.houseUri) &&
        Objects.equals(this.houses, businessItem.houses) &&
        Objects.equals(this.id, businessItem.id) &&
        Objects.equals(this.itemDate, businessItem.itemDate) &&
        Objects.equals(this.link, businessItem.link) &&
        Objects.equals(this.procedureStepId, businessItem.procedureStepId) &&
        Objects.equals(this.procedureStepUri, businessItem.procedureStepUri) &&
        Objects.equals(this.sequence, businessItem.sequence) &&
        Objects.equals(this.stepName, businessItem.stepName) &&
        Objects.equals(this.treatyId, businessItem.treatyId) &&
        Objects.equals(this.treatyUri, businessItem.treatyUri) &&
        Objects.equals(this.workpackageProcedureUri, businessItem.workpackageProcedureUri);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessItemUri, houseId, houseName, houseUri, houses, id, itemDate, link, procedureStepId, procedureStepUri, sequence, stepName, treatyId, treatyUri, workpackageProcedureUri);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessItem {\n");
    sb.append("    businessItemUri: ").append(toIndentedString(businessItemUri)).append("\n");
    sb.append("    houseId: ").append(toIndentedString(houseId)).append("\n");
    sb.append("    houseName: ").append(toIndentedString(houseName)).append("\n");
    sb.append("    houseUri: ").append(toIndentedString(houseUri)).append("\n");
    sb.append("    houses: ").append(toIndentedString(houses)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    itemDate: ").append(toIndentedString(itemDate)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    procedureStepId: ").append(toIndentedString(procedureStepId)).append("\n");
    sb.append("    procedureStepUri: ").append(toIndentedString(procedureStepUri)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    stepName: ").append(toIndentedString(stepName)).append("\n");
    sb.append("    treatyId: ").append(toIndentedString(treatyId)).append("\n");
    sb.append("    treatyUri: ").append(toIndentedString(treatyUri)).append("\n");
    sb.append("    workpackageProcedureUri: ").append(toIndentedString(workpackageProcedureUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("businessItemUri");
    openapiFields.add("houseId");
    openapiFields.add("houseName");
    openapiFields.add("houseUri");
    openapiFields.add("houses");
    openapiFields.add("id");
    openapiFields.add("itemDate");
    openapiFields.add("link");
    openapiFields.add("procedureStepId");
    openapiFields.add("procedureStepUri");
    openapiFields.add("sequence");
    openapiFields.add("stepName");
    openapiFields.add("treatyId");
    openapiFields.add("treatyUri");
    openapiFields.add("workpackageProcedureUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BusinessItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BusinessItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BusinessItem is not found in the empty JSON string", BusinessItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BusinessItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BusinessItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("businessItemUri") != null && !jsonObj.get("businessItemUri").isJsonNull()) && !jsonObj.get("businessItemUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessItemUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessItemUri").toString()));
      }
      if ((jsonObj.get("houseId") != null && !jsonObj.get("houseId").isJsonNull()) && !jsonObj.get("houseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `houseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("houseId").toString()));
      }
      if ((jsonObj.get("houseName") != null && !jsonObj.get("houseName").isJsonNull()) && !jsonObj.get("houseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `houseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("houseName").toString()));
      }
      if ((jsonObj.get("houseUri") != null && !jsonObj.get("houseUri").isJsonNull()) && !jsonObj.get("houseUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `houseUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("houseUri").toString()));
      }
      if (jsonObj.get("houses") != null && !jsonObj.get("houses").isJsonNull()) {
        JsonArray jsonArrayhouses = jsonObj.getAsJsonArray("houses");
        if (jsonArrayhouses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("houses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `houses` to be an array in the JSON string but got `%s`", jsonObj.get("houses").toString()));
          }

          // validate the optional field `houses` (array)
          for (int i = 0; i < jsonArrayhouses.size(); i++) {
            BusinessItemHouse.validateJsonElement(jsonArrayhouses.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("procedureStepId") != null && !jsonObj.get("procedureStepId").isJsonNull()) && !jsonObj.get("procedureStepId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `procedureStepId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("procedureStepId").toString()));
      }
      if ((jsonObj.get("procedureStepUri") != null && !jsonObj.get("procedureStepUri").isJsonNull()) && !jsonObj.get("procedureStepUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `procedureStepUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("procedureStepUri").toString()));
      }
      if ((jsonObj.get("stepName") != null && !jsonObj.get("stepName").isJsonNull()) && !jsonObj.get("stepName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stepName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stepName").toString()));
      }
      if ((jsonObj.get("treatyId") != null && !jsonObj.get("treatyId").isJsonNull()) && !jsonObj.get("treatyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treatyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treatyId").toString()));
      }
      if ((jsonObj.get("treatyUri") != null && !jsonObj.get("treatyUri").isJsonNull()) && !jsonObj.get("treatyUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treatyUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treatyUri").toString()));
      }
      if ((jsonObj.get("workpackageProcedureUri") != null && !jsonObj.get("workpackageProcedureUri").isJsonNull()) && !jsonObj.get("workpackageProcedureUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workpackageProcedureUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workpackageProcedureUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BusinessItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BusinessItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BusinessItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BusinessItem.class));

       return (TypeAdapter<T>) new TypeAdapter<BusinessItem>() {
           @Override
           public void write(JsonWriter out, BusinessItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BusinessItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BusinessItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BusinessItem
   * @throws IOException if the JSON string is invalid with respect to BusinessItem
   */
  public static BusinessItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BusinessItem.class);
  }

  /**
   * Convert an instance of BusinessItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

