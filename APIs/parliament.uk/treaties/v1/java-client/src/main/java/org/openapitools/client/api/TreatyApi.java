/*
 * Treaties API
 * An API exposing details of the treaties laid before Parliament.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BusinessItemResourceCollection;
import org.openapitools.client.model.House;
import org.openapitools.client.model.ParliamentaryProcess;
import org.openapitools.client.model.SeriesMembershipType;
import org.openapitools.client.model.TreatyResource;
import org.openapitools.client.model.TreatyResourceCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TreatyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TreatyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TreatyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBusinessItemsByTreatyId
     * @param id Business items belonging to treaty with the ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The business items for the requested treaty </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the treaty cannot be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBusinessItemsByTreatyIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Treaty/{id}/BusinessItems"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBusinessItemsByTreatyIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBusinessItemsByTreatyId(Async)");
        }

        return getBusinessItemsByTreatyIdCall(id, _callback);

    }

    /**
     * Returns business items belonging to the treaty with ID.
     * 
     * @param id Business items belonging to treaty with the ID specified (required)
     * @return BusinessItemResourceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The business items for the requested treaty </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the treaty cannot be found </td><td>  -  </td></tr>
     </table>
     */
    public BusinessItemResourceCollection getBusinessItemsByTreatyId(String id) throws ApiException {
        ApiResponse<BusinessItemResourceCollection> localVarResp = getBusinessItemsByTreatyIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Returns business items belonging to the treaty with ID.
     * 
     * @param id Business items belonging to treaty with the ID specified (required)
     * @return ApiResponse&lt;BusinessItemResourceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The business items for the requested treaty </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the treaty cannot be found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessItemResourceCollection> getBusinessItemsByTreatyIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getBusinessItemsByTreatyIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BusinessItemResourceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns business items belonging to the treaty with ID. (asynchronously)
     * 
     * @param id Business items belonging to treaty with the ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The business items for the requested treaty </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the treaty cannot be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBusinessItemsByTreatyIdAsync(String id, final ApiCallback<BusinessItemResourceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBusinessItemsByTreatyIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BusinessItemResourceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTreaties
     * @param searchText Treaties which contains the search text specified (optional)
     * @param governmentOrganisationId Treaties with the government organisation id specified (optional)
     * @param series Treaties with the series membership type specified (optional)
     * @param parliamentaryProcess Treaties where the parliamentary process is concluded or notconcluded (optional)
     * @param debateScheduled Treaties which contain a scheduled debate (optional)
     * @param motionToNotRatify Treaties which contain a motion to not ratify (optional)
     * @param recommendedNotRatify Treaties which are recommended to not ratify (optional)
     * @param house Treaties which are laid in the specified house (optional)
     * @param skip The number of records to skip from the first, default is 0 (optional)
     * @param take The number of records to return, default is 20 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of treaties </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTreatiesCall(String searchText, Integer governmentOrganisationId, SeriesMembershipType series, ParliamentaryProcess parliamentaryProcess, Boolean debateScheduled, Boolean motionToNotRatify, Boolean recommendedNotRatify, House house, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Treaty";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SearchText", searchText));
        }

        if (governmentOrganisationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GovernmentOrganisationId", governmentOrganisationId));
        }

        if (series != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Series", series));
        }

        if (parliamentaryProcess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ParliamentaryProcess", parliamentaryProcess));
        }

        if (debateScheduled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DebateScheduled", debateScheduled));
        }

        if (motionToNotRatify != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MotionToNotRatify", motionToNotRatify));
        }

        if (recommendedNotRatify != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RecommendedNotRatify", recommendedNotRatify));
        }

        if (house != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("House", house));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Take", take));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTreatiesValidateBeforeCall(String searchText, Integer governmentOrganisationId, SeriesMembershipType series, ParliamentaryProcess parliamentaryProcess, Boolean debateScheduled, Boolean motionToNotRatify, Boolean recommendedNotRatify, House house, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        return getTreatiesCall(searchText, governmentOrganisationId, series, parliamentaryProcess, debateScheduled, motionToNotRatify, recommendedNotRatify, house, skip, take, _callback);

    }

    /**
     * Returns a list of treaties.
     * 
     * @param searchText Treaties which contains the search text specified (optional)
     * @param governmentOrganisationId Treaties with the government organisation id specified (optional)
     * @param series Treaties with the series membership type specified (optional)
     * @param parliamentaryProcess Treaties where the parliamentary process is concluded or notconcluded (optional)
     * @param debateScheduled Treaties which contain a scheduled debate (optional)
     * @param motionToNotRatify Treaties which contain a motion to not ratify (optional)
     * @param recommendedNotRatify Treaties which are recommended to not ratify (optional)
     * @param house Treaties which are laid in the specified house (optional)
     * @param skip The number of records to skip from the first, default is 0 (optional)
     * @param take The number of records to return, default is 20 (optional)
     * @return TreatyResourceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of treaties </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public TreatyResourceCollection getTreaties(String searchText, Integer governmentOrganisationId, SeriesMembershipType series, ParliamentaryProcess parliamentaryProcess, Boolean debateScheduled, Boolean motionToNotRatify, Boolean recommendedNotRatify, House house, Integer skip, Integer take) throws ApiException {
        ApiResponse<TreatyResourceCollection> localVarResp = getTreatiesWithHttpInfo(searchText, governmentOrganisationId, series, parliamentaryProcess, debateScheduled, motionToNotRatify, recommendedNotRatify, house, skip, take);
        return localVarResp.getData();
    }

    /**
     * Returns a list of treaties.
     * 
     * @param searchText Treaties which contains the search text specified (optional)
     * @param governmentOrganisationId Treaties with the government organisation id specified (optional)
     * @param series Treaties with the series membership type specified (optional)
     * @param parliamentaryProcess Treaties where the parliamentary process is concluded or notconcluded (optional)
     * @param debateScheduled Treaties which contain a scheduled debate (optional)
     * @param motionToNotRatify Treaties which contain a motion to not ratify (optional)
     * @param recommendedNotRatify Treaties which are recommended to not ratify (optional)
     * @param house Treaties which are laid in the specified house (optional)
     * @param skip The number of records to skip from the first, default is 0 (optional)
     * @param take The number of records to return, default is 20 (optional)
     * @return ApiResponse&lt;TreatyResourceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of treaties </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TreatyResourceCollection> getTreatiesWithHttpInfo(String searchText, Integer governmentOrganisationId, SeriesMembershipType series, ParliamentaryProcess parliamentaryProcess, Boolean debateScheduled, Boolean motionToNotRatify, Boolean recommendedNotRatify, House house, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = getTreatiesValidateBeforeCall(searchText, governmentOrganisationId, series, parliamentaryProcess, debateScheduled, motionToNotRatify, recommendedNotRatify, house, skip, take, null);
        Type localVarReturnType = new TypeToken<TreatyResourceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of treaties. (asynchronously)
     * 
     * @param searchText Treaties which contains the search text specified (optional)
     * @param governmentOrganisationId Treaties with the government organisation id specified (optional)
     * @param series Treaties with the series membership type specified (optional)
     * @param parliamentaryProcess Treaties where the parliamentary process is concluded or notconcluded (optional)
     * @param debateScheduled Treaties which contain a scheduled debate (optional)
     * @param motionToNotRatify Treaties which contain a motion to not ratify (optional)
     * @param recommendedNotRatify Treaties which are recommended to not ratify (optional)
     * @param house Treaties which are laid in the specified house (optional)
     * @param skip The number of records to skip from the first, default is 0 (optional)
     * @param take The number of records to return, default is 20 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of treaties </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTreatiesAsync(String searchText, Integer governmentOrganisationId, SeriesMembershipType series, ParliamentaryProcess parliamentaryProcess, Boolean debateScheduled, Boolean motionToNotRatify, Boolean recommendedNotRatify, House house, Integer skip, Integer take, final ApiCallback<TreatyResourceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTreatiesValidateBeforeCall(searchText, governmentOrganisationId, series, parliamentaryProcess, debateScheduled, motionToNotRatify, recommendedNotRatify, house, skip, take, _callback);
        Type localVarReturnType = new TypeToken<TreatyResourceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTreatyById
     * @param id Treaty with ID specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the requested treaty </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the treaty can&#39;t be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTreatyByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Treaty/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTreatyByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTreatyById(Async)");
        }

        return getTreatyByIdCall(id, _callback);

    }

    /**
     * Returns a treaty by ID.
     * 
     * @param id Treaty with ID specified (required)
     * @return TreatyResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the requested treaty </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the treaty can&#39;t be found </td><td>  -  </td></tr>
     </table>
     */
    public TreatyResource getTreatyById(String id) throws ApiException {
        ApiResponse<TreatyResource> localVarResp = getTreatyByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Returns a treaty by ID.
     * 
     * @param id Treaty with ID specified (required)
     * @return ApiResponse&lt;TreatyResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the requested treaty </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the treaty can&#39;t be found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TreatyResource> getTreatyByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getTreatyByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TreatyResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a treaty by ID. (asynchronously)
     * 
     * @param id Treaty with ID specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the requested treaty </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the treaty can&#39;t be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTreatyByIdAsync(String id, final ApiCallback<TreatyResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTreatyByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TreatyResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
