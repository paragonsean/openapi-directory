/**
 * OpenUV - Global Real-Time UV Index Forecast API
 * The missing minimalistic JSON real-time UV Index API for awesome Developers, Innovators and Smart Home Enthusiasts
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Forecast model module.
 * @module model/Forecast
 * @version v1
 */
class Forecast {
    /**
     * Constructs a new <code>Forecast</code>.
     * @alias module:model/Forecast
     * @param uv {Number} 
     * @param uvTime {String} 
     */
    constructor(uv, uvTime) { 
        
        Forecast.initialize(this, uv, uvTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, uv, uvTime) { 
        obj['uv'] = uv;
        obj['uv_time'] = uvTime;
    }

    /**
     * Constructs a <code>Forecast</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Forecast} obj Optional instance to populate.
     * @return {module:model/Forecast} The populated <code>Forecast</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Forecast();

            if (data.hasOwnProperty('uv')) {
                obj['uv'] = ApiClient.convertToType(data['uv'], 'Number');
            }
            if (data.hasOwnProperty('uv_time')) {
                obj['uv_time'] = ApiClient.convertToType(data['uv_time'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Forecast</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Forecast</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Forecast.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['uv_time'] && !(typeof data['uv_time'] === 'string' || data['uv_time'] instanceof String)) {
            throw new Error("Expected the field `uv_time` to be a primitive type in the JSON string but got " + data['uv_time']);
        }

        return true;
    }


}

Forecast.RequiredProperties = ["uv", "uv_time"];

/**
 * @member {Number} uv
 */
Forecast.prototype['uv'] = undefined;

/**
 * @member {String} uv_time
 */
Forecast.prototype['uv_time'] = undefined;






export default Forecast;

