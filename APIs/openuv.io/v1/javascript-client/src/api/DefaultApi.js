/**
 * OpenUV - Global Real-Time UV Index Forecast API
 * The missing minimalistic JSON real-time UV Index API for awesome Developers, Innovators and Smart Home Enthusiasts
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Forecast from '../model/Forecast';
import ProtectionResult from '../model/ProtectionResult';
import UvIndexResult from '../model/UvIndexResult';

/**
* Default service.
* @module api/DefaultApi
* @version v1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the forecastGet operation.
     * @callback module:api/DefaultApi~forecastGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Array>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get hourly UV Index Forecast by location and date. Optional altitude, ozone level and datetime could be provided.
     * @param {Number} lat latitude, from -90.00 to 90.00
     * @param {Number} lng longitude, from -180.00 to 180.00
     * @param {String} xAccessToken This header is used to send data that contains your OpenUV API key
     * @param {Object} opts Optional parameters
     * @param {Number} [alt] Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.
     * @param {Number} [ozone] Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.
     * @param {Date} [dt] UTC datetime in ISO-8601 format, now by default. Use that parameter to get UV Index Forecast for any point in time.
     * @param {module:api/DefaultApi~forecastGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Array>}
     */
    forecastGet(lat, lng, xAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling forecastGet");
      }
      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling forecastGet");
      }
      // verify the required parameter 'xAccessToken' is set
      if (xAccessToken === undefined || xAccessToken === null) {
        throw new Error("Missing the required parameter 'xAccessToken' when calling forecastGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat': lat,
        'lng': lng,
        'alt': opts['alt'],
        'ozone': opts['ozone'],
        'dt': opts['dt']
      };
      let headerParams = {
        'x-access-token': xAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Array];
      return this.apiClient.callApi(
        '/forecast', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protectionGet operation.
     * @callback module:api/DefaultApi~protectionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtectionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get daily protection time by location, UV Index from and UV Index to with 10 minutes accuracy. Optional altitide and ozone level could be provided.
     * @param {Number} lat latitude, from -90.00 to 90.00
     * @param {Number} lng longitude, from -180.00 to 180.00
     * @param {Number} from UV Index from value for protection datetime lookup. From 0 to 40.
     * @param {Number} to UV Index to value for protection datetime lookup. From 0 to 40.
     * @param {String} xAccessToken This header is used to send data that contains your OpenUV API key
     * @param {Object} opts Optional parameters
     * @param {Number} [alt] Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.
     * @param {Number} [ozone] Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.
     * @param {module:api/DefaultApi~protectionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtectionResult}
     */
    protectionGet(lat, lng, from, to, xAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling protectionGet");
      }
      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling protectionGet");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling protectionGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling protectionGet");
      }
      // verify the required parameter 'xAccessToken' is set
      if (xAccessToken === undefined || xAccessToken === null) {
        throw new Error("Missing the required parameter 'xAccessToken' when calling protectionGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat': lat,
        'lng': lng,
        'from': from,
        'to': to,
        'alt': opts['alt'],
        'ozone': opts['ozone']
      };
      let headerParams = {
        'x-access-token': xAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProtectionResult;
      return this.apiClient.callApi(
        '/protection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uvGet operation.
     * @callback module:api/DefaultApi~uvGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UvIndexResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get real-time UV Index by location. Optional altitude, ozone level and datetime could be provided.
     * @param {Number} lat latitude, from -90.00 to 90.00
     * @param {Number} lng longitude, from -180.00 to 180.00
     * @param {String} xAccessToken This header is used to send data that contains your OpenUV API key
     * @param {Object} opts Optional parameters
     * @param {Number} [alt] Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.
     * @param {Number} [ozone] Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.
     * @param {Date} [dt] UTC datetime in ISO-8601 format, now by default. Use that parameter to get UV Index Forecast for any point in time.
     * @param {module:api/DefaultApi~uvGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UvIndexResult}
     */
    uvGet(lat, lng, xAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling uvGet");
      }
      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling uvGet");
      }
      // verify the required parameter 'xAccessToken' is set
      if (xAccessToken === undefined || xAccessToken === null) {
        throw new Error("Missing the required parameter 'xAccessToken' when calling uvGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat': lat,
        'lng': lng,
        'alt': opts['alt'],
        'ozone': opts['ozone'],
        'dt': opts['dt']
      };
      let headerParams = {
        'x-access-token': xAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UvIndexResult;
      return this.apiClient.callApi(
        '/uv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
