# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProtectionResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ozone: float=None, ozone_time: str=None, uv: float=None, uv_max: float=None, uv_max_time: str=None, uv_time: str=None):
        """ProtectionResult - a model defined in OpenAPI

        :param ozone: The ozone of this ProtectionResult.
        :param ozone_time: The ozone_time of this ProtectionResult.
        :param uv: The uv of this ProtectionResult.
        :param uv_max: The uv_max of this ProtectionResult.
        :param uv_max_time: The uv_max_time of this ProtectionResult.
        :param uv_time: The uv_time of this ProtectionResult.
        """
        self.openapi_types = {
            'ozone': float,
            'ozone_time': str,
            'uv': float,
            'uv_max': float,
            'uv_max_time': str,
            'uv_time': str
        }

        self.attribute_map = {
            'ozone': 'ozone',
            'ozone_time': 'ozone_time',
            'uv': 'uv',
            'uv_max': 'uv_max',
            'uv_max_time': 'uv_max_time',
            'uv_time': 'uv_time'
        }

        self._ozone = ozone
        self._ozone_time = ozone_time
        self._uv = uv
        self._uv_max = uv_max
        self._uv_max_time = uv_max_time
        self._uv_time = uv_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProtectionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The protectionResult of this ProtectionResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ozone(self):
        """Gets the ozone of this ProtectionResult.


        :return: The ozone of this ProtectionResult.
        :rtype: float
        """
        return self._ozone

    @ozone.setter
    def ozone(self, ozone):
        """Sets the ozone of this ProtectionResult.


        :param ozone: The ozone of this ProtectionResult.
        :type ozone: float
        """
        if ozone is None:
            raise ValueError("Invalid value for `ozone`, must not be `None`")

        self._ozone = ozone

    @property
    def ozone_time(self):
        """Gets the ozone_time of this ProtectionResult.


        :return: The ozone_time of this ProtectionResult.
        :rtype: str
        """
        return self._ozone_time

    @ozone_time.setter
    def ozone_time(self, ozone_time):
        """Sets the ozone_time of this ProtectionResult.


        :param ozone_time: The ozone_time of this ProtectionResult.
        :type ozone_time: str
        """
        if ozone_time is None:
            raise ValueError("Invalid value for `ozone_time`, must not be `None`")

        self._ozone_time = ozone_time

    @property
    def uv(self):
        """Gets the uv of this ProtectionResult.


        :return: The uv of this ProtectionResult.
        :rtype: float
        """
        return self._uv

    @uv.setter
    def uv(self, uv):
        """Sets the uv of this ProtectionResult.


        :param uv: The uv of this ProtectionResult.
        :type uv: float
        """
        if uv is None:
            raise ValueError("Invalid value for `uv`, must not be `None`")

        self._uv = uv

    @property
    def uv_max(self):
        """Gets the uv_max of this ProtectionResult.


        :return: The uv_max of this ProtectionResult.
        :rtype: float
        """
        return self._uv_max

    @uv_max.setter
    def uv_max(self, uv_max):
        """Sets the uv_max of this ProtectionResult.


        :param uv_max: The uv_max of this ProtectionResult.
        :type uv_max: float
        """
        if uv_max is None:
            raise ValueError("Invalid value for `uv_max`, must not be `None`")

        self._uv_max = uv_max

    @property
    def uv_max_time(self):
        """Gets the uv_max_time of this ProtectionResult.


        :return: The uv_max_time of this ProtectionResult.
        :rtype: str
        """
        return self._uv_max_time

    @uv_max_time.setter
    def uv_max_time(self, uv_max_time):
        """Sets the uv_max_time of this ProtectionResult.


        :param uv_max_time: The uv_max_time of this ProtectionResult.
        :type uv_max_time: str
        """
        if uv_max_time is None:
            raise ValueError("Invalid value for `uv_max_time`, must not be `None`")

        self._uv_max_time = uv_max_time

    @property
    def uv_time(self):
        """Gets the uv_time of this ProtectionResult.


        :return: The uv_time of this ProtectionResult.
        :rtype: str
        """
        return self._uv_time

    @uv_time.setter
    def uv_time(self, uv_time):
        """Sets the uv_time of this ProtectionResult.


        :param uv_time: The uv_time of this ProtectionResult.
        :type uv_time: str
        """
        if uv_time is None:
            raise ValueError("Invalid value for `uv_time`, must not be `None`")

        self._uv_time = uv_time
