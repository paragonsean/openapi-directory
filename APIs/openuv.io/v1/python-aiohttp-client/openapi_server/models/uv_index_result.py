# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UvIndexResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_time: str=None, from_uv: float=None, to_time: str=None, to_uv: float=None):
        """UvIndexResult - a model defined in OpenAPI

        :param from_time: The from_time of this UvIndexResult.
        :param from_uv: The from_uv of this UvIndexResult.
        :param to_time: The to_time of this UvIndexResult.
        :param to_uv: The to_uv of this UvIndexResult.
        """
        self.openapi_types = {
            'from_time': str,
            'from_uv': float,
            'to_time': str,
            'to_uv': float
        }

        self.attribute_map = {
            'from_time': 'from_time',
            'from_uv': 'from_uv',
            'to_time': 'to_time',
            'to_uv': 'to_uv'
        }

        self._from_time = from_time
        self._from_uv = from_uv
        self._to_time = to_time
        self._to_uv = to_uv

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UvIndexResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The uvIndexResult of this UvIndexResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_time(self):
        """Gets the from_time of this UvIndexResult.


        :return: The from_time of this UvIndexResult.
        :rtype: str
        """
        return self._from_time

    @from_time.setter
    def from_time(self, from_time):
        """Sets the from_time of this UvIndexResult.


        :param from_time: The from_time of this UvIndexResult.
        :type from_time: str
        """
        if from_time is None:
            raise ValueError("Invalid value for `from_time`, must not be `None`")

        self._from_time = from_time

    @property
    def from_uv(self):
        """Gets the from_uv of this UvIndexResult.


        :return: The from_uv of this UvIndexResult.
        :rtype: float
        """
        return self._from_uv

    @from_uv.setter
    def from_uv(self, from_uv):
        """Sets the from_uv of this UvIndexResult.


        :param from_uv: The from_uv of this UvIndexResult.
        :type from_uv: float
        """
        if from_uv is None:
            raise ValueError("Invalid value for `from_uv`, must not be `None`")

        self._from_uv = from_uv

    @property
    def to_time(self):
        """Gets the to_time of this UvIndexResult.


        :return: The to_time of this UvIndexResult.
        :rtype: str
        """
        return self._to_time

    @to_time.setter
    def to_time(self, to_time):
        """Sets the to_time of this UvIndexResult.


        :param to_time: The to_time of this UvIndexResult.
        :type to_time: str
        """
        if to_time is None:
            raise ValueError("Invalid value for `to_time`, must not be `None`")

        self._to_time = to_time

    @property
    def to_uv(self):
        """Gets the to_uv of this UvIndexResult.


        :return: The to_uv of this UvIndexResult.
        :rtype: float
        """
        return self._to_uv

    @to_uv.setter
    def to_uv(self, to_uv):
        """Sets the to_uv of this UvIndexResult.


        :param to_uv: The to_uv of this UvIndexResult.
        :type to_uv: float
        """
        if to_uv is None:
            raise ValueError("Invalid value for `to_uv`, must not be `None`")

        self._to_uv = to_uv
