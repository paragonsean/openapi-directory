# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Forecast(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uv: float=None, uv_time: str=None):
        """Forecast - a model defined in OpenAPI

        :param uv: The uv of this Forecast.
        :param uv_time: The uv_time of this Forecast.
        """
        self.openapi_types = {
            'uv': float,
            'uv_time': str
        }

        self.attribute_map = {
            'uv': 'uv',
            'uv_time': 'uv_time'
        }

        self._uv = uv
        self._uv_time = uv_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Forecast':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The forecast of this Forecast.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uv(self):
        """Gets the uv of this Forecast.


        :return: The uv of this Forecast.
        :rtype: float
        """
        return self._uv

    @uv.setter
    def uv(self, uv):
        """Sets the uv of this Forecast.


        :param uv: The uv of this Forecast.
        :type uv: float
        """
        if uv is None:
            raise ValueError("Invalid value for `uv`, must not be `None`")

        self._uv = uv

    @property
    def uv_time(self):
        """Gets the uv_time of this Forecast.


        :return: The uv_time of this Forecast.
        :rtype: str
        """
        return self._uv_time

    @uv_time.setter
    def uv_time(self, uv_time):
        """Sets the uv_time of this Forecast.


        :param uv_time: The uv_time of this Forecast.
        :type uv_time: str
        """
        if uv_time is None:
            raise ValueError("Invalid value for `uv_time`, must not be `None`")

        self._uv_time = uv_time
