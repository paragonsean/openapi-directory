/**
 * OpenUV - Global Real-Time UV Index Forecast API
 * The missing minimalistic JSON real-time UV Index API for awesome Developers, Innovators and Smart Home Enthusiasts
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUvIndexResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUvIndexResult::OAIUvIndexResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUvIndexResult::OAIUvIndexResult() {
    this->initializeModel();
}

OAIUvIndexResult::~OAIUvIndexResult() {}

void OAIUvIndexResult::initializeModel() {

    m_from_time_isSet = false;
    m_from_time_isValid = false;

    m_from_uv_isSet = false;
    m_from_uv_isValid = false;

    m_to_time_isSet = false;
    m_to_time_isValid = false;

    m_to_uv_isSet = false;
    m_to_uv_isValid = false;
}

void OAIUvIndexResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUvIndexResult::fromJsonObject(QJsonObject json) {

    m_from_time_isValid = ::OpenAPI::fromJsonValue(m_from_time, json[QString("from_time")]);
    m_from_time_isSet = !json[QString("from_time")].isNull() && m_from_time_isValid;

    m_from_uv_isValid = ::OpenAPI::fromJsonValue(m_from_uv, json[QString("from_uv")]);
    m_from_uv_isSet = !json[QString("from_uv")].isNull() && m_from_uv_isValid;

    m_to_time_isValid = ::OpenAPI::fromJsonValue(m_to_time, json[QString("to_time")]);
    m_to_time_isSet = !json[QString("to_time")].isNull() && m_to_time_isValid;

    m_to_uv_isValid = ::OpenAPI::fromJsonValue(m_to_uv, json[QString("to_uv")]);
    m_to_uv_isSet = !json[QString("to_uv")].isNull() && m_to_uv_isValid;
}

QString OAIUvIndexResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUvIndexResult::asJsonObject() const {
    QJsonObject obj;
    if (m_from_time_isSet) {
        obj.insert(QString("from_time"), ::OpenAPI::toJsonValue(m_from_time));
    }
    if (m_from_uv_isSet) {
        obj.insert(QString("from_uv"), ::OpenAPI::toJsonValue(m_from_uv));
    }
    if (m_to_time_isSet) {
        obj.insert(QString("to_time"), ::OpenAPI::toJsonValue(m_to_time));
    }
    if (m_to_uv_isSet) {
        obj.insert(QString("to_uv"), ::OpenAPI::toJsonValue(m_to_uv));
    }
    return obj;
}

QString OAIUvIndexResult::getFromTime() const {
    return m_from_time;
}
void OAIUvIndexResult::setFromTime(const QString &from_time) {
    m_from_time = from_time;
    m_from_time_isSet = true;
}

bool OAIUvIndexResult::is_from_time_Set() const{
    return m_from_time_isSet;
}

bool OAIUvIndexResult::is_from_time_Valid() const{
    return m_from_time_isValid;
}

double OAIUvIndexResult::getFromUv() const {
    return m_from_uv;
}
void OAIUvIndexResult::setFromUv(const double &from_uv) {
    m_from_uv = from_uv;
    m_from_uv_isSet = true;
}

bool OAIUvIndexResult::is_from_uv_Set() const{
    return m_from_uv_isSet;
}

bool OAIUvIndexResult::is_from_uv_Valid() const{
    return m_from_uv_isValid;
}

QString OAIUvIndexResult::getToTime() const {
    return m_to_time;
}
void OAIUvIndexResult::setToTime(const QString &to_time) {
    m_to_time = to_time;
    m_to_time_isSet = true;
}

bool OAIUvIndexResult::is_to_time_Set() const{
    return m_to_time_isSet;
}

bool OAIUvIndexResult::is_to_time_Valid() const{
    return m_to_time_isValid;
}

double OAIUvIndexResult::getToUv() const {
    return m_to_uv;
}
void OAIUvIndexResult::setToUv(const double &to_uv) {
    m_to_uv = to_uv;
    m_to_uv_isSet = true;
}

bool OAIUvIndexResult::is_to_uv_Set() const{
    return m_to_uv_isSet;
}

bool OAIUvIndexResult::is_to_uv_Valid() const{
    return m_to_uv_isValid;
}

bool OAIUvIndexResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_uv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_uv_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUvIndexResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_time_isValid && m_from_uv_isValid && m_to_time_isValid && m_to_uv_isValid && true;
}

} // namespace OpenAPI
