/**
 * OpenUV - Global Real-Time UV Index Forecast API
 * The missing minimalistic JSON real-time UV Index API for awesome Developers, Innovators and Smart Home Enthusiasts
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForecast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForecast::OAIForecast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForecast::OAIForecast() {
    this->initializeModel();
}

OAIForecast::~OAIForecast() {}

void OAIForecast::initializeModel() {

    m_uv_isSet = false;
    m_uv_isValid = false;

    m_uv_time_isSet = false;
    m_uv_time_isValid = false;
}

void OAIForecast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForecast::fromJsonObject(QJsonObject json) {

    m_uv_isValid = ::OpenAPI::fromJsonValue(m_uv, json[QString("uv")]);
    m_uv_isSet = !json[QString("uv")].isNull() && m_uv_isValid;

    m_uv_time_isValid = ::OpenAPI::fromJsonValue(m_uv_time, json[QString("uv_time")]);
    m_uv_time_isSet = !json[QString("uv_time")].isNull() && m_uv_time_isValid;
}

QString OAIForecast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForecast::asJsonObject() const {
    QJsonObject obj;
    if (m_uv_isSet) {
        obj.insert(QString("uv"), ::OpenAPI::toJsonValue(m_uv));
    }
    if (m_uv_time_isSet) {
        obj.insert(QString("uv_time"), ::OpenAPI::toJsonValue(m_uv_time));
    }
    return obj;
}

double OAIForecast::getUv() const {
    return m_uv;
}
void OAIForecast::setUv(const double &uv) {
    m_uv = uv;
    m_uv_isSet = true;
}

bool OAIForecast::is_uv_Set() const{
    return m_uv_isSet;
}

bool OAIForecast::is_uv_Valid() const{
    return m_uv_isValid;
}

QString OAIForecast::getUvTime() const {
    return m_uv_time;
}
void OAIForecast::setUvTime(const QString &uv_time) {
    m_uv_time = uv_time;
    m_uv_time_isSet = true;
}

bool OAIForecast::is_uv_time_Set() const{
    return m_uv_time_isSet;
}

bool OAIForecast::is_uv_time_Valid() const{
    return m_uv_time_isValid;
}

bool OAIForecast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_uv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uv_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForecast::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_uv_isValid && m_uv_time_isValid && true;
}

} // namespace OpenAPI
