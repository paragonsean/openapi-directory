/**
 * OpenUV - Global Real-Time UV Index Forecast API
 * The missing minimalistic JSON real-time UV Index API for awesome Developers, Innovators and Smart Home Enthusiasts
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIForecast.h"
#include "OAIProtectionResult.h"
#include "OAIUvIndexResult.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  lat double [required]
    * @param[in]  lng double [required]
    * @param[in]  x_access_token QString [required]
    * @param[in]  alt double [optional]
    * @param[in]  ozone double [optional]
    * @param[in]  dt QDateTime [optional]
    */
    virtual void forecastGet(const double &lat, const double &lng, const QString &x_access_token, const ::OpenAPI::OptionalParam<double> &alt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ozone = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QDateTime> &dt = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  lat double [required]
    * @param[in]  lng double [required]
    * @param[in]  from double [required]
    * @param[in]  to double [required]
    * @param[in]  x_access_token QString [required]
    * @param[in]  alt double [optional]
    * @param[in]  ozone double [optional]
    */
    virtual void protectionGet(const double &lat, const double &lng, const double &from, const double &to, const QString &x_access_token, const ::OpenAPI::OptionalParam<double> &alt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ozone = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  lat double [required]
    * @param[in]  lng double [required]
    * @param[in]  x_access_token QString [required]
    * @param[in]  alt double [optional]
    * @param[in]  ozone double [optional]
    * @param[in]  dt QDateTime [optional]
    */
    virtual void uvGet(const double &lat, const double &lng, const QString &x_access_token, const ::OpenAPI::OptionalParam<double> &alt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ozone = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QDateTime> &dt = ::OpenAPI::OptionalParam<QDateTime>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void forecastGetCallback(OAIHttpRequestWorker *worker);
    void protectionGetCallback(OAIHttpRequestWorker *worker);
    void uvGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void forecastGetSignal(QList<QSet> summary);
    void protectionGetSignal(OAIProtectionResult summary);
    void uvGetSignal(OAIUvIndexResult summary);


    void forecastGetSignalFull(OAIHttpRequestWorker *worker, QList<QSet> summary);
    void protectionGetSignalFull(OAIHttpRequestWorker *worker, OAIProtectionResult summary);
    void uvGetSignalFull(OAIHttpRequestWorker *worker, OAIUvIndexResult summary);

    Q_DECL_DEPRECATED_X("Use forecastGetSignalError() instead")
    void forecastGetSignalE(QList<QSet> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastGetSignalError(QList<QSet> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protectionGetSignalError() instead")
    void protectionGetSignalE(OAIProtectionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protectionGetSignalError(OAIProtectionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uvGetSignalError() instead")
    void uvGetSignalE(OAIUvIndexResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uvGetSignalError(OAIUvIndexResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use forecastGetSignalErrorFull() instead")
    void forecastGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protectionGetSignalErrorFull() instead")
    void protectionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protectionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uvGetSignalErrorFull() instead")
    void uvGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uvGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
