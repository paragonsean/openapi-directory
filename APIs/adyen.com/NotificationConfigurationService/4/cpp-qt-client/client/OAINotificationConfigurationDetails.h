/**
 * Notification Configuration API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification Configuration API provides endpoints for setting up and testing notifications that inform you of events on your platform, for example when a verification check or a payout has been completed.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Notification Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Notification/v4/createNotificationConfiguration ```
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINotificationConfigurationDetails.h
 *
 * 
 */

#ifndef OAINotificationConfigurationDetails_H
#define OAINotificationConfigurationDetails_H

#include <QJsonObject>

#include "OAINotificationEventConfigurationWrapper.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINotificationEventConfigurationWrapper;

class OAINotificationConfigurationDetails : public OAIObject {
public:
    OAINotificationConfigurationDetails();
    OAINotificationConfigurationDetails(QString json);
    ~OAINotificationConfigurationDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isActive() const;
    void setActive(const bool &active);
    bool is_active_Set() const;
    bool is_active_Valid() const;

    qint32 getApiVersion() const;
    void setApiVersion(const qint32 &api_version);
    bool is_api_version_Set() const;
    bool is_api_version_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<OAINotificationEventConfigurationWrapper> getEventConfigs() const;
    void setEventConfigs(const QList<OAINotificationEventConfigurationWrapper> &event_configs);
    bool is_event_configs_Set() const;
    bool is_event_configs_Valid() const;

    Q_DECL_DEPRECATED QString getMessageFormat() const;
    Q_DECL_DEPRECATED void setMessageFormat(const QString &message_format);
    Q_DECL_DEPRECATED bool is_message_format_Set() const;
    Q_DECL_DEPRECATED bool is_message_format_Valid() const;

    qint64 getNotificationId() const;
    void setNotificationId(const qint64 &notification_id);
    bool is_notification_id_Set() const;
    bool is_notification_id_Valid() const;

    QString getNotifyPassword() const;
    void setNotifyPassword(const QString &notify_password);
    bool is_notify_password_Set() const;
    bool is_notify_password_Valid() const;

    QString getNotifyUrl() const;
    void setNotifyUrl(const QString &notify_url);
    bool is_notify_url_Set() const;
    bool is_notify_url_Valid() const;

    QString getNotifyUsername() const;
    void setNotifyUsername(const QString &notify_username);
    bool is_notify_username_Set() const;
    bool is_notify_username_Valid() const;

    Q_DECL_DEPRECATED bool isSendActionHeader() const;
    Q_DECL_DEPRECATED void setSendActionHeader(const bool &send_action_header);
    Q_DECL_DEPRECATED bool is_send_action_header_Set() const;
    Q_DECL_DEPRECATED bool is_send_action_header_Valid() const;

    QString getSslProtocol() const;
    void setSslProtocol(const QString &ssl_protocol);
    bool is_ssl_protocol_Set() const;
    bool is_ssl_protocol_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_active;
    bool m_active_isSet;
    bool m_active_isValid;

    qint32 m_api_version;
    bool m_api_version_isSet;
    bool m_api_version_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<OAINotificationEventConfigurationWrapper> m_event_configs;
    bool m_event_configs_isSet;
    bool m_event_configs_isValid;

    QString m_message_format;
    bool m_message_format_isSet;
    bool m_message_format_isValid;

    qint64 m_notification_id;
    bool m_notification_id_isSet;
    bool m_notification_id_isValid;

    QString m_notify_password;
    bool m_notify_password_isSet;
    bool m_notify_password_isValid;

    QString m_notify_url;
    bool m_notify_url_isSet;
    bool m_notify_url_isValid;

    QString m_notify_username;
    bool m_notify_username_isSet;
    bool m_notify_username_isValid;

    bool m_send_action_header;
    bool m_send_action_header_isSet;
    bool m_send_action_header_isValid;

    QString m_ssl_protocol;
    bool m_ssl_protocol_isSet;
    bool m_ssl_protocol_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINotificationConfigurationDetails)

#endif // OAINotificationConfigurationDetails_H
