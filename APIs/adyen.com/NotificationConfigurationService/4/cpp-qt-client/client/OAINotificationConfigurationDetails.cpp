/**
 * Notification Configuration API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification Configuration API provides endpoints for setting up and testing notifications that inform you of events on your platform, for example when a verification check or a payout has been completed.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Notification Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Notification/v4/createNotificationConfiguration ```
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationConfigurationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationConfigurationDetails::OAINotificationConfigurationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationConfigurationDetails::OAINotificationConfigurationDetails() {
    this->initializeModel();
}

OAINotificationConfigurationDetails::~OAINotificationConfigurationDetails() {}

void OAINotificationConfigurationDetails::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_configs_isSet = false;
    m_event_configs_isValid = false;

    m_message_format_isSet = false;
    m_message_format_isValid = false;

    m_notification_id_isSet = false;
    m_notification_id_isValid = false;

    m_notify_password_isSet = false;
    m_notify_password_isValid = false;

    m_notify_url_isSet = false;
    m_notify_url_isValid = false;

    m_notify_username_isSet = false;
    m_notify_username_isValid = false;

    m_send_action_header_isSet = false;
    m_send_action_header_isValid = false;

    m_ssl_protocol_isSet = false;
    m_ssl_protocol_isValid = false;
}

void OAINotificationConfigurationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationConfigurationDetails::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("apiVersion")]);
    m_api_version_isSet = !json[QString("apiVersion")].isNull() && m_api_version_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_configs_isValid = ::OpenAPI::fromJsonValue(m_event_configs, json[QString("eventConfigs")]);
    m_event_configs_isSet = !json[QString("eventConfigs")].isNull() && m_event_configs_isValid;

    m_message_format_isValid = ::OpenAPI::fromJsonValue(m_message_format, json[QString("messageFormat")]);
    m_message_format_isSet = !json[QString("messageFormat")].isNull() && m_message_format_isValid;

    m_notification_id_isValid = ::OpenAPI::fromJsonValue(m_notification_id, json[QString("notificationId")]);
    m_notification_id_isSet = !json[QString("notificationId")].isNull() && m_notification_id_isValid;

    m_notify_password_isValid = ::OpenAPI::fromJsonValue(m_notify_password, json[QString("notifyPassword")]);
    m_notify_password_isSet = !json[QString("notifyPassword")].isNull() && m_notify_password_isValid;

    m_notify_url_isValid = ::OpenAPI::fromJsonValue(m_notify_url, json[QString("notifyURL")]);
    m_notify_url_isSet = !json[QString("notifyURL")].isNull() && m_notify_url_isValid;

    m_notify_username_isValid = ::OpenAPI::fromJsonValue(m_notify_username, json[QString("notifyUsername")]);
    m_notify_username_isSet = !json[QString("notifyUsername")].isNull() && m_notify_username_isValid;

    m_send_action_header_isValid = ::OpenAPI::fromJsonValue(m_send_action_header, json[QString("sendActionHeader")]);
    m_send_action_header_isSet = !json[QString("sendActionHeader")].isNull() && m_send_action_header_isValid;

    m_ssl_protocol_isValid = ::OpenAPI::fromJsonValue(m_ssl_protocol, json[QString("sslProtocol")]);
    m_ssl_protocol_isSet = !json[QString("sslProtocol")].isNull() && m_ssl_protocol_isValid;
}

QString OAINotificationConfigurationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationConfigurationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_api_version_isSet) {
        obj.insert(QString("apiVersion"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_configs.size() > 0) {
        obj.insert(QString("eventConfigs"), ::OpenAPI::toJsonValue(m_event_configs));
    }
    if (m_message_format_isSet) {
        obj.insert(QString("messageFormat"), ::OpenAPI::toJsonValue(m_message_format));
    }
    if (m_notification_id_isSet) {
        obj.insert(QString("notificationId"), ::OpenAPI::toJsonValue(m_notification_id));
    }
    if (m_notify_password_isSet) {
        obj.insert(QString("notifyPassword"), ::OpenAPI::toJsonValue(m_notify_password));
    }
    if (m_notify_url_isSet) {
        obj.insert(QString("notifyURL"), ::OpenAPI::toJsonValue(m_notify_url));
    }
    if (m_notify_username_isSet) {
        obj.insert(QString("notifyUsername"), ::OpenAPI::toJsonValue(m_notify_username));
    }
    if (m_send_action_header_isSet) {
        obj.insert(QString("sendActionHeader"), ::OpenAPI::toJsonValue(m_send_action_header));
    }
    if (m_ssl_protocol_isSet) {
        obj.insert(QString("sslProtocol"), ::OpenAPI::toJsonValue(m_ssl_protocol));
    }
    return obj;
}

bool OAINotificationConfigurationDetails::isActive() const {
    return m_active;
}
void OAINotificationConfigurationDetails::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAINotificationConfigurationDetails::is_active_Set() const{
    return m_active_isSet;
}

bool OAINotificationConfigurationDetails::is_active_Valid() const{
    return m_active_isValid;
}

qint32 OAINotificationConfigurationDetails::getApiVersion() const {
    return m_api_version;
}
void OAINotificationConfigurationDetails::setApiVersion(const qint32 &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAINotificationConfigurationDetails::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAINotificationConfigurationDetails::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAINotificationConfigurationDetails::getDescription() const {
    return m_description;
}
void OAINotificationConfigurationDetails::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINotificationConfigurationDetails::is_description_Set() const{
    return m_description_isSet;
}

bool OAINotificationConfigurationDetails::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAINotificationEventConfigurationWrapper> OAINotificationConfigurationDetails::getEventConfigs() const {
    return m_event_configs;
}
void OAINotificationConfigurationDetails::setEventConfigs(const QList<OAINotificationEventConfigurationWrapper> &event_configs) {
    m_event_configs = event_configs;
    m_event_configs_isSet = true;
}

bool OAINotificationConfigurationDetails::is_event_configs_Set() const{
    return m_event_configs_isSet;
}

bool OAINotificationConfigurationDetails::is_event_configs_Valid() const{
    return m_event_configs_isValid;
}

QString OAINotificationConfigurationDetails::getMessageFormat() const {
    return m_message_format;
}
void OAINotificationConfigurationDetails::setMessageFormat(const QString &message_format) {
    m_message_format = message_format;
    m_message_format_isSet = true;
}

bool OAINotificationConfigurationDetails::is_message_format_Set() const{
    return m_message_format_isSet;
}

bool OAINotificationConfigurationDetails::is_message_format_Valid() const{
    return m_message_format_isValid;
}

qint64 OAINotificationConfigurationDetails::getNotificationId() const {
    return m_notification_id;
}
void OAINotificationConfigurationDetails::setNotificationId(const qint64 &notification_id) {
    m_notification_id = notification_id;
    m_notification_id_isSet = true;
}

bool OAINotificationConfigurationDetails::is_notification_id_Set() const{
    return m_notification_id_isSet;
}

bool OAINotificationConfigurationDetails::is_notification_id_Valid() const{
    return m_notification_id_isValid;
}

QString OAINotificationConfigurationDetails::getNotifyPassword() const {
    return m_notify_password;
}
void OAINotificationConfigurationDetails::setNotifyPassword(const QString &notify_password) {
    m_notify_password = notify_password;
    m_notify_password_isSet = true;
}

bool OAINotificationConfigurationDetails::is_notify_password_Set() const{
    return m_notify_password_isSet;
}

bool OAINotificationConfigurationDetails::is_notify_password_Valid() const{
    return m_notify_password_isValid;
}

QString OAINotificationConfigurationDetails::getNotifyUrl() const {
    return m_notify_url;
}
void OAINotificationConfigurationDetails::setNotifyUrl(const QString &notify_url) {
    m_notify_url = notify_url;
    m_notify_url_isSet = true;
}

bool OAINotificationConfigurationDetails::is_notify_url_Set() const{
    return m_notify_url_isSet;
}

bool OAINotificationConfigurationDetails::is_notify_url_Valid() const{
    return m_notify_url_isValid;
}

QString OAINotificationConfigurationDetails::getNotifyUsername() const {
    return m_notify_username;
}
void OAINotificationConfigurationDetails::setNotifyUsername(const QString &notify_username) {
    m_notify_username = notify_username;
    m_notify_username_isSet = true;
}

bool OAINotificationConfigurationDetails::is_notify_username_Set() const{
    return m_notify_username_isSet;
}

bool OAINotificationConfigurationDetails::is_notify_username_Valid() const{
    return m_notify_username_isValid;
}

bool OAINotificationConfigurationDetails::isSendActionHeader() const {
    return m_send_action_header;
}
void OAINotificationConfigurationDetails::setSendActionHeader(const bool &send_action_header) {
    m_send_action_header = send_action_header;
    m_send_action_header_isSet = true;
}

bool OAINotificationConfigurationDetails::is_send_action_header_Set() const{
    return m_send_action_header_isSet;
}

bool OAINotificationConfigurationDetails::is_send_action_header_Valid() const{
    return m_send_action_header_isValid;
}

QString OAINotificationConfigurationDetails::getSslProtocol() const {
    return m_ssl_protocol;
}
void OAINotificationConfigurationDetails::setSslProtocol(const QString &ssl_protocol) {
    m_ssl_protocol = ssl_protocol;
    m_ssl_protocol_isSet = true;
}

bool OAINotificationConfigurationDetails::is_ssl_protocol_Set() const{
    return m_ssl_protocol_isSet;
}

bool OAINotificationConfigurationDetails::is_ssl_protocol_Valid() const{
    return m_ssl_protocol_isValid;
}

bool OAINotificationConfigurationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_action_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationConfigurationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
