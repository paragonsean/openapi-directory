# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotificationEventConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_type: str=None, include_mode: str=None):
        """NotificationEventConfiguration - a model defined in OpenAPI

        :param event_type: The event_type of this NotificationEventConfiguration.
        :param include_mode: The include_mode of this NotificationEventConfiguration.
        """
        self.openapi_types = {
            'event_type': str,
            'include_mode': str
        }

        self.attribute_map = {
            'event_type': 'eventType',
            'include_mode': 'includeMode'
        }

        self._event_type = event_type
        self._include_mode = include_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationEventConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationEventConfiguration of this NotificationEventConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_type(self):
        """Gets the event_type of this NotificationEventConfiguration.

        The type of event.  Possible values: **ACCOUNT_CLOSED**, **ACCOUNT_CREATED**, **ACCOUNT_FUNDS_BELOW_THRESHOLD**, **ACCOUNT_HOLDER_CREATED**, **ACCOUNT_HOLDER_LIMIT_REACHED**, **ACCOUNT_HOLDER_PAYOUT**, **ACCOUNT_HOLDER_STATUS_CHANGE**, **ACCOUNT_HOLDER_STORE_STATUS_CHANGE**, **ACCOUNT_HOLDER_UPCOMING_DEADLINE**, **ACCOUNT_HOLDER_UPDATED**, **ACCOUNT_HOLDER_VERIFICATION**, **ACCOUNT_UPDATED**, **BENEFICIARY_SETUP**, **COMPENSATE_NEGATIVE_BALANCE**, **DIRECT_DEBIT_INITIATED**, **PAYMENT_FAILURE**, **REFUND_FUNDS_TRANSFER**, **REPORT_AVAILABLE**, **SCHEDULED_REFUNDS**, **TRANSFER_FUNDS**.

        :return: The event_type of this NotificationEventConfiguration.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this NotificationEventConfiguration.

        The type of event.  Possible values: **ACCOUNT_CLOSED**, **ACCOUNT_CREATED**, **ACCOUNT_FUNDS_BELOW_THRESHOLD**, **ACCOUNT_HOLDER_CREATED**, **ACCOUNT_HOLDER_LIMIT_REACHED**, **ACCOUNT_HOLDER_PAYOUT**, **ACCOUNT_HOLDER_STATUS_CHANGE**, **ACCOUNT_HOLDER_STORE_STATUS_CHANGE**, **ACCOUNT_HOLDER_UPCOMING_DEADLINE**, **ACCOUNT_HOLDER_UPDATED**, **ACCOUNT_HOLDER_VERIFICATION**, **ACCOUNT_UPDATED**, **BENEFICIARY_SETUP**, **COMPENSATE_NEGATIVE_BALANCE**, **DIRECT_DEBIT_INITIATED**, **PAYMENT_FAILURE**, **REFUND_FUNDS_TRANSFER**, **REPORT_AVAILABLE**, **SCHEDULED_REFUNDS**, **TRANSFER_FUNDS**.

        :param event_type: The event_type of this NotificationEventConfiguration.
        :type event_type: str
        """
        allowed_values = ["ACCOUNT_CLOSED", "ACCOUNT_CREATED", "ACCOUNT_FUNDS_BELOW_THRESHOLD", "ACCOUNT_HOLDER_CREATED", "ACCOUNT_HOLDER_LIMIT_REACHED", "ACCOUNT_HOLDER_MIGRATED", "ACCOUNT_HOLDER_PAYOUT", "ACCOUNT_HOLDER_STATUS_CHANGE", "ACCOUNT_HOLDER_STORE_STATUS_CHANGE", "ACCOUNT_HOLDER_UPCOMING_DEADLINE", "ACCOUNT_HOLDER_UPDATED", "ACCOUNT_HOLDER_VERIFICATION", "ACCOUNT_UPDATED", "BENEFICIARY_SETUP", "COMPENSATE_NEGATIVE_BALANCE", "DIRECT_DEBIT_INITIATED", "FUNDS_MIGRATED", "PAYMENT_FAILURE", "PENDING_CREDIT", "REFUND_FUNDS_TRANSFER", "REPORT_AVAILABLE", "SCHEDULED_REFUNDS", "SCORE_SIGNAL_TRIGGERED", "TRANSFER_FUNDS", "TRANSFER_NOT_PAIDOUT_TRANSFERS"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def include_mode(self):
        """Gets the include_mode of this NotificationEventConfiguration.

        Indicates whether the specified `eventType` is sent to your webhook endpoint. Possible values: * **INCLUDE**: Send the specified `eventType`. * **EXCLUDE**: Send all event types except the specified `eventType` and other event types with the `includeMode` set to **EXCLUDE**.

        :return: The include_mode of this NotificationEventConfiguration.
        :rtype: str
        """
        return self._include_mode

    @include_mode.setter
    def include_mode(self, include_mode):
        """Sets the include_mode of this NotificationEventConfiguration.

        Indicates whether the specified `eventType` is sent to your webhook endpoint. Possible values: * **INCLUDE**: Send the specified `eventType`. * **EXCLUDE**: Send all event types except the specified `eventType` and other event types with the `includeMode` set to **EXCLUDE**.

        :param include_mode: The include_mode of this NotificationEventConfiguration.
        :type include_mode: str
        """
        allowed_values = ["EXCLUDE", "INCLUDE"]  # noqa: E501
        if include_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `include_mode` ({0}), must be one of {1}"
                .format(include_mode, allowed_values)
            )

        self._include_mode = include_mode
