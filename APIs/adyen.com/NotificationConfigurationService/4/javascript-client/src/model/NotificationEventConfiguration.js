/**
 * Notification Configuration API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification Configuration API provides endpoints for setting up and testing notifications that inform you of events on your platform, for example when a verification check or a payout has been completed.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Notification Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Notification/v4/createNotificationConfiguration ```
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotificationEventConfiguration model module.
 * @module model/NotificationEventConfiguration
 * @version 4
 */
class NotificationEventConfiguration {
    /**
     * Constructs a new <code>NotificationEventConfiguration</code>.
     * @alias module:model/NotificationEventConfiguration
     * @param eventType {module:model/NotificationEventConfiguration.EventTypeEnum} The type of event.  Possible values: **ACCOUNT_CLOSED**, **ACCOUNT_CREATED**, **ACCOUNT_FUNDS_BELOW_THRESHOLD**, **ACCOUNT_HOLDER_CREATED**, **ACCOUNT_HOLDER_LIMIT_REACHED**, **ACCOUNT_HOLDER_PAYOUT**, **ACCOUNT_HOLDER_STATUS_CHANGE**, **ACCOUNT_HOLDER_STORE_STATUS_CHANGE**, **ACCOUNT_HOLDER_UPCOMING_DEADLINE**, **ACCOUNT_HOLDER_UPDATED**, **ACCOUNT_HOLDER_VERIFICATION**, **ACCOUNT_UPDATED**, **BENEFICIARY_SETUP**, **COMPENSATE_NEGATIVE_BALANCE**, **DIRECT_DEBIT_INITIATED**, **PAYMENT_FAILURE**, **REFUND_FUNDS_TRANSFER**, **REPORT_AVAILABLE**, **SCHEDULED_REFUNDS**, **TRANSFER_FUNDS**.
     * @param includeMode {module:model/NotificationEventConfiguration.IncludeModeEnum} Indicates whether the specified `eventType` is sent to your webhook endpoint. Possible values: * **INCLUDE**: Send the specified `eventType`. * **EXCLUDE**: Send all event types except the specified `eventType` and other event types with the `includeMode` set to **EXCLUDE**.
     */
    constructor(eventType, includeMode) { 
        
        NotificationEventConfiguration.initialize(this, eventType, includeMode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventType, includeMode) { 
        obj['eventType'] = eventType;
        obj['includeMode'] = includeMode;
    }

    /**
     * Constructs a <code>NotificationEventConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationEventConfiguration} obj Optional instance to populate.
     * @return {module:model/NotificationEventConfiguration} The populated <code>NotificationEventConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationEventConfiguration();

            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('includeMode')) {
                obj['includeMode'] = ApiClient.convertToType(data['includeMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationEventConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationEventConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NotificationEventConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['eventType'] && !(typeof data['eventType'] === 'string' || data['eventType'] instanceof String)) {
            throw new Error("Expected the field `eventType` to be a primitive type in the JSON string but got " + data['eventType']);
        }
        // ensure the json data is a string
        if (data['includeMode'] && !(typeof data['includeMode'] === 'string' || data['includeMode'] instanceof String)) {
            throw new Error("Expected the field `includeMode` to be a primitive type in the JSON string but got " + data['includeMode']);
        }

        return true;
    }


}

NotificationEventConfiguration.RequiredProperties = ["eventType", "includeMode"];

/**
 * The type of event.  Possible values: **ACCOUNT_CLOSED**, **ACCOUNT_CREATED**, **ACCOUNT_FUNDS_BELOW_THRESHOLD**, **ACCOUNT_HOLDER_CREATED**, **ACCOUNT_HOLDER_LIMIT_REACHED**, **ACCOUNT_HOLDER_PAYOUT**, **ACCOUNT_HOLDER_STATUS_CHANGE**, **ACCOUNT_HOLDER_STORE_STATUS_CHANGE**, **ACCOUNT_HOLDER_UPCOMING_DEADLINE**, **ACCOUNT_HOLDER_UPDATED**, **ACCOUNT_HOLDER_VERIFICATION**, **ACCOUNT_UPDATED**, **BENEFICIARY_SETUP**, **COMPENSATE_NEGATIVE_BALANCE**, **DIRECT_DEBIT_INITIATED**, **PAYMENT_FAILURE**, **REFUND_FUNDS_TRANSFER**, **REPORT_AVAILABLE**, **SCHEDULED_REFUNDS**, **TRANSFER_FUNDS**.
 * @member {module:model/NotificationEventConfiguration.EventTypeEnum} eventType
 */
NotificationEventConfiguration.prototype['eventType'] = undefined;

/**
 * Indicates whether the specified `eventType` is sent to your webhook endpoint. Possible values: * **INCLUDE**: Send the specified `eventType`. * **EXCLUDE**: Send all event types except the specified `eventType` and other event types with the `includeMode` set to **EXCLUDE**.
 * @member {module:model/NotificationEventConfiguration.IncludeModeEnum} includeMode
 */
NotificationEventConfiguration.prototype['includeMode'] = undefined;





/**
 * Allowed values for the <code>eventType</code> property.
 * @enum {String}
 * @readonly
 */
NotificationEventConfiguration['EventTypeEnum'] = {

    /**
     * value: "ACCOUNT_CLOSED"
     * @const
     */
    "ACCOUNT_CLOSED": "ACCOUNT_CLOSED",

    /**
     * value: "ACCOUNT_CREATED"
     * @const
     */
    "ACCOUNT_CREATED": "ACCOUNT_CREATED",

    /**
     * value: "ACCOUNT_FUNDS_BELOW_THRESHOLD"
     * @const
     */
    "ACCOUNT_FUNDS_BELOW_THRESHOLD": "ACCOUNT_FUNDS_BELOW_THRESHOLD",

    /**
     * value: "ACCOUNT_HOLDER_CREATED"
     * @const
     */
    "ACCOUNT_HOLDER_CREATED": "ACCOUNT_HOLDER_CREATED",

    /**
     * value: "ACCOUNT_HOLDER_LIMIT_REACHED"
     * @const
     */
    "ACCOUNT_HOLDER_LIMIT_REACHED": "ACCOUNT_HOLDER_LIMIT_REACHED",

    /**
     * value: "ACCOUNT_HOLDER_MIGRATED"
     * @const
     */
    "ACCOUNT_HOLDER_MIGRATED": "ACCOUNT_HOLDER_MIGRATED",

    /**
     * value: "ACCOUNT_HOLDER_PAYOUT"
     * @const
     */
    "ACCOUNT_HOLDER_PAYOUT": "ACCOUNT_HOLDER_PAYOUT",

    /**
     * value: "ACCOUNT_HOLDER_STATUS_CHANGE"
     * @const
     */
    "ACCOUNT_HOLDER_STATUS_CHANGE": "ACCOUNT_HOLDER_STATUS_CHANGE",

    /**
     * value: "ACCOUNT_HOLDER_STORE_STATUS_CHANGE"
     * @const
     */
    "ACCOUNT_HOLDER_STORE_STATUS_CHANGE": "ACCOUNT_HOLDER_STORE_STATUS_CHANGE",

    /**
     * value: "ACCOUNT_HOLDER_UPCOMING_DEADLINE"
     * @const
     */
    "ACCOUNT_HOLDER_UPCOMING_DEADLINE": "ACCOUNT_HOLDER_UPCOMING_DEADLINE",

    /**
     * value: "ACCOUNT_HOLDER_UPDATED"
     * @const
     */
    "ACCOUNT_HOLDER_UPDATED": "ACCOUNT_HOLDER_UPDATED",

    /**
     * value: "ACCOUNT_HOLDER_VERIFICATION"
     * @const
     */
    "ACCOUNT_HOLDER_VERIFICATION": "ACCOUNT_HOLDER_VERIFICATION",

    /**
     * value: "ACCOUNT_UPDATED"
     * @const
     */
    "ACCOUNT_UPDATED": "ACCOUNT_UPDATED",

    /**
     * value: "BENEFICIARY_SETUP"
     * @const
     */
    "BENEFICIARY_SETUP": "BENEFICIARY_SETUP",

    /**
     * value: "COMPENSATE_NEGATIVE_BALANCE"
     * @const
     */
    "COMPENSATE_NEGATIVE_BALANCE": "COMPENSATE_NEGATIVE_BALANCE",

    /**
     * value: "DIRECT_DEBIT_INITIATED"
     * @const
     */
    "DIRECT_DEBIT_INITIATED": "DIRECT_DEBIT_INITIATED",

    /**
     * value: "FUNDS_MIGRATED"
     * @const
     */
    "FUNDS_MIGRATED": "FUNDS_MIGRATED",

    /**
     * value: "PAYMENT_FAILURE"
     * @const
     */
    "PAYMENT_FAILURE": "PAYMENT_FAILURE",

    /**
     * value: "PENDING_CREDIT"
     * @const
     */
    "PENDING_CREDIT": "PENDING_CREDIT",

    /**
     * value: "REFUND_FUNDS_TRANSFER"
     * @const
     */
    "REFUND_FUNDS_TRANSFER": "REFUND_FUNDS_TRANSFER",

    /**
     * value: "REPORT_AVAILABLE"
     * @const
     */
    "REPORT_AVAILABLE": "REPORT_AVAILABLE",

    /**
     * value: "SCHEDULED_REFUNDS"
     * @const
     */
    "SCHEDULED_REFUNDS": "SCHEDULED_REFUNDS",

    /**
     * value: "SCORE_SIGNAL_TRIGGERED"
     * @const
     */
    "SCORE_SIGNAL_TRIGGERED": "SCORE_SIGNAL_TRIGGERED",

    /**
     * value: "TRANSFER_FUNDS"
     * @const
     */
    "TRANSFER_FUNDS": "TRANSFER_FUNDS",

    /**
     * value: "TRANSFER_NOT_PAIDOUT_TRANSFERS"
     * @const
     */
    "TRANSFER_NOT_PAIDOUT_TRANSFERS": "TRANSFER_NOT_PAIDOUT_TRANSFERS"
};


/**
 * Allowed values for the <code>includeMode</code> property.
 * @enum {String}
 * @readonly
 */
NotificationEventConfiguration['IncludeModeEnum'] = {

    /**
     * value: "EXCLUDE"
     * @const
     */
    "EXCLUDE": "EXCLUDE",

    /**
     * value: "INCLUDE"
     * @const
     */
    "INCLUDE": "INCLUDE"
};



export default NotificationEventConfiguration;

