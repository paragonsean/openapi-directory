/**
 * Notification Configuration API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification Configuration API provides endpoints for setting up and testing notifications that inform you of events on your platform, for example when a verification check or a payout has been completed.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Notification Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Notification/v4/createNotificationConfiguration ```
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateNotificationConfigurationRequest from '../model/CreateNotificationConfigurationRequest';
import DeleteNotificationConfigurationRequest from '../model/DeleteNotificationConfigurationRequest';
import GenericResponse from '../model/GenericResponse';
import GetNotificationConfigurationListResponse from '../model/GetNotificationConfigurationListResponse';
import GetNotificationConfigurationRequest from '../model/GetNotificationConfigurationRequest';
import GetNotificationConfigurationResponse from '../model/GetNotificationConfigurationResponse';
import ServiceError from '../model/ServiceError';
import TestNotificationConfigurationRequest from '../model/TestNotificationConfigurationRequest';
import TestNotificationConfigurationResponse from '../model/TestNotificationConfigurationResponse';
import UpdateNotificationConfigurationRequest from '../model/UpdateNotificationConfigurationRequest';

/**
* General service.
* @module api/GeneralApi
* @version 4
*/
export default class GeneralApi {

    /**
    * Constructs a new GeneralApi. 
    * @alias module:api/GeneralApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postCreateNotificationConfiguration operation.
     * @callback module:api/GeneralApi~postCreateNotificationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNotificationConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to notifications
     * Creates a subscription to notifications informing you of events on your platform. After the subscription is created, the events specified in the configuration will be sent to the URL specified in the configuration. Subscriptions must be configured on a per-event basis (as opposed to, for example, a per-account holder basis), so all event notifications of a marketplace and of a given type will be sent to the same endpoint(s). A marketplace may have multiple endpoints if desired; an event notification may be sent to as many or as few different endpoints as configured.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateNotificationConfigurationRequest} [createNotificationConfigurationRequest] 
     * @param {module:api/GeneralApi~postCreateNotificationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNotificationConfigurationResponse}
     */
    postCreateNotificationConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = opts['createNotificationConfigurationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNotificationConfigurationResponse;
      return this.apiClient.callApi(
        '/createNotificationConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDeleteNotificationConfigurations operation.
     * @callback module:api/GeneralApi~postDeleteNotificationConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a notification subscription configuration
     * Deletes an existing notification subscription configuration. After the subscription is deleted, no further event notifications will be sent to the URL defined in the subscription.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteNotificationConfigurationRequest} [deleteNotificationConfigurationRequest] 
     * @param {module:api/GeneralApi~postDeleteNotificationConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericResponse}
     */
    postDeleteNotificationConfigurations(opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteNotificationConfigurationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenericResponse;
      return this.apiClient.callApi(
        '/deleteNotificationConfigurations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postGetNotificationConfiguration operation.
     * @callback module:api/GeneralApi~postGetNotificationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNotificationConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a notification subscription configuration
     * Returns the details of the configuration of a notification subscription.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetNotificationConfigurationRequest} [getNotificationConfigurationRequest] 
     * @param {module:api/GeneralApi~postGetNotificationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNotificationConfigurationResponse}
     */
    postGetNotificationConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = opts['getNotificationConfigurationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNotificationConfigurationResponse;
      return this.apiClient.callApi(
        '/getNotificationConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postGetNotificationConfigurationList operation.
     * @callback module:api/GeneralApi~postGetNotificationConfigurationListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNotificationConfigurationListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of notification subscription configurations
     * Returns the details of the configurations of all of the notification subscriptions in the platform of the executing user.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/GeneralApi~postGetNotificationConfigurationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNotificationConfigurationListResponse}
     */
    postGetNotificationConfigurationList(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNotificationConfigurationListResponse;
      return this.apiClient.callApi(
        '/getNotificationConfigurationList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTestNotificationConfiguration operation.
     * @callback module:api/GeneralApi~postTestNotificationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestNotificationConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test a notification configuration
     * Tests an existing notification subscription configuration. For each event type specified, a test notification will be generated and sent to the URL configured in the subscription specified.
     * @param {Object} opts Optional parameters
     * @param {module:model/TestNotificationConfigurationRequest} [testNotificationConfigurationRequest] 
     * @param {module:api/GeneralApi~postTestNotificationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestNotificationConfigurationResponse}
     */
    postTestNotificationConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = opts['testNotificationConfigurationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestNotificationConfigurationResponse;
      return this.apiClient.callApi(
        '/testNotificationConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUpdateNotificationConfiguration operation.
     * @callback module:api/GeneralApi~postUpdateNotificationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNotificationConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a notification subscription configuration
     * Updates an existing notification subscription configuration. If you are updating the event types, you must provide all event types, otherwise the previous event type configuration will be overwritten.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNotificationConfigurationRequest} [updateNotificationConfigurationRequest] 
     * @param {module:api/GeneralApi~postUpdateNotificationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNotificationConfigurationResponse}
     */
    postUpdateNotificationConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNotificationConfigurationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNotificationConfigurationResponse;
      return this.apiClient.callApi(
        '/updateNotificationConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
