/**
 * Notification Configuration API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification Configuration API provides endpoints for setting up and testing notifications that inform you of events on your platform, for example when a verification check or a payout has been completed.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Notification Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Notification/v5/createNotificationConfiguration ```
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGeneralApi_H
#define OAI_OAIGeneralApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNotificationConfigurationRequest.h"
#include "OAIDeleteNotificationConfigurationRequest.h"
#include "OAIGenericResponse.h"
#include "OAIGetNotificationConfigurationListResponse.h"
#include "OAIGetNotificationConfigurationRequest.h"
#include "OAIGetNotificationConfigurationResponse.h"
#include "OAIObject.h"
#include "OAIServiceError.h"
#include "OAITestNotificationConfigurationRequest.h"
#include "OAITestNotificationConfigurationResponse.h"
#include "OAIUpdateNotificationConfigurationRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGeneralApi : public QObject {
    Q_OBJECT

public:
    OAIGeneralApi(const int timeOut = 0);
    ~OAIGeneralApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_notification_configuration_request OAICreateNotificationConfigurationRequest [optional]
    */
    virtual void postCreateNotificationConfiguration(const ::OpenAPI::OptionalParam<OAICreateNotificationConfigurationRequest> &oai_create_notification_configuration_request = ::OpenAPI::OptionalParam<OAICreateNotificationConfigurationRequest>());

    /**
    * @param[in]  oai_delete_notification_configuration_request OAIDeleteNotificationConfigurationRequest [optional]
    */
    virtual void postDeleteNotificationConfigurations(const ::OpenAPI::OptionalParam<OAIDeleteNotificationConfigurationRequest> &oai_delete_notification_configuration_request = ::OpenAPI::OptionalParam<OAIDeleteNotificationConfigurationRequest>());

    /**
    * @param[in]  oai_get_notification_configuration_request OAIGetNotificationConfigurationRequest [optional]
    */
    virtual void postGetNotificationConfiguration(const ::OpenAPI::OptionalParam<OAIGetNotificationConfigurationRequest> &oai_get_notification_configuration_request = ::OpenAPI::OptionalParam<OAIGetNotificationConfigurationRequest>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void postGetNotificationConfigurationList(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  oai_test_notification_configuration_request OAITestNotificationConfigurationRequest [optional]
    */
    virtual void postTestNotificationConfiguration(const ::OpenAPI::OptionalParam<OAITestNotificationConfigurationRequest> &oai_test_notification_configuration_request = ::OpenAPI::OptionalParam<OAITestNotificationConfigurationRequest>());

    /**
    * @param[in]  oai_update_notification_configuration_request OAIUpdateNotificationConfigurationRequest [optional]
    */
    virtual void postUpdateNotificationConfiguration(const ::OpenAPI::OptionalParam<OAIUpdateNotificationConfigurationRequest> &oai_update_notification_configuration_request = ::OpenAPI::OptionalParam<OAIUpdateNotificationConfigurationRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postCreateNotificationConfigurationCallback(OAIHttpRequestWorker *worker);
    void postDeleteNotificationConfigurationsCallback(OAIHttpRequestWorker *worker);
    void postGetNotificationConfigurationCallback(OAIHttpRequestWorker *worker);
    void postGetNotificationConfigurationListCallback(OAIHttpRequestWorker *worker);
    void postTestNotificationConfigurationCallback(OAIHttpRequestWorker *worker);
    void postUpdateNotificationConfigurationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postCreateNotificationConfigurationSignal(OAIGetNotificationConfigurationResponse summary);
    void postDeleteNotificationConfigurationsSignal(OAIGenericResponse summary);
    void postGetNotificationConfigurationSignal(OAIGetNotificationConfigurationResponse summary);
    void postGetNotificationConfigurationListSignal(OAIGetNotificationConfigurationListResponse summary);
    void postTestNotificationConfigurationSignal(OAITestNotificationConfigurationResponse summary);
    void postUpdateNotificationConfigurationSignal(OAIGetNotificationConfigurationResponse summary);


    void postCreateNotificationConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIGetNotificationConfigurationResponse summary);
    void postDeleteNotificationConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAIGenericResponse summary);
    void postGetNotificationConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIGetNotificationConfigurationResponse summary);
    void postGetNotificationConfigurationListSignalFull(OAIHttpRequestWorker *worker, OAIGetNotificationConfigurationListResponse summary);
    void postTestNotificationConfigurationSignalFull(OAIHttpRequestWorker *worker, OAITestNotificationConfigurationResponse summary);
    void postUpdateNotificationConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIGetNotificationConfigurationResponse summary);

    Q_DECL_DEPRECATED_X("Use postCreateNotificationConfigurationSignalError() instead")
    void postCreateNotificationConfigurationSignalE(OAIGetNotificationConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCreateNotificationConfigurationSignalError(OAIGetNotificationConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDeleteNotificationConfigurationsSignalError() instead")
    void postDeleteNotificationConfigurationsSignalE(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDeleteNotificationConfigurationsSignalError(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetNotificationConfigurationSignalError() instead")
    void postGetNotificationConfigurationSignalE(OAIGetNotificationConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetNotificationConfigurationSignalError(OAIGetNotificationConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetNotificationConfigurationListSignalError() instead")
    void postGetNotificationConfigurationListSignalE(OAIGetNotificationConfigurationListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetNotificationConfigurationListSignalError(OAIGetNotificationConfigurationListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTestNotificationConfigurationSignalError() instead")
    void postTestNotificationConfigurationSignalE(OAITestNotificationConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTestNotificationConfigurationSignalError(OAITestNotificationConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUpdateNotificationConfigurationSignalError() instead")
    void postUpdateNotificationConfigurationSignalE(OAIGetNotificationConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUpdateNotificationConfigurationSignalError(OAIGetNotificationConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postCreateNotificationConfigurationSignalErrorFull() instead")
    void postCreateNotificationConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCreateNotificationConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDeleteNotificationConfigurationsSignalErrorFull() instead")
    void postDeleteNotificationConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDeleteNotificationConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetNotificationConfigurationSignalErrorFull() instead")
    void postGetNotificationConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetNotificationConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetNotificationConfigurationListSignalErrorFull() instead")
    void postGetNotificationConfigurationListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetNotificationConfigurationListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTestNotificationConfigurationSignalErrorFull() instead")
    void postTestNotificationConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTestNotificationConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUpdateNotificationConfigurationSignalErrorFull() instead")
    void postUpdateNotificationConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUpdateNotificationConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
