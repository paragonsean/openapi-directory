/**
 * Notification Configuration API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification Configuration API provides endpoints for setting up and testing notifications that inform you of events on your platform, for example when a verification check or a payout has been completed.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Notification Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Notification/v5/createNotificationConfiguration ```
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldType from './FieldType';

/**
 * The ErrorFieldType model module.
 * @module model/ErrorFieldType
 * @version 5
 */
class ErrorFieldType {
    /**
     * Constructs a new <code>ErrorFieldType</code>.
     * @alias module:model/ErrorFieldType
     */
    constructor() { 
        
        ErrorFieldType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ErrorFieldType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorFieldType} obj Optional instance to populate.
     * @return {module:model/ErrorFieldType} The populated <code>ErrorFieldType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorFieldType();

            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], 'Number');
            }
            if (data.hasOwnProperty('errorDescription')) {
                obj['errorDescription'] = ApiClient.convertToType(data['errorDescription'], 'String');
            }
            if (data.hasOwnProperty('fieldType')) {
                obj['fieldType'] = FieldType.constructFromObject(data['fieldType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorFieldType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorFieldType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['errorDescription'] && !(typeof data['errorDescription'] === 'string' || data['errorDescription'] instanceof String)) {
            throw new Error("Expected the field `errorDescription` to be a primitive type in the JSON string but got " + data['errorDescription']);
        }
        // validate the optional field `fieldType`
        if (data['fieldType']) { // data not null
          FieldType.validateJSON(data['fieldType']);
        }

        return true;
    }


}



/**
 * The validation error code.
 * @member {Number} errorCode
 */
ErrorFieldType.prototype['errorCode'] = undefined;

/**
 * A description of the validation error.
 * @member {String} errorDescription
 */
ErrorFieldType.prototype['errorDescription'] = undefined;

/**
 * The type of error field.
 * @member {module:model/FieldType} fieldType
 */
ErrorFieldType.prototype['fieldType'] = undefined;






export default ErrorFieldType;

