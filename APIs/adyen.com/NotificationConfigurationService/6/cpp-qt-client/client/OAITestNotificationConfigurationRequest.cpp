/**
 * Notification Configuration API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification Configuration API provides endpoints for setting up and testing notifications that inform you of events on your platform, for example when a verification check or a payout has been completed.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Notification Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Notification/v6/createNotificationConfiguration ```
 *
 * The version of the OpenAPI document: 6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestNotificationConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestNotificationConfigurationRequest::OAITestNotificationConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestNotificationConfigurationRequest::OAITestNotificationConfigurationRequest() {
    this->initializeModel();
}

OAITestNotificationConfigurationRequest::~OAITestNotificationConfigurationRequest() {}

void OAITestNotificationConfigurationRequest::initializeModel() {

    m_event_types_isSet = false;
    m_event_types_isValid = false;

    m_notification_id_isSet = false;
    m_notification_id_isValid = false;
}

void OAITestNotificationConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestNotificationConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_event_types_isValid = ::OpenAPI::fromJsonValue(m_event_types, json[QString("eventTypes")]);
    m_event_types_isSet = !json[QString("eventTypes")].isNull() && m_event_types_isValid;

    m_notification_id_isValid = ::OpenAPI::fromJsonValue(m_notification_id, json[QString("notificationId")]);
    m_notification_id_isSet = !json[QString("notificationId")].isNull() && m_notification_id_isValid;
}

QString OAITestNotificationConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestNotificationConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_event_types.size() > 0) {
        obj.insert(QString("eventTypes"), ::OpenAPI::toJsonValue(m_event_types));
    }
    if (m_notification_id_isSet) {
        obj.insert(QString("notificationId"), ::OpenAPI::toJsonValue(m_notification_id));
    }
    return obj;
}

QList<QString> OAITestNotificationConfigurationRequest::getEventTypes() const {
    return m_event_types;
}
void OAITestNotificationConfigurationRequest::setEventTypes(const QList<QString> &event_types) {
    m_event_types = event_types;
    m_event_types_isSet = true;
}

bool OAITestNotificationConfigurationRequest::is_event_types_Set() const{
    return m_event_types_isSet;
}

bool OAITestNotificationConfigurationRequest::is_event_types_Valid() const{
    return m_event_types_isValid;
}

qint64 OAITestNotificationConfigurationRequest::getNotificationId() const {
    return m_notification_id;
}
void OAITestNotificationConfigurationRequest::setNotificationId(const qint64 &notification_id) {
    m_notification_id = notification_id;
    m_notification_id_isSet = true;
}

bool OAITestNotificationConfigurationRequest::is_notification_id_Set() const{
    return m_notification_id_isSet;
}

bool OAITestNotificationConfigurationRequest::is_notification_id_Valid() const{
    return m_notification_id_isValid;
}

bool OAITestNotificationConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestNotificationConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_notification_id_isValid && true;
}

} // namespace OpenAPI
