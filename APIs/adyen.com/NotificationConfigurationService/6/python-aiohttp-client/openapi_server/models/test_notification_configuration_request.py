# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestNotificationConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_types: List[str]=None, notification_id: int=None):
        """TestNotificationConfigurationRequest - a model defined in OpenAPI

        :param event_types: The event_types of this TestNotificationConfigurationRequest.
        :param notification_id: The notification_id of this TestNotificationConfigurationRequest.
        """
        self.openapi_types = {
            'event_types': List[str],
            'notification_id': int
        }

        self.attribute_map = {
            'event_types': 'eventTypes',
            'notification_id': 'notificationId'
        }

        self._event_types = event_types
        self._notification_id = notification_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestNotificationConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestNotificationConfigurationRequest of this TestNotificationConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_types(self):
        """Gets the event_types of this TestNotificationConfigurationRequest.

        The event types to test.  If left blank, then all of the configured event types will be tested. >Permitted values: `ACCOUNT_HOLDER_CREATED`, `ACCOUNT_CREATED`, `ACCOUNT_UPDATED`, `ACCOUNT_HOLDER_UPDATED`, `ACCOUNT_HOLDER_STATUS_CHANGE`, `ACCOUNT_HOLDER_STORE_STATUS_CHANGE` `ACCOUNT_HOLDER_VERIFICATION`, `ACCOUNT_HOLDER_LIMIT_REACHED`, `ACCOUNT_HOLDER_PAYOUT`, `PAYMENT_FAILURE`, `SCHEDULED_REFUNDS`, `REPORT_AVAILABLE`, `TRANSFER_FUNDS`, `BENEFICIARY_SETUP`, `COMPENSATE_NEGATIVE_BALANCE`.

        :return: The event_types of this TestNotificationConfigurationRequest.
        :rtype: List[str]
        """
        return self._event_types

    @event_types.setter
    def event_types(self, event_types):
        """Sets the event_types of this TestNotificationConfigurationRequest.

        The event types to test.  If left blank, then all of the configured event types will be tested. >Permitted values: `ACCOUNT_HOLDER_CREATED`, `ACCOUNT_CREATED`, `ACCOUNT_UPDATED`, `ACCOUNT_HOLDER_UPDATED`, `ACCOUNT_HOLDER_STATUS_CHANGE`, `ACCOUNT_HOLDER_STORE_STATUS_CHANGE` `ACCOUNT_HOLDER_VERIFICATION`, `ACCOUNT_HOLDER_LIMIT_REACHED`, `ACCOUNT_HOLDER_PAYOUT`, `PAYMENT_FAILURE`, `SCHEDULED_REFUNDS`, `REPORT_AVAILABLE`, `TRANSFER_FUNDS`, `BENEFICIARY_SETUP`, `COMPENSATE_NEGATIVE_BALANCE`.

        :param event_types: The event_types of this TestNotificationConfigurationRequest.
        :type event_types: List[str]
        """
        allowed_values = ["ACCOUNT_CLOSED", "ACCOUNT_CREATED", "ACCOUNT_FUNDS_BELOW_THRESHOLD", "ACCOUNT_HOLDER_CREATED", "ACCOUNT_HOLDER_LIMIT_REACHED", "ACCOUNT_HOLDER_MIGRATED", "ACCOUNT_HOLDER_PAYOUT", "ACCOUNT_HOLDER_STATUS_CHANGE", "ACCOUNT_HOLDER_STORE_STATUS_CHANGE", "ACCOUNT_HOLDER_UPCOMING_DEADLINE", "ACCOUNT_HOLDER_UPDATED", "ACCOUNT_HOLDER_VERIFICATION", "ACCOUNT_UPDATED", "BENEFICIARY_SETUP", "COMPENSATE_NEGATIVE_BALANCE", "DIRECT_DEBIT_INITIATED", "FUNDS_MIGRATED", "PAYMENT_FAILURE", "PENDING_CREDIT", "REFUND_FUNDS_TRANSFER", "REPORT_AVAILABLE", "SCHEDULED_REFUNDS", "SCORE_SIGNAL_TRIGGERED", "TRANSFER_FUNDS", "TRANSFER_NOT_PAIDOUT_TRANSFERS"]  # noqa: E501
        if not set(event_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `event_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(event_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._event_types = event_types

    @property
    def notification_id(self):
        """Gets the notification_id of this TestNotificationConfigurationRequest.

        The ID of the notification subscription configuration to be tested.

        :return: The notification_id of this TestNotificationConfigurationRequest.
        :rtype: int
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this TestNotificationConfigurationRequest.

        The ID of the notification subscription configuration to be tested.

        :param notification_id: The notification_id of this TestNotificationConfigurationRequest.
        :type notification_id: int
        """
        if notification_id is None:
            raise ValueError("Invalid value for `notification_id`, must not be `None`")

        self._notification_id = notification_id
