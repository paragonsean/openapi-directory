# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_event_configuration import NotificationEventConfiguration
from openapi_server import util


class NotificationConfigurationDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, api_version: int=None, description: str=None, event_configs: List[NotificationEventConfiguration]=None, hmac_signature_key: str=None, notification_id: int=None, notify_password: str=None, notify_url: str=None, notify_username: str=None, ssl_protocol: str=None):
        """NotificationConfigurationDetails - a model defined in OpenAPI

        :param active: The active of this NotificationConfigurationDetails.
        :param api_version: The api_version of this NotificationConfigurationDetails.
        :param description: The description of this NotificationConfigurationDetails.
        :param event_configs: The event_configs of this NotificationConfigurationDetails.
        :param hmac_signature_key: The hmac_signature_key of this NotificationConfigurationDetails.
        :param notification_id: The notification_id of this NotificationConfigurationDetails.
        :param notify_password: The notify_password of this NotificationConfigurationDetails.
        :param notify_url: The notify_url of this NotificationConfigurationDetails.
        :param notify_username: The notify_username of this NotificationConfigurationDetails.
        :param ssl_protocol: The ssl_protocol of this NotificationConfigurationDetails.
        """
        self.openapi_types = {
            'active': bool,
            'api_version': int,
            'description': str,
            'event_configs': List[NotificationEventConfiguration],
            'hmac_signature_key': str,
            'notification_id': int,
            'notify_password': str,
            'notify_url': str,
            'notify_username': str,
            'ssl_protocol': str
        }

        self.attribute_map = {
            'active': 'active',
            'api_version': 'apiVersion',
            'description': 'description',
            'event_configs': 'eventConfigs',
            'hmac_signature_key': 'hmacSignatureKey',
            'notification_id': 'notificationId',
            'notify_password': 'notifyPassword',
            'notify_url': 'notifyURL',
            'notify_username': 'notifyUsername',
            'ssl_protocol': 'sslProtocol'
        }

        self._active = active
        self._api_version = api_version
        self._description = description
        self._event_configs = event_configs
        self._hmac_signature_key = hmac_signature_key
        self._notification_id = notification_id
        self._notify_password = notify_password
        self._notify_url = notify_url
        self._notify_username = notify_username
        self._ssl_protocol = ssl_protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationConfigurationDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationConfigurationDetails of this NotificationConfigurationDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this NotificationConfigurationDetails.

        Indicates whether the notification subscription is active.

        :return: The active of this NotificationConfigurationDetails.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this NotificationConfigurationDetails.

        Indicates whether the notification subscription is active.

        :param active: The active of this NotificationConfigurationDetails.
        :type active: bool
        """

        self._active = active

    @property
    def api_version(self):
        """Gets the api_version of this NotificationConfigurationDetails.

        The version of the notification to which you are subscribing. To make sure that your integration can properly process the notification, subscribe to the same version as the API that you're using.

        :return: The api_version of this NotificationConfigurationDetails.
        :rtype: int
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this NotificationConfigurationDetails.

        The version of the notification to which you are subscribing. To make sure that your integration can properly process the notification, subscribe to the same version as the API that you're using.

        :param api_version: The api_version of this NotificationConfigurationDetails.
        :type api_version: int
        """

        self._api_version = api_version

    @property
    def description(self):
        """Gets the description of this NotificationConfigurationDetails.

        A description of the notification subscription configuration.

        :return: The description of this NotificationConfigurationDetails.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NotificationConfigurationDetails.

        A description of the notification subscription configuration.

        :param description: The description of this NotificationConfigurationDetails.
        :type description: str
        """

        self._description = description

    @property
    def event_configs(self):
        """Gets the event_configs of this NotificationConfigurationDetails.

        Contains objects that define event types and their subscription settings.

        :return: The event_configs of this NotificationConfigurationDetails.
        :rtype: List[NotificationEventConfiguration]
        """
        return self._event_configs

    @event_configs.setter
    def event_configs(self, event_configs):
        """Sets the event_configs of this NotificationConfigurationDetails.

        Contains objects that define event types and their subscription settings.

        :param event_configs: The event_configs of this NotificationConfigurationDetails.
        :type event_configs: List[NotificationEventConfiguration]
        """

        self._event_configs = event_configs

    @property
    def hmac_signature_key(self):
        """Gets the hmac_signature_key of this NotificationConfigurationDetails.

        A string with which to salt the notification(s) before hashing. If this field is provided, a hash value will be included under the notification header `HmacSignature` and the hash protocol will be included under the notification header `Protocol`. A notification body along with its `hmacSignatureKey` and `Protocol` can be used to calculate a hash value; matching this hash value with the `HmacSignature` will ensure that the notification body has not been tampered with or corrupted.  >Must be a 32-byte hex-encoded string (i.e. a string containing 64 hexadecimal characters; e.g. \"b0ea55c2fe60d4d1d605e9c385e0e7f7e6cafbb939ce07010f31a327a0871f27\").  The omission of this field will preclude the provision of the `HmacSignature` and `Protocol` headers in notification(s).

        :return: The hmac_signature_key of this NotificationConfigurationDetails.
        :rtype: str
        """
        return self._hmac_signature_key

    @hmac_signature_key.setter
    def hmac_signature_key(self, hmac_signature_key):
        """Sets the hmac_signature_key of this NotificationConfigurationDetails.

        A string with which to salt the notification(s) before hashing. If this field is provided, a hash value will be included under the notification header `HmacSignature` and the hash protocol will be included under the notification header `Protocol`. A notification body along with its `hmacSignatureKey` and `Protocol` can be used to calculate a hash value; matching this hash value with the `HmacSignature` will ensure that the notification body has not been tampered with or corrupted.  >Must be a 32-byte hex-encoded string (i.e. a string containing 64 hexadecimal characters; e.g. \"b0ea55c2fe60d4d1d605e9c385e0e7f7e6cafbb939ce07010f31a327a0871f27\").  The omission of this field will preclude the provision of the `HmacSignature` and `Protocol` headers in notification(s).

        :param hmac_signature_key: The hmac_signature_key of this NotificationConfigurationDetails.
        :type hmac_signature_key: str
        """

        self._hmac_signature_key = hmac_signature_key

    @property
    def notification_id(self):
        """Gets the notification_id of this NotificationConfigurationDetails.

        Adyen-generated ID for the entry, returned in the response when you create a notification configuration. Required when updating an existing configuration using [`/updateNotificationConfiguration`](https://docs.adyen.com/api-explorer/#/NotificationConfigurationService/latest/post/updateNotificationConfiguration).

        :return: The notification_id of this NotificationConfigurationDetails.
        :rtype: int
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this NotificationConfigurationDetails.

        Adyen-generated ID for the entry, returned in the response when you create a notification configuration. Required when updating an existing configuration using [`/updateNotificationConfiguration`](https://docs.adyen.com/api-explorer/#/NotificationConfigurationService/latest/post/updateNotificationConfiguration).

        :param notification_id: The notification_id of this NotificationConfigurationDetails.
        :type notification_id: int
        """

        self._notification_id = notification_id

    @property
    def notify_password(self):
        """Gets the notify_password of this NotificationConfigurationDetails.

        The password to use when accessing the notifyURL with the specified username.

        :return: The notify_password of this NotificationConfigurationDetails.
        :rtype: str
        """
        return self._notify_password

    @notify_password.setter
    def notify_password(self, notify_password):
        """Sets the notify_password of this NotificationConfigurationDetails.

        The password to use when accessing the notifyURL with the specified username.

        :param notify_password: The notify_password of this NotificationConfigurationDetails.
        :type notify_password: str
        """

        self._notify_password = notify_password

    @property
    def notify_url(self):
        """Gets the notify_url of this NotificationConfigurationDetails.

        The URL to which the notifications are to be sent.

        :return: The notify_url of this NotificationConfigurationDetails.
        :rtype: str
        """
        return self._notify_url

    @notify_url.setter
    def notify_url(self, notify_url):
        """Sets the notify_url of this NotificationConfigurationDetails.

        The URL to which the notifications are to be sent.

        :param notify_url: The notify_url of this NotificationConfigurationDetails.
        :type notify_url: str
        """

        self._notify_url = notify_url

    @property
    def notify_username(self):
        """Gets the notify_username of this NotificationConfigurationDetails.

        The username to use when accessing the notifyURL.

        :return: The notify_username of this NotificationConfigurationDetails.
        :rtype: str
        """
        return self._notify_username

    @notify_username.setter
    def notify_username(self, notify_username):
        """Sets the notify_username of this NotificationConfigurationDetails.

        The username to use when accessing the notifyURL.

        :param notify_username: The notify_username of this NotificationConfigurationDetails.
        :type notify_username: str
        """

        self._notify_username = notify_username

    @property
    def ssl_protocol(self):
        """Gets the ssl_protocol of this NotificationConfigurationDetails.

        The SSL protocol employed by the endpoint. >Permitted values: `TLSv12`, `TLSv13`.

        :return: The ssl_protocol of this NotificationConfigurationDetails.
        :rtype: str
        """
        return self._ssl_protocol

    @ssl_protocol.setter
    def ssl_protocol(self, ssl_protocol):
        """Sets the ssl_protocol of this NotificationConfigurationDetails.

        The SSL protocol employed by the endpoint. >Permitted values: `TLSv12`, `TLSv13`.

        :param ssl_protocol: The ssl_protocol of this NotificationConfigurationDetails.
        :type ssl_protocol: str
        """
        allowed_values = ["TLSv12", "TLSv13"]  # noqa: E501
        if ssl_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_protocol` ({0}), must be one of {1}"
                .format(ssl_protocol, allowed_values)
            )

        self._ssl_protocol = ssl_protocol
