/**
 * Notification Configuration API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification Configuration API provides endpoints for setting up and testing notifications that inform you of events on your platform, for example when a verification check or a payout has been completed.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Notification Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Notification/v6/createNotificationConfiguration ```
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NotificationConfigurationDetails from './NotificationConfigurationDetails';

/**
 * The UpdateNotificationConfigurationRequest model module.
 * @module model/UpdateNotificationConfigurationRequest
 * @version 6
 */
class UpdateNotificationConfigurationRequest {
    /**
     * Constructs a new <code>UpdateNotificationConfigurationRequest</code>.
     * @alias module:model/UpdateNotificationConfigurationRequest
     * @param configurationDetails {module:model/NotificationConfigurationDetails} Details of the notification subscription configuration to be updated.
     */
    constructor(configurationDetails) { 
        
        UpdateNotificationConfigurationRequest.initialize(this, configurationDetails);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, configurationDetails) { 
        obj['configurationDetails'] = configurationDetails;
    }

    /**
     * Constructs a <code>UpdateNotificationConfigurationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateNotificationConfigurationRequest} obj Optional instance to populate.
     * @return {module:model/UpdateNotificationConfigurationRequest} The populated <code>UpdateNotificationConfigurationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateNotificationConfigurationRequest();

            if (data.hasOwnProperty('configurationDetails')) {
                obj['configurationDetails'] = NotificationConfigurationDetails.constructFromObject(data['configurationDetails']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateNotificationConfigurationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateNotificationConfigurationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateNotificationConfigurationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `configurationDetails`
        if (data['configurationDetails']) { // data not null
          NotificationConfigurationDetails.validateJSON(data['configurationDetails']);
        }

        return true;
    }


}

UpdateNotificationConfigurationRequest.RequiredProperties = ["configurationDetails"];

/**
 * Details of the notification subscription configuration to be updated.
 * @member {module:model/NotificationConfigurationDetails} configurationDetails
 */
UpdateNotificationConfigurationRequest.prototype['configurationDetails'] = undefined;






export default UpdateNotificationConfigurationRequest;

