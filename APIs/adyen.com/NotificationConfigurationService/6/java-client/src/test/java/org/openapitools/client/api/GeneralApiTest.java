/*
 * Notification Configuration API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification Configuration API provides endpoints for setting up and testing notifications that inform you of events on your platform, for example when a verification check or a payout has been completed.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Notification Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Notification/v6/createNotificationConfiguration ```
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNotificationConfigurationRequest;
import org.openapitools.client.model.DeleteNotificationConfigurationRequest;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.GetNotificationConfigurationListResponse;
import org.openapitools.client.model.GetNotificationConfigurationRequest;
import org.openapitools.client.model.GetNotificationConfigurationResponse;
import org.openapitools.client.model.ServiceError;
import org.openapitools.client.model.TestNotificationConfigurationRequest;
import org.openapitools.client.model.TestNotificationConfigurationResponse;
import org.openapitools.client.model.UpdateNotificationConfigurationRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GeneralApi
 */
@Disabled
public class GeneralApiTest {

    private final GeneralApi api = new GeneralApi();

    /**
     * Subscribe to notifications
     *
     * Creates a subscription to notifications informing you of events on your platform. After the subscription is created, the events specified in the configuration will be sent to the URL specified in the configuration. Subscriptions must be configured on a per-event basis (as opposed to, for example, a per-account holder basis), so all event notifications of a marketplace and of a given type will be sent to the same endpoint(s). A marketplace may have multiple endpoints if desired; an event notification may be sent to as many or as few different endpoints as configured.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postCreateNotificationConfigurationTest() throws ApiException {
        CreateNotificationConfigurationRequest createNotificationConfigurationRequest = null;
        GetNotificationConfigurationResponse response = api.postCreateNotificationConfiguration(createNotificationConfigurationRequest);
        // TODO: test validations
    }

    /**
     * Delete a notification subscription configuration
     *
     * Deletes an existing notification subscription configuration. After the subscription is deleted, no further event notifications will be sent to the URL defined in the subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDeleteNotificationConfigurationsTest() throws ApiException {
        DeleteNotificationConfigurationRequest deleteNotificationConfigurationRequest = null;
        GenericResponse response = api.postDeleteNotificationConfigurations(deleteNotificationConfigurationRequest);
        // TODO: test validations
    }

    /**
     * Get a notification subscription configuration
     *
     * Returns the details of the configuration of a notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postGetNotificationConfigurationTest() throws ApiException {
        GetNotificationConfigurationRequest getNotificationConfigurationRequest = null;
        GetNotificationConfigurationResponse response = api.postGetNotificationConfiguration(getNotificationConfigurationRequest);
        // TODO: test validations
    }

    /**
     * Get a list of notification subscription configurations
     *
     * Returns the details of the configurations of all of the notification subscriptions in the platform of the executing user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postGetNotificationConfigurationListTest() throws ApiException {
        Object body = null;
        GetNotificationConfigurationListResponse response = api.postGetNotificationConfigurationList(body);
        // TODO: test validations
    }

    /**
     * Test a notification configuration
     *
     * Tests an existing notification subscription configuration. For each event type specified, a test notification will be generated and sent to the URL configured in the subscription specified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTestNotificationConfigurationTest() throws ApiException {
        TestNotificationConfigurationRequest testNotificationConfigurationRequest = null;
        TestNotificationConfigurationResponse response = api.postTestNotificationConfiguration(testNotificationConfigurationRequest);
        // TODO: test validations
    }

    /**
     * Update a notification subscription configuration
     *
     * Updates an existing notification subscription configuration. If you are updating the event types, you must provide all event types, otherwise the previous event type configuration will be overwritten.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postUpdateNotificationConfigurationTest() throws ApiException {
        UpdateNotificationConfigurationRequest updateNotificationConfigurationRequest = null;
        GetNotificationConfigurationResponse response = api.postUpdateNotificationConfiguration(updateNotificationConfigurationRequest);
        // TODO: test validations
    }

}
