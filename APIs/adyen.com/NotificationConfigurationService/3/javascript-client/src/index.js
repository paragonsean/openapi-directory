/**
 * Notification Configuration API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification Configuration API provides endpoints for setting up and testing notifications that inform you of events on your platform, for example when a verification check or a payout has been completed.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Notification Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Notification/v3/createNotificationConfiguration ```
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import CreateNotificationConfigurationRequest from './model/CreateNotificationConfigurationRequest';
import DeleteNotificationConfigurationRequest from './model/DeleteNotificationConfigurationRequest';
import ExchangeMessage from './model/ExchangeMessage';
import ExchangeMessageWrapper from './model/ExchangeMessageWrapper';
import GenericResponse from './model/GenericResponse';
import GetNotificationConfigurationListResponse from './model/GetNotificationConfigurationListResponse';
import GetNotificationConfigurationRequest from './model/GetNotificationConfigurationRequest';
import GetNotificationConfigurationResponse from './model/GetNotificationConfigurationResponse';
import NotificationConfigurationDetails from './model/NotificationConfigurationDetails';
import NotificationConfigurationDetailsWrapper from './model/NotificationConfigurationDetailsWrapper';
import NotificationEventConfiguration from './model/NotificationEventConfiguration';
import NotificationEventConfigurationWrapper from './model/NotificationEventConfigurationWrapper';
import ServiceError from './model/ServiceError';
import TestNotificationConfigurationRequest from './model/TestNotificationConfigurationRequest';
import TestNotificationConfigurationResponse from './model/TestNotificationConfigurationResponse';
import UpdateNotificationConfigurationRequest from './model/UpdateNotificationConfigurationRequest';
import GeneralApi from './api/GeneralApi';


/**
* This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification Configuration API provides endpoints for setting up and testing notifications that inform you of events on your platform, for example when a verification check or a payout has been completed.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an &#x60;X-API-Key&#x60; header with the API key as the value, for example:   &#x60;&#x60;&#x60; curl -H \&quot;Content-Type: application/json\&quot; \\ -H \&quot;X-API-Key: YOUR_API_KEY\&quot; \\ ... &#x60;&#x60;&#x60;  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  &#x60;&#x60;&#x60; curl -U \&quot;ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\&quot;:\&quot;YOUR_WS_PASSWORD\&quot; \\ -H \&quot;Content-Type: application/json\&quot; \\ ... &#x60;&#x60;&#x60; When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Notification Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \&quot;vXX\&quot;, where XX is the version number.  For example: &#x60;&#x60;&#x60; https://cal-test.adyen.com/cal/services/Notification/v3/createNotificationConfiguration &#x60;&#x60;&#x60;.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var NotificationConfigurationApi = require('index'); // See note below*.
* var xxxSvc = new NotificationConfigurationApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new NotificationConfigurationApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new NotificationConfigurationApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new NotificationConfigurationApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 3
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The CreateNotificationConfigurationRequest model constructor.
     * @property {module:model/CreateNotificationConfigurationRequest}
     */
    CreateNotificationConfigurationRequest,

    /**
     * The DeleteNotificationConfigurationRequest model constructor.
     * @property {module:model/DeleteNotificationConfigurationRequest}
     */
    DeleteNotificationConfigurationRequest,

    /**
     * The ExchangeMessage model constructor.
     * @property {module:model/ExchangeMessage}
     */
    ExchangeMessage,

    /**
     * The ExchangeMessageWrapper model constructor.
     * @property {module:model/ExchangeMessageWrapper}
     */
    ExchangeMessageWrapper,

    /**
     * The GenericResponse model constructor.
     * @property {module:model/GenericResponse}
     */
    GenericResponse,

    /**
     * The GetNotificationConfigurationListResponse model constructor.
     * @property {module:model/GetNotificationConfigurationListResponse}
     */
    GetNotificationConfigurationListResponse,

    /**
     * The GetNotificationConfigurationRequest model constructor.
     * @property {module:model/GetNotificationConfigurationRequest}
     */
    GetNotificationConfigurationRequest,

    /**
     * The GetNotificationConfigurationResponse model constructor.
     * @property {module:model/GetNotificationConfigurationResponse}
     */
    GetNotificationConfigurationResponse,

    /**
     * The NotificationConfigurationDetails model constructor.
     * @property {module:model/NotificationConfigurationDetails}
     */
    NotificationConfigurationDetails,

    /**
     * The NotificationConfigurationDetailsWrapper model constructor.
     * @property {module:model/NotificationConfigurationDetailsWrapper}
     */
    NotificationConfigurationDetailsWrapper,

    /**
     * The NotificationEventConfiguration model constructor.
     * @property {module:model/NotificationEventConfiguration}
     */
    NotificationEventConfiguration,

    /**
     * The NotificationEventConfigurationWrapper model constructor.
     * @property {module:model/NotificationEventConfigurationWrapper}
     */
    NotificationEventConfigurationWrapper,

    /**
     * The ServiceError model constructor.
     * @property {module:model/ServiceError}
     */
    ServiceError,

    /**
     * The TestNotificationConfigurationRequest model constructor.
     * @property {module:model/TestNotificationConfigurationRequest}
     */
    TestNotificationConfigurationRequest,

    /**
     * The TestNotificationConfigurationResponse model constructor.
     * @property {module:model/TestNotificationConfigurationResponse}
     */
    TestNotificationConfigurationResponse,

    /**
     * The UpdateNotificationConfigurationRequest model constructor.
     * @property {module:model/UpdateNotificationConfigurationRequest}
     */
    UpdateNotificationConfigurationRequest,

    /**
    * The GeneralApi service constructor.
    * @property {module:api/GeneralApi}
    */
    GeneralApi
};
