/**
 * Notification Configuration API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification Configuration API provides endpoints for setting up and testing notifications that inform you of events on your platform, for example when a verification check or a payout has been completed.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Notification Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Notification/v3/createNotificationConfiguration ```
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NotificationEventConfigurationWrapper from './NotificationEventConfigurationWrapper';

/**
 * The NotificationConfigurationDetails model module.
 * @module model/NotificationConfigurationDetails
 * @version 3
 */
class NotificationConfigurationDetails {
    /**
     * Constructs a new <code>NotificationConfigurationDetails</code>.
     * @alias module:model/NotificationConfigurationDetails
     */
    constructor() { 
        
        NotificationConfigurationDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NotificationConfigurationDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationConfigurationDetails} obj Optional instance to populate.
     * @return {module:model/NotificationConfigurationDetails} The populated <code>NotificationConfigurationDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationConfigurationDetails();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('apiVersion')) {
                obj['apiVersion'] = ApiClient.convertToType(data['apiVersion'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('eventConfigs')) {
                obj['eventConfigs'] = ApiClient.convertToType(data['eventConfigs'], [NotificationEventConfigurationWrapper]);
            }
            if (data.hasOwnProperty('messageFormat')) {
                obj['messageFormat'] = ApiClient.convertToType(data['messageFormat'], 'String');
            }
            if (data.hasOwnProperty('notificationId')) {
                obj['notificationId'] = ApiClient.convertToType(data['notificationId'], 'Number');
            }
            if (data.hasOwnProperty('notifyPassword')) {
                obj['notifyPassword'] = ApiClient.convertToType(data['notifyPassword'], 'String');
            }
            if (data.hasOwnProperty('notifyURL')) {
                obj['notifyURL'] = ApiClient.convertToType(data['notifyURL'], 'String');
            }
            if (data.hasOwnProperty('notifyUsername')) {
                obj['notifyUsername'] = ApiClient.convertToType(data['notifyUsername'], 'String');
            }
            if (data.hasOwnProperty('sendActionHeader')) {
                obj['sendActionHeader'] = ApiClient.convertToType(data['sendActionHeader'], 'Boolean');
            }
            if (data.hasOwnProperty('sslProtocol')) {
                obj['sslProtocol'] = ApiClient.convertToType(data['sslProtocol'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationConfigurationDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationConfigurationDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['eventConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['eventConfigs'])) {
                throw new Error("Expected the field `eventConfigs` to be an array in the JSON data but got " + data['eventConfigs']);
            }
            // validate the optional field `eventConfigs` (array)
            for (const item of data['eventConfigs']) {
                NotificationEventConfigurationWrapper.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['messageFormat'] && !(typeof data['messageFormat'] === 'string' || data['messageFormat'] instanceof String)) {
            throw new Error("Expected the field `messageFormat` to be a primitive type in the JSON string but got " + data['messageFormat']);
        }
        // ensure the json data is a string
        if (data['notifyPassword'] && !(typeof data['notifyPassword'] === 'string' || data['notifyPassword'] instanceof String)) {
            throw new Error("Expected the field `notifyPassword` to be a primitive type in the JSON string but got " + data['notifyPassword']);
        }
        // ensure the json data is a string
        if (data['notifyURL'] && !(typeof data['notifyURL'] === 'string' || data['notifyURL'] instanceof String)) {
            throw new Error("Expected the field `notifyURL` to be a primitive type in the JSON string but got " + data['notifyURL']);
        }
        // ensure the json data is a string
        if (data['notifyUsername'] && !(typeof data['notifyUsername'] === 'string' || data['notifyUsername'] instanceof String)) {
            throw new Error("Expected the field `notifyUsername` to be a primitive type in the JSON string but got " + data['notifyUsername']);
        }
        // ensure the json data is a string
        if (data['sslProtocol'] && !(typeof data['sslProtocol'] === 'string' || data['sslProtocol'] instanceof String)) {
            throw new Error("Expected the field `sslProtocol` to be a primitive type in the JSON string but got " + data['sslProtocol']);
        }

        return true;
    }


}



/**
 * Indicates whether the notification subscription is active.
 * @member {Boolean} active
 */
NotificationConfigurationDetails.prototype['active'] = undefined;

/**
 * The version of the notification to which you are subscribing. To make sure that your integration can properly process the notification, subscribe to the same version as the API that you're using.
 * @member {Number} apiVersion
 */
NotificationConfigurationDetails.prototype['apiVersion'] = undefined;

/**
 * A description of the notification subscription configuration.
 * @member {String} description
 */
NotificationConfigurationDetails.prototype['description'] = undefined;

/**
 * Contains objects that define event types and their subscription settings.
 * @member {Array.<module:model/NotificationEventConfigurationWrapper>} eventConfigs
 */
NotificationConfigurationDetails.prototype['eventConfigs'] = undefined;

/**
 * The data format of the notification to be sent. >Permitted values: `JSON`, `SOAP`.
 * @member {module:model/NotificationConfigurationDetails.MessageFormatEnum} messageFormat
 */
NotificationConfigurationDetails.prototype['messageFormat'] = undefined;

/**
 * Adyen-generated ID for the entry, returned in the response when you create a notification configuration. Required when updating an existing configuration using [`/updateNotificationConfiguration`](https://docs.adyen.com/api-explorer/#/NotificationConfigurationService/latest/post/updateNotificationConfiguration).
 * @member {Number} notificationId
 */
NotificationConfigurationDetails.prototype['notificationId'] = undefined;

/**
 * The password to use when accessing the notifyURL with the specified username.
 * @member {String} notifyPassword
 */
NotificationConfigurationDetails.prototype['notifyPassword'] = undefined;

/**
 * The URL to which the notifications are to be sent.
 * @member {String} notifyURL
 */
NotificationConfigurationDetails.prototype['notifyURL'] = undefined;

/**
 * The username to use when accessing the notifyURL.
 * @member {String} notifyUsername
 */
NotificationConfigurationDetails.prototype['notifyUsername'] = undefined;

/**
 * Indicates whether an action header should be included. >Only applies to SOAP messages (as specified in messageFormat).
 * @member {Boolean} sendActionHeader
 */
NotificationConfigurationDetails.prototype['sendActionHeader'] = undefined;

/**
 * The SSL protocol employed by the endpoint. >Permitted values: `TLSv12`, `TLSv13`.
 * @member {module:model/NotificationConfigurationDetails.SslProtocolEnum} sslProtocol
 */
NotificationConfigurationDetails.prototype['sslProtocol'] = undefined;





/**
 * Allowed values for the <code>messageFormat</code> property.
 * @enum {String}
 * @readonly
 */
NotificationConfigurationDetails['MessageFormatEnum'] = {

    /**
     * value: "JSON"
     * @const
     */
    "JSON": "JSON",

    /**
     * value: "SOAP"
     * @const
     */
    "SOAP": "SOAP"
};


/**
 * Allowed values for the <code>sslProtocol</code> property.
 * @enum {String}
 * @readonly
 */
NotificationConfigurationDetails['SslProtocolEnum'] = {

    /**
     * value: "TLSv12"
     * @const
     */
    "TLSv12": "TLSv12",

    /**
     * value: "TLSv13"
     * @const
     */
    "TLSv13": "TLSv13"
};



export default NotificationConfigurationDetails;

