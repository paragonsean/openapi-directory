# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exchange_message_wrapper import ExchangeMessageWrapper
from openapi_server import util


class TestNotificationConfigurationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_messages: List[str]=None, event_types: List[str]=None, exchange_messages: List[ExchangeMessageWrapper]=None, notification_id: int=None, ok_messages: List[str]=None, psp_reference: str=None, result_code: str=None, submitted_async: bool=None):
        """TestNotificationConfigurationResponse - a model defined in OpenAPI

        :param error_messages: The error_messages of this TestNotificationConfigurationResponse.
        :param event_types: The event_types of this TestNotificationConfigurationResponse.
        :param exchange_messages: The exchange_messages of this TestNotificationConfigurationResponse.
        :param notification_id: The notification_id of this TestNotificationConfigurationResponse.
        :param ok_messages: The ok_messages of this TestNotificationConfigurationResponse.
        :param psp_reference: The psp_reference of this TestNotificationConfigurationResponse.
        :param result_code: The result_code of this TestNotificationConfigurationResponse.
        :param submitted_async: The submitted_async of this TestNotificationConfigurationResponse.
        """
        self.openapi_types = {
            'error_messages': List[str],
            'event_types': List[str],
            'exchange_messages': List[ExchangeMessageWrapper],
            'notification_id': int,
            'ok_messages': List[str],
            'psp_reference': str,
            'result_code': str,
            'submitted_async': bool
        }

        self.attribute_map = {
            'error_messages': 'errorMessages',
            'event_types': 'eventTypes',
            'exchange_messages': 'exchangeMessages',
            'notification_id': 'notificationId',
            'ok_messages': 'okMessages',
            'psp_reference': 'pspReference',
            'result_code': 'resultCode',
            'submitted_async': 'submittedAsync'
        }

        self._error_messages = error_messages
        self._event_types = event_types
        self._exchange_messages = exchange_messages
        self._notification_id = notification_id
        self._ok_messages = ok_messages
        self._psp_reference = psp_reference
        self._result_code = result_code
        self._submitted_async = submitted_async

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestNotificationConfigurationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestNotificationConfigurationResponse of this TestNotificationConfigurationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_messages(self):
        """Gets the error_messages of this TestNotificationConfigurationResponse.

        Any error messages encountered.

        :return: The error_messages of this TestNotificationConfigurationResponse.
        :rtype: List[str]
        """
        return self._error_messages

    @error_messages.setter
    def error_messages(self, error_messages):
        """Sets the error_messages of this TestNotificationConfigurationResponse.

        Any error messages encountered.

        :param error_messages: The error_messages of this TestNotificationConfigurationResponse.
        :type error_messages: List[str]
        """

        self._error_messages = error_messages

    @property
    def event_types(self):
        """Gets the event_types of this TestNotificationConfigurationResponse.

        The event types that were tested. >Permitted values: `ACCOUNT_HOLDER_CREATED`, `ACCOUNT_CREATED`, `ACCOUNT_UPDATED`, `ACCOUNT_HOLDER_UPDATED`, `ACCOUNT_HOLDER_STATUS_CHANGE`, `ACCOUNT_HOLDER_STORE_STATUS_CHANGE` `ACCOUNT_HOLDER_VERIFICATION`, `ACCOUNT_HOLDER_LIMIT_REACHED`, `ACCOUNT_HOLDER_PAYOUT`, `PAYMENT_FAILURE`, `SCHEDULED_REFUNDS`, `REPORT_AVAILABLE`, `TRANSFER_FUNDS`, `BENEFICIARY_SETUP`, `COMPENSATE_NEGATIVE_BALANCE`.

        :return: The event_types of this TestNotificationConfigurationResponse.
        :rtype: List[str]
        """
        return self._event_types

    @event_types.setter
    def event_types(self, event_types):
        """Sets the event_types of this TestNotificationConfigurationResponse.

        The event types that were tested. >Permitted values: `ACCOUNT_HOLDER_CREATED`, `ACCOUNT_CREATED`, `ACCOUNT_UPDATED`, `ACCOUNT_HOLDER_UPDATED`, `ACCOUNT_HOLDER_STATUS_CHANGE`, `ACCOUNT_HOLDER_STORE_STATUS_CHANGE` `ACCOUNT_HOLDER_VERIFICATION`, `ACCOUNT_HOLDER_LIMIT_REACHED`, `ACCOUNT_HOLDER_PAYOUT`, `PAYMENT_FAILURE`, `SCHEDULED_REFUNDS`, `REPORT_AVAILABLE`, `TRANSFER_FUNDS`, `BENEFICIARY_SETUP`, `COMPENSATE_NEGATIVE_BALANCE`.

        :param event_types: The event_types of this TestNotificationConfigurationResponse.
        :type event_types: List[str]
        """
        allowed_values = ["ACCOUNT_CLOSED", "ACCOUNT_CREATED", "ACCOUNT_FUNDS_BELOW_THRESHOLD", "ACCOUNT_HOLDER_CREATED", "ACCOUNT_HOLDER_LIMIT_REACHED", "ACCOUNT_HOLDER_MIGRATED", "ACCOUNT_HOLDER_PAYOUT", "ACCOUNT_HOLDER_STATUS_CHANGE", "ACCOUNT_HOLDER_STORE_STATUS_CHANGE", "ACCOUNT_HOLDER_UPCOMING_DEADLINE", "ACCOUNT_HOLDER_UPDATED", "ACCOUNT_HOLDER_VERIFICATION", "ACCOUNT_UPDATED", "BENEFICIARY_SETUP", "COMPENSATE_NEGATIVE_BALANCE", "DIRECT_DEBIT_INITIATED", "FUNDS_MIGRATED", "PAYMENT_FAILURE", "PENDING_CREDIT", "REFUND_FUNDS_TRANSFER", "REPORT_AVAILABLE", "SCHEDULED_REFUNDS", "SCORE_SIGNAL_TRIGGERED", "TRANSFER_FUNDS", "TRANSFER_NOT_PAIDOUT_TRANSFERS"]  # noqa: E501
        if not set(event_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `event_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(event_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._event_types = event_types

    @property
    def exchange_messages(self):
        """Gets the exchange_messages of this TestNotificationConfigurationResponse.

        The notification message and related response messages.

        :return: The exchange_messages of this TestNotificationConfigurationResponse.
        :rtype: List[ExchangeMessageWrapper]
        """
        return self._exchange_messages

    @exchange_messages.setter
    def exchange_messages(self, exchange_messages):
        """Sets the exchange_messages of this TestNotificationConfigurationResponse.

        The notification message and related response messages.

        :param exchange_messages: The exchange_messages of this TestNotificationConfigurationResponse.
        :type exchange_messages: List[ExchangeMessageWrapper]
        """

        self._exchange_messages = exchange_messages

    @property
    def notification_id(self):
        """Gets the notification_id of this TestNotificationConfigurationResponse.

        The ID of the notification subscription configuration.

        :return: The notification_id of this TestNotificationConfigurationResponse.
        :rtype: int
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this TestNotificationConfigurationResponse.

        The ID of the notification subscription configuration.

        :param notification_id: The notification_id of this TestNotificationConfigurationResponse.
        :type notification_id: int
        """
        if notification_id is None:
            raise ValueError("Invalid value for `notification_id`, must not be `None`")

        self._notification_id = notification_id

    @property
    def ok_messages(self):
        """Gets the ok_messages of this TestNotificationConfigurationResponse.

        A list of messages describing the testing steps.

        :return: The ok_messages of this TestNotificationConfigurationResponse.
        :rtype: List[str]
        """
        return self._ok_messages

    @ok_messages.setter
    def ok_messages(self, ok_messages):
        """Sets the ok_messages of this TestNotificationConfigurationResponse.

        A list of messages describing the testing steps.

        :param ok_messages: The ok_messages of this TestNotificationConfigurationResponse.
        :type ok_messages: List[str]
        """

        self._ok_messages = ok_messages

    @property
    def psp_reference(self):
        """Gets the psp_reference of this TestNotificationConfigurationResponse.

        The reference of a request. Can be used to uniquely identify the request.

        :return: The psp_reference of this TestNotificationConfigurationResponse.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this TestNotificationConfigurationResponse.

        The reference of a request. Can be used to uniquely identify the request.

        :param psp_reference: The psp_reference of this TestNotificationConfigurationResponse.
        :type psp_reference: str
        """

        self._psp_reference = psp_reference

    @property
    def result_code(self):
        """Gets the result_code of this TestNotificationConfigurationResponse.

        The result code.

        :return: The result_code of this TestNotificationConfigurationResponse.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this TestNotificationConfigurationResponse.

        The result code.

        :param result_code: The result_code of this TestNotificationConfigurationResponse.
        :type result_code: str
        """

        self._result_code = result_code

    @property
    def submitted_async(self):
        """Gets the submitted_async of this TestNotificationConfigurationResponse.

        Indicates whether the request is processed asynchronously. Depending on the request's platform settings, the following scenarios may be applied: * **true**: The request is queued and will be executed when the providing service is available in the order in which the requests are received. * **false**: The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.

        :return: The submitted_async of this TestNotificationConfigurationResponse.
        :rtype: bool
        """
        return self._submitted_async

    @submitted_async.setter
    def submitted_async(self, submitted_async):
        """Sets the submitted_async of this TestNotificationConfigurationResponse.

        Indicates whether the request is processed asynchronously. Depending on the request's platform settings, the following scenarios may be applied: * **true**: The request is queued and will be executed when the providing service is available in the order in which the requests are received. * **false**: The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.

        :param submitted_async: The submitted_async of this TestNotificationConfigurationResponse.
        :type submitted_async: bool
        """

        self._submitted_async = submitted_async
