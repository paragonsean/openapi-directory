/*
 * Notification Configuration API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification Configuration API provides endpoints for setting up and testing notifications that inform you of events on your platform, for example when a verification check or a payout has been completed.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Notification Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Notification/v3/createNotificationConfiguration ```
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NotificationEventConfigurationWrapper;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for NotificationConfigurationDetails
 */
public class NotificationConfigurationDetailsTest {
    private final NotificationConfigurationDetails model = new NotificationConfigurationDetails();

    /**
     * Model tests for NotificationConfigurationDetails
     */
    @Test
    public void testNotificationConfigurationDetails() {
        // TODO: test NotificationConfigurationDetails
    }

    /**
     * Test the property 'active'
     */
    @Test
    public void activeTest() {
        // TODO: test active
    }

    /**
     * Test the property 'apiVersion'
     */
    @Test
    public void apiVersionTest() {
        // TODO: test apiVersion
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'eventConfigs'
     */
    @Test
    public void eventConfigsTest() {
        // TODO: test eventConfigs
    }

    /**
     * Test the property 'messageFormat'
     */
    @Test
    public void messageFormatTest() {
        // TODO: test messageFormat
    }

    /**
     * Test the property 'notificationId'
     */
    @Test
    public void notificationIdTest() {
        // TODO: test notificationId
    }

    /**
     * Test the property 'notifyPassword'
     */
    @Test
    public void notifyPasswordTest() {
        // TODO: test notifyPassword
    }

    /**
     * Test the property 'notifyURL'
     */
    @Test
    public void notifyURLTest() {
        // TODO: test notifyURL
    }

    /**
     * Test the property 'notifyUsername'
     */
    @Test
    public void notifyUsernameTest() {
        // TODO: test notifyUsername
    }

    /**
     * Test the property 'sendActionHeader'
     */
    @Test
    public void sendActionHeaderTest() {
        // TODO: test sendActionHeader
    }

    /**
     * Test the property 'sslProtocol'
     */
    @Test
    public void sslProtocolTest() {
        // TODO: test sslProtocol
    }

}
