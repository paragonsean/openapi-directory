# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exchange_message import ExchangeMessage
from openapi_server import util


class ExchangeMessageWrapper(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exchange_message: ExchangeMessage=None):
        """ExchangeMessageWrapper - a model defined in OpenAPI

        :param exchange_message: The exchange_message of this ExchangeMessageWrapper.
        """
        self.openapi_types = {
            'exchange_message': ExchangeMessage
        }

        self.attribute_map = {
            'exchange_message': 'ExchangeMessage'
        }

        self._exchange_message = exchange_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExchangeMessageWrapper':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExchangeMessageWrapper of this ExchangeMessageWrapper.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exchange_message(self):
        """Gets the exchange_message of this ExchangeMessageWrapper.


        :return: The exchange_message of this ExchangeMessageWrapper.
        :rtype: ExchangeMessage
        """
        return self._exchange_message

    @exchange_message.setter
    def exchange_message(self, exchange_message):
        """Sets the exchange_message of this ExchangeMessageWrapper.


        :param exchange_message: The exchange_message of this ExchangeMessageWrapper.
        :type exchange_message: ExchangeMessage
        """

        self._exchange_message = exchange_message
