/**
 * Notification Configuration API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification Configuration API provides endpoints for setting up and testing notifications that inform you of events on your platform, for example when a verification check or a payout has been completed.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Notification Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Notification/v2/createNotificationConfiguration ```
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITestNotificationConfigurationResponse.h
 *
 * 
 */

#ifndef OAITestNotificationConfigurationResponse_H
#define OAITestNotificationConfigurationResponse_H

#include <QJsonObject>

#include "OAIExchangeMessageWrapper.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExchangeMessageWrapper;

class OAITestNotificationConfigurationResponse : public OAIObject {
public:
    OAITestNotificationConfigurationResponse();
    OAITestNotificationConfigurationResponse(QString json);
    ~OAITestNotificationConfigurationResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getErrorMessages() const;
    void setErrorMessages(const QList<QString> &error_messages);
    bool is_error_messages_Set() const;
    bool is_error_messages_Valid() const;

    QList<QString> getEventTypes() const;
    void setEventTypes(const QList<QString> &event_types);
    bool is_event_types_Set() const;
    bool is_event_types_Valid() const;

    QList<OAIExchangeMessageWrapper> getExchangeMessages() const;
    void setExchangeMessages(const QList<OAIExchangeMessageWrapper> &exchange_messages);
    bool is_exchange_messages_Set() const;
    bool is_exchange_messages_Valid() const;

    qint64 getNotificationId() const;
    void setNotificationId(const qint64 &notification_id);
    bool is_notification_id_Set() const;
    bool is_notification_id_Valid() const;

    QList<QString> getOkMessages() const;
    void setOkMessages(const QList<QString> &ok_messages);
    bool is_ok_messages_Set() const;
    bool is_ok_messages_Valid() const;

    QString getPspReference() const;
    void setPspReference(const QString &psp_reference);
    bool is_psp_reference_Set() const;
    bool is_psp_reference_Valid() const;

    QString getResultCode() const;
    void setResultCode(const QString &result_code);
    bool is_result_code_Set() const;
    bool is_result_code_Valid() const;

    bool isSubmittedAsync() const;
    void setSubmittedAsync(const bool &submitted_async);
    bool is_submitted_async_Set() const;
    bool is_submitted_async_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_error_messages;
    bool m_error_messages_isSet;
    bool m_error_messages_isValid;

    QList<QString> m_event_types;
    bool m_event_types_isSet;
    bool m_event_types_isValid;

    QList<OAIExchangeMessageWrapper> m_exchange_messages;
    bool m_exchange_messages_isSet;
    bool m_exchange_messages_isValid;

    qint64 m_notification_id;
    bool m_notification_id_isSet;
    bool m_notification_id_isValid;

    QList<QString> m_ok_messages;
    bool m_ok_messages_isSet;
    bool m_ok_messages_isValid;

    QString m_psp_reference;
    bool m_psp_reference_isSet;
    bool m_psp_reference_isValid;

    QString m_result_code;
    bool m_result_code_isSet;
    bool m_result_code_isValid;

    bool m_submitted_async;
    bool m_submitted_async_isSet;
    bool m_submitted_async_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITestNotificationConfigurationResponse)

#endif // OAITestNotificationConfigurationResponse_H
