/**
 * Notification Configuration API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification Configuration API provides endpoints for setting up and testing notifications that inform you of events on your platform, for example when a verification check or a payout has been completed.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Notification Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Notification/v1/createNotificationConfiguration ```
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExchangeMessageWrapper from './ExchangeMessageWrapper';

/**
 * The TestNotificationConfigurationResponse model module.
 * @module model/TestNotificationConfigurationResponse
 * @version 1
 */
class TestNotificationConfigurationResponse {
    /**
     * Constructs a new <code>TestNotificationConfigurationResponse</code>.
     * @alias module:model/TestNotificationConfigurationResponse
     * @param notificationId {Number} The ID of the notification subscription configuration.
     */
    constructor(notificationId) { 
        
        TestNotificationConfigurationResponse.initialize(this, notificationId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, notificationId) { 
        obj['notificationId'] = notificationId;
    }

    /**
     * Constructs a <code>TestNotificationConfigurationResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestNotificationConfigurationResponse} obj Optional instance to populate.
     * @return {module:model/TestNotificationConfigurationResponse} The populated <code>TestNotificationConfigurationResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestNotificationConfigurationResponse();

            if (data.hasOwnProperty('errorMessages')) {
                obj['errorMessages'] = ApiClient.convertToType(data['errorMessages'], ['String']);
            }
            if (data.hasOwnProperty('eventTypes')) {
                obj['eventTypes'] = ApiClient.convertToType(data['eventTypes'], ['String']);
            }
            if (data.hasOwnProperty('exchangeMessages')) {
                obj['exchangeMessages'] = ApiClient.convertToType(data['exchangeMessages'], [ExchangeMessageWrapper]);
            }
            if (data.hasOwnProperty('notificationId')) {
                obj['notificationId'] = ApiClient.convertToType(data['notificationId'], 'Number');
            }
            if (data.hasOwnProperty('okMessages')) {
                obj['okMessages'] = ApiClient.convertToType(data['okMessages'], ['String']);
            }
            if (data.hasOwnProperty('pspReference')) {
                obj['pspReference'] = ApiClient.convertToType(data['pspReference'], 'String');
            }
            if (data.hasOwnProperty('resultCode')) {
                obj['resultCode'] = ApiClient.convertToType(data['resultCode'], 'String');
            }
            if (data.hasOwnProperty('submittedAsync')) {
                obj['submittedAsync'] = ApiClient.convertToType(data['submittedAsync'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestNotificationConfigurationResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestNotificationConfigurationResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestNotificationConfigurationResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['errorMessages'])) {
            throw new Error("Expected the field `errorMessages` to be an array in the JSON data but got " + data['errorMessages']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['eventTypes'])) {
            throw new Error("Expected the field `eventTypes` to be an array in the JSON data but got " + data['eventTypes']);
        }
        if (data['exchangeMessages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['exchangeMessages'])) {
                throw new Error("Expected the field `exchangeMessages` to be an array in the JSON data but got " + data['exchangeMessages']);
            }
            // validate the optional field `exchangeMessages` (array)
            for (const item of data['exchangeMessages']) {
                ExchangeMessageWrapper.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['okMessages'])) {
            throw new Error("Expected the field `okMessages` to be an array in the JSON data but got " + data['okMessages']);
        }
        // ensure the json data is a string
        if (data['pspReference'] && !(typeof data['pspReference'] === 'string' || data['pspReference'] instanceof String)) {
            throw new Error("Expected the field `pspReference` to be a primitive type in the JSON string but got " + data['pspReference']);
        }
        // ensure the json data is a string
        if (data['resultCode'] && !(typeof data['resultCode'] === 'string' || data['resultCode'] instanceof String)) {
            throw new Error("Expected the field `resultCode` to be a primitive type in the JSON string but got " + data['resultCode']);
        }

        return true;
    }


}

TestNotificationConfigurationResponse.RequiredProperties = ["notificationId"];

/**
 * Any error messages encountered.
 * @member {Array.<String>} errorMessages
 */
TestNotificationConfigurationResponse.prototype['errorMessages'] = undefined;

/**
 * The event types that were tested. >Permitted values: `ACCOUNT_HOLDER_CREATED`, `ACCOUNT_CREATED`, `ACCOUNT_UPDATED`, `ACCOUNT_HOLDER_UPDATED`, `ACCOUNT_HOLDER_STATUS_CHANGE`, `ACCOUNT_HOLDER_STORE_STATUS_CHANGE` `ACCOUNT_HOLDER_VERIFICATION`, `ACCOUNT_HOLDER_LIMIT_REACHED`, `ACCOUNT_HOLDER_PAYOUT`, `PAYMENT_FAILURE`, `SCHEDULED_REFUNDS`, `REPORT_AVAILABLE`, `TRANSFER_FUNDS`, `BENEFICIARY_SETUP`, `COMPENSATE_NEGATIVE_BALANCE`.
 * @member {Array.<module:model/TestNotificationConfigurationResponse.EventTypesEnum>} eventTypes
 */
TestNotificationConfigurationResponse.prototype['eventTypes'] = undefined;

/**
 * The notification message and related response messages.
 * @member {Array.<module:model/ExchangeMessageWrapper>} exchangeMessages
 */
TestNotificationConfigurationResponse.prototype['exchangeMessages'] = undefined;

/**
 * The ID of the notification subscription configuration.
 * @member {Number} notificationId
 */
TestNotificationConfigurationResponse.prototype['notificationId'] = undefined;

/**
 * A list of messages describing the testing steps.
 * @member {Array.<String>} okMessages
 */
TestNotificationConfigurationResponse.prototype['okMessages'] = undefined;

/**
 * The reference of a request. Can be used to uniquely identify the request.
 * @member {String} pspReference
 */
TestNotificationConfigurationResponse.prototype['pspReference'] = undefined;

/**
 * The result code.
 * @member {String} resultCode
 */
TestNotificationConfigurationResponse.prototype['resultCode'] = undefined;

/**
 * Indicates whether the request is processed asynchronously. Depending on the request's platform settings, the following scenarios may be applied: * **true**: The request is queued and will be executed when the providing service is available in the order in which the requests are received. * **false**: The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
 * @member {Boolean} submittedAsync
 */
TestNotificationConfigurationResponse.prototype['submittedAsync'] = undefined;





/**
 * Allowed values for the <code>eventTypes</code> property.
 * @enum {String}
 * @readonly
 */
TestNotificationConfigurationResponse['EventTypesEnum'] = {

    /**
     * value: "ACCOUNT_CLOSED"
     * @const
     */
    "ACCOUNT_CLOSED": "ACCOUNT_CLOSED",

    /**
     * value: "ACCOUNT_CREATED"
     * @const
     */
    "ACCOUNT_CREATED": "ACCOUNT_CREATED",

    /**
     * value: "ACCOUNT_FUNDS_BELOW_THRESHOLD"
     * @const
     */
    "ACCOUNT_FUNDS_BELOW_THRESHOLD": "ACCOUNT_FUNDS_BELOW_THRESHOLD",

    /**
     * value: "ACCOUNT_HOLDER_CREATED"
     * @const
     */
    "ACCOUNT_HOLDER_CREATED": "ACCOUNT_HOLDER_CREATED",

    /**
     * value: "ACCOUNT_HOLDER_LIMIT_REACHED"
     * @const
     */
    "ACCOUNT_HOLDER_LIMIT_REACHED": "ACCOUNT_HOLDER_LIMIT_REACHED",

    /**
     * value: "ACCOUNT_HOLDER_MIGRATED"
     * @const
     */
    "ACCOUNT_HOLDER_MIGRATED": "ACCOUNT_HOLDER_MIGRATED",

    /**
     * value: "ACCOUNT_HOLDER_PAYOUT"
     * @const
     */
    "ACCOUNT_HOLDER_PAYOUT": "ACCOUNT_HOLDER_PAYOUT",

    /**
     * value: "ACCOUNT_HOLDER_STATUS_CHANGE"
     * @const
     */
    "ACCOUNT_HOLDER_STATUS_CHANGE": "ACCOUNT_HOLDER_STATUS_CHANGE",

    /**
     * value: "ACCOUNT_HOLDER_STORE_STATUS_CHANGE"
     * @const
     */
    "ACCOUNT_HOLDER_STORE_STATUS_CHANGE": "ACCOUNT_HOLDER_STORE_STATUS_CHANGE",

    /**
     * value: "ACCOUNT_HOLDER_UPCOMING_DEADLINE"
     * @const
     */
    "ACCOUNT_HOLDER_UPCOMING_DEADLINE": "ACCOUNT_HOLDER_UPCOMING_DEADLINE",

    /**
     * value: "ACCOUNT_HOLDER_UPDATED"
     * @const
     */
    "ACCOUNT_HOLDER_UPDATED": "ACCOUNT_HOLDER_UPDATED",

    /**
     * value: "ACCOUNT_HOLDER_VERIFICATION"
     * @const
     */
    "ACCOUNT_HOLDER_VERIFICATION": "ACCOUNT_HOLDER_VERIFICATION",

    /**
     * value: "ACCOUNT_UPDATED"
     * @const
     */
    "ACCOUNT_UPDATED": "ACCOUNT_UPDATED",

    /**
     * value: "BENEFICIARY_SETUP"
     * @const
     */
    "BENEFICIARY_SETUP": "BENEFICIARY_SETUP",

    /**
     * value: "COMPENSATE_NEGATIVE_BALANCE"
     * @const
     */
    "COMPENSATE_NEGATIVE_BALANCE": "COMPENSATE_NEGATIVE_BALANCE",

    /**
     * value: "DIRECT_DEBIT_INITIATED"
     * @const
     */
    "DIRECT_DEBIT_INITIATED": "DIRECT_DEBIT_INITIATED",

    /**
     * value: "FUNDS_MIGRATED"
     * @const
     */
    "FUNDS_MIGRATED": "FUNDS_MIGRATED",

    /**
     * value: "PAYMENT_FAILURE"
     * @const
     */
    "PAYMENT_FAILURE": "PAYMENT_FAILURE",

    /**
     * value: "PENDING_CREDIT"
     * @const
     */
    "PENDING_CREDIT": "PENDING_CREDIT",

    /**
     * value: "REFUND_FUNDS_TRANSFER"
     * @const
     */
    "REFUND_FUNDS_TRANSFER": "REFUND_FUNDS_TRANSFER",

    /**
     * value: "REPORT_AVAILABLE"
     * @const
     */
    "REPORT_AVAILABLE": "REPORT_AVAILABLE",

    /**
     * value: "SCHEDULED_REFUNDS"
     * @const
     */
    "SCHEDULED_REFUNDS": "SCHEDULED_REFUNDS",

    /**
     * value: "SCORE_SIGNAL_TRIGGERED"
     * @const
     */
    "SCORE_SIGNAL_TRIGGERED": "SCORE_SIGNAL_TRIGGERED",

    /**
     * value: "TRANSFER_FUNDS"
     * @const
     */
    "TRANSFER_FUNDS": "TRANSFER_FUNDS",

    /**
     * value: "TRANSFER_NOT_PAIDOUT_TRANSFERS"
     * @const
     */
    "TRANSFER_NOT_PAIDOUT_TRANSFERS": "TRANSFER_NOT_PAIDOUT_TRANSFERS"
};



export default TestNotificationConfigurationResponse;

