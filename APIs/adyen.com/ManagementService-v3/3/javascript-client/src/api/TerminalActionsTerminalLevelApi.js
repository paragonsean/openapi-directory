/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestServiceError from '../model/RestServiceError';
import ScheduleTerminalActionsRequest from '../model/ScheduleTerminalActionsRequest';
import ScheduleTerminalActionsResponse from '../model/ScheduleTerminalActionsResponse';

/**
* TerminalActionsTerminalLevel service.
* @module api/TerminalActionsTerminalLevelApi
* @version 3
*/
export default class TerminalActionsTerminalLevelApi {

    /**
    * Constructs a new TerminalActionsTerminalLevelApi. 
    * @alias module:api/TerminalActionsTerminalLevelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postTerminalsScheduleActions operation.
     * @callback module:api/TerminalActionsTerminalLevelApi~postTerminalsScheduleActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleTerminalActionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a terminal action
     * Schedules a [terminal action](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api) by specifying the action and the terminals that the action must be applied to.   The following restrictions apply: * You can schedule only one action at a time. For example, to install a new app version and remove an old app version, you have to make two API requests.  * The maximum number of terminals in a request is **100**. For example, to apply an action to 250 terminals, you have to divide the terminals over three API requests.  * If there is an error with one or more terminal IDs in the request, the action is scheduled for none of the terminals. You need to fix the error and try again.   To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management APIâ€”Terminal actions read and write
     * @param {Object} opts Optional parameters
     * @param {module:model/ScheduleTerminalActionsRequest} [scheduleTerminalActionsRequest] 
     * @param {module:api/TerminalActionsTerminalLevelApi~postTerminalsScheduleActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleTerminalActionsResponse}
     */
    postTerminalsScheduleActions(opts, callback) {
      opts = opts || {};
      let postBody = opts['scheduleTerminalActionsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScheduleTerminalActionsResponse;
      return this.apiClient.callApi(
        '/terminals/scheduleActions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
