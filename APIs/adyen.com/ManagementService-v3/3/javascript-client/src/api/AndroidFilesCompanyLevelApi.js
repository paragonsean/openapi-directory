/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AndroidApp from '../model/AndroidApp';
import AndroidAppsResponse from '../model/AndroidAppsResponse';
import AndroidCertificatesResponse from '../model/AndroidCertificatesResponse';
import RestServiceError from '../model/RestServiceError';
import UploadAndroidAppResponse from '../model/UploadAndroidAppResponse';

/**
* AndroidFilesCompanyLevel service.
* @module api/AndroidFilesCompanyLevelApi
* @version 3
*/
export default class AndroidFilesCompanyLevelApi {

    /**
    * Constructs a new AndroidFilesCompanyLevelApi. 
    * @alias module:api/AndroidFilesCompanyLevelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCompaniesCompanyIdAndroidApps operation.
     * @callback module:api/AndroidFilesCompanyLevelApi~getCompaniesCompanyIdAndroidAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AndroidAppsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Android apps
     * Returns a list of the Android apps that are available for the company identified in the path.  These apps have been uploaded to Adyen and can be installed or uninstalled on Android payment terminals through [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api).  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Android files read * Management API—Android files read and write * Management API—Terminal actions read * Management API—Terminal actions read and write
     * @param {String} companyId The unique identifier of the company account.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageNumber] The number of the page to fetch.
     * @param {Number} [pageSize] The number of items to have on a page, maximum 100. The default is 20 items on a page.
     * @param {String} [packageName] The package name that uniquely identifies the Android app.
     * @param {Number} [versionCode] The version number of the app.
     * @param {module:api/AndroidFilesCompanyLevelApi~getCompaniesCompanyIdAndroidAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AndroidAppsResponse}
     */
    getCompaniesCompanyIdAndroidApps(companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getCompaniesCompanyIdAndroidApps");
      }

      let pathParams = {
        'companyId': companyId
      };
      let queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize'],
        'packageName': opts['packageName'],
        'versionCode': opts['versionCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AndroidAppsResponse;
      return this.apiClient.callApi(
        '/companies/{companyId}/androidApps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompaniesCompanyIdAndroidAppsId operation.
     * @callback module:api/AndroidFilesCompanyLevelApi~getCompaniesCompanyIdAndroidAppsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AndroidApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Android app
     * Returns the details of the Android app identified in the path.  These apps have been uploaded to Adyen and can be installed or uninstalled on Android payment terminals through [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api).  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Android files read * Management API—Android files read and write
     * @param {String} companyId The unique identifier of the company account.
     * @param {String} id The unique identifier of the app.
     * @param {module:api/AndroidFilesCompanyLevelApi~getCompaniesCompanyIdAndroidAppsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AndroidApp}
     */
    getCompaniesCompanyIdAndroidAppsId(companyId, id, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getCompaniesCompanyIdAndroidAppsId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCompaniesCompanyIdAndroidAppsId");
      }

      let pathParams = {
        'companyId': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AndroidApp;
      return this.apiClient.callApi(
        '/companies/{companyId}/androidApps/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompaniesCompanyIdAndroidCertificates operation.
     * @callback module:api/AndroidFilesCompanyLevelApi~getCompaniesCompanyIdAndroidCertificatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AndroidCertificatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Android certificates
     * Returns a list of the Android certificates that are available for the company identified in the path. Typically, these certificates enable running apps on Android payment terminals. The certifcates in the list have been uploaded to Adyen and can be installed or uninstalled on Android terminals through [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api).  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Android files read * Management API—Android files read and write * Management API—Terminal actions read * Management API—Terminal actions read and write
     * @param {String} companyId The unique identifier of the company account.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageNumber] The number of the page to fetch.
     * @param {Number} [pageSize] The number of items to have on a page, maximum 100. The default is 20 items on a page.
     * @param {String} [certificateName] The name of the certificate.
     * @param {module:api/AndroidFilesCompanyLevelApi~getCompaniesCompanyIdAndroidCertificatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AndroidCertificatesResponse}
     */
    getCompaniesCompanyIdAndroidCertificates(companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getCompaniesCompanyIdAndroidCertificates");
      }

      let pathParams = {
        'companyId': companyId
      };
      let queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize'],
        'certificateName': opts['certificateName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AndroidCertificatesResponse;
      return this.apiClient.callApi(
        '/companies/{companyId}/androidCertificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCompaniesCompanyIdAndroidApps operation.
     * @callback module:api/AndroidFilesCompanyLevelApi~postCompaniesCompanyIdAndroidAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadAndroidAppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload Android App
     * Uploads an Android APK file to Adyen. The maximum APK file size is 200 MB. To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Android files read and write  >By choosing to upload, install, or run any third-party applications on an Adyen payment terminal, you accept full responsibility and liability for any consequences of uploading, installing, or running any such applications.
     * @param {String} companyId The unique identifier of the company account.
     * @param {module:api/AndroidFilesCompanyLevelApi~postCompaniesCompanyIdAndroidAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadAndroidAppResponse}
     */
    postCompaniesCompanyIdAndroidApps(companyId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling postCompaniesCompanyIdAndroidApps");
      }

      let pathParams = {
        'companyId': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UploadAndroidAppResponse;
      return this.apiClient.callApi(
        '/companies/{companyId}/androidApps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
