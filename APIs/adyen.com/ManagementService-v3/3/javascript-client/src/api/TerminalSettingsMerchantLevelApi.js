/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Logo from '../model/Logo';
import RestServiceError from '../model/RestServiceError';
import TerminalSettings from '../model/TerminalSettings';

/**
* TerminalSettingsMerchantLevel service.
* @module api/TerminalSettingsMerchantLevelApi
* @version 3
*/
export default class TerminalSettingsMerchantLevelApi {

    /**
    * Constructs a new TerminalSettingsMerchantLevelApi. 
    * @alias module:api/TerminalSettingsMerchantLevelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getMerchantsMerchantIdTerminalLogos operation.
     * @callback module:api/TerminalSettingsMerchantLevelApi~getMerchantsMerchantIdTerminalLogosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Logo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the terminal logo
     * Returns the logo that is configured for a specific payment terminal model at the merchant account identified in the path.  The logo is returned as a Base64-encoded string. You need to Base64-decode the string to get the actual image file.  This logo applies to all terminals of the specified model under the merchant account, unless a different logo is configured at a lower level (store or individual terminal).  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read * Management API—Terminal settings read and write
     * @param {String} merchantId The unique identifier of the merchant account.
     * @param {String} model The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.
     * @param {module:api/TerminalSettingsMerchantLevelApi~getMerchantsMerchantIdTerminalLogosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Logo}
     */
    getMerchantsMerchantIdTerminalLogos(merchantId, model, callback) {
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling getMerchantsMerchantIdTerminalLogos");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling getMerchantsMerchantIdTerminalLogos");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
        'model': model
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Logo;
      return this.apiClient.callApi(
        '/merchants/{merchantId}/terminalLogos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMerchantsMerchantIdTerminalSettings operation.
     * @callback module:api/TerminalSettingsMerchantLevelApi~getMerchantsMerchantIdTerminalSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TerminalSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get terminal settings
     * Returns the payment terminal settings that are configured for the merchant account identified in the path. These settings apply to all terminals under the merchant account unless different values are configured at a lower level (store or individual terminal).  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read * Management API—Terminal settings read and write
     * @param {String} merchantId The unique identifier of the merchant account.
     * @param {module:api/TerminalSettingsMerchantLevelApi~getMerchantsMerchantIdTerminalSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TerminalSettings}
     */
    getMerchantsMerchantIdTerminalSettings(merchantId, callback) {
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling getMerchantsMerchantIdTerminalSettings");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TerminalSettings;
      return this.apiClient.callApi(
        '/merchants/{merchantId}/terminalSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchMerchantsMerchantIdTerminalLogos operation.
     * @callback module:api/TerminalSettingsMerchantLevelApi~patchMerchantsMerchantIdTerminalLogosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Logo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the terminal logo
     * Updates the logo for a specific payment terminal model at the merchant account identified in the path. You can update the logo for only one terminal model at a time.  This logo applies to all terminals of the specified model under the merchant account, unless a different logo is configured at a lower level (store or individual terminal).  * To change the logo, specify the image file as a Base64-encoded string. * To restore the logo inherited from the company account, specify an empty logo value.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read and write
     * @param {String} merchantId The unique identifier of the merchant account.
     * @param {String} model The terminal model. Allowed values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.
     * @param {Object} opts Optional parameters
     * @param {module:model/Logo} [logo] 
     * @param {module:api/TerminalSettingsMerchantLevelApi~patchMerchantsMerchantIdTerminalLogosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Logo}
     */
    patchMerchantsMerchantIdTerminalLogos(merchantId, model, opts, callback) {
      opts = opts || {};
      let postBody = opts['logo'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling patchMerchantsMerchantIdTerminalLogos");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling patchMerchantsMerchantIdTerminalLogos");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
        'model': model
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Logo;
      return this.apiClient.callApi(
        '/merchants/{merchantId}/terminalLogos', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchMerchantsMerchantIdTerminalSettings operation.
     * @callback module:api/TerminalSettingsMerchantLevelApi~patchMerchantsMerchantIdTerminalSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TerminalSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update terminal settings
     * Updates payment terminal settings for the merchant account identified in the path. These settings apply to all terminals under the merchant account, unless different values are configured at a lower level (store or individual terminal).  * To change a parameter value, include the full object that contains the parameter, even if you don't want to change all parameters in the object. * To restore a parameter value inherited from a higher level, include the full object that contains the parameter, and specify an empty value for the parameter or omit the parameter. * Objects that are not included in the request are not updated.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read and write
     * @param {String} merchantId The unique identifier of the merchant account.
     * @param {Object} opts Optional parameters
     * @param {module:model/TerminalSettings} [terminalSettings] 
     * @param {module:api/TerminalSettingsMerchantLevelApi~patchMerchantsMerchantIdTerminalSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TerminalSettings}
     */
    patchMerchantsMerchantIdTerminalSettings(merchantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['terminalSettings'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling patchMerchantsMerchantIdTerminalSettings");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TerminalSettings;
      return this.apiClient.callApi(
        '/merchants/{merchantId}/terminalSettings', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
