/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StoreSplitConfiguration from './StoreSplitConfiguration';
import UpdatableAddress from './UpdatableAddress';

/**
 * The UpdateStoreRequest model module.
 * @module model/UpdateStoreRequest
 * @version 3
 */
class UpdateStoreRequest {
    /**
     * Constructs a new <code>UpdateStoreRequest</code>.
     * @alias module:model/UpdateStoreRequest
     */
    constructor() { 
        
        UpdateStoreRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateStoreRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateStoreRequest} obj Optional instance to populate.
     * @return {module:model/UpdateStoreRequest} The populated <code>UpdateStoreRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateStoreRequest();

            if (data.hasOwnProperty('address')) {
                obj['address'] = UpdatableAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('businessLineIds')) {
                obj['businessLineIds'] = ApiClient.convertToType(data['businessLineIds'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('externalReferenceId')) {
                obj['externalReferenceId'] = ApiClient.convertToType(data['externalReferenceId'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('splitConfiguration')) {
                obj['splitConfiguration'] = StoreSplitConfiguration.constructFromObject(data['splitConfiguration']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateStoreRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateStoreRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          UpdatableAddress.validateJSON(data['address']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['businessLineIds'])) {
            throw new Error("Expected the field `businessLineIds` to be an array in the JSON data but got " + data['businessLineIds']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['externalReferenceId'] && !(typeof data['externalReferenceId'] === 'string' || data['externalReferenceId'] instanceof String)) {
            throw new Error("Expected the field `externalReferenceId` to be a primitive type in the JSON string but got " + data['externalReferenceId']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // validate the optional field `splitConfiguration`
        if (data['splitConfiguration']) { // data not null
          StoreSplitConfiguration.validateJSON(data['splitConfiguration']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The address of the store. It is not possible to update the country of the store.
 * @member {module:model/UpdatableAddress} address
 */
UpdateStoreRequest.prototype['address'] = undefined;

/**
 * The unique identifiers of the [business lines](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businessLines__resParam_id) that the store is associated with.
 * @member {Array.<String>} businessLineIds
 */
UpdateStoreRequest.prototype['businessLineIds'] = undefined;

/**
 * The description of the store.
 * @member {String} description
 */
UpdateStoreRequest.prototype['description'] = undefined;

/**
 * The unique identifier of the store, used by certain payment methods and tax authorities. Accepts up to 14 digits.  Required for CNPJ in Brazil, in the format 00.000.000/00git00-00 separated by dots, slashes, hyphens, or without separators.  Optional for Zip in Australia and SIRET in France, required except for nonprofit organizations and incorporated associations.  
 * @member {String} externalReferenceId
 */
UpdateStoreRequest.prototype['externalReferenceId'] = undefined;

/**
 * The phone number of the store, including '+' and country code in the [E.164](https://en.wikipedia.org/wiki/E.164) format. If passed in a different format, we convert and validate the phone number against E.164. 
 * @member {String} phoneNumber
 */
UpdateStoreRequest.prototype['phoneNumber'] = undefined;

/**
 * Rules for Adyen for Platforms merchants to split the transaction amount and fees.
 * @member {module:model/StoreSplitConfiguration} splitConfiguration
 */
UpdateStoreRequest.prototype['splitConfiguration'] = undefined;

/**
 * The status of the store. Possible values are:  - **active**: This value is assigned automatically when a store is created.  - **inactive**: The maximum [transaction limits and number of Store-and-Forward transactions](https://docs.adyen.com/point-of-sale/determine-account-structure/configure-features#payment-features) for the store are set to 0. This blocks new transactions, but captures are still possible. - **closed**: The terminals of the store are reassigned to the merchant inventory, so they can't process payments.  You can change the status from **active** to **inactive**, and from **inactive** to **active** or **closed**.  Once **closed**, a store can't be reopened.
 * @member {module:model/UpdateStoreRequest.StatusEnum} status
 */
UpdateStoreRequest.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
UpdateStoreRequest['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "closed"
     * @const
     */
    "closed": "closed",

    /**
     * value: "inactive"
     * @const
     */
    "inactive": "inactive"
};



export default UpdateStoreRequest;

