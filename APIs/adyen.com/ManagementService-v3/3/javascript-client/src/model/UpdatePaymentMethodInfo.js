/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BcmcInfo from './BcmcInfo';
import CartesBancairesInfo from './CartesBancairesInfo';
import GenericPmWithTdiInfo from './GenericPmWithTdiInfo';

/**
 * The UpdatePaymentMethodInfo model module.
 * @module model/UpdatePaymentMethodInfo
 * @version 3
 */
class UpdatePaymentMethodInfo {
    /**
     * Constructs a new <code>UpdatePaymentMethodInfo</code>.
     * @alias module:model/UpdatePaymentMethodInfo
     */
    constructor() { 
        
        UpdatePaymentMethodInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdatePaymentMethodInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdatePaymentMethodInfo} obj Optional instance to populate.
     * @return {module:model/UpdatePaymentMethodInfo} The populated <code>UpdatePaymentMethodInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdatePaymentMethodInfo();

            if (data.hasOwnProperty('bcmc')) {
                obj['bcmc'] = BcmcInfo.constructFromObject(data['bcmc']);
            }
            if (data.hasOwnProperty('cartesBancaires')) {
                obj['cartesBancaires'] = CartesBancairesInfo.constructFromObject(data['cartesBancaires']);
            }
            if (data.hasOwnProperty('countries')) {
                obj['countries'] = ApiClient.convertToType(data['countries'], ['String']);
            }
            if (data.hasOwnProperty('cup')) {
                obj['cup'] = GenericPmWithTdiInfo.constructFromObject(data['cup']);
            }
            if (data.hasOwnProperty('currencies')) {
                obj['currencies'] = ApiClient.convertToType(data['currencies'], ['String']);
            }
            if (data.hasOwnProperty('customRoutingFlags')) {
                obj['customRoutingFlags'] = ApiClient.convertToType(data['customRoutingFlags'], ['String']);
            }
            if (data.hasOwnProperty('diners')) {
                obj['diners'] = GenericPmWithTdiInfo.constructFromObject(data['diners']);
            }
            if (data.hasOwnProperty('discover')) {
                obj['discover'] = GenericPmWithTdiInfo.constructFromObject(data['discover']);
            }
            if (data.hasOwnProperty('eftpos_australia')) {
                obj['eftpos_australia'] = GenericPmWithTdiInfo.constructFromObject(data['eftpos_australia']);
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('girocard')) {
                obj['girocard'] = GenericPmWithTdiInfo.constructFromObject(data['girocard']);
            }
            if (data.hasOwnProperty('ideal')) {
                obj['ideal'] = GenericPmWithTdiInfo.constructFromObject(data['ideal']);
            }
            if (data.hasOwnProperty('interac_card')) {
                obj['interac_card'] = GenericPmWithTdiInfo.constructFromObject(data['interac_card']);
            }
            if (data.hasOwnProperty('jcb')) {
                obj['jcb'] = GenericPmWithTdiInfo.constructFromObject(data['jcb']);
            }
            if (data.hasOwnProperty('maestro')) {
                obj['maestro'] = GenericPmWithTdiInfo.constructFromObject(data['maestro']);
            }
            if (data.hasOwnProperty('mc')) {
                obj['mc'] = GenericPmWithTdiInfo.constructFromObject(data['mc']);
            }
            if (data.hasOwnProperty('storeIds')) {
                obj['storeIds'] = ApiClient.convertToType(data['storeIds'], ['String']);
            }
            if (data.hasOwnProperty('visa')) {
                obj['visa'] = GenericPmWithTdiInfo.constructFromObject(data['visa']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdatePaymentMethodInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdatePaymentMethodInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bcmc`
        if (data['bcmc']) { // data not null
          BcmcInfo.validateJSON(data['bcmc']);
        }
        // validate the optional field `cartesBancaires`
        if (data['cartesBancaires']) { // data not null
          CartesBancairesInfo.validateJSON(data['cartesBancaires']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['countries'])) {
            throw new Error("Expected the field `countries` to be an array in the JSON data but got " + data['countries']);
        }
        // validate the optional field `cup`
        if (data['cup']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['cup']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['currencies'])) {
            throw new Error("Expected the field `currencies` to be an array in the JSON data but got " + data['currencies']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['customRoutingFlags'])) {
            throw new Error("Expected the field `customRoutingFlags` to be an array in the JSON data but got " + data['customRoutingFlags']);
        }
        // validate the optional field `diners`
        if (data['diners']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['diners']);
        }
        // validate the optional field `discover`
        if (data['discover']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['discover']);
        }
        // validate the optional field `eftpos_australia`
        if (data['eftpos_australia']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['eftpos_australia']);
        }
        // validate the optional field `girocard`
        if (data['girocard']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['girocard']);
        }
        // validate the optional field `ideal`
        if (data['ideal']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['ideal']);
        }
        // validate the optional field `interac_card`
        if (data['interac_card']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['interac_card']);
        }
        // validate the optional field `jcb`
        if (data['jcb']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['jcb']);
        }
        // validate the optional field `maestro`
        if (data['maestro']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['maestro']);
        }
        // validate the optional field `mc`
        if (data['mc']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['mc']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['storeIds'])) {
            throw new Error("Expected the field `storeIds` to be an array in the JSON data but got " + data['storeIds']);
        }
        // validate the optional field `visa`
        if (data['visa']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['visa']);
        }

        return true;
    }


}



/**
 * Bancontact details.
 * @member {module:model/BcmcInfo} bcmc
 */
UpdatePaymentMethodInfo.prototype['bcmc'] = undefined;

/**
 * Cartes Bancaires details.
 * @member {module:model/CartesBancairesInfo} cartesBancaires
 */
UpdatePaymentMethodInfo.prototype['cartesBancaires'] = undefined;

/**
 * The list of countries where a payment method is available. By default, all countries supported by the payment method.
 * @member {Array.<String>} countries
 */
UpdatePaymentMethodInfo.prototype['countries'] = undefined;

/**
 * China Union Pay details.
 * @member {module:model/GenericPmWithTdiInfo} cup
 */
UpdatePaymentMethodInfo.prototype['cup'] = undefined;

/**
 * The list of currencies that a payment method supports. By default, all currencies supported by the payment method.
 * @member {Array.<String>} currencies
 */
UpdatePaymentMethodInfo.prototype['currencies'] = undefined;

/**
 * Custom routing flags for acquirer routing.
 * @member {Array.<String>} customRoutingFlags
 */
UpdatePaymentMethodInfo.prototype['customRoutingFlags'] = undefined;

/**
 * Diners details.
 * @member {module:model/GenericPmWithTdiInfo} diners
 */
UpdatePaymentMethodInfo.prototype['diners'] = undefined;

/**
 * Discover details.
 * @member {module:model/GenericPmWithTdiInfo} discover
 */
UpdatePaymentMethodInfo.prototype['discover'] = undefined;

/**
 * Eftpos Australia details.
 * @member {module:model/GenericPmWithTdiInfo} eftpos_australia
 */
UpdatePaymentMethodInfo.prototype['eftpos_australia'] = undefined;

/**
 * Indicates whether the payment method is enabled (**true**) or disabled (**false**).
 * @member {Boolean} enabled
 */
UpdatePaymentMethodInfo.prototype['enabled'] = undefined;

/**
 * Girocard details.
 * @member {module:model/GenericPmWithTdiInfo} girocard
 */
UpdatePaymentMethodInfo.prototype['girocard'] = undefined;

/**
 * iDeal details.
 * @member {module:model/GenericPmWithTdiInfo} ideal
 */
UpdatePaymentMethodInfo.prototype['ideal'] = undefined;

/**
 * Interac Card details.
 * @member {module:model/GenericPmWithTdiInfo} interac_card
 */
UpdatePaymentMethodInfo.prototype['interac_card'] = undefined;

/**
 * JCB details.
 * @member {module:model/GenericPmWithTdiInfo} jcb
 */
UpdatePaymentMethodInfo.prototype['jcb'] = undefined;

/**
 * Maestro details.
 * @member {module:model/GenericPmWithTdiInfo} maestro
 */
UpdatePaymentMethodInfo.prototype['maestro'] = undefined;

/**
 * MasterCard details.
 * @member {module:model/GenericPmWithTdiInfo} mc
 */
UpdatePaymentMethodInfo.prototype['mc'] = undefined;

/**
 * The list of stores for this payment method
 * @member {Array.<String>} storeIds
 */
UpdatePaymentMethodInfo.prototype['storeIds'] = undefined;

/**
 * Visa details.
 * @member {module:model/GenericPmWithTdiInfo} visa
 */
UpdatePaymentMethodInfo.prototype['visa'] = undefined;






export default UpdatePaymentMethodInfo;

