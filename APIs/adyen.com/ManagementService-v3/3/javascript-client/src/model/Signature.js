/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Signature model module.
 * @module model/Signature
 * @version 3
 */
class Signature {
    /**
     * Constructs a new <code>Signature</code>.
     * @alias module:model/Signature
     */
    constructor() { 
        
        Signature.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Signature</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Signature} obj Optional instance to populate.
     * @return {module:model/Signature} The populated <code>Signature</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Signature();

            if (data.hasOwnProperty('askSignatureOnScreen')) {
                obj['askSignatureOnScreen'] = ApiClient.convertToType(data['askSignatureOnScreen'], 'Boolean');
            }
            if (data.hasOwnProperty('deviceName')) {
                obj['deviceName'] = ApiClient.convertToType(data['deviceName'], 'String');
            }
            if (data.hasOwnProperty('deviceSlogan')) {
                obj['deviceSlogan'] = ApiClient.convertToType(data['deviceSlogan'], 'String');
            }
            if (data.hasOwnProperty('skipSignature')) {
                obj['skipSignature'] = ApiClient.convertToType(data['skipSignature'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Signature</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Signature</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deviceName'] && !(typeof data['deviceName'] === 'string' || data['deviceName'] instanceof String)) {
            throw new Error("Expected the field `deviceName` to be a primitive type in the JSON string but got " + data['deviceName']);
        }
        // ensure the json data is a string
        if (data['deviceSlogan'] && !(typeof data['deviceSlogan'] === 'string' || data['deviceSlogan'] instanceof String)) {
            throw new Error("Expected the field `deviceSlogan` to be a primitive type in the JSON string but got " + data['deviceSlogan']);
        }

        return true;
    }


}



/**
 * If `skipSignature` is false, indicates whether the shopper should provide a signature on the display (**true**) or on the merchant receipt (**false**).
 * @member {Boolean} askSignatureOnScreen
 */
Signature.prototype['askSignatureOnScreen'] = undefined;

/**
 * Name that identifies the terminal.
 * @member {String} deviceName
 */
Signature.prototype['deviceName'] = undefined;

/**
 * Slogan shown on the start screen of the device.
 * @member {String} deviceSlogan
 */
Signature.prototype['deviceSlogan'] = undefined;

/**
 * Skip asking for a signature. This is possible because all global card schemes (American Express, Diners, Discover, JCB, MasterCard, VISA, and UnionPay) regard a signature as optional.
 * @member {Boolean} skipSignature
 */
Signature.prototype['skipSignature'] = undefined;






export default Signature;

