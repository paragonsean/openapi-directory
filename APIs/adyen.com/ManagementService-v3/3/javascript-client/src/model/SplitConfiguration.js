/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SplitConfigurationRule from './SplitConfigurationRule';

/**
 * The SplitConfiguration model module.
 * @module model/SplitConfiguration
 * @version 3
 */
class SplitConfiguration {
    /**
     * Constructs a new <code>SplitConfiguration</code>.
     * @alias module:model/SplitConfiguration
     * @param description {String} Your description for the split configuration.
     * @param rules {Array.<module:model/SplitConfigurationRule>} Array of rules that define the split configuration behavior.
     */
    constructor(description, rules) { 
        
        SplitConfiguration.initialize(this, description, rules);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, rules) { 
        obj['description'] = description;
        obj['rules'] = rules;
    }

    /**
     * Constructs a <code>SplitConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SplitConfiguration} obj Optional instance to populate.
     * @return {module:model/SplitConfiguration} The populated <code>SplitConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SplitConfiguration();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('rules')) {
                obj['rules'] = ApiClient.convertToType(data['rules'], [SplitConfigurationRule]);
            }
            if (data.hasOwnProperty('splitConfigurationId')) {
                obj['splitConfigurationId'] = ApiClient.convertToType(data['splitConfigurationId'], 'String');
            }
            if (data.hasOwnProperty('stores')) {
                obj['stores'] = ApiClient.convertToType(data['stores'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SplitConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SplitConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SplitConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rules'])) {
                throw new Error("Expected the field `rules` to be an array in the JSON data but got " + data['rules']);
            }
            // validate the optional field `rules` (array)
            for (const item of data['rules']) {
                SplitConfigurationRule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['splitConfigurationId'] && !(typeof data['splitConfigurationId'] === 'string' || data['splitConfigurationId'] instanceof String)) {
            throw new Error("Expected the field `splitConfigurationId` to be a primitive type in the JSON string but got " + data['splitConfigurationId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['stores'])) {
            throw new Error("Expected the field `stores` to be an array in the JSON data but got " + data['stores']);
        }

        return true;
    }


}

SplitConfiguration.RequiredProperties = ["description", "rules"];

/**
 * Your description for the split configuration.
 * @member {String} description
 */
SplitConfiguration.prototype['description'] = undefined;

/**
 * Array of rules that define the split configuration behavior.
 * @member {Array.<module:model/SplitConfigurationRule>} rules
 */
SplitConfiguration.prototype['rules'] = undefined;

/**
 * Unique identifier of the split configuration.
 * @member {String} splitConfigurationId
 */
SplitConfiguration.prototype['splitConfigurationId'] = undefined;

/**
 * List of stores to which the split configuration applies.
 * @member {Array.<String>} stores
 */
SplitConfiguration.prototype['stores'] = undefined;






export default SplitConfiguration;

