/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventUrl from './EventUrl';
import Key from './Key';
import Notification from './Notification';
import NotificationUrl from './NotificationUrl';

/**
 * The Nexo model module.
 * @module model/Nexo
 * @version 3
 */
class Nexo {
    /**
     * Constructs a new <code>Nexo</code>.
     * @alias module:model/Nexo
     */
    constructor() { 
        
        Nexo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Nexo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Nexo} obj Optional instance to populate.
     * @return {module:model/Nexo} The populated <code>Nexo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Nexo();

            if (data.hasOwnProperty('displayUrls')) {
                obj['displayUrls'] = NotificationUrl.constructFromObject(data['displayUrls']);
            }
            if (data.hasOwnProperty('encryptionKey')) {
                obj['encryptionKey'] = Key.constructFromObject(data['encryptionKey']);
            }
            if (data.hasOwnProperty('eventUrls')) {
                obj['eventUrls'] = EventUrl.constructFromObject(data['eventUrls']);
            }
            if (data.hasOwnProperty('nexoEventUrls')) {
                obj['nexoEventUrls'] = ApiClient.convertToType(data['nexoEventUrls'], ['String']);
            }
            if (data.hasOwnProperty('notification')) {
                obj['notification'] = Notification.constructFromObject(data['notification']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Nexo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Nexo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `displayUrls`
        if (data['displayUrls']) { // data not null
          NotificationUrl.validateJSON(data['displayUrls']);
        }
        // validate the optional field `encryptionKey`
        if (data['encryptionKey']) { // data not null
          Key.validateJSON(data['encryptionKey']);
        }
        // validate the optional field `eventUrls`
        if (data['eventUrls']) { // data not null
          EventUrl.validateJSON(data['eventUrls']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nexoEventUrls'])) {
            throw new Error("Expected the field `nexoEventUrls` to be an array in the JSON data but got " + data['nexoEventUrls']);
        }
        // validate the optional field `notification`
        if (data['notification']) { // data not null
          Notification.validateJSON(data['notification']);
        }

        return true;
    }


}



/**
 * The list of local and public URLs to send display notifications to when using Terminal API.
 * @member {module:model/NotificationUrl} displayUrls
 */
Nexo.prototype['displayUrls'] = undefined;

/**
 * The key you share with Adyen to secure local communications when using Terminal API.
 * @member {module:model/Key} encryptionKey
 */
Nexo.prototype['encryptionKey'] = undefined;

/**
 * The list of local and public URLs to send event notifications to when using Terminal API.
 * @member {module:model/EventUrl} eventUrls
 */
Nexo.prototype['eventUrls'] = undefined;

/**
 * One or more URLs to send event messages to when using Terminal API.
 * @member {Array.<String>} nexoEventUrls
 */
Nexo.prototype['nexoEventUrls'] = undefined;

/**
 * Configures sending event notifications by pressing a button on a terminal, for example used for pay-at-table.
 * @member {module:model/Notification} notification
 */
Nexo.prototype['notification'] = undefined;






export default Nexo;

