/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaginationLinks from './PaginationLinks';
import PaymentMethod from './PaymentMethod';

/**
 * The PaymentMethodResponse model module.
 * @module model/PaymentMethodResponse
 * @version 3
 */
class PaymentMethodResponse {
    /**
     * Constructs a new <code>PaymentMethodResponse</code>.
     * @alias module:model/PaymentMethodResponse
     * @param itemsTotal {Number} Total number of items.
     * @param pagesTotal {Number} Total number of pages.
     */
    constructor(itemsTotal, pagesTotal) { 
        
        PaymentMethodResponse.initialize(this, itemsTotal, pagesTotal);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, itemsTotal, pagesTotal) { 
        obj['itemsTotal'] = itemsTotal;
        obj['pagesTotal'] = pagesTotal;
    }

    /**
     * Constructs a <code>PaymentMethodResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentMethodResponse} obj Optional instance to populate.
     * @return {module:model/PaymentMethodResponse} The populated <code>PaymentMethodResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentMethodResponse();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = PaginationLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [PaymentMethod]);
            }
            if (data.hasOwnProperty('itemsTotal')) {
                obj['itemsTotal'] = ApiClient.convertToType(data['itemsTotal'], 'Number');
            }
            if (data.hasOwnProperty('pagesTotal')) {
                obj['pagesTotal'] = ApiClient.convertToType(data['pagesTotal'], 'Number');
            }
            if (data.hasOwnProperty('typesWithErrors')) {
                obj['typesWithErrors'] = ApiClient.convertToType(data['typesWithErrors'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentMethodResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentMethodResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentMethodResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          PaginationLinks.validateJSON(data['_links']);
        }
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                PaymentMethod.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['typesWithErrors'])) {
            throw new Error("Expected the field `typesWithErrors` to be an array in the JSON data but got " + data['typesWithErrors']);
        }

        return true;
    }


}

PaymentMethodResponse.RequiredProperties = ["itemsTotal", "pagesTotal"];

/**
 * Pagination references.
 * @member {module:model/PaginationLinks} _links
 */
PaymentMethodResponse.prototype['_links'] = undefined;

/**
 * The list of supported payment methods and their details.
 * @member {Array.<module:model/PaymentMethod>} data
 */
PaymentMethodResponse.prototype['data'] = undefined;

/**
 * Total number of items.
 * @member {Number} itemsTotal
 */
PaymentMethodResponse.prototype['itemsTotal'] = undefined;

/**
 * Total number of pages.
 * @member {Number} pagesTotal
 */
PaymentMethodResponse.prototype['pagesTotal'] = undefined;

/**
 * Payment method types with errors.
 * @member {Array.<module:model/PaymentMethodResponse.TypesWithErrorsEnum>} typesWithErrors
 */
PaymentMethodResponse.prototype['typesWithErrors'] = undefined;





/**
 * Allowed values for the <code>typesWithErrors</code> property.
 * @enum {String}
 * @readonly
 */
PaymentMethodResponse['TypesWithErrorsEnum'] = {

    /**
     * value: "afterpaytouch"
     * @const
     */
    "afterpaytouch": "afterpaytouch",

    /**
     * value: "alipay"
     * @const
     */
    "alipay": "alipay",

    /**
     * value: "alipay_hk"
     * @const
     */
    "alipay_hk": "alipay_hk",

    /**
     * value: "amex"
     * @const
     */
    "amex": "amex",

    /**
     * value: "applepay"
     * @const
     */
    "applepay": "applepay",

    /**
     * value: "bcmc"
     * @const
     */
    "bcmc": "bcmc",

    /**
     * value: "blik"
     * @const
     */
    "blik": "blik",

    /**
     * value: "cartebancaire"
     * @const
     */
    "cartebancaire": "cartebancaire",

    /**
     * value: "clearpay"
     * @const
     */
    "clearpay": "clearpay",

    /**
     * value: "cup"
     * @const
     */
    "cup": "cup",

    /**
     * value: "diners"
     * @const
     */
    "diners": "diners",

    /**
     * value: "directdebit_GB"
     * @const
     */
    "directdebit_GB": "directdebit_GB",

    /**
     * value: "discover"
     * @const
     */
    "discover": "discover",

    /**
     * value: "ebanking_FI"
     * @const
     */
    "ebanking_FI": "ebanking_FI",

    /**
     * value: "eftpos_australia"
     * @const
     */
    "eftpos_australia": "eftpos_australia",

    /**
     * value: "elo"
     * @const
     */
    "elo": "elo",

    /**
     * value: "elocredit"
     * @const
     */
    "elocredit": "elocredit",

    /**
     * value: "elodebit"
     * @const
     */
    "elodebit": "elodebit",

    /**
     * value: "girocard"
     * @const
     */
    "girocard": "girocard",

    /**
     * value: "googlepay"
     * @const
     */
    "googlepay": "googlepay",

    /**
     * value: "hiper"
     * @const
     */
    "hiper": "hiper",

    /**
     * value: "hipercard"
     * @const
     */
    "hipercard": "hipercard",

    /**
     * value: "ideal"
     * @const
     */
    "ideal": "ideal",

    /**
     * value: "interac_card"
     * @const
     */
    "interac_card": "interac_card",

    /**
     * value: "jcb"
     * @const
     */
    "jcb": "jcb",

    /**
     * value: "klarna"
     * @const
     */
    "klarna": "klarna",

    /**
     * value: "klarna_account"
     * @const
     */
    "klarna_account": "klarna_account",

    /**
     * value: "klarna_paynow"
     * @const
     */
    "klarna_paynow": "klarna_paynow",

    /**
     * value: "maestro"
     * @const
     */
    "maestro": "maestro",

    /**
     * value: "mbway"
     * @const
     */
    "mbway": "mbway",

    /**
     * value: "mc"
     * @const
     */
    "mc": "mc",

    /**
     * value: "mcdebit"
     * @const
     */
    "mcdebit": "mcdebit",

    /**
     * value: "mealVoucher_FR"
     * @const
     */
    "mealVoucher_FR": "mealVoucher_FR",

    /**
     * value: "mobilepay"
     * @const
     */
    "mobilepay": "mobilepay",

    /**
     * value: "multibanco"
     * @const
     */
    "multibanco": "multibanco",

    /**
     * value: "onlineBanking_PL"
     * @const
     */
    "onlineBanking_PL": "onlineBanking_PL",

    /**
     * value: "paybybank"
     * @const
     */
    "paybybank": "paybybank",

    /**
     * value: "paypal"
     * @const
     */
    "paypal": "paypal",

    /**
     * value: "payshop"
     * @const
     */
    "payshop": "payshop",

    /**
     * value: "swish"
     * @const
     */
    "swish": "swish",

    /**
     * value: "trustly"
     * @const
     */
    "trustly": "trustly",

    /**
     * value: "twint"
     * @const
     */
    "twint": "twint",

    /**
     * value: "twint_pos"
     * @const
     */
    "twint_pos": "twint_pos",

    /**
     * value: "vipps"
     * @const
     */
    "vipps": "vipps",

    /**
     * value: "visa"
     * @const
     */
    "visa": "visa",

    /**
     * value: "visadebit"
     * @const
     */
    "visadebit": "visadebit",

    /**
     * value: "vpay"
     * @const
     */
    "vpay": "vpay",

    /**
     * value: "wechatpay"
     * @const
     */
    "wechatpay": "wechatpay",

    /**
     * value: "wechatpay_pos"
     * @const
     */
    "wechatpay_pos": "wechatpay_pos"
};



export default PaymentMethodResponse;

