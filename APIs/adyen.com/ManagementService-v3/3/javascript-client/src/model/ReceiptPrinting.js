/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReceiptPrinting model module.
 * @module model/ReceiptPrinting
 * @version 3
 */
class ReceiptPrinting {
    /**
     * Constructs a new <code>ReceiptPrinting</code>.
     * @alias module:model/ReceiptPrinting
     */
    constructor() { 
        
        ReceiptPrinting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReceiptPrinting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReceiptPrinting} obj Optional instance to populate.
     * @return {module:model/ReceiptPrinting} The populated <code>ReceiptPrinting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReceiptPrinting();

            if (data.hasOwnProperty('merchantApproved')) {
                obj['merchantApproved'] = ApiClient.convertToType(data['merchantApproved'], 'Boolean');
            }
            if (data.hasOwnProperty('merchantCancelled')) {
                obj['merchantCancelled'] = ApiClient.convertToType(data['merchantCancelled'], 'Boolean');
            }
            if (data.hasOwnProperty('merchantCaptureApproved')) {
                obj['merchantCaptureApproved'] = ApiClient.convertToType(data['merchantCaptureApproved'], 'Boolean');
            }
            if (data.hasOwnProperty('merchantCaptureRefused')) {
                obj['merchantCaptureRefused'] = ApiClient.convertToType(data['merchantCaptureRefused'], 'Boolean');
            }
            if (data.hasOwnProperty('merchantRefundApproved')) {
                obj['merchantRefundApproved'] = ApiClient.convertToType(data['merchantRefundApproved'], 'Boolean');
            }
            if (data.hasOwnProperty('merchantRefundRefused')) {
                obj['merchantRefundRefused'] = ApiClient.convertToType(data['merchantRefundRefused'], 'Boolean');
            }
            if (data.hasOwnProperty('merchantRefused')) {
                obj['merchantRefused'] = ApiClient.convertToType(data['merchantRefused'], 'Boolean');
            }
            if (data.hasOwnProperty('merchantVoid')) {
                obj['merchantVoid'] = ApiClient.convertToType(data['merchantVoid'], 'Boolean');
            }
            if (data.hasOwnProperty('shopperApproved')) {
                obj['shopperApproved'] = ApiClient.convertToType(data['shopperApproved'], 'Boolean');
            }
            if (data.hasOwnProperty('shopperCancelled')) {
                obj['shopperCancelled'] = ApiClient.convertToType(data['shopperCancelled'], 'Boolean');
            }
            if (data.hasOwnProperty('shopperCaptureApproved')) {
                obj['shopperCaptureApproved'] = ApiClient.convertToType(data['shopperCaptureApproved'], 'Boolean');
            }
            if (data.hasOwnProperty('shopperCaptureRefused')) {
                obj['shopperCaptureRefused'] = ApiClient.convertToType(data['shopperCaptureRefused'], 'Boolean');
            }
            if (data.hasOwnProperty('shopperRefundApproved')) {
                obj['shopperRefundApproved'] = ApiClient.convertToType(data['shopperRefundApproved'], 'Boolean');
            }
            if (data.hasOwnProperty('shopperRefundRefused')) {
                obj['shopperRefundRefused'] = ApiClient.convertToType(data['shopperRefundRefused'], 'Boolean');
            }
            if (data.hasOwnProperty('shopperRefused')) {
                obj['shopperRefused'] = ApiClient.convertToType(data['shopperRefused'], 'Boolean');
            }
            if (data.hasOwnProperty('shopperVoid')) {
                obj['shopperVoid'] = ApiClient.convertToType(data['shopperVoid'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReceiptPrinting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReceiptPrinting</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Print a merchant receipt when the payment is approved.
 * @member {Boolean} merchantApproved
 */
ReceiptPrinting.prototype['merchantApproved'] = undefined;

/**
 * Print a merchant receipt when the transaction is cancelled.
 * @member {Boolean} merchantCancelled
 */
ReceiptPrinting.prototype['merchantCancelled'] = undefined;

/**
 * Print a merchant receipt when capturing the payment is approved.
 * @member {Boolean} merchantCaptureApproved
 */
ReceiptPrinting.prototype['merchantCaptureApproved'] = undefined;

/**
 * Print a merchant receipt when capturing the payment is refused.
 * @member {Boolean} merchantCaptureRefused
 */
ReceiptPrinting.prototype['merchantCaptureRefused'] = undefined;

/**
 * Print a merchant receipt when the refund is approved.
 * @member {Boolean} merchantRefundApproved
 */
ReceiptPrinting.prototype['merchantRefundApproved'] = undefined;

/**
 * Print a merchant receipt when the refund is refused.
 * @member {Boolean} merchantRefundRefused
 */
ReceiptPrinting.prototype['merchantRefundRefused'] = undefined;

/**
 * Print a merchant receipt when the payment is refused.
 * @member {Boolean} merchantRefused
 */
ReceiptPrinting.prototype['merchantRefused'] = undefined;

/**
 * Print a merchant receipt when a previous transaction is voided.
 * @member {Boolean} merchantVoid
 */
ReceiptPrinting.prototype['merchantVoid'] = undefined;

/**
 * Print a shopper receipt when the payment is approved.
 * @member {Boolean} shopperApproved
 */
ReceiptPrinting.prototype['shopperApproved'] = undefined;

/**
 * Print a shopper receipt when the transaction is cancelled.
 * @member {Boolean} shopperCancelled
 */
ReceiptPrinting.prototype['shopperCancelled'] = undefined;

/**
 * Print a shopper receipt when capturing the payment is approved.
 * @member {Boolean} shopperCaptureApproved
 */
ReceiptPrinting.prototype['shopperCaptureApproved'] = undefined;

/**
 * Print a shopper receipt when capturing the payment is refused.
 * @member {Boolean} shopperCaptureRefused
 */
ReceiptPrinting.prototype['shopperCaptureRefused'] = undefined;

/**
 * Print a shopper receipt when the refund is approved.
 * @member {Boolean} shopperRefundApproved
 */
ReceiptPrinting.prototype['shopperRefundApproved'] = undefined;

/**
 * Print a shopper receipt when the refund is refused.
 * @member {Boolean} shopperRefundRefused
 */
ReceiptPrinting.prototype['shopperRefundRefused'] = undefined;

/**
 * Print a shopper receipt when the payment is refused.
 * @member {Boolean} shopperRefused
 */
ReceiptPrinting.prototype['shopperRefused'] = undefined;

/**
 * Print a shopper receipt when a previous transaction is voided.
 * @member {Boolean} shopperVoid
 */
ReceiptPrinting.prototype['shopperVoid'] = undefined;






export default ReceiptPrinting;

