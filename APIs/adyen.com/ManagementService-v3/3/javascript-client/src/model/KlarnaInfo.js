/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KlarnaInfo model module.
 * @module model/KlarnaInfo
 * @version 3
 */
class KlarnaInfo {
    /**
     * Constructs a new <code>KlarnaInfo</code>.
     * @alias module:model/KlarnaInfo
     * @param disputeEmail {String} The email address for disputes.
     * @param region {module:model/KlarnaInfo.RegionEnum} The region of operation. For example, **NA**, **EU**, **CH**, **AU**.
     * @param supportEmail {String} The email address of merchant support.
     */
    constructor(disputeEmail, region, supportEmail) { 
        
        KlarnaInfo.initialize(this, disputeEmail, region, supportEmail);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, disputeEmail, region, supportEmail) { 
        obj['disputeEmail'] = disputeEmail;
        obj['region'] = region;
        obj['supportEmail'] = supportEmail;
    }

    /**
     * Constructs a <code>KlarnaInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KlarnaInfo} obj Optional instance to populate.
     * @return {module:model/KlarnaInfo} The populated <code>KlarnaInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KlarnaInfo();

            if (data.hasOwnProperty('autoCapture')) {
                obj['autoCapture'] = ApiClient.convertToType(data['autoCapture'], 'Boolean');
            }
            if (data.hasOwnProperty('disputeEmail')) {
                obj['disputeEmail'] = ApiClient.convertToType(data['disputeEmail'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('supportEmail')) {
                obj['supportEmail'] = ApiClient.convertToType(data['supportEmail'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KlarnaInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KlarnaInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of KlarnaInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['disputeEmail'] && !(typeof data['disputeEmail'] === 'string' || data['disputeEmail'] instanceof String)) {
            throw new Error("Expected the field `disputeEmail` to be a primitive type in the JSON string but got " + data['disputeEmail']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['supportEmail'] && !(typeof data['supportEmail'] === 'string' || data['supportEmail'] instanceof String)) {
            throw new Error("Expected the field `supportEmail` to be a primitive type in the JSON string but got " + data['supportEmail']);
        }

        return true;
    }


}

KlarnaInfo.RequiredProperties = ["disputeEmail", "region", "supportEmail"];

/**
 * Indicates the status of [Automatic capture](https://docs.adyen.com/online-payments/capture#automatic-capture). Default value: **false**.
 * @member {Boolean} autoCapture
 */
KlarnaInfo.prototype['autoCapture'] = undefined;

/**
 * The email address for disputes.
 * @member {String} disputeEmail
 */
KlarnaInfo.prototype['disputeEmail'] = undefined;

/**
 * The region of operation. For example, **NA**, **EU**, **CH**, **AU**.
 * @member {module:model/KlarnaInfo.RegionEnum} region
 */
KlarnaInfo.prototype['region'] = undefined;

/**
 * The email address of merchant support.
 * @member {String} supportEmail
 */
KlarnaInfo.prototype['supportEmail'] = undefined;





/**
 * Allowed values for the <code>region</code> property.
 * @enum {String}
 * @readonly
 */
KlarnaInfo['RegionEnum'] = {

    /**
     * value: "NA"
     * @const
     */
    "NA": "NA",

    /**
     * value: "EU"
     * @const
     */
    "EU": "EU",

    /**
     * value: "CH"
     * @const
     */
    "CH": "CH",

    /**
     * value: "AU"
     * @const
     */
    "AU": "AU"
};



export default KlarnaInfo;

