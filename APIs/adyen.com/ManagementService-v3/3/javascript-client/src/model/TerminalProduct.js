/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TerminalProductPrice from './TerminalProductPrice';

/**
 * The TerminalProduct model module.
 * @module model/TerminalProduct
 * @version 3
 */
class TerminalProduct {
    /**
     * Constructs a new <code>TerminalProduct</code>.
     * @alias module:model/TerminalProduct
     */
    constructor() { 
        
        TerminalProduct.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TerminalProduct</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TerminalProduct} obj Optional instance to populate.
     * @return {module:model/TerminalProduct} The populated <code>TerminalProduct</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TerminalProduct();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('itemsIncluded')) {
                obj['itemsIncluded'] = ApiClient.convertToType(data['itemsIncluded'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = TerminalProductPrice.constructFromObject(data['price']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TerminalProduct</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TerminalProduct</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['itemsIncluded'])) {
            throw new Error("Expected the field `itemsIncluded` to be an array in the JSON data but got " + data['itemsIncluded']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          TerminalProductPrice.validateJSON(data['price']);
        }

        return true;
    }


}



/**
 * Information about items included and integration options.
 * @member {String} description
 */
TerminalProduct.prototype['description'] = undefined;

/**
 * The unique identifier of the product.
 * @member {String} id
 */
TerminalProduct.prototype['id'] = undefined;

/**
 * A list of parts included in the terminal package.
 * @member {Array.<String>} itemsIncluded
 */
TerminalProduct.prototype['itemsIncluded'] = undefined;

/**
 * The descriptive name of the product.
 * @member {String} name
 */
TerminalProduct.prototype['name'] = undefined;

/**
 * The price of the product.
 * @member {module:model/TerminalProductPrice} price
 */
TerminalProduct.prototype['price'] = undefined;






export default TerminalProduct;

