/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Links from './Links';
import StoreLocation from './StoreLocation';
import StoreSplitConfiguration from './StoreSplitConfiguration';

/**
 * The Store model module.
 * @module model/Store
 * @version 3
 */
class Store {
    /**
     * Constructs a new <code>Store</code>.
     * @alias module:model/Store
     */
    constructor() { 
        
        Store.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Store</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Store} obj Optional instance to populate.
     * @return {module:model/Store} The populated <code>Store</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Store();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = Links.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = StoreLocation.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('businessLineIds')) {
                obj['businessLineIds'] = ApiClient.convertToType(data['businessLineIds'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('externalReferenceId')) {
                obj['externalReferenceId'] = ApiClient.convertToType(data['externalReferenceId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('merchantId')) {
                obj['merchantId'] = ApiClient.convertToType(data['merchantId'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('shopperStatement')) {
                obj['shopperStatement'] = ApiClient.convertToType(data['shopperStatement'], 'String');
            }
            if (data.hasOwnProperty('splitConfiguration')) {
                obj['splitConfiguration'] = StoreSplitConfiguration.constructFromObject(data['splitConfiguration']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Store</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Store</code>.
     */
    static validateJSON(data) {
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          Links.validateJSON(data['_links']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          StoreLocation.validateJSON(data['address']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['businessLineIds'])) {
            throw new Error("Expected the field `businessLineIds` to be an array in the JSON data but got " + data['businessLineIds']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['externalReferenceId'] && !(typeof data['externalReferenceId'] === 'string' || data['externalReferenceId'] instanceof String)) {
            throw new Error("Expected the field `externalReferenceId` to be a primitive type in the JSON string but got " + data['externalReferenceId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['merchantId'] && !(typeof data['merchantId'] === 'string' || data['merchantId'] instanceof String)) {
            throw new Error("Expected the field `merchantId` to be a primitive type in the JSON string but got " + data['merchantId']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['shopperStatement'] && !(typeof data['shopperStatement'] === 'string' || data['shopperStatement'] instanceof String)) {
            throw new Error("Expected the field `shopperStatement` to be a primitive type in the JSON string but got " + data['shopperStatement']);
        }
        // validate the optional field `splitConfiguration`
        if (data['splitConfiguration']) { // data not null
          StoreSplitConfiguration.validateJSON(data['splitConfiguration']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Reference to resources connected with the store.
 * @member {module:model/Links} _links
 */
Store.prototype['_links'] = undefined;

/**
 * The address of the store.
 * @member {module:model/StoreLocation} address
 */
Store.prototype['address'] = undefined;

/**
 * The unique identifiers of the [business lines](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businesslines__resParam_id) that the store is associated with.  If not specified, the business line of the merchant account is used. Required when there are multiple business lines under the merchant account.
 * @member {Array.<String>} businessLineIds
 */
Store.prototype['businessLineIds'] = undefined;

/**
 * The description of the store.
 * @member {String} description
 */
Store.prototype['description'] = undefined;

/**
 * The unique identifier of the store, used by certain payment methods and tax authorities. Accepts up to 14 digits.  Required for CNPJ in Brazil, in the format 00.000.000/00git00-00 separated by dots, slashes, hyphens, or without separators.  Optional for Zip in Australia and SIRET in France, required except for nonprofit organizations and incorporated associations.  
 * @member {String} externalReferenceId
 */
Store.prototype['externalReferenceId'] = undefined;

/**
 * The unique identifier of the store. This value is generated by Adyen.
 * @member {String} id
 */
Store.prototype['id'] = undefined;

/**
 * The unique identifier of the merchant account that the store belongs to.
 * @member {String} merchantId
 */
Store.prototype['merchantId'] = undefined;

/**
 * The phone number of the store, including '+' and country code in the [E.164](https://en.wikipedia.org/wiki/E.164) format. If passed in a different format, we convert and validate the phone number against E.164. 
 * @member {String} phoneNumber
 */
Store.prototype['phoneNumber'] = undefined;

/**
 * A reference to recognize the store by. Also known as the store code.  Allowed characters: lowercase and uppercase letters without diacritics, numbers 0 through 9, hyphen (-), and underscore (_)
 * @member {String} reference
 */
Store.prototype['reference'] = undefined;

/**
 * The store name shown on the shopper's bank or credit card statement and on the shopper receipt.
 * @member {String} shopperStatement
 */
Store.prototype['shopperStatement'] = undefined;

/**
 * Rules for Adyen for Platforms merchants to split the transaction amount and fees.
 * @member {module:model/StoreSplitConfiguration} splitConfiguration
 */
Store.prototype['splitConfiguration'] = undefined;

/**
 * The status of the store. Possible values are:  - **active**. This value is assigned automatically when a store is created.  - **inactive**. The terminals under the store are blocked from accepting new transactions, but capturing outstanding transactions is still possible. - **closed**. This status is irreversible. The terminals under the store are reassigned to the merchant inventory.
 * @member {module:model/Store.StatusEnum} status
 */
Store.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Store['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "closed"
     * @const
     */
    "closed": "closed",

    /**
     * value: "inactive"
     * @const
     */
    "inactive": "inactive"
};



export default Store;

