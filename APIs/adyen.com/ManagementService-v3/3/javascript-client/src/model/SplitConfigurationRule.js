/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SplitConfigurationLogic from './SplitConfigurationLogic';

/**
 * The SplitConfigurationRule model module.
 * @module model/SplitConfigurationRule
 * @version 3
 */
class SplitConfigurationRule {
    /**
     * Constructs a new <code>SplitConfigurationRule</code>.
     * @alias module:model/SplitConfigurationRule
     * @param currency {String} The currency condition that defines whether the split logic applies. Its value must be a three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).
     * @param paymentMethod {String} The payment method condition that defines whether the split logic applies.  Possible values: * [Payment method variant](https://docs.adyen.com/development-resources/paymentmethodvariant): Apply the split logic for a specific payment method. * **ANY**: Apply the split logic for all available payment methods.
     * @param shopperInteraction {module:model/SplitConfigurationRule.ShopperInteractionEnum} The sales channel condition that defines whether the split logic applies.  Possible values: * **Ecommerce**: Online transactions where the cardholder is present. * **ContAuth**: Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). * **Moto**: Mail-order and telephone-order transactions where the customer is in contact with the merchant via email or telephone. * **POS**: Point-of-sale transactions where the customer is physically present to make a payment using a secure payment terminal. * **ANY**: All sales channels.
     * @param splitLogic {module:model/SplitConfigurationLogic} Contains the split logic that is applied if the rule conditions are met.
     */
    constructor(currency, paymentMethod, shopperInteraction, splitLogic) { 
        
        SplitConfigurationRule.initialize(this, currency, paymentMethod, shopperInteraction, splitLogic);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currency, paymentMethod, shopperInteraction, splitLogic) { 
        obj['currency'] = currency;
        obj['paymentMethod'] = paymentMethod;
        obj['shopperInteraction'] = shopperInteraction;
        obj['splitLogic'] = splitLogic;
    }

    /**
     * Constructs a <code>SplitConfigurationRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SplitConfigurationRule} obj Optional instance to populate.
     * @return {module:model/SplitConfigurationRule} The populated <code>SplitConfigurationRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SplitConfigurationRule();

            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('fundingSource')) {
                obj['fundingSource'] = ApiClient.convertToType(data['fundingSource'], 'String');
            }
            if (data.hasOwnProperty('paymentMethod')) {
                obj['paymentMethod'] = ApiClient.convertToType(data['paymentMethod'], 'String');
            }
            if (data.hasOwnProperty('ruleId')) {
                obj['ruleId'] = ApiClient.convertToType(data['ruleId'], 'String');
            }
            if (data.hasOwnProperty('shopperInteraction')) {
                obj['shopperInteraction'] = ApiClient.convertToType(data['shopperInteraction'], 'String');
            }
            if (data.hasOwnProperty('splitLogic')) {
                obj['splitLogic'] = SplitConfigurationLogic.constructFromObject(data['splitLogic']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SplitConfigurationRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SplitConfigurationRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SplitConfigurationRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['fundingSource'] && !(typeof data['fundingSource'] === 'string' || data['fundingSource'] instanceof String)) {
            throw new Error("Expected the field `fundingSource` to be a primitive type in the JSON string but got " + data['fundingSource']);
        }
        // ensure the json data is a string
        if (data['paymentMethod'] && !(typeof data['paymentMethod'] === 'string' || data['paymentMethod'] instanceof String)) {
            throw new Error("Expected the field `paymentMethod` to be a primitive type in the JSON string but got " + data['paymentMethod']);
        }
        // ensure the json data is a string
        if (data['ruleId'] && !(typeof data['ruleId'] === 'string' || data['ruleId'] instanceof String)) {
            throw new Error("Expected the field `ruleId` to be a primitive type in the JSON string but got " + data['ruleId']);
        }
        // ensure the json data is a string
        if (data['shopperInteraction'] && !(typeof data['shopperInteraction'] === 'string' || data['shopperInteraction'] instanceof String)) {
            throw new Error("Expected the field `shopperInteraction` to be a primitive type in the JSON string but got " + data['shopperInteraction']);
        }
        // validate the optional field `splitLogic`
        if (data['splitLogic']) { // data not null
          SplitConfigurationLogic.validateJSON(data['splitLogic']);
        }

        return true;
    }


}

SplitConfigurationRule.RequiredProperties = ["currency", "paymentMethod", "shopperInteraction", "splitLogic"];

/**
 * The currency condition that defines whether the split logic applies. Its value must be a three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).
 * @member {String} currency
 */
SplitConfigurationRule.prototype['currency'] = undefined;

/**
 * The funding source condition of the payment method (only for cards).  Possible values: **credit**, **debit**, or **ANY**.
 * @member {module:model/SplitConfigurationRule.FundingSourceEnum} fundingSource
 */
SplitConfigurationRule.prototype['fundingSource'] = undefined;

/**
 * The payment method condition that defines whether the split logic applies.  Possible values: * [Payment method variant](https://docs.adyen.com/development-resources/paymentmethodvariant): Apply the split logic for a specific payment method. * **ANY**: Apply the split logic for all available payment methods.
 * @member {String} paymentMethod
 */
SplitConfigurationRule.prototype['paymentMethod'] = undefined;

/**
 * The unique identifier of the split configuration rule.
 * @member {String} ruleId
 */
SplitConfigurationRule.prototype['ruleId'] = undefined;

/**
 * The sales channel condition that defines whether the split logic applies.  Possible values: * **Ecommerce**: Online transactions where the cardholder is present. * **ContAuth**: Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). * **Moto**: Mail-order and telephone-order transactions where the customer is in contact with the merchant via email or telephone. * **POS**: Point-of-sale transactions where the customer is physically present to make a payment using a secure payment terminal. * **ANY**: All sales channels.
 * @member {module:model/SplitConfigurationRule.ShopperInteractionEnum} shopperInteraction
 */
SplitConfigurationRule.prototype['shopperInteraction'] = undefined;

/**
 * Contains the split logic that is applied if the rule conditions are met.
 * @member {module:model/SplitConfigurationLogic} splitLogic
 */
SplitConfigurationRule.prototype['splitLogic'] = undefined;





/**
 * Allowed values for the <code>fundingSource</code> property.
 * @enum {String}
 * @readonly
 */
SplitConfigurationRule['FundingSourceEnum'] = {

    /**
     * value: "credit"
     * @const
     */
    "credit": "credit",

    /**
     * value: "debit"
     * @const
     */
    "debit": "debit",

    /**
     * value: "ANY"
     * @const
     */
    "ANY": "ANY"
};


/**
 * Allowed values for the <code>shopperInteraction</code> property.
 * @enum {String}
 * @readonly
 */
SplitConfigurationRule['ShopperInteractionEnum'] = {

    /**
     * value: "Ecommerce"
     * @const
     */
    "Ecommerce": "Ecommerce",

    /**
     * value: "ContAuth"
     * @const
     */
    "ContAuth": "ContAuth",

    /**
     * value: "Moto"
     * @const
     */
    "Moto": "Moto",

    /**
     * value: "POS"
     * @const
     */
    "POS": "POS",

    /**
     * value: "ANY"
     * @const
     */
    "ANY": "ANY"
};



export default SplitConfigurationRule;

