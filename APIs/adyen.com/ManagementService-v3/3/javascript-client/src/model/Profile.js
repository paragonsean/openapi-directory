/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Profile model module.
 * @module model/Profile
 * @version 3
 */
class Profile {
    /**
     * Constructs a new <code>Profile</code>.
     * @alias module:model/Profile
     * @param authType {String} The type of Wi-Fi network. Possible values: **wpa-psk**, **wpa2-psk**, **wpa-eap**, **wpa2-eap**.
     * @param bssType {String} Use **infra** for infrastructure-based networks. This applies to most networks. Use **adhoc** only if the communication is p2p-based between base stations.
     * @param ssid {String} The name of the wireless network.
     * @param wsec {String} The type of encryption. Possible values: **auto**, **ccmp** (recommended), **tkip**
     */
    constructor(authType, bssType, ssid, wsec) { 
        
        Profile.initialize(this, authType, bssType, ssid, wsec);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authType, bssType, ssid, wsec) { 
        obj['authType'] = authType;
        obj['bssType'] = bssType;
        obj['ssid'] = ssid;
        obj['wsec'] = wsec;
    }

    /**
     * Constructs a <code>Profile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Profile} obj Optional instance to populate.
     * @return {module:model/Profile} The populated <code>Profile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Profile();

            if (data.hasOwnProperty('authType')) {
                obj['authType'] = ApiClient.convertToType(data['authType'], 'String');
            }
            if (data.hasOwnProperty('autoWifi')) {
                obj['autoWifi'] = ApiClient.convertToType(data['autoWifi'], 'Boolean');
            }
            if (data.hasOwnProperty('bssType')) {
                obj['bssType'] = ApiClient.convertToType(data['bssType'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'Number');
            }
            if (data.hasOwnProperty('defaultProfile')) {
                obj['defaultProfile'] = ApiClient.convertToType(data['defaultProfile'], 'Boolean');
            }
            if (data.hasOwnProperty('eap')) {
                obj['eap'] = ApiClient.convertToType(data['eap'], 'String');
            }
            if (data.hasOwnProperty('eapCaCert')) {
                obj['eapCaCert'] = File.constructFromObject(data['eapCaCert']);
            }
            if (data.hasOwnProperty('eapClientCert')) {
                obj['eapClientCert'] = File.constructFromObject(data['eapClientCert']);
            }
            if (data.hasOwnProperty('eapClientKey')) {
                obj['eapClientKey'] = File.constructFromObject(data['eapClientKey']);
            }
            if (data.hasOwnProperty('eapClientPwd')) {
                obj['eapClientPwd'] = ApiClient.convertToType(data['eapClientPwd'], 'String');
            }
            if (data.hasOwnProperty('eapIdentity')) {
                obj['eapIdentity'] = ApiClient.convertToType(data['eapIdentity'], 'String');
            }
            if (data.hasOwnProperty('eapIntermediateCert')) {
                obj['eapIntermediateCert'] = File.constructFromObject(data['eapIntermediateCert']);
            }
            if (data.hasOwnProperty('eapPwd')) {
                obj['eapPwd'] = ApiClient.convertToType(data['eapPwd'], 'String');
            }
            if (data.hasOwnProperty('hiddenSsid')) {
                obj['hiddenSsid'] = ApiClient.convertToType(data['hiddenSsid'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('psk')) {
                obj['psk'] = ApiClient.convertToType(data['psk'], 'String');
            }
            if (data.hasOwnProperty('ssid')) {
                obj['ssid'] = ApiClient.convertToType(data['ssid'], 'String');
            }
            if (data.hasOwnProperty('wsec')) {
                obj['wsec'] = ApiClient.convertToType(data['wsec'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Profile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Profile</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Profile.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['authType'] && !(typeof data['authType'] === 'string' || data['authType'] instanceof String)) {
            throw new Error("Expected the field `authType` to be a primitive type in the JSON string but got " + data['authType']);
        }
        // ensure the json data is a string
        if (data['bssType'] && !(typeof data['bssType'] === 'string' || data['bssType'] instanceof String)) {
            throw new Error("Expected the field `bssType` to be a primitive type in the JSON string but got " + data['bssType']);
        }
        // ensure the json data is a string
        if (data['eap'] && !(typeof data['eap'] === 'string' || data['eap'] instanceof String)) {
            throw new Error("Expected the field `eap` to be a primitive type in the JSON string but got " + data['eap']);
        }
        // validate the optional field `eapCaCert`
        if (data['eapCaCert']) { // data not null
          File.validateJSON(data['eapCaCert']);
        }
        // validate the optional field `eapClientCert`
        if (data['eapClientCert']) { // data not null
          File.validateJSON(data['eapClientCert']);
        }
        // validate the optional field `eapClientKey`
        if (data['eapClientKey']) { // data not null
          File.validateJSON(data['eapClientKey']);
        }
        // ensure the json data is a string
        if (data['eapClientPwd'] && !(typeof data['eapClientPwd'] === 'string' || data['eapClientPwd'] instanceof String)) {
            throw new Error("Expected the field `eapClientPwd` to be a primitive type in the JSON string but got " + data['eapClientPwd']);
        }
        // ensure the json data is a string
        if (data['eapIdentity'] && !(typeof data['eapIdentity'] === 'string' || data['eapIdentity'] instanceof String)) {
            throw new Error("Expected the field `eapIdentity` to be a primitive type in the JSON string but got " + data['eapIdentity']);
        }
        // validate the optional field `eapIntermediateCert`
        if (data['eapIntermediateCert']) { // data not null
          File.validateJSON(data['eapIntermediateCert']);
        }
        // ensure the json data is a string
        if (data['eapPwd'] && !(typeof data['eapPwd'] === 'string' || data['eapPwd'] instanceof String)) {
            throw new Error("Expected the field `eapPwd` to be a primitive type in the JSON string but got " + data['eapPwd']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['psk'] && !(typeof data['psk'] === 'string' || data['psk'] instanceof String)) {
            throw new Error("Expected the field `psk` to be a primitive type in the JSON string but got " + data['psk']);
        }
        // ensure the json data is a string
        if (data['ssid'] && !(typeof data['ssid'] === 'string' || data['ssid'] instanceof String)) {
            throw new Error("Expected the field `ssid` to be a primitive type in the JSON string but got " + data['ssid']);
        }
        // ensure the json data is a string
        if (data['wsec'] && !(typeof data['wsec'] === 'string' || data['wsec'] instanceof String)) {
            throw new Error("Expected the field `wsec` to be a primitive type in the JSON string but got " + data['wsec']);
        }

        return true;
    }


}

Profile.RequiredProperties = ["authType", "bssType", "ssid", "wsec"];

/**
 * The type of Wi-Fi network. Possible values: **wpa-psk**, **wpa2-psk**, **wpa-eap**, **wpa2-eap**.
 * @member {String} authType
 */
Profile.prototype['authType'] = undefined;

/**
 * Indicates whether to automatically select the best authentication method available. Does not work on older terminal models.
 * @member {Boolean} autoWifi
 */
Profile.prototype['autoWifi'] = undefined;

/**
 * Use **infra** for infrastructure-based networks. This applies to most networks. Use **adhoc** only if the communication is p2p-based between base stations.
 * @member {String} bssType
 */
Profile.prototype['bssType'] = undefined;

/**
 * The channel number of the Wi-Fi network. The recommended setting is **0** for automatic channel selection.
 * @member {Number} channel
 */
Profile.prototype['channel'] = undefined;

/**
 * Indicates whether this is your preferred wireless network. If **true**, the terminal will try connecting to this network first.
 * @member {Boolean} defaultProfile
 */
Profile.prototype['defaultProfile'] = undefined;

/**
 * For `authType` **wpa-eap** or **wpa2-eap**. Possible values: **tls**, **peap**, **leap**, **fast**
 * @member {String} eap
 */
Profile.prototype['eap'] = undefined;

/**
 * For `authType` **wpa-eap** or **wpa2-eap**. The root certificate from the CA that signed the certificate of the RADIUS server that is part of your wireless network.
 * @member {File} eapCaCert
 */
Profile.prototype['eapCaCert'] = undefined;

/**
 * For `eap` **tls**. The certificate chain for the terminals. All terminals in the same network will use the same EAP client certificate.
 * @member {File} eapClientCert
 */
Profile.prototype['eapClientCert'] = undefined;

/**
 * For `eap` **tls**. The RSA private key for the client. Include the lines BEGIN RSA PRIVATE KEY and END RSA PRIVATE KEY.
 * @member {File} eapClientKey
 */
Profile.prototype['eapClientKey'] = undefined;

/**
 * For `eap` **tls**. The password of the RSA key file, if that file is password-protected.
 * @member {String} eapClientPwd
 */
Profile.prototype['eapClientPwd'] = undefined;

/**
 * For `authType` **wpa-eap** or **wpa2-eap**. The EAP-PEAP username from your MS-CHAP account. Must match the configuration of your RADIUS server.
 * @member {String} eapIdentity
 */
Profile.prototype['eapIdentity'] = undefined;

/**
 * For `eap` **tls**. The EAP intermediate certificate.
 * @member {File} eapIntermediateCert
 */
Profile.prototype['eapIntermediateCert'] = undefined;

/**
 * For `eap` **peap**. The EAP-PEAP password from your MS-CHAP account. Must match the configuration of your RADIUS server.
 * @member {String} eapPwd
 */
Profile.prototype['eapPwd'] = undefined;

/**
 * Indicates if the network doesn't broadcast its SSID. Mandatory for Android terminals, because these terminals rely on this setting to be able to connect to any network.
 * @member {Boolean} hiddenSsid
 */
Profile.prototype['hiddenSsid'] = undefined;

/**
 * Your name for the Wi-Fi profile.
 * @member {String} name
 */
Profile.prototype['name'] = undefined;

/**
 * For `authType` **wpa-psk or **wpa2-psk**. The password to the wireless network.
 * @member {String} psk
 */
Profile.prototype['psk'] = undefined;

/**
 * The name of the wireless network.
 * @member {String} ssid
 */
Profile.prototype['ssid'] = undefined;

/**
 * The type of encryption. Possible values: **auto**, **ccmp** (recommended), **tkip**
 * @member {String} wsec
 */
Profile.prototype['wsec'] = undefined;






export default Profile;

