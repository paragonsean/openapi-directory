/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BillingEntity from './BillingEntity';
import OrderItem from './OrderItem';
import ShippingLocation from './ShippingLocation';

/**
 * The TerminalOrder model module.
 * @module model/TerminalOrder
 * @version 3
 */
class TerminalOrder {
    /**
     * Constructs a new <code>TerminalOrder</code>.
     * @alias module:model/TerminalOrder
     */
    constructor() { 
        
        TerminalOrder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TerminalOrder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TerminalOrder} obj Optional instance to populate.
     * @return {module:model/TerminalOrder} The populated <code>TerminalOrder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TerminalOrder();

            if (data.hasOwnProperty('billingEntity')) {
                obj['billingEntity'] = BillingEntity.constructFromObject(data['billingEntity']);
            }
            if (data.hasOwnProperty('customerOrderReference')) {
                obj['customerOrderReference'] = ApiClient.convertToType(data['customerOrderReference'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [OrderItem]);
            }
            if (data.hasOwnProperty('orderDate')) {
                obj['orderDate'] = ApiClient.convertToType(data['orderDate'], 'String');
            }
            if (data.hasOwnProperty('shippingLocation')) {
                obj['shippingLocation'] = ShippingLocation.constructFromObject(data['shippingLocation']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('trackingUrl')) {
                obj['trackingUrl'] = ApiClient.convertToType(data['trackingUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TerminalOrder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TerminalOrder</code>.
     */
    static validateJSON(data) {
        // validate the optional field `billingEntity`
        if (data['billingEntity']) { // data not null
          BillingEntity.validateJSON(data['billingEntity']);
        }
        // ensure the json data is a string
        if (data['customerOrderReference'] && !(typeof data['customerOrderReference'] === 'string' || data['customerOrderReference'] instanceof String)) {
            throw new Error("Expected the field `customerOrderReference` to be a primitive type in the JSON string but got " + data['customerOrderReference']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                OrderItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['orderDate'] && !(typeof data['orderDate'] === 'string' || data['orderDate'] instanceof String)) {
            throw new Error("Expected the field `orderDate` to be a primitive type in the JSON string but got " + data['orderDate']);
        }
        // validate the optional field `shippingLocation`
        if (data['shippingLocation']) { // data not null
          ShippingLocation.validateJSON(data['shippingLocation']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['trackingUrl'] && !(typeof data['trackingUrl'] === 'string' || data['trackingUrl'] instanceof String)) {
            throw new Error("Expected the field `trackingUrl` to be a primitive type in the JSON string but got " + data['trackingUrl']);
        }

        return true;
    }


}



/**
 * The details of the entity that the order is billed to.
 * @member {module:model/BillingEntity} billingEntity
 */
TerminalOrder.prototype['billingEntity'] = undefined;

/**
 * The merchant-defined purchase order number. This will be printed on the packing list.
 * @member {String} customerOrderReference
 */
TerminalOrder.prototype['customerOrderReference'] = undefined;

/**
 * The unique identifier of the order.
 * @member {String} id
 */
TerminalOrder.prototype['id'] = undefined;

/**
 * The products included in the order.
 * @member {Array.<module:model/OrderItem>} items
 */
TerminalOrder.prototype['items'] = undefined;

/**
 * The date and time that the order was placed, in UTC ISO 8601 format. For example, \"2011-12-03T10:15:30Z\".
 * @member {String} orderDate
 */
TerminalOrder.prototype['orderDate'] = undefined;

/**
 * The details of the location where the order is shipped to.
 * @member {module:model/ShippingLocation} shippingLocation
 */
TerminalOrder.prototype['shippingLocation'] = undefined;

/**
 * The processing status of the order.
 * @member {String} status
 */
TerminalOrder.prototype['status'] = undefined;

/**
 * The URL, provided by the carrier company, where the shipment can be tracked.
 * @member {String} trackingUrl
 */
TerminalOrder.prototype['trackingUrl'] = undefined;






export default TerminalOrder;

