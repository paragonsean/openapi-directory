/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TerminalAssignment from './TerminalAssignment';
import TerminalConnectivity from './TerminalConnectivity';

/**
 * The Terminal model module.
 * @module model/Terminal
 * @version 3
 */
class Terminal {
    /**
     * Constructs a new <code>Terminal</code>.
     * @alias module:model/Terminal
     */
    constructor() { 
        
        Terminal.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Terminal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Terminal} obj Optional instance to populate.
     * @return {module:model/Terminal} The populated <code>Terminal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Terminal();

            if (data.hasOwnProperty('assignment')) {
                obj['assignment'] = TerminalAssignment.constructFromObject(data['assignment']);
            }
            if (data.hasOwnProperty('connectivity')) {
                obj['connectivity'] = TerminalConnectivity.constructFromObject(data['connectivity']);
            }
            if (data.hasOwnProperty('firmwareVersion')) {
                obj['firmwareVersion'] = ApiClient.convertToType(data['firmwareVersion'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastActivityAt')) {
                obj['lastActivityAt'] = ApiClient.convertToType(data['lastActivityAt'], 'Date');
            }
            if (data.hasOwnProperty('lastTransactionAt')) {
                obj['lastTransactionAt'] = ApiClient.convertToType(data['lastTransactionAt'], 'Date');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Terminal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Terminal</code>.
     */
    static validateJSON(data) {
        // validate the optional field `assignment`
        if (data['assignment']) { // data not null
          TerminalAssignment.validateJSON(data['assignment']);
        }
        // validate the optional field `connectivity`
        if (data['connectivity']) { // data not null
          TerminalConnectivity.validateJSON(data['connectivity']);
        }
        // ensure the json data is a string
        if (data['firmwareVersion'] && !(typeof data['firmwareVersion'] === 'string' || data['firmwareVersion'] instanceof String)) {
            throw new Error("Expected the field `firmwareVersion` to be a primitive type in the JSON string but got " + data['firmwareVersion']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }

        return true;
    }


}



/**
 * Indicates the account level to which the terminal is assigned, the [assignment status](https://docs.adyen.com/point-of-sale/automating-terminal-management/assign-terminals-api), and where the terminals is in the process of being reassigned to.
 * @member {module:model/TerminalAssignment} assignment
 */
Terminal.prototype['assignment'] = undefined;

/**
 * Information about bluetooth, cellular, ethernet and wifi connectivity for the terminal.
 * @member {module:model/TerminalConnectivity} connectivity
 */
Terminal.prototype['connectivity'] = undefined;

/**
 * The software release currently in use on the terminal.
 * @member {String} firmwareVersion
 */
Terminal.prototype['firmwareVersion'] = undefined;

/**
 * The unique identifier of the terminal.
 * @member {String} id
 */
Terminal.prototype['id'] = undefined;

/**
 * Date and time of the last activity on the terminal. Not included when the last activity was more than 14 days ago.
 * @member {Date} lastActivityAt
 */
Terminal.prototype['lastActivityAt'] = undefined;

/**
 * Date and time of the last transaction on the terminal. Not included when the last transaction was more than 14 days ago.
 * @member {Date} lastTransactionAt
 */
Terminal.prototype['lastTransactionAt'] = undefined;

/**
 * The model name of the terminal.
 * @member {String} model
 */
Terminal.prototype['model'] = undefined;

/**
 * The serial number of the terminal.
 * @member {String} serialNumber
 */
Terminal.prototype['serialNumber'] = undefined;






export default Terminal;

