/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExternalTerminalAction model module.
 * @module model/ExternalTerminalAction
 * @version 3
 */
class ExternalTerminalAction {
    /**
     * Constructs a new <code>ExternalTerminalAction</code>.
     * @alias module:model/ExternalTerminalAction
     */
    constructor() { 
        
        ExternalTerminalAction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExternalTerminalAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExternalTerminalAction} obj Optional instance to populate.
     * @return {module:model/ExternalTerminalAction} The populated <code>ExternalTerminalAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExternalTerminalAction();

            if (data.hasOwnProperty('actionType')) {
                obj['actionType'] = ApiClient.convertToType(data['actionType'], 'String');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], 'String');
            }
            if (data.hasOwnProperty('confirmedAt')) {
                obj['confirmedAt'] = ApiClient.convertToType(data['confirmedAt'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('scheduledAt')) {
                obj['scheduledAt'] = ApiClient.convertToType(data['scheduledAt'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('terminalId')) {
                obj['terminalId'] = ApiClient.convertToType(data['terminalId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExternalTerminalAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExternalTerminalAction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actionType'] && !(typeof data['actionType'] === 'string' || data['actionType'] instanceof String)) {
            throw new Error("Expected the field `actionType` to be a primitive type in the JSON string but got " + data['actionType']);
        }
        // ensure the json data is a string
        if (data['config'] && !(typeof data['config'] === 'string' || data['config'] instanceof String)) {
            throw new Error("Expected the field `config` to be a primitive type in the JSON string but got " + data['config']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['terminalId'] && !(typeof data['terminalId'] === 'string' || data['terminalId'] instanceof String)) {
            throw new Error("Expected the field `terminalId` to be a primitive type in the JSON string but got " + data['terminalId']);
        }

        return true;
    }


}



/**
 * The type of terminal action: **InstallAndroidApp**, **UninstallAndroidApp**, **InstallAndroidCertificate**, or **UninstallAndroidCertificate**.
 * @member {String} actionType
 */
ExternalTerminalAction.prototype['actionType'] = undefined;

/**
 * Technical information about the terminal action.
 * @member {String} config
 */
ExternalTerminalAction.prototype['config'] = undefined;

/**
 * The date and time when the action was carried out.
 * @member {Date} confirmedAt
 */
ExternalTerminalAction.prototype['confirmedAt'] = undefined;

/**
 * The unique ID of the terminal action.
 * @member {String} id
 */
ExternalTerminalAction.prototype['id'] = undefined;

/**
 * The result message for the action.
 * @member {String} result
 */
ExternalTerminalAction.prototype['result'] = undefined;

/**
 * The date and time when the action was scheduled to happen.
 * @member {Date} scheduledAt
 */
ExternalTerminalAction.prototype['scheduledAt'] = undefined;

/**
 * The status of the terminal action: **pending**, **successful**, **failed**, **cancelled**, or **tryLater**.
 * @member {String} status
 */
ExternalTerminalAction.prototype['status'] = undefined;

/**
 * The unique ID of the terminal that the action applies to.
 * @member {String} terminalId
 */
ExternalTerminalAction.prototype['terminalId'] = undefined;






export default ExternalTerminalAction;

