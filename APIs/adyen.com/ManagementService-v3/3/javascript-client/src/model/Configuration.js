/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';

/**
 * The Configuration model module.
 * @module model/Configuration
 * @version 3
 */
class Configuration {
    /**
     * Constructs a new <code>Configuration</code>.
     * @alias module:model/Configuration
     * @param brand {String} Payment method, like **eftpos_australia** or **mc**. See the [possible values](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api). 
     * @param currencies {Array.<module:model/Currency>} Currency, and surcharge percentage or amount.
     */
    constructor(brand, currencies) { 
        
        Configuration.initialize(this, brand, currencies);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, brand, currencies) { 
        obj['brand'] = brand;
        obj['currencies'] = currencies;
    }

    /**
     * Constructs a <code>Configuration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Configuration} obj Optional instance to populate.
     * @return {module:model/Configuration} The populated <code>Configuration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Configuration();

            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], ['String']);
            }
            if (data.hasOwnProperty('currencies')) {
                obj['currencies'] = ApiClient.convertToType(data['currencies'], [Currency]);
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Configuration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Configuration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Configuration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['country'])) {
            throw new Error("Expected the field `country` to be an array in the JSON data but got " + data['country']);
        }
        if (data['currencies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['currencies'])) {
                throw new Error("Expected the field `currencies` to be an array in the JSON data but got " + data['currencies']);
            }
            // validate the optional field `currencies` (array)
            for (const item of data['currencies']) {
                Currency.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sources'])) {
            throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
        }

        return true;
    }


}

Configuration.RequiredProperties = ["brand", "currencies"];

/**
 * Payment method, like **eftpos_australia** or **mc**. See the [possible values](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api). 
 * @member {String} brand
 */
Configuration.prototype['brand'] = undefined;

/**
 * Countries, to filter different surcharge amounts for domestic or international cards.
 * @member {Array.<String>} country
 */
Configuration.prototype['country'] = undefined;

/**
 * Currency, and surcharge percentage or amount.
 * @member {Array.<module:model/Currency>} currencies
 */
Configuration.prototype['currencies'] = undefined;

/**
 * Funding source. Possible values: * **Credit** * **Debit**
 * @member {Array.<String>} sources
 */
Configuration.prototype['sources'] = undefined;






export default Configuration;

