/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReceiptOptions model module.
 * @module model/ReceiptOptions
 * @version 3
 */
class ReceiptOptions {
    /**
     * Constructs a new <code>ReceiptOptions</code>.
     * @alias module:model/ReceiptOptions
     */
    constructor() { 
        
        ReceiptOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReceiptOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReceiptOptions} obj Optional instance to populate.
     * @return {module:model/ReceiptOptions} The populated <code>ReceiptOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReceiptOptions();

            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ApiClient.convertToType(data['logo'], 'String');
            }
            if (data.hasOwnProperty('promptBeforePrinting')) {
                obj['promptBeforePrinting'] = ApiClient.convertToType(data['promptBeforePrinting'], 'Boolean');
            }
            if (data.hasOwnProperty('qrCodeData')) {
                obj['qrCodeData'] = ApiClient.convertToType(data['qrCodeData'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReceiptOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReceiptOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['logo'] && !(typeof data['logo'] === 'string' || data['logo'] instanceof String)) {
            throw new Error("Expected the field `logo` to be a primitive type in the JSON string but got " + data['logo']);
        }
        // ensure the json data is a string
        if (data['qrCodeData'] && !(typeof data['qrCodeData'] === 'string' || data['qrCodeData'] instanceof String)) {
            throw new Error("Expected the field `qrCodeData` to be a primitive type in the JSON string but got " + data['qrCodeData']);
        }

        return true;
    }


}



/**
 * The receipt logo converted to a Base64-encoded string. The image must be a .bmp file of < 256 KB, dimensions 240 (H) x 384 (W) px.
 * @member {String} logo
 */
ReceiptOptions.prototype['logo'] = undefined;

/**
 * Indicates whether a screen appears asking if you want to print the shopper receipt.
 * @member {Boolean} promptBeforePrinting
 */
ReceiptOptions.prototype['promptBeforePrinting'] = undefined;

/**
 * Data to print on the receipt as a QR code. This can include static text and the following variables:  - `${merchantreference}`: the merchant reference of the transaction. - `${pspreference}`: the PSP reference of the transaction.   For example, **http://www.example.com/order/${pspreference}/${merchantreference}**.
 * @member {String} qrCodeData
 */
ReceiptOptions.prototype['qrCodeData'] = undefined;






export default ReceiptOptions;

