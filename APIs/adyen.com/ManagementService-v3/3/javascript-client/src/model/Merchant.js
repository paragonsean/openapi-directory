/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataCenter from './DataCenter';
import MerchantLinks from './MerchantLinks';

/**
 * The Merchant model module.
 * @module model/Merchant
 * @version 3
 */
class Merchant {
    /**
     * Constructs a new <code>Merchant</code>.
     * @alias module:model/Merchant
     */
    constructor() { 
        
        Merchant.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Merchant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Merchant} obj Optional instance to populate.
     * @return {module:model/Merchant} The populated <code>Merchant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Merchant();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = MerchantLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('captureDelay')) {
                obj['captureDelay'] = ApiClient.convertToType(data['captureDelay'], 'String');
            }
            if (data.hasOwnProperty('companyId')) {
                obj['companyId'] = ApiClient.convertToType(data['companyId'], 'String');
            }
            if (data.hasOwnProperty('dataCenters')) {
                obj['dataCenters'] = ApiClient.convertToType(data['dataCenters'], [DataCenter]);
            }
            if (data.hasOwnProperty('defaultShopperInteraction')) {
                obj['defaultShopperInteraction'] = ApiClient.convertToType(data['defaultShopperInteraction'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('merchantCity')) {
                obj['merchantCity'] = ApiClient.convertToType(data['merchantCity'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pricingPlan')) {
                obj['pricingPlan'] = ApiClient.convertToType(data['pricingPlan'], 'String');
            }
            if (data.hasOwnProperty('primarySettlementCurrency')) {
                obj['primarySettlementCurrency'] = ApiClient.convertToType(data['primarySettlementCurrency'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('shopWebAddress')) {
                obj['shopWebAddress'] = ApiClient.convertToType(data['shopWebAddress'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Merchant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Merchant</code>.
     */
    static validateJSON(data) {
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          MerchantLinks.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['captureDelay'] && !(typeof data['captureDelay'] === 'string' || data['captureDelay'] instanceof String)) {
            throw new Error("Expected the field `captureDelay` to be a primitive type in the JSON string but got " + data['captureDelay']);
        }
        // ensure the json data is a string
        if (data['companyId'] && !(typeof data['companyId'] === 'string' || data['companyId'] instanceof String)) {
            throw new Error("Expected the field `companyId` to be a primitive type in the JSON string but got " + data['companyId']);
        }
        if (data['dataCenters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataCenters'])) {
                throw new Error("Expected the field `dataCenters` to be an array in the JSON data but got " + data['dataCenters']);
            }
            // validate the optional field `dataCenters` (array)
            for (const item of data['dataCenters']) {
                DataCenter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['defaultShopperInteraction'] && !(typeof data['defaultShopperInteraction'] === 'string' || data['defaultShopperInteraction'] instanceof String)) {
            throw new Error("Expected the field `defaultShopperInteraction` to be a primitive type in the JSON string but got " + data['defaultShopperInteraction']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['merchantCity'] && !(typeof data['merchantCity'] === 'string' || data['merchantCity'] instanceof String)) {
            throw new Error("Expected the field `merchantCity` to be a primitive type in the JSON string but got " + data['merchantCity']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pricingPlan'] && !(typeof data['pricingPlan'] === 'string' || data['pricingPlan'] instanceof String)) {
            throw new Error("Expected the field `pricingPlan` to be a primitive type in the JSON string but got " + data['pricingPlan']);
        }
        // ensure the json data is a string
        if (data['primarySettlementCurrency'] && !(typeof data['primarySettlementCurrency'] === 'string' || data['primarySettlementCurrency'] instanceof String)) {
            throw new Error("Expected the field `primarySettlementCurrency` to be a primitive type in the JSON string but got " + data['primarySettlementCurrency']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['shopWebAddress'] && !(typeof data['shopWebAddress'] === 'string' || data['shopWebAddress'] instanceof String)) {
            throw new Error("Expected the field `shopWebAddress` to be a primitive type in the JSON string but got " + data['shopWebAddress']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * References to resources connected with this merchant.
 * @member {module:model/MerchantLinks} _links
 */
Merchant.prototype['_links'] = undefined;

/**
 * The [capture delay](https://docs.adyen.com/online-payments/capture#capture-delay) set for the merchant account.  Possible values: * **Immediate** * **Manual** * Number of days from **1** to **29**
 * @member {String} captureDelay
 */
Merchant.prototype['captureDelay'] = undefined;

/**
 * The unique identifier of the company account this merchant belongs to
 * @member {String} companyId
 */
Merchant.prototype['companyId'] = undefined;

/**
 * List of available data centers.  Adyen has several data centers around the world.In the URL that you use for making API requests, we recommend you use the live URL prefix from the data center closest to your shoppers.
 * @member {Array.<module:model/DataCenter>} dataCenters
 */
Merchant.prototype['dataCenters'] = undefined;

/**
 * The default [`shopperInteraction`](https://docs.adyen.com/api-explorer/#/CheckoutService/v68/post/payments__reqParam_shopperInteraction) value used when processing payments through this merchant account.
 * @member {String} defaultShopperInteraction
 */
Merchant.prototype['defaultShopperInteraction'] = undefined;

/**
 * Your description for the merchant account, maximum 300 characters
 * @member {String} description
 */
Merchant.prototype['description'] = undefined;

/**
 * The unique identifier of the merchant account.
 * @member {String} id
 */
Merchant.prototype['id'] = undefined;

/**
 * The city where the legal entity of this merchant account is registered.
 * @member {String} merchantCity
 */
Merchant.prototype['merchantCity'] = undefined;

/**
 * The name of the legal entity associated with the merchant account.
 * @member {String} name
 */
Merchant.prototype['name'] = undefined;

/**
 * Only applies to merchant accounts managed by Adyen's partners. The name of the pricing plan assigned to the merchant account.
 * @member {String} pricingPlan
 */
Merchant.prototype['pricingPlan'] = undefined;

/**
 * The currency of the country where the legal entity of this merchant account is registered. Format: [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). For example, a legal entity based in the United States has USD as the primary settlement currency.
 * @member {String} primarySettlementCurrency
 */
Merchant.prototype['primarySettlementCurrency'] = undefined;

/**
 * Reference of the merchant account.
 * @member {String} reference
 */
Merchant.prototype['reference'] = undefined;

/**
 * The URL for the ecommerce website used with this merchant account.
 * @member {String} shopWebAddress
 */
Merchant.prototype['shopWebAddress'] = undefined;

/**
 * The status of the merchant account.  Possible values:  * **PreActive**: The merchant account has been created. Users cannot access the merchant account in the Customer Area. The account cannot process payments. * **Active**: Users can access the merchant account in the Customer Area. If the company account is also **Active**, then payment processing and payouts are enabled. * **InactiveWithModifications**: Users can access the merchant account in the Customer Area. You cannot process new payments but you can still modify payments, for example issue refunds. You can still receive payouts. * **Inactive**: Users can access the merchant account in the Customer Area. Payment processing and payouts are disabled. * **Closed**: The account is closed and this cannot be reversed. Users cannot log in. Payment processing and payouts are disabled.
 * @member {String} status
 */
Merchant.prototype['status'] = undefined;






export default Merchant;

