/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InvalidField from './InvalidField';

/**
 * The RestServiceError model module.
 * @module model/RestServiceError
 * @version 3
 */
class RestServiceError {
    /**
     * Constructs a new <code>RestServiceError</code>.
     * @alias module:model/RestServiceError
     * @param detail {String} A human-readable explanation specific to this occurrence of the problem.
     * @param errorCode {String} A code that identifies the problem type.
     * @param status {Number} The HTTP status code.
     * @param title {String} A short, human-readable summary of the problem type.
     * @param type {String} A URI that identifies the problem type, pointing to human-readable documentation on this problem type.
     */
    constructor(detail, errorCode, status, title, type) { 
        
        RestServiceError.initialize(this, detail, errorCode, status, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, detail, errorCode, status, title, type) { 
        obj['detail'] = detail;
        obj['errorCode'] = errorCode;
        obj['status'] = status;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>RestServiceError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RestServiceError} obj Optional instance to populate.
     * @return {module:model/RestServiceError} The populated <code>RestServiceError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RestServiceError();

            if (data.hasOwnProperty('detail')) {
                obj['detail'] = ApiClient.convertToType(data['detail'], 'String');
            }
            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], 'String');
            }
            if (data.hasOwnProperty('instance')) {
                obj['instance'] = ApiClient.convertToType(data['instance'], 'String');
            }
            if (data.hasOwnProperty('invalidFields')) {
                obj['invalidFields'] = ApiClient.convertToType(data['invalidFields'], [InvalidField]);
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('response')) {
                obj['response'] = ApiClient.convertToType(data['response'], Object);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RestServiceError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RestServiceError</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RestServiceError.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['detail'] && !(typeof data['detail'] === 'string' || data['detail'] instanceof String)) {
            throw new Error("Expected the field `detail` to be a primitive type in the JSON string but got " + data['detail']);
        }
        // ensure the json data is a string
        if (data['errorCode'] && !(typeof data['errorCode'] === 'string' || data['errorCode'] instanceof String)) {
            throw new Error("Expected the field `errorCode` to be a primitive type in the JSON string but got " + data['errorCode']);
        }
        // ensure the json data is a string
        if (data['instance'] && !(typeof data['instance'] === 'string' || data['instance'] instanceof String)) {
            throw new Error("Expected the field `instance` to be a primitive type in the JSON string but got " + data['instance']);
        }
        if (data['invalidFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['invalidFields'])) {
                throw new Error("Expected the field `invalidFields` to be an array in the JSON data but got " + data['invalidFields']);
            }
            // validate the optional field `invalidFields` (array)
            for (const item of data['invalidFields']) {
                InvalidField.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

RestServiceError.RequiredProperties = ["detail", "errorCode", "status", "title", "type"];

/**
 * A human-readable explanation specific to this occurrence of the problem.
 * @member {String} detail
 */
RestServiceError.prototype['detail'] = undefined;

/**
 * A code that identifies the problem type.
 * @member {String} errorCode
 */
RestServiceError.prototype['errorCode'] = undefined;

/**
 * A unique URI that identifies the specific occurrence of the problem.
 * @member {String} instance
 */
RestServiceError.prototype['instance'] = undefined;

/**
 * Detailed explanation of each validation error, when applicable.
 * @member {Array.<module:model/InvalidField>} invalidFields
 */
RestServiceError.prototype['invalidFields'] = undefined;

/**
 * A unique reference for the request, essentially the same as `pspReference`.
 * @member {String} requestId
 */
RestServiceError.prototype['requestId'] = undefined;

/**
 * @member {Object} response
 */
RestServiceError.prototype['response'] = undefined;

/**
 * The HTTP status code.
 * @member {Number} status
 */
RestServiceError.prototype['status'] = undefined;

/**
 * A short, human-readable summary of the problem type.
 * @member {String} title
 */
RestServiceError.prototype['title'] = undefined;

/**
 * A URI that identifies the problem type, pointing to human-readable documentation on this problem type.
 * @member {String} type
 */
RestServiceError.prototype['type'] = undefined;






export default RestServiceError;

