/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AfterpayTouchInfo from './AfterpayTouchInfo';
import ApplePayInfo from './ApplePayInfo';
import BcmcInfo from './BcmcInfo';
import CartesBancairesInfo from './CartesBancairesInfo';
import ClearpayInfo from './ClearpayInfo';
import GenericPmWithTdiInfo from './GenericPmWithTdiInfo';
import GiroPayInfo from './GiroPayInfo';
import GooglePayInfo from './GooglePayInfo';
import KlarnaInfo from './KlarnaInfo';
import MealVoucherFRInfo from './MealVoucherFRInfo';
import PayPalInfo from './PayPalInfo';
import SofortInfo from './SofortInfo';
import SwishInfo from './SwishInfo';
import TwintInfo from './TwintInfo';
import VippsInfo from './VippsInfo';

/**
 * The PaymentMethodSetupInfo model module.
 * @module model/PaymentMethodSetupInfo
 * @version 3
 */
class PaymentMethodSetupInfo {
    /**
     * Constructs a new <code>PaymentMethodSetupInfo</code>.
     * @alias module:model/PaymentMethodSetupInfo
     * @param type {module:model/PaymentMethodSetupInfo.TypeEnum} Payment method [variant](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api).
     */
    constructor(type) { 
        
        PaymentMethodSetupInfo.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>PaymentMethodSetupInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentMethodSetupInfo} obj Optional instance to populate.
     * @return {module:model/PaymentMethodSetupInfo} The populated <code>PaymentMethodSetupInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentMethodSetupInfo();

            if (data.hasOwnProperty('afterpayTouch')) {
                obj['afterpayTouch'] = AfterpayTouchInfo.constructFromObject(data['afterpayTouch']);
            }
            if (data.hasOwnProperty('applePay')) {
                obj['applePay'] = ApplePayInfo.constructFromObject(data['applePay']);
            }
            if (data.hasOwnProperty('bcmc')) {
                obj['bcmc'] = BcmcInfo.constructFromObject(data['bcmc']);
            }
            if (data.hasOwnProperty('businessLineId')) {
                obj['businessLineId'] = ApiClient.convertToType(data['businessLineId'], 'String');
            }
            if (data.hasOwnProperty('cartesBancaires')) {
                obj['cartesBancaires'] = CartesBancairesInfo.constructFromObject(data['cartesBancaires']);
            }
            if (data.hasOwnProperty('clearpay')) {
                obj['clearpay'] = ClearpayInfo.constructFromObject(data['clearpay']);
            }
            if (data.hasOwnProperty('countries')) {
                obj['countries'] = ApiClient.convertToType(data['countries'], ['String']);
            }
            if (data.hasOwnProperty('cup')) {
                obj['cup'] = GenericPmWithTdiInfo.constructFromObject(data['cup']);
            }
            if (data.hasOwnProperty('currencies')) {
                obj['currencies'] = ApiClient.convertToType(data['currencies'], ['String']);
            }
            if (data.hasOwnProperty('customRoutingFlags')) {
                obj['customRoutingFlags'] = ApiClient.convertToType(data['customRoutingFlags'], ['String']);
            }
            if (data.hasOwnProperty('diners')) {
                obj['diners'] = GenericPmWithTdiInfo.constructFromObject(data['diners']);
            }
            if (data.hasOwnProperty('discover')) {
                obj['discover'] = GenericPmWithTdiInfo.constructFromObject(data['discover']);
            }
            if (data.hasOwnProperty('eftpos_australia')) {
                obj['eftpos_australia'] = GenericPmWithTdiInfo.constructFromObject(data['eftpos_australia']);
            }
            if (data.hasOwnProperty('giroPay')) {
                obj['giroPay'] = GiroPayInfo.constructFromObject(data['giroPay']);
            }
            if (data.hasOwnProperty('girocard')) {
                obj['girocard'] = GenericPmWithTdiInfo.constructFromObject(data['girocard']);
            }
            if (data.hasOwnProperty('googlePay')) {
                obj['googlePay'] = GooglePayInfo.constructFromObject(data['googlePay']);
            }
            if (data.hasOwnProperty('ideal')) {
                obj['ideal'] = GenericPmWithTdiInfo.constructFromObject(data['ideal']);
            }
            if (data.hasOwnProperty('interac_card')) {
                obj['interac_card'] = GenericPmWithTdiInfo.constructFromObject(data['interac_card']);
            }
            if (data.hasOwnProperty('jcb')) {
                obj['jcb'] = GenericPmWithTdiInfo.constructFromObject(data['jcb']);
            }
            if (data.hasOwnProperty('klarna')) {
                obj['klarna'] = KlarnaInfo.constructFromObject(data['klarna']);
            }
            if (data.hasOwnProperty('maestro')) {
                obj['maestro'] = GenericPmWithTdiInfo.constructFromObject(data['maestro']);
            }
            if (data.hasOwnProperty('mc')) {
                obj['mc'] = GenericPmWithTdiInfo.constructFromObject(data['mc']);
            }
            if (data.hasOwnProperty('mealVoucher_FR')) {
                obj['mealVoucher_FR'] = MealVoucherFRInfo.constructFromObject(data['mealVoucher_FR']);
            }
            if (data.hasOwnProperty('paypal')) {
                obj['paypal'] = PayPalInfo.constructFromObject(data['paypal']);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('shopperInteraction')) {
                obj['shopperInteraction'] = ApiClient.convertToType(data['shopperInteraction'], 'String');
            }
            if (data.hasOwnProperty('sofort')) {
                obj['sofort'] = SofortInfo.constructFromObject(data['sofort']);
            }
            if (data.hasOwnProperty('storeIds')) {
                obj['storeIds'] = ApiClient.convertToType(data['storeIds'], ['String']);
            }
            if (data.hasOwnProperty('swish')) {
                obj['swish'] = SwishInfo.constructFromObject(data['swish']);
            }
            if (data.hasOwnProperty('twint')) {
                obj['twint'] = TwintInfo.constructFromObject(data['twint']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('vipps')) {
                obj['vipps'] = VippsInfo.constructFromObject(data['vipps']);
            }
            if (data.hasOwnProperty('visa')) {
                obj['visa'] = GenericPmWithTdiInfo.constructFromObject(data['visa']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentMethodSetupInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentMethodSetupInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentMethodSetupInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `afterpayTouch`
        if (data['afterpayTouch']) { // data not null
          AfterpayTouchInfo.validateJSON(data['afterpayTouch']);
        }
        // validate the optional field `applePay`
        if (data['applePay']) { // data not null
          ApplePayInfo.validateJSON(data['applePay']);
        }
        // validate the optional field `bcmc`
        if (data['bcmc']) { // data not null
          BcmcInfo.validateJSON(data['bcmc']);
        }
        // ensure the json data is a string
        if (data['businessLineId'] && !(typeof data['businessLineId'] === 'string' || data['businessLineId'] instanceof String)) {
            throw new Error("Expected the field `businessLineId` to be a primitive type in the JSON string but got " + data['businessLineId']);
        }
        // validate the optional field `cartesBancaires`
        if (data['cartesBancaires']) { // data not null
          CartesBancairesInfo.validateJSON(data['cartesBancaires']);
        }
        // validate the optional field `clearpay`
        if (data['clearpay']) { // data not null
          ClearpayInfo.validateJSON(data['clearpay']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['countries'])) {
            throw new Error("Expected the field `countries` to be an array in the JSON data but got " + data['countries']);
        }
        // validate the optional field `cup`
        if (data['cup']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['cup']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['currencies'])) {
            throw new Error("Expected the field `currencies` to be an array in the JSON data but got " + data['currencies']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['customRoutingFlags'])) {
            throw new Error("Expected the field `customRoutingFlags` to be an array in the JSON data but got " + data['customRoutingFlags']);
        }
        // validate the optional field `diners`
        if (data['diners']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['diners']);
        }
        // validate the optional field `discover`
        if (data['discover']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['discover']);
        }
        // validate the optional field `eftpos_australia`
        if (data['eftpos_australia']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['eftpos_australia']);
        }
        // validate the optional field `giroPay`
        if (data['giroPay']) { // data not null
          GiroPayInfo.validateJSON(data['giroPay']);
        }
        // validate the optional field `girocard`
        if (data['girocard']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['girocard']);
        }
        // validate the optional field `googlePay`
        if (data['googlePay']) { // data not null
          GooglePayInfo.validateJSON(data['googlePay']);
        }
        // validate the optional field `ideal`
        if (data['ideal']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['ideal']);
        }
        // validate the optional field `interac_card`
        if (data['interac_card']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['interac_card']);
        }
        // validate the optional field `jcb`
        if (data['jcb']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['jcb']);
        }
        // validate the optional field `klarna`
        if (data['klarna']) { // data not null
          KlarnaInfo.validateJSON(data['klarna']);
        }
        // validate the optional field `maestro`
        if (data['maestro']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['maestro']);
        }
        // validate the optional field `mc`
        if (data['mc']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['mc']);
        }
        // validate the optional field `mealVoucher_FR`
        if (data['mealVoucher_FR']) { // data not null
          MealVoucherFRInfo.validateJSON(data['mealVoucher_FR']);
        }
        // validate the optional field `paypal`
        if (data['paypal']) { // data not null
          PayPalInfo.validateJSON(data['paypal']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['shopperInteraction'] && !(typeof data['shopperInteraction'] === 'string' || data['shopperInteraction'] instanceof String)) {
            throw new Error("Expected the field `shopperInteraction` to be a primitive type in the JSON string but got " + data['shopperInteraction']);
        }
        // validate the optional field `sofort`
        if (data['sofort']) { // data not null
          SofortInfo.validateJSON(data['sofort']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['storeIds'])) {
            throw new Error("Expected the field `storeIds` to be an array in the JSON data but got " + data['storeIds']);
        }
        // validate the optional field `swish`
        if (data['swish']) { // data not null
          SwishInfo.validateJSON(data['swish']);
        }
        // validate the optional field `twint`
        if (data['twint']) { // data not null
          TwintInfo.validateJSON(data['twint']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `vipps`
        if (data['vipps']) { // data not null
          VippsInfo.validateJSON(data['vipps']);
        }
        // validate the optional field `visa`
        if (data['visa']) { // data not null
          GenericPmWithTdiInfo.validateJSON(data['visa']);
        }

        return true;
    }


}

PaymentMethodSetupInfo.RequiredProperties = ["type"];

/**
 * Afterpay Touch details.
 * @member {module:model/AfterpayTouchInfo} afterpayTouch
 */
PaymentMethodSetupInfo.prototype['afterpayTouch'] = undefined;

/**
 * Apple Pay details.
 * @member {module:model/ApplePayInfo} applePay
 */
PaymentMethodSetupInfo.prototype['applePay'] = undefined;

/**
 * Bancontact details.
 * @member {module:model/BcmcInfo} bcmc
 */
PaymentMethodSetupInfo.prototype['bcmc'] = undefined;

/**
 * The unique identifier of the business line. Required if you have a [platform setup](https://docs.adyen.com/marketplaces-and-platforms/platform-structure-resources/platform-setup/).
 * @member {String} businessLineId
 */
PaymentMethodSetupInfo.prototype['businessLineId'] = undefined;

/**
 * Cartes Bancaires details.
 * @member {module:model/CartesBancairesInfo} cartesBancaires
 */
PaymentMethodSetupInfo.prototype['cartesBancaires'] = undefined;

/**
 * Clearpay details.
 * @member {module:model/ClearpayInfo} clearpay
 */
PaymentMethodSetupInfo.prototype['clearpay'] = undefined;

/**
 * The list of countries where a payment method is available. By default, all countries supported by the payment method.
 * @member {Array.<String>} countries
 */
PaymentMethodSetupInfo.prototype['countries'] = undefined;

/**
 * China Union Pay details.
 * @member {module:model/GenericPmWithTdiInfo} cup
 */
PaymentMethodSetupInfo.prototype['cup'] = undefined;

/**
 * The list of currencies that a payment method supports. By default, all currencies supported by the payment method.
 * @member {Array.<String>} currencies
 */
PaymentMethodSetupInfo.prototype['currencies'] = undefined;

/**
 * The list of custom routing flags to route payment to the intended acquirer.
 * @member {Array.<String>} customRoutingFlags
 */
PaymentMethodSetupInfo.prototype['customRoutingFlags'] = undefined;

/**
 * Diners details.
 * @member {module:model/GenericPmWithTdiInfo} diners
 */
PaymentMethodSetupInfo.prototype['diners'] = undefined;

/**
 * Discover details.
 * @member {module:model/GenericPmWithTdiInfo} discover
 */
PaymentMethodSetupInfo.prototype['discover'] = undefined;

/**
 * Eftpos Australia details.
 * @member {module:model/GenericPmWithTdiInfo} eftpos_australia
 */
PaymentMethodSetupInfo.prototype['eftpos_australia'] = undefined;

/**
 * giropay details.
 * @member {module:model/GiroPayInfo} giroPay
 */
PaymentMethodSetupInfo.prototype['giroPay'] = undefined;

/**
 * Girocard details.
 * @member {module:model/GenericPmWithTdiInfo} girocard
 */
PaymentMethodSetupInfo.prototype['girocard'] = undefined;

/**
 * Google Pay details.
 * @member {module:model/GooglePayInfo} googlePay
 */
PaymentMethodSetupInfo.prototype['googlePay'] = undefined;

/**
 * iDeal details.
 * @member {module:model/GenericPmWithTdiInfo} ideal
 */
PaymentMethodSetupInfo.prototype['ideal'] = undefined;

/**
 * Interac Card details.
 * @member {module:model/GenericPmWithTdiInfo} interac_card
 */
PaymentMethodSetupInfo.prototype['interac_card'] = undefined;

/**
 * JCB details.
 * @member {module:model/GenericPmWithTdiInfo} jcb
 */
PaymentMethodSetupInfo.prototype['jcb'] = undefined;

/**
 * Klarna details.
 * @member {module:model/KlarnaInfo} klarna
 */
PaymentMethodSetupInfo.prototype['klarna'] = undefined;

/**
 * Maestro details.
 * @member {module:model/GenericPmWithTdiInfo} maestro
 */
PaymentMethodSetupInfo.prototype['maestro'] = undefined;

/**
 * MasterCard details.
 * @member {module:model/GenericPmWithTdiInfo} mc
 */
PaymentMethodSetupInfo.prototype['mc'] = undefined;

/**
 * Meal Voucher FR details.
 * @member {module:model/MealVoucherFRInfo} mealVoucher_FR
 */
PaymentMethodSetupInfo.prototype['mealVoucher_FR'] = undefined;

/**
 * PayPal details.
 * @member {module:model/PayPalInfo} paypal
 */
PaymentMethodSetupInfo.prototype['paypal'] = undefined;

/**
 * Your reference for the payment method. Supported characters a-z, A-Z, 0-9.
 * @member {String} reference
 */
PaymentMethodSetupInfo.prototype['reference'] = undefined;

/**
 * The sales channel. Required if the merchant account does not have a sales channel. When you provide this field, it overrides the default sales channel set on the merchant account.  Possible values: **eCommerce**, **pos**, **contAuth**, and **moto**. 
 * @member {module:model/PaymentMethodSetupInfo.ShopperInteractionEnum} shopperInteraction
 */
PaymentMethodSetupInfo.prototype['shopperInteraction'] = undefined;

/**
 * Sofort details.
 * @member {module:model/SofortInfo} sofort
 */
PaymentMethodSetupInfo.prototype['sofort'] = undefined;

/**
 * The unique identifier of the store for which to configure the payment method, if any.
 * @member {Array.<String>} storeIds
 */
PaymentMethodSetupInfo.prototype['storeIds'] = undefined;

/**
 * Swish details.
 * @member {module:model/SwishInfo} swish
 */
PaymentMethodSetupInfo.prototype['swish'] = undefined;

/**
 * Twint details.
 * @member {module:model/TwintInfo} twint
 */
PaymentMethodSetupInfo.prototype['twint'] = undefined;

/**
 * Payment method [variant](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api).
 * @member {module:model/PaymentMethodSetupInfo.TypeEnum} type
 */
PaymentMethodSetupInfo.prototype['type'] = undefined;

/**
 * Vipps details.
 * @member {module:model/VippsInfo} vipps
 */
PaymentMethodSetupInfo.prototype['vipps'] = undefined;

/**
 * Visa details.
 * @member {module:model/GenericPmWithTdiInfo} visa
 */
PaymentMethodSetupInfo.prototype['visa'] = undefined;





/**
 * Allowed values for the <code>shopperInteraction</code> property.
 * @enum {String}
 * @readonly
 */
PaymentMethodSetupInfo['ShopperInteractionEnum'] = {

    /**
     * value: "eCommerce"
     * @const
     */
    "eCommerce": "eCommerce",

    /**
     * value: "pos"
     * @const
     */
    "pos": "pos",

    /**
     * value: "moto"
     * @const
     */
    "moto": "moto",

    /**
     * value: "contAuth"
     * @const
     */
    "contAuth": "contAuth"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PaymentMethodSetupInfo['TypeEnum'] = {

    /**
     * value: "afterpaytouch"
     * @const
     */
    "afterpaytouch": "afterpaytouch",

    /**
     * value: "alipay"
     * @const
     */
    "alipay": "alipay",

    /**
     * value: "alipay_hk"
     * @const
     */
    "alipay_hk": "alipay_hk",

    /**
     * value: "amex"
     * @const
     */
    "amex": "amex",

    /**
     * value: "applepay"
     * @const
     */
    "applepay": "applepay",

    /**
     * value: "bcmc"
     * @const
     */
    "bcmc": "bcmc",

    /**
     * value: "blik"
     * @const
     */
    "blik": "blik",

    /**
     * value: "cartebancaire"
     * @const
     */
    "cartebancaire": "cartebancaire",

    /**
     * value: "clearpay"
     * @const
     */
    "clearpay": "clearpay",

    /**
     * value: "cup"
     * @const
     */
    "cup": "cup",

    /**
     * value: "diners"
     * @const
     */
    "diners": "diners",

    /**
     * value: "directdebit_GB"
     * @const
     */
    "directdebit_GB": "directdebit_GB",

    /**
     * value: "discover"
     * @const
     */
    "discover": "discover",

    /**
     * value: "ebanking_FI"
     * @const
     */
    "ebanking_FI": "ebanking_FI",

    /**
     * value: "eftpos_australia"
     * @const
     */
    "eftpos_australia": "eftpos_australia",

    /**
     * value: "elo"
     * @const
     */
    "elo": "elo",

    /**
     * value: "elocredit"
     * @const
     */
    "elocredit": "elocredit",

    /**
     * value: "elodebit"
     * @const
     */
    "elodebit": "elodebit",

    /**
     * value: "girocard"
     * @const
     */
    "girocard": "girocard",

    /**
     * value: "googlepay"
     * @const
     */
    "googlepay": "googlepay",

    /**
     * value: "hiper"
     * @const
     */
    "hiper": "hiper",

    /**
     * value: "hipercard"
     * @const
     */
    "hipercard": "hipercard",

    /**
     * value: "ideal"
     * @const
     */
    "ideal": "ideal",

    /**
     * value: "interac_card"
     * @const
     */
    "interac_card": "interac_card",

    /**
     * value: "jcb"
     * @const
     */
    "jcb": "jcb",

    /**
     * value: "klarna"
     * @const
     */
    "klarna": "klarna",

    /**
     * value: "klarna_account"
     * @const
     */
    "klarna_account": "klarna_account",

    /**
     * value: "klarna_paynow"
     * @const
     */
    "klarna_paynow": "klarna_paynow",

    /**
     * value: "maestro"
     * @const
     */
    "maestro": "maestro",

    /**
     * value: "mbway"
     * @const
     */
    "mbway": "mbway",

    /**
     * value: "mc"
     * @const
     */
    "mc": "mc",

    /**
     * value: "mcdebit"
     * @const
     */
    "mcdebit": "mcdebit",

    /**
     * value: "mealVoucher_FR"
     * @const
     */
    "mealVoucher_FR": "mealVoucher_FR",

    /**
     * value: "mobilepay"
     * @const
     */
    "mobilepay": "mobilepay",

    /**
     * value: "multibanco"
     * @const
     */
    "multibanco": "multibanco",

    /**
     * value: "onlineBanking_PL"
     * @const
     */
    "onlineBanking_PL": "onlineBanking_PL",

    /**
     * value: "paybybank"
     * @const
     */
    "paybybank": "paybybank",

    /**
     * value: "paypal"
     * @const
     */
    "paypal": "paypal",

    /**
     * value: "payshop"
     * @const
     */
    "payshop": "payshop",

    /**
     * value: "swish"
     * @const
     */
    "swish": "swish",

    /**
     * value: "trustly"
     * @const
     */
    "trustly": "trustly",

    /**
     * value: "twint"
     * @const
     */
    "twint": "twint",

    /**
     * value: "twint_pos"
     * @const
     */
    "twint_pos": "twint_pos",

    /**
     * value: "vipps"
     * @const
     */
    "vipps": "vipps",

    /**
     * value: "visa"
     * @const
     */
    "visa": "visa",

    /**
     * value: "visadebit"
     * @const
     */
    "visadebit": "visadebit",

    /**
     * value: "vpay"
     * @const
     */
    "vpay": "vpay",

    /**
     * value: "wechatpay"
     * @const
     */
    "wechatpay": "wechatpay",

    /**
     * value: "wechatpay_pos"
     * @const
     */
    "wechatpay_pos": "wechatpay_pos"
};



export default PaymentMethodSetupInfo;

