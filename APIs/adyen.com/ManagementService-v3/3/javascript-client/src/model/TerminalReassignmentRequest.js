/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TerminalReassignmentRequest model module.
 * @module model/TerminalReassignmentRequest
 * @version 3
 */
class TerminalReassignmentRequest {
    /**
     * Constructs a new <code>TerminalReassignmentRequest</code>.
     * @alias module:model/TerminalReassignmentRequest
     */
    constructor() { 
        
        TerminalReassignmentRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TerminalReassignmentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TerminalReassignmentRequest} obj Optional instance to populate.
     * @return {module:model/TerminalReassignmentRequest} The populated <code>TerminalReassignmentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TerminalReassignmentRequest();

            if (data.hasOwnProperty('companyId')) {
                obj['companyId'] = ApiClient.convertToType(data['companyId'], 'String');
            }
            if (data.hasOwnProperty('inventory')) {
                obj['inventory'] = ApiClient.convertToType(data['inventory'], 'Boolean');
            }
            if (data.hasOwnProperty('merchantId')) {
                obj['merchantId'] = ApiClient.convertToType(data['merchantId'], 'String');
            }
            if (data.hasOwnProperty('storeId')) {
                obj['storeId'] = ApiClient.convertToType(data['storeId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TerminalReassignmentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TerminalReassignmentRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['companyId'] && !(typeof data['companyId'] === 'string' || data['companyId'] instanceof String)) {
            throw new Error("Expected the field `companyId` to be a primitive type in the JSON string but got " + data['companyId']);
        }
        // ensure the json data is a string
        if (data['merchantId'] && !(typeof data['merchantId'] === 'string' || data['merchantId'] instanceof String)) {
            throw new Error("Expected the field `merchantId` to be a primitive type in the JSON string but got " + data['merchantId']);
        }
        // ensure the json data is a string
        if (data['storeId'] && !(typeof data['storeId'] === 'string' || data['storeId'] instanceof String)) {
            throw new Error("Expected the field `storeId` to be a primitive type in the JSON string but got " + data['storeId']);
        }

        return true;
    }


}



/**
 * The unique identifier of the company account to which the terminal is reassigned.
 * @member {String} companyId
 */
TerminalReassignmentRequest.prototype['companyId'] = undefined;

/**
 * Must be specified when reassigning terminals to a merchant account:  - If set to **true**, reassigns terminals to the inventory of the merchant account and the terminals cannot process transactions.  - If set to **false**, reassigns terminals directly to the merchant account and the terminals can process transactions.
 * @member {Boolean} inventory
 */
TerminalReassignmentRequest.prototype['inventory'] = undefined;

/**
 * The unique identifier of the merchant account to which the terminal is reassigned. When reassigning terminals to a merchant account, you must specify the `inventory` field.
 * @member {String} merchantId
 */
TerminalReassignmentRequest.prototype['merchantId'] = undefined;

/**
 * The unique identifier of the store to which the terminal is reassigned.
 * @member {String} storeId
 */
TerminalReassignmentRequest.prototype['storeId'] = undefined;






export default TerminalReassignmentRequest;

