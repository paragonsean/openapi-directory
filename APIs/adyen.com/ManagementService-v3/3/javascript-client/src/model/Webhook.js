/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalSettingsResponse from './AdditionalSettingsResponse';
import WebhookLinks from './WebhookLinks';

/**
 * The Webhook model module.
 * @module model/Webhook
 * @version 3
 */
class Webhook {
    /**
     * Constructs a new <code>Webhook</code>.
     * @alias module:model/Webhook
     * @param active {Boolean} Indicates if the webhook configuration is active. The field must be **true** for you to receive webhooks about events related an account.
     * @param communicationFormat {module:model/Webhook.CommunicationFormatEnum} Format or protocol for receiving webhooks. Possible values: * **soap** * **http** * **json** 
     * @param type {String} The type of webhook. Possible values are:  - **standard** - **account-settings-notification** - **banktransfer-notification** - **boletobancario-notification** - **directdebit-notification** - **ach-notification-of-change-notification** - **pending-notification** - **ideal-notification** - **ideal-pending-notification** - **report-notification** - **terminal-api-notification**  Find out more about [standard notification webhooks](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes) and [other types of notifications](https://docs.adyen.com/development-resources/webhooks/understand-notifications#other-notifications).
     * @param url {String} Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**.
     */
    constructor(active, communicationFormat, type, url) { 
        
        Webhook.initialize(this, active, communicationFormat, type, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, active, communicationFormat, type, url) { 
        obj['active'] = active;
        obj['communicationFormat'] = communicationFormat;
        obj['type'] = type;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Webhook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Webhook} obj Optional instance to populate.
     * @return {module:model/Webhook} The populated <code>Webhook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Webhook();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = WebhookLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('acceptsExpiredCertificate')) {
                obj['acceptsExpiredCertificate'] = ApiClient.convertToType(data['acceptsExpiredCertificate'], 'Boolean');
            }
            if (data.hasOwnProperty('acceptsSelfSignedCertificate')) {
                obj['acceptsSelfSignedCertificate'] = ApiClient.convertToType(data['acceptsSelfSignedCertificate'], 'Boolean');
            }
            if (data.hasOwnProperty('acceptsUntrustedRootCertificate')) {
                obj['acceptsUntrustedRootCertificate'] = ApiClient.convertToType(data['acceptsUntrustedRootCertificate'], 'Boolean');
            }
            if (data.hasOwnProperty('accountReference')) {
                obj['accountReference'] = ApiClient.convertToType(data['accountReference'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('additionalSettings')) {
                obj['additionalSettings'] = AdditionalSettingsResponse.constructFromObject(data['additionalSettings']);
            }
            if (data.hasOwnProperty('certificateAlias')) {
                obj['certificateAlias'] = ApiClient.convertToType(data['certificateAlias'], 'String');
            }
            if (data.hasOwnProperty('communicationFormat')) {
                obj['communicationFormat'] = ApiClient.convertToType(data['communicationFormat'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('encryptionProtocol')) {
                obj['encryptionProtocol'] = ApiClient.convertToType(data['encryptionProtocol'], 'String');
            }
            if (data.hasOwnProperty('filterMerchantAccountType')) {
                obj['filterMerchantAccountType'] = ApiClient.convertToType(data['filterMerchantAccountType'], 'String');
            }
            if (data.hasOwnProperty('filterMerchantAccounts')) {
                obj['filterMerchantAccounts'] = ApiClient.convertToType(data['filterMerchantAccounts'], ['String']);
            }
            if (data.hasOwnProperty('hasError')) {
                obj['hasError'] = ApiClient.convertToType(data['hasError'], 'Boolean');
            }
            if (data.hasOwnProperty('hasPassword')) {
                obj['hasPassword'] = ApiClient.convertToType(data['hasPassword'], 'Boolean');
            }
            if (data.hasOwnProperty('hmacKeyCheckValue')) {
                obj['hmacKeyCheckValue'] = ApiClient.convertToType(data['hmacKeyCheckValue'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('networkType')) {
                obj['networkType'] = ApiClient.convertToType(data['networkType'], 'String');
            }
            if (data.hasOwnProperty('populateSoapActionHeader')) {
                obj['populateSoapActionHeader'] = ApiClient.convertToType(data['populateSoapActionHeader'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Webhook</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Webhook</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Webhook.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          WebhookLinks.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['accountReference'] && !(typeof data['accountReference'] === 'string' || data['accountReference'] instanceof String)) {
            throw new Error("Expected the field `accountReference` to be a primitive type in the JSON string but got " + data['accountReference']);
        }
        // validate the optional field `additionalSettings`
        if (data['additionalSettings']) { // data not null
          AdditionalSettingsResponse.validateJSON(data['additionalSettings']);
        }
        // ensure the json data is a string
        if (data['certificateAlias'] && !(typeof data['certificateAlias'] === 'string' || data['certificateAlias'] instanceof String)) {
            throw new Error("Expected the field `certificateAlias` to be a primitive type in the JSON string but got " + data['certificateAlias']);
        }
        // ensure the json data is a string
        if (data['communicationFormat'] && !(typeof data['communicationFormat'] === 'string' || data['communicationFormat'] instanceof String)) {
            throw new Error("Expected the field `communicationFormat` to be a primitive type in the JSON string but got " + data['communicationFormat']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['encryptionProtocol'] && !(typeof data['encryptionProtocol'] === 'string' || data['encryptionProtocol'] instanceof String)) {
            throw new Error("Expected the field `encryptionProtocol` to be a primitive type in the JSON string but got " + data['encryptionProtocol']);
        }
        // ensure the json data is a string
        if (data['filterMerchantAccountType'] && !(typeof data['filterMerchantAccountType'] === 'string' || data['filterMerchantAccountType'] instanceof String)) {
            throw new Error("Expected the field `filterMerchantAccountType` to be a primitive type in the JSON string but got " + data['filterMerchantAccountType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['filterMerchantAccounts'])) {
            throw new Error("Expected the field `filterMerchantAccounts` to be an array in the JSON data but got " + data['filterMerchantAccounts']);
        }
        // ensure the json data is a string
        if (data['hmacKeyCheckValue'] && !(typeof data['hmacKeyCheckValue'] === 'string' || data['hmacKeyCheckValue'] instanceof String)) {
            throw new Error("Expected the field `hmacKeyCheckValue` to be a primitive type in the JSON string but got " + data['hmacKeyCheckValue']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['networkType'] && !(typeof data['networkType'] === 'string' || data['networkType'] instanceof String)) {
            throw new Error("Expected the field `networkType` to be a primitive type in the JSON string but got " + data['networkType']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

Webhook.RequiredProperties = ["active", "communicationFormat", "type", "url"];

/**
 * References to resources connected with this webhook.
 * @member {module:model/WebhookLinks} _links
 */
Webhook.prototype['_links'] = undefined;

/**
 * Indicates if expired SSL certificates are accepted. Default value: **false**.
 * @member {Boolean} acceptsExpiredCertificate
 */
Webhook.prototype['acceptsExpiredCertificate'] = undefined;

/**
 * Indicates if self-signed SSL certificates are accepted. Default value: **false**.
 * @member {Boolean} acceptsSelfSignedCertificate
 */
Webhook.prototype['acceptsSelfSignedCertificate'] = undefined;

/**
 * Indicates if untrusted SSL certificates are accepted. Default value: **false**.
 * @member {Boolean} acceptsUntrustedRootCertificate
 */
Webhook.prototype['acceptsUntrustedRootCertificate'] = undefined;

/**
 * Reference to the account the webook is set on.
 * @member {String} accountReference
 */
Webhook.prototype['accountReference'] = undefined;

/**
 * Indicates if the webhook configuration is active. The field must be **true** for you to receive webhooks about events related an account.
 * @member {Boolean} active
 */
Webhook.prototype['active'] = undefined;

/**
 * Additional shopper and transaction information to be included in your [standard notifications](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes). Find out more about the available [additional settings](https://docs.adyen.com/development-resources/webhooks/additional-settings).
 * @member {module:model/AdditionalSettingsResponse} additionalSettings
 */
Webhook.prototype['additionalSettings'] = undefined;

/**
 * The alias of our SSL certificate. When you receive a notification from us, the alias from the HMAC signature will match this alias.
 * @member {String} certificateAlias
 */
Webhook.prototype['certificateAlias'] = undefined;

/**
 * Format or protocol for receiving webhooks. Possible values: * **soap** * **http** * **json** 
 * @member {module:model/Webhook.CommunicationFormatEnum} communicationFormat
 */
Webhook.prototype['communicationFormat'] = undefined;

/**
 * Your description for this webhook configuration.
 * @member {String} description
 */
Webhook.prototype['description'] = undefined;

/**
 * SSL version to access the public webhook URL specified in the `url` field. Possible values: * **TLSv1.3** * **TLSv1.2** * **HTTP** - Only allowed on Test environment.  If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
 * @member {module:model/Webhook.EncryptionProtocolEnum} encryptionProtocol
 */
Webhook.prototype['encryptionProtocol'] = undefined;

/**
 * Shows how merchant accounts are included in company-level webhooks. Possible values: * **includeAccounts** * **excludeAccounts** * **allAccounts**: Includes all merchant accounts, and does not require specifying `filterMerchantAccounts`.
 * @member {module:model/Webhook.FilterMerchantAccountTypeEnum} filterMerchantAccountType
 */
Webhook.prototype['filterMerchantAccountType'] = undefined;

/**
 * A list of merchant account names that are included or excluded from receiving the webhook. Inclusion or exclusion is based on the value defined for `filterMerchantAccountType`.  Required if `filterMerchantAccountType` is either: * **includeAccounts** * **excludeAccounts**  Not needed for `filterMerchantAccountType`: **allAccounts**.
 * @member {Array.<String>} filterMerchantAccounts
 */
Webhook.prototype['filterMerchantAccounts'] = undefined;

/**
 * Indicates if the webhook configuration has errors that need troubleshooting. If the value is **true**, troubleshoot the configuration using the [testing endpoint](https://docs.adyen.com/api-explorer/#/ManagementService/v1/post/companies/{companyId}/webhooks/{webhookid}/test).
 * @member {Boolean} hasError
 */
Webhook.prototype['hasError'] = undefined;

/**
 * Indicates if the webhook is password protected.
 * @member {Boolean} hasPassword
 */
Webhook.prototype['hasPassword'] = undefined;

/**
 * The [checksum](https://en.wikipedia.org/wiki/Key_checksum_value) of the HMAC key generated for this webhook. You can use this value to uniquely identify the HMAC key configured for this webhook.
 * @member {String} hmacKeyCheckValue
 */
Webhook.prototype['hmacKeyCheckValue'] = undefined;

/**
 * Unique identifier for this webhook.
 * @member {String} id
 */
Webhook.prototype['id'] = undefined;

/**
 * Network type for Terminal API details webhooks.
 * @member {module:model/Webhook.NetworkTypeEnum} networkType
 */
Webhook.prototype['networkType'] = undefined;

/**
 * Indicates if the SOAP action header needs to be populated. Default value: **false**.  Only applies if `communicationFormat`: **soap**.
 * @member {Boolean} populateSoapActionHeader
 */
Webhook.prototype['populateSoapActionHeader'] = undefined;

/**
 * The type of webhook. Possible values are:  - **standard** - **account-settings-notification** - **banktransfer-notification** - **boletobancario-notification** - **directdebit-notification** - **ach-notification-of-change-notification** - **pending-notification** - **ideal-notification** - **ideal-pending-notification** - **report-notification** - **terminal-api-notification**  Find out more about [standard notification webhooks](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes) and [other types of notifications](https://docs.adyen.com/development-resources/webhooks/understand-notifications#other-notifications).
 * @member {String} type
 */
Webhook.prototype['type'] = undefined;

/**
 * Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**.
 * @member {String} url
 */
Webhook.prototype['url'] = undefined;

/**
 * Username to access the webhook URL.
 * @member {String} username
 */
Webhook.prototype['username'] = undefined;





/**
 * Allowed values for the <code>communicationFormat</code> property.
 * @enum {String}
 * @readonly
 */
Webhook['CommunicationFormatEnum'] = {

    /**
     * value: "http"
     * @const
     */
    "http": "http",

    /**
     * value: "json"
     * @const
     */
    "json": "json",

    /**
     * value: "soap"
     * @const
     */
    "soap": "soap"
};


/**
 * Allowed values for the <code>encryptionProtocol</code> property.
 * @enum {String}
 * @readonly
 */
Webhook['EncryptionProtocolEnum'] = {

    /**
     * value: "HTTP"
     * @const
     */
    "HTTP": "HTTP",

    /**
     * value: "TLSv1.2"
     * @const
     */
    "TLSv1.2": "TLSv1.2",

    /**
     * value: "TLSv1.3"
     * @const
     */
    "TLSv1.3": "TLSv1.3"
};


/**
 * Allowed values for the <code>filterMerchantAccountType</code> property.
 * @enum {String}
 * @readonly
 */
Webhook['FilterMerchantAccountTypeEnum'] = {

    /**
     * value: "allAccounts"
     * @const
     */
    "allAccounts": "allAccounts",

    /**
     * value: "excludeAccounts"
     * @const
     */
    "excludeAccounts": "excludeAccounts",

    /**
     * value: "includeAccounts"
     * @const
     */
    "includeAccounts": "includeAccounts"
};


/**
 * Allowed values for the <code>networkType</code> property.
 * @enum {String}
 * @readonly
 */
Webhook['NetworkTypeEnum'] = {

    /**
     * value: "local"
     * @const
     */
    "local": "local",

    /**
     * value: "public"
     * @const
     */
    "public": "public"
};



export default Webhook;

