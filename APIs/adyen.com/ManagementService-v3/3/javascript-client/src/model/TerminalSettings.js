/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CardholderReceipt from './CardholderReceipt';
import Connectivity from './Connectivity';
import Gratuity from './Gratuity';
import Hardware from './Hardware';
import Localization from './Localization';
import Nexo from './Nexo';
import OfflineProcessing from './OfflineProcessing';
import Opi from './Opi';
import Passcodes from './Passcodes';
import PayAtTable from './PayAtTable';
import Payment from './Payment';
import ReceiptOptions from './ReceiptOptions';
import ReceiptPrinting from './ReceiptPrinting';
import Refunds from './Refunds';
import Signature from './Signature';
import Standalone from './Standalone';
import Surcharge from './Surcharge';
import TapToPay from './TapToPay';
import TerminalInstructions from './TerminalInstructions';
import Timeouts from './Timeouts';
import WifiProfiles from './WifiProfiles';

/**
 * The TerminalSettings model module.
 * @module model/TerminalSettings
 * @version 3
 */
class TerminalSettings {
    /**
     * Constructs a new <code>TerminalSettings</code>.
     * @alias module:model/TerminalSettings
     */
    constructor() { 
        
        TerminalSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TerminalSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TerminalSettings} obj Optional instance to populate.
     * @return {module:model/TerminalSettings} The populated <code>TerminalSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TerminalSettings();

            if (data.hasOwnProperty('cardholderReceipt')) {
                obj['cardholderReceipt'] = CardholderReceipt.constructFromObject(data['cardholderReceipt']);
            }
            if (data.hasOwnProperty('connectivity')) {
                obj['connectivity'] = Connectivity.constructFromObject(data['connectivity']);
            }
            if (data.hasOwnProperty('gratuities')) {
                obj['gratuities'] = ApiClient.convertToType(data['gratuities'], [Gratuity]);
            }
            if (data.hasOwnProperty('hardware')) {
                obj['hardware'] = Hardware.constructFromObject(data['hardware']);
            }
            if (data.hasOwnProperty('localization')) {
                obj['localization'] = Localization.constructFromObject(data['localization']);
            }
            if (data.hasOwnProperty('nexo')) {
                obj['nexo'] = Nexo.constructFromObject(data['nexo']);
            }
            if (data.hasOwnProperty('offlineProcessing')) {
                obj['offlineProcessing'] = OfflineProcessing.constructFromObject(data['offlineProcessing']);
            }
            if (data.hasOwnProperty('opi')) {
                obj['opi'] = Opi.constructFromObject(data['opi']);
            }
            if (data.hasOwnProperty('passcodes')) {
                obj['passcodes'] = Passcodes.constructFromObject(data['passcodes']);
            }
            if (data.hasOwnProperty('payAtTable')) {
                obj['payAtTable'] = PayAtTable.constructFromObject(data['payAtTable']);
            }
            if (data.hasOwnProperty('payment')) {
                obj['payment'] = Payment.constructFromObject(data['payment']);
            }
            if (data.hasOwnProperty('receiptOptions')) {
                obj['receiptOptions'] = ReceiptOptions.constructFromObject(data['receiptOptions']);
            }
            if (data.hasOwnProperty('receiptPrinting')) {
                obj['receiptPrinting'] = ReceiptPrinting.constructFromObject(data['receiptPrinting']);
            }
            if (data.hasOwnProperty('refunds')) {
                obj['refunds'] = Refunds.constructFromObject(data['refunds']);
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = Signature.constructFromObject(data['signature']);
            }
            if (data.hasOwnProperty('standalone')) {
                obj['standalone'] = Standalone.constructFromObject(data['standalone']);
            }
            if (data.hasOwnProperty('surcharge')) {
                obj['surcharge'] = Surcharge.constructFromObject(data['surcharge']);
            }
            if (data.hasOwnProperty('tapToPay')) {
                obj['tapToPay'] = TapToPay.constructFromObject(data['tapToPay']);
            }
            if (data.hasOwnProperty('terminalInstructions')) {
                obj['terminalInstructions'] = TerminalInstructions.constructFromObject(data['terminalInstructions']);
            }
            if (data.hasOwnProperty('timeouts')) {
                obj['timeouts'] = Timeouts.constructFromObject(data['timeouts']);
            }
            if (data.hasOwnProperty('wifiProfiles')) {
                obj['wifiProfiles'] = WifiProfiles.constructFromObject(data['wifiProfiles']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TerminalSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TerminalSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cardholderReceipt`
        if (data['cardholderReceipt']) { // data not null
          CardholderReceipt.validateJSON(data['cardholderReceipt']);
        }
        // validate the optional field `connectivity`
        if (data['connectivity']) { // data not null
          Connectivity.validateJSON(data['connectivity']);
        }
        if (data['gratuities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['gratuities'])) {
                throw new Error("Expected the field `gratuities` to be an array in the JSON data but got " + data['gratuities']);
            }
            // validate the optional field `gratuities` (array)
            for (const item of data['gratuities']) {
                Gratuity.validateJSON(item);
            };
        }
        // validate the optional field `hardware`
        if (data['hardware']) { // data not null
          Hardware.validateJSON(data['hardware']);
        }
        // validate the optional field `localization`
        if (data['localization']) { // data not null
          Localization.validateJSON(data['localization']);
        }
        // validate the optional field `nexo`
        if (data['nexo']) { // data not null
          Nexo.validateJSON(data['nexo']);
        }
        // validate the optional field `offlineProcessing`
        if (data['offlineProcessing']) { // data not null
          OfflineProcessing.validateJSON(data['offlineProcessing']);
        }
        // validate the optional field `opi`
        if (data['opi']) { // data not null
          Opi.validateJSON(data['opi']);
        }
        // validate the optional field `passcodes`
        if (data['passcodes']) { // data not null
          Passcodes.validateJSON(data['passcodes']);
        }
        // validate the optional field `payAtTable`
        if (data['payAtTable']) { // data not null
          PayAtTable.validateJSON(data['payAtTable']);
        }
        // validate the optional field `payment`
        if (data['payment']) { // data not null
          Payment.validateJSON(data['payment']);
        }
        // validate the optional field `receiptOptions`
        if (data['receiptOptions']) { // data not null
          ReceiptOptions.validateJSON(data['receiptOptions']);
        }
        // validate the optional field `receiptPrinting`
        if (data['receiptPrinting']) { // data not null
          ReceiptPrinting.validateJSON(data['receiptPrinting']);
        }
        // validate the optional field `refunds`
        if (data['refunds']) { // data not null
          Refunds.validateJSON(data['refunds']);
        }
        // validate the optional field `signature`
        if (data['signature']) { // data not null
          Signature.validateJSON(data['signature']);
        }
        // validate the optional field `standalone`
        if (data['standalone']) { // data not null
          Standalone.validateJSON(data['standalone']);
        }
        // validate the optional field `surcharge`
        if (data['surcharge']) { // data not null
          Surcharge.validateJSON(data['surcharge']);
        }
        // validate the optional field `tapToPay`
        if (data['tapToPay']) { // data not null
          TapToPay.validateJSON(data['tapToPay']);
        }
        // validate the optional field `terminalInstructions`
        if (data['terminalInstructions']) { // data not null
          TerminalInstructions.validateJSON(data['terminalInstructions']);
        }
        // validate the optional field `timeouts`
        if (data['timeouts']) { // data not null
          Timeouts.validateJSON(data['timeouts']);
        }
        // validate the optional field `wifiProfiles`
        if (data['wifiProfiles']) { // data not null
          WifiProfiles.validateJSON(data['wifiProfiles']);
        }

        return true;
    }


}



/**
 * Settings to define the header of the shopper receipt.
 * @member {module:model/CardholderReceipt} cardholderReceipt
 */
TerminalSettings.prototype['cardholderReceipt'] = undefined;

/**
 * Settings for terminal connectivity features.
 * @member {module:model/Connectivity} connectivity
 */
TerminalSettings.prototype['connectivity'] = undefined;

/**
 * Settings for tipping with or without predefined options to choose from. The maximum number of predefined options is four, or three plus the option to enter a custom tip.
 * @member {Array.<module:model/Gratuity>} gratuities
 */
TerminalSettings.prototype['gratuities'] = undefined;

/**
 * Settings for terminal hardware features.
 * @member {module:model/Hardware} hardware
 */
TerminalSettings.prototype['hardware'] = undefined;

/**
 * Settings for localization.
 * @member {module:model/Localization} localization
 */
TerminalSettings.prototype['localization'] = undefined;

/**
 * Settings for a Terminal API integration.
 * @member {module:model/Nexo} nexo
 */
TerminalSettings.prototype['nexo'] = undefined;

/**
 * Settings for [offline payment](https://docs.adyen.com/point-of-sale/offline-payments) features.
 * @member {module:model/OfflineProcessing} offlineProcessing
 */
TerminalSettings.prototype['offlineProcessing'] = undefined;

/**
 * Settings for an Oracle Payment Interface (OPI) integration.
 * @member {module:model/Opi} opi
 */
TerminalSettings.prototype['opi'] = undefined;

/**
 * Settings for [passcodes](https://docs.adyen.com/point-of-sale/managing-terminals/menu-access?tab=manage_passcodes_with_an_api_call_2#manage-passcodes) features.
 * @member {module:model/Passcodes} passcodes
 */
TerminalSettings.prototype['passcodes'] = undefined;

/**
 * Settings for [Pay-at-table](https://docs.adyen.com/point-of-sale/pay-at-x) features.
 * @member {module:model/PayAtTable} payAtTable
 */
TerminalSettings.prototype['payAtTable'] = undefined;

/**
 * Settings for payment features.
 * @member {module:model/Payment} payment
 */
TerminalSettings.prototype['payment'] = undefined;

/**
 * Generic receipt settings.
 * @member {module:model/ReceiptOptions} receiptOptions
 */
TerminalSettings.prototype['receiptOptions'] = undefined;

/**
 * Transaction outcomes that you want the terminal to print a merchant receipt or a shopper receipt for.
 * @member {module:model/ReceiptPrinting} receiptPrinting
 */
TerminalSettings.prototype['receiptPrinting'] = undefined;

/**
 * Settings for refunds.
 * @member {module:model/Refunds} refunds
 */
TerminalSettings.prototype['refunds'] = undefined;

/**
 * Settings to skip signature, sign on display, or sign on receipt.
 * @member {module:model/Signature} signature
 */
TerminalSettings.prototype['signature'] = undefined;

/**
 * Settings for [standalone](https://docs.adyen.com/point-of-sale/standalone/standalone-build/set-up-standalone#set-up-standalone-using-an-api-call) features.
 * @member {module:model/Standalone} standalone
 */
TerminalSettings.prototype['standalone'] = undefined;

/**
 * Settings for payment [surcharge](https://docs.adyen.com/point-of-sale/surcharge) features.
 * @member {module:model/Surcharge} surcharge
 */
TerminalSettings.prototype['surcharge'] = undefined;

/**
 * Settings for Tap to Pay.
 * @member {module:model/TapToPay} tapToPay
 */
TerminalSettings.prototype['tapToPay'] = undefined;

/**
 * Settings to define the behaviour of the payment terminal.
 * @member {module:model/TerminalInstructions} terminalInstructions
 */
TerminalSettings.prototype['terminalInstructions'] = undefined;

/**
 * Settings for device [time-outs](https://docs.adyen.com/point-of-sale/pos-timeouts#device-time-out).
 * @member {module:model/Timeouts} timeouts
 */
TerminalSettings.prototype['timeouts'] = undefined;

/**
 * Remote Wi-Fi profiles for WPA and WPA2 PSK and EAP Wi-Fi networks.
 * @member {module:model/WifiProfiles} wifiProfiles
 */
TerminalSettings.prototype['wifiProfiles'] = undefined;






export default TerminalSettings;

