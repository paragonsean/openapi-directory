/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Configuration from './Configuration';

/**
 * The Surcharge model module.
 * @module model/Surcharge
 * @version 3
 */
class Surcharge {
    /**
     * Constructs a new <code>Surcharge</code>.
     * @alias module:model/Surcharge
     */
    constructor() { 
        
        Surcharge.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Surcharge</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Surcharge} obj Optional instance to populate.
     * @return {module:model/Surcharge} The populated <code>Surcharge</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Surcharge();

            if (data.hasOwnProperty('askConfirmation')) {
                obj['askConfirmation'] = ApiClient.convertToType(data['askConfirmation'], 'Boolean');
            }
            if (data.hasOwnProperty('configurations')) {
                obj['configurations'] = ApiClient.convertToType(data['configurations'], [Configuration]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Surcharge</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Surcharge</code>.
     */
    static validateJSON(data) {
        if (data['configurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['configurations'])) {
                throw new Error("Expected the field `configurations` to be an array in the JSON data but got " + data['configurations']);
            }
            // validate the optional field `configurations` (array)
            for (const item of data['configurations']) {
                Configuration.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Show the surcharge details on the terminal, so the shopper can confirm.
 * @member {Boolean} askConfirmation
 */
Surcharge.prototype['askConfirmation'] = undefined;

/**
 * Surcharge fees or percentages for specific payment methods, funding sources (credit or debit), and currencies.
 * @member {Array.<module:model/Configuration>} configurations
 */
Surcharge.prototype['configurations'] = undefined;






export default Surcharge;

