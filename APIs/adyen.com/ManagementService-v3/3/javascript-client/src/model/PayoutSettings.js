/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PayoutSettings model module.
 * @module model/PayoutSettings
 * @version 3
 */
class PayoutSettings {
    /**
     * Constructs a new <code>PayoutSettings</code>.
     * @alias module:model/PayoutSettings
     * @param id {String} The unique identifier of the payout setting.
     * @param transferInstrumentId {String} The unique identifier of the [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments) that contains the details of the bank account.
     */
    constructor(id, transferInstrumentId) { 
        
        PayoutSettings.initialize(this, id, transferInstrumentId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, transferInstrumentId) { 
        obj['id'] = id;
        obj['transferInstrumentId'] = transferInstrumentId;
    }

    /**
     * Constructs a <code>PayoutSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayoutSettings} obj Optional instance to populate.
     * @return {module:model/PayoutSettings} The populated <code>PayoutSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayoutSettings();

            if (data.hasOwnProperty('allowed')) {
                obj['allowed'] = ApiClient.convertToType(data['allowed'], 'Boolean');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('enabledFromDate')) {
                obj['enabledFromDate'] = ApiClient.convertToType(data['enabledFromDate'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'String');
            }
            if (data.hasOwnProperty('transferInstrumentId')) {
                obj['transferInstrumentId'] = ApiClient.convertToType(data['transferInstrumentId'], 'String');
            }
            if (data.hasOwnProperty('verificationStatus')) {
                obj['verificationStatus'] = ApiClient.convertToType(data['verificationStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PayoutSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PayoutSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PayoutSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['enabledFromDate'] && !(typeof data['enabledFromDate'] === 'string' || data['enabledFromDate'] instanceof String)) {
            throw new Error("Expected the field `enabledFromDate` to be a primitive type in the JSON string but got " + data['enabledFromDate']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['priority'] && !(typeof data['priority'] === 'string' || data['priority'] instanceof String)) {
            throw new Error("Expected the field `priority` to be a primitive type in the JSON string but got " + data['priority']);
        }
        // ensure the json data is a string
        if (data['transferInstrumentId'] && !(typeof data['transferInstrumentId'] === 'string' || data['transferInstrumentId'] instanceof String)) {
            throw new Error("Expected the field `transferInstrumentId` to be a primitive type in the JSON string but got " + data['transferInstrumentId']);
        }
        // ensure the json data is a string
        if (data['verificationStatus'] && !(typeof data['verificationStatus'] === 'string' || data['verificationStatus'] instanceof String)) {
            throw new Error("Expected the field `verificationStatus` to be a primitive type in the JSON string but got " + data['verificationStatus']);
        }

        return true;
    }


}

PayoutSettings.RequiredProperties = ["id", "transferInstrumentId"];

/**
 * Indicates if payouts to the bank account are allowed. This value is set automatically based on the status of the verification process. The value is:  * **true** if `verificationStatus` is **valid**. * **false** for all other values.
 * @member {Boolean} allowed
 */
PayoutSettings.prototype['allowed'] = undefined;

/**
 * Indicates if payouts to this bank account are enabled. Default: **true**.  To receive payouts into this bank account, both `enabled` and `allowed` must be **true**.
 * @member {Boolean} enabled
 */
PayoutSettings.prototype['enabled'] = undefined;

/**
 * The date when Adyen starts paying out to this bank account.  Format: [ISO 8601](https://www.w3.org/TR/NOTE-datetime), for example, **2019-11-23T12:25:28Z** or **2020-05-27T20:25:28+08:00**.  If not specified, the `enabled` field indicates if payouts are enabled for this bank account.  If a date is specified and:  * `enabled`: **true**, payouts are enabled starting the specified date. * `enabled`: **false**, payouts are disabled until the specified date. On the specified date, `enabled` changes to **true** and this field is reset to **null**.
 * @member {String} enabledFromDate
 */
PayoutSettings.prototype['enabledFromDate'] = undefined;

/**
 * The unique identifier of the payout setting.
 * @member {String} id
 */
PayoutSettings.prototype['id'] = undefined;

/**
 * Determines how long it takes for the funds to reach the bank account. Adyen pays out based on the [payout frequency](https://docs.adyen.com/account/getting-paid#payout-frequency). Depending on the currencies and banks involved in transferring the money, it may take up to three days for the payout funds to arrive in the bank account.   Possible values: * **first**: same day. * **urgent**: the next day. * **normal**: between 1 and 3 days.
 * @member {module:model/PayoutSettings.PriorityEnum} priority
 */
PayoutSettings.prototype['priority'] = undefined;

/**
 * The unique identifier of the [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments) that contains the details of the bank account.
 * @member {String} transferInstrumentId
 */
PayoutSettings.prototype['transferInstrumentId'] = undefined;

/**
 * The status of the verification process for the bank account.  Possible values: * **valid**: the verification was successful. * **pending**: the verification is in progress. * **invalid**: the information provided is not complete. * **rejected**:  there are reasons to refuse working with this entity.
 * @member {module:model/PayoutSettings.VerificationStatusEnum} verificationStatus
 */
PayoutSettings.prototype['verificationStatus'] = undefined;





/**
 * Allowed values for the <code>priority</code> property.
 * @enum {String}
 * @readonly
 */
PayoutSettings['PriorityEnum'] = {

    /**
     * value: "first"
     * @const
     */
    "first": "first",

    /**
     * value: "normal"
     * @const
     */
    "normal": "normal",

    /**
     * value: "urgent"
     * @const
     */
    "urgent": "urgent"
};


/**
 * Allowed values for the <code>verificationStatus</code> property.
 * @enum {String}
 * @readonly
 */
PayoutSettings['VerificationStatusEnum'] = {

    /**
     * value: "invalid"
     * @const
     */
    "invalid": "invalid",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "valid"
     * @const
     */
    "valid": "valid"
};



export default PayoutSettings;

