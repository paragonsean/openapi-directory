/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ManagementApi);
  }
}(this, function(expect, ManagementApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ManagementApi.ReceiptPrinting();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReceiptPrinting', function() {
    it('should create an instance of ReceiptPrinting', function() {
      // uncomment below and update the code to test ReceiptPrinting
      //var instance = new ManagementApi.ReceiptPrinting();
      //expect(instance).to.be.a(ManagementApi.ReceiptPrinting);
    });

    it('should have the property merchantApproved (base name: "merchantApproved")', function() {
      // uncomment below and update the code to test the property merchantApproved
      //var instance = new ManagementApi.ReceiptPrinting();
      //expect(instance).to.be();
    });

    it('should have the property merchantCancelled (base name: "merchantCancelled")', function() {
      // uncomment below and update the code to test the property merchantCancelled
      //var instance = new ManagementApi.ReceiptPrinting();
      //expect(instance).to.be();
    });

    it('should have the property merchantCaptureApproved (base name: "merchantCaptureApproved")', function() {
      // uncomment below and update the code to test the property merchantCaptureApproved
      //var instance = new ManagementApi.ReceiptPrinting();
      //expect(instance).to.be();
    });

    it('should have the property merchantCaptureRefused (base name: "merchantCaptureRefused")', function() {
      // uncomment below and update the code to test the property merchantCaptureRefused
      //var instance = new ManagementApi.ReceiptPrinting();
      //expect(instance).to.be();
    });

    it('should have the property merchantRefundApproved (base name: "merchantRefundApproved")', function() {
      // uncomment below and update the code to test the property merchantRefundApproved
      //var instance = new ManagementApi.ReceiptPrinting();
      //expect(instance).to.be();
    });

    it('should have the property merchantRefundRefused (base name: "merchantRefundRefused")', function() {
      // uncomment below and update the code to test the property merchantRefundRefused
      //var instance = new ManagementApi.ReceiptPrinting();
      //expect(instance).to.be();
    });

    it('should have the property merchantRefused (base name: "merchantRefused")', function() {
      // uncomment below and update the code to test the property merchantRefused
      //var instance = new ManagementApi.ReceiptPrinting();
      //expect(instance).to.be();
    });

    it('should have the property merchantVoid (base name: "merchantVoid")', function() {
      // uncomment below and update the code to test the property merchantVoid
      //var instance = new ManagementApi.ReceiptPrinting();
      //expect(instance).to.be();
    });

    it('should have the property shopperApproved (base name: "shopperApproved")', function() {
      // uncomment below and update the code to test the property shopperApproved
      //var instance = new ManagementApi.ReceiptPrinting();
      //expect(instance).to.be();
    });

    it('should have the property shopperCancelled (base name: "shopperCancelled")', function() {
      // uncomment below and update the code to test the property shopperCancelled
      //var instance = new ManagementApi.ReceiptPrinting();
      //expect(instance).to.be();
    });

    it('should have the property shopperCaptureApproved (base name: "shopperCaptureApproved")', function() {
      // uncomment below and update the code to test the property shopperCaptureApproved
      //var instance = new ManagementApi.ReceiptPrinting();
      //expect(instance).to.be();
    });

    it('should have the property shopperCaptureRefused (base name: "shopperCaptureRefused")', function() {
      // uncomment below and update the code to test the property shopperCaptureRefused
      //var instance = new ManagementApi.ReceiptPrinting();
      //expect(instance).to.be();
    });

    it('should have the property shopperRefundApproved (base name: "shopperRefundApproved")', function() {
      // uncomment below and update the code to test the property shopperRefundApproved
      //var instance = new ManagementApi.ReceiptPrinting();
      //expect(instance).to.be();
    });

    it('should have the property shopperRefundRefused (base name: "shopperRefundRefused")', function() {
      // uncomment below and update the code to test the property shopperRefundRefused
      //var instance = new ManagementApi.ReceiptPrinting();
      //expect(instance).to.be();
    });

    it('should have the property shopperRefused (base name: "shopperRefused")', function() {
      // uncomment below and update the code to test the property shopperRefused
      //var instance = new ManagementApi.ReceiptPrinting();
      //expect(instance).to.be();
    });

    it('should have the property shopperVoid (base name: "shopperVoid")', function() {
      // uncomment below and update the code to test the property shopperVoid
      //var instance = new ManagementApi.ReceiptPrinting();
      //expect(instance).to.be();
    });

  });

}));
