/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ManagementApi);
  }
}(this, function(expect, ManagementApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ManagementApi.Webhook();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Webhook', function() {
    it('should create an instance of Webhook', function() {
      // uncomment below and update the code to test Webhook
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be.a(ManagementApi.Webhook);
    });

    it('should have the property links (base name: "_links")', function() {
      // uncomment below and update the code to test the property links
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property acceptsExpiredCertificate (base name: "acceptsExpiredCertificate")', function() {
      // uncomment below and update the code to test the property acceptsExpiredCertificate
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property acceptsSelfSignedCertificate (base name: "acceptsSelfSignedCertificate")', function() {
      // uncomment below and update the code to test the property acceptsSelfSignedCertificate
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property acceptsUntrustedRootCertificate (base name: "acceptsUntrustedRootCertificate")', function() {
      // uncomment below and update the code to test the property acceptsUntrustedRootCertificate
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property accountReference (base name: "accountReference")', function() {
      // uncomment below and update the code to test the property accountReference
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property additionalSettings (base name: "additionalSettings")', function() {
      // uncomment below and update the code to test the property additionalSettings
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property certificateAlias (base name: "certificateAlias")', function() {
      // uncomment below and update the code to test the property certificateAlias
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property communicationFormat (base name: "communicationFormat")', function() {
      // uncomment below and update the code to test the property communicationFormat
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property encryptionProtocol (base name: "encryptionProtocol")', function() {
      // uncomment below and update the code to test the property encryptionProtocol
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property filterMerchantAccountType (base name: "filterMerchantAccountType")', function() {
      // uncomment below and update the code to test the property filterMerchantAccountType
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property filterMerchantAccounts (base name: "filterMerchantAccounts")', function() {
      // uncomment below and update the code to test the property filterMerchantAccounts
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property hasError (base name: "hasError")', function() {
      // uncomment below and update the code to test the property hasError
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property hasPassword (base name: "hasPassword")', function() {
      // uncomment below and update the code to test the property hasPassword
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property hmacKeyCheckValue (base name: "hmacKeyCheckValue")', function() {
      // uncomment below and update the code to test the property hmacKeyCheckValue
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property networkType (base name: "networkType")', function() {
      // uncomment below and update the code to test the property networkType
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property populateSoapActionHeader (base name: "populateSoapActionHeader")', function() {
      // uncomment below and update the code to test the property populateSoapActionHeader
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new ManagementApi.Webhook();
      //expect(instance).to.be();
    });

  });

}));
