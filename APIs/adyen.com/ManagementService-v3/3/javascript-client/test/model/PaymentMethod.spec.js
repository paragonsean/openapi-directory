/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ManagementApi);
  }
}(this, function(expect, ManagementApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ManagementApi.PaymentMethod();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PaymentMethod', function() {
    it('should create an instance of PaymentMethod', function() {
      // uncomment below and update the code to test PaymentMethod
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be.a(ManagementApi.PaymentMethod);
    });

    it('should have the property afterpayTouch (base name: "afterpayTouch")', function() {
      // uncomment below and update the code to test the property afterpayTouch
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property allowed (base name: "allowed")', function() {
      // uncomment below and update the code to test the property allowed
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property applePay (base name: "applePay")', function() {
      // uncomment below and update the code to test the property applePay
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property bcmc (base name: "bcmc")', function() {
      // uncomment below and update the code to test the property bcmc
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property businessLineId (base name: "businessLineId")', function() {
      // uncomment below and update the code to test the property businessLineId
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property cartesBancaires (base name: "cartesBancaires")', function() {
      // uncomment below and update the code to test the property cartesBancaires
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property clearpay (base name: "clearpay")', function() {
      // uncomment below and update the code to test the property clearpay
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property countries (base name: "countries")', function() {
      // uncomment below and update the code to test the property countries
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property cup (base name: "cup")', function() {
      // uncomment below and update the code to test the property cup
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property currencies (base name: "currencies")', function() {
      // uncomment below and update the code to test the property currencies
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property customRoutingFlags (base name: "customRoutingFlags")', function() {
      // uncomment below and update the code to test the property customRoutingFlags
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property diners (base name: "diners")', function() {
      // uncomment below and update the code to test the property diners
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property discover (base name: "discover")', function() {
      // uncomment below and update the code to test the property discover
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property eftposAustralia (base name: "eftpos_australia")', function() {
      // uncomment below and update the code to test the property eftposAustralia
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property giroPay (base name: "giroPay")', function() {
      // uncomment below and update the code to test the property giroPay
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property girocard (base name: "girocard")', function() {
      // uncomment below and update the code to test the property girocard
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property googlePay (base name: "googlePay")', function() {
      // uncomment below and update the code to test the property googlePay
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property ideal (base name: "ideal")', function() {
      // uncomment below and update the code to test the property ideal
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property interacCard (base name: "interac_card")', function() {
      // uncomment below and update the code to test the property interacCard
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property jcb (base name: "jcb")', function() {
      // uncomment below and update the code to test the property jcb
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property klarna (base name: "klarna")', function() {
      // uncomment below and update the code to test the property klarna
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property maestro (base name: "maestro")', function() {
      // uncomment below and update the code to test the property maestro
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property mc (base name: "mc")', function() {
      // uncomment below and update the code to test the property mc
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property mealVoucherFR (base name: "mealVoucher_FR")', function() {
      // uncomment below and update the code to test the property mealVoucherFR
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property paypal (base name: "paypal")', function() {
      // uncomment below and update the code to test the property paypal
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property reference (base name: "reference")', function() {
      // uncomment below and update the code to test the property reference
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property shopperInteraction (base name: "shopperInteraction")', function() {
      // uncomment below and update the code to test the property shopperInteraction
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property sofort (base name: "sofort")', function() {
      // uncomment below and update the code to test the property sofort
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property storeIds (base name: "storeIds")', function() {
      // uncomment below and update the code to test the property storeIds
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property swish (base name: "swish")', function() {
      // uncomment below and update the code to test the property swish
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property twint (base name: "twint")', function() {
      // uncomment below and update the code to test the property twint
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property verificationStatus (base name: "verificationStatus")', function() {
      // uncomment below and update the code to test the property verificationStatus
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property vipps (base name: "vipps")', function() {
      // uncomment below and update the code to test the property vipps
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property visa (base name: "visa")', function() {
      // uncomment below and update the code to test the property visa
      //var instance = new ManagementApi.PaymentMethod();
      //expect(instance).to.be();
    });

  });

}));
